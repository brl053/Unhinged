[
  {
    "file_path": "build/llm_integration.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "LLM integration for enhanced build system with context generation and error explanation",
    "llm_key": "Provides AI-powered build assistance, error explanation, and context generation for developer onboarding",
    "llm_map": "LLM integration layer that connects build system with existing documentation system for enhanced developer experience",
    "llm_axiom": "LLM integration must provide helpful, accurate, and contextual assistance without overwhelming developers",
    "llm_contract": "Returns structured LLM responses with build context, error explanations, and optimization suggestions",
    "llm_token": "llm-build-integration: AI-powered assistance for build system operations",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend LLM integration for enhanced build system with context generation and error explanation\n@llm-key Provides AI-powered build assistance, error explanation, and context generation for developer onboarding\n@llm-map LLM integration layer that connects build system with existing documentation system for enhanced developer experience\n@llm-axiom LLM integration must provide helpful, accurate, and contextual assistance without overwhelming developers\n@llm-contract Returns structured LLM responses with build context, error explanations, and optimization suggestions\n@llm-token llm-build-integration: AI-powered assistance for build system operations\n\nLLM Integration for Enhanced Build System\n\nIntegrates the enhanced build system with the existing LLM documentation system\nto provide:\n- Build context generation for AI assistance\n- Error explanation and troubleshooting\n- Optimization suggestions\n- Developer onboarding assistance\n- Build process documentation\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/cli.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Enhanced CLI interface for the Unhinged build system",
    "llm_key": "Provides developer-friendly command-line interface with progress indicators, build status, and LLM integration",
    "llm_map": "CLI layer that wraps the build orchestrator with enhanced user experience and developer tools",
    "llm_axiom": "CLI must provide clear feedback, helpful error messages, and efficient developer workflows",
    "llm_contract": "Returns appropriate exit codes and provides structured output for both humans and scripts",
    "llm_token": "build-cli: Command-line interface for enhanced build system",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Enhanced CLI interface for the Unhinged build system\n@llm-key Provides developer-friendly command-line interface with progress indicators, build status, and LLM integration\n@llm-map CLI layer that wraps the build orchestrator with enhanced user experience and developer tools\n@llm-axiom CLI must provide clear feedback, helpful error messages, and efficient developer workflows\n@llm-contract Returns appropriate exit codes and provides structured output for both humans and scripts\n@llm-token build-cli: Command-line interface for enhanced build system\n\nEnhanced Build System CLI\n\nProvides a developer-friendly command-line interface for the enhanced build system\nwith features like:\n- Real-time progress indicators\n- Build status monitoring\n- LLM-powered error explanation\n- Performance profiling\n- Interactive build selection\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/orchestrator.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Enhanced build orchestrator for Unhinged polyglot monorepo",
    "llm_key": "Provides intelligent dependency tracking, parallel execution, caching, and multi-language build coordination",
    "llm_map": "Central build coordination system that integrates with existing Makefile and Docker Compose workflows",
    "llm_axiom": "Build operations must be deterministic, cacheable, and provide clear feedback to developers",
    "llm_contract": "Returns BuildResult with success status, artifacts, and performance metrics",
    "llm_token": "build-orchestrator: Python service coordinating all build operations across languages",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Enhanced build orchestrator for Unhinged polyglot monorepo\n@llm-key Provides intelligent dependency tracking, parallel execution, caching, and multi-language build coordination\n@llm-map Central build coordination system that integrates with existing Makefile and Docker Compose workflows\n@llm-axiom Build operations must be deterministic, cacheable, and provide clear feedback to developers\n@llm-contract Returns BuildResult with success status, artifacts, and performance metrics\n@llm-token build-orchestrator: Python service coordinating all build operations across languages\n\nEnhanced Build Orchestrator for Unhinged Platform\n\nCoordinates builds across Kotlin, TypeScript, Python, and Protobuf with intelligent\ndependency tracking, parallel execution, and comprehensive caching.\n\nFeatures:\n- Dependency graph resolution\n- Parallel execution with resource management\n- Intelligent caching with content-based keys\n- Build performance monitoring\n- Integration with existing Makefile commands\n- LLM-powered error explanation\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/orchestrator.py",
    "line_number": 536,
    "element_name": "validate_build_configuration",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Validate build configuration at compile time\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler\nReturns list of validation errors that must be fixed before build",
    "context": "def validate_build_configuration(self) -> List[str]:"
  },
  {
    "file_path": "build/monitoring.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Build performance monitoring and metrics collection system",
    "llm_key": "Provides comprehensive build performance tracking, caching analytics, and optimization insights",
    "llm_map": "Performance monitoring system that tracks build metrics and provides optimization recommendations",
    "llm_axiom": "Performance monitoring must be lightweight and provide actionable insights for developers",
    "llm_contract": "Returns structured performance data and optimization recommendations",
    "llm_token": "build-monitoring: Performance tracking and analytics for build system",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Build performance monitoring and metrics collection system\n@llm-key Provides comprehensive build performance tracking, caching analytics, and optimization insights\n@llm-map Performance monitoring system that tracks build metrics and provides optimization recommendations\n@llm-axiom Performance monitoring must be lightweight and provide actionable insights for developers\n@llm-contract Returns structured performance data and optimization recommendations\n@llm-token build-monitoring: Performance tracking and analytics for build system\n\nBuild Performance Monitoring System\n\nProvides comprehensive monitoring and analytics for the enhanced build system:\n- Build time tracking and analysis\n- Cache performance metrics\n- Resource utilization monitoring\n- Performance trend analysis\n- Optimization recommendations\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/developer_experience.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Developer experience enhancements for the enhanced build system",
    "llm_key": "Provides developer-friendly features like progress indicators, quick commands, and better error messages",
    "llm_map": "Developer experience layer that makes the build system more accessible and productive for developers",
    "llm_axiom": "Developer experience must reduce friction and provide clear, actionable feedback",
    "llm_contract": "Returns enhanced user interfaces and developer productivity tools",
    "llm_token": "dev-experience: Developer productivity enhancements for build system",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Developer experience enhancements for the enhanced build system\n@llm-key Provides developer-friendly features like progress indicators, quick commands, and better error messages\n@llm-map Developer experience layer that makes the build system more accessible and productive for developers\n@llm-axiom Developer experience must reduce friction and provide clear, actionable feedback\n@llm-contract Returns enhanced user interfaces and developer productivity tools\n@llm-token dev-experience: Developer productivity enhancements for build system\n\nDeveloper Experience Enhancements\n\nProvides developer-friendly features for the enhanced build system:\n- Progress indicators and status displays\n- Quick setup and development commands\n- Interactive target selection\n- Build status dashboard\n- Error recovery suggestions\n- Performance insights\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/build.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Main entry point for the Unhinged build system (v1)",
    "llm_key": "Provides unified access to intelligent build orchestration with caching, parallelism, and AI assistance",
    "llm_map": "Primary build system entry point with clean v1 interface",
    "llm_axiom": "Build system must be simple, fast, and provide clear feedback",
    "llm_contract": "Provides clean v1 interface for all build operations",
    "llm_token": "build-v1: Main entry point for v1 build system",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Main entry point for the Unhinged build system (v1)\n@llm-key Provides unified access to intelligent build orchestration with caching, parallelism, and AI assistance\n@llm-map Primary build system entry point with clean v1 interface\n@llm-axiom Build system must be simple, fast, and provide clear feedback\n@llm-contract Provides clean v1 interface for all build operations\n@llm-token build-v1: Main entry point for v1 build system\n\nUnhinged Build System (v1)\n\nPrimary entry point for the consolidated build system with:\n- Intelligent caching and parallel execution\n- AI-powered development assistance\n- Performance monitoring and optimization\n- Clean, simple interface\n\nUsage:\npython build/build.py build dev-fast        # Fast development build\npython build/build.py status                # Show build status\npython build/build.py list                  # List all targets\npython build/build.py explain dev-fast      # Explain build target\n\nAuthor: Unhinged Team\nVersion: 1.0.0 (Consolidated)\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/python/run.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "python",
    "llm_legend": "Universal Python runner for Unhinged on-premise ML/AI ETL & Big Data pipelines",
    "llm_key": "Centralized Python execution with Apache stack integration and ML/AI environment",
    "llm_map": "Core Python execution engine supporting Kafka, Spark, Flink, Cassandra, Elasticsearch",
    "llm_axiom": "All Python execution must be consistent, reproducible, and ML/AI pipeline ready",
    "llm_contract": null,
    "llm_token": "python-runner: Universal Python execution for on-premise big data and ML workflows",
    "llm_context": null,
    "raw_comment": "@llm-type python-runner\n@llm-legend Universal Python runner for Unhinged on-premise ML/AI ETL & Big Data pipelines\n@llm-key Centralized Python execution with Apache stack integration and ML/AI environment\n@llm-map Core Python execution engine supporting Kafka, Spark, Flink, Cassandra, Elasticsearch\n@llm-axiom All Python execution must be consistent, reproducible, and ML/AI pipeline ready\n@llm-token python-runner: Universal Python execution for on-premise big data and ML workflows\n\nUniversal Python Runner for Unhinged System:\n- Single virtual environment for all Python execution\n- Apache stack integration (Kafka, Spark, Flink, Cassandra)\n- ML/AI pipeline support with proper environment setup\n- Consistent execution across build system, services, and ETL\n- On-premise big data processing capabilities",
    "context": ""
  },
  {
    "file_path": "build/python/run.py",
    "line_number": 33,
    "element_name": "UnhingedPythonRunner",
    "language": "python",
    "llm_type": "python",
    "llm_legend": "Centralized Python execution engine for ML/AI ETL and big data pipelines",
    "llm_key": "Universal Python runner with Apache stack integration and environment management",
    "llm_map": "Core execution engine enabling consistent Python environments across all services",
    "llm_axiom": "Python execution must be reproducible, environment-aware, and big data ready",
    "llm_contract": null,
    "llm_token": "python-executor: Production Python execution with ML/AI and big data support",
    "llm_context": null,
    "raw_comment": "@llm-type python-executor\n@llm-legend Centralized Python execution engine for ML/AI ETL and big data pipelines\n@llm-key Universal Python runner with Apache stack integration and environment management\n@llm-map Core execution engine enabling consistent Python environments across all services\n@llm-axiom Python execution must be reproducible, environment-aware, and big data ready\n@llm-token python-executor: Production Python execution with ML/AI and big data support",
    "context": "class UnhingedPythonRunner:"
  },
  {
    "file_path": "build/python/setup.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "python",
    "llm_legend": "Python environment setup for Unhinged on-premise ML/AI ETL & Big Data pipelines",
    "llm_key": "Centralized Python environment creation with Apache stack and ML/AI dependencies",
    "llm_map": "Environment setup enabling ML/AI ETL pipelines with Kafka, Spark, Flink, Cassandra",
    "llm_axiom": "Python environment must be reproducible, comprehensive, and big data ready",
    "llm_contract": null,
    "llm_token": "python-setup: Production Python environment setup for ML/AI and big data workflows",
    "llm_context": null,
    "raw_comment": "@llm-type python-setup\n@llm-legend Python environment setup for Unhinged on-premise ML/AI ETL & Big Data pipelines\n@llm-key Centralized Python environment creation with Apache stack and ML/AI dependencies\n@llm-map Environment setup enabling ML/AI ETL pipelines with Kafka, Spark, Flink, Cassandra\n@llm-axiom Python environment must be reproducible, comprehensive, and big data ready\n@llm-token python-setup: Production Python environment setup for ML/AI and big data workflows\n\nPython Environment Setup for Unhinged System:\n- Creates single virtual environment for all Python execution\n- Installs comprehensive ML/AI and big data dependencies\n- Configures Apache stack integration (Kafka, Spark, Flink)\n- Sets up development tools and Jupyter environment\n- Ensures reproducible on-premise big data processing",
    "context": ""
  },
  {
    "file_path": "build/python/setup.py",
    "line_number": 33,
    "element_name": "UnhingedPythonSetup",
    "language": "python",
    "llm_type": "python",
    "llm_legend": "Comprehensive Python environment setup for ML/AI ETL and big data processing",
    "llm_key": "Environment creation with Apache stack integration and ML/AI pipeline support",
    "llm_map": "Core setup tool enabling consistent Python environments for on-premise big data",
    "llm_axiom": "Environment setup must be reproducible, comprehensive, and failure-resistant",
    "llm_contract": null,
    "llm_token": "python-environment-setup: Production environment creation for ML/AI workflows",
    "llm_context": null,
    "raw_comment": "@llm-type python-environment-setup\n@llm-legend Comprehensive Python environment setup for ML/AI ETL and big data processing\n@llm-key Environment creation with Apache stack integration and ML/AI pipeline support\n@llm-map Core setup tool enabling consistent Python environments for on-premise big data\n@llm-axiom Environment setup must be reproducible, comprehensive, and failure-resistant\n@llm-token python-environment-setup: Production environment creation for ML/AI workflows",
    "context": "class UnhingedPythonSetup:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "tool",
    "llm_legend": "LLM context warming system for onboarding new AI agents to the Unhinged monorepo",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Provides paginated, structured summaries of codebase culture, vision, and architecture",
    "raw_comment": "@llm-type tool\n@llm-legend LLM context warming system for onboarding new AI agents to the Unhinged monorepo\n@llm-context Provides paginated, structured summaries of codebase culture, vision, and architecture",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 17,
    "element_name": "LLMContextWarmer",
    "language": "python",
    "llm_type": "class",
    "llm_legend": "Generates structured context summaries for new LLM agents joining the project",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Converts extracted comments into digestible chunks with pagination support",
    "raw_comment": "@llm-type class\n@llm-legend Generates structured context summaries for new LLM agents joining the project\n@llm-context Converts extracted comments into digestible chunks with pagination support",
    "context": "class LLMContextWarmer:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 37,
    "element_name": "generate_project_overview",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Generates comprehensive project overview from extracted comments",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Creates high-level summary perfect for LLM context warming",
    "raw_comment": "@llm-type function\n@llm-legend Generates comprehensive project overview from extracted comments\n@llm-context Creates high-level summary perfect for LLM context warming",
    "context": "def generate_project_overview(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 86,
    "element_name": "_extract_key_components",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Extract key system components with improved name resolution and cross-references",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about unknown element names and missing navigation",
    "raw_comment": "@llm-type function\n@llm-legend Extract key system components with improved name resolution and cross-references\n@llm-context Addresses LLM feedback about unknown element names and missing navigation",
    "context": "def _extract_key_components(self) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 123,
    "element_name": "paginate_comments",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Provides paginated access to all extracted comments for detailed review",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Allows LLMs to scroll through codebase comments in digestible chunks",
    "raw_comment": "@llm-type function\n@llm-legend Provides paginated access to all extracted comments for detailed review\n@llm-context Allows LLMs to scroll through codebase comments in digestible chunks",
    "context": "def paginate_comments(self, page: int = 1) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 156,
    "element_name": "_improve_element_name",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Improve element name detection from file paths when element_name is unknown",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about unknown element names in service files",
    "raw_comment": "@llm-type function\n@llm-legend Improve element name detection from file paths when element_name is unknown\n@llm-context Addresses LLM feedback about unknown element names in service files",
    "context": "def _improve_element_name(self, comment: Dict[str, Any]) -> str:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 179,
    "element_name": "_find_related_services",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Find related services through port references, API calls, and integration patterns",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about lack of cross-reference navigation capabilities",
    "raw_comment": "@llm-type function\n@llm-legend Find related services through port references, API calls, and integration patterns\n@llm-context Addresses LLM feedback about lack of cross-reference navigation capabilities",
    "context": "def _find_related_services(self, comment: Dict[str, Any]) -> List[str]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 232,
    "element_name": "_validate_context_completeness",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Validate that service and component comments have proper context information",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about null llm_context fields where context should exist",
    "raw_comment": "@llm-type function\n@llm-legend Validate that service and component comments have proper context information\n@llm-context Addresses LLM feedback about null llm_context fields where context should exist",
    "context": "def _validate_context_completeness(self, comments: List[Dict[str, Any]]) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 254,
    "element_name": "_generate_getting_started_section",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Generate getting started section with setup commands and prerequisites",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about missing getting started section in overview",
    "raw_comment": "@llm-type function\n@llm-legend Generate getting started section with setup commands and prerequisites\n@llm-context Addresses LLM feedback about missing getting started section in overview",
    "context": "def _generate_getting_started_section(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 283,
    "element_name": "_extract_dependency_information",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Extract dependency and build system information from configuration files",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about missing dependency/setup information",
    "raw_comment": "@llm-type function\n@llm-legend Extract dependency and build system information from configuration files\n@llm-context Addresses LLM feedback about missing dependency/setup information",
    "context": "def _extract_dependency_information(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 316,
    "element_name": "_validate_legend_completeness",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Validate that",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about incomplete/truncated legend entries",
    "raw_comment": "@llm-type function\n@llm-legend Validate that @llm-legend entries are complete and not truncated\n@llm-context Addresses LLM feedback about incomplete/truncated legend entries",
    "context": "def _validate_legend_completeness(self, comments: List[Dict[str, Any]]) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 351,
    "element_name": "generate_enhanced_project_overview",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Generate enhanced project overview addressing all LLM feedback for 10/10 rating",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Includes getting started, dependencies, and complete information sections",
    "raw_comment": "@llm-type function\n@llm-legend Generate enhanced project overview addressing all LLM feedback for 10/10 rating\n@llm-context Includes getting started, dependencies, and complete information sections",
    "context": "def generate_enhanced_project_overview(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "TDD test suite ensuring extraction and validation correctness",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Defines expected behavior for all LLM comment processing functions",
    "raw_comment": "\n@llm-type test\n@llm-legend TDD test suite ensuring extraction and validation correctness\n@llm-context Defines expected behavior for all LLM comment processing functions",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 41,
    "element_name": "test_extract_llm_context_from_python",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "from Python docstring.",
    "raw_comment": "Test extraction of @llm-context from Python docstring.",
    "context": "def test_extract_llm_context_from_python(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 42,
    "element_name": "test_extract_llm_context_from_python",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Processes user requests",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Handles HTTP requests with rate limiting and caching \"\"\" def process(): pass",
    "raw_comment": "\"\"\"\n@llm-type service\n@llm-legend Processes user requests\n@llm-context Handles HTTP requests with rate limiting and caching\n\"\"\"\ndef process():\npass",
    "context": "def test_extract_llm_context_from_python(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 69,
    "element_name": "test_extract_llm_context_from_typescript",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "from TypeScript JSDoc.",
    "raw_comment": "Test extraction of @llm-context from TypeScript JSDoc.",
    "context": "def test_extract_llm_context_from_typescript(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 70,
    "element_name": "test_extract_llm_context_from_typescript",
    "language": "python",
    "llm_type": "component",
    "llm_legend": "React component for user authentication *",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Manages login state and JWT token refresh */ export const AuthComponent = () => { return null; };",
    "raw_comment": "/**\n* @llm-type component\n* @llm-legend React component for user authentication\n* @llm-context Manages login state and JWT token refresh\n*/\nexport const AuthComponent = () => {\nreturn null;\n};",
    "context": "def test_extract_llm_context_from_typescript(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 90,
    "element_name": "test_parse_llm_tags_with_context",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Test parsing of all tags including @llm-context.",
    "context": "def test_parse_llm_tags_with_context(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 91,
    "element_name": "test_parse_llm_tags_with_context",
    "language": "python",
    "llm_type": "validator",
    "llm_legend": "Validates user input",
    "llm_key": "Checks format and business rules",
    "llm_map": "Part of validation pipeline",
    "llm_axiom": "Never trust user input",
    "llm_contract": "Returns ValidationResult or throws",
    "llm_token": "user-validator",
    "llm_context": "Integrates with form handling and error display",
    "raw_comment": "@llm-type validator\n@llm-legend Validates user input\n@llm-key Checks format and business rules\n@llm-map Part of validation pipeline\n@llm-axiom Never trust user input\n@llm-contract Returns ValidationResult or throws\n@llm-token user-validator\n@llm-context Integrates with form handling and error display",
    "context": "def test_parse_llm_tags_with_context(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 142,
    "element_name": "test_validate_comment_with_context",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Test validation accepts @llm-context.",
    "context": "def test_validate_comment_with_context(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 203,
    "element_name": "TestLLMContextWarmerImprovements",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test suite for LLM context warmer improvements based on feedback",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Validates element name detection, cross-references, and context completeness",
    "raw_comment": "@llm-type test\n@llm-legend Test suite for LLM context warmer improvements based on feedback\n@llm-context Validates element name detection, cross-references, and context completeness",
    "context": "class TestLLMContextWarmerImprovements(unittest.TestCase):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 210,
    "element_name": "test_element_name_detection_from_service_path",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test element name extraction from services directory paths",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about unknown element names in service files",
    "raw_comment": "@llm-type test\n@llm-legend Test element name extraction from services directory paths\n@llm-context Addresses LLM feedback about unknown element names in service files",
    "context": "def test_element_name_detection_from_service_path(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 241,
    "element_name": "test_element_name_detection_from_python_file",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test element name extraction from Python file names",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Ensures Python modules get proper names instead of unknown",
    "raw_comment": "@llm-type test\n@llm-legend Test element name extraction from Python file names\n@llm-context Ensures Python modules get proper names instead of unknown",
    "context": "def test_element_name_detection_from_python_file(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 270,
    "element_name": "test_find_related_services_by_port_references",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test cross-reference detection between services using port numbers",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about lack of cross-reference navigation",
    "raw_comment": "@llm-type test\n@llm-legend Test cross-reference detection between services using port numbers\n@llm-context Addresses LLM feedback about lack of cross-reference navigation",
    "context": "def test_find_related_services_by_port_references(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 315,
    "element_name": "test_context_completeness_validation",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test validation of context completeness for service components",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about null llm_context fields where context should exist",
    "raw_comment": "@llm-type test\n@llm-legend Test validation of context completeness for service components\n@llm-context Addresses LLM feedback about null llm_context fields where context should exist",
    "context": "def test_context_completeness_validation(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 357,
    "element_name": "test_pagination_data_integrity",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test that pagination maintains complete data integrity across pages",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Ensures no data loss or corruption when browsing paginated comments",
    "raw_comment": "@llm-type test\n@llm-legend Test that pagination maintains complete data integrity across pages\n@llm-context Ensures no data loss or corruption when browsing paginated comments",
    "context": "def test_pagination_data_integrity(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 418,
    "element_name": "TestLLMContextWarmerEnhancements",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test suite for final LLM context warmer enhancements addressing 9/10 feedback",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Validates getting started section, dependency info, and complete legend handling",
    "raw_comment": "@llm-type test\n@llm-legend Test suite for final LLM context warmer enhancements addressing 9/10 feedback\n@llm-context Validates getting started section, dependency info, and complete legend handling",
    "context": "class TestLLMContextWarmerEnhancements(unittest.TestCase):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 425,
    "element_name": "test_getting_started_section_generation",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test generation of getting started section with setup and dependency information",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about missing getting started section in overview",
    "raw_comment": "@llm-type test\n@llm-legend Test generation of getting started section with setup and dependency information\n@llm-context Addresses LLM feedback about missing getting started section in overview",
    "context": "def test_getting_started_section_generation(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 469,
    "element_name": "test_dependency_information_extraction",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test extraction of dependency and setup information from build files",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about missing dependency/setup information in overview",
    "raw_comment": "@llm-type test\n@llm-legend Test extraction of dependency and setup information from build files\n@llm-context Addresses LLM feedback about missing dependency/setup information in overview",
    "context": "def test_dependency_information_extraction(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 506,
    "element_name": "test_complete_legend_validation",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test validation that legends are complete and not truncated",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about incomplete/truncated",
    "raw_comment": "@llm-type test\n@llm-legend Test validation that legends are complete and not truncated\n@llm-context Addresses LLM feedback about incomplete/truncated @llm-legend entries",
    "context": "def test_complete_legend_validation(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 549,
    "element_name": "test_enhanced_overview_with_getting_started",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test that enhanced overview includes getting started and dependency sections",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Validates complete overview addresses all LLM feedback points for 10/10 rating",
    "raw_comment": "@llm-type test\n@llm-legend Test that enhanced overview includes getting started and dependency sections\n@llm-context Validates complete overview addresses all LLM feedback points for 10/10 rating",
    "context": "def test_enhanced_overview_with_getting_started(self):"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "LLM Comment Extraction System\n\nParses @llm-* tags from code comments across all programming languages\nin the Unhinged monorepo and generates architectural documentation.",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 132,
    "element_name": "_parse_llm_tags",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Parse @llm-* tags from comment text",
    "context": "def _parse_llm_tags(self, comment_text: str, file_path: str, line_number: int,"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 243,
    "element_name": "_parse_llm_tags",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Parse @llm-* tags from Python docstring",
    "context": "def _parse_llm_tags(self, comment_text: str, file_path: str, line_number: int,"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 485,
    "element_name": "generate_architectural_overview",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": "comments",
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Generate architectural overview from @llm-map comments",
    "context": "def generate_architectural_overview(self) -> str:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 573,
    "element_name": "extract_comments_from_file",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Extracts all",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing individual file processing",
    "raw_comment": "\n@llm-type function\n@llm-legend Extracts all @llm-* comments from a single source file using appropriate language parser\n@llm-context TDD interface function for testing individual file processing",
    "context": "def extract_comments_from_file(file_path: str) -> List[LLMComment]:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 594,
    "element_name": "extract_comments_from_codebase",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Extracts all",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing full codebase processing",
    "raw_comment": "\n@llm-type function\n@llm-legend Extracts all @llm-* comments from entire codebase using multi-language parsers\n@llm-context TDD interface function for testing full codebase processing",
    "context": "def extract_comments_from_codebase(root_path: Path) -> List[LLMComment]:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 604,
    "element_name": "parse_llm_tags",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Parses individual",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing tag parsing logic",
    "raw_comment": "\n@llm-type function\n@llm-legend Parses individual @llm-* tags from comment text using regex patterns\n@llm-context TDD interface function for testing tag parsing logic",
    "context": "def parse_llm_tags(text: str) -> Dict[str, str]:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 634,
    "element_name": "save_extraction_results",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Saves extracted comments to JSON with metadata",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing result serialization",
    "raw_comment": "\n@llm-type function\n@llm-legend Saves extracted comments to JSON with metadata\n@llm-context TDD interface function for testing result serialization",
    "context": "def save_extraction_results(comments: List[LLMComment], output_path: Path) -> Dict:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "LLM Comment Validation System\n\nValidates consistency and quality of @llm-* comments across the codebase.\nIntegrates with the existing documentation validation workflow.",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 287,
    "element_name": "validate_comment",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Validates individual comment for completeness and quality",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing single comment validation",
    "raw_comment": "\n@llm-type function\n@llm-legend Validates individual comment for completeness and quality\n@llm-context TDD interface function for testing single comment validation",
    "context": "def validate_comment(comment) -> List[Dict]:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 299,
    "element_name": "validate_all_comments",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Validates batch of comments and returns summary",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing batch validation",
    "raw_comment": "\n@llm-type function\n@llm-legend Validates batch of comments and returns summary\n@llm-context TDD interface function for testing batch validation",
    "context": "def validate_all_comments(comments: List) -> Dict:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 324,
    "element_name": "check_required_tags",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Validates comment has all required tags for its type",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing required tag validation",
    "raw_comment": "\n@llm-type function\n@llm-legend Validates comment has all required tags for its type\n@llm-context TDD interface function for testing required tag validation",
    "context": "def check_required_tags(comment) -> List[Dict]:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 351,
    "element_name": "check_tag_format",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Validates tag content meets quality standards",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing tag format validation",
    "raw_comment": "\n@llm-type function\n@llm-legend Validates tag content meets quality standards\n@llm-context TDD interface function for testing tag format validation",
    "context": "def check_tag_format(comment) -> List[Dict]:"
  },
  {
    "file_path": "build/docs-generation/llm_types.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "contract",
    "llm_legend": "Defines data structures and interfaces for LLM comment extraction/validation",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Central type system ensuring consistency across extraction and validation pipeline",
    "raw_comment": "\n@llm-type contract\n@llm-legend Defines data structures and interfaces for LLM comment extraction/validation\n@llm-context Central type system ensuring consistency across extraction and validation pipeline",
    "context": ""
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "validation",
    "llm_legend": "Comprehensive validation script for mobile UI framework integration",
    "llm_key": "Validates complete mobile UI framework integration with Unhinged architecture",
    "llm_map": "Validation script for mobile UI framework in Unhinged build system",
    "llm_axiom": "Validation must be thorough, reliable, and provide actionable feedback",
    "llm_contract": "Provides comprehensive validation of mobile UI framework integration",
    "llm_token": "mobile_ui_validation: Complete integration validation for mobile-responsive UI framework",
    "llm_context": null,
    "raw_comment": "@llm-type validation-script\n@llm-legend Comprehensive validation script for mobile UI framework integration\n@llm-key Validates complete mobile UI framework integration with Unhinged architecture\n@llm-map Validation script for mobile UI framework in Unhinged build system\n@llm-axiom Validation must be thorough, reliable, and provide actionable feedback\n@llm-contract Provides comprehensive validation of mobile UI framework integration\n@llm-token mobile_ui_validation: Complete integration validation for mobile-responsive UI framework",
    "context": ""
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 28,
    "element_name": "ValidationLevel",
    "language": "python",
    "llm_type": "enum",
    "llm_legend": "Validation severity levels",
    "llm_key": "Defines validation result severity for proper reporting",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type enum\n@llm-legend Validation severity levels\n@llm-key Defines validation result severity for proper reporting",
    "context": "class ValidationLevel(Enum):"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 41,
    "element_name": "ValidationResult",
    "language": "python",
    "llm_type": "result",
    "llm_legend": "Validation result with detailed information",
    "llm_key": "Contains validation outcome and actionable feedback",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type result-class\n@llm-legend Validation result with detailed information\n@llm-key Contains validation outcome and actionable feedback",
    "context": "class ValidationResult:"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 55,
    "element_name": "MobileUIIntegrationValidator",
    "language": "python",
    "llm_type": "validator",
    "llm_legend": "Comprehensive validator for mobile UI framework integration",
    "llm_key": "Validates all aspects of mobile UI framework integration with Unhinged",
    "llm_map": "Central validation system for mobile UI framework integration",
    "llm_axiom": "Validation must be comprehensive and provide actionable feedback",
    "llm_contract": "Validates mobile UI framework integration across all components",
    "llm_token": "MobileUIIntegrationValidator: Complete integration validation system",
    "llm_context": null,
    "raw_comment": "@llm-type validator-class\n@llm-legend Comprehensive validator for mobile UI framework integration\n@llm-key Validates all aspects of mobile UI framework integration with Unhinged\n@llm-map Central validation system for mobile UI framework integration\n@llm-axiom Validation must be comprehensive and provide actionable feedback\n@llm-contract Validates mobile UI framework integration across all components\n@llm-token MobileUIIntegrationValidator: Complete integration validation system\n\nComprehensive validator for mobile UI framework integration.\nValidates build system, components, tools, themes, and documentation.",
    "context": "class MobileUIIntegrationValidator:"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 97,
    "element_name": "validate_all",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Run complete validation suite",
    "llm_key": "Executes all validation checks and returns overall success status",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Run complete validation suite\n@llm-key Executes all validation checks and returns overall success status",
    "context": "def validate_all(self) -> bool:"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 121,
    "element_name": "_validate_directory_structure",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Validate required directory structure exists",
    "llm_key": "Ensures all necessary directories are present",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Validate required directory structure exists\n@llm-key Ensures all necessary directories are present",
    "context": "def _validate_directory_structure(self):"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 148,
    "element_name": "_validate_file_existence",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Validate required files exist",
    "llm_key": "Ensures all necessary files are present",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Validate required files exist\n@llm-key Ensures all necessary files are present",
    "context": "def _validate_file_existence(self):"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 175,
    "element_name": "_validate_python_imports",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Validate Python module imports work correctly",
    "llm_key": "Ensures all mobile UI modules can be imported without errors",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Validate Python module imports work correctly\n@llm-key Ensures all mobile UI modules can be imported without errors",
    "context": "def _validate_python_imports(self):"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 220,
    "element_name": "_validate_build_system",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Validate build system integration",
    "llm_key": "Ensures mobile UI builder integrates correctly with build system",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Validate build system integration\n@llm-key Ensures mobile UI builder integrates correctly with build system",
    "context": "def _validate_build_system(self):"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 268,
    "element_name": "_validate_component_library",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Validate component library functionality",
    "llm_key": "Ensures all UI components can be created and used",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Validate component library functionality\n@llm-key Ensures all UI components can be created and used",
    "context": "def _validate_component_library(self):"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 319,
    "element_name": "_validate_tool_integration",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Validate tool integration with mobile UI framework",
    "llm_key": "Ensures tools can use mobile UI framework correctly",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Validate tool integration with mobile UI framework\n@llm-key Ensures tools can use mobile UI framework correctly",
    "context": "def _validate_tool_integration(self):"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 379,
    "element_name": "_validate_theme_system",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Validate enhanced theme system",
    "llm_key": "Ensures theme system works with mobile UI framework",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Validate enhanced theme system\n@llm-key Ensures theme system works with mobile UI framework",
    "context": "def _validate_theme_system(self):"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 429,
    "element_name": "_validate_documentation",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Validate documentation completeness",
    "llm_key": "Ensures documentation is present and comprehensive",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Validate documentation completeness\n@llm-key Ensures documentation is present and comprehensive",
    "context": "def _validate_documentation(self):"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 472,
    "element_name": "_validate_tests",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Validate test suite exists and can run",
    "llm_key": "Ensures integration tests are present and functional",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Validate test suite exists and can run\n@llm-key Ensures integration tests are present and functional",
    "context": "def _validate_tests(self):"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 519,
    "element_name": "_validate_generated_assets",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Validate generated assets can be created",
    "llm_key": "Ensures build system can generate required assets",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Validate generated assets can be created\n@llm-key Ensures build system can generate required assets",
    "context": "def _validate_generated_assets(self):"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 581,
    "element_name": "_generate_validation_report",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Generate comprehensive validation report",
    "llm_key": "Creates detailed report of validation results with actionable feedback",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Generate comprehensive validation report\n@llm-key Creates detailed report of validation results with actionable feedback",
    "context": "def _generate_validation_report(self) -> bool:"
  },
  {
    "file_path": "build/scripts/validate_mobile_ui_integration.py",
    "line_number": 654,
    "element_name": "main",
    "language": "python",
    "llm_type": "main",
    "llm_legend": "Main entry point for mobile UI integration validation",
    "llm_key": "Executes comprehensive validation and returns appropriate exit code",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type main-function\n@llm-legend Main entry point for mobile UI integration validation\n@llm-key Executes comprehensive validation and returns appropriate exit code",
    "context": "def main():"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Automated LLM documentation header enforcement across all source files",
    "llm_key": "Validates and injects standardized",
    "llm_map": "Build-time tool ensuring documentation consistency across the entire codebase",
    "llm_axiom": "All source files must have",
    "llm_contract": "Fails build if files lack proper documentation headers",
    "llm_token": "llm-docs-enforcer: Automated documentation header validation and injection",
    "llm_context": null,
    "raw_comment": "@llm-type build-tool\n@llm-legend Automated LLM documentation header enforcement across all source files\n@llm-key Validates and injects standardized @llm- headers into Python, Kotlin, and other source files\n@llm-map Build-time tool ensuring documentation consistency across the entire codebase\n@llm-axiom All source files must have @llm- documentation headers for AI comprehension\n@llm-contract Fails build if files lack proper documentation headers\n@llm-token llm-docs-enforcer: Automated documentation header validation and injection",
    "context": ""
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 21,
    "element_name": "LLMDocsEnforcer",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Enforces LLM documentation standards across all source files.\n\nValidates and injects @llm- headers into source files to ensure\nconsistent documentation for AI comprehension.",
    "context": "class LLMDocsEnforcer:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 49,
    "element_name": "scan_files",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Scan directories for source files requiring @llm- headers.",
    "context": "def scan_files(self, directories: List[str]) -> List[Path]:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 71,
    "element_name": "_should_process_file",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Determine if file should be processed for @llm- headers.",
    "context": "def _should_process_file(self, file_path: Path) -> bool:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 90,
    "element_name": "validate_file",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Validate if file has proper @llm- headers.",
    "context": "def validate_file(self, file_path: Path) -> Tuple[bool, List[str]]:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 107,
    "element_name": "inject_headers",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Inject @llm- headers into file if missing.",
    "context": "def inject_headers(self, file_path: Path, file_type: str = None) -> bool:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 145,
    "element_name": "_generate_header",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Generate appropriate @llm- header for file.",
    "context": "def _generate_header(self, file_path: Path, file_type: str) -> str:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 170,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_legend": "{file_name} - {purpose}",
    "llm_key": "Core functionality for {file_path.stem}",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "{file_path.stem}: {purpose}",
    "llm_context": null,
    "raw_comment": "@llm-type {llm_type}\n@llm-legend {file_name} - {purpose}\n@llm-key Core functionality for {file_path.stem}\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token {file_path.stem}: {purpose}",
    "context": ""
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 180,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_legend": "{file_name} - {purpose} {line_comment}",
    "llm_key": "Core functionality for {file_path.stem} {line_comment}",
    "llm_map": "Part of the Unhinged system architecture {line_comment}",
    "llm_axiom": "Maintains system independence and architectural compliance {line_comment}",
    "llm_contract": "Provides standardized interface for system integration {line_comment}",
    "llm_token": "{file_path.stem}: {purpose}",
    "llm_context": null,
    "raw_comment": "{line_comment} @llm-type {llm_type}\n{line_comment} @llm-legend {file_name} - {purpose}\n{line_comment} @llm-key Core functionality for {file_path.stem}\n{line_comment} @llm-map Part of the Unhinged system architecture\n{line_comment} @llm-axiom Maintains system independence and architectural compliance\n{line_comment} @llm-contract Provides standardized interface for system integration\n{line_comment} @llm-token {file_path.stem}: {purpose}",
    "context": ""
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 191,
    "element_name": "enforce_compliance",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Enforce @llm- documentation compliance across directories.",
    "context": "def enforce_compliance(self, directories: List[str], fix: bool = False) -> bool:"
  },
  {
    "file_path": "build/config/build-config.yml",
    "line_number": 2,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "build",
    "llm_legend": "Main build configuration for Unhinged platform",
    "llm_key": "Defines build targets, dependencies, and orchestration settings",
    "llm_map": "Central configuration for build system orchestration",
    "llm_axiom": "Build configuration must maintain system independence",
    "llm_contract": "Provides build target definitions and dependency management",
    "llm_token": "build-config: Central build configuration for Unhinged platform",
    "llm_context": null,
    "raw_comment": "@llm-type build-configuration\n@llm-legend Main build configuration for Unhinged platform\n@llm-key Defines build targets, dependencies, and orchestration settings\n@llm-map Central configuration for build system orchestration\n@llm-axiom Build configuration must maintain system independence\n@llm-contract Provides build target definitions and dependency management\n@llm-token build-config: Central build configuration for Unhinged platform",
    "context": ""
  },
  {
    "file_path": "build/modules/typescript_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "TypeScript/npm build module with webpack optimization and hot reloading",
    "llm_key": "Provides optimized npm builds with webpack, hot module replacement, and intelligent caching",
    "llm_map": "TypeScript build module that integrates with npm/webpack build system and provides enhanced caching",
    "llm_axiom": "TypeScript builds must support hot reloading for development and optimization for production",
    "llm_contract": "Returns BuildModuleResult with JS bundle artifacts and build metrics",
    "llm_token": "typescript-builder: npm/webpack-based build module for TypeScript/React projects",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend TypeScript/npm build module with webpack optimization and hot reloading\n@llm-key Provides optimized npm builds with webpack, hot module replacement, and intelligent caching\n@llm-map TypeScript build module that integrates with npm/webpack build system and provides enhanced caching\n@llm-axiom TypeScript builds must support hot reloading for development and optimization for production\n@llm-contract Returns BuildModuleResult with JS bundle artifacts and build metrics\n@llm-token typescript-builder: npm/webpack-based build module for TypeScript/React projects\n\nTypeScript/npm Build Module\n\nProvides optimized builds for TypeScript projects using npm/webpack with:\n- Hot module replacement for development\n- Bundle optimization for production\n- Source map generation\n- Dependency analysis\n- Asset management\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Static HTML registry generation module for control plane browser interface",
    "llm_key": "Scans control/static_html directory and generates JavaScript registry following BuildModule interface",
    "llm_map": "Integrates with existing build orchestrator as specialized module for static asset management",
    "llm_axiom": "Must follow BuildModule contract and provide caching, validation, and artifact management",
    "llm_contract": "Implements BuildModule interface with build(), cache_key(), and validate() methods",
    "llm_token": "registry-builder: Build module for static HTML file registry generation",
    "llm_context": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Static HTML registry generation module for control plane browser interface\n@llm-key Scans control/static_html directory and generates JavaScript registry following BuildModule interface\n@llm-map Integrates with existing build orchestrator as specialized module for static asset management\n@llm-axiom Must follow BuildModule contract and provide caching, validation, and artifact management\n@llm-contract Implements BuildModule interface with build(), cache_key(), and validate() methods\n@llm-token registry-builder: Build module for static HTML file registry generation\n\nRegistry Builder Module\n\nSpecialized build module that scans the control/static_html directory and generates\na JavaScript registry file for browser consumption. Integrates with the existing\nbuild orchestrator to provide caching, dependency tracking, and performance monitoring.\n\nFeatures:\n- Recursive HTML file discovery\n- Metadata extraction from HTML files\n- JavaScript registry generation\n- Content-based caching\n- Build artifact management\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 47,
    "element_name": "RegistryBuilder",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Generates JavaScript registry of static HTML files for browser navigation",
    "llm_key": "Scans filesystem, extracts HTML metadata, generates registry.js with kawaii ASCII TOC",
    "llm_map": "Integrates with build orchestrator for caching and dependency management",
    "llm_axiom": "Registry must be generated before browser access to ensure accurate file discovery",
    "llm_contract": "Returns BuildResult with registry.js artifact or error details",
    "llm_token": "static-html-registry: Browser-consumable file registry for navigation",
    "llm_context": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Generates JavaScript registry of static HTML files for browser navigation\n@llm-key Scans filesystem, extracts HTML metadata, generates registry.js with kawaii ASCII TOC\n@llm-map Integrates with build orchestrator for caching and dependency management\n@llm-axiom Registry must be generated before browser access to ensure accurate file discovery\n@llm-contract Returns BuildResult with registry.js artifact or error details\n@llm-token static-html-registry: Browser-consumable file registry for navigation",
    "context": "class RegistryBuilder(BuildModule):"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 62,
    "element_name": "can_handle",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Determines if this module can handle the given build context",
    "llm_key": "Checks for registry-related target names and static_html directory existence",
    "llm_map": "Called by build orchestrator during module selection phase",
    "llm_axiom": null,
    "llm_contract": "Returns True for registry targets, False otherwise",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Determines if this module can handle the given build context\n@llm-key Checks for registry-related target names and static_html directory existence\n@llm-map Called by build orchestrator during module selection phase\n@llm-contract Returns True for registry targets, False otherwise",
    "context": "def can_handle(self, context: BuildContext) -> bool:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 76,
    "element_name": "get_dependencies",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Returns list of files that affect registry generation",
    "llm_key": "Scans control/static_html for all HTML files to establish dependencies",
    "llm_map": "Used by build orchestrator for cache invalidation and dependency tracking",
    "llm_axiom": null,
    "llm_contract": "Returns list of file paths that trigger registry regeneration when changed",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Returns list of files that affect registry generation\n@llm-key Scans control/static_html for all HTML files to establish dependencies\n@llm-map Used by build orchestrator for cache invalidation and dependency tracking\n@llm-contract Returns list of file paths that trigger registry regeneration when changed",
    "context": "def get_dependencies(self, context: BuildContext) -> List[str]:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 94,
    "element_name": "calculate_cache_key",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Generates content-based cache key for registry generation",
    "llm_key": "Combines file modification times and content hashes of all HTML files",
    "llm_map": "Used by build orchestrator for intelligent cache invalidation",
    "llm_axiom": null,
    "llm_contract": "Returns stable cache key that changes only when HTML files change",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Generates content-based cache key for registry generation\n@llm-key Combines file modification times and content hashes of all HTML files\n@llm-map Used by build orchestrator for intelligent cache invalidation\n@llm-contract Returns stable cache key that changes only when HTML files change",
    "context": "def calculate_cache_key(self, context: BuildContext) -> str:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 121,
    "element_name": "extract_html_metadata",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Extracts title, description, and metadata from HTML file",
    "llm_key": "Parses HTML content using regex to find title and meta tags",
    "llm_map": "Helper function for registry generation process",
    "llm_axiom": null,
    "llm_contract": "Returns metadata dict with title, description, category, and file info",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Extracts title, description, and metadata from HTML file\n@llm-key Parses HTML content using regex to find title and meta tags\n@llm-map Helper function for registry generation process\n@llm-contract Returns metadata dict with title, description, category, and file info",
    "context": "def extract_html_metadata(self, file_path: Path) -> Dict[str, any]:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 189,
    "element_name": "scan_static_html_directory",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Recursively scans control/static_html for HTML files and extracts metadata",
    "llm_key": "Walks filesystem tree, processes each HTML file, builds registry dictionary",
    "llm_map": "Core scanning function that builds the complete file registry",
    "llm_axiom": null,
    "llm_contract": "Returns registry dict with absolute paths as keys and metadata as values",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Recursively scans control/static_html for HTML files and extracts metadata\n@llm-key Walks filesystem tree, processes each HTML file, builds registry dictionary\n@llm-map Core scanning function that builds the complete file registry\n@llm-contract Returns registry dict with absolute paths as keys and metadata as values",
    "context": "def scan_static_html_directory(self, project_root: Path) -> Dict[str, Dict]:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 217,
    "element_name": "build_file_structure",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Builds hierarchical file structure for table-of-contents navigation",
    "llm_key": "Scans control/static_html directory and creates nested structure with metadata",
    "llm_map": "Generates browser-consumable file tree for navigation components",
    "llm_axiom": null,
    "llm_contract": "Returns nested dict with directories and files organized hierarchically",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Builds hierarchical file structure for table-of-contents navigation\n@llm-key Scans control/static_html directory and creates nested structure with metadata\n@llm-map Generates browser-consumable file tree for navigation components\n@llm-contract Returns nested dict with directories and files organized hierarchically",
    "context": "def build_file_structure(self, project_root: Path) -> Dict:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 284,
    "element_name": "generate_registry_js",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Generates JavaScript registry file with helper functions and kawaii ASCII TOC",
    "llm_key": "Creates JavaScript module with registry object and utility functions",
    "llm_map": "Converts Python registry dict to browser-consumable JavaScript",
    "llm_axiom": null,
    "llm_contract": "Returns valid JavaScript code with UNHINGED_REGISTRY global",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Generates JavaScript registry file with helper functions and kawaii ASCII TOC\n@llm-key Creates JavaScript module with registry object and utility functions\n@llm-map Converts Python registry dict to browser-consumable JavaScript\n@llm-contract Returns valid JavaScript code with UNHINGED_REGISTRY global",
    "context": "def generate_registry_js(self, registry: Dict[str, Dict], file_structure: Dict = None) -> str:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 291,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config",
    "llm_legend": "Global registry of static HTML files for browser navigation *",
    "llm_key": "Auto-generated from filesystem scan, provides metadata for each HTML file *",
    "llm_map": "Used by index.html and navigation components for file discovery *",
    "llm_axiom": "Registry must be regenerated whenever HTML files are added/removed/modified *",
    "llm_contract": "Provides consistent interface for file metadata and navigation *",
    "llm_token": "unhinged-registry: Complete file registry for static HTML interface */ window.UNHINGED_REGISTRY = {json.dumps(registry, indent=2)};",
    "llm_context": null,
    "raw_comment": "// Generated at: {datetime.now().isoformat()}\n// Run 'make start' to regenerate\n\n/**\n* @llm-type config\n* @llm-legend Global registry of static HTML files for browser navigation\n* @llm-key Auto-generated from filesystem scan, provides metadata for each HTML file\n* @llm-map Used by index.html and navigation components for file discovery\n* @llm-axiom Registry must be regenerated whenever HTML files are added/removed/modified\n* @llm-contract Provides consistent interface for file metadata and navigation\n* @llm-token unhinged-registry: Complete file registry for static HTML interface\n*/\nwindow.UNHINGED_REGISTRY = {json.dumps(registry, indent=2)};\n\n/**\n* @llm-type config\n* @llm-legend Hierarchical file structure for table-of-contents navigation\n* @llm-key Auto-generated directory tree with file metadata for browser navigation\n* @llm-map Used by table-of-contents.html for dynamic file structure display\n* @llm-axiom File structure regenerated on every make start to reflect current filesystem\n* @llm-contract Provides nested directory structure with file metadata\n* @llm-token unhinged-file-structure: Complete directory tree for navigation\n*/\nwindow.UNHINGED_FILE_STRUCTURE = {json.dumps(file_structure or {}, indent=2)};\n\n// Helper functions for registry access\nwindow.getRegistryEntry = function(path) {{\nreturn window.UNHINGED_REGISTRY[path] || null;\n}};\n\nwindow.getAllFiles = function() {{\nreturn Object.keys(window.UNHINGED_REGISTRY);\n}};\n\nwindow.getFilesByCategory = function(category) {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => meta.category === category)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\nwindow.getExistingFiles = function() {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => meta.exists)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\nwindow.getMissingFiles = function() {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => !meta.exists)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\n// Kawaii ASCII TOC generator\nwindow.generateKawaiiTOC = function() {{\nconst existing = window.getExistingFiles();\nconst missing = window.getMissingFiles();\n\nlet toc = `\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502  \ud83c\udf38 Unhinged Static HTML Files \ud83c\udf38  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\ud83d\udcc1 control/static_html/\n`;\n\nexisting.forEach(file => {{\ntoc += `  \u2705 ${{file.title}}\\\\n`;\ntoc += `     \ud83d\udcc4 ${{file.path.split('/').pop()}}\\\\n`;\nif (file.description) {{\ntoc += `     \ud83d\udcad ${{file.description}}\\\\n`;\n}}\ntoc += `\\\\n`;\n}});\n\nif (missing.length > 0) {{\ntoc += `\\\\n\ud83d\udea8 Missing Files:\\\\n`;\nmissing.forEach(file => {{\ntoc += `  \u274c ${{file.title}}\\\\n`;\ntoc += `     \ud83d\udcc4 ${{file.path.split('/').pop()}}\\\\n`;\ntoc += `     \ud83d\udcad File not found - please create!\\\\n\\\\n`;\n}});\n}}\n\nreturn toc;\n}};\n\n// Helper functions for file structure access\nwindow.getFileStructure = function() {{\nreturn window.UNHINGED_FILE_STRUCTURE;\n}};\n\nwindow.getDirectoryContents = function(path) {{\nconst parts = path.split('/').filter(p => p);\nlet current = window.UNHINGED_FILE_STRUCTURE;\n\nfor (const part of parts) {{\nif (current && current[part] && current[part].children) {{\ncurrent = current[part].children;\n}} else {{\nreturn null;\n}}\n}}\n\nreturn current;\n}};\n\nwindow.findFilesByPattern = function(pattern) {{\nconst regex = new RegExp(pattern, 'i');\nconst results = [];\n\nfunction searchTree(node, path = '') {{\nif (!node || typeof node !== 'object') return;\n\nObject.entries(node).forEach(([name, item]) => {{\nconst fullPath = path ? `${{path}}/${{name}}` : name;\n\nif (item.type === 'file' && regex.test(name)) {{\nresults.push({{\npath: fullPath,\nname: name,\n...item\n}});\n}} else if (item.type === 'directory' && item.children) {{\nsearchTree(item.children, fullPath);\n}}\n}});\n}}\n\nsearchTree(window.UNHINGED_FILE_STRUCTURE);\nreturn results;\n}};\n\nconsole.log('\ud83d\udccb Unhinged Registry loaded with', Object.keys(window.UNHINGED_REGISTRY).length, 'files');\nconsole.log('\ud83d\uddc2\ufe0f File structure loaded with', Object.keys(window.UNHINGED_FILE_STRUCTURE).length, 'root directories');",
    "context": ""
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 431,
    "element_name": "build",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Main build function that generates the static HTML registry",
    "llm_key": "Scans filesystem, generates JavaScript registry, writes output file",
    "llm_map": "Called by build orchestrator to execute registry generation",
    "llm_axiom": null,
    "llm_contract": "Returns BuildModuleResult with success status and generated artifacts",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Main build function that generates the static HTML registry\n@llm-key Scans filesystem, generates JavaScript registry, writes output file\n@llm-map Called by build orchestrator to execute registry generation\n@llm-contract Returns BuildModuleResult with success status and generated artifacts",
    "context": "def build(self, context: BuildContext) -> BuildModuleResult:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 503,
    "element_name": "clean",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Removes generated registry.js file",
    "llm_key": "Deletes output file to force regeneration on next build",
    "llm_map": "Called by build orchestrator during clean operations",
    "llm_axiom": null,
    "llm_contract": "Returns True if cleanup successful, False otherwise",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Removes generated registry.js file\n@llm-key Deletes output file to force regeneration on next build\n@llm-map Called by build orchestrator during clean operations\n@llm-contract Returns True if cleanup successful, False otherwise",
    "context": "def clean(self, context: BuildContext) -> bool:"
  },
  {
    "file_path": "build/modules/proto_client_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Proto-to-polyglot client library generation module using unified DRY architecture",
    "llm_key": "Generates TypeScript, C, Python, Kotlin client libraries from protobuf definitions using polyglot engine",
    "llm_map": "Integrates with build orchestrator to provide cached, parallel proto client generation with DRY principles",
    "llm_axiom": "Client libraries must be generated before service compilation and provide type-safe APIs across all languages",
    "llm_contract": "Implements BuildModule interface with polyglot engine for consistent multi-language client generation",
    "llm_token": "proto-client-builder: DRY polyglot gRPC client library generation from protobuf schemas",
    "llm_context": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Proto-to-polyglot client library generation module using unified DRY architecture\n@llm-key Generates TypeScript, C, Python, Kotlin client libraries from protobuf definitions using polyglot engine\n@llm-map Integrates with build orchestrator to provide cached, parallel proto client generation with DRY principles\n@llm-axiom Client libraries must be generated before service compilation and provide type-safe APIs across all languages\n@llm-contract Implements BuildModule interface with polyglot engine for consistent multi-language client generation\n@llm-token proto-client-builder: DRY polyglot gRPC client library generation from protobuf schemas\n\nProto-to-Polyglot Client Library Generation Module (DRY Architecture)\n\nGenerates client libraries from Protocol Buffer service definitions for:\n- TypeScript (gRPC-Web for browsers)\n- C/C++ (high-performance native services)\n- Python (backend services and AI/ML)\n- Kotlin (JVM services and persistence platform)\n\nFeatures:\n- Unified polyglot generation engine (DRY principle)\n- Language-specific handlers for customization\n- Intelligent dependency tracking and caching\n- Parallel generation across languages\n- Cross-language type coordination\n- Pluggable language support\n\nAuthor: Unhinged Team\nVersion: 3.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/proto_client_builder.py",
    "line_number": 55,
    "element_name": "ProtoClientBuilder",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Polyglot protobuf client generation using unified DRY engine architecture",
    "llm_key": "Orchestrates TypeScript, C, Python, Kotlin proto client generation through pluggable handlers",
    "llm_map": "Build module that eliminates code duplication in proto generation across multiple languages",
    "llm_axiom": "All proto client generation must use the unified polyglot engine for consistency",
    "llm_contract": "Returns BuildModuleResult with generated client artifacts across all specified languages",
    "llm_token": "polyglot-proto-builder: Unified multi-language protobuf client generation orchestrator",
    "llm_context": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Polyglot protobuf client generation using unified DRY engine architecture\n@llm-key Orchestrates TypeScript, C, Python, Kotlin proto client generation through pluggable handlers\n@llm-map Build module that eliminates code duplication in proto generation across multiple languages\n@llm-axiom All proto client generation must use the unified polyglot engine for consistency\n@llm-contract Returns BuildModuleResult with generated client artifacts across all specified languages\n@llm-token polyglot-proto-builder: Unified multi-language protobuf client generation orchestrator",
    "context": "class ProtoClientBuilder(BuildModule):"
  },
  {
    "file_path": "build/modules/mobile_ui_builder.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Mobile UI Builder - Build system integration for mobile-responsive UI components",
    "llm_key": "Generates CSS themes, validates responsive layouts, and integrates mobile UI framework",
    "llm_map": "Build system module for mobile UI framework integration in Unhinged architecture",
    "llm_axiom": "Mobile UI must maintain native GTK performance while providing responsive design",
    "llm_contract": "Integrates with centralized build system to generate mobile UI assets and validation",
    "llm_token": "mobile_ui_builder: Build system integration for mobile-first responsive UI framework",
    "llm_context": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Mobile UI Builder - Build system integration for mobile-responsive UI components\n@llm-key Generates CSS themes, validates responsive layouts, and integrates mobile UI framework\n@llm-map Build system module for mobile UI framework integration in Unhinged architecture\n@llm-axiom Mobile UI must maintain native GTK performance while providing responsive design\n@llm-contract Integrates with centralized build system to generate mobile UI assets and validation\n@llm-token mobile_ui_builder: Build system integration for mobile-first responsive UI framework",
    "context": ""
  },
  {
    "file_path": "build/modules/mobile_ui_builder.py",
    "line_number": 62,
    "element_name": "MobileUIBuilder",
    "language": "python",
    "llm_type": "builder",
    "llm_legend": "Build system integration for mobile UI framework",
    "llm_key": "Handles CSS generation, asset compilation, and responsive layout validation",
    "llm_map": "Core build module for mobile UI framework in Unhinged build system",
    "llm_axiom": "Build process must be deterministic and maintain component independence",
    "llm_contract": "Provides standardized build interface for mobile UI components",
    "llm_token": "MobileUIBuilder: Centralized build system for mobile-responsive UI framework",
    "llm_context": null,
    "raw_comment": "@llm-type builder-class\n@llm-legend Build system integration for mobile UI framework\n@llm-key Handles CSS generation, asset compilation, and responsive layout validation\n@llm-map Core build module for mobile UI framework in Unhinged build system\n@llm-axiom Build process must be deterministic and maintain component independence\n@llm-contract Provides standardized build interface for mobile UI components\n@llm-token MobileUIBuilder: Centralized build system for mobile-responsive UI framework\n\nBuild system integration for the mobile UI framework.\nHandles CSS generation, asset compilation, and validation.",
    "context": "class MobileUIBuilder(BaseBuilder):"
  },
  {
    "file_path": "build/modules/mobile_ui_builder.py",
    "line_number": 110,
    "element_name": "build",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Main build process for mobile UI framework",
    "llm_key": "Orchestrates CSS generation, validation, and asset compilation",
    "llm_map": "Primary build entry point for mobile UI components",
    "llm_axiom": "Build must be idempotent and handle incremental updates",
    "llm_contract": "Returns ValidationResult indicating build success/failure",
    "llm_token": "build: Main mobile UI build process",
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Main build process for mobile UI framework\n@llm-key Orchestrates CSS generation, validation, and asset compilation\n@llm-map Primary build entry point for mobile UI components\n@llm-axiom Build must be idempotent and handle incremental updates\n@llm-contract Returns ValidationResult indicating build success/failure\n@llm-token build: Main mobile UI build process\n\nExecute the mobile UI build process.\n\nReturns:\nValidationResult: Build result with success status and messages",
    "context": "def build(self) -> ValidationResult:"
  },
  {
    "file_path": "build/modules/mobile_ui_builder.py",
    "line_number": 164,
    "element_name": "_create_output_directories",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Create necessary output directories for build artifacts",
    "llm_key": "Ensures proper directory structure for generated assets",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Create necessary output directories for build artifacts\n@llm-key Ensures proper directory structure for generated assets",
    "context": "def _create_output_directories(self):"
  },
  {
    "file_path": "build/modules/mobile_ui_builder.py",
    "line_number": 182,
    "element_name": "_discover_components",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Discover and validate mobile UI components",
    "llm_key": "Scans source directory for component definitions and validates structure",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Discover and validate mobile UI components\n@llm-key Scans source directory for component definitions and validates structure",
    "context": "def _discover_components(self) -> ValidationResult:"
  },
  {
    "file_path": "build/modules/mobile_ui_builder.py",
    "line_number": 219,
    "element_name": "_check_mobile_optimization",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Check if component is mobile-optimized",
    "llm_key": "Analyzes component code for mobile-responsive patterns",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Check if component is mobile-optimized\n@llm-key Analyzes component code for mobile-responsive patterns",
    "context": "def _check_mobile_optimization(self, component_file: Path) -> bool:"
  },
  {
    "file_path": "build/modules/mobile_ui_builder.py",
    "line_number": 244,
    "element_name": "_generate_css_themes",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Generate CSS themes for mobile UI components",
    "llm_key": "Creates responsive CSS with mobile-first design principles",
    "llm_map": "Generates CSS assets for GTK4 application theming",
    "llm_axiom": "CSS must be valid and follow GTK4 theming conventions",
    "llm_contract": "Generates CSS files in the static_html output directory",
    "llm_token": "_generate_css_themes: CSS theme generation for mobile-responsive UI",
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Generate CSS themes for mobile UI components\n@llm-key Creates responsive CSS with mobile-first design principles\n@llm-map Generates CSS assets for GTK4 application theming\n@llm-axiom CSS must be valid and follow GTK4 theming conventions\n@llm-contract Generates CSS files in the static_html output directory\n@llm-token _generate_css_themes: CSS theme generation for mobile-responsive UI",
    "context": "def _generate_css_themes(self) -> ValidationResult:"
  },
  {
    "file_path": "build/modules/mobile_ui_builder.py",
    "line_number": 266,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "generated",
    "llm_legend": "Mobile-first responsive CSS for GTK4 application */ /*",
    "llm_key": "Provides responsive design patterns and mobile optimization */",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "/* Mobile UI Framework CSS - Generated by MobileUIBuilder (Fallback) */\n/* @llm-type generated-css */\n/* @llm-legend Mobile-first responsive CSS for GTK4 application */\n/* @llm-key Provides responsive design patterns and mobile optimization */\n\n{mobile_css}\n\n{responsive_css}\n\n{component_css}",
    "context": ""
  },
  {
    "file_path": "build/modules/mobile_ui_builder.py",
    "line_number": 484,
    "element_name": "_generate_component_metadata",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Generate metadata for discovered components",
    "llm_key": "Creates JSON metadata for component registry and tooling",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Generate metadata for discovered components\n@llm-key Creates JSON metadata for component registry and tooling",
    "context": "def _generate_component_metadata(self) -> ValidationResult:"
  },
  {
    "file_path": "build/modules/mobile_ui_builder.py",
    "line_number": 511,
    "element_name": "_validate_responsive_layouts",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Validate responsive layout implementations",
    "llm_key": "Ensures layouts work correctly across all viewport sizes",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Validate responsive layout implementations\n@llm-key Ensures layouts work correctly across all viewport sizes",
    "context": "def _validate_responsive_layouts(self) -> ValidationResult:"
  },
  {
    "file_path": "build/modules/mobile_ui_builder.py",
    "line_number": 543,
    "element_name": "_generate_build_manifest",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Generate build manifest for mobile UI framework",
    "llm_key": "Creates comprehensive build information for deployment and debugging",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Generate build manifest for mobile UI framework\n@llm-key Creates comprehensive build information for deployment and debugging",
    "context": "def _generate_build_manifest(self) -> ValidationResult:"
  },
  {
    "file_path": "build/modules/mobile_ui_builder.py",
    "line_number": 586,
    "element_name": "clean",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Clean generated mobile UI build artifacts",
    "llm_key": "Removes all generated files and directories",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Clean generated mobile UI build artifacts\n@llm-key Removes all generated files and directories",
    "context": "def clean(self) -> ValidationResult:"
  },
  {
    "file_path": "build/modules/mobile_ui_builder.py",
    "line_number": 612,
    "element_name": "main",
    "language": "python",
    "llm_type": "main",
    "llm_legend": "Main entry point for mobile UI builder",
    "llm_key": "Provides command-line interface for build operations",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type main-function\n@llm-legend Main entry point for mobile UI builder\n@llm-key Provides command-line interface for build operations",
    "context": "def main():"
  },
  {
    "file_path": "build/modules/typescript_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "proto",
    "llm_legend": "TypeScript protobuf client generation handler with gRPC-Web support for browser applications",
    "llm_key": "Generates TypeScript protobuf clients with gRPC-Web integration for frontend applications",
    "llm_map": "TypeScript language handler for the polyglot proto engine providing browser-compatible gRPC clients",
    "llm_axiom": "TypeScript proto clients must support both Node.js and browser environments with type safety",
    "llm_contract": "Implements ProtoLanguageHandler interface for TypeScript protobuf and gRPC-Web client generation",
    "llm_token": "typescript-proto-handler: Type-safe TypeScript protobuf client generation for web applications",
    "llm_context": null,
    "raw_comment": "@llm-type proto-handler\n@llm-legend TypeScript protobuf client generation handler with gRPC-Web support for browser applications\n@llm-key Generates TypeScript protobuf clients with gRPC-Web integration for frontend applications\n@llm-map TypeScript language handler for the polyglot proto engine providing browser-compatible gRPC clients\n@llm-axiom TypeScript proto clients must support both Node.js and browser environments with type safety\n@llm-contract Implements ProtoLanguageHandler interface for TypeScript protobuf and gRPC-Web client generation\n@llm-token typescript-proto-handler: Type-safe TypeScript protobuf client generation for web applications\n\nTypeScript Protocol Buffer Client Handler\n\nGenerates type-safe TypeScript protobuf clients for:\n- Browser applications (gRPC-Web)\n- Node.js services (gRPC)\n- Frontend frameworks (React, Vue, Angular)\n- Static HTML interfaces\n\nFeatures:\n- ts-proto plugin integration\n- gRPC-Web client generation\n- Type-safe interfaces\n- ESModule compatibility\n- Tree-shaking support\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "contract",
    "llm_legend": "Language-specific build modules for enhanced build orchestration",
    "llm_key": "Provides specialized builders for Kotlin, TypeScript, Python, and Protobuf with caching and optimization",
    "llm_map": "Build module system that integrates with main orchestrator for multi-language support",
    "llm_axiom": "Each language builder must provide consistent interface and caching capabilities",
    "llm_contract": "All builders implement BuildModule interface with build, cache, and validate methods",
    "llm_token": "build-modules: Specialized build handlers for different programming languages",
    "llm_context": null,
    "raw_comment": "@llm-type contract\n@llm-legend Language-specific build modules for enhanced build orchestration\n@llm-key Provides specialized builders for Kotlin, TypeScript, Python, and Protobuf with caching and optimization\n@llm-map Build module system that integrates with main orchestrator for multi-language support\n@llm-axiom Each language builder must provide consistent interface and caching capabilities\n@llm-contract All builders implement BuildModule interface with build, cache, and validate methods\n@llm-token build-modules: Specialized build handlers for different programming languages\n\nEnhanced Build Modules Package\n\nProvides language-specific build modules that integrate with the main build orchestrator\nto provide optimized, cached, and parallel builds for different technologies.\n\nModules:\n- kotlin_builder: Gradle-based Kotlin/JVM builds with incremental compilation\n- typescript_builder: npm/webpack-based TypeScript builds with hot reloading\n- python_builder: pip/poetry-based Python builds with virtual environment management\n- protobuf_builder: Multi-language protobuf generation with smart caching\n- mobile_ui_builder: Mobile-responsive UI framework with CSS generation and validation\n- docker_builder: Container build optimization with layer caching\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/modules/__init__.py",
    "line_number": 251,
    "element_name": "validate_build_patterns",
    "language": "python",
    "llm_type": "validation",
    "llm_legend": "Validate build system patterns and cultural commandments",
    "llm_key": "Checks for scattered files, proper generated content location, and cultural compliance",
    "llm_map": "Integrated enforcement that runs as part of build validation",
    "llm_axiom": "Build validation must prevent chaos and maintain architectural integrity",
    "llm_contract": "Returns list of violations, empty list means all patterns are valid",
    "llm_token": "build-validation: Pattern enforcement integrated into build system",
    "llm_context": null,
    "raw_comment": "@llm-type validation\n@llm-legend Validate build system patterns and cultural commandments\n@llm-key Checks for scattered files, proper generated content location, and cultural compliance\n@llm-map Integrated enforcement that runs as part of build validation\n@llm-axiom Build validation must prevent chaos and maintain architectural integrity\n@llm-contract Returns list of violations, empty list means all patterns are valid\n@llm-token build-validation: Pattern enforcement integrated into build system\n\nValidate that build patterns are followed:\n- No scattered build files in root\n- Generated content in /generated/\n- No backup/temp files\n- Proper use of centralized Python environment",
    "context": "def validate_build_patterns(repo_root: Path) -> List[str]:"
  },
  {
    "file_path": "build/modules/python_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Python build module with virtual environment management and dependency caching",
    "llm_key": "Provides optimized Python builds with pip/poetry, virtual environments, and intelligent caching",
    "llm_map": "Python build module that integrates with pip/poetry build systems and provides enhanced caching",
    "llm_axiom": "Python builds must use isolated virtual environments and cache dependencies effectively",
    "llm_contract": "Returns BuildModuleResult with Python package artifacts and build metrics",
    "llm_token": "python-builder: pip/poetry-based build module for Python services",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Python build module with virtual environment management and dependency caching\n@llm-key Provides optimized Python builds with pip/poetry, virtual environments, and intelligent caching\n@llm-map Python build module that integrates with pip/poetry build systems and provides enhanced caching\n@llm-axiom Python builds must use isolated virtual environments and cache dependencies effectively\n@llm-contract Returns BuildModuleResult with Python package artifacts and build metrics\n@llm-token python-builder: pip/poetry-based build module for Python services\n\nPython Build Module\n\nProvides optimized builds for Python projects with:\n- Virtual environment management\n- Dependency caching\n- Package building\n- Test execution\n- Requirements analysis\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/modules/python_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "proto",
    "llm_legend": "Python protobuf client generation handler for AI/ML services and backend systems",
    "llm_key": "Generates Python protobuf clients with gRPC support for AI services and backend applications",
    "llm_map": "Python language handler for the polyglot proto engine providing gRPC client generation for ML/AI services",
    "llm_axiom": "Python proto clients must support async/await patterns and integrate with AI/ML frameworks",
    "llm_contract": "Implements ProtoLanguageHandler interface for Python protobuf and gRPC client generation",
    "llm_token": "python-proto-handler: Python protobuf client generation for AI/ML services and backend systems",
    "llm_context": null,
    "raw_comment": "@llm-type proto-handler\n@llm-legend Python protobuf client generation handler for AI/ML services and backend systems\n@llm-key Generates Python protobuf clients with gRPC support for AI services and backend applications\n@llm-map Python language handler for the polyglot proto engine providing gRPC client generation for ML/AI services\n@llm-axiom Python proto clients must support async/await patterns and integrate with AI/ML frameworks\n@llm-contract Implements ProtoLanguageHandler interface for Python protobuf and gRPC client generation\n@llm-token python-proto-handler: Python protobuf client generation for AI/ML services and backend systems\n\nPython Protocol Buffer Client Handler\n\nGenerates Python protobuf clients for:\n- AI/ML services (Whisper, Vision, LLM)\n- Backend gRPC services\n- Data processing pipelines\n- Async service integration\n\nFeatures:\n- Standard protoc Python generation\n- gRPC Python service stubs\n- Async/await support\n- Type hints integration\n- Package structure organization\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/service_discovery_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Service discovery build module for compile-time service registry generation",
    "llm_key": "Discovers Docker and gRPC services at build time, generates static JavaScript registry for system health dashboard",
    "llm_map": "Integrates with existing build orchestrator using BuildModule contract for cached service discovery",
    "llm_axiom": "Service discovery must happen at build time to ensure HTML dashboard is always up-to-date",
    "llm_contract": "Implements BuildModule interface with docker-compose.yml and proto file parsing",
    "llm_token": "service-discovery-builder: Build-time service discovery for system health monitoring",
    "llm_context": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Service discovery build module for compile-time service registry generation\n@llm-key Discovers Docker and gRPC services at build time, generates static JavaScript registry for system health dashboard\n@llm-map Integrates with existing build orchestrator using BuildModule contract for cached service discovery\n@llm-axiom Service discovery must happen at build time to ensure HTML dashboard is always up-to-date\n@llm-contract Implements BuildModule interface with docker-compose.yml and proto file parsing\n@llm-token service-discovery-builder: Build-time service discovery for system health monitoring\n\nService Discovery Build Module\n\nDiscovers services at build time from:\n- Docker Compose services (docker-compose.yml)\n- gRPC services (proto/*.proto files)\n- Health endpoint mappings\n- Service dependency topology\n\nGenerates static JavaScript registry consumed by system-health.html dashboard.\nFollows existing BuildModule contract pattern for consistency and caching.\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/service_discovery_builder.py",
    "line_number": 45,
    "element_name": "ServiceDiscoveryBuilder",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Build-time service discovery module following existing BuildModule contract",
    "llm_key": "Parses docker-compose.yml and proto files to generate static service registry",
    "llm_map": "Integrates with build orchestrator for cached, dependency-aware service discovery",
    "llm_axiom": "Service registry must be generated before HTML dashboard access",
    "llm_contract": "Returns BuildModuleResult with service-registry.js artifact",
    "llm_token": "build-time-service-discovery: Compile-time service discovery for health monitoring",
    "llm_context": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Build-time service discovery module following existing BuildModule contract\n@llm-key Parses docker-compose.yml and proto files to generate static service registry\n@llm-map Integrates with build orchestrator for cached, dependency-aware service discovery\n@llm-axiom Service registry must be generated before HTML dashboard access\n@llm-contract Returns BuildModuleResult with service-registry.js artifact\n@llm-token build-time-service-discovery: Compile-time service discovery for health monitoring",
    "context": "class ServiceDiscoveryBuilder(BuildModule):"
  },
  {
    "file_path": "build/modules/kotlin_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "proto",
    "llm_legend": "Kotlin protobuf client generation handler for JVM services and persistence platform",
    "llm_key": "Generates Kotlin protobuf clients with gRPC support for JVM-based services and persistence layer",
    "llm_map": "Kotlin language handler for the polyglot proto engine providing JVM gRPC client generation",
    "llm_axiom": "Kotlin proto clients must integrate seamlessly with existing JVM services and provide coroutine support",
    "llm_contract": "Implements ProtoLanguageHandler interface for Kotlin protobuf and gRPC client generation",
    "llm_token": "kotlin-proto-handler: Kotlin protobuf client generation for JVM services and persistence platform",
    "llm_context": null,
    "raw_comment": "@llm-type proto-handler\n@llm-legend Kotlin protobuf client generation handler for JVM services and persistence platform\n@llm-key Generates Kotlin protobuf clients with gRPC support for JVM-based services and persistence layer\n@llm-map Kotlin language handler for the polyglot proto engine providing JVM gRPC client generation\n@llm-axiom Kotlin proto clients must integrate seamlessly with existing JVM services and provide coroutine support\n@llm-contract Implements ProtoLanguageHandler interface for Kotlin protobuf and gRPC client generation\n@llm-token kotlin-proto-handler: Kotlin protobuf client generation for JVM services and persistence platform\n\nKotlin Protocol Buffer Client Handler\n\nGenerates Kotlin protobuf clients for:\n- Persistence platform services\n- JVM-based microservices\n- Ktor web applications\n- Coroutine-based async services\n\nFeatures:\n- Kotlin protobuf generation\n- gRPC Kotlin stubs\n- Coroutine integration\n- Gradle build integration\n- Package organization\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/polyglot_proto_engine.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Unified polyglot protobuf client generation engine with DRY architecture",
    "llm_key": "Generates TypeScript, C, Python, Kotlin clients from protobuf definitions using shared generation patterns",
    "llm_map": "Central proto generation engine that eliminates code duplication across language-specific generators",
    "llm_axiom": "All proto client generation must use this unified engine to maintain consistency and reduce duplication",
    "llm_contract": "Provides language-agnostic proto generation with pluggable language-specific handlers",
    "llm_token": "polyglot-proto-engine: Unified DRY protobuf client generation for multiple languages",
    "llm_context": null,
    "raw_comment": "@llm-type build-engine\n@llm-legend Unified polyglot protobuf client generation engine with DRY architecture\n@llm-key Generates TypeScript, C, Python, Kotlin clients from protobuf definitions using shared generation patterns\n@llm-map Central proto generation engine that eliminates code duplication across language-specific generators\n@llm-axiom All proto client generation must use this unified engine to maintain consistency and reduce duplication\n@llm-contract Provides language-agnostic proto generation with pluggable language-specific handlers\n@llm-token polyglot-proto-engine: Unified DRY protobuf client generation for multiple languages\n\nPolyglot Protocol Buffer Client Generation Engine\n\nImplements DRY principle for proto client generation across:\n- TypeScript (gRPC-Web, browser clients)\n- C/C++ (native gRPC, high-performance services)\n- Python (gRPC services, AI/ML backends)\n- Kotlin (JVM services, persistence platform)\n\nFeatures:\n- Unified protoc command generation\n- Shared error handling and validation\n- Cross-language type coordination\n- Pluggable language handlers\n- Intelligent dependency tracking\n- Parallel generation support\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/polyglot_proto_engine.py",
    "line_number": 175,
    "element_name": "PolyglotProtoEngine",
    "language": "python",
    "llm_type": "proto",
    "llm_legend": "Unified engine for generating protobuf clients across multiple languages with DRY architecture",
    "llm_key": "Coordinates TypeScript, C, Python, Kotlin proto generation using pluggable language handlers",
    "llm_map": "Central orchestrator that eliminates duplication in proto generation logic across languages",
    "llm_axiom": "All proto client generation must use this engine for consistency and maintainability",
    "llm_contract": "Provides unified interface for multi-language proto generation with shared validation and error handling",
    "llm_token": "polyglot-proto-coordinator: Multi-language protobuf client generation orchestrator",
    "llm_context": null,
    "raw_comment": "@llm-type proto-engine\n@llm-legend Unified engine for generating protobuf clients across multiple languages with DRY architecture\n@llm-key Coordinates TypeScript, C, Python, Kotlin proto generation using pluggable language handlers\n@llm-map Central orchestrator that eliminates duplication in proto generation logic across languages\n@llm-axiom All proto client generation must use this engine for consistency and maintainability\n@llm-contract Provides unified interface for multi-language proto generation with shared validation and error handling\n@llm-token polyglot-proto-coordinator: Multi-language protobuf client generation orchestrator",
    "context": "class PolyglotProtoEngine:"
  },
  {
    "file_path": "build/modules/c_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "proto",
    "llm_legend": "C/C++ protobuf client generation handler for high-performance native services",
    "llm_key": "Generates C++ protobuf clients with gRPC support for native performance-critical services",
    "llm_map": "C++ language handler for the polyglot proto engine providing native gRPC client generation",
    "llm_axiom": "C++ proto clients must provide maximum performance for system-level services",
    "llm_contract": "Implements ProtoLanguageHandler interface for C++ protobuf and gRPC client generation",
    "llm_token": "c-proto-handler: High-performance C++ protobuf client generation for native services",
    "llm_context": null,
    "raw_comment": "@llm-type proto-handler\n@llm-legend C/C++ protobuf client generation handler for high-performance native services\n@llm-key Generates C++ protobuf clients with gRPC support for native performance-critical services\n@llm-map C++ language handler for the polyglot proto engine providing native gRPC client generation\n@llm-axiom C++ proto clients must provide maximum performance for system-level services\n@llm-contract Implements ProtoLanguageHandler interface for C++ protobuf and gRPC client generation\n@llm-token c-proto-handler: High-performance C++ protobuf client generation for native services\n\nC/C++ Protocol Buffer Client Handler\n\nGenerates high-performance C++ protobuf clients for:\n- Native gRPC services\n- System-level integrations\n- Performance-critical components\n- Low-latency applications\n\nFeatures:\n- Standard protoc C++ generation\n- gRPC C++ service stubs\n- CMake build integration\n- Header/source file organization\n- Namespace management\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/kotlin_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Kotlin/Gradle build module with incremental compilation and caching",
    "llm_key": "Provides optimized Gradle builds with parallel execution, incremental compilation, and intelligent caching",
    "llm_map": "Kotlin build module that integrates with Gradle build system and provides enhanced caching",
    "llm_axiom": "Gradle builds must be deterministic and support incremental compilation for fast development",
    "llm_contract": "Returns BuildModuleResult with JAR artifacts and build metrics",
    "llm_token": "kotlin-builder: Gradle-based build module for Kotlin/JVM projects",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Kotlin/Gradle build module with incremental compilation and caching\n@llm-key Provides optimized Gradle builds with parallel execution, incremental compilation, and intelligent caching\n@llm-map Kotlin build module that integrates with Gradle build system and provides enhanced caching\n@llm-axiom Gradle builds must be deterministic and support incremental compilation for fast development\n@llm-contract Returns BuildModuleResult with JAR artifacts and build metrics\n@llm-token kotlin-builder: Gradle-based build module for Kotlin/JVM projects\n\nKotlin/Gradle Build Module\n\nProvides optimized builds for Kotlin projects using Gradle with:\n- Incremental compilation support\n- Parallel execution\n- Build cache integration\n- Dependency analysis\n- JAR artifact management\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/validators/port_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Port conflict detection and resolution at build time",
    "llm_key": "Statically analyzes port allocations to prevent runtime binding failures",
    "llm_map": "Compile-time port validation that eliminates Docker port conflicts",
    "llm_axiom": "Port conflicts must be resolved at build time, never at runtime",
    "llm_contract": null,
    "llm_token": "port-validator: Static port allocation analyzer preventing runtime binding errors",
    "llm_context": null,
    "raw_comment": "@llm-type build-validator\n@llm-legend Port conflict detection and resolution at build time\n@llm-key Statically analyzes port allocations to prevent runtime binding failures\n@llm-map Compile-time port validation that eliminates Docker port conflicts\n@llm-axiom Port conflicts must be resolved at build time, never at runtime\n@llm-token port-validator: Static port allocation analyzer preventing runtime binding errors",
    "context": ""
  },
  {
    "file_path": "build/validators/port_validator.py",
    "line_number": 64,
    "element_name": "validate_project",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Validate all port allocations in the project\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler",
    "context": "def validate_project(self) -> List[PortConflict]:"
  },
  {
    "file_path": "build/validators/resource_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Resource requirement validation at build time",
    "llm_key": "Statically analyzes resource requirements to prevent runtime resource exhaustion",
    "llm_map": "Compile-time resource validation ensuring adequate system resources",
    "llm_axiom": "Resource issues must be detected at build time, never at runtime",
    "llm_contract": null,
    "llm_token": "resource-validator: Static resource analyzer preventing runtime resource failures",
    "llm_context": null,
    "raw_comment": "@llm-type build-validator\n@llm-legend Resource requirement validation at build time\n@llm-key Statically analyzes resource requirements to prevent runtime resource exhaustion\n@llm-map Compile-time resource validation ensuring adequate system resources\n@llm-axiom Resource issues must be detected at build time, never at runtime\n@llm-token resource-validator: Static resource analyzer preventing runtime resource failures",
    "context": ""
  },
  {
    "file_path": "build/validators/resource_validator.py",
    "line_number": 43,
    "element_name": "validate_resources",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Validate all resource requirements in the project\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler",
    "context": "def validate_resources(self) -> List[ResourceIssue]:"
  },
  {
    "file_path": "build/validators/kotlin_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "validator",
    "llm_legend": "Kotlin-specific validation for build patterns and code quality",
    "llm_key": "Validates Kotlin files for proper build structure, dependencies, and Unhinged patterns",
    "llm_map": "Language-specific validator that checks Kotlin/Gradle patterns and conventions",
    "llm_axiom": "Kotlin validation must enforce centralized build patterns and proper structure",
    "llm_contract": "Validates Kotlin files for build compliance, dependencies, and pattern adherence",
    "llm_token": "kotlin-validator: Kotlin and Gradle pattern validation for centralized build system",
    "llm_context": null,
    "raw_comment": "@llm-type validator\n@llm-legend Kotlin-specific validation for build patterns and code quality\n@llm-key Validates Kotlin files for proper build structure, dependencies, and Unhinged patterns\n@llm-map Language-specific validator that checks Kotlin/Gradle patterns and conventions\n@llm-axiom Kotlin validation must enforce centralized build patterns and proper structure\n@llm-contract Validates Kotlin files for build compliance, dependencies, and pattern adherence\n@llm-token kotlin-validator: Kotlin and Gradle pattern validation for centralized build system\n\nKotlin Validator for Unhinged Monorepo\n\nValidates Kotlin-specific patterns:\n- Proper Gradle build structure\n- Dependency management patterns\n- Package structure and naming\n- Integration with centralized build system\n- Proto client generation compliance",
    "context": ""
  },
  {
    "file_path": "build/validators/kotlin_validator.py",
    "line_number": 27,
    "element_name": "KotlinValidator",
    "language": "python",
    "llm_type": "validator",
    "llm_legend": "Kotlin-specific validation for build patterns and code structure",
    "llm_key": "Validates Kotlin files for proper build integration and patterns",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type validator\n@llm-legend Kotlin-specific validation for build patterns and code structure\n@llm-key Validates Kotlin files for proper build integration and patterns",
    "context": "class KotlinValidator(BaseValidator):"
  },
  {
    "file_path": "build/validators/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Compile-time validation system that eliminates runtime errors through static analysis",
    "llm_key": "Validates port allocations, dependencies, and resource requirements before any deployment",
    "llm_map": "Central validation system that ensures zero-failure runtime execution",
    "llm_axiom": "All runtime errors should be prevented by compile-time validation",
    "llm_contract": null,
    "llm_token": "build-validators: Static analysis system preventing runtime failures",
    "llm_context": null,
    "raw_comment": "Build-Time Validators\n\n@llm-type build-validation\n@llm-legend Compile-time validation system that eliminates runtime errors through static analysis\n@llm-key Validates port allocations, dependencies, and resource requirements before any deployment\n@llm-map Central validation system that ensures zero-failure runtime execution\n@llm-axiom All runtime errors should be prevented by compile-time validation\n@llm-token build-validators: Static analysis system preventing runtime failures",
    "context": ""
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "validation",
    "llm_legend": "Polyglot validation system for enforcing Unhinged codebase patterns and cultural commandments",
    "llm_key": "Modular, parallel validation runner that checks file patterns, build structure, and cultural compliance across all languages",
    "llm_map": "Central validation orchestrator that coordinates language-specific validators and pattern checkers",
    "llm_axiom": "All validation must be fast, parallel, actionable, and educational",
    "llm_contract": "Provides unified validation interface with detailed reporting and optional auto-fixing",
    "llm_token": "polyglot-validator: Comprehensive codebase pattern enforcement and validation system",
    "llm_context": null,
    "raw_comment": "@llm-type validation-system\n@llm-legend Polyglot validation system for enforcing Unhinged codebase patterns and cultural commandments\n@llm-key Modular, parallel validation runner that checks file patterns, build structure, and cultural compliance across all languages\n@llm-map Central validation orchestrator that coordinates language-specific validators and pattern checkers\n@llm-axiom All validation must be fast, parallel, actionable, and educational\n@llm-contract Provides unified validation interface with detailed reporting and optional auto-fixing\n@llm-token polyglot-validator: Comprehensive codebase pattern enforcement and validation system\n\nPolyglot Validation System for Unhinged Monorepo\n\nProvides comprehensive validation of:\n- File creation patterns and locations\n- Build system structure and compliance\n- Cultural commandments (independence, centralization)\n- Language-specific patterns and conventions\n- Generated content management\n- Documentation standards (llm-docs)\n\nDesigned for parallel execution and actionable feedback.",
    "context": ""
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 40,
    "element_name": "ValidationResult",
    "language": "python",
    "llm_type": "data",
    "llm_legend": "Result from a validation check with severity, location, and fix suggestions",
    "llm_key": "Structured validation result that provides actionable feedback to developers",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type data-model\n@llm-legend Result from a validation check with severity, location, and fix suggestions\n@llm-key Structured validation result that provides actionable feedback to developers",
    "context": "class ValidationResult:"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 56,
    "element_name": "ValidationSummary",
    "language": "python",
    "llm_type": "data",
    "llm_legend": "Summary of all validation results with metrics and categorization",
    "llm_key": "Comprehensive validation report for build system integration",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type data-model\n@llm-legend Summary of all validation results with metrics and categorization\n@llm-key Comprehensive validation report for build system integration",
    "context": "class ValidationSummary:"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 71,
    "element_name": "BaseValidator",
    "language": "python",
    "llm_type": "interface",
    "llm_legend": "Abstract base class for all validators in the polyglot system",
    "llm_key": "Defines common interface for pattern validation, cultural checks, and language-specific rules",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type interface\n@llm-legend Abstract base class for all validators in the polyglot system\n@llm-key Defines common interface for pattern validation, cultural checks, and language-specific rules",
    "context": "class BaseValidator(ABC):"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 100,
    "element_name": "FilePatternValidator",
    "language": "python",
    "llm_type": "validator",
    "llm_legend": "Validates file creation patterns and prevents scattered cruft",
    "llm_key": "Checks for forbidden files in root, scattered build files, and proper directory usage",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type validator\n@llm-legend Validates file creation patterns and prevents scattered cruft\n@llm-key Checks for forbidden files in root, scattered build files, and proper directory usage",
    "context": "class FilePatternValidator(BaseValidator):"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 220,
    "element_name": "CulturalValidator",
    "language": "python",
    "llm_type": "validator",
    "llm_legend": "Validates cultural commandments like independence and self-containment",
    "llm_key": "Checks for external browser dependencies, WebKit usage, and independence violations",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type validator\n@llm-legend Validates cultural commandments like independence and self-containment\n@llm-key Checks for external browser dependencies, WebKit usage, and independence violations",
    "context": "class CulturalValidator(BaseValidator):"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 267,
    "element_name": "GeneratedContentValidator",
    "language": "python",
    "llm_type": "validator",
    "llm_legend": "Validates that generated content is properly located in /generated/",
    "llm_key": "Checks for proto-generated files, build artifacts, and other generated content outside /generated/",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type validator\n@llm-legend Validates that generated content is properly located in /generated/\n@llm-key Checks for proto-generated files, build artifacts, and other generated content outside /generated/",
    "context": "class GeneratedContentValidator(BaseValidator):"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 307,
    "element_name": "PolyglotValidationRunner",
    "language": "python",
    "llm_type": "orchestrator",
    "llm_legend": "Main validation runner that coordinates all validators in parallel",
    "llm_key": "Executes validation checks concurrently and provides comprehensive reporting",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type orchestrator\n@llm-legend Main validation runner that coordinates all validators in parallel\n@llm-key Executes validation checks concurrently and provides comprehensive reporting",
    "context": "class PolyglotValidationRunner:"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 347,
    "element_name": "run_validation",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Run all validators in parallel and return comprehensive summary",
    "llm_key": "Main entry point for validation system with optional auto-fixing",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Run all validators in parallel and return comprehensive summary\n@llm-key Main entry point for validation system with optional auto-fixing",
    "context": "async def run_validation(self, auto_fix: bool = False) -> ValidationSummary:"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 409,
    "element_name": "main",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Main entry point for polyglot validation system",
    "llm_key": "Command-line interface for running validation with reporting",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Main entry point for polyglot validation system\n@llm-key Command-line interface for running validation with reporting",
    "context": "async def main():"
  },
  {
    "file_path": "build/validators/dependency_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Dependency validation at build time to prevent runtime dependency failures",
    "llm_key": "Statically analyzes service dependencies to ensure proper startup order",
    "llm_map": "Compile-time dependency validation preventing runtime startup failures",
    "llm_axiom": "Dependency issues must be resolved at build time, never at runtime",
    "llm_contract": null,
    "llm_token": "dependency-validator: Static dependency analyzer preventing runtime startup errors",
    "llm_context": null,
    "raw_comment": "@llm-type build-validator\n@llm-legend Dependency validation at build time to prevent runtime dependency failures\n@llm-key Statically analyzes service dependencies to ensure proper startup order\n@llm-map Compile-time dependency validation preventing runtime startup failures\n@llm-axiom Dependency issues must be resolved at build time, never at runtime\n@llm-token dependency-validator: Static dependency analyzer preventing runtime startup errors",
    "context": ""
  },
  {
    "file_path": "build/validators/dependency_validator.py",
    "line_number": 40,
    "element_name": "validate_dependencies",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Validate all service dependencies in the project\n\n@llm-future This becomes part of Unhinged OS service orchestration compiler",
    "context": "def validate_dependencies(self) -> List[DependencyIssue]:"
  },
  {
    "file_path": "build/validators/python_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "validator",
    "llm_legend": "Python-specific validation for code quality, imports, and Unhinged patterns",
    "llm_key": "Validates Python files for proper imports, llm-docs usage, and centralized environment compliance",
    "llm_map": "Language-specific validator that checks Python code patterns and conventions",
    "llm_axiom": "Python validation must enforce centralized environment usage and proper documentation",
    "llm_contract": "Validates Python files for imports, documentation, and pattern compliance",
    "llm_token": "python-validator: Python-specific pattern and quality validation",
    "llm_context": null,
    "raw_comment": "@llm-type validator\n@llm-legend Python-specific validation for code quality, imports, and Unhinged patterns\n@llm-key Validates Python files for proper imports, llm-docs usage, and centralized environment compliance\n@llm-map Language-specific validator that checks Python code patterns and conventions\n@llm-axiom Python validation must enforce centralized environment usage and proper documentation\n@llm-contract Validates Python files for imports, documentation, and pattern compliance\n@llm-token python-validator: Python-specific pattern and quality validation\n\nPython Validator for Unhinged Monorepo\n\nValidates Python-specific patterns:\n- Proper use of centralized Python environment\n- LLM-docs comment standard compliance\n- Import patterns and dependencies\n- Code quality and formatting\n- Service structure and patterns",
    "context": ""
  },
  {
    "file_path": "build/validators/python_validator.py",
    "line_number": 28,
    "element_name": "PythonValidator",
    "language": "python",
    "llm_type": "validator",
    "llm_legend": "Python-specific validation for code quality and Unhinged patterns",
    "llm_key": "Validates Python files for proper structure, imports, and documentation",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type validator\n@llm-legend Python-specific validation for code quality and Unhinged patterns\n@llm-key Validates Python files for proper structure, imports, and documentation",
    "context": "class PythonValidator(BaseValidator):"
  },
  {
    "file_path": "build/validators/python_validator.py",
    "line_number": 256,
    "element_name": "PythonFormatterValidator",
    "language": "python",
    "llm_type": "validator",
    "llm_legend": "Python code formatting validation using black and isort",
    "llm_key": "Validates Python code formatting and can auto-fix formatting issues",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type validator\n@llm-legend Python code formatting validation using black and isort\n@llm-key Validates Python code formatting and can auto-fix formatting issues",
    "context": "class PythonFormatterValidator(BaseValidator):"
  },
  {
    "file_path": "services/shared/__init__.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Shared service utilities and base classes for Unhinged services",
    "llm_key": "Common service functionality eliminating DRY violations across services",
    "llm_map": "Shared service components enabling consistent service architecture",
    "llm_axiom": "Shared service code must be simple, reusable, and eliminate duplication",
    "llm_contract": "Provides common service utilities, paths, and base classes",
    "llm_token": "service-shared: Shared utilities and base classes for service consistency",
    "llm_context": null,
    "raw_comment": "@llm-type service-shared\n@llm-legend Shared service utilities and base classes for Unhinged services\n@llm-key Common service functionality eliminating DRY violations across services\n@llm-map Shared service components enabling consistent service architecture\n@llm-axiom Shared service code must be simple, reusable, and eliminate duplication\n@llm-contract Provides common service utilities, paths, and base classes\n@llm-token service-shared: Shared utilities and base classes for service consistency\n\nShared Service Components for Unhinged Services\nEliminates DRY violations and provides consistent service architecture",
    "context": ""
  },
  {
    "file_path": "services/shared/paths.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Shared utilities for service path management and common service operations",
    "llm_key": "Centralized path utilities eliminating hardcoded Docker paths across services",
    "llm_map": "Common service utilities reducing DRY violations and standardizing service behavior",
    "llm_axiom": "Service utilities must be simple, reusable, and eliminate path hardcoding",
    "llm_contract": "Provides standardized path resolution and service directory management",
    "llm_token": "service-utilities: Shared utilities for consistent service path management",
    "llm_context": null,
    "raw_comment": "@llm-type service-utilities\n@llm-legend Shared utilities for service path management and common service operations\n@llm-key Centralized path utilities eliminating hardcoded Docker paths across services\n@llm-map Common service utilities reducing DRY violations and standardizing service behavior\n@llm-axiom Service utilities must be simple, reusable, and eliminate path hardcoding\n@llm-contract Provides standardized path resolution and service directory management\n@llm-token service-utilities: Shared utilities for consistent service path management\n\nShared Service Utilities for Unhinged Services\nEliminates DRY violations and standardizes service behavior across all services",
    "context": ""
  },
  {
    "file_path": "services/shared/paths.py",
    "line_number": 82,
    "element_name": "ServicePaths",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Service path manager providing standardized directory access",
    "llm_key": "Centralized service path management eliminating hardcoded paths",
    "llm_map": "Service path manager enabling consistent directory structure across services",
    "llm_axiom": "Service paths must be consistent, predictable, and environment-agnostic",
    "llm_contract": "Provides standardized service directory access and management",
    "llm_token": "service-path-manager: Centralized service directory management",
    "llm_context": null,
    "raw_comment": "@llm-type service-path-manager\n@llm-legend Service path manager providing standardized directory access\n@llm-key Centralized service path management eliminating hardcoded paths\n@llm-map Service path manager enabling consistent directory structure across services\n@llm-axiom Service paths must be consistent, predictable, and environment-agnostic\n@llm-contract Provides standardized service directory access and management\n@llm-token service-path-manager: Centralized service directory management\n\nCentralized service path management for consistent directory structure",
    "context": "class ServicePaths:"
  },
  {
    "file_path": "services/speech-to-text/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "__init__.py - microservice component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: microservice component",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend __init__.py - microservice component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: microservice component",
    "context": ""
  },
  {
    "file_path": "services/speech-to-text/main.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Speech-to-text service launcher with gRPC health.proto implementation",
    "llm_key": "Launches gRPC API for speech transcription with standardized health endpoints",
    "llm_map": "Main entry point for whisper-based speech-to-text service using health.proto",
    "llm_axiom": "Service must implement health.proto for service discovery and monitoring",
    "llm_contract": "Provides speech transcription via gRPC streaming API with health.proto compliance",
    "llm_token": "speech-service: Whisper-based speech-to-text with gRPC and health.proto",
    "llm_context": null,
    "raw_comment": "@llm-type service-launcher\n@llm-legend Speech-to-text service launcher with gRPC health.proto implementation\n@llm-key Launches gRPC API for speech transcription with standardized health endpoints\n@llm-map Main entry point for whisper-based speech-to-text service using health.proto\n@llm-axiom Service must implement health.proto for service discovery and monitoring\n@llm-contract Provides speech transcription via gRPC streaming API with health.proto compliance\n@llm-token speech-service: Whisper-based speech-to-text with gRPC and health.proto\n\nSpeech-to-Text Service Main Entry Point\n\ngRPC-only service with health.proto implementation:\n- gRPC API: Streaming audio processing and real-time transcription\n- Health checks: Implements unhinged.health.v1.HealthService\n- Service discovery integration via health.proto\n- Whisper model management and CUDA optimization",
    "context": ""
  },
  {
    "file_path": "services/speech-to-text/grpc_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Speech-to-Text gRPC server with health.proto implementation",
    "llm_key": "Provides STT capabilities via gRPC with standardized health endpoints",
    "llm_map": "gRPC server for speech-to-text service using health.proto compliance",
    "llm_axiom": "Service must implement health.proto for service discovery and monitoring",
    "llm_contract": "Provides speech transcription via gRPC API with health.proto compliance",
    "llm_token": "stt-service: Speech-to-text with gRPC and health.proto",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Speech-to-Text gRPC server with health.proto implementation\n@llm-key Provides STT capabilities via gRPC with standardized health endpoints\n@llm-map gRPC server for speech-to-text service using health.proto compliance\n@llm-axiom Service must implement health.proto for service discovery and monitoring\n@llm-contract Provides speech transcription via gRPC API with health.proto compliance\n@llm-token stt-service: Speech-to-text with gRPC and health.proto\n\nSpeech-to-Text gRPC Server - Proto-Compliant Implementation\n\nProvides Speech-to-Text (Whisper) capabilities with health.proto implementation:\n- STT processing: Whisper-based speech transcription\n- Health checks: Implements unhinged.health.v1.HealthService\n- Service discovery integration via health.proto\n- Whisper model management and CUDA optimization",
    "context": ""
  },
  {
    "file_path": "services/text-to-speech/main.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Text-to-speech service launcher with gRPC health.proto implementation",
    "llm_key": "Launches gRPC API for text-to-speech with standardized health endpoints",
    "llm_map": "Main entry point for TTS service using health.proto",
    "llm_axiom": "Service must implement health.proto for service discovery and monitoring",
    "llm_contract": "Provides TTS via gRPC API with health.proto compliance",
    "llm_token": "tts-service: Text-to-speech with gRPC and health.proto",
    "llm_context": null,
    "raw_comment": "@llm-type service-launcher\n@llm-legend Text-to-speech service launcher with gRPC health.proto implementation\n@llm-key Launches gRPC API for text-to-speech with standardized health endpoints\n@llm-map Main entry point for TTS service using health.proto\n@llm-axiom Service must implement health.proto for service discovery and monitoring\n@llm-contract Provides TTS via gRPC API with health.proto compliance\n@llm-token tts-service: Text-to-speech with gRPC and health.proto\n\nText-to-Speech Service Main Entry Point\n\ngRPC-only service with health.proto implementation:\n- gRPC API: Text-to-speech processing\n- Health checks: Implements unhinged.health.v1.HealthService\n- Service discovery integration via health.proto",
    "context": ""
  },
  {
    "file_path": "services/text-to-speech/grpc_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Text-to-Speech gRPC server with health.proto implementation",
    "llm_key": "Provides TTS capabilities via gRPC with standardized health endpoints",
    "llm_map": "gRPC server for text-to-speech service using health.proto compliance",
    "llm_axiom": "Service must implement health.proto for service discovery and monitoring",
    "llm_contract": "Provides TTS via gRPC API with health.proto compliance",
    "llm_token": "tts-service: Text-to-speech with gRPC and health.proto",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Text-to-Speech gRPC server with health.proto implementation\n@llm-key Provides TTS capabilities via gRPC with standardized health endpoints\n@llm-map gRPC server for text-to-speech service using health.proto compliance\n@llm-axiom Service must implement health.proto for service discovery and monitoring\n@llm-contract Provides TTS via gRPC API with health.proto compliance\n@llm-token tts-service: Text-to-speech with gRPC and health.proto\n\nText-to-Speech gRPC Server\n\nImplements health.proto for service discovery:\n- Health checks: Implements unhinged.health.v1.HealthService\n- TTS processing: Basic text-to-speech functionality\n- Service discovery integration via health.proto",
    "context": ""
  },
  {
    "file_path": "services/vision-ai/main.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Vision AI service launcher with gRPC health.proto implementation",
    "llm_key": "Launches gRPC API for vision analysis with standardized health endpoints",
    "llm_map": "Main entry point for vision AI service using health.proto",
    "llm_axiom": "Service must implement health.proto for service discovery and monitoring",
    "llm_contract": "Provides vision analysis via gRPC API with health.proto compliance",
    "llm_token": "vision-service: Vision AI with gRPC and health.proto",
    "llm_context": null,
    "raw_comment": "@llm-type service-launcher\n@llm-legend Vision AI service launcher with gRPC health.proto implementation\n@llm-key Launches gRPC API for vision analysis with standardized health endpoints\n@llm-map Main entry point for vision AI service using health.proto\n@llm-axiom Service must implement health.proto for service discovery and monitoring\n@llm-contract Provides vision analysis via gRPC API with health.proto compliance\n@llm-token vision-service: Vision AI with gRPC and health.proto\n\nVision AI Service Main Entry Point\n\ngRPC-only service with health.proto implementation:\n- gRPC API: Image analysis and captioning\n- Health checks: Implements unhinged.health.v1.HealthService\n- Service discovery integration via health.proto\n- BLIP model management and processing",
    "context": ""
  },
  {
    "file_path": "services/vision-ai/grpc_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Vision AI gRPC server with health.proto implementation",
    "llm_key": "Provides vision analysis via gRPC with standardized health endpoints",
    "llm_map": "gRPC server for vision AI service using health.proto compliance",
    "llm_axiom": "Service must implement health.proto for service discovery and monitoring",
    "llm_contract": "Provides vision analysis via gRPC API with health.proto compliance",
    "llm_token": "vision-service: Vision AI with gRPC and health.proto",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Vision AI gRPC server with health.proto implementation\n@llm-key Provides vision analysis via gRPC with standardized health endpoints\n@llm-map gRPC server for vision AI service using health.proto compliance\n@llm-axiom Service must implement health.proto for service discovery and monitoring\n@llm-contract Provides vision analysis via gRPC API with health.proto compliance\n@llm-token vision-service: Vision AI with gRPC and health.proto\n\nVision AI gRPC Server\n\nImplements health.proto for service discovery:\n- Health checks: Implements unhinged.health.v1.HealthService\n- Vision processing: Image analysis and captioning\n- Service discovery integration via health.proto",
    "context": ""
  },
  {
    "file_path": "control/cultural_enforcement.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "architectural",
    "llm_legend": "Code-level enforcement of independence and headless principles",
    "llm_key": "Automated validation preventing external dependencies and browser coupling",
    "llm_map": "Build-time and runtime checks ensuring architectural compliance",
    "llm_axiom": "INDEPENDENCE IS NON-NEGOTIABLE - no external browsers, no network deps for core GUI",
    "llm_contract": "Fails fast if external dependencies are introduced",
    "llm_token": "architecture-guard: Automated independence enforcement",
    "llm_context": null,
    "raw_comment": "@llm-type architectural-enforcement\n@llm-legend Code-level enforcement of independence and headless principles\n@llm-key Automated validation preventing external dependencies and browser coupling\n@llm-map Build-time and runtime checks ensuring architectural compliance\n@llm-axiom INDEPENDENCE IS NON-NEGOTIABLE - no external browsers, no network deps for core GUI\n@llm-contract Fails fast if external dependencies are introduced\n@llm-token architecture-guard: Automated independence enforcement\n\nUNHINGED ARCHITECTURAL COMMANDMENTS:\n1. THOU SHALL NOT depend on external browsers\n2. THOU SHALL NOT require network connectivity for core GUI\n3. THOU SHALL render HTML natively or not at all\n4. THOU SHALL be self-contained and independent\n5. THOU SHALL fail fast if external deps are introduced\n\nCULTURAL MANIFESTO:\nWE ARE INDEPENDENT. WE ARE SELF-CONTAINED. WE ARE HEADLESS-FIRST.\nThis machine is everything. No external dependencies. Native rendering only.",
    "context": ""
  },
  {
    "file_path": "control/cultural_enforcement.py",
    "line_number": 39,
    "element_name": "IndependenceError",
    "language": "python",
    "llm_type": "cultural",
    "llm_legend": "Exception that educates LLMs about independence culture",
    "llm_key": "Error messages that teach cultural principles to future LLMs",
    "llm_map": null,
    "llm_axiom": "Every error is a teaching opportunity",
    "llm_contract": "Provides cultural context with technical errors",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type cultural-education-exception\n@llm-legend Exception that educates LLMs about independence culture\n@llm-key Error messages that teach cultural principles to future LLMs\n@llm-axiom Every error is a teaching opportunity\n@llm-contract Provides cultural context with technical errors",
    "context": "class IndependenceError(Exception):"
  },
  {
    "file_path": "control/cultural_enforcement.py",
    "line_number": 77,
    "element_name": "ArchitecturalGuard",
    "language": "python",
    "llm_type": "dependency",
    "llm_legend": "Validates that code maintains independence principles",
    "llm_key": "Scans for forbidden external dependencies and browser coupling",
    "llm_map": null,
    "llm_axiom": "Any external browser dependency is a CRITICAL FAILURE",
    "llm_contract": "Prevents architectural drift through automated validation",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type dependency-validator\n@llm-legend Validates that code maintains independence principles\n@llm-key Scans for forbidden external dependencies and browser coupling\n@llm-axiom Any external browser dependency is a CRITICAL FAILURE\n@llm-contract Prevents architectural drift through automated validation\n\nFORBIDDEN PATTERNS:\n- subprocess calls to firefox, chrome, chromium\n- webbrowser module usage\n- external HTTP dependencies for GUI\n- network requirements for core functionality",
    "context": "class ArchitecturalGuard:"
  },
  {
    "file_path": "control/cultural_enforcement.py",
    "line_number": 118,
    "element_name": "validate_independence",
    "language": "python",
    "llm_type": "independence",
    "llm_legend": "Comprehensive validation of architectural independence",
    "llm_key": "Scans entire codebase for cultural violations",
    "llm_map": null,
    "llm_axiom": "Independence validation is mandatory before any operation",
    "llm_contract": "Returns True if independent, raises IndependenceError if violated",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type independence-validator\n@llm-legend Comprehensive validation of architectural independence\n@llm-key Scans entire codebase for cultural violations\n@llm-axiom Independence validation is mandatory before any operation\n@llm-contract Returns True if independent, raises IndependenceError if violated",
    "context": "def validate_independence(self) -> bool:"
  },
  {
    "file_path": "control/cultural_enforcement.py",
    "line_number": 198,
    "element_name": "CulturalEnforcer",
    "language": "python",
    "llm_type": "cultural",
    "llm_legend": "Runtime enforcement of independence culture and principles",
    "llm_key": "Monitors system behavior and enforces cultural compliance",
    "llm_map": null,
    "llm_axiom": "Culture must be enforced at runtime, not just build time",
    "llm_contract": "Prevents cultural drift through active monitoring",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type cultural-enforcement-engine\n@llm-legend Runtime enforcement of independence culture and principles\n@llm-key Monitors system behavior and enforces cultural compliance\n@llm-axiom Culture must be enforced at runtime, not just build time\n@llm-contract Prevents cultural drift through active monitoring",
    "context": "class CulturalEnforcer:"
  },
  {
    "file_path": "control/cultural_enforcement.py",
    "line_number": 212,
    "element_name": "enforce_culture",
    "language": "python",
    "llm_type": "cultural",
    "llm_legend": "Main entry point for cultural enforcement",
    "llm_key": "Validates independence and provides cultural education",
    "llm_map": null,
    "llm_axiom": "Culture enforcement is mandatory for all operations",
    "llm_contract": "Ensures system maintains independence principles",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type cultural-enforcement-entry-point\n@llm-legend Main entry point for cultural enforcement\n@llm-key Validates independence and provides cultural education\n@llm-axiom Culture enforcement is mandatory for all operations\n@llm-contract Ensures system maintains independence principles",
    "context": "def enforce_culture(self):"
  },
  {
    "file_path": "control/cultural_enforcement.py",
    "line_number": 234,
    "element_name": "validate_cultural_compliance",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Build-time validation ensuring cultural compliance",
    "llm_key": "Pre-commit and CI/CD cultural enforcement",
    "llm_map": null,
    "llm_axiom": "Culture must be validated before code enters the system",
    "llm_contract": "Prevents cultural violations from being committed",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type build-time-cultural-validator\n@llm-legend Build-time validation ensuring cultural compliance\n@llm-key Pre-commit and CI/CD cultural enforcement\n@llm-axiom Culture must be validated before code enters the system\n@llm-contract Prevents cultural violations from being committed",
    "context": "def validate_cultural_compliance():"
  },
  {
    "file_path": "control/cultural_enforcement.py",
    "line_number": 246,
    "element_name": "launch_external_browser",
    "language": "python",
    "llm_type": "forbidden",
    "llm_legend": "Function that exists to educate about cultural violations",
    "llm_key": "Demonstrates proper cultural enforcement through education",
    "llm_map": null,
    "llm_axiom": "External browser usage is always forbidden",
    "llm_contract": "Always raises IndependenceError with cultural education",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type forbidden-function\n@llm-legend Function that exists to educate about cultural violations\n@llm-key Demonstrates proper cultural enforcement through education\n@llm-axiom External browser usage is always forbidden\n@llm-contract Always raises IndependenceError with cultural education",
    "context": "def launch_external_browser():"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "virtualization",
    "llm_legend": "HTTP proxy server that represents the line-in-the-sand between Unhinged System Commands and host OS operations",
    "llm_key": "Temporary shim server that will evolve into the primary interface for Unhinged OS virtualization layer",
    "llm_map": "This server is the future kernel interface - every endpoint here represents a system call in Unhinged OS",
    "llm_axiom": "This is where Unhinged abstractions meet raw system operations - design with future OS in mind",
    "llm_contract": "Provides HTTP interface for system operations while maintaining audit trail for future OS development",
    "llm_token": "virtualization-proxy: The foundational HTTP layer that will become the Unhinged OS system call interface",
    "llm_context": null,
    "raw_comment": "@llm-type virtualization-boundary\n@llm-legend HTTP proxy server that represents the line-in-the-sand between Unhinged System Commands and host OS operations\n@llm-key Temporary shim server that will evolve into the primary interface for Unhinged OS virtualization layer\n@llm-map This server is the future kernel interface - every endpoint here represents a system call in Unhinged OS\n@llm-axiom This is where Unhinged abstractions meet raw system operations - design with future OS in mind\n@llm-contract Provides HTTP interface for system operations while maintaining audit trail for future OS development\n@llm-token virtualization-proxy: The foundational HTTP layer that will become the Unhinged OS system call interface\n@llm-evolution Every endpoint added here is a candidate for a future Unhinged OS system call or kernel operation\n\nARCHITECTURAL VISION:\nThis proxy server represents the exact boundary where Unhinged will eventually replace the host OS.\nCurrent: HTML \u2192 HTTP Proxy \u2192 System Controller \u2192 Build System \u2192 Docker \u2192 Host OS\nFuture:  HTML \u2192 HTTP Proxy \u2192 System Controller \u2192 Unhinged Kernel \u2192 Unhinged Hardware Abstraction\n\nVIRTUALIZATION ROADMAP:\n1. Phase 1 (Current): HTTP shim over existing build system\n2. Phase 2: Direct container orchestration bypassing Docker\n3. Phase 3: Custom process management and resource allocation\n4. Phase 4: Hardware abstraction layer\n5. Phase 5: Full Unhinged OS with custom kernel\n\nDESIGN PRINCIPLES:\n- Every HTTP endpoint maps to a future OS system call\n- All operations must be auditable for OS development insights\n- Resource management patterns here inform future kernel design\n- Security model here becomes the foundation for OS security",
    "context": ""
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 89,
    "element_name": "health_check",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Health check endpoint - Future: sys_health_check()\n\n@llm-future This becomes a fundamental OS health monitoring system call",
    "context": "async def health_check():"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 106,
    "element_name": "start_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Start a service tier - Future Unhinged OS system call: sys_start_tier()\n\n@llm-future This HTTP endpoint will become: int sys_start_tier(tier_id_t tier)\n@llm-kernel-design Service tiers are fundamental OS abstractions in Unhinged",
    "context": "async def start_service_tier(tier: str, request: Request):"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 153,
    "element_name": "stop_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Stop a service tier - Future: sys_stop_tier()\n\n@llm-future This becomes the foundation for Unhinged process lifecycle management",
    "context": "async def stop_service_tier(tier: str, request: Request):"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 182,
    "element_name": "get_system_status",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Get system status - Future: sys_get_system_info()\n\n@llm-future This endpoint design informs future OS status reporting",
    "context": "async def get_system_status():"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 212,
    "element_name": "get_virtualization_insights",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Endpoint for gathering insights about system operations for future OS design\n\n@llm-purpose Collect operational patterns that inform Unhinged OS kernel design",
    "context": "async def get_virtualization_insights():"
  },
  {
    "file_path": "control/service_launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "Service launcher with unified service registry integration",
    "llm_key": "Launches essential services using centralized service discovery",
    "llm_map": "Core service orchestration component replacing hardcoded configurations",
    "llm_axiom": "Uses service registry for dynamic service discovery and health monitoring",
    "llm_contract": "Provides cohesive service integration for GUI startup",
    "llm_token": "service-launcher: Unified service orchestration with registry integration",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend Service launcher with unified service registry integration\n@llm-key Launches essential services using centralized service discovery\n@llm-map Core service orchestration component replacing hardcoded configurations\n@llm-axiom Uses service registry for dynamic service discovery and health monitoring\n@llm-contract Provides cohesive service integration for GUI startup\n@llm-token service-launcher: Unified service orchestration with registry integration",
    "context": ""
  },
  {
    "file_path": "control/service_launcher.py",
    "line_number": 198,
    "element_name": "_start_direct_service",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": "Direct service execution for non-Docker components",
    "llm_map": "Service launcher extension enabling voice transcription service integration",
    "llm_axiom": null,
    "llm_contract": "Starts services via direct command execution with environment setup",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-key Direct service execution for non-Docker components\n@llm-contract Starts services via direct command execution with environment setup\n@llm-map Service launcher extension enabling voice transcription service integration\n\nStart a service using direct command execution rather than Docker Compose.\n\nThis method extends the service launcher to support services that run directly\nas Python processes rather than Docker containers, enabling integration of\ncomponents like the Whisper transcription service into the standard startup flow.\n\nKey Features:\n- Environment variable setup (PYTHONPATH, etc.)\n- Background process execution\n- Health check integration\n- Consistent service management interface\n\nArgs:\nservice: Service configuration dictionary with start_command\ntimeout: Maximum time to wait for service health check\n\nReturns:\nbool: True if service started successfully and passed health check",
    "context": "def _start_direct_service(self, service: Dict, timeout: int) -> bool:"
  },
  {
    "file_path": "control/service_launcher.py",
    "line_number": 254,
    "element_name": "_is_service_healthy",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": "Service health verification for direct and Docker services",
    "llm_map": "Health monitoring component supporting voice transcription service integration",
    "llm_axiom": null,
    "llm_contract": "HTTP health check validation for service availability",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-key Service health verification for direct and Docker services\n@llm-contract HTTP health check validation for service availability\n@llm-map Health monitoring component supporting voice transcription service integration\n\nCheck if a service is currently healthy via HTTP health endpoint.\n\nThis method provides unified health checking for both Docker Compose services\nand direct command services, enabling consistent service monitoring across\nthe voice transcription pipeline.\n\nArgs:\nservice: Service configuration with health_url\n\nReturns:\nbool: True if service responds successfully to health check",
    "context": "def _is_service_healthy(self, service: Dict) -> bool:"
  },
  {
    "file_path": "control/network/service_registry.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "service_registry.py - Central service discovery and registration system",
    "llm_key": "Unified service discovery replacing hardcoded service configurations",
    "llm_map": "Core component of the network control system providing service location transparency",
    "llm_axiom": "Single source of truth for all service endpoints and health status",
    "llm_contract": "Provides standardized service discovery interface for all system components",
    "llm_token": "service_registry: Centralized service discovery and health monitoring",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend service_registry.py - Central service discovery and registration system\n@llm-key Unified service discovery replacing hardcoded service configurations\n@llm-map Core component of the network control system providing service location transparency\n@llm-axiom Single source of truth for all service endpoints and health status\n@llm-contract Provides standardized service discovery interface for all system components\n@llm-token service_registry: Centralized service discovery and health monitoring",
    "context": ""
  },
  {
    "file_path": "control/network/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - Network control system module initialization",
    "llm_key": "Network subsystem providing service discovery and health monitoring",
    "llm_map": "Core network control components for unified service management",
    "llm_axiom": "Network layer maintains service discovery and health monitoring independence",
    "llm_contract": "Provides standardized network control interface for system components",
    "llm_token": "network-control: Unified network service management subsystem",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - Network control system module initialization\n@llm-key Network subsystem providing service discovery and health monitoring\n@llm-map Core network control components for unified service management\n@llm-axiom Network layer maintains service discovery and health monitoring independence\n@llm-contract Provides standardized network control interface for system components\n@llm-token network-control: Unified network service management subsystem",
    "context": ""
  },
  {
    "file_path": "control/deployment/deploy.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "Unified deployment orchestrator for Unhinged system runtime control",
    "llm_key": "Central deployment automation with environment-aware orchestration and health validation",
    "llm_map": "Runtime deployment control enabling automated service orchestration and monitoring",
    "llm_axiom": "Deployments must be atomic, reversible, and health-validated for operational safety",
    "llm_contract": null,
    "llm_token": "deployment-orchestrator: Automated deployment control with environment management",
    "llm_context": null,
    "raw_comment": "@llm-type control-tool\n@llm-legend Unified deployment orchestrator for Unhinged system runtime control\n@llm-key Central deployment automation with environment-aware orchestration and health validation\n@llm-map Runtime deployment control enabling automated service orchestration and monitoring\n@llm-axiom Deployments must be atomic, reversible, and health-validated for operational safety\n@llm-token deployment-orchestrator: Automated deployment control with environment management\n\nUnified Deployment Orchestrator:\n- Environment-aware deployment (dev, staging, production)\n- Health check validation before and after deployment\n- Rollback capability on deployment failures\n- Service dependency management\n- Integrated monitoring and logging",
    "context": ""
  },
  {
    "file_path": "control/deployment/deploy.py",
    "line_number": 31,
    "element_name": "UnhingedDeploymentOrchestrator",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "Central deployment orchestrator managing environment-aware service deployment",
    "llm_key": "Automated deployment with health validation, dependency management, and rollback",
    "llm_map": "Core operational tool for runtime service orchestration and deployment control",
    "llm_axiom": "All deployments must be atomic, health-validated, and reversible",
    "llm_contract": null,
    "llm_token": "deployment-core: Production deployment orchestration with operational safety",
    "llm_context": null,
    "raw_comment": "@llm-type control-orchestrator\n@llm-legend Central deployment orchestrator managing environment-aware service deployment\n@llm-key Automated deployment with health validation, dependency management, and rollback\n@llm-map Core operational tool for runtime service orchestration and deployment control\n@llm-axiom All deployments must be atomic, health-validated, and reversible\n@llm-token deployment-core: Production deployment orchestration with operational safety",
    "context": "class UnhingedDeploymentOrchestrator:"
  },
  {
    "file_path": "control/deployment/health-checks.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "Service health monitoring and validation for Unhinged runtime control",
    "llm_key": "Continuous health monitoring with alerting and automatic recovery capabilities",
    "llm_map": "Runtime health monitoring enabling proactive service management and reliability",
    "llm_axiom": "Service health must be continuously monitored with automatic recovery actions",
    "llm_contract": null,
    "llm_token": "health-monitor: Continuous service health monitoring with automated recovery",
    "llm_context": null,
    "raw_comment": "@llm-type control-tool\n@llm-legend Service health monitoring and validation for Unhinged runtime control\n@llm-key Continuous health monitoring with alerting and automatic recovery capabilities\n@llm-map Runtime health monitoring enabling proactive service management and reliability\n@llm-axiom Service health must be continuously monitored with automatic recovery actions\n@llm-token health-monitor: Continuous service health monitoring with automated recovery\n\nService Health Monitoring:\n- Real-time health check execution\n- Service dependency validation\n- Automatic recovery actions\n- Health metrics collection\n- Alert generation and notification",
    "context": ""
  },
  {
    "file_path": "control/deployment/health-checks.py",
    "line_number": 57,
    "element_name": "UnhingedHealthMonitor",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "Continuous health monitoring system for Unhinged service ecosystem",
    "llm_key": "Real-time health validation with dependency checking and automatic recovery",
    "llm_map": "Core operational monitoring enabling proactive service reliability management",
    "llm_axiom": "Health monitoring must be continuous, accurate, and trigger automatic recovery",
    "llm_contract": null,
    "llm_token": "health-monitor-core: Production health monitoring with automated recovery",
    "llm_context": null,
    "raw_comment": "@llm-type control-monitor\n@llm-legend Continuous health monitoring system for Unhinged service ecosystem\n@llm-key Real-time health validation with dependency checking and automatic recovery\n@llm-map Core operational monitoring enabling proactive service reliability management\n@llm-axiom Health monitoring must be continuous, accurate, and trigger automatic recovery\n@llm-token health-monitor-core: Production health monitoring with automated recovery",
    "context": "class UnhingedHealthMonitor:"
  },
  {
    "file_path": "control/sdk/javascript/unhinged-sdk.js",
    "line_number": 1,
    "element_name": "UnhingedSDK",
    "language": "typescript",
    "llm_type": "client",
    "llm_legend": "JavaScript client SDK providing syntax sugar for Unhinged system operations",
    "llm_key": "Beautiful API abstractions over HTTP control proxy for system calls",
    "llm_map": "Client library that makes system operations feel like native JavaScript",
    "llm_axiom": "All system operations should feel natural and intuitive to developers",
    "llm_contract": null,
    "llm_token": "unhinged-sdk: JavaScript client providing elegant system call abstractions",
    "llm_context": null,
    "raw_comment": "Unhinged System SDK - JavaScript Client\n\n@llm-type client-sdk\n@llm-legend JavaScript client SDK providing syntax sugar for Unhinged system operations\n@llm-key Beautiful API abstractions over HTTP control proxy for system calls\n@llm-map Client library that makes system operations feel like native JavaScript\n@llm-axiom All system operations should feel natural and intuitive to developers\n@llm-token unhinged-sdk: JavaScript client providing elegant system call abstractions\n\nBeautiful syntax sugar for system operations:\n- file.write(path, content) instead of fetch('/control/system/file/write')\n- service.start('applications') instead of fetch('/control/system/tier/applications/start')\n- network.ping(host) instead of raw HTTP calls\n- package.apt.install(name) instead of subprocess calls",
    "context": "class UnhingedSDK {"
  },
  {
    "file_path": "control/system/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "System control abstraction layer package for Unhinged platform",
    "llm_key": "Provides operational abstractions over build system while preparing for future OS virtualization",
    "llm_map": "Central control plane that bridges DevOps operations with build orchestration",
    "llm_axiom": "All system operations must be auditable, reversible, and provide clear operational feedback",
    "llm_contract": null,
    "llm_token": "control-system: Package containing system control abstractions and virtualization boundary interfaces",
    "llm_context": null,
    "raw_comment": "Unhinged Control System\n\n@llm-type control-plane-package\n@llm-legend System control abstraction layer package for Unhinged platform\n@llm-key Provides operational abstractions over build system while preparing for future OS virtualization\n@llm-map Central control plane that bridges DevOps operations with build orchestration\n@llm-axiom All system operations must be auditable, reversible, and provide clear operational feedback\n@llm-token control-system: Package containing system control abstractions and virtualization boundary interfaces",
    "context": ""
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "System control abstraction layer that bridges build orchestration with operations semantics",
    "llm_key": "Translates DevOps operations (start/stop/restart) into build system targets while maintaining operational context",
    "llm_map": "Central control plane that will evolve into virtualization boundary between Unhinged and host OS",
    "llm_axiom": "All system operations must be auditable, reversible, and provide clear operational feedback",
    "llm_contract": "Returns OperationResult with success status, affected services, and system state changes",
    "llm_token": "system-controller: Control plane service managing the boundary between application logic and system operations",
    "llm_context": null,
    "raw_comment": "@llm-type control-plane\n@llm-legend System control abstraction layer that bridges build orchestration with operations semantics\n@llm-key Translates DevOps operations (start/stop/restart) into build system targets while maintaining operational context\n@llm-map Central control plane that will evolve into virtualization boundary between Unhinged and host OS\n@llm-axiom All system operations must be auditable, reversible, and provide clear operational feedback\n@llm-contract Returns OperationResult with success status, affected services, and system state changes\n@llm-token system-controller: Control plane service managing the boundary between application logic and system operations\n@llm-evolution This is the foundation layer for future OS virtualization - every command here represents a potential kernel operation",
    "context": ""
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 36,
    "element_name": "SystemController",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "System Control Abstraction Layer\n\nBridges operational semantics (start/stop services) with build system implementation.\nThis class represents the future boundary between Unhinged applications and the OS.\n\n@llm-future Every method here is a candidate for a future Unhinged OS system call\n@llm-virtualization This class will evolve into the primary OS interface",
    "context": "class SystemController:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 86,
    "element_name": "start_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Start a logical service tier\n\n@llm-future This will become: int sys_start_tier(tier_id_t tier)\n@llm-kernel-design Service tiers are fundamental OS abstractions in Unhinged",
    "context": "async def start_service_tier(self, tier: str) -> OperationResult:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 141,
    "element_name": "stop_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Stop a logical service tier\n\n@llm-future This will become: int sys_stop_tier(tier_id_t tier)",
    "context": "async def stop_service_tier(self, tier: str) -> OperationResult:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 204,
    "element_name": "_execute_docker_command",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Execute Docker command as fallback when build system unavailable\n\n@llm-future This direct command execution will be replaced by Unhinged container management",
    "context": "async def _execute_docker_command(self, operation: str, tier_config: Dict[str, Any]) -> OperationResult:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 247,
    "element_name": "get_system_status",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Get current system status\n\n@llm-future This will become: sys_get_system_info()",
    "context": "async def get_system_status(self) -> SystemStatus:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 301,
    "element_name": "get_operation_patterns",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Analyze operation patterns for future OS design insights\n\n@llm-purpose Collect operational patterns that inform Unhinged OS kernel design",
    "context": "def get_operation_patterns(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "data",
    "llm_legend": "Operation result data model for system control operations",
    "llm_key": "Standardized result format for all system operations with future OS compatibility",
    "llm_map": "Result model that will evolve into OS system call return values",
    "llm_axiom": "All operations must return structured, auditable results",
    "llm_contract": null,
    "llm_token": "operation-result: Data model for system operation results and future OS return values",
    "llm_context": null,
    "raw_comment": "@llm-type data-model\n@llm-legend Operation result data model for system control operations\n@llm-key Standardized result format for all system operations with future OS compatibility\n@llm-map Result model that will evolve into OS system call return values\n@llm-axiom All operations must return structured, auditable results\n@llm-token operation-result: Data model for system operation results and future OS return values",
    "context": ""
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 18,
    "element_name": "OperationResult",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Standardized result for system operations\n\n@llm-future This data structure will become the return format for Unhinged OS system calls\n@llm-evolution Each field here represents metadata that future OS kernel will track",
    "context": "class OperationResult:"
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 58,
    "element_name": "from_build_results",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Create OperationResult from build system results\n\n@llm-note This bridges build system results to operational semantics\n@llm-future This translation layer will be removed when we have direct OS operations",
    "context": "def from_build_results(cls, operation: str, build_results: List[Any]) -> 'OperationResult':"
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 101,
    "element_name": "SystemStatus",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Current system status snapshot\n\n@llm-future This will become the Unhinged OS system information structure",
    "context": "class SystemStatus:"
  },
  {
    "file_path": "control/native_gui/health_client.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "client",
    "llm_legend": "gRPC health client for native GUI service discovery and monitoring",
    "llm_key": "Provides health.proto client for checking service status via gRPC",
    "llm_map": "Health client for native GUI to communicate with gRPC services",
    "llm_axiom": "All services must implement health.proto for service discovery",
    "llm_contract": "Returns service health status and diagnostics via gRPC calls",
    "llm_token": "health-client: gRPC client for health.proto service discovery",
    "llm_context": null,
    "raw_comment": "@llm-type client\n@llm-legend gRPC health client for native GUI service discovery and monitoring\n@llm-key Provides health.proto client for checking service status via gRPC\n@llm-map Health client for native GUI to communicate with gRPC services\n@llm-axiom All services must implement health.proto for service discovery\n@llm-contract Returns service health status and diagnostics via gRPC calls\n@llm-token health-client: gRPC client for health.proto service discovery\n\ngRPC Health Client for Native GUI\n\nImplements health.proto client for service discovery:\n- Heartbeat calls: Fast service status checks\n- Diagnostics calls: Detailed service information\n- Service discovery: Automatic service detection\n- Error handling: Graceful failure handling",
    "context": ""
  },
  {
    "file_path": "control/native_gui/launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "launcher.py - system control component",
    "llm_key": "Core functionality for launcher",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "launcher: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend launcher.py - system control component\n@llm-key Core functionality for launcher\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token launcher: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/__init__.py",
    "line_number": 13,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/main_window.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "main_window.py - system control component",
    "llm_key": "Core functionality for main_window",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "main_window: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend main_window.py - system control component\n@llm-key Core functionality for main_window\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token main_window: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/bridge/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/bridge/grpc_client.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "grpc_client.py - system control component",
    "llm_key": "Core functionality for grpc_client",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "grpc_client: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend grpc_client.py - system control component\n@llm-key Core functionality for grpc_client\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token grpc_client: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/bridge/http_client.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "http_client.py - system control component",
    "llm_key": "Core functionality for http_client",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "http_client: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend http_client.py - system control component\n@llm-key Core functionality for http_client\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token http_client: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/bridge/proto_scanner.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "proto_scanner.py - system control component",
    "llm_key": "Core functionality for proto_scanner",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "proto_scanner: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend proto_scanner.py - system control component\n@llm-key Core functionality for proto_scanner\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token proto_scanner: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/health/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/services/llm_client.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "llm_client.py - microservice component",
    "llm_key": "Core functionality for llm_client",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "llm_client: microservice component",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend llm_client.py - microservice component\n@llm-key Core functionality for llm_client\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token llm_client: microservice component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/services/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "__init__.py - microservice component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: microservice component",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend __init__.py - microservice component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: microservice component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/chat/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/chat/tool.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "tool.py - system control component",
    "llm_key": "Core functionality for tool",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "tool: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend tool.py - system control component\n@llm-key Core functionality for tool\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token tool: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/chat/mobile_chat_tool.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "mobile_chat_tool.py - system control component",
    "llm_key": "Core functionality for mobile_chat_tool",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "mobile_chat_tool: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend mobile_chat_tool.py - system control component\n@llm-key Core functionality for mobile_chat_tool\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token mobile_chat_tool: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/simple_whisper_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "transcription",
    "llm_legend": "Minimal HTTP server providing Whisper-based speech-to-text transcription",
    "llm_key": "Pure Python Whisper service with native WAV processing and zero external dependencies",
    "llm_map": "Backend transcription service in voice-first GUI pipeline architecture",
    "llm_axiom": "Simple, focused services superior to complex multi-dependency solutions",
    "llm_contract": "HTTP API accepting audio files and returning JSON transcription results",
    "llm_token": "whisper-http-server: Lightweight speech transcription service for voice pipeline",
    "llm_context": null,
    "raw_comment": "@llm-type transcription-service\n@llm-legend Minimal HTTP server providing Whisper-based speech-to-text transcription\n@llm-key Pure Python Whisper service with native WAV processing and zero external dependencies\n@llm-map Backend transcription service in voice-first GUI pipeline architecture\n@llm-axiom Simple, focused services superior to complex multi-dependency solutions\n@llm-contract HTTP API accepting audio files and returning JSON transcription results\n@llm-token whisper-http-server: Lightweight speech transcription service for voice pipeline",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/simple_whisper_server.py",
    "line_number": 52,
    "element_name": "load_wav_file",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": "Native WAV file processing without external dependencies",
    "llm_map": null,
    "llm_axiom": "Pure Python audio processing eliminates ffmpeg dependency complexity",
    "llm_contract": "Converts WAV audio files to numpy arrays compatible with Whisper",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-key Native WAV file processing without external dependencies\n@llm-contract Converts WAV audio files to numpy arrays compatible with Whisper\n@llm-axiom Pure Python audio processing eliminates ffmpeg dependency complexity\n\nLoad WAV file and convert to numpy array for Whisper transcription.\n\nThis function provides native WAV processing without requiring ffmpeg or other\nexternal audio processing tools, maintaining the principle of minimal dependencies\nfor immediate system functionality.\n\nArgs:\nfile_path (str): Path to WAV audio file\n\nReturns:\nnumpy.ndarray: Float32 audio array normalized for Whisper processing\n\nProcessing Pipeline:\nWAV File \u2192 Raw Audio Data \u2192 Numpy Array \u2192 Float32 Normalization \u2192 Whisper Input",
    "context": "def load_wav_file(file_path):"
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/simple_whisper_server.py",
    "line_number": 143,
    "element_name": "transcribe",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": "Primary HTTP endpoint for audio transcription requests",
    "llm_map": "Core API endpoint in voice-first pipeline: Audio \u2192 This Endpoint \u2192 Transcript",
    "llm_axiom": null,
    "llm_contract": "Accepts multipart audio files and returns JSON transcription results",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-key Primary HTTP endpoint for audio transcription requests\n@llm-contract Accepts multipart audio files and returns JSON transcription results\n@llm-map Core API endpoint in voice-first pipeline: Audio \u2192 This Endpoint \u2192 Transcript\n\nPrimary transcription endpoint accepting audio file uploads and returning\nJSON-formatted transcription results via Whisper processing.\n\nExpected Request:\nPOST /transcribe\nContent-Type: multipart/form-data\nBody: audio file field with WAV data\n\nResponse Format:\n{\n\"transcript\": \"transcribed text\",\n\"language\": \"detected language code\",\n\"success\": true\n}\n\nIntegration:\nNative Audio Capture \u2192 HTTP POST \u2192 This Endpoint \u2192 Whisper \u2192 JSON Response",
    "context": "def transcribe():"
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/web_speech_bridge.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "web",
    "llm_legend": "WebKit-based bridge for browser Web Speech API integration",
    "llm_key": "Embedded browser speech recognition using native Web Speech API capabilities",
    "llm_map": "Future enhancement component for browser-native voice transcription",
    "llm_axiom": "Browser-native APIs provide superior user experience to system-level audio capture",
    "llm_contract": "WebKit bridge interface for Web Speech API integration in native applications",
    "llm_token": "web-speech-bridge: Browser API integration for voice transcription",
    "llm_context": null,
    "raw_comment": "@llm-type web-speech-bridge\n@llm-legend WebKit-based bridge for browser Web Speech API integration\n@llm-key Embedded browser speech recognition using native Web Speech API capabilities\n@llm-map Future enhancement component for browser-native voice transcription\n@llm-axiom Browser-native APIs provide superior user experience to system-level audio capture\n@llm-contract WebKit bridge interface for Web Speech API integration in native applications\n@llm-token web-speech-bridge: Browser API integration for voice transcription",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/audio_installer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "dependency",
    "llm_legend": "Automated audio dependency installation and setup guidance system",
    "llm_key": "Cross-platform audio dependency detection, installation, and user guidance",
    "llm_map": "Support component providing installation guidance for voice transcription pipeline",
    "llm_axiom": "Clear installation guidance reduces user friction in voice feature adoption",
    "llm_contract": "Platform-specific dependency detection and automated installation assistance",
    "llm_token": "audio-installer: Dependency management for voice transcription components",
    "llm_context": null,
    "raw_comment": "@llm-type dependency-installer\n@llm-legend Automated audio dependency installation and setup guidance system\n@llm-key Cross-platform audio dependency detection, installation, and user guidance\n@llm-map Support component providing installation guidance for voice transcription pipeline\n@llm-axiom Clear installation guidance reduces user friction in voice feature adoption\n@llm-contract Platform-specific dependency detection and automated installation assistance\n@llm-token audio-installer: Dependency management for voice transcription components",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/speech_client.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "speech_client.py - system control component",
    "llm_key": "Core functionality for speech_client",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "speech_client: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend speech_client.py - system control component\n@llm-key Core functionality for speech_client\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token speech_client: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/speech_client.py",
    "line_number": 310,
    "element_name": "_native_audio_recording",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": "Primary voice input method using native system audio capture",
    "llm_map": null,
    "llm_axiom": "Native OS audio capabilities superior to Python library abstractions",
    "llm_contract": "Records system audio via native tools and transcribes via Whisper service",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-key Primary voice input method using native system audio capture\n@llm-contract Records system audio via native tools and transcribes via Whisper service\n@llm-axiom Native OS audio capabilities superior to Python library abstractions\n\nUse native system audio capture for voice transcription (correct architectural approach).\n\nThis method implements the preferred voice input approach: leveraging Ubuntu's\nnative audio system (arecord/PipeWire) rather than complex Python audio libraries.\n\nArchitecture:\nNative System Audio \u2192 arecord \u2192 WAV File \u2192 HTTP \u2192 Whisper Service \u2192 Transcript\n\nArgs:\ncallback: Function to call with transcription result\nduration: Recording duration in seconds",
    "context": "def _native_audio_recording(self, callback: Optional[Callable[[str], None]], duration: float = 3.0):"
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/speech_client.py",
    "line_number": 352,
    "element_name": "_simple_audio_recording",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": "Intermediate voice input using Python speech_recognition library",
    "llm_map": "Fallback component when native audio capture unavailable",
    "llm_axiom": null,
    "llm_contract": "Python library audio capture with Whisper service transcription",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-key Intermediate voice input using Python speech_recognition library\n@llm-contract Python library audio capture with Whisper service transcription\n@llm-map Fallback component when native audio capture unavailable\n\nUse Python speech_recognition library for audio capture with Whisper service.\n\nThis method provides intermediate voice input functionality when native system\naudio capture is unavailable, maintaining service-oriented architecture while\nusing Python audio library compatibility.\n\nArchitecture:\nPython speech_recognition \u2192 Audio Data \u2192 HTTP \u2192 Whisper Service \u2192 Transcript\n\nArgs:\ncallback: Function to call with transcription result\nduration: Recording duration in seconds",
    "context": "def _simple_audio_recording(self, callback: Optional[Callable[[str], None]], duration: float = 3.0):"
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/native_audio_capture.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "audio",
    "llm_legend": "Native Ubuntu audio capture using system-level ALSA/PipeWire integration",
    "llm_key": "System audio capture without Python library dependencies for voice transcription pipeline",
    "llm_map": "Core audio input component bridging GUI voice interface to Whisper transcription service",
    "llm_axiom": "Native OS capabilities superior to Python library abstractions for audio processing",
    "llm_contract": "Provides clean audio capture \u2192 HTTP \u2192 Whisper service communication interface",
    "llm_token": "native-audio-capture: System-level audio input for voice-first user experience",
    "llm_context": null,
    "raw_comment": "@llm-type audio-capture\n@llm-legend Native Ubuntu audio capture using system-level ALSA/PipeWire integration\n@llm-key System audio capture without Python library dependencies for voice transcription pipeline\n@llm-map Core audio input component bridging GUI voice interface to Whisper transcription service\n@llm-axiom Native OS capabilities superior to Python library abstractions for audio processing\n@llm-contract Provides clean audio capture \u2192 HTTP \u2192 Whisper service communication interface\n@llm-token native-audio-capture: System-level audio input for voice-first user experience",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/native_audio_capture.py",
    "line_number": 83,
    "element_name": "record_and_transcribe",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": "Core voice input method implementing native audio \u2192 Whisper pipeline",
    "llm_map": null,
    "llm_axiom": "Native system tools (arecord) provide superior audio capture to Python libraries",
    "llm_contract": "Records system audio and returns transcribed text via Whisper service",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-key Core voice input method implementing native audio \u2192 Whisper pipeline\n@llm-contract Records system audio and returns transcribed text via Whisper service\n@llm-axiom Native system tools (arecord) provide superior audio capture to Python libraries\n\nRecord audio using Ubuntu's native audio system and send to Whisper service.\nThis represents the correct architectural approach: leverage OS capabilities\nrather than introducing complex Python audio library dependencies.\n\nArgs:\nduration: Recording duration in seconds (default: 3.0)\ncallback: Optional callback function for async result handling\n\nReturns:\nstr: Transcribed text from Whisper service or error message\n\nArchitecture:\nNative Audio (arecord) \u2192 Temporary WAV \u2192 HTTP POST \u2192 Whisper \u2192 Transcript",
    "context": "def record_and_transcribe(self,"
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/native_speech_recognition.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "speech",
    "llm_legend": "Python speech_recognition library integration as fallback for voice transcription",
    "llm_key": "Multi-backend speech recognition with Google Web Speech API and offline options",
    "llm_map": "Fallback component in voice transcription pipeline when native audio unavailable",
    "llm_axiom": "Multiple fallback options ensure voice functionality across diverse system configurations",
    "llm_contract": "Provides speech recognition interface compatible with primary voice pipeline",
    "llm_token": "native-speech-recognition: Python library fallback for voice transcription",
    "llm_context": null,
    "raw_comment": "@llm-type speech-recognition-fallback\n@llm-legend Python speech_recognition library integration as fallback for voice transcription\n@llm-key Multi-backend speech recognition with Google Web Speech API and offline options\n@llm-map Fallback component in voice transcription pipeline when native audio unavailable\n@llm-axiom Multiple fallback options ensure voice functionality across diverse system configurations\n@llm-contract Provides speech recognition interface compatible with primary voice pipeline\n@llm-token native-speech-recognition: Python library fallback for voice transcription",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/native_speech_recognition.py",
    "line_number": 108,
    "element_name": "recognize_from_microphone",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": "Fallback microphone recording with multiple recognition backends",
    "llm_map": "Fallback voice input method when native audio capture unavailable",
    "llm_axiom": null,
    "llm_contract": "Records microphone input and returns transcribed text via selected engine",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-key Fallback microphone recording with multiple recognition backends\n@llm-contract Records microphone input and returns transcribed text via selected engine\n@llm-map Fallback voice input method when native audio capture unavailable\n\nRecord audio from microphone and transcribe using selected recognition engine.\n\nThis method provides fallback voice input functionality when the primary\nnative audio capture approach is unavailable, ensuring voice transcription\nworks across diverse system configurations.\n\nArgs:\nduration: Recording duration in seconds (default: 3.0)\nengine: Recognition engine ('google', 'sphinx', 'whisper_api')\ncallback: Optional callback for async result handling\n\nReturns:\nstr: Transcribed text or descriptive error message\n\nBackend Options:\n- 'google': Google Web Speech API (requires internet)\n- 'sphinx': CMU Sphinx (offline, requires pocketsphinx)\n- 'whisper_api': OpenAI Whisper API (requires API key)",
    "context": "def recognize_from_microphone(self,"
  },
  {
    "file_path": "control/native_gui/tools/chat/bridge/simple_audio_capture.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "audio",
    "llm_legend": "Python speech_recognition library bridge to Whisper service integration",
    "llm_key": "Minimal audio capture using speech_recognition library with Whisper service backend",
    "llm_map": "Intermediate component bridging Python audio libraries to service architecture",
    "llm_axiom": "Service-oriented architecture enables cross-platform voice transcription deployment",
    "llm_contract": "Python audio capture interface with HTTP communication to Whisper service",
    "llm_token": "simple-audio-capture: Python library bridge for voice service integration",
    "llm_context": null,
    "raw_comment": "@llm-type audio-capture-bridge\n@llm-legend Python speech_recognition library bridge to Whisper service integration\n@llm-key Minimal audio capture using speech_recognition library with Whisper service backend\n@llm-map Intermediate component bridging Python audio libraries to service architecture\n@llm-axiom Service-oriented architecture enables cross-platform voice transcription deployment\n@llm-contract Python audio capture interface with HTTP communication to Whisper service\n@llm-token simple-audio-capture: Python library bridge for voice service integration",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/chat/widgets/chat_interface.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "chat_interface.py - system control component",
    "llm_key": "Core functionality for chat_interface",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "chat_interface: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend chat_interface.py - system control component\n@llm-key Core functionality for chat_interface\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token chat_interface: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/chat/widgets/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/service_manager/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/service_manager/tool.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "tool.py - system control component",
    "llm_key": "Core functionality for tool",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "tool: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend tool.py - system control component\n@llm-key Core functionality for tool\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token tool: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/system_monitor/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/system_monitor/tool.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "tool.py - system control component",
    "llm_key": "Core functionality for tool",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "tool: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend tool.py - system control component\n@llm-key Core functionality for tool\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token tool: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/file_browser/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/file_browser/tool.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "tool.py - system control component",
    "llm_key": "Core functionality for tool",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "tool: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend tool.py - system control component\n@llm-key Core functionality for tool\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token tool: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/api_dev/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/api_dev/tool.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "tool.py - system control component",
    "llm_key": "Core functionality for tool",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "tool: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend tool.py - system control component\n@llm-key Core functionality for tool\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token tool: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/api_dev/bridge/reflection_client.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "reflection_client.py - system control component",
    "llm_key": "Core functionality for reflection_client",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "reflection_client: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend reflection_client.py - system control component\n@llm-key Core functionality for reflection_client\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token reflection_client: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/api_dev/bridge/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/api_dev/bridge/network_scanner.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "network_scanner.py - system control component",
    "llm_key": "Core functionality for network_scanner",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "network_scanner: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend network_scanner.py - system control component\n@llm-key Core functionality for network_scanner\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token network_scanner: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/api_dev/bridge/grpc_client.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "grpc_client.py - system control component",
    "llm_key": "Core functionality for grpc_client",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "grpc_client: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend grpc_client.py - system control component\n@llm-key Core functionality for grpc_client\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token grpc_client: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/api_dev/bridge/build_integration.py",
    "line_number": 54,
    "element_name": "BuildSystemIntegration",
    "language": "python",
    "llm_type": "integration",
    "llm_legend": "Build system integration for API development tool",
    "llm_key": "Provides integration between API dev tool and build system",
    "llm_map": "Central integration point for build operations in API development workflow",
    "llm_axiom": "Build operations must be non-blocking and provide real-time feedback",
    "llm_contract": "Provides unified interface for proto generation, client generation, and service discovery",
    "llm_token": "BuildSystemIntegration: Build system integration for API development workflow",
    "llm_context": null,
    "raw_comment": "@llm-type integration-class\n@llm-legend Build system integration for API development tool\n@llm-key Provides integration between API dev tool and build system\n@llm-map Central integration point for build operations in API development workflow\n@llm-axiom Build operations must be non-blocking and provide real-time feedback\n@llm-contract Provides unified interface for proto generation, client generation, and service discovery\n@llm-token BuildSystemIntegration: Build system integration for API development workflow\n\nIntegrates the API development tool with the build system for:\npass\n- Proto file generation and validation\n- gRPC client generation (Python, TypeScript, Kotlin)\n- Service discovery and registry updates\n- Build status monitoring",
    "context": "class BuildSystemIntegration:"
  },
  {
    "file_path": "control/native_gui/tools/api_dev/bridge/build_integration.py",
    "line_number": 105,
    "element_name": "get_proto_files",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Get all proto files from build system configuration",
    "llm_key": "Retrieves proto files from build system proto directories",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Get all proto files from build system configuration\n@llm-key Retrieves proto files from build system proto directories",
    "context": "def get_proto_files(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "control/native_gui/tools/api_dev/bridge/build_integration.py",
    "line_number": 152,
    "element_name": "generate_proto_clients",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Generate gRPC clients for specified languages",
    "llm_key": "Triggers proto client generation through build system",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Generate gRPC clients for specified languages\n@llm-key Triggers proto client generation through build system",
    "context": "def generate_proto_clients(self, languages: List[str] = None) -> BuildOperation:"
  },
  {
    "file_path": "control/native_gui/tools/api_dev/bridge/build_integration.py",
    "line_number": 202,
    "element_name": "update_service_discovery",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Update service discovery registry",
    "llm_key": "Triggers service discovery build to refresh service registry",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Update service discovery registry\n@llm-key Triggers service discovery build to refresh service registry",
    "context": "def update_service_discovery(self) -> BuildOperation:"
  },
  {
    "file_path": "control/native_gui/tools/api_dev/bridge/build_integration.py",
    "line_number": 255,
    "element_name": "get_service_registry",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Get current service registry from build system",
    "llm_key": "Retrieves service registry generated by service discovery builder",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Get current service registry from build system\n@llm-key Retrieves service registry generated by service discovery builder",
    "context": "def get_service_registry(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "control/native_gui/tools/api_dev/bridge/http_client.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "http_client.py - system control component",
    "llm_key": "Core functionality for http_client",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "http_client: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend http_client.py - system control component\n@llm-key Core functionality for http_client\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token http_client: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/api_dev/widgets/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/api_dev/widgets/schema_validator.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "schema_validator.py - system control component",
    "llm_key": "Core functionality for schema_validator",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "schema_validator: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend schema_validator.py - system control component\n@llm-key Core functionality for schema_validator\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token schema_validator: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/api_dev/widgets/response_viewer.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "response_viewer.py - system control component",
    "llm_key": "Core functionality for response_viewer",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "response_viewer: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend response_viewer.py - system control component\n@llm-key Core functionality for response_viewer\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token response_viewer: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/api_dev/widgets/request_builder.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "request_builder.py - system control component",
    "llm_key": "Core functionality for request_builder",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "request_builder: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend request_builder.py - system control component\n@llm-key Core functionality for request_builder\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token request_builder: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/api_dev/widgets/proto_browser.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "proto_browser.py - system control component",
    "llm_key": "Core functionality for proto_browser",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "proto_browser: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend proto_browser.py - system control component\n@llm-key Core functionality for proto_browser\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token proto_browser: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/input_capture/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "module",
    "llm_legend": "Input Capture Tool Module - Advanced input monitoring and analysis",
    "llm_key": "Provides comprehensive keyboard and mouse capture with privacy controls",
    "llm_map": "Input capture tool module in the Unhinged tool architecture",
    "llm_axiom": "Input monitoring must respect user privacy and provide transparent controls",
    "llm_contract": "Exports InputCaptureTool class and factory function for tool system",
    "llm_token": "input_capture_module: Advanced input monitoring tool module",
    "llm_context": null,
    "raw_comment": "@llm-type module-init\n@llm-legend Input Capture Tool Module - Advanced input monitoring and analysis\n@llm-key Provides comprehensive keyboard and mouse capture with privacy controls\n@llm-map Input capture tool module in the Unhinged tool architecture\n@llm-axiom Input monitoring must respect user privacy and provide transparent controls\n@llm-contract Exports InputCaptureTool class and factory function for tool system\n@llm-token input_capture_module: Advanced input monitoring tool module",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/input_capture/tool.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "tool",
    "llm_legend": "Input Capture Tool - Advanced input monitoring and analysis",
    "llm_key": "Provides comprehensive keyboard and mouse capture with privacy controls",
    "llm_map": "Integrates input capture system with the Unhinged tool architecture",
    "llm_axiom": "Input monitoring must respect user privacy and provide transparent controls",
    "llm_contract": "Implements BaseTool interface with mobile-responsive input monitoring widgets",
    "llm_token": "input_capture_tool: Advanced input monitoring tool with mobile-first responsive design",
    "llm_context": null,
    "raw_comment": "@llm-type tool-plugin\n@llm-legend Input Capture Tool - Advanced input monitoring and analysis\n@llm-key Provides comprehensive keyboard and mouse capture with privacy controls\n@llm-map Integrates input capture system with the Unhinged tool architecture\n@llm-axiom Input monitoring must respect user privacy and provide transparent controls\n@llm-contract Implements BaseTool interface with mobile-responsive input monitoring widgets\n@llm-token input_capture_tool: Advanced input monitoring tool with mobile-first responsive design",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/input_capture/tool.py",
    "line_number": 38,
    "element_name": "InputCaptureTool",
    "language": "python",
    "llm_type": "tool",
    "llm_legend": "Advanced input capture tool with mobile-responsive interface",
    "llm_key": "Provides comprehensive input monitoring, analysis, and privacy controls",
    "llm_map": "Core tool for input capture functionality in the Unhinged system",
    "llm_axiom": "Maintains user privacy while providing valuable input insights",
    "llm_contract": "Implements responsive design patterns for all viewport sizes",
    "llm_token": "InputCaptureTool: Advanced input monitoring with mobile-first design",
    "llm_context": null,
    "raw_comment": "@llm-type tool-implementation\n@llm-legend Advanced input capture tool with mobile-responsive interface\n@llm-key Provides comprehensive input monitoring, analysis, and privacy controls\n@llm-map Core tool for input capture functionality in the Unhinged system\n@llm-axiom Maintains user privacy while providing valuable input insights\n@llm-contract Implements responsive design patterns for all viewport sizes\n@llm-token InputCaptureTool: Advanced input monitoring with mobile-first design\n\nAdvanced input capture and analysis tool.\nProvides keyboard/mouse monitoring, hotkey management, and privacy controls.\nAdapts interface based on viewport size for optimal user experience.",
    "context": "class InputCaptureTool(BaseTool):"
  },
  {
    "file_path": "control/native_gui/tools/input_capture/tool.py",
    "line_number": 71,
    "element_name": "_initialize_components",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Initialize input capture components",
    "llm_key": "Sets up monitoring, hotkey management, and privacy controls",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Initialize input capture components\n@llm-key Sets up monitoring, hotkey management, and privacy controls",
    "context": "def _initialize_components(self):"
  },
  {
    "file_path": "control/native_gui/tools/input_capture/tool.py",
    "line_number": 84,
    "element_name": "_create_viewport_widget",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Create viewport-specific widget for input capture tool",
    "llm_key": "Provides optimized layouts for mobile, tablet, and desktop viewports",
    "llm_map": "Implements responsive design patterns for input monitoring interface",
    "llm_axiom": "Interface must be functional and accessible across all viewport sizes",
    "llm_contract": "Returns GTK widget optimized for the specified viewport",
    "llm_token": "_create_viewport_widget: Responsive input capture interface creation",
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Create viewport-specific widget for input capture tool\n@llm-key Provides optimized layouts for mobile, tablet, and desktop viewports\n@llm-map Implements responsive design patterns for input monitoring interface\n@llm-axiom Interface must be functional and accessible across all viewport sizes\n@llm-contract Returns GTK widget optimized for the specified viewport\n@llm-token _create_viewport_widget: Responsive input capture interface creation\n\nCreate input capture interface optimized for the specified viewport.\n\nArgs:\nviewport: Target viewport (mobile/tablet/desktop)\n\nReturns:\nGTK widget optimized for the viewport",
    "context": "def _create_viewport_widget(self, viewport: ToolViewport):"
  },
  {
    "file_path": "control/native_gui/tools/input_capture/tool.py",
    "line_number": 112,
    "element_name": "_create_mobile_widget",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Create mobile-optimized input capture interface",
    "llm_key": "Single-column layout with essential controls prioritized",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Create mobile-optimized input capture interface\n@llm-key Single-column layout with essential controls prioritized",
    "context": "def _create_mobile_widget(self):"
  },
  {
    "file_path": "control/native_gui/tools/input_capture/tool.py",
    "line_number": 138,
    "element_name": "_create_tablet_widget",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Create tablet-optimized input capture interface",
    "llm_key": "Two-column grid layout with balanced component distribution",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Create tablet-optimized input capture interface\n@llm-key Two-column grid layout with balanced component distribution",
    "context": "def _create_tablet_widget(self):"
  },
  {
    "file_path": "control/native_gui/tools/input_capture/tool.py",
    "line_number": 161,
    "element_name": "_create_desktop_widget",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Create desktop-optimized input capture interface",
    "llm_key": "Three-column layout with full feature set and detailed controls",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Create desktop-optimized input capture interface\n@llm-key Three-column layout with full feature set and detailed controls",
    "context": "def _create_desktop_widget(self):"
  },
  {
    "file_path": "control/native_gui/tools/input_capture/tool.py",
    "line_number": 194,
    "element_name": "_create_unavailable_widget",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Create widget when input capture is unavailable",
    "llm_key": "Provides informative error state with installation guidance",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Create widget when input capture is unavailable\n@llm-key Provides informative error state with installation guidance",
    "context": "def _create_unavailable_widget(self):"
  },
  {
    "file_path": "control/native_gui/tools/input_capture/tool.py",
    "line_number": 226,
    "element_name": "on_activate",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Handle tool activation",
    "llm_key": "Starts input monitoring services when tool becomes active",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Handle tool activation\n@llm-key Starts input monitoring services when tool becomes active",
    "context": "def on_activate(self):"
  },
  {
    "file_path": "control/native_gui/tools/input_capture/tool.py",
    "line_number": 237,
    "element_name": "on_deactivate",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Handle tool deactivation",
    "llm_key": "Ensures proper cleanup when tool becomes inactive",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Handle tool deactivation\n@llm-key Ensures proper cleanup when tool becomes inactive",
    "context": "def on_deactivate(self):"
  },
  {
    "file_path": "control/native_gui/tools/input_capture/tool.py",
    "line_number": 250,
    "element_name": "on_destroy",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Handle tool destruction",
    "llm_key": "Performs comprehensive cleanup of input capture resources",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Handle tool destruction\n@llm-key Performs comprehensive cleanup of input capture resources",
    "context": "def on_destroy(self):"
  },
  {
    "file_path": "control/native_gui/tools/input_capture/tool.py",
    "line_number": 272,
    "element_name": "get_status_info",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Get current status information for the tool",
    "llm_key": "Provides status data for system monitoring and debugging",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Get current status information for the tool\n@llm-key Provides status data for system monitoring and debugging",
    "context": "def get_status_info(self) -> dict:"
  },
  {
    "file_path": "control/native_gui/tools/input_capture/tool.py",
    "line_number": 293,
    "element_name": "create_tool",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Factory function for creating InputCaptureTool instances",
    "llm_key": "Required by the tool plugin system for automatic tool discovery",
    "llm_map": "Entry point for tool registration in the Unhinged tool manager",
    "llm_axiom": "Must return a properly initialized tool instance",
    "llm_contract": "Returns InputCaptureTool instance ready for use",
    "llm_token": "create_tool: Tool factory function for plugin system integration",
    "llm_context": null,
    "raw_comment": "@llm-type factory-function\n@llm-legend Factory function for creating InputCaptureTool instances\n@llm-key Required by the tool plugin system for automatic tool discovery\n@llm-map Entry point for tool registration in the Unhinged tool manager\n@llm-axiom Must return a properly initialized tool instance\n@llm-contract Returns InputCaptureTool instance ready for use\n@llm-token create_tool: Tool factory function for plugin system integration\n\nFactory function for creating InputCaptureTool instances.\nRequired by the tool plugin system.\n\nReturns:\nInputCaptureTool: Initialized input capture tool instance",
    "context": "def create_tool() -> InputCaptureTool:"
  },
  {
    "file_path": "control/native_gui/tools/log_viewer/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/tools/log_viewer/tool.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "tool.py - system control component",
    "llm_key": "Core functionality for tool",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "tool: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend tool.py - system control component\n@llm-key Core functionality for tool\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token tool: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "theme",
    "llm_legend": "Enhanced Theme Manager - Unified theming system with mobile-responsive CSS support",
    "llm_key": "Manages GTK4 themes, mobile-responsive styles, and dynamic theme switching",
    "llm_map": "Central theming component in Unhinged native GUI architecture",
    "llm_axiom": "Themes must maintain consistency across desktop and mobile viewports",
    "llm_contract": "Provides standardized theming interface with mobile-first responsive design",
    "llm_token": "theme_manager: Enhanced theming system with mobile-responsive CSS integration",
    "llm_context": null,
    "raw_comment": "@llm-type theme-system\n@llm-legend Enhanced Theme Manager - Unified theming system with mobile-responsive CSS support\n@llm-key Manages GTK4 themes, mobile-responsive styles, and dynamic theme switching\n@llm-map Central theming component in Unhinged native GUI architecture\n@llm-axiom Themes must maintain consistency across desktop and mobile viewports\n@llm-contract Provides standardized theming interface with mobile-first responsive design\n@llm-token theme_manager: Enhanced theming system with mobile-responsive CSS integration",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 36,
    "element_name": "ThemeVariant",
    "language": "python",
    "llm_type": "enum",
    "llm_legend": "Theme variant types for different use cases",
    "llm_key": "Defines available theme variants with specific characteristics",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type enum\n@llm-legend Theme variant types for different use cases\n@llm-key Defines available theme variants with specific characteristics",
    "context": "class ThemeVariant(Enum):"
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 50,
    "element_name": "ThemeConfig",
    "language": "python",
    "llm_type": "configuration",
    "llm_legend": "Theme configuration with mobile-responsive properties",
    "llm_key": "Defines theme parameters for consistent styling across viewports",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type configuration\n@llm-legend Theme configuration with mobile-responsive properties\n@llm-key Defines theme parameters for consistent styling across viewports",
    "context": "class ThemeConfig:"
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 78,
    "element_name": "ThemeManager",
    "language": "python",
    "llm_type": "manager",
    "llm_legend": "Enhanced theme manager with mobile-responsive capabilities",
    "llm_key": "Manages GTK4 themes, CSS loading, and responsive design adaptation",
    "llm_map": "Central theming system for Unhinged native GUI with mobile support",
    "llm_axiom": "Themes must provide consistent experience across all viewport sizes",
    "llm_contract": "Provides unified theming interface with mobile-first responsive design",
    "llm_token": "ThemeManager: Enhanced theming system with mobile-responsive CSS support",
    "llm_context": null,
    "raw_comment": "@llm-type manager-class\n@llm-legend Enhanced theme manager with mobile-responsive capabilities\n@llm-key Manages GTK4 themes, CSS loading, and responsive design adaptation\n@llm-map Central theming system for Unhinged native GUI with mobile support\n@llm-axiom Themes must provide consistent experience across all viewport sizes\n@llm-contract Provides unified theming interface with mobile-first responsive design\n@llm-token ThemeManager: Enhanced theming system with mobile-responsive CSS support\n\nEnhanced theme manager for the Unhinged Control Center.\nProvides unified theming with mobile-responsive CSS support.",
    "context": "class ThemeManager:"
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 128,
    "element_name": "setup_theming",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Set up enhanced application-wide theming with mobile support",
    "llm_key": "Initializes theme system with responsive CSS and mobile optimization",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Set up enhanced application-wide theming with mobile support\n@llm-key Initializes theme system with responsive CSS and mobile optimization",
    "context": "def setup_theming(self):"
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 148,
    "element_name": "_load_mobile_css",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Load mobile-responsive CSS using shared generator",
    "llm_key": "Applies mobile-optimized CSS for responsive design",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Load mobile-responsive CSS using shared generator\n@llm-key Applies mobile-optimized CSS for responsive design",
    "context": "def _load_mobile_css(self):"
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 179,
    "element_name": "_initialize_theme_system",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Initialize the enhanced theme system with CSS providers",
    "llm_key": "Sets up GTK4 CSS providers and loads base themes",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Initialize the enhanced theme system with CSS providers\n@llm-key Sets up GTK4 CSS providers and loads base themes",
    "context": "def _initialize_theme_system(self):"
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 200,
    "element_name": "_setup_css_providers",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Set up GTK4 CSS providers for theme management",
    "llm_key": "Creates and configures CSS providers for different theme components",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Set up GTK4 CSS providers for theme management\n@llm-key Creates and configures CSS providers for different theme components",
    "context": "def _setup_css_providers(self):"
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 220,
    "element_name": "_load_base_theme",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": "Load base theme CSS into providers",
    "llm_map": "Core theme loading method for application styling",
    "llm_axiom": null,
    "llm_contract": "Loads foundational CSS styling into GTK CSS providers",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-key Load base theme CSS into providers\n@llm-contract Loads foundational CSS styling into GTK CSS providers\n@llm-map Core theme loading method for application styling\n\nLoad base theme CSS and apply to display.",
    "context": "def _load_base_theme(self):"
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 252,
    "element_name": "_apply_theme_variant",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Apply specific theme variant to the application",
    "llm_key": "Configures theme variant-specific styling and behavior",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Apply specific theme variant to the application\n@llm-key Configures theme variant-specific styling and behavior",
    "context": "def _apply_theme_variant(self, variant: ThemeVariant):"
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 1059,
    "element_name": "_generate_base_css",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Generate base CSS with Unhinged design system using shared generator",
    "llm_key": "Creates foundational CSS with consistent design tokens via CSSGenerator",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Generate base CSS with Unhinged design system using shared generator\n@llm-key Creates foundational CSS with consistent design tokens via CSSGenerator",
    "context": "def _generate_base_css(self) -> str:"
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 1069,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "generated",
    "llm_legend": "Base theme CSS with Unhinged design system and mobile support */ /*",
    "llm_key": "Foundational styling for consistent UI appearance across viewports */",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "/* Enhanced Unhinged Control Center Base Theme */\n/* @llm-type generated-css */\n/* @llm-legend Base theme CSS with Unhinged design system and mobile support */\n/* @llm-key Foundational styling for consistent UI appearance across viewports */\n\n/* GTK CSS doesn't support :root or CSS custom properties */",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 1081,
    "element_name": "_generate_mobile_css",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Generate mobile-specific CSS overrides using shared generator",
    "llm_key": "Provides mobile-optimized styling via CSSGenerator",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Generate mobile-specific CSS overrides using shared generator\n@llm-key Provides mobile-optimized styling via CSSGenerator",
    "context": "def _generate_mobile_css(self) -> str:"
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 1093,
    "element_name": "_apply_high_contrast_css",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Apply high contrast CSS overrides using shared generator",
    "llm_key": "Provides accessibility-focused high contrast styling via CSSGenerator",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Apply high contrast CSS overrides using shared generator\n@llm-key Provides accessibility-focused high contrast styling via CSSGenerator",
    "context": "def _apply_high_contrast_css(self):"
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 1121,
    "element_name": "set_mobile_mode",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Enable or disable mobile mode",
    "llm_key": "Toggles mobile-optimized styling and behavior",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Enable or disable mobile mode\n@llm-key Toggles mobile-optimized styling and behavior",
    "context": "def set_mobile_mode(self, enabled: bool):"
  },
  {
    "file_path": "control/native_gui/core/theme_manager.py",
    "line_number": 1135,
    "element_name": "get_theme_info",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Get current theme information",
    "llm_key": "Returns comprehensive theme state and configuration",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Get current theme information\n@llm-key Returns comprehensive theme state and configuration",
    "context": "def get_theme_info(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "control/native_gui/core/tool_manager.py",
    "line_number": 13,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "tool_manager.py - Enhanced tool management with mobile-responsive capabilities",
    "llm_key": "Core functionality for tool lifecycle, registration, and mobile UI integration",
    "llm_map": "Central component in Unhinged tool architecture, bridges desktop and mobile interfaces",
    "llm_axiom": "Tools must support both desktop and mobile viewports while maintaining native GTK performance",
    "llm_contract": "Provides standardized BaseTool interface with mobile-responsive widget creation",
    "llm_token": "tool_manager: Enhanced tool management system with mobile-first responsive design",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend tool_manager.py - Enhanced tool management with mobile-responsive capabilities\n@llm-key Core functionality for tool lifecycle, registration, and mobile UI integration\n@llm-map Central component in Unhinged tool architecture, bridges desktop and mobile interfaces\n@llm-axiom Tools must support both desktop and mobile viewports while maintaining native GTK performance\n@llm-contract Provides standardized BaseTool interface with mobile-responsive widget creation\n@llm-token tool_manager: Enhanced tool management system with mobile-first responsive design",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/tool_manager.py",
    "line_number": 54,
    "element_name": "ToolViewport",
    "language": "python",
    "llm_type": "enum",
    "llm_legend": "Tool viewport types for responsive design",
    "llm_key": "Defines how tools adapt to different screen sizes",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type enum\n@llm-legend Tool viewport types for responsive design\n@llm-key Defines how tools adapt to different screen sizes",
    "context": "class ToolViewport(Enum):"
  },
  {
    "file_path": "control/native_gui/core/tool_manager.py",
    "line_number": 65,
    "element_name": "BaseTool",
    "language": "python",
    "llm_type": "base",
    "llm_legend": "Enhanced base class for all tools with mobile-responsive capabilities",
    "llm_key": "Provides standardized interface for tool creation with viewport adaptation",
    "llm_map": "Foundation of the tool plugin system, supports both desktop and mobile interfaces",
    "llm_axiom": "Tools must gracefully adapt to different screen sizes while maintaining functionality",
    "llm_contract": "All tools inherit from this class and implement viewport-specific widget creation",
    "llm_token": "BaseTool: Enhanced tool base class with mobile-first responsive design",
    "llm_context": null,
    "raw_comment": "@llm-type base-class\n@llm-legend Enhanced base class for all tools with mobile-responsive capabilities\n@llm-key Provides standardized interface for tool creation with viewport adaptation\n@llm-map Foundation of the tool plugin system, supports both desktop and mobile interfaces\n@llm-axiom Tools must gracefully adapt to different screen sizes while maintaining functionality\n@llm-contract All tools inherit from this class and implement viewport-specific widget creation\n@llm-token BaseTool: Enhanced tool base class with mobile-first responsive design\n\nBase class for all tools in the Unhinged Control Center.\nEnhanced with mobile-responsive capabilities and viewport adaptation.\n\nEach tool must inherit from this class and implement the required methods.\nTools can provide different widgets for different viewports (mobile/tablet/desktop).",
    "context": "class BaseTool:"
  },
  {
    "file_path": "control/native_gui/core/tool_manager.py",
    "line_number": 141,
    "element_name": "create_widget",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Create viewport-specific widget for the tool",
    "llm_key": "Enhanced widget creation with responsive design support",
    "llm_map": "Core method for tool widget instantiation with viewport awareness",
    "llm_axiom": "Widgets must adapt to viewport constraints while maintaining functionality",
    "llm_contract": "Returns GTK widget optimized for the specified viewport",
    "llm_token": "create_widget: Enhanced widget creation with mobile-responsive design",
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Create viewport-specific widget for the tool\n@llm-key Enhanced widget creation with responsive design support\n@llm-map Core method for tool widget instantiation with viewport awareness\n@llm-axiom Widgets must adapt to viewport constraints while maintaining functionality\n@llm-contract Returns GTK widget optimized for the specified viewport\n@llm-token create_widget: Enhanced widget creation with mobile-responsive design\n\nCreate and return the tool's widget for the specified viewport.\nTools can override this to provide viewport-specific implementations.\n\nArgs:\nviewport: Target viewport (mobile/tablet/desktop)\n\nReturns:\nGTK widget optimized for the viewport",
    "context": "def create_widget(self, viewport: ToolViewport = ToolViewport.DESKTOP):"
  },
  {
    "file_path": "control/native_gui/core/tool_manager.py",
    "line_number": 174,
    "element_name": "_create_viewport_widget",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Internal method for viewport-specific widget creation",
    "llm_key": "Override this method to provide custom viewport implementations",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Internal method for viewport-specific widget creation\n@llm-key Override this method to provide custom viewport implementations\n\nCreate widget for specific viewport. Override in subclasses.\nDefault implementation provides basic responsive behavior.",
    "context": "def _create_viewport_widget(self, viewport: ToolViewport):"
  },
  {
    "file_path": "control/native_gui/core/tool_manager.py",
    "line_number": 228,
    "element_name": "set_viewport",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Update tool's current viewport and trigger adaptation",
    "llm_key": "Handles viewport transitions and widget updates",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Update tool's current viewport and trigger adaptation\n@llm-key Handles viewport transitions and widget updates",
    "context": "def set_viewport(self, viewport: ToolViewport):"
  },
  {
    "file_path": "control/native_gui/core/tool_manager.py",
    "line_number": 249,
    "element_name": "get_widget",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Get tool's widget with optional viewport specification",
    "llm_key": "Enhanced widget retrieval with viewport awareness",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Get tool's widget with optional viewport specification\n@llm-key Enhanced widget retrieval with viewport awareness\n\nGet the tool's widget (creates if not exists).\nEnhanced to support viewport-specific widgets.",
    "context": "def get_widget(self, viewport: ToolViewport = None):"
  },
  {
    "file_path": "control/native_gui/core/mobile_components.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "mobile_components.py - system control component",
    "llm_key": "Core functionality for mobile_components",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "mobile_components: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend mobile_components.py - system control component\n@llm-key Core functionality for mobile_components\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token mobile_components: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/viewport_manager.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "viewport_manager.py - system control component",
    "llm_key": "Core functionality for viewport_manager",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "viewport_manager: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend viewport_manager.py - system control component\n@llm-key Core functionality for viewport_manager\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token viewport_manager: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "tool",
    "llm_legend": "Tool Configuration System - Standardized tool initialization and metadata",
    "llm_key": "Provides unified tool configuration to eliminate duplicate initialization patterns",
    "llm_map": "Central tool configuration component in Unhinged native GUI architecture",
    "llm_axiom": "Tool configuration must be consistent and follow established patterns",
    "llm_contract": "Provides standardized tool configuration interface for all tools",
    "llm_token": "tool_config: Unified tool configuration system for standardized initialization",
    "llm_context": null,
    "raw_comment": "@llm-type tool-configuration\n@llm-legend Tool Configuration System - Standardized tool initialization and metadata\n@llm-key Provides unified tool configuration to eliminate duplicate initialization patterns\n@llm-map Central tool configuration component in Unhinged native GUI architecture\n@llm-axiom Tool configuration must be consistent and follow established patterns\n@llm-contract Provides standardized tool configuration interface for all tools\n@llm-token tool_config: Unified tool configuration system for standardized initialization",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 17,
    "element_name": "ToolCategory",
    "language": "python",
    "llm_type": "enum",
    "llm_legend": "Tool category types for organization and filtering",
    "llm_key": "Defines tool categories for consistent organization",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type enum\n@llm-legend Tool category types for organization and filtering\n@llm-key Defines tool categories for consistent organization",
    "context": "class ToolCategory(Enum):"
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 32,
    "element_name": "ToolPriority",
    "language": "python",
    "llm_type": "enum",
    "llm_legend": "Tool priority levels for mobile interface ordering",
    "llm_key": "Defines priority levels for mobile tool display order",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type enum\n@llm-legend Tool priority levels for mobile interface ordering\n@llm-key Defines priority levels for mobile tool display order",
    "context": "class ToolPriority(Enum):"
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 46,
    "element_name": "ToolConfig",
    "language": "python",
    "llm_type": "configuration",
    "llm_legend": "Comprehensive tool configuration with mobile-responsive properties",
    "llm_key": "Defines all tool parameters for consistent initialization and behavior",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type configuration\n@llm-legend Comprehensive tool configuration with mobile-responsive properties\n@llm-key Defines all tool parameters for consistent initialization and behavior",
    "context": "class ToolConfig:"
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 91,
    "element_name": "ToolMetadata",
    "language": "python",
    "llm_type": "metadata",
    "llm_legend": "Tool metadata for runtime information and statistics",
    "llm_key": "Contains runtime metadata and usage statistics for tools",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type metadata\n@llm-legend Tool metadata for runtime information and statistics\n@llm-key Contains runtime metadata and usage statistics for tools",
    "context": "class ToolMetadata:"
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 115,
    "element_name": "ToolConfigFactory",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Factory for creating standardized tool configurations",
    "llm_key": "Provides convenient methods for creating common tool configuration patterns",
    "llm_map": "Central factory for tool configuration creation in Unhinged native GUI",
    "llm_axiom": "Factory methods must provide sensible defaults and consistent patterns",
    "llm_contract": "Provides standardized tool configuration creation interface",
    "llm_token": "ToolConfigFactory: Factory for standardized tool configuration creation",
    "llm_context": null,
    "raw_comment": "@llm-type factory-class\n@llm-legend Factory for creating standardized tool configurations\n@llm-key Provides convenient methods for creating common tool configuration patterns\n@llm-map Central factory for tool configuration creation in Unhinged native GUI\n@llm-axiom Factory methods must provide sensible defaults and consistent patterns\n@llm-contract Provides standardized tool configuration creation interface\n@llm-token ToolConfigFactory: Factory for standardized tool configuration creation\n\nFactory class for creating standardized tool configurations.\nProvides convenient methods for common tool patterns.",
    "context": "class ToolConfigFactory:"
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 130,
    "element_name": "create_system_tool",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create configuration for system monitoring tools",
    "llm_key": "Creates system tool configuration with appropriate defaults",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create configuration for system monitoring tools\n@llm-key Creates system tool configuration with appropriate defaults",
    "context": "def create_system_tool(name: str, icon: str, description: str, **kwargs) -> ToolConfig:"
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 148,
    "element_name": "create_development_tool",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create configuration for development tools",
    "llm_key": "Creates development tool configuration with appropriate defaults",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create configuration for development tools\n@llm-key Creates development tool configuration with appropriate defaults",
    "context": "def create_development_tool(name: str, icon: str, description: str, **kwargs) -> ToolConfig:"
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 166,
    "element_name": "create_monitoring_tool",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create configuration for monitoring tools",
    "llm_key": "Creates monitoring tool configuration with appropriate defaults",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create configuration for monitoring tools\n@llm-key Creates monitoring tool configuration with appropriate defaults",
    "context": "def create_monitoring_tool(name: str, icon: str, description: str, **kwargs) -> ToolConfig:"
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 185,
    "element_name": "create_utility_tool",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create configuration for utility tools",
    "llm_key": "Creates utility tool configuration with appropriate defaults",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create configuration for utility tools\n@llm-key Creates utility tool configuration with appropriate defaults",
    "context": "def create_utility_tool(name: str, icon: str, description: str, **kwargs) -> ToolConfig:"
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 202,
    "element_name": "create_communication_tool",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create configuration for communication tools",
    "llm_key": "Creates communication tool configuration with appropriate defaults",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create configuration for communication tools\n@llm-key Creates communication tool configuration with appropriate defaults",
    "context": "def create_communication_tool(name: str, icon: str, description: str, **kwargs) -> ToolConfig:"
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 222,
    "element_name": "create_mobile_optimized_tool",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create configuration for mobile-optimized tools",
    "llm_key": "Creates mobile-first tool configuration with touch optimization",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create configuration for mobile-optimized tools\n@llm-key Creates mobile-first tool configuration with touch optimization",
    "context": "def create_mobile_optimized_tool(name: str, icon: str, description: str,"
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 242,
    "element_name": "ToolConfigValidator",
    "language": "python",
    "llm_type": "validator",
    "llm_legend": "Validator for tool configuration consistency and correctness",
    "llm_key": "Validates tool configurations to ensure consistency and prevent errors",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type validator-class\n@llm-legend Validator for tool configuration consistency and correctness\n@llm-key Validates tool configurations to ensure consistency and prevent errors",
    "context": "class ToolConfigValidator:"
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 250,
    "element_name": "validate_config",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Validate tool configuration for consistency and correctness",
    "llm_key": "Returns list of validation errors, empty if valid",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Validate tool configuration for consistency and correctness\n@llm-key Returns list of validation errors, empty if valid",
    "context": "def validate_config(config: ToolConfig) -> List[str]:"
  },
  {
    "file_path": "control/native_gui/core/tool_config.py",
    "line_number": 285,
    "element_name": "is_valid",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Check if tool configuration is valid",
    "llm_key": "Returns True if configuration is valid, False otherwise",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Check if tool configuration is valid\n@llm-key Returns True if configuration is valid, False otherwise",
    "context": "def is_valid(config: ToolConfig) -> bool:"
  },
  {
    "file_path": "control/native_gui/core/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "css",
    "llm_legend": "Shared CSS Generator - Consolidated CSS generation for mobile UI framework",
    "llm_key": "Provides unified CSS generation logic to eliminate duplication across theme and build systems",
    "llm_map": "Central CSS generation component in Unhinged native GUI architecture",
    "llm_axiom": "CSS generation must be consistent and follow GTK4 theming conventions",
    "llm_contract": "Provides standardized CSS generation interface for themes and build system",
    "llm_token": "css_generator: Unified CSS generation system for mobile-responsive UI framework",
    "llm_context": null,
    "raw_comment": "@llm-type css-generator\n@llm-legend Shared CSS Generator - Consolidated CSS generation for mobile UI framework\n@llm-key Provides unified CSS generation logic to eliminate duplication across theme and build systems\n@llm-map Central CSS generation component in Unhinged native GUI architecture\n@llm-axiom CSS generation must be consistent and follow GTK4 theming conventions\n@llm-contract Provides standardized CSS generation interface for themes and build system\n@llm-token css_generator: Unified CSS generation system for mobile-responsive UI framework",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 25,
    "element_name": "CSSConfig",
    "language": "python",
    "llm_type": "configuration",
    "llm_legend": "CSS generation configuration with responsive design parameters",
    "llm_key": "Defines CSS generation parameters for consistent styling across viewports",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type configuration\n@llm-legend CSS generation configuration with responsive design parameters\n@llm-key Defines CSS generation parameters for consistent styling across viewports",
    "context": "class CSSConfig:"
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 57,
    "element_name": "CSSGenerator",
    "language": "python",
    "llm_type": "generator",
    "llm_legend": "Unified CSS generator for mobile-responsive UI framework",
    "llm_key": "Consolidates CSS generation logic from theme manager and mobile UI builder",
    "llm_map": "Central CSS generation system for Unhinged native GUI with mobile support",
    "llm_axiom": "CSS generation must be consistent and eliminate duplication",
    "llm_contract": "Provides unified CSS generation interface for all styling needs",
    "llm_token": "CSSGenerator: Consolidated CSS generation system for mobile-first responsive design",
    "llm_context": null,
    "raw_comment": "@llm-type generator-class\n@llm-legend Unified CSS generator for mobile-responsive UI framework\n@llm-key Consolidates CSS generation logic from theme manager and mobile UI builder\n@llm-map Central CSS generation system for Unhinged native GUI with mobile support\n@llm-axiom CSS generation must be consistent and eliminate duplication\n@llm-contract Provides unified CSS generation interface for all styling needs\n@llm-token CSSGenerator: Consolidated CSS generation system for mobile-first responsive design\n\nUnified CSS generator that consolidates duplicate CSS generation logic\nfrom both theme_manager.py and mobile_ui_builder.py.",
    "context": "class CSSGenerator:"
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 74,
    "element_name": "generate_mobile_css",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Generate mobile-first base CSS",
    "llm_key": "Creates mobile-optimized CSS with touch-friendly controls",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Generate mobile-first base CSS\n@llm-key Creates mobile-optimized CSS with touch-friendly controls",
    "context": "def generate_mobile_css(self) -> str:"
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 82,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "generated",
    "llm_legend": "Mobile-optimized CSS with touch-friendly controls */ /*",
    "llm_key": "Base mobile styling for responsive UI framework */",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "/* Mobile-first base styles */\n/* @llm-type generated-css */\n/* @llm-legend Mobile-optimized CSS with touch-friendly controls */\n/* @llm-key Base mobile styling for responsive UI framework */\n\n.mobile-optimized {{\npadding: {mobile_spacing}px;\nmargin: {mobile_spacing // 2}px;\n}}\n\n.viewport-mobile {{\nfont-size: {mobile_font_size}px;\npadding: {mobile_spacing}px;\n}}\n\n.touch-button {{\nmin-height: {self.config.min_touch_target}px;\nmin-width: {self.config.min_touch_target}px;\npadding: {self.config.touch_padding}px;\nborder-radius: {self.config.border_radius}px;\ntransition: all 150ms ease;\n}}\n\n.touch-button:hover {{\nbackground-color: alpha(@theme_fg_color, 0.1);\n}}\n\n.touch-button.pressed {{\nbackground-color: alpha(@theme_fg_color, 0.2);\ntransform: scale(0.95);\n}}\n\n.touch-button:active {{\ntransform: scale(0.95);\nbackground-color: alpha(@theme_fg_color, 0.1);\n}}\n\n.card {{\nbackground-color: @theme_base_color;\nborder-radius: calc({self.config.border_radius}px * 1.5);\nbox-shadow: 0 2px 8px alpha(@theme_fg_color, 0.1);\nmargin: {mobile_spacing}px;\npadding: {self.config.base_spacing}px;\ntransition: all 200ms ease;\n}}\n\n.card:hover {{\nbox-shadow: 0 4px 16px alpha(@theme_fg_color, 0.15);\ntransform: translateY(-2px);\n}}\n\n.card-title {{\nfont-weight: bold;\nfont-size: 1.2em;\nmargin-bottom: 4px;\n}}\n\n.card-subtitle {{\nopacity: 0.7;\nfont-size: 0.9em;\nmargin-bottom: {self.config.base_spacing}px;\n}}",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 148,
    "element_name": "generate_responsive_css",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Generate responsive breakpoint CSS",
    "llm_key": "Creates responsive media queries for mobile-first design",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Generate responsive breakpoint CSS\n@llm-key Creates responsive media queries for mobile-first design",
    "context": "def generate_responsive_css(self) -> str:"
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 153,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "responsive",
    "llm_legend": "Responsive media queries for mobile-first design */ /*",
    "llm_key": "Breakpoint-based styling for different viewport sizes */",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "/* Responsive breakpoints */\n/* @llm-type responsive-css */\n/* @llm-legend Responsive media queries for mobile-first design */\n/* @llm-key Breakpoint-based styling for different viewport sizes */\n\n@media (max-width: {self.config.mobile_breakpoint}px) {{\n.desktop-only {{ opacity: 0; }}\n.mobile-hidden {{ opacity: 0; }}\n\n.mobile-only {{\nopacity: 1;\npointer-events: auto;\n}}\n\n.responsive-grid {{\ngrid-template-columns: 1fr;\ngap: {int(self.config.base_spacing * self.config.mobile_spacing_scale)}px;\n}}\n\n.responsive-spacing {{\npadding: {int(self.config.base_spacing * self.config.mobile_spacing_scale)}px;\nmargin: {int(self.config.base_spacing * self.config.mobile_spacing_scale // 2)}px;\n}}\n}}\n\n@media (min-width: {self.config.mobile_breakpoint}px) and (max-width: {self.config.tablet_breakpoint}px) {{\n.mobile-only {{ opacity: 0; }}\n.desktop-only {{ opacity: 0; }}\n\n.tablet-only {{\nopacity: 1;\npointer-events: auto;\n}}\n\n.responsive-grid {{\ngrid-template-columns: repeat(2, 1fr);\ngap: {self.config.base_spacing}px;\n}}\n\n.responsive-spacing {{\npadding: {self.config.base_spacing}px;\nmargin: {self.config.base_spacing // 2}px;\n}}\n}}\n\n@media (min-width: {self.config.tablet_breakpoint}px) {{\n.mobile-only {{ opacity: 0; }}\n.tablet-only {{ opacity: 0; }}\n\n.desktop-only {{\nopacity: 1;\npointer-events: auto;\n}}\n\n.responsive-grid {{\ngrid-template-columns: repeat(3, 1fr);\ngap: {self.config.base_spacing + 4}px;\n}}\n\n.responsive-spacing {{\npadding: {self.config.base_spacing + 4}px;\nmargin: {self.config.base_spacing}px;\n}}\n}}",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 221,
    "element_name": "generate_component_css",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Generate component-specific CSS",
    "llm_key": "Creates styling for UI components with consistent design tokens",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Generate component-specific CSS\n@llm-key Creates styling for UI components with consistent design tokens",
    "context": "def generate_component_css(self) -> str:"
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 226,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "component",
    "llm_legend": "Component styling with consistent design tokens */ /*",
    "llm_key": "Standardized component appearance and behavior */",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "/* Component-specific styles */\n/* @llm-type component-css */\n/* @llm-legend Component styling with consistent design tokens */\n/* @llm-key Standardized component appearance and behavior */\n\n.status-indicator {{\npadding: {self.config.base_spacing // 2}px {self.config.base_spacing}px;\nborder-radius: {self.config.border_radius // 2}px;\nfont-size: {self.config.base_font_size}px;\n}}\n\n.status-indicator.status-success {{\nbackground-color: alpha({self.config.success_color}, 0.1);\ncolor: {self.config.success_color};\n}}\n\n.status-indicator.status-warning {{\nbackground-color: alpha({self.config.warning_color}, 0.1);\ncolor: {self.config.warning_color};\n}}\n\n.status-indicator.status-error {{\nbackground-color: alpha({self.config.error_color}, 0.1);\ncolor: {self.config.error_color};\n}}\n\n.metric-value {{\nfont-size: 2em;\nfont-weight: bold;\nline-height: 1;\n}}\n\n.trend-positive {{\ncolor: {self.config.success_color};\n}}\n\n.trend-negative {{\ncolor: {self.config.error_color};\n}}\n\n.loading-spinner {{\npadding: {self.config.base_spacing * 2}px;\n}}\n\n.empty-state {{\npadding: {self.config.base_spacing * 2}px;\n}}\n\n.empty-state-icon {{\nopacity: 0.6;\n}}\n\n.empty-state-title {{\nfont-weight: bold;\nfont-size: 1.2em;\n}}\n\n.empty-state-subtitle {{\nopacity: 0.7;\n}}",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 290,
    "element_name": "generate_high_contrast_css",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Generate high contrast accessibility CSS",
    "llm_key": "Creates accessibility-focused high contrast styling",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Generate high contrast accessibility CSS\n@llm-key Creates accessibility-focused high contrast styling",
    "context": "def generate_high_contrast_css(self) -> str:"
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 295,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "accessibility",
    "llm_legend": "High contrast styling for accessibility */ /*",
    "llm_key": "Enhanced contrast for better visibility */",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "/* High contrast theme overrides */\n/* @llm-type accessibility-css */\n/* @llm-legend High contrast styling for accessibility */\n/* @llm-key Enhanced contrast for better visibility */\n\n:root {{\n--primary-color: #0066CC;\n--success-color: #008800;\n--warning-color: #CC6600;\n--error-color: #CC0000;\n}}\n\nbutton {{\nborder: 2px solid @theme_fg_color;\n}}\n\n.card {{\nborder: 1px solid @theme_fg_color;\n}}\n\n.status-indicator {{\nborder: 1px solid currentColor;\n}}\n\n.touch-button {{\nborder: 2px solid @theme_fg_color;\nfont-weight: bold;\n}}",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 327,
    "element_name": "generate_navigation_css",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Generate navigation-specific CSS",
    "llm_key": "Creates mobile-friendly navigation styling",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Generate navigation-specific CSS\n@llm-key Creates mobile-friendly navigation styling",
    "context": "def generate_navigation_css(self) -> str:"
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 332,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "navigation",
    "llm_legend": "Mobile-friendly navigation styling */ /*",
    "llm_key": "Touch-optimized navigation components */",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "/* Navigation styles */\n/* @llm-type navigation-css */\n/* @llm-legend Mobile-friendly navigation styling */\n/* @llm-key Touch-optimized navigation components */\n\n.bottom-tab-bar {{\nborder-top: 1px solid alpha(@theme_fg_color, 0.1);\nbackground-color: @theme_base_color;\npadding: {self.config.base_spacing // 2}px;\n}}\n\n.side-tab-bar {{\nborder-right: 1px solid alpha(@theme_fg_color, 0.1);\nbackground-color: @theme_base_color;\npadding: {self.config.base_spacing}px;\n}}\n\n.nav-item {{\nmin-height: {self.config.min_touch_target}px;\npadding: {self.config.touch_padding}px;\nborder-radius: {self.config.border_radius}px;\ntransition: all 150ms ease;\n}}\n\n.nav-item:hover {{\nbackground-color: alpha(@theme_fg_color, 0.1);\n}}\n\n.nav-item.active {{\nbackground-color: alpha({self.config.primary_color}, 0.2);\ncolor: {self.config.primary_color};\n}}\n\n.sidebar {{\nborder-right: 1px solid alpha(@theme_fg_color, 0.1);\nbackground-color: @theme_base_color;\npadding: {self.config.base_spacing}px;\n}}",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/css_generator.py",
    "line_number": 374,
    "element_name": "generate_complete_css",
    "language": "python",
    "llm_type": "method",
    "llm_legend": "Generate complete CSS combining all components",
    "llm_key": "Creates unified CSS output with all styling components",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type method\n@llm-legend Generate complete CSS combining all components\n@llm-key Creates unified CSS output with all styling components",
    "context": "def generate_complete_css(self, include_high_contrast: bool = False) -> str:"
  },
  {
    "file_path": "control/native_gui/core/application.py",
    "line_number": 13,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "application.py - system control component",
    "llm_key": "Core functionality for application",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "application: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend application.py - system control component\n@llm-key Core functionality for application\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token application: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/core/application.py",
    "line_number": 114,
    "element_name": "_print_startup_summary",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": "Print user-friendly startup summary with voice capability status",
    "llm_map": "User feedback component for voice-first experience validation",
    "llm_axiom": null,
    "llm_contract": "Provides clear feedback about system readiness and voice functionality",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-key Print user-friendly startup summary with voice capability status\n@llm-contract Provides clear feedback about system readiness and voice functionality\n@llm-map User feedback component for voice-first experience validation\n\nPrint a clean summary of system status for user feedback.",
    "context": "def _print_startup_summary(self):"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "widget",
    "llm_legend": "Widget Factory - Standardized widget creation utilities",
    "llm_key": "Provides unified widget creation patterns to eliminate duplicate code",
    "llm_map": "Central widget factory component in Unhinged native GUI architecture",
    "llm_axiom": "Widget creation must be consistent and follow GTK4 best practices",
    "llm_contract": "Provides standardized widget creation interface for all UI components",
    "llm_token": "widget_factory: Unified widget creation system for consistent UI patterns",
    "llm_context": null,
    "raw_comment": "@llm-type widget-factory\n@llm-legend Widget Factory - Standardized widget creation utilities\n@llm-key Provides unified widget creation patterns to eliminate duplicate code\n@llm-map Central widget factory component in Unhinged native GUI architecture\n@llm-axiom Widget creation must be consistent and follow GTK4 best practices\n@llm-contract Provides standardized widget creation interface for all UI components\n@llm-token widget_factory: Unified widget creation system for consistent UI patterns",
    "context": ""
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 21,
    "element_name": "ContainerType",
    "language": "python",
    "llm_type": "enum",
    "llm_legend": "Container types for different layout patterns",
    "llm_key": "Defines standard container types for consistent layouts",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type enum\n@llm-legend Container types for different layout patterns\n@llm-key Defines standard container types for consistent layouts",
    "context": "class ContainerType(Enum):"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 34,
    "element_name": "ButtonStyle",
    "language": "python",
    "llm_type": "enum",
    "llm_legend": "Button style variants for consistent styling",
    "llm_key": "Defines standard button styles for UI consistency",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type enum\n@llm-legend Button style variants for consistent styling\n@llm-key Defines standard button styles for UI consistency",
    "context": "class ButtonStyle(Enum):"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 48,
    "element_name": "WidgetFactory",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Factory for creating standardized GTK4 widgets",
    "llm_key": "Eliminates duplicate widget creation patterns across tools",
    "llm_map": "Central widget factory for Unhinged native GUI with consistent styling",
    "llm_axiom": "Widget creation must be consistent and follow established patterns",
    "llm_contract": "Provides standardized widget creation interface for all UI needs",
    "llm_token": "WidgetFactory: Unified widget creation system for consistent UI patterns",
    "llm_context": null,
    "raw_comment": "@llm-type factory-class\n@llm-legend Factory for creating standardized GTK4 widgets\n@llm-key Eliminates duplicate widget creation patterns across tools\n@llm-map Central widget factory for Unhinged native GUI with consistent styling\n@llm-axiom Widget creation must be consistent and follow established patterns\n@llm-contract Provides standardized widget creation interface for all UI needs\n@llm-token WidgetFactory: Unified widget creation system for consistent UI patterns\n\nFactory class for creating standardized GTK4 widgets.\nEliminates duplicate widget creation patterns across tools.",
    "context": "class WidgetFactory:"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 78,
    "element_name": "create_main_container",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create standardized main container with consistent spacing and margins",
    "llm_key": "Creates main container widget with standard layout properties",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create standardized main container with consistent spacing and margins\n@llm-key Creates main container widget with standard layout properties",
    "context": "def create_main_container(spacing: int = SPACING_MEDIUM,"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 94,
    "element_name": "create_header_box",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create standardized header box with title and optional subtitle",
    "llm_key": "Creates header widget with consistent typography and spacing",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create standardized header box with title and optional subtitle\n@llm-key Creates header widget with consistent typography and spacing",
    "context": "def create_header_box(title: str,"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 123,
    "element_name": "create_scrolled_window",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create standardized scrolled window with consistent policies",
    "llm_key": "Creates scrolled window widget with standard scrolling behavior",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create standardized scrolled window with consistent policies\n@llm-key Creates scrolled window widget with standard scrolling behavior",
    "context": "def create_scrolled_window(hexpand: bool = True,"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 140,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create standardized button with consistent styling and behavior",
    "llm_key": "Creates button widget with standard appearance and touch optimization",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create standardized button with consistent styling and behavior\n@llm-key Creates button widget with standard appearance and touch optimization",
    "context": ""
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 186,
    "element_name": "create_card_container",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create standardized card container with optional header",
    "llm_key": "Creates card widget with consistent styling and layout",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create standardized card container with optional header\n@llm-key Creates card widget with consistent styling and layout",
    "context": "def create_card_container(title: Optional[str] = None,"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 204,
    "element_name": "create_list_box",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create standardized list box with consistent behavior",
    "llm_key": "Creates list box widget with standard selection and appearance",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create standardized list box with consistent behavior\n@llm-key Creates list box widget with standard selection and appearance",
    "context": "def create_list_box(selection_mode: Gtk.SelectionMode = Gtk.SelectionMode.SINGLE,"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 218,
    "element_name": "create_entry",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create standardized entry widget with consistent behavior",
    "llm_key": "Creates entry widget with standard appearance and callbacks",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create standardized entry widget with consistent behavior\n@llm-key Creates entry widget with standard appearance and callbacks",
    "context": "def create_entry(placeholder: Optional[str] = None,"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 236,
    "element_name": "create_search_entry",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create standardized search entry with consistent behavior",
    "llm_key": "Creates search entry widget with standard search functionality",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create standardized search entry with consistent behavior\n@llm-key Creates search entry widget with standard search functionality",
    "context": "def create_search_entry(placeholder: str = \"Search...\","
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 253,
    "element_name": "create_switch",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create standardized switch with label",
    "llm_key": "Creates switch widget with consistent layout and behavior",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create standardized switch with label\n@llm-key Creates switch widget with consistent layout and behavior",
    "context": "def create_switch(label: str,"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 280,
    "element_name": "create_progress_bar",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create standardized progress bar with consistent appearance",
    "llm_key": "Creates progress bar widget with standard styling and behavior",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create standardized progress bar with consistent appearance\n@llm-key Creates progress bar widget with standard styling and behavior",
    "context": "def create_progress_bar(fraction: float = 0.0,"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 296,
    "element_name": "create_separator",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create standardized separator with consistent styling",
    "llm_key": "Creates separator widget with standard appearance",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create standardized separator with consistent styling\n@llm-key Creates separator widget with standard appearance",
    "context": "def create_separator(orientation: Gtk.Orientation = Gtk.Orientation.HORIZONTAL) -> Gtk.Separator:"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 306,
    "element_name": "create_toolbar",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create standardized toolbar with consistent button layout",
    "llm_key": "Creates toolbar widget with standard button arrangement",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create standardized toolbar with consistent button layout\n@llm-key Creates toolbar widget with standard button arrangement",
    "context": "def create_toolbar(items: List[Dict[str, Any]]) -> Gtk.Box:"
  },
  {
    "file_path": "control/native_gui/ui/widget_factory.py",
    "line_number": 334,
    "element_name": "create_status_row",
    "language": "python",
    "llm_type": "factory",
    "llm_legend": "Create standardized status row with label and value",
    "llm_key": "Creates status row widget with consistent layout and styling",
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type factory-method\n@llm-legend Create standardized status row with label and value\n@llm-key Creates status row widget with consistent layout and styling",
    "context": "def create_status_row(label: str,"
  },
  {
    "file_path": "control/native_gui/widgets/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "__init__.py - system control component",
    "llm_key": "Core functionality for __init__",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "__init__: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - system control component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/widgets/response_viewer.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "response_viewer.py - system control component",
    "llm_key": "Core functionality for response_viewer",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "response_viewer: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend response_viewer.py - system control component\n@llm-key Core functionality for response_viewer\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token response_viewer: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/widgets/request_builder.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "request_builder.py - system control component",
    "llm_key": "Core functionality for request_builder",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "request_builder: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend request_builder.py - system control component\n@llm-key Core functionality for request_builder\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token request_builder: system control component",
    "context": ""
  },
  {
    "file_path": "control/native_gui/widgets/proto_browser.py",
    "line_number": 4,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "proto_browser.py - system control component",
    "llm_key": "Core functionality for proto_browser",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "proto_browser: system control component",
    "llm_context": null,
    "raw_comment": "@llm-type control-system\n@llm-legend proto_browser.py - system control component\n@llm-key Core functionality for proto_browser\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token proto_browser: system control component",
    "context": ""
  },
  {
    "file_path": "control/config/environments/production.yml",
    "line_number": 2,
    "element_name": "environment",
    "language": "yaml",
    "llm_type": "control",
    "llm_legend": "Production environment settings for Unhinged system deployment",
    "llm_key": "Production-grade configuration with security, performance, and reliability settings",
    "llm_map": "Production environment control configuration for operational deployment",
    "llm_axiom": "Production environment must prioritize security, performance, and reliability",
    "llm_contract": null,
    "llm_token": "production-config: Production environment configuration for operational control",
    "llm_context": null,
    "raw_comment": "@llm-type control-config\n@llm-legend Production environment settings for Unhinged system deployment\n@llm-key Production-grade configuration with security, performance, and reliability settings\n@llm-map Production environment control configuration for operational deployment\n@llm-axiom Production environment must prioritize security, performance, and reliability\n@llm-token production-config: Production environment configuration for operational control",
    "context": ""
  },
  {
    "file_path": "control/config/environments/development.yml",
    "line_number": 2,
    "element_name": "environment",
    "language": "yaml",
    "llm_type": "control",
    "llm_legend": "Development environment settings for Unhinged system development",
    "llm_key": "Development-friendly configuration with debugging and rapid iteration support",
    "llm_map": "Development environment control configuration for local development",
    "llm_axiom": "Development environment must prioritize developer experience and debugging",
    "llm_contract": null,
    "llm_token": "development-config: Development environment configuration for local control",
    "llm_context": null,
    "raw_comment": "@llm-type control-config\n@llm-legend Development environment settings for Unhinged system development\n@llm-key Development-friendly configuration with debugging and rapid iteration support\n@llm-map Development environment control configuration for local development\n@llm-axiom Development environment must prioritize developer experience and debugging\n@llm-token development-config: Development environment configuration for local control",
    "context": ""
  },
  {
    "file_path": "platforms/persistence/docker-compose.yml",
    "line_number": 2,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "platform",
    "llm_legend": "docker-compose.yml - platform infrastructure component",
    "llm_key": "Core functionality for docker-compose",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "docker-compose: platform infrastructure component",
    "llm_context": null,
    "raw_comment": "@llm-type platform\n@llm-legend docker-compose.yml - platform infrastructure component\n@llm-key Core functionality for docker-compose\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token docker-compose: platform infrastructure component\n\n============================================================================\nUnhinged Persistence Platform - Docker Compose Configuration\n============================================================================\n\n@file docker-compose.yml\n@version 1.0.0\n@author Unhinged Team\n@date 2025-10-19\n@description Docker Compose setup for the persistence platform\n\nThis Docker Compose file sets up all database technologies and the\npersistence platform service with proper networking, volumes, and\nenvironment configuration for development and testing.\n\nLocation: platforms/persistence/docker-compose.yml\n============================================================================",
    "context": ""
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/PersistencePlatformApplication.kt",
    "line_number": 27,
    "element_name": "PersistencePlatformApplication",
    "language": "kotlin",
    "llm_type": "application",
    "llm_legend": "Main application entry point for the Persistence Platform",
    "llm_key": "Application bootstrap that initializes platform, loads configuration, and starts API server",
    "llm_map": "Main application orchestrating platform startup, configuration loading, and service initialization",
    "llm_axiom": "Application must handle graceful startup and shutdown with proper error handling",
    "llm_contract": "Provides complete platform initialization and API server startup with configuration management",
    "llm_token": "persistence-platform-app: Main application entry point and bootstrap",
    "llm_context": null,
    "raw_comment": "@llm-type application\n@llm-legend Main application entry point for the Persistence Platform\n@llm-key Application bootstrap that initializes platform, loads configuration, and starts API server\n@llm-map Main application orchestrating platform startup, configuration loading, and service initialization\n@llm-axiom Application must handle graceful startup and shutdown with proper error handling\n@llm-contract Provides complete platform initialization and API server startup with configuration management\n@llm-token persistence-platform-app: Main application entry point and bootstrap",
    "context": "class PersistencePlatformApplication {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/client/DatabaseClientRegistry.kt",
    "line_number": 24,
    "element_name": "DatabaseClientRegistry",
    "language": "kotlin",
    "llm_type": "database",
    "llm_legend": "Unified database client registry for multi-database persistence platform",
    "llm_key": "Manages CockroachDB, Redis, Cassandra, Chroma connections with health monitoring",
    "llm_map": "Central access point for all database operations in Kotlin services",
    "llm_axiom": "All database access must go through registry for monitoring and connection management",
    "llm_contract": "Provides type-safe database clients with automatic health checking and reconnection",
    "llm_token": "database-client-registry: Unified database access management for Kotlin backend",
    "llm_context": null,
    "raw_comment": "@llm-type database-registry\n@llm-legend Unified database client registry for multi-database persistence platform\n@llm-key Manages CockroachDB, Redis, Cassandra, Chroma connections with health monitoring\n@llm-map Central access point for all database operations in Kotlin services\n@llm-axiom All database access must go through registry for monitoring and connection management\n@llm-contract Provides type-safe database clients with automatic health checking and reconnection\n@llm-token database-client-registry: Unified database access management for Kotlin backend",
    "context": "class DatabaseClientRegistry {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/monitoring/ObservabilityManager.kt",
    "line_number": 34,
    "element_name": "ObservabilityManager",
    "language": "kotlin",
    "llm_type": "observability",
    "llm_legend": "Comprehensive observability system providing metrics, tracing, and monitoring for the persistence platform",
    "llm_key": "Central observability hub that collects metrics, traces requests, monitors health, and provides analytics",
    "llm_map": "Complete monitoring solution with metrics collection, distributed tracing, and performance analytics",
    "llm_axiom": "All persistence operations must be observable for proper monitoring and troubleshooting",
    "llm_contract": "Provides comprehensive observability including metrics, tracing, health checks, and alerting",
    "llm_token": "observability-manager: Complete monitoring and observability system",
    "llm_context": null,
    "raw_comment": "@llm-type observability-manager\n@llm-legend Comprehensive observability system providing metrics, tracing, and monitoring for the persistence platform\n@llm-key Central observability hub that collects metrics, traces requests, monitors health, and provides analytics\n@llm-map Complete monitoring solution with metrics collection, distributed tracing, and performance analytics\n@llm-axiom All persistence operations must be observable for proper monitoring and troubleshooting\n@llm-contract Provides comprehensive observability including metrics, tracing, health checks, and alerting\n@llm-token observability-manager: Complete monitoring and observability system",
    "context": "class ObservabilityManager("
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/model/CoreModels.kt",
    "line_number": 26,
    "element_name": "ExecutionContext",
    "language": "kotlin",
    "llm_type": "model",
    "llm_legend": "Execution context that carries request metadata, tracing, and security information",
    "llm_key": "Provides request context for all persistence operations including auth, tracing, and metadata",
    "llm_map": "Context object passed through all persistence operations for observability and security",
    "llm_axiom": "All persistence operations must include execution context for proper tracing and security",
    "llm_contract": "Contains user identity, trace information, and request metadata for operation execution",
    "llm_token": "execution-context: Request context for persistence operations",
    "llm_context": null,
    "raw_comment": "@llm-type model\n@llm-legend Execution context that carries request metadata, tracing, and security information\n@llm-key Provides request context for all persistence operations including auth, tracing, and metadata\n@llm-map Context object passed through all persistence operations for observability and security\n@llm-axiom All persistence operations must include execution context for proper tracing and security\n@llm-contract Contains user identity, trace information, and request metadata for operation execution\n@llm-token execution-context: Request context for persistence operations",
    "context": "data class ExecutionContext("
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/core/OperationOrchestrator.kt",
    "line_number": 25,
    "element_name": "OperationOrchestrator",
    "language": "kotlin",
    "llm_type": "interface",
    "llm_legend": "Operation orchestrator that manages complex multi-technology operations and workflows",
    "llm_key": "Coordinates distributed transactions, async pipelines, and ML workflows across database technologies",
    "llm_map": "Central orchestration engine for complex operations requiring multiple database interactions",
    "llm_axiom": "All complex operations must be orchestrated through this interface for consistency and reliability",
    "llm_contract": "Provides transaction management, workflow orchestration, and error handling for complex operations",
    "llm_token": "operation-orchestrator: Complex operation coordination and workflow management",
    "llm_context": null,
    "raw_comment": "@llm-type interface\n@llm-legend Operation orchestrator that manages complex multi-technology operations and workflows\n@llm-key Coordinates distributed transactions, async pipelines, and ML workflows across database technologies\n@llm-map Central orchestration engine for complex operations requiring multiple database interactions\n@llm-axiom All complex operations must be orchestrated through this interface for consistency and reliability\n@llm-contract Provides transaction management, workflow orchestration, and error handling for complex operations\n@llm-token operation-orchestrator: Complex operation coordination and workflow management",
    "context": "interface OperationOrchestrator {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/core/DatabaseProvider.kt",
    "line_number": 25,
    "element_name": "DatabaseProvider",
    "language": "kotlin",
    "llm_type": "interface",
    "llm_legend": "Database provider interface that each technology implements for platform integration",
    "llm_key": "Defines contract for database operations that enables unified access across all technologies",
    "llm_map": "Technology-specific implementations provide database access while maintaining common interface",
    "llm_axiom": "Each database technology must implement this interface to participate in the platform",
    "llm_contract": "Provides standardized CRUD, query, and management operations for any database technology",
    "llm_token": "database-provider: Technology-specific database access interface",
    "llm_context": null,
    "raw_comment": "@llm-type interface\n@llm-legend Database provider interface that each technology implements for platform integration\n@llm-key Defines contract for database operations that enables unified access across all technologies\n@llm-map Technology-specific implementations provide database access while maintaining common interface\n@llm-axiom Each database technology must implement this interface to participate in the platform\n@llm-contract Provides standardized CRUD, query, and management operations for any database technology\n@llm-token database-provider: Technology-specific database access interface",
    "context": "interface DatabaseProvider {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/core/QueryExecutor.kt",
    "line_number": 23,
    "element_name": "QueryExecutor",
    "language": "kotlin",
    "llm_type": "interface",
    "llm_legend": "Query executor that handles query planning, optimization, caching, and routing",
    "llm_key": "Provides intelligent query execution with automatic optimization and caching strategies",
    "llm_map": "Central query processing engine that routes queries to optimal database technologies",
    "llm_axiom": "All queries must be processed through this executor for consistency and optimization",
    "llm_contract": "Handles query planning, caching, routing, and execution across all database technologies",
    "llm_token": "query-executor: Intelligent query processing and routing engine",
    "llm_context": null,
    "raw_comment": "@llm-type interface\n@llm-legend Query executor that handles query planning, optimization, caching, and routing\n@llm-key Provides intelligent query execution with automatic optimization and caching strategies\n@llm-map Central query processing engine that routes queries to optimal database technologies\n@llm-axiom All queries must be processed through this executor for consistency and optimization\n@llm-contract Handles query planning, caching, routing, and execution across all database technologies\n@llm-token query-executor: Intelligent query processing and routing engine",
    "context": "interface QueryExecutor {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/core/PersistenceManager.kt",
    "line_number": 24,
    "element_name": "PersistenceManager",
    "language": "kotlin",
    "llm_type": "interface",
    "llm_legend": "Main persistence platform manager that provides unified access to all database technologies",
    "llm_key": "Abstracts database complexity behind single API, handles routing, caching, and lifecycle management",
    "llm_map": "Central orchestrator for all persistence operations across multiple database technologies",
    "llm_axiom": "All database operations must go through this interface to ensure consistency and observability",
    "llm_contract": "Provides technology-agnostic CRUD operations with automatic routing and optimization",
    "llm_token": "persistence-manager: Core interface for unified database access",
    "llm_context": null,
    "raw_comment": "@llm-type interface\n@llm-legend Main persistence platform manager that provides unified access to all database technologies\n@llm-key Abstracts database complexity behind single API, handles routing, caching, and lifecycle management\n@llm-map Central orchestrator for all persistence operations across multiple database technologies\n@llm-axiom All database operations must go through this interface to ensure consistency and observability\n@llm-contract Provides technology-agnostic CRUD operations with automatic routing and optimization\n@llm-token persistence-manager: Core interface for unified database access",
    "context": "interface PersistenceManager {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/impl/PersistenceManagerImpl.kt",
    "line_number": 29,
    "element_name": "PersistenceManagerImpl",
    "language": "kotlin",
    "llm_type": "implementation",
    "llm_legend": "Main persistence manager implementation that orchestrates all database operations",
    "llm_key": "Central implementation that coordinates providers, routing, caching, and lifecycle management",
    "llm_map": "Core persistence platform implementation that provides unified access to all database technologies",
    "llm_axiom": "All persistence operations flow through this implementation for consistency and observability",
    "llm_contract": "Implements PersistenceManager interface with intelligent routing and multi-technology coordination",
    "llm_token": "persistence-manager-impl: Core persistence platform implementation",
    "llm_context": null,
    "raw_comment": "@llm-type implementation\n@llm-legend Main persistence manager implementation that orchestrates all database operations\n@llm-key Central implementation that coordinates providers, routing, caching, and lifecycle management\n@llm-map Core persistence platform implementation that provides unified access to all database technologies\n@llm-axiom All persistence operations flow through this implementation for consistency and observability\n@llm-contract Implements PersistenceManager interface with intelligent routing and multi-technology coordination\n@llm-token persistence-manager-impl: Core persistence platform implementation",
    "context": "class PersistenceManagerImpl : PersistenceManager {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/providers/RedisProvider.kt",
    "line_number": 35,
    "element_name": "RedisProvider",
    "language": "kotlin",
    "llm_type": "provider",
    "llm_legend": "Redis database provider for high-performance caching and session storage",
    "llm_key": "Implements DatabaseProvider interface for Redis with TTL support and pub/sub capabilities",
    "llm_map": "Redis provider for cache operations, session management, and real-time data storage",
    "llm_axiom": "All Redis operations must handle TTL and provide fast access patterns",
    "llm_contract": "Provides Redis-specific operations including caching, sessions, and pub/sub messaging",
    "llm_token": "redis-provider: High-performance Redis database provider implementation",
    "llm_context": null,
    "raw_comment": "@llm-type provider\n@llm-legend Redis database provider for high-performance caching and session storage\n@llm-key Implements DatabaseProvider interface for Redis with TTL support and pub/sub capabilities\n@llm-map Redis provider for cache operations, session management, and real-time data storage\n@llm-axiom All Redis operations must handle TTL and provide fast access patterns\n@llm-contract Provides Redis-specific operations including caching, sessions, and pub/sub messaging\n@llm-token redis-provider: High-performance Redis database provider implementation",
    "context": "class RedisProvider : DatabaseProvider {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/providers/ProviderRegistry.kt",
    "line_number": 25,
    "element_name": "ProviderRegistry",
    "language": "kotlin",
    "llm_type": "registry",
    "llm_legend": "Provider registry that manages all database technology providers and their lifecycle",
    "llm_key": "Central registry for creating, configuring, and managing database providers across all technologies",
    "llm_map": "Provider factory and lifecycle manager for all database technology implementations",
    "llm_axiom": "All database providers must be registered and managed through this registry",
    "llm_contract": "Provides provider creation, configuration, and lifecycle management for all database technologies",
    "llm_token": "provider-registry: Central database provider management and factory",
    "llm_context": null,
    "raw_comment": "@llm-type registry\n@llm-legend Provider registry that manages all database technology providers and their lifecycle\n@llm-key Central registry for creating, configuring, and managing database providers across all technologies\n@llm-map Provider factory and lifecycle manager for all database technology implementations\n@llm-axiom All database providers must be registered and managed through this registry\n@llm-contract Provides provider creation, configuration, and lifecycle management for all database technologies\n@llm-token provider-registry: Central database provider management and factory",
    "context": "class ProviderRegistry {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/providers/CockroachDBProvider.kt",
    "line_number": 35,
    "element_name": "CockroachDBProvider",
    "language": "kotlin",
    "llm_type": "provider",
    "llm_legend": "CockroachDB database provider for distributed SQL with ACID transactions",
    "llm_key": "Implements DatabaseProvider interface for CockroachDB with strong consistency and horizontal scaling",
    "llm_map": "CockroachDB provider for transactional data, financial records, and relational operations",
    "llm_axiom": "All CockroachDB operations must maintain ACID properties and strong consistency",
    "llm_contract": "Provides SQL operations with distributed transactions and automatic sharding",
    "llm_token": "cockroachdb-provider: Distributed SQL database provider implementation",
    "llm_context": null,
    "raw_comment": "@llm-type provider\n@llm-legend CockroachDB database provider for distributed SQL with ACID transactions\n@llm-key Implements DatabaseProvider interface for CockroachDB with strong consistency and horizontal scaling\n@llm-map CockroachDB provider for transactional data, financial records, and relational operations\n@llm-axiom All CockroachDB operations must maintain ACID properties and strong consistency\n@llm-contract Provides SQL operations with distributed transactions and automatic sharding\n@llm-token cockroachdb-provider: Distributed SQL database provider implementation",
    "context": "class CockroachDBProvider : DatabaseProvider {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/api/PersistenceApiServer.kt",
    "line_number": 42,
    "element_name": "PersistenceApiServer",
    "language": "kotlin",
    "llm_type": "api",
    "llm_legend": "Unified API server providing REST and gRPC endpoints for all persistence operations",
    "llm_key": "Central API gateway that routes requests to appropriate database technologies with authentication and rate limiting",
    "llm_map": "Unified API layer that abstracts database complexity behind consistent REST/gRPC endpoints",
    "llm_axiom": "All persistence operations must go through this API layer for consistency and security",
    "llm_contract": "Provides technology-agnostic REST/gRPC APIs with automatic routing and observability",
    "llm_token": "persistence-api-server: Unified API gateway for all database operations",
    "llm_context": null,
    "raw_comment": "@llm-type api-server\n@llm-legend Unified API server providing REST and gRPC endpoints for all persistence operations\n@llm-key Central API gateway that routes requests to appropriate database technologies with authentication and rate limiting\n@llm-map Unified API layer that abstracts database complexity behind consistent REST/gRPC endpoints\n@llm-axiom All persistence operations must go through this API layer for consistency and security\n@llm-contract Provides technology-agnostic REST/gRPC APIs with automatic routing and observability\n@llm-token persistence-api-server: Unified API gateway for all database operations",
    "context": "class PersistenceApiServer("
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/config/ConfigurationModels.kt",
    "line_number": 26,
    "element_name": "PersistenceConfiguration",
    "language": "kotlin",
    "llm_type": "config",
    "llm_legend": "Main persistence platform configuration loaded from YAML",
    "llm_key": "Root configuration object containing all platform settings and technology definitions",
    "llm_map": "Central configuration that drives all persistence platform behavior and routing decisions",
    "llm_axiom": "Configuration must be validated before platform initialization",
    "llm_contract": "Provides complete platform configuration including technologies, databases, and operations",
    "llm_token": "persistence-configuration: Complete platform configuration object",
    "llm_context": null,
    "raw_comment": "@llm-type config\n@llm-legend Main persistence platform configuration loaded from YAML\n@llm-key Root configuration object containing all platform settings and technology definitions\n@llm-map Central configuration that drives all persistence platform behavior and routing decisions\n@llm-axiom Configuration must be validated before platform initialization\n@llm-contract Provides complete platform configuration including technologies, databases, and operations\n@llm-token persistence-configuration: Complete platform configuration object",
    "context": "data class PersistenceConfiguration("
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/lifecycle/DataLifecycleManager.kt",
    "line_number": 32,
    "element_name": "DataLifecycleManager",
    "language": "kotlin",
    "llm_type": "lifecycle",
    "llm_legend": "Data lifecycle manager that handles hot/warm/cold data tiering and retention policies",
    "llm_key": "Manages complete data lifecycle with automatic tiering, archival, and retention across all database technologies",
    "llm_map": "Central lifecycle management system that optimizes data placement and enforces retention policies",
    "llm_axiom": "All data must follow defined lifecycle policies for optimal performance and compliance",
    "llm_contract": "Provides automated data tiering, archival, retention, and cross-technology migration",
    "llm_token": "data-lifecycle-manager: Automated data lifecycle and tiering management",
    "llm_context": null,
    "raw_comment": "@llm-type lifecycle-manager\n@llm-legend Data lifecycle manager that handles hot/warm/cold data tiering and retention policies\n@llm-key Manages complete data lifecycle with automatic tiering, archival, and retention across all database technologies\n@llm-map Central lifecycle management system that optimizes data placement and enforces retention policies\n@llm-axiom All data must follow defined lifecycle policies for optimal performance and compliance\n@llm-contract Provides automated data tiering, archival, retention, and cross-technology migration\n@llm-token data-lifecycle-manager: Automated data lifecycle and tiering management",
    "context": "class DataLifecycleManager("
  },
  {
    "file_path": "platforms/persistence/config/persistence-platform.yaml",
    "line_number": 2,
    "element_name": "persistence_platform",
    "language": "yaml",
    "llm_type": "platform",
    "llm_legend": "persistence-platform.yaml - platform infrastructure component",
    "llm_key": "Core functionality for persistence-platform",
    "llm_map": "Part of the Unhinged system architecture",
    "llm_axiom": "Maintains system independence and architectural compliance",
    "llm_contract": "Provides standardized interface for system integration",
    "llm_token": "persistence-platform: platform infrastructure component",
    "llm_context": null,
    "raw_comment": "@llm-type platform\n@llm-legend persistence-platform.yaml - platform infrastructure component\n@llm-key Core functionality for persistence-platform\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token persistence-platform: platform infrastructure component\n\n============================================================================\nPersistence Platform Configuration\n============================================================================\n\n@file persistence-platform.yaml\n@version 2.1.0\n@author Unhinged Team\n@date 2025-10-19\n@description Complete self-service persistence platform configuration\n\nThis configuration enables declarative provisioning of databases, tables,\nqueries, and operations across multiple database technologies without\nrequiring infrastructure knowledge.\n\nSupported Technologies:\n- Redis: High-performance caching and session storage\n- CockroachDB: Distributed SQL for transactional data\n- MongoDB: Document-oriented NoSQL for flexible schemas\n- Weaviate: Vector database for AI/ML embeddings and semantic search\n- Elasticsearch: Full-text search and analytics\n- Cassandra: Wide-column store for time-series and high-write workloads\n- Neo4j: Graph database for relationship modeling\n- Data Lake: OLAP capabilities with Apache Iceberg\n\n============================================================================",
    "context": ""
  },
  {
    "file_path": "orchestration/docker-compose.production.yml",
    "line_number": 5,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "infrastructure",
    "llm_legend": "Production docker-compose with unified service definitions",
    "llm_key": "Single source of truth for production service orchestration",
    "llm_map": "Primary production deployment replacing fragmented compose files",
    "llm_axiom": "All services use categorical port allocation for conflict prevention",
    "llm_contract": "Provides complete service stack with health checks and networking",
    "llm_token": "docker-compose-production: Unified production service orchestration",
    "llm_context": null,
    "raw_comment": "@llm-type infrastructure-config\n@llm-legend Production docker-compose with unified service definitions\n@llm-key Single source of truth for production service orchestration\n@llm-map Primary production deployment replacing fragmented compose files\n@llm-axiom All services use categorical port allocation for conflict prevention\n@llm-contract Provides complete service stack with health checks and networking\n@llm-token docker-compose-production: Unified production service orchestration\n\n============================================================================",
    "context": ""
  },
  {
    "file_path": "orchestration/docker-compose.development.yml",
    "line_number": 5,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "infrastructure",
    "llm_legend": "Development docker-compose with debug tools and hot-reload",
    "llm_key": "Development environment with debugging and monitoring tools",
    "llm_map": "Development deployment with additional observability services",
    "llm_axiom": "Development services include debugging and monitoring capabilities",
    "llm_contract": "Provides complete development stack with hot-reload and debugging",
    "llm_token": "docker-compose-development: Development environment with debugging tools",
    "llm_context": null,
    "raw_comment": "@llm-type infrastructure-config\n@llm-legend Development docker-compose with debug tools and hot-reload\n@llm-key Development environment with debugging and monitoring tools\n@llm-map Development deployment with additional observability services\n@llm-axiom Development services include debugging and monitoring capabilities\n@llm-contract Provides complete development stack with hot-reload and debugging\n@llm-token docker-compose-development: Development environment with debugging tools\n\n============================================================================",
    "context": ""
  },
  {
    "file_path": "generated/static_html/registry.js",
    "line_number": 5,
    "element_name": "unknown",
    "language": "typescript",
    "llm_type": "config",
    "llm_legend": "Global registry of static HTML files for browser navigation",
    "llm_key": "Auto-generated from filesystem scan, provides metadata for each HTML file",
    "llm_map": "Used by index.html and navigation components for file discovery",
    "llm_axiom": "Registry must be regenerated whenever HTML files are added/removed/modified",
    "llm_contract": "Provides consistent interface for file metadata and navigation",
    "llm_token": "unhinged-registry: Complete file registry for static HTML interface",
    "llm_context": null,
    "raw_comment": "@llm-type config\n@llm-legend Global registry of static HTML files for browser navigation\n@llm-key Auto-generated from filesystem scan, provides metadata for each HTML file\n@llm-map Used by index.html and navigation components for file discovery\n@llm-axiom Registry must be regenerated whenever HTML files are added/removed/modified\n@llm-contract Provides consistent interface for file metadata and navigation\n@llm-token unhinged-registry: Complete file registry for static HTML interface",
    "context": ""
  },
  {
    "file_path": "generated/static_html/registry.js",
    "line_number": 98,
    "element_name": "unknown",
    "language": "typescript",
    "llm_type": "config",
    "llm_legend": "Hierarchical file structure for table-of-contents navigation",
    "llm_key": "Auto-generated directory tree with file metadata for browser navigation",
    "llm_map": "Used by table-of-contents.html for dynamic file structure display",
    "llm_axiom": "File structure regenerated on every make start to reflect current filesystem",
    "llm_contract": "Provides nested directory structure with file metadata",
    "llm_token": "unhinged-file-structure: Complete directory tree for navigation",
    "llm_context": null,
    "raw_comment": "@llm-type config\n@llm-legend Hierarchical file structure for table-of-contents navigation\n@llm-key Auto-generated directory tree with file metadata for browser navigation\n@llm-map Used by table-of-contents.html for dynamic file structure display\n@llm-axiom File structure regenerated on every make start to reflect current filesystem\n@llm-contract Provides nested directory structure with file metadata\n@llm-token unhinged-file-structure: Complete directory tree for navigation",
    "context": ""
  }
]