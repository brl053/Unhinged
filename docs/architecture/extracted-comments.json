[
  {
    "file_path": "docker-compose.yml",
    "line_number": 63,
    "element_name": "vision-ai",
    "language": "yaml",
    "llm_type": "config",
    "llm_legend": "Docker service configuration for AI-powered image analysis microservice",
    "llm_key": "Defines Python container with BLIP model, Flask HTTP server, and persistent model storage",
    "llm_map": "Part of microservices architecture, connects backend to vision processing capabilities",
    "llm_axiom": "Vision service must be accessible on port 8001 for backend integration",
    "llm_contract": "Service must respond to health checks within 30 seconds and handle image uploads",
    "llm_token": "vision-models: Docker volume for persistent transformer model cache",
    "llm_context": null,
    "raw_comment": "@llm-type config\n@llm-legend Docker service configuration for AI-powered image analysis microservice\n@llm-key Defines Python container with BLIP model, Flask HTTP server, and persistent model storage\n@llm-map Part of microservices architecture, connects backend to vision processing capabilities\n@llm-axiom Vision service must be accessible on port 8001 for backend integration\n@llm-contract Service must respond to health checks within 30 seconds and handle image uploads\n@llm-token vision-models: Docker volume for persistent transformer model cache",
    "context": "vision-ai:"
  },
  {
    "file_path": "docker-compose.yml",
    "line_number": 85,
    "element_name": "speech-to-text",
    "language": "yaml",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": "Speech-to-Text service for voice transcription using Whisper",
    "llm_map": "Essential for voice recording functionality in control plane",
    "llm_axiom": "Service must be accessible on port 8000 for voice test page",
    "llm_contract": "Service must respond to health checks and handle audio uploads",
    "llm_token": "whisper-models: Docker volume for persistent Whisper model cache",
    "llm_context": null,
    "raw_comment": "@llm-key Speech-to-Text service for voice transcription using Whisper\n@llm-map Essential for voice recording functionality in control plane\n@llm-axiom Service must be accessible on port 8000 for voice test page\n@llm-contract Service must respond to health checks and handle audio uploads\n@llm-token whisper-models: Docker volume for persistent Whisper model cache",
    "context": "speech-to-text:"
  },
  {
    "file_path": "docker-compose.yml",
    "line_number": 112,
    "element_name": "text-to-speech",
    "language": "yaml",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": "Text-to-Speech service for voice synthesis using Coqui TTS",
    "llm_map": "Provides local neural voice synthesis capabilities",
    "llm_axiom": "Service must be accessible on port 8002 for TTS functionality",
    "llm_contract": "Service must respond to health checks and generate audio files",
    "llm_token": "tts-models: Docker volume for persistent TTS model cache",
    "llm_context": null,
    "raw_comment": "@llm-key Text-to-Speech service for voice synthesis using Coqui TTS\n@llm-map Provides local neural voice synthesis capabilities\n@llm-axiom Service must be accessible on port 8002 for TTS functionality\n@llm-contract Service must respond to health checks and generate audio files\n@llm-token tts-models: Docker volume for persistent TTS model cache",
    "context": "text-to-speech:"
  },
  {
    "file_path": "build/llm_integration.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "LLM integration for enhanced build system with context generation and error explanation",
    "llm_key": "Provides AI-powered build assistance, error explanation, and context generation for developer onboarding",
    "llm_map": "LLM integration layer that connects build system with existing documentation system for enhanced developer experience",
    "llm_axiom": "LLM integration must provide helpful, accurate, and contextual assistance without overwhelming developers",
    "llm_contract": "Returns structured LLM responses with build context, error explanations, and optimization suggestions",
    "llm_token": "llm-build-integration: AI-powered assistance for build system operations",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend LLM integration for enhanced build system with context generation and error explanation\n@llm-key Provides AI-powered build assistance, error explanation, and context generation for developer onboarding\n@llm-map LLM integration layer that connects build system with existing documentation system for enhanced developer experience\n@llm-axiom LLM integration must provide helpful, accurate, and contextual assistance without overwhelming developers\n@llm-contract Returns structured LLM responses with build context, error explanations, and optimization suggestions\n@llm-token llm-build-integration: AI-powered assistance for build system operations\n\nLLM Integration for Enhanced Build System\n\nIntegrates the enhanced build system with the existing LLM documentation system\nto provide:\n- Build context generation for AI assistance\n- Error explanation and troubleshooting\n- Optimization suggestions\n- Developer onboarding assistance\n- Build process documentation\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/generate-registry.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Simple script to generate static HTML registry for make start command",
    "llm_key": "Standalone script that calls registry builder without complex build system dependencies",
    "llm_map": "Entry point for Makefile to generate registry before control plane startup",
    "llm_axiom": "Must work independently of build system for simple make start workflow",
    "llm_contract": "Exits with 0 on success, 1 on failure for make integration",
    "llm_token": "registry-generator: Simple registry generation script for make start",
    "llm_context": null,
    "raw_comment": "@llm-type build-script\n@llm-legend Simple script to generate static HTML registry for make start command\n@llm-key Standalone script that calls registry builder without complex build system dependencies\n@llm-map Entry point for Makefile to generate registry before control plane startup\n@llm-axiom Must work independently of build system for simple make start workflow\n@llm-contract Exits with 0 on success, 1 on failure for make integration\n@llm-token registry-generator: Simple registry generation script for make start\n\nRegistry Generation Script\n\nSimple standalone script that generates the static HTML registry\nwithout requiring the full build system infrastructure.\n\nUsage:\npython3 build/generate-registry.py\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/cli.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Enhanced CLI interface for the Unhinged build system",
    "llm_key": "Provides developer-friendly command-line interface with progress indicators, build status, and LLM integration",
    "llm_map": "CLI layer that wraps the build orchestrator with enhanced user experience and developer tools",
    "llm_axiom": "CLI must provide clear feedback, helpful error messages, and efficient developer workflows",
    "llm_contract": "Returns appropriate exit codes and provides structured output for both humans and scripts",
    "llm_token": "build-cli: Command-line interface for enhanced build system",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Enhanced CLI interface for the Unhinged build system\n@llm-key Provides developer-friendly command-line interface with progress indicators, build status, and LLM integration\n@llm-map CLI layer that wraps the build orchestrator with enhanced user experience and developer tools\n@llm-axiom CLI must provide clear feedback, helpful error messages, and efficient developer workflows\n@llm-contract Returns appropriate exit codes and provides structured output for both humans and scripts\n@llm-token build-cli: Command-line interface for enhanced build system\n\nEnhanced Build System CLI\n\nProvides a developer-friendly command-line interface for the enhanced build system\nwith features like:\n- Real-time progress indicators\n- Build status monitoring\n- LLM-powered error explanation\n- Performance profiling\n- Interactive build selection\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/test_enhanced_system.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Test suite for the enhanced build system",
    "llm_key": "Provides comprehensive testing and validation of the enhanced build system features",
    "llm_map": "Test suite that validates all components of the enhanced build system",
    "llm_axiom": "Tests must be comprehensive, fast, and provide clear feedback on system health",
    "llm_contract": "Returns test results and system validation status",
    "llm_token": "build-test: Comprehensive test suite for enhanced build system",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Test suite for the enhanced build system\n@llm-key Provides comprehensive testing and validation of the enhanced build system features\n@llm-map Test suite that validates all components of the enhanced build system\n@llm-axiom Tests must be comprehensive, fast, and provide clear feedback on system health\n@llm-contract Returns test results and system validation status\n@llm-token build-test: Comprehensive test suite for enhanced build system\n\nEnhanced Build System Test Suite\n\nComprehensive testing and validation for the enhanced build system:\n- Component integration tests\n- Performance validation\n- Cache system tests\n- Multi-language build tests\n- Error handling validation\n- Developer experience tests\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/orchestrator.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Enhanced build orchestrator for Unhinged polyglot monorepo",
    "llm_key": "Provides intelligent dependency tracking, parallel execution, caching, and multi-language build coordination",
    "llm_map": "Central build coordination system that integrates with existing Makefile and Docker Compose workflows",
    "llm_axiom": "Build operations must be deterministic, cacheable, and provide clear feedback to developers",
    "llm_contract": "Returns BuildResult with success status, artifacts, and performance metrics",
    "llm_token": "build-orchestrator: Python service coordinating all build operations across languages",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Enhanced build orchestrator for Unhinged polyglot monorepo\n@llm-key Provides intelligent dependency tracking, parallel execution, caching, and multi-language build coordination\n@llm-map Central build coordination system that integrates with existing Makefile and Docker Compose workflows\n@llm-axiom Build operations must be deterministic, cacheable, and provide clear feedback to developers\n@llm-contract Returns BuildResult with success status, artifacts, and performance metrics\n@llm-token build-orchestrator: Python service coordinating all build operations across languages\n\nEnhanced Build Orchestrator for Unhinged Platform\n\nCoordinates builds across Kotlin, TypeScript, Python, and Protobuf with intelligent\ndependency tracking, parallel execution, and comprehensive caching.\n\nFeatures:\n- Dependency graph resolution\n- Parallel execution with resource management\n- Intelligent caching with content-based keys\n- Build performance monitoring\n- Integration with existing Makefile commands\n- LLM-powered error explanation\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/orchestrator.py",
    "line_number": 536,
    "element_name": "validate_build_configuration",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Validate build configuration at compile time\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler\nReturns list of validation errors that must be fixed before build",
    "context": "def validate_build_configuration(self) -> List[str]:"
  },
  {
    "file_path": "build/monitoring.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Build performance monitoring and metrics collection system",
    "llm_key": "Provides comprehensive build performance tracking, caching analytics, and optimization insights",
    "llm_map": "Performance monitoring system that tracks build metrics and provides optimization recommendations",
    "llm_axiom": "Performance monitoring must be lightweight and provide actionable insights for developers",
    "llm_contract": "Returns structured performance data and optimization recommendations",
    "llm_token": "build-monitoring: Performance tracking and analytics for build system",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Build performance monitoring and metrics collection system\n@llm-key Provides comprehensive build performance tracking, caching analytics, and optimization insights\n@llm-map Performance monitoring system that tracks build metrics and provides optimization recommendations\n@llm-axiom Performance monitoring must be lightweight and provide actionable insights for developers\n@llm-contract Returns structured performance data and optimization recommendations\n@llm-token build-monitoring: Performance tracking and analytics for build system\n\nBuild Performance Monitoring System\n\nProvides comprehensive monitoring and analytics for the enhanced build system:\n- Build time tracking and analysis\n- Cache performance metrics\n- Resource utilization monitoring\n- Performance trend analysis\n- Optimization recommendations\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/port_fixer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Port conflict detection and automatic resolution tool",
    "llm_key": "Standalone tool for analyzing and fixing port conflicts in docker-compose files",
    "llm_map": "Build-time port management utility with auto-fix capabilities",
    "llm_axiom": "Port conflicts must be resolved automatically with minimal manual intervention",
    "llm_contract": null,
    "llm_token": "port-fixer: Automated port conflict resolution tool for build system",
    "llm_context": null,
    "raw_comment": "@llm-type build-tool\n@llm-legend Port conflict detection and automatic resolution tool\n@llm-key Standalone tool for analyzing and fixing port conflicts in docker-compose files\n@llm-map Build-time port management utility with auto-fix capabilities\n@llm-axiom Port conflicts must be resolved automatically with minimal manual intervention\n@llm-token port-fixer: Automated port conflict resolution tool for build system",
    "context": ""
  },
  {
    "file_path": "build/developer_experience.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Developer experience enhancements for the enhanced build system",
    "llm_key": "Provides developer-friendly features like progress indicators, quick commands, and better error messages",
    "llm_map": "Developer experience layer that makes the build system more accessible and productive for developers",
    "llm_axiom": "Developer experience must reduce friction and provide clear, actionable feedback",
    "llm_contract": "Returns enhanced user interfaces and developer productivity tools",
    "llm_token": "dev-experience: Developer productivity enhancements for build system",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Developer experience enhancements for the enhanced build system\n@llm-key Provides developer-friendly features like progress indicators, quick commands, and better error messages\n@llm-map Developer experience layer that makes the build system more accessible and productive for developers\n@llm-axiom Developer experience must reduce friction and provide clear, actionable feedback\n@llm-contract Returns enhanced user interfaces and developer productivity tools\n@llm-token dev-experience: Developer productivity enhancements for build system\n\nDeveloper Experience Enhancements\n\nProvides developer-friendly features for the enhanced build system:\n- Progress indicators and status displays\n- Quick setup and development commands\n- Interactive target selection\n- Build status dashboard\n- Error recovery suggestions\n- Performance insights\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/build.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Main entry point for the Unhinged build system (v1)",
    "llm_key": "Provides unified access to intelligent build orchestration with caching, parallelism, and AI assistance",
    "llm_map": "Primary build system entry point with clean v1 interface",
    "llm_axiom": "Build system must be simple, fast, and provide clear feedback",
    "llm_contract": "Provides clean v1 interface for all build operations",
    "llm_token": "build-v1: Main entry point for v1 build system",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Main entry point for the Unhinged build system (v1)\n@llm-key Provides unified access to intelligent build orchestration with caching, parallelism, and AI assistance\n@llm-map Primary build system entry point with clean v1 interface\n@llm-axiom Build system must be simple, fast, and provide clear feedback\n@llm-contract Provides clean v1 interface for all build operations\n@llm-token build-v1: Main entry point for v1 build system\n\nUnhinged Build System (v1)\n\nPrimary entry point for the consolidated build system with:\n- Intelligent caching and parallel execution\n- AI-powered development assistance\n- Performance monitoring and optimization\n- Clean, simple interface\n\nUsage:\npython build/build.py build dev-fast        # Fast development build\npython build/build.py status                # Show build status\npython build/build.py list                  # List all targets\npython build/build.py explain dev-fast      # Explain build target\n\nAuthor: Unhinged Team\nVersion: 1.0.0 (Consolidated)\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "tool",
    "llm_legend": "LLM context warming system for onboarding new AI agents to the Unhinged monorepo",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Provides paginated, structured summaries of codebase culture, vision, and architecture",
    "raw_comment": "@llm-type tool\n@llm-legend LLM context warming system for onboarding new AI agents to the Unhinged monorepo\n@llm-context Provides paginated, structured summaries of codebase culture, vision, and architecture",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 17,
    "element_name": "LLMContextWarmer",
    "language": "python",
    "llm_type": "class",
    "llm_legend": "Generates structured context summaries for new LLM agents joining the project",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Converts extracted comments into digestible chunks with pagination support",
    "raw_comment": "@llm-type class\n@llm-legend Generates structured context summaries for new LLM agents joining the project\n@llm-context Converts extracted comments into digestible chunks with pagination support",
    "context": "class LLMContextWarmer:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 37,
    "element_name": "generate_project_overview",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Generates comprehensive project overview from extracted comments",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Creates high-level summary perfect for LLM context warming",
    "raw_comment": "@llm-type function\n@llm-legend Generates comprehensive project overview from extracted comments\n@llm-context Creates high-level summary perfect for LLM context warming",
    "context": "def generate_project_overview(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 86,
    "element_name": "_extract_key_components",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Extract key system components with improved name resolution and cross-references",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about unknown element names and missing navigation",
    "raw_comment": "@llm-type function\n@llm-legend Extract key system components with improved name resolution and cross-references\n@llm-context Addresses LLM feedback about unknown element names and missing navigation",
    "context": "def _extract_key_components(self) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 123,
    "element_name": "paginate_comments",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Provides paginated access to all extracted comments for detailed review",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Allows LLMs to scroll through codebase comments in digestible chunks",
    "raw_comment": "@llm-type function\n@llm-legend Provides paginated access to all extracted comments for detailed review\n@llm-context Allows LLMs to scroll through codebase comments in digestible chunks",
    "context": "def paginate_comments(self, page: int = 1) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 156,
    "element_name": "_improve_element_name",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Improve element name detection from file paths when element_name is unknown",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about unknown element names in service files",
    "raw_comment": "@llm-type function\n@llm-legend Improve element name detection from file paths when element_name is unknown\n@llm-context Addresses LLM feedback about unknown element names in service files",
    "context": "def _improve_element_name(self, comment: Dict[str, Any]) -> str:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 179,
    "element_name": "_find_related_services",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Find related services through port references, API calls, and integration patterns",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about lack of cross-reference navigation capabilities",
    "raw_comment": "@llm-type function\n@llm-legend Find related services through port references, API calls, and integration patterns\n@llm-context Addresses LLM feedback about lack of cross-reference navigation capabilities",
    "context": "def _find_related_services(self, comment: Dict[str, Any]) -> List[str]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 232,
    "element_name": "_validate_context_completeness",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Validate that service and component comments have proper context information",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about null llm_context fields where context should exist",
    "raw_comment": "@llm-type function\n@llm-legend Validate that service and component comments have proper context information\n@llm-context Addresses LLM feedback about null llm_context fields where context should exist",
    "context": "def _validate_context_completeness(self, comments: List[Dict[str, Any]]) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 254,
    "element_name": "_generate_getting_started_section",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Generate getting started section with setup commands and prerequisites",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about missing getting started section in overview",
    "raw_comment": "@llm-type function\n@llm-legend Generate getting started section with setup commands and prerequisites\n@llm-context Addresses LLM feedback about missing getting started section in overview",
    "context": "def _generate_getting_started_section(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 283,
    "element_name": "_extract_dependency_information",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Extract dependency and build system information from configuration files",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about missing dependency/setup information",
    "raw_comment": "@llm-type function\n@llm-legend Extract dependency and build system information from configuration files\n@llm-context Addresses LLM feedback about missing dependency/setup information",
    "context": "def _extract_dependency_information(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 316,
    "element_name": "_validate_legend_completeness",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Validate that",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about incomplete/truncated legend entries",
    "raw_comment": "@llm-type function\n@llm-legend Validate that @llm-legend entries are complete and not truncated\n@llm-context Addresses LLM feedback about incomplete/truncated legend entries",
    "context": "def _validate_legend_completeness(self, comments: List[Dict[str, Any]]) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 351,
    "element_name": "generate_enhanced_project_overview",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Generate enhanced project overview addressing all LLM feedback for 10/10 rating",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Includes getting started, dependencies, and complete information sections",
    "raw_comment": "@llm-type function\n@llm-legend Generate enhanced project overview addressing all LLM feedback for 10/10 rating\n@llm-context Includes getting started, dependencies, and complete information sections",
    "context": "def generate_enhanced_project_overview(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "TDD test suite ensuring extraction and validation correctness",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Defines expected behavior for all LLM comment processing functions",
    "raw_comment": "\n@llm-type test\n@llm-legend TDD test suite ensuring extraction and validation correctness\n@llm-context Defines expected behavior for all LLM comment processing functions",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 41,
    "element_name": "test_extract_llm_context_from_python",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "from Python docstring.",
    "raw_comment": "Test extraction of @llm-context from Python docstring.",
    "context": "def test_extract_llm_context_from_python(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 42,
    "element_name": "test_extract_llm_context_from_python",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Processes user requests",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Handles HTTP requests with rate limiting and caching \"\"\" def process(): pass",
    "raw_comment": "\"\"\"\n@llm-type service\n@llm-legend Processes user requests\n@llm-context Handles HTTP requests with rate limiting and caching\n\"\"\"\ndef process():\npass",
    "context": "def test_extract_llm_context_from_python(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 69,
    "element_name": "test_extract_llm_context_from_typescript",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "from TypeScript JSDoc.",
    "raw_comment": "Test extraction of @llm-context from TypeScript JSDoc.",
    "context": "def test_extract_llm_context_from_typescript(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 70,
    "element_name": "test_extract_llm_context_from_typescript",
    "language": "python",
    "llm_type": "component",
    "llm_legend": "React component for user authentication *",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Manages login state and JWT token refresh */ export const AuthComponent = () => { return null; };",
    "raw_comment": "/**\n* @llm-type component\n* @llm-legend React component for user authentication\n* @llm-context Manages login state and JWT token refresh\n*/\nexport const AuthComponent = () => {\nreturn null;\n};",
    "context": "def test_extract_llm_context_from_typescript(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 90,
    "element_name": "test_parse_llm_tags_with_context",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Test parsing of all tags including @llm-context.",
    "context": "def test_parse_llm_tags_with_context(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 91,
    "element_name": "test_parse_llm_tags_with_context",
    "language": "python",
    "llm_type": "validator",
    "llm_legend": "Validates user input",
    "llm_key": "Checks format and business rules",
    "llm_map": "Part of validation pipeline",
    "llm_axiom": "Never trust user input",
    "llm_contract": "Returns ValidationResult or throws",
    "llm_token": "user-validator",
    "llm_context": "Integrates with form handling and error display",
    "raw_comment": "@llm-type validator\n@llm-legend Validates user input\n@llm-key Checks format and business rules\n@llm-map Part of validation pipeline\n@llm-axiom Never trust user input\n@llm-contract Returns ValidationResult or throws\n@llm-token user-validator\n@llm-context Integrates with form handling and error display",
    "context": "def test_parse_llm_tags_with_context(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 142,
    "element_name": "test_validate_comment_with_context",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Test validation accepts @llm-context.",
    "context": "def test_validate_comment_with_context(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 203,
    "element_name": "TestLLMContextWarmerImprovements",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test suite for LLM context warmer improvements based on feedback",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Validates element name detection, cross-references, and context completeness",
    "raw_comment": "@llm-type test\n@llm-legend Test suite for LLM context warmer improvements based on feedback\n@llm-context Validates element name detection, cross-references, and context completeness",
    "context": "class TestLLMContextWarmerImprovements(unittest.TestCase):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 210,
    "element_name": "test_element_name_detection_from_service_path",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test element name extraction from services directory paths",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about unknown element names in service files",
    "raw_comment": "@llm-type test\n@llm-legend Test element name extraction from services directory paths\n@llm-context Addresses LLM feedback about unknown element names in service files",
    "context": "def test_element_name_detection_from_service_path(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 241,
    "element_name": "test_element_name_detection_from_python_file",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test element name extraction from Python file names",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Ensures Python modules get proper names instead of unknown",
    "raw_comment": "@llm-type test\n@llm-legend Test element name extraction from Python file names\n@llm-context Ensures Python modules get proper names instead of unknown",
    "context": "def test_element_name_detection_from_python_file(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 270,
    "element_name": "test_find_related_services_by_port_references",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test cross-reference detection between services using port numbers",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about lack of cross-reference navigation",
    "raw_comment": "@llm-type test\n@llm-legend Test cross-reference detection between services using port numbers\n@llm-context Addresses LLM feedback about lack of cross-reference navigation",
    "context": "def test_find_related_services_by_port_references(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 315,
    "element_name": "test_context_completeness_validation",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test validation of context completeness for service components",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about null llm_context fields where context should exist",
    "raw_comment": "@llm-type test\n@llm-legend Test validation of context completeness for service components\n@llm-context Addresses LLM feedback about null llm_context fields where context should exist",
    "context": "def test_context_completeness_validation(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 357,
    "element_name": "test_pagination_data_integrity",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test that pagination maintains complete data integrity across pages",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Ensures no data loss or corruption when browsing paginated comments",
    "raw_comment": "@llm-type test\n@llm-legend Test that pagination maintains complete data integrity across pages\n@llm-context Ensures no data loss or corruption when browsing paginated comments",
    "context": "def test_pagination_data_integrity(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 418,
    "element_name": "TestLLMContextWarmerEnhancements",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test suite for final LLM context warmer enhancements addressing 9/10 feedback",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Validates getting started section, dependency info, and complete legend handling",
    "raw_comment": "@llm-type test\n@llm-legend Test suite for final LLM context warmer enhancements addressing 9/10 feedback\n@llm-context Validates getting started section, dependency info, and complete legend handling",
    "context": "class TestLLMContextWarmerEnhancements(unittest.TestCase):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 425,
    "element_name": "test_getting_started_section_generation",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test generation of getting started section with setup and dependency information",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about missing getting started section in overview",
    "raw_comment": "@llm-type test\n@llm-legend Test generation of getting started section with setup and dependency information\n@llm-context Addresses LLM feedback about missing getting started section in overview",
    "context": "def test_getting_started_section_generation(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 469,
    "element_name": "test_dependency_information_extraction",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test extraction of dependency and setup information from build files",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about missing dependency/setup information in overview",
    "raw_comment": "@llm-type test\n@llm-legend Test extraction of dependency and setup information from build files\n@llm-context Addresses LLM feedback about missing dependency/setup information in overview",
    "context": "def test_dependency_information_extraction(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 506,
    "element_name": "test_complete_legend_validation",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test validation that legends are complete and not truncated",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Addresses LLM feedback about incomplete/truncated",
    "raw_comment": "@llm-type test\n@llm-legend Test validation that legends are complete and not truncated\n@llm-context Addresses LLM feedback about incomplete/truncated @llm-legend entries",
    "context": "def test_complete_legend_validation(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 549,
    "element_name": "test_enhanced_overview_with_getting_started",
    "language": "python",
    "llm_type": "test",
    "llm_legend": "Test that enhanced overview includes getting started and dependency sections",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Validates complete overview addresses all LLM feedback points for 10/10 rating",
    "raw_comment": "@llm-type test\n@llm-legend Test that enhanced overview includes getting started and dependency sections\n@llm-context Validates complete overview addresses all LLM feedback points for 10/10 rating",
    "context": "def test_enhanced_overview_with_getting_started(self):"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "LLM Comment Extraction System\n\nParses @llm-* tags from code comments across all programming languages\nin the Unhinged monorepo and generates architectural documentation.",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 132,
    "element_name": "_parse_llm_tags",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Parse @llm-* tags from comment text",
    "context": "def _parse_llm_tags(self, comment_text: str, file_path: str, line_number: int,"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 243,
    "element_name": "_parse_llm_tags",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Parse @llm-* tags from Python docstring",
    "context": "def _parse_llm_tags(self, comment_text: str, file_path: str, line_number: int,"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 485,
    "element_name": "generate_architectural_overview",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": "comments",
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Generate architectural overview from @llm-map comments",
    "context": "def generate_architectural_overview(self) -> str:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 573,
    "element_name": "extract_comments_from_file",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Extracts all",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing individual file processing",
    "raw_comment": "\n@llm-type function\n@llm-legend Extracts all @llm-* comments from a single source file using appropriate language parser\n@llm-context TDD interface function for testing individual file processing",
    "context": "def extract_comments_from_file(file_path: str) -> List[LLMComment]:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 594,
    "element_name": "extract_comments_from_codebase",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Extracts all",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing full codebase processing",
    "raw_comment": "\n@llm-type function\n@llm-legend Extracts all @llm-* comments from entire codebase using multi-language parsers\n@llm-context TDD interface function for testing full codebase processing",
    "context": "def extract_comments_from_codebase(root_path: Path) -> List[LLMComment]:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 604,
    "element_name": "parse_llm_tags",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Parses individual",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing tag parsing logic",
    "raw_comment": "\n@llm-type function\n@llm-legend Parses individual @llm-* tags from comment text using regex patterns\n@llm-context TDD interface function for testing tag parsing logic",
    "context": "def parse_llm_tags(text: str) -> Dict[str, str]:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 634,
    "element_name": "save_extraction_results",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Saves extracted comments to JSON with metadata",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing result serialization",
    "raw_comment": "\n@llm-type function\n@llm-legend Saves extracted comments to JSON with metadata\n@llm-context TDD interface function for testing result serialization",
    "context": "def save_extraction_results(comments: List[LLMComment], output_path: Path) -> Dict:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "LLM Comment Validation System\n\nValidates consistency and quality of @llm-* comments across the codebase.\nIntegrates with the existing documentation validation workflow.",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 287,
    "element_name": "validate_comment",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Validates individual comment for completeness and quality",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing single comment validation",
    "raw_comment": "\n@llm-type function\n@llm-legend Validates individual comment for completeness and quality\n@llm-context TDD interface function for testing single comment validation",
    "context": "def validate_comment(comment) -> List[Dict]:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 299,
    "element_name": "validate_all_comments",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Validates batch of comments and returns summary",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing batch validation",
    "raw_comment": "\n@llm-type function\n@llm-legend Validates batch of comments and returns summary\n@llm-context TDD interface function for testing batch validation",
    "context": "def validate_all_comments(comments: List) -> Dict:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 324,
    "element_name": "check_required_tags",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Validates comment has all required tags for its type",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing required tag validation",
    "raw_comment": "\n@llm-type function\n@llm-legend Validates comment has all required tags for its type\n@llm-context TDD interface function for testing required tag validation",
    "context": "def check_required_tags(comment) -> List[Dict]:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 351,
    "element_name": "check_tag_format",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Validates tag content meets quality standards",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "TDD interface function for testing tag format validation",
    "raw_comment": "\n@llm-type function\n@llm-legend Validates tag content meets quality standards\n@llm-context TDD interface function for testing tag format validation",
    "context": "def check_tag_format(comment) -> List[Dict]:"
  },
  {
    "file_path": "build/docs-generation/llm_types.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "contract",
    "llm_legend": "Defines data structures and interfaces for LLM comment extraction/validation",
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": "Central type system ensuring consistency across extraction and validation pipeline",
    "raw_comment": "\n@llm-type contract\n@llm-legend Defines data structures and interfaces for LLM comment extraction/validation\n@llm-context Central type system ensuring consistency across extraction and validation pipeline",
    "context": ""
  },
  {
    "file_path": "build/modules/typescript_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "TypeScript/npm build module with webpack optimization and hot reloading",
    "llm_key": "Provides optimized npm builds with webpack, hot module replacement, and intelligent caching",
    "llm_map": "TypeScript build module that integrates with npm/webpack build system and provides enhanced caching",
    "llm_axiom": "TypeScript builds must support hot reloading for development and optimization for production",
    "llm_contract": "Returns BuildModuleResult with JS bundle artifacts and build metrics",
    "llm_token": "typescript-builder: npm/webpack-based build module for TypeScript/React projects",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend TypeScript/npm build module with webpack optimization and hot reloading\n@llm-key Provides optimized npm builds with webpack, hot module replacement, and intelligent caching\n@llm-map TypeScript build module that integrates with npm/webpack build system and provides enhanced caching\n@llm-axiom TypeScript builds must support hot reloading for development and optimization for production\n@llm-contract Returns BuildModuleResult with JS bundle artifacts and build metrics\n@llm-token typescript-builder: npm/webpack-based build module for TypeScript/React projects\n\nTypeScript/npm Build Module\n\nProvides optimized builds for TypeScript projects using npm/webpack with:\n- Hot module replacement for development\n- Bundle optimization for production\n- Source map generation\n- Dependency analysis\n- Asset management\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Static HTML registry generation module for control plane browser interface",
    "llm_key": "Scans control/static_html directory and generates JavaScript registry following BuildModule interface",
    "llm_map": "Integrates with existing build orchestrator as specialized module for static asset management",
    "llm_axiom": "Must follow BuildModule contract and provide caching, validation, and artifact management",
    "llm_contract": "Implements BuildModule interface with build(), cache_key(), and validate() methods",
    "llm_token": "registry-builder: Build module for static HTML file registry generation",
    "llm_context": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Static HTML registry generation module for control plane browser interface\n@llm-key Scans control/static_html directory and generates JavaScript registry following BuildModule interface\n@llm-map Integrates with existing build orchestrator as specialized module for static asset management\n@llm-axiom Must follow BuildModule contract and provide caching, validation, and artifact management\n@llm-contract Implements BuildModule interface with build(), cache_key(), and validate() methods\n@llm-token registry-builder: Build module for static HTML file registry generation\n\nRegistry Builder Module\n\nSpecialized build module that scans the control/static_html directory and generates\na JavaScript registry file for browser consumption. Integrates with the existing\nbuild orchestrator to provide caching, dependency tracking, and performance monitoring.\n\nFeatures:\n- Recursive HTML file discovery\n- Metadata extraction from HTML files\n- JavaScript registry generation\n- Content-based caching\n- Build artifact management\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 47,
    "element_name": "RegistryBuilder",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Generates JavaScript registry of static HTML files for browser navigation",
    "llm_key": "Scans filesystem, extracts HTML metadata, generates registry.js with kawaii ASCII TOC",
    "llm_map": "Integrates with build orchestrator for caching and dependency management",
    "llm_axiom": "Registry must be generated before browser access to ensure accurate file discovery",
    "llm_contract": "Returns BuildResult with registry.js artifact or error details",
    "llm_token": "static-html-registry: Browser-consumable file registry for navigation",
    "llm_context": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Generates JavaScript registry of static HTML files for browser navigation\n@llm-key Scans filesystem, extracts HTML metadata, generates registry.js with kawaii ASCII TOC\n@llm-map Integrates with build orchestrator for caching and dependency management\n@llm-axiom Registry must be generated before browser access to ensure accurate file discovery\n@llm-contract Returns BuildResult with registry.js artifact or error details\n@llm-token static-html-registry: Browser-consumable file registry for navigation",
    "context": "class RegistryBuilder(BuildModule):"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 62,
    "element_name": "can_handle",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Determines if this module can handle the given build context",
    "llm_key": "Checks for registry-related target names and static_html directory existence",
    "llm_map": "Called by build orchestrator during module selection phase",
    "llm_axiom": null,
    "llm_contract": "Returns True for registry targets, False otherwise",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Determines if this module can handle the given build context\n@llm-key Checks for registry-related target names and static_html directory existence\n@llm-map Called by build orchestrator during module selection phase\n@llm-contract Returns True for registry targets, False otherwise",
    "context": "def can_handle(self, context: BuildContext) -> bool:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 76,
    "element_name": "get_dependencies",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Returns list of files that affect registry generation",
    "llm_key": "Scans control/static_html for all HTML files to establish dependencies",
    "llm_map": "Used by build orchestrator for cache invalidation and dependency tracking",
    "llm_axiom": null,
    "llm_contract": "Returns list of file paths that trigger registry regeneration when changed",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Returns list of files that affect registry generation\n@llm-key Scans control/static_html for all HTML files to establish dependencies\n@llm-map Used by build orchestrator for cache invalidation and dependency tracking\n@llm-contract Returns list of file paths that trigger registry regeneration when changed",
    "context": "def get_dependencies(self, context: BuildContext) -> List[str]:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 94,
    "element_name": "calculate_cache_key",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Generates content-based cache key for registry generation",
    "llm_key": "Combines file modification times and content hashes of all HTML files",
    "llm_map": "Used by build orchestrator for intelligent cache invalidation",
    "llm_axiom": null,
    "llm_contract": "Returns stable cache key that changes only when HTML files change",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Generates content-based cache key for registry generation\n@llm-key Combines file modification times and content hashes of all HTML files\n@llm-map Used by build orchestrator for intelligent cache invalidation\n@llm-contract Returns stable cache key that changes only when HTML files change",
    "context": "def calculate_cache_key(self, context: BuildContext) -> str:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 121,
    "element_name": "extract_html_metadata",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Extracts title, description, and metadata from HTML file",
    "llm_key": "Parses HTML content using regex to find title and meta tags",
    "llm_map": "Helper function for registry generation process",
    "llm_axiom": null,
    "llm_contract": "Returns metadata dict with title, description, category, and file info",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Extracts title, description, and metadata from HTML file\n@llm-key Parses HTML content using regex to find title and meta tags\n@llm-map Helper function for registry generation process\n@llm-contract Returns metadata dict with title, description, category, and file info",
    "context": "def extract_html_metadata(self, file_path: Path) -> Dict[str, any]:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 189,
    "element_name": "scan_static_html_directory",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Recursively scans control/static_html for HTML files and extracts metadata",
    "llm_key": "Walks filesystem tree, processes each HTML file, builds registry dictionary",
    "llm_map": "Core scanning function that builds the complete file registry",
    "llm_axiom": null,
    "llm_contract": "Returns registry dict with absolute paths as keys and metadata as values",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Recursively scans control/static_html for HTML files and extracts metadata\n@llm-key Walks filesystem tree, processes each HTML file, builds registry dictionary\n@llm-map Core scanning function that builds the complete file registry\n@llm-contract Returns registry dict with absolute paths as keys and metadata as values",
    "context": "def scan_static_html_directory(self, project_root: Path) -> Dict[str, Dict]:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 217,
    "element_name": "build_file_structure",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Builds hierarchical file structure for table-of-contents navigation",
    "llm_key": "Scans control/static_html directory and creates nested structure with metadata",
    "llm_map": "Generates browser-consumable file tree for navigation components",
    "llm_axiom": null,
    "llm_contract": "Returns nested dict with directories and files organized hierarchically",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Builds hierarchical file structure for table-of-contents navigation\n@llm-key Scans control/static_html directory and creates nested structure with metadata\n@llm-map Generates browser-consumable file tree for navigation components\n@llm-contract Returns nested dict with directories and files organized hierarchically",
    "context": "def build_file_structure(self, project_root: Path) -> Dict:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 284,
    "element_name": "generate_registry_js",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Generates JavaScript registry file with helper functions and kawaii ASCII TOC",
    "llm_key": "Creates JavaScript module with registry object and utility functions",
    "llm_map": "Converts Python registry dict to browser-consumable JavaScript",
    "llm_axiom": null,
    "llm_contract": "Returns valid JavaScript code with UNHINGED_REGISTRY global",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Generates JavaScript registry file with helper functions and kawaii ASCII TOC\n@llm-key Creates JavaScript module with registry object and utility functions\n@llm-map Converts Python registry dict to browser-consumable JavaScript\n@llm-contract Returns valid JavaScript code with UNHINGED_REGISTRY global",
    "context": "def generate_registry_js(self, registry: Dict[str, Dict], file_structure: Dict = None) -> str:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 291,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config",
    "llm_legend": "Global registry of static HTML files for browser navigation *",
    "llm_key": "Auto-generated from filesystem scan, provides metadata for each HTML file *",
    "llm_map": "Used by index.html and navigation components for file discovery *",
    "llm_axiom": "Registry must be regenerated whenever HTML files are added/removed/modified *",
    "llm_contract": "Provides consistent interface for file metadata and navigation *",
    "llm_token": "unhinged-registry: Complete file registry for static HTML interface */ window.UNHINGED_REGISTRY = {json.dumps(registry, indent=2)};",
    "llm_context": null,
    "raw_comment": "// Generated at: {datetime.now().isoformat()}\n// Run 'make start' to regenerate\n\n/**\n* @llm-type config\n* @llm-legend Global registry of static HTML files for browser navigation\n* @llm-key Auto-generated from filesystem scan, provides metadata for each HTML file\n* @llm-map Used by index.html and navigation components for file discovery\n* @llm-axiom Registry must be regenerated whenever HTML files are added/removed/modified\n* @llm-contract Provides consistent interface for file metadata and navigation\n* @llm-token unhinged-registry: Complete file registry for static HTML interface\n*/\nwindow.UNHINGED_REGISTRY = {json.dumps(registry, indent=2)};\n\n/**\n* @llm-type config\n* @llm-legend Hierarchical file structure for table-of-contents navigation\n* @llm-key Auto-generated directory tree with file metadata for browser navigation\n* @llm-map Used by table-of-contents.html for dynamic file structure display\n* @llm-axiom File structure regenerated on every make start to reflect current filesystem\n* @llm-contract Provides nested directory structure with file metadata\n* @llm-token unhinged-file-structure: Complete directory tree for navigation\n*/\nwindow.UNHINGED_FILE_STRUCTURE = {json.dumps(file_structure or {}, indent=2)};\n\n// Helper functions for registry access\nwindow.getRegistryEntry = function(path) {{\nreturn window.UNHINGED_REGISTRY[path] || null;\n}};\n\nwindow.getAllFiles = function() {{\nreturn Object.keys(window.UNHINGED_REGISTRY);\n}};\n\nwindow.getFilesByCategory = function(category) {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => meta.category === category)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\nwindow.getExistingFiles = function() {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => meta.exists)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\nwindow.getMissingFiles = function() {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => !meta.exists)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\n// Kawaii ASCII TOC generator\nwindow.generateKawaiiTOC = function() {{\nconst existing = window.getExistingFiles();\nconst missing = window.getMissingFiles();\n\nlet toc = `\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502  \ud83c\udf38 Unhinged Static HTML Files \ud83c\udf38  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\ud83d\udcc1 control/static_html/\n`;\n\nexisting.forEach(file => {{\ntoc += `  \u2705 ${{file.title}}\\\\n`;\ntoc += `     \ud83d\udcc4 ${{file.path.split('/').pop()}}\\\\n`;\nif (file.description) {{\ntoc += `     \ud83d\udcad ${{file.description}}\\\\n`;\n}}\ntoc += `\\\\n`;\n}});\n\nif (missing.length > 0) {{\ntoc += `\\\\n\ud83d\udea8 Missing Files:\\\\n`;\nmissing.forEach(file => {{\ntoc += `  \u274c ${{file.title}}\\\\n`;\ntoc += `     \ud83d\udcc4 ${{file.path.split('/').pop()}}\\\\n`;\ntoc += `     \ud83d\udcad File not found - please create!\\\\n\\\\n`;\n}});\n}}\n\nreturn toc;\n}};\n\n// Helper functions for file structure access\nwindow.getFileStructure = function() {{\nreturn window.UNHINGED_FILE_STRUCTURE;\n}};\n\nwindow.getDirectoryContents = function(path) {{\nconst parts = path.split('/').filter(p => p);\nlet current = window.UNHINGED_FILE_STRUCTURE;\n\nfor (const part of parts) {{\nif (current && current[part] && current[part].children) {{\ncurrent = current[part].children;\n}} else {{\nreturn null;\n}}\n}}\n\nreturn current;\n}};\n\nwindow.findFilesByPattern = function(pattern) {{\nconst regex = new RegExp(pattern, 'i');\nconst results = [];\n\nfunction searchTree(node, path = '') {{\nif (!node || typeof node !== 'object') return;\n\nObject.entries(node).forEach(([name, item]) => {{\nconst fullPath = path ? `${{path}}/${{name}}` : name;\n\nif (item.type === 'file' && regex.test(name)) {{\nresults.push({{\npath: fullPath,\nname: name,\n...item\n}});\n}} else if (item.type === 'directory' && item.children) {{\nsearchTree(item.children, fullPath);\n}}\n}});\n}}\n\nsearchTree(window.UNHINGED_FILE_STRUCTURE);\nreturn results;\n}};\n\nconsole.log('\ud83d\udccb Unhinged Registry loaded with', Object.keys(window.UNHINGED_REGISTRY).length, 'files');\nconsole.log('\ud83d\uddc2\ufe0f File structure loaded with', Object.keys(window.UNHINGED_FILE_STRUCTURE).length, 'root directories');",
    "context": ""
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 431,
    "element_name": "build",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Main build function that generates the static HTML registry",
    "llm_key": "Scans filesystem, generates JavaScript registry, writes output file",
    "llm_map": "Called by build orchestrator to execute registry generation",
    "llm_axiom": null,
    "llm_contract": "Returns BuildModuleResult with success status and generated artifacts",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Main build function that generates the static HTML registry\n@llm-key Scans filesystem, generates JavaScript registry, writes output file\n@llm-map Called by build orchestrator to execute registry generation\n@llm-contract Returns BuildModuleResult with success status and generated artifacts",
    "context": "def build(self, context: BuildContext) -> BuildModuleResult:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 503,
    "element_name": "clean",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Removes generated registry.js file",
    "llm_key": "Deletes output file to force regeneration on next build",
    "llm_map": "Called by build orchestrator during clean operations",
    "llm_axiom": null,
    "llm_contract": "Returns True if cleanup successful, False otherwise",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Removes generated registry.js file\n@llm-key Deletes output file to force regeneration on next build\n@llm-map Called by build orchestrator during clean operations\n@llm-contract Returns True if cleanup successful, False otherwise",
    "context": "def clean(self, context: BuildContext) -> bool:"
  },
  {
    "file_path": "build/modules/proto_client_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Proto-to-polyglot client library generation module using unified DRY architecture",
    "llm_key": "Generates TypeScript, C, Python, Kotlin client libraries from protobuf definitions using polyglot engine",
    "llm_map": "Integrates with build orchestrator to provide cached, parallel proto client generation with DRY principles",
    "llm_axiom": "Client libraries must be generated before service compilation and provide type-safe APIs across all languages",
    "llm_contract": "Implements BuildModule interface with polyglot engine for consistent multi-language client generation",
    "llm_token": "proto-client-builder: DRY polyglot gRPC client library generation from protobuf schemas",
    "llm_context": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Proto-to-polyglot client library generation module using unified DRY architecture\n@llm-key Generates TypeScript, C, Python, Kotlin client libraries from protobuf definitions using polyglot engine\n@llm-map Integrates with build orchestrator to provide cached, parallel proto client generation with DRY principles\n@llm-axiom Client libraries must be generated before service compilation and provide type-safe APIs across all languages\n@llm-contract Implements BuildModule interface with polyglot engine for consistent multi-language client generation\n@llm-token proto-client-builder: DRY polyglot gRPC client library generation from protobuf schemas\n\nProto-to-Polyglot Client Library Generation Module (DRY Architecture)\n\nGenerates client libraries from Protocol Buffer service definitions for:\n- TypeScript (gRPC-Web for browsers)\n- C/C++ (high-performance native services)\n- Python (backend services and AI/ML)\n- Kotlin (JVM services and persistence platform)\n\nFeatures:\n- Unified polyglot generation engine (DRY principle)\n- Language-specific handlers for customization\n- Intelligent dependency tracking and caching\n- Parallel generation across languages\n- Cross-language type coordination\n- Pluggable language support\n\nAuthor: Unhinged Team\nVersion: 3.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/proto_client_builder.py",
    "line_number": 55,
    "element_name": "ProtoClientBuilder",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Polyglot protobuf client generation using unified DRY engine architecture",
    "llm_key": "Orchestrates TypeScript, C, Python, Kotlin proto client generation through pluggable handlers",
    "llm_map": "Build module that eliminates code duplication in proto generation across multiple languages",
    "llm_axiom": "All proto client generation must use the unified polyglot engine for consistency",
    "llm_contract": "Returns BuildModuleResult with generated client artifacts across all specified languages",
    "llm_token": "polyglot-proto-builder: Unified multi-language protobuf client generation orchestrator",
    "llm_context": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Polyglot protobuf client generation using unified DRY engine architecture\n@llm-key Orchestrates TypeScript, C, Python, Kotlin proto client generation through pluggable handlers\n@llm-map Build module that eliminates code duplication in proto generation across multiple languages\n@llm-axiom All proto client generation must use the unified polyglot engine for consistency\n@llm-contract Returns BuildModuleResult with generated client artifacts across all specified languages\n@llm-token polyglot-proto-builder: Unified multi-language protobuf client generation orchestrator",
    "context": "class ProtoClientBuilder(BuildModule):"
  },
  {
    "file_path": "build/modules/typescript_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "proto",
    "llm_legend": "TypeScript protobuf client generation handler with gRPC-Web support for browser applications",
    "llm_key": "Generates TypeScript protobuf clients with gRPC-Web integration for frontend applications",
    "llm_map": "TypeScript language handler for the polyglot proto engine providing browser-compatible gRPC clients",
    "llm_axiom": "TypeScript proto clients must support both Node.js and browser environments with type safety",
    "llm_contract": "Implements ProtoLanguageHandler interface for TypeScript protobuf and gRPC-Web client generation",
    "llm_token": "typescript-proto-handler: Type-safe TypeScript protobuf client generation for web applications",
    "llm_context": null,
    "raw_comment": "@llm-type proto-handler\n@llm-legend TypeScript protobuf client generation handler with gRPC-Web support for browser applications\n@llm-key Generates TypeScript protobuf clients with gRPC-Web integration for frontend applications\n@llm-map TypeScript language handler for the polyglot proto engine providing browser-compatible gRPC clients\n@llm-axiom TypeScript proto clients must support both Node.js and browser environments with type safety\n@llm-contract Implements ProtoLanguageHandler interface for TypeScript protobuf and gRPC-Web client generation\n@llm-token typescript-proto-handler: Type-safe TypeScript protobuf client generation for web applications\n\nTypeScript Protocol Buffer Client Handler\n\nGenerates type-safe TypeScript protobuf clients for:\n- Browser applications (gRPC-Web)\n- Node.js services (gRPC)\n- Frontend frameworks (React, Vue, Angular)\n- Static HTML interfaces\n\nFeatures:\n- ts-proto plugin integration\n- gRPC-Web client generation\n- Type-safe interfaces\n- ESModule compatibility\n- Tree-shaking support\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "contract",
    "llm_legend": "Language-specific build modules for enhanced build orchestration",
    "llm_key": "Provides specialized builders for Kotlin, TypeScript, Python, and Protobuf with caching and optimization",
    "llm_map": "Build module system that integrates with main orchestrator for multi-language support",
    "llm_axiom": "Each language builder must provide consistent interface and caching capabilities",
    "llm_contract": "All builders implement BuildModule interface with build, cache, and validate methods",
    "llm_token": "build-modules: Specialized build handlers for different programming languages",
    "llm_context": null,
    "raw_comment": "@llm-type contract\n@llm-legend Language-specific build modules for enhanced build orchestration\n@llm-key Provides specialized builders for Kotlin, TypeScript, Python, and Protobuf with caching and optimization\n@llm-map Build module system that integrates with main orchestrator for multi-language support\n@llm-axiom Each language builder must provide consistent interface and caching capabilities\n@llm-contract All builders implement BuildModule interface with build, cache, and validate methods\n@llm-token build-modules: Specialized build handlers for different programming languages\n\nEnhanced Build Modules Package\n\nProvides language-specific build modules that integrate with the main build orchestrator\nto provide optimized, cached, and parallel builds for different technologies.\n\nModules:\n- kotlin_builder: Gradle-based Kotlin/JVM builds with incremental compilation\n- typescript_builder: npm/webpack-based TypeScript builds with hot reloading\n- python_builder: pip/poetry-based Python builds with virtual environment management\n- protobuf_builder: Multi-language protobuf generation with smart caching\n- docker_builder: Container build optimization with layer caching\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/modules/python_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Python build module with virtual environment management and dependency caching",
    "llm_key": "Provides optimized Python builds with pip/poetry, virtual environments, and intelligent caching",
    "llm_map": "Python build module that integrates with pip/poetry build systems and provides enhanced caching",
    "llm_axiom": "Python builds must use isolated virtual environments and cache dependencies effectively",
    "llm_contract": "Returns BuildModuleResult with Python package artifacts and build metrics",
    "llm_token": "python-builder: pip/poetry-based build module for Python services",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Python build module with virtual environment management and dependency caching\n@llm-key Provides optimized Python builds with pip/poetry, virtual environments, and intelligent caching\n@llm-map Python build module that integrates with pip/poetry build systems and provides enhanced caching\n@llm-axiom Python builds must use isolated virtual environments and cache dependencies effectively\n@llm-contract Returns BuildModuleResult with Python package artifacts and build metrics\n@llm-token python-builder: pip/poetry-based build module for Python services\n\nPython Build Module\n\nProvides optimized builds for Python projects with:\n- Virtual environment management\n- Dependency caching\n- Package building\n- Test execution\n- Requirements analysis\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/modules/python_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "proto",
    "llm_legend": "Python protobuf client generation handler for AI/ML services and backend systems",
    "llm_key": "Generates Python protobuf clients with gRPC support for AI services and backend applications",
    "llm_map": "Python language handler for the polyglot proto engine providing gRPC client generation for ML/AI services",
    "llm_axiom": "Python proto clients must support async/await patterns and integrate with AI/ML frameworks",
    "llm_contract": "Implements ProtoLanguageHandler interface for Python protobuf and gRPC client generation",
    "llm_token": "python-proto-handler: Python protobuf client generation for AI/ML services and backend systems",
    "llm_context": null,
    "raw_comment": "@llm-type proto-handler\n@llm-legend Python protobuf client generation handler for AI/ML services and backend systems\n@llm-key Generates Python protobuf clients with gRPC support for AI services and backend applications\n@llm-map Python language handler for the polyglot proto engine providing gRPC client generation for ML/AI services\n@llm-axiom Python proto clients must support async/await patterns and integrate with AI/ML frameworks\n@llm-contract Implements ProtoLanguageHandler interface for Python protobuf and gRPC client generation\n@llm-token python-proto-handler: Python protobuf client generation for AI/ML services and backend systems\n\nPython Protocol Buffer Client Handler\n\nGenerates Python protobuf clients for:\n- AI/ML services (Whisper, Vision, LLM)\n- Backend gRPC services\n- Data processing pipelines\n- Async service integration\n\nFeatures:\n- Standard protoc Python generation\n- gRPC Python service stubs\n- Async/await support\n- Type hints integration\n- Package structure organization\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/service_discovery_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Service discovery build module for compile-time service registry generation",
    "llm_key": "Discovers Docker and gRPC services at build time, generates static JavaScript registry for system health dashboard",
    "llm_map": "Integrates with existing build orchestrator using BuildModule contract for cached service discovery",
    "llm_axiom": "Service discovery must happen at build time to ensure HTML dashboard is always up-to-date",
    "llm_contract": "Implements BuildModule interface with docker-compose.yml and proto file parsing",
    "llm_token": "service-discovery-builder: Build-time service discovery for system health monitoring",
    "llm_context": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Service discovery build module for compile-time service registry generation\n@llm-key Discovers Docker and gRPC services at build time, generates static JavaScript registry for system health dashboard\n@llm-map Integrates with existing build orchestrator using BuildModule contract for cached service discovery\n@llm-axiom Service discovery must happen at build time to ensure HTML dashboard is always up-to-date\n@llm-contract Implements BuildModule interface with docker-compose.yml and proto file parsing\n@llm-token service-discovery-builder: Build-time service discovery for system health monitoring\n\nService Discovery Build Module\n\nDiscovers services at build time from:\n- Docker Compose services (docker-compose.yml)\n- gRPC services (proto/*.proto files)\n- Health endpoint mappings\n- Service dependency topology\n\nGenerates static JavaScript registry consumed by system-health.html dashboard.\nFollows existing BuildModule contract pattern for consistency and caching.\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/service_discovery_builder.py",
    "line_number": 45,
    "element_name": "ServiceDiscoveryBuilder",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Build-time service discovery module following existing BuildModule contract",
    "llm_key": "Parses docker-compose.yml and proto files to generate static service registry",
    "llm_map": "Integrates with build orchestrator for cached, dependency-aware service discovery",
    "llm_axiom": "Service registry must be generated before HTML dashboard access",
    "llm_contract": "Returns BuildModuleResult with service-registry.js artifact",
    "llm_token": "build-time-service-discovery: Compile-time service discovery for health monitoring",
    "llm_context": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Build-time service discovery module following existing BuildModule contract\n@llm-key Parses docker-compose.yml and proto files to generate static service registry\n@llm-map Integrates with build orchestrator for cached, dependency-aware service discovery\n@llm-axiom Service registry must be generated before HTML dashboard access\n@llm-contract Returns BuildModuleResult with service-registry.js artifact\n@llm-token build-time-service-discovery: Compile-time service discovery for health monitoring",
    "context": "class ServiceDiscoveryBuilder(BuildModule):"
  },
  {
    "file_path": "build/modules/kotlin_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "proto",
    "llm_legend": "Kotlin protobuf client generation handler for JVM services and persistence platform",
    "llm_key": "Generates Kotlin protobuf clients with gRPC support for JVM-based services and persistence layer",
    "llm_map": "Kotlin language handler for the polyglot proto engine providing JVM gRPC client generation",
    "llm_axiom": "Kotlin proto clients must integrate seamlessly with existing JVM services and provide coroutine support",
    "llm_contract": "Implements ProtoLanguageHandler interface for Kotlin protobuf and gRPC client generation",
    "llm_token": "kotlin-proto-handler: Kotlin protobuf client generation for JVM services and persistence platform",
    "llm_context": null,
    "raw_comment": "@llm-type proto-handler\n@llm-legend Kotlin protobuf client generation handler for JVM services and persistence platform\n@llm-key Generates Kotlin protobuf clients with gRPC support for JVM-based services and persistence layer\n@llm-map Kotlin language handler for the polyglot proto engine providing JVM gRPC client generation\n@llm-axiom Kotlin proto clients must integrate seamlessly with existing JVM services and provide coroutine support\n@llm-contract Implements ProtoLanguageHandler interface for Kotlin protobuf and gRPC client generation\n@llm-token kotlin-proto-handler: Kotlin protobuf client generation for JVM services and persistence platform\n\nKotlin Protocol Buffer Client Handler\n\nGenerates Kotlin protobuf clients for:\n- Persistence platform services\n- JVM-based microservices\n- Ktor web applications\n- Coroutine-based async services\n\nFeatures:\n- Kotlin protobuf generation\n- gRPC Kotlin stubs\n- Coroutine integration\n- Gradle build integration\n- Package organization\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/polyglot_proto_engine.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Unified polyglot protobuf client generation engine with DRY architecture",
    "llm_key": "Generates TypeScript, C, Python, Kotlin clients from protobuf definitions using shared generation patterns",
    "llm_map": "Central proto generation engine that eliminates code duplication across language-specific generators",
    "llm_axiom": "All proto client generation must use this unified engine to maintain consistency and reduce duplication",
    "llm_contract": "Provides language-agnostic proto generation with pluggable language-specific handlers",
    "llm_token": "polyglot-proto-engine: Unified DRY protobuf client generation for multiple languages",
    "llm_context": null,
    "raw_comment": "@llm-type build-engine\n@llm-legend Unified polyglot protobuf client generation engine with DRY architecture\n@llm-key Generates TypeScript, C, Python, Kotlin clients from protobuf definitions using shared generation patterns\n@llm-map Central proto generation engine that eliminates code duplication across language-specific generators\n@llm-axiom All proto client generation must use this unified engine to maintain consistency and reduce duplication\n@llm-contract Provides language-agnostic proto generation with pluggable language-specific handlers\n@llm-token polyglot-proto-engine: Unified DRY protobuf client generation for multiple languages\n\nPolyglot Protocol Buffer Client Generation Engine\n\nImplements DRY principle for proto client generation across:\n- TypeScript (gRPC-Web, browser clients)\n- C/C++ (native gRPC, high-performance services)\n- Python (gRPC services, AI/ML backends)\n- Kotlin (JVM services, persistence platform)\n\nFeatures:\n- Unified protoc command generation\n- Shared error handling and validation\n- Cross-language type coordination\n- Pluggable language handlers\n- Intelligent dependency tracking\n- Parallel generation support\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/polyglot_proto_engine.py",
    "line_number": 175,
    "element_name": "PolyglotProtoEngine",
    "language": "python",
    "llm_type": "proto",
    "llm_legend": "Unified engine for generating protobuf clients across multiple languages with DRY architecture",
    "llm_key": "Coordinates TypeScript, C, Python, Kotlin proto generation using pluggable language handlers",
    "llm_map": "Central orchestrator that eliminates duplication in proto generation logic across languages",
    "llm_axiom": "All proto client generation must use this engine for consistency and maintainability",
    "llm_contract": "Provides unified interface for multi-language proto generation with shared validation and error handling",
    "llm_token": "polyglot-proto-coordinator: Multi-language protobuf client generation orchestrator",
    "llm_context": null,
    "raw_comment": "@llm-type proto-engine\n@llm-legend Unified engine for generating protobuf clients across multiple languages with DRY architecture\n@llm-key Coordinates TypeScript, C, Python, Kotlin proto generation using pluggable language handlers\n@llm-map Central orchestrator that eliminates duplication in proto generation logic across languages\n@llm-axiom All proto client generation must use this engine for consistency and maintainability\n@llm-contract Provides unified interface for multi-language proto generation with shared validation and error handling\n@llm-token polyglot-proto-coordinator: Multi-language protobuf client generation orchestrator",
    "context": "class PolyglotProtoEngine:"
  },
  {
    "file_path": "build/modules/c_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "proto",
    "llm_legend": "C/C++ protobuf client generation handler for high-performance native services",
    "llm_key": "Generates C++ protobuf clients with gRPC support for native performance-critical services",
    "llm_map": "C++ language handler for the polyglot proto engine providing native gRPC client generation",
    "llm_axiom": "C++ proto clients must provide maximum performance for system-level services",
    "llm_contract": "Implements ProtoLanguageHandler interface for C++ protobuf and gRPC client generation",
    "llm_token": "c-proto-handler: High-performance C++ protobuf client generation for native services",
    "llm_context": null,
    "raw_comment": "@llm-type proto-handler\n@llm-legend C/C++ protobuf client generation handler for high-performance native services\n@llm-key Generates C++ protobuf clients with gRPC support for native performance-critical services\n@llm-map C++ language handler for the polyglot proto engine providing native gRPC client generation\n@llm-axiom C++ proto clients must provide maximum performance for system-level services\n@llm-contract Implements ProtoLanguageHandler interface for C++ protobuf and gRPC client generation\n@llm-token c-proto-handler: High-performance C++ protobuf client generation for native services\n\nC/C++ Protocol Buffer Client Handler\n\nGenerates high-performance C++ protobuf clients for:\n- Native gRPC services\n- System-level integrations\n- Performance-critical components\n- Low-latency applications\n\nFeatures:\n- Standard protoc C++ generation\n- gRPC C++ service stubs\n- CMake build integration\n- Header/source file organization\n- Namespace management\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": "build/modules/kotlin_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Kotlin/Gradle build module with incremental compilation and caching",
    "llm_key": "Provides optimized Gradle builds with parallel execution, incremental compilation, and intelligent caching",
    "llm_map": "Kotlin build module that integrates with Gradle build system and provides enhanced caching",
    "llm_axiom": "Gradle builds must be deterministic and support incremental compilation for fast development",
    "llm_contract": "Returns BuildModuleResult with JAR artifacts and build metrics",
    "llm_token": "kotlin-builder: Gradle-based build module for Kotlin/JVM projects",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Kotlin/Gradle build module with incremental compilation and caching\n@llm-key Provides optimized Gradle builds with parallel execution, incremental compilation, and intelligent caching\n@llm-map Kotlin build module that integrates with Gradle build system and provides enhanced caching\n@llm-axiom Gradle builds must be deterministic and support incremental compilation for fast development\n@llm-contract Returns BuildModuleResult with JAR artifacts and build metrics\n@llm-token kotlin-builder: Gradle-based build module for Kotlin/JVM projects\n\nKotlin/Gradle Build Module\n\nProvides optimized builds for Kotlin projects using Gradle with:\n- Incremental compilation support\n- Parallel execution\n- Build cache integration\n- Dependency analysis\n- JAR artifact management\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": "build/validators/port_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Port conflict detection and resolution at build time",
    "llm_key": "Statically analyzes port allocations to prevent runtime binding failures",
    "llm_map": "Compile-time port validation that eliminates Docker port conflicts",
    "llm_axiom": "Port conflicts must be resolved at build time, never at runtime",
    "llm_contract": null,
    "llm_token": "port-validator: Static port allocation analyzer preventing runtime binding errors",
    "llm_context": null,
    "raw_comment": "@llm-type build-validator\n@llm-legend Port conflict detection and resolution at build time\n@llm-key Statically analyzes port allocations to prevent runtime binding failures\n@llm-map Compile-time port validation that eliminates Docker port conflicts\n@llm-axiom Port conflicts must be resolved at build time, never at runtime\n@llm-token port-validator: Static port allocation analyzer preventing runtime binding errors",
    "context": ""
  },
  {
    "file_path": "build/validators/port_validator.py",
    "line_number": 62,
    "element_name": "validate_project",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Validate all port allocations in the project\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler",
    "context": "def validate_project(self) -> List[PortConflict]:"
  },
  {
    "file_path": "build/validators/resource_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Resource requirement validation at build time",
    "llm_key": "Statically analyzes resource requirements to prevent runtime resource exhaustion",
    "llm_map": "Compile-time resource validation ensuring adequate system resources",
    "llm_axiom": "Resource issues must be detected at build time, never at runtime",
    "llm_contract": null,
    "llm_token": "resource-validator: Static resource analyzer preventing runtime resource failures",
    "llm_context": null,
    "raw_comment": "@llm-type build-validator\n@llm-legend Resource requirement validation at build time\n@llm-key Statically analyzes resource requirements to prevent runtime resource exhaustion\n@llm-map Compile-time resource validation ensuring adequate system resources\n@llm-axiom Resource issues must be detected at build time, never at runtime\n@llm-token resource-validator: Static resource analyzer preventing runtime resource failures",
    "context": ""
  },
  {
    "file_path": "build/validators/resource_validator.py",
    "line_number": 43,
    "element_name": "validate_resources",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Validate all resource requirements in the project\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler",
    "context": "def validate_resources(self) -> List[ResourceIssue]:"
  },
  {
    "file_path": "build/validators/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Compile-time validation system that eliminates runtime errors through static analysis",
    "llm_key": "Validates port allocations, dependencies, and resource requirements before any deployment",
    "llm_map": "Central validation system that ensures zero-failure runtime execution",
    "llm_axiom": "All runtime errors should be prevented by compile-time validation",
    "llm_contract": null,
    "llm_token": "build-validators: Static analysis system preventing runtime failures",
    "llm_context": null,
    "raw_comment": "Build-Time Validators\n\n@llm-type build-validation\n@llm-legend Compile-time validation system that eliminates runtime errors through static analysis\n@llm-key Validates port allocations, dependencies, and resource requirements before any deployment\n@llm-map Central validation system that ensures zero-failure runtime execution\n@llm-axiom All runtime errors should be prevented by compile-time validation\n@llm-token build-validators: Static analysis system preventing runtime failures",
    "context": ""
  },
  {
    "file_path": "build/validators/dependency_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build",
    "llm_legend": "Dependency validation at build time to prevent runtime dependency failures",
    "llm_key": "Statically analyzes service dependencies to ensure proper startup order",
    "llm_map": "Compile-time dependency validation preventing runtime startup failures",
    "llm_axiom": "Dependency issues must be resolved at build time, never at runtime",
    "llm_contract": null,
    "llm_token": "dependency-validator: Static dependency analyzer preventing runtime startup errors",
    "llm_context": null,
    "raw_comment": "@llm-type build-validator\n@llm-legend Dependency validation at build time to prevent runtime dependency failures\n@llm-key Statically analyzes service dependencies to ensure proper startup order\n@llm-map Compile-time dependency validation preventing runtime startup failures\n@llm-axiom Dependency issues must be resolved at build time, never at runtime\n@llm-token dependency-validator: Static dependency analyzer preventing runtime startup errors",
    "context": ""
  },
  {
    "file_path": "build/validators/dependency_validator.py",
    "line_number": 40,
    "element_name": "validate_dependencies",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Validate all service dependencies in the project\n\n@llm-future This becomes part of Unhinged OS service orchestration compiler",
    "context": "def validate_dependencies(self) -> List[DependencyIssue]:"
  },
  {
    "file_path": "services/vision-ai/main.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_legend": "Provides AI-powered image analysis using BLIP vision model for user-uploaded content",
    "llm_key": "Loads BLIP model on startup, serves Flask HTTP API on port 8001, implements health checks",
    "llm_map": "Entry point for vision processing pipeline, integrates with backend via HTTP API",
    "llm_axiom": "Vision model must be loaded and ready before accepting any processing requests",
    "llm_contract": "Returns structured analysis JSON or appropriate HTTP error codes for failures",
    "llm_token": "BLIP: Bootstrapping Language-Image Pre-training model for image captioning",
    "llm_context": null,
    "raw_comment": "@llm-type service\n@llm-legend Provides AI-powered image analysis using BLIP vision model for user-uploaded content\n@llm-key Loads BLIP model on startup, serves Flask HTTP API on port 8001, implements health checks\n@llm-map Entry point for vision processing pipeline, integrates with backend via HTTP API\n@llm-axiom Vision model must be loaded and ready before accepting any processing requests\n@llm-contract Returns structured analysis JSON or appropriate HTTP error codes for failures\n@llm-token BLIP: Bootstrapping Language-Image Pre-training model for image captioning\n\nVision AI Service - Main Entry Point\nStarts both Flask HTTP server and gRPC server based on environment variables",
    "context": ""
  },
  {
    "file_path": "services/vision-ai/main.py",
    "line_number": 26,
    "element_name": "start_flask_server",
    "language": "python",
    "llm_type": "function",
    "llm_legend": "Starts Flask HTTP server to handle image analysis requests from backend",
    "llm_key": "Binds to all interfaces on port 8001, disables debug mode for production",
    "llm_map": "Called by main thread, serves HTTP endpoints defined in app.py",
    "llm_axiom": null,
    "llm_contract": "Blocks until server shutdown, logs startup status",
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "@llm-type function\n@llm-legend Starts Flask HTTP server to handle image analysis requests from backend\n@llm-key Binds to all interfaces on port 8001, disables debug mode for production\n@llm-map Called by main thread, serves HTTP endpoints defined in app.py\n@llm-contract Blocks until server shutdown, logs startup status",
    "context": "def start_flask_server():"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "virtualization",
    "llm_legend": "HTTP proxy server that represents the line-in-the-sand between Unhinged System Commands and host OS operations",
    "llm_key": "Temporary shim server that will evolve into the primary interface for Unhinged OS virtualization layer",
    "llm_map": "This server is the future kernel interface - every endpoint here represents a system call in Unhinged OS",
    "llm_axiom": "This is where Unhinged abstractions meet raw system operations - design with future OS in mind",
    "llm_contract": "Provides HTTP interface for system operations while maintaining audit trail for future OS development",
    "llm_token": "virtualization-proxy: The foundational HTTP layer that will become the Unhinged OS system call interface",
    "llm_context": null,
    "raw_comment": "@llm-type virtualization-boundary\n@llm-legend HTTP proxy server that represents the line-in-the-sand between Unhinged System Commands and host OS operations\n@llm-key Temporary shim server that will evolve into the primary interface for Unhinged OS virtualization layer\n@llm-map This server is the future kernel interface - every endpoint here represents a system call in Unhinged OS\n@llm-axiom This is where Unhinged abstractions meet raw system operations - design with future OS in mind\n@llm-contract Provides HTTP interface for system operations while maintaining audit trail for future OS development\n@llm-token virtualization-proxy: The foundational HTTP layer that will become the Unhinged OS system call interface\n@llm-evolution Every endpoint added here is a candidate for a future Unhinged OS system call or kernel operation\n\nARCHITECTURAL VISION:\nThis proxy server represents the exact boundary where Unhinged will eventually replace the host OS.\nCurrent: HTML \u2192 HTTP Proxy \u2192 System Controller \u2192 Build System \u2192 Docker \u2192 Host OS\nFuture:  HTML \u2192 HTTP Proxy \u2192 System Controller \u2192 Unhinged Kernel \u2192 Unhinged Hardware Abstraction\n\nVIRTUALIZATION ROADMAP:\n1. Phase 1 (Current): HTTP shim over existing build system\n2. Phase 2: Direct container orchestration bypassing Docker\n3. Phase 3: Custom process management and resource allocation\n4. Phase 4: Hardware abstraction layer\n5. Phase 5: Full Unhinged OS with custom kernel\n\nDESIGN PRINCIPLES:\n- Every HTTP endpoint maps to a future OS system call\n- All operations must be auditable for OS development insights\n- Resource management patterns here inform future kernel design\n- Security model here becomes the foundation for OS security",
    "context": ""
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 85,
    "element_name": "health_check",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Health check endpoint - Future: sys_health_check()\n\n@llm-future This becomes a fundamental OS health monitoring system call",
    "context": "async def health_check():"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 102,
    "element_name": "start_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Start a service tier - Future Unhinged OS system call: sys_start_tier()\n\n@llm-future This HTTP endpoint will become: int sys_start_tier(tier_id_t tier)\n@llm-kernel-design Service tiers are fundamental OS abstractions in Unhinged",
    "context": "async def start_service_tier(tier: str, request: Request):"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 154,
    "element_name": "stop_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Stop a service tier - Future: sys_stop_tier()\n\n@llm-future This becomes the foundation for Unhinged process lifecycle management",
    "context": "async def stop_service_tier(tier: str, request: Request):"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 187,
    "element_name": "get_system_status",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Get system status - Future: sys_get_system_info()\n\n@llm-future This endpoint design informs future OS status reporting",
    "context": "async def get_system_status():"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 217,
    "element_name": "get_virtualization_insights",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Endpoint for gathering insights about system operations for future OS design\n\n@llm-purpose Collect operational patterns that inform Unhinged OS kernel design",
    "context": "async def get_virtualization_insights():"
  },
  {
    "file_path": "control/static_html/shared/api-integration.js",
    "line_number": 1,
    "element_name": "APITabIntegration",
    "language": "typescript",
    "llm_type": "integration",
    "llm_legend": "API client integration layer for tab system service communication",
    "llm_key": "Provides seamless gRPC service access within tab-based browser interface",
    "llm_map": "Bridges generated proto clients with TabSystem for real service calls",
    "llm_axiom": "All service communication must be type-safe and error-handled",
    "llm_contract": "Provides unified API access through tab system integration",
    "llm_token": "api-tab-integration: Service client integration for tab-based control plane",
    "llm_context": null,
    "raw_comment": "API Integration for Tab System\nConnects generated proto clients with the tab-based control plane\n\n@llm-type integration\n@llm-legend API client integration layer for tab system service communication\n@llm-key Provides seamless gRPC service access within tab-based browser interface\n@llm-map Bridges generated proto clients with TabSystem for real service calls\n@llm-axiom All service communication must be type-safe and error-handled\n@llm-contract Provides unified API access through tab system integration\n@llm-token api-tab-integration: Service client integration for tab-based control plane",
    "context": "class APITabIntegration {"
  },
  {
    "file_path": "control/sdk/javascript/unhinged-sdk.js",
    "line_number": 1,
    "element_name": "UnhingedSDK",
    "language": "typescript",
    "llm_type": "client",
    "llm_legend": "JavaScript client SDK providing syntax sugar for Unhinged system operations",
    "llm_key": "Beautiful API abstractions over HTTP control proxy for system calls",
    "llm_map": "Client library that makes system operations feel like native JavaScript",
    "llm_axiom": "All system operations should feel natural and intuitive to developers",
    "llm_contract": null,
    "llm_token": "unhinged-sdk: JavaScript client providing elegant system call abstractions",
    "llm_context": null,
    "raw_comment": "Unhinged System SDK - JavaScript Client\n\n@llm-type client-sdk\n@llm-legend JavaScript client SDK providing syntax sugar for Unhinged system operations\n@llm-key Beautiful API abstractions over HTTP control proxy for system calls\n@llm-map Client library that makes system operations feel like native JavaScript\n@llm-axiom All system operations should feel natural and intuitive to developers\n@llm-token unhinged-sdk: JavaScript client providing elegant system call abstractions\n\nBeautiful syntax sugar for system operations:\n- file.write(path, content) instead of fetch('/control/system/file/write')\n- service.start('applications') instead of fetch('/control/system/tier/applications/start')\n- network.ping(host) instead of raw HTTP calls\n- package.apt.install(name) instead of subprocess calls",
    "context": "class UnhingedSDK {"
  },
  {
    "file_path": "control/system/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "System control abstraction layer package for Unhinged platform",
    "llm_key": "Provides operational abstractions over build system while preparing for future OS virtualization",
    "llm_map": "Central control plane that bridges DevOps operations with build orchestration",
    "llm_axiom": "All system operations must be auditable, reversible, and provide clear operational feedback",
    "llm_contract": null,
    "llm_token": "control-system: Package containing system control abstractions and virtualization boundary interfaces",
    "llm_context": null,
    "raw_comment": "Unhinged Control System\n\n@llm-type control-plane-package\n@llm-legend System control abstraction layer package for Unhinged platform\n@llm-key Provides operational abstractions over build system while preparing for future OS virtualization\n@llm-map Central control plane that bridges DevOps operations with build orchestration\n@llm-axiom All system operations must be auditable, reversible, and provide clear operational feedback\n@llm-token control-system: Package containing system control abstractions and virtualization boundary interfaces",
    "context": ""
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control",
    "llm_legend": "System control abstraction layer that bridges build orchestration with operations semantics",
    "llm_key": "Translates DevOps operations (start/stop/restart) into build system targets while maintaining operational context",
    "llm_map": "Central control plane that will evolve into virtualization boundary between Unhinged and host OS",
    "llm_axiom": "All system operations must be auditable, reversible, and provide clear operational feedback",
    "llm_contract": "Returns OperationResult with success status, affected services, and system state changes",
    "llm_token": "system-controller: Control plane service managing the boundary between application logic and system operations",
    "llm_context": null,
    "raw_comment": "@llm-type control-plane\n@llm-legend System control abstraction layer that bridges build orchestration with operations semantics\n@llm-key Translates DevOps operations (start/stop/restart) into build system targets while maintaining operational context\n@llm-map Central control plane that will evolve into virtualization boundary between Unhinged and host OS\n@llm-axiom All system operations must be auditable, reversible, and provide clear operational feedback\n@llm-contract Returns OperationResult with success status, affected services, and system state changes\n@llm-token system-controller: Control plane service managing the boundary between application logic and system operations\n@llm-evolution This is the foundation layer for future OS virtualization - every command here represents a potential kernel operation",
    "context": ""
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 36,
    "element_name": "SystemController",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "System Control Abstraction Layer\n\nBridges operational semantics (start/stop services) with build system implementation.\nThis class represents the future boundary between Unhinged applications and the OS.\n\n@llm-future Every method here is a candidate for a future Unhinged OS system call\n@llm-virtualization This class will evolve into the primary OS interface",
    "context": "class SystemController:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 86,
    "element_name": "start_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Start a logical service tier\n\n@llm-future This will become: int sys_start_tier(tier_id_t tier)\n@llm-kernel-design Service tiers are fundamental OS abstractions in Unhinged",
    "context": "async def start_service_tier(self, tier: str) -> OperationResult:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 147,
    "element_name": "stop_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Stop a logical service tier\n\n@llm-future This will become: int sys_stop_tier(tier_id_t tier)",
    "context": "async def stop_service_tier(self, tier: str) -> OperationResult:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 210,
    "element_name": "_execute_docker_command",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Execute Docker command as fallback when build system unavailable\n\n@llm-future This direct command execution will be replaced by Unhinged container management",
    "context": "async def _execute_docker_command(self, operation: str, tier_config: Dict[str, Any]) -> OperationResult:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 253,
    "element_name": "get_system_status",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Get current system status\n\n@llm-future This will become: sys_get_system_info()",
    "context": "async def get_system_status(self) -> SystemStatus:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 307,
    "element_name": "get_operation_patterns",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Analyze operation patterns for future OS design insights\n\n@llm-purpose Collect operational patterns that inform Unhinged OS kernel design",
    "context": "def get_operation_patterns(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "data",
    "llm_legend": "Operation result data model for system control operations",
    "llm_key": "Standardized result format for all system operations with future OS compatibility",
    "llm_map": "Result model that will evolve into OS system call return values",
    "llm_axiom": "All operations must return structured, auditable results",
    "llm_contract": null,
    "llm_token": "operation-result: Data model for system operation results and future OS return values",
    "llm_context": null,
    "raw_comment": "@llm-type data-model\n@llm-legend Operation result data model for system control operations\n@llm-key Standardized result format for all system operations with future OS compatibility\n@llm-map Result model that will evolve into OS system call return values\n@llm-axiom All operations must return structured, auditable results\n@llm-token operation-result: Data model for system operation results and future OS return values",
    "context": ""
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 18,
    "element_name": "OperationResult",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Standardized result for system operations\n\n@llm-future This data structure will become the return format for Unhinged OS system calls\n@llm-evolution Each field here represents metadata that future OS kernel will track",
    "context": "class OperationResult:"
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 58,
    "element_name": "from_build_results",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Create OperationResult from build system results\n\n@llm-note This bridges build system results to operational semantics\n@llm-future This translation layer will be removed when we have direct OS operations",
    "context": "def from_build_results(cls, operation: str, build_results: List[Any]) -> 'OperationResult':"
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 101,
    "element_name": "SystemStatus",
    "language": "python",
    "llm_type": null,
    "llm_legend": null,
    "llm_key": null,
    "llm_map": null,
    "llm_axiom": null,
    "llm_contract": null,
    "llm_token": null,
    "llm_context": null,
    "raw_comment": "Current system status snapshot\n\n@llm-future This will become the Unhinged OS system information structure",
    "context": "class SystemStatus:"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/PersistencePlatformApplication.kt",
    "line_number": 27,
    "element_name": "PersistencePlatformApplication",
    "language": "kotlin",
    "llm_type": "application",
    "llm_legend": "Main application entry point for the Persistence Platform",
    "llm_key": "Application bootstrap that initializes platform, loads configuration, and starts API server",
    "llm_map": "Main application orchestrating platform startup, configuration loading, and service initialization",
    "llm_axiom": "Application must handle graceful startup and shutdown with proper error handling",
    "llm_contract": "Provides complete platform initialization and API server startup with configuration management",
    "llm_token": "persistence-platform-app: Main application entry point and bootstrap",
    "llm_context": null,
    "raw_comment": "@llm-type application\n@llm-legend Main application entry point for the Persistence Platform\n@llm-key Application bootstrap that initializes platform, loads configuration, and starts API server\n@llm-map Main application orchestrating platform startup, configuration loading, and service initialization\n@llm-axiom Application must handle graceful startup and shutdown with proper error handling\n@llm-contract Provides complete platform initialization and API server startup with configuration management\n@llm-token persistence-platform-app: Main application entry point and bootstrap",
    "context": "class PersistencePlatformApplication {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/client/DatabaseClientRegistry.kt",
    "line_number": 24,
    "element_name": "DatabaseClientRegistry",
    "language": "kotlin",
    "llm_type": "database",
    "llm_legend": "Unified database client registry for multi-database persistence platform",
    "llm_key": "Manages CockroachDB, Redis, Cassandra, Chroma connections with health monitoring",
    "llm_map": "Central access point for all database operations in Kotlin services",
    "llm_axiom": "All database access must go through registry for monitoring and connection management",
    "llm_contract": "Provides type-safe database clients with automatic health checking and reconnection",
    "llm_token": "database-client-registry: Unified database access management for Kotlin backend",
    "llm_context": null,
    "raw_comment": "@llm-type database-registry\n@llm-legend Unified database client registry for multi-database persistence platform\n@llm-key Manages CockroachDB, Redis, Cassandra, Chroma connections with health monitoring\n@llm-map Central access point for all database operations in Kotlin services\n@llm-axiom All database access must go through registry for monitoring and connection management\n@llm-contract Provides type-safe database clients with automatic health checking and reconnection\n@llm-token database-client-registry: Unified database access management for Kotlin backend",
    "context": "class DatabaseClientRegistry {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/monitoring/ObservabilityManager.kt",
    "line_number": 34,
    "element_name": "ObservabilityManager",
    "language": "kotlin",
    "llm_type": "observability",
    "llm_legend": "Comprehensive observability system providing metrics, tracing, and monitoring for the persistence platform",
    "llm_key": "Central observability hub that collects metrics, traces requests, monitors health, and provides analytics",
    "llm_map": "Complete monitoring solution with metrics collection, distributed tracing, and performance analytics",
    "llm_axiom": "All persistence operations must be observable for proper monitoring and troubleshooting",
    "llm_contract": "Provides comprehensive observability including metrics, tracing, health checks, and alerting",
    "llm_token": "observability-manager: Complete monitoring and observability system",
    "llm_context": null,
    "raw_comment": "@llm-type observability-manager\n@llm-legend Comprehensive observability system providing metrics, tracing, and monitoring for the persistence platform\n@llm-key Central observability hub that collects metrics, traces requests, monitors health, and provides analytics\n@llm-map Complete monitoring solution with metrics collection, distributed tracing, and performance analytics\n@llm-axiom All persistence operations must be observable for proper monitoring and troubleshooting\n@llm-contract Provides comprehensive observability including metrics, tracing, health checks, and alerting\n@llm-token observability-manager: Complete monitoring and observability system",
    "context": "class ObservabilityManager("
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/model/CoreModels.kt",
    "line_number": 26,
    "element_name": "ExecutionContext",
    "language": "kotlin",
    "llm_type": "model",
    "llm_legend": "Execution context that carries request metadata, tracing, and security information",
    "llm_key": "Provides request context for all persistence operations including auth, tracing, and metadata",
    "llm_map": "Context object passed through all persistence operations for observability and security",
    "llm_axiom": "All persistence operations must include execution context for proper tracing and security",
    "llm_contract": "Contains user identity, trace information, and request metadata for operation execution",
    "llm_token": "execution-context: Request context for persistence operations",
    "llm_context": null,
    "raw_comment": "@llm-type model\n@llm-legend Execution context that carries request metadata, tracing, and security information\n@llm-key Provides request context for all persistence operations including auth, tracing, and metadata\n@llm-map Context object passed through all persistence operations for observability and security\n@llm-axiom All persistence operations must include execution context for proper tracing and security\n@llm-contract Contains user identity, trace information, and request metadata for operation execution\n@llm-token execution-context: Request context for persistence operations",
    "context": "data class ExecutionContext("
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/core/OperationOrchestrator.kt",
    "line_number": 25,
    "element_name": "OperationOrchestrator",
    "language": "kotlin",
    "llm_type": "interface",
    "llm_legend": "Operation orchestrator that manages complex multi-technology operations and workflows",
    "llm_key": "Coordinates distributed transactions, async pipelines, and ML workflows across database technologies",
    "llm_map": "Central orchestration engine for complex operations requiring multiple database interactions",
    "llm_axiom": "All complex operations must be orchestrated through this interface for consistency and reliability",
    "llm_contract": "Provides transaction management, workflow orchestration, and error handling for complex operations",
    "llm_token": "operation-orchestrator: Complex operation coordination and workflow management",
    "llm_context": null,
    "raw_comment": "@llm-type interface\n@llm-legend Operation orchestrator that manages complex multi-technology operations and workflows\n@llm-key Coordinates distributed transactions, async pipelines, and ML workflows across database technologies\n@llm-map Central orchestration engine for complex operations requiring multiple database interactions\n@llm-axiom All complex operations must be orchestrated through this interface for consistency and reliability\n@llm-contract Provides transaction management, workflow orchestration, and error handling for complex operations\n@llm-token operation-orchestrator: Complex operation coordination and workflow management",
    "context": "interface OperationOrchestrator {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/core/DatabaseProvider.kt",
    "line_number": 25,
    "element_name": "DatabaseProvider",
    "language": "kotlin",
    "llm_type": "interface",
    "llm_legend": "Database provider interface that each technology implements for platform integration",
    "llm_key": "Defines contract for database operations that enables unified access across all technologies",
    "llm_map": "Technology-specific implementations provide database access while maintaining common interface",
    "llm_axiom": "Each database technology must implement this interface to participate in the platform",
    "llm_contract": "Provides standardized CRUD, query, and management operations for any database technology",
    "llm_token": "database-provider: Technology-specific database access interface",
    "llm_context": null,
    "raw_comment": "@llm-type interface\n@llm-legend Database provider interface that each technology implements for platform integration\n@llm-key Defines contract for database operations that enables unified access across all technologies\n@llm-map Technology-specific implementations provide database access while maintaining common interface\n@llm-axiom Each database technology must implement this interface to participate in the platform\n@llm-contract Provides standardized CRUD, query, and management operations for any database technology\n@llm-token database-provider: Technology-specific database access interface",
    "context": "interface DatabaseProvider {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/core/QueryExecutor.kt",
    "line_number": 23,
    "element_name": "QueryExecutor",
    "language": "kotlin",
    "llm_type": "interface",
    "llm_legend": "Query executor that handles query planning, optimization, caching, and routing",
    "llm_key": "Provides intelligent query execution with automatic optimization and caching strategies",
    "llm_map": "Central query processing engine that routes queries to optimal database technologies",
    "llm_axiom": "All queries must be processed through this executor for consistency and optimization",
    "llm_contract": "Handles query planning, caching, routing, and execution across all database technologies",
    "llm_token": "query-executor: Intelligent query processing and routing engine",
    "llm_context": null,
    "raw_comment": "@llm-type interface\n@llm-legend Query executor that handles query planning, optimization, caching, and routing\n@llm-key Provides intelligent query execution with automatic optimization and caching strategies\n@llm-map Central query processing engine that routes queries to optimal database technologies\n@llm-axiom All queries must be processed through this executor for consistency and optimization\n@llm-contract Handles query planning, caching, routing, and execution across all database technologies\n@llm-token query-executor: Intelligent query processing and routing engine",
    "context": "interface QueryExecutor {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/core/PersistenceManager.kt",
    "line_number": 24,
    "element_name": "PersistenceManager",
    "language": "kotlin",
    "llm_type": "interface",
    "llm_legend": "Main persistence platform manager that provides unified access to all database technologies",
    "llm_key": "Abstracts database complexity behind single API, handles routing, caching, and lifecycle management",
    "llm_map": "Central orchestrator for all persistence operations across multiple database technologies",
    "llm_axiom": "All database operations must go through this interface to ensure consistency and observability",
    "llm_contract": "Provides technology-agnostic CRUD operations with automatic routing and optimization",
    "llm_token": "persistence-manager: Core interface for unified database access",
    "llm_context": null,
    "raw_comment": "@llm-type interface\n@llm-legend Main persistence platform manager that provides unified access to all database technologies\n@llm-key Abstracts database complexity behind single API, handles routing, caching, and lifecycle management\n@llm-map Central orchestrator for all persistence operations across multiple database technologies\n@llm-axiom All database operations must go through this interface to ensure consistency and observability\n@llm-contract Provides technology-agnostic CRUD operations with automatic routing and optimization\n@llm-token persistence-manager: Core interface for unified database access",
    "context": "interface PersistenceManager {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/impl/PersistenceManagerImpl.kt",
    "line_number": 29,
    "element_name": "PersistenceManagerImpl",
    "language": "kotlin",
    "llm_type": "implementation",
    "llm_legend": "Main persistence manager implementation that orchestrates all database operations",
    "llm_key": "Central implementation that coordinates providers, routing, caching, and lifecycle management",
    "llm_map": "Core persistence platform implementation that provides unified access to all database technologies",
    "llm_axiom": "All persistence operations flow through this implementation for consistency and observability",
    "llm_contract": "Implements PersistenceManager interface with intelligent routing and multi-technology coordination",
    "llm_token": "persistence-manager-impl: Core persistence platform implementation",
    "llm_context": null,
    "raw_comment": "@llm-type implementation\n@llm-legend Main persistence manager implementation that orchestrates all database operations\n@llm-key Central implementation that coordinates providers, routing, caching, and lifecycle management\n@llm-map Core persistence platform implementation that provides unified access to all database technologies\n@llm-axiom All persistence operations flow through this implementation for consistency and observability\n@llm-contract Implements PersistenceManager interface with intelligent routing and multi-technology coordination\n@llm-token persistence-manager-impl: Core persistence platform implementation",
    "context": "class PersistenceManagerImpl : PersistenceManager {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/providers/RedisProvider.kt",
    "line_number": 35,
    "element_name": "RedisProvider",
    "language": "kotlin",
    "llm_type": "provider",
    "llm_legend": "Redis database provider for high-performance caching and session storage",
    "llm_key": "Implements DatabaseProvider interface for Redis with TTL support and pub/sub capabilities",
    "llm_map": "Redis provider for cache operations, session management, and real-time data storage",
    "llm_axiom": "All Redis operations must handle TTL and provide fast access patterns",
    "llm_contract": "Provides Redis-specific operations including caching, sessions, and pub/sub messaging",
    "llm_token": "redis-provider: High-performance Redis database provider implementation",
    "llm_context": null,
    "raw_comment": "@llm-type provider\n@llm-legend Redis database provider for high-performance caching and session storage\n@llm-key Implements DatabaseProvider interface for Redis with TTL support and pub/sub capabilities\n@llm-map Redis provider for cache operations, session management, and real-time data storage\n@llm-axiom All Redis operations must handle TTL and provide fast access patterns\n@llm-contract Provides Redis-specific operations including caching, sessions, and pub/sub messaging\n@llm-token redis-provider: High-performance Redis database provider implementation",
    "context": "class RedisProvider : DatabaseProvider {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/providers/ProviderRegistry.kt",
    "line_number": 25,
    "element_name": "ProviderRegistry",
    "language": "kotlin",
    "llm_type": "registry",
    "llm_legend": "Provider registry that manages all database technology providers and their lifecycle",
    "llm_key": "Central registry for creating, configuring, and managing database providers across all technologies",
    "llm_map": "Provider factory and lifecycle manager for all database technology implementations",
    "llm_axiom": "All database providers must be registered and managed through this registry",
    "llm_contract": "Provides provider creation, configuration, and lifecycle management for all database technologies",
    "llm_token": "provider-registry: Central database provider management and factory",
    "llm_context": null,
    "raw_comment": "@llm-type registry\n@llm-legend Provider registry that manages all database technology providers and their lifecycle\n@llm-key Central registry for creating, configuring, and managing database providers across all technologies\n@llm-map Provider factory and lifecycle manager for all database technology implementations\n@llm-axiom All database providers must be registered and managed through this registry\n@llm-contract Provides provider creation, configuration, and lifecycle management for all database technologies\n@llm-token provider-registry: Central database provider management and factory",
    "context": "class ProviderRegistry {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/providers/CockroachDBProvider.kt",
    "line_number": 35,
    "element_name": "CockroachDBProvider",
    "language": "kotlin",
    "llm_type": "provider",
    "llm_legend": "CockroachDB database provider for distributed SQL with ACID transactions",
    "llm_key": "Implements DatabaseProvider interface for CockroachDB with strong consistency and horizontal scaling",
    "llm_map": "CockroachDB provider for transactional data, financial records, and relational operations",
    "llm_axiom": "All CockroachDB operations must maintain ACID properties and strong consistency",
    "llm_contract": "Provides SQL operations with distributed transactions and automatic sharding",
    "llm_token": "cockroachdb-provider: Distributed SQL database provider implementation",
    "llm_context": null,
    "raw_comment": "@llm-type provider\n@llm-legend CockroachDB database provider for distributed SQL with ACID transactions\n@llm-key Implements DatabaseProvider interface for CockroachDB with strong consistency and horizontal scaling\n@llm-map CockroachDB provider for transactional data, financial records, and relational operations\n@llm-axiom All CockroachDB operations must maintain ACID properties and strong consistency\n@llm-contract Provides SQL operations with distributed transactions and automatic sharding\n@llm-token cockroachdb-provider: Distributed SQL database provider implementation",
    "context": "class CockroachDBProvider : DatabaseProvider {"
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/api/PersistenceApiServer.kt",
    "line_number": 42,
    "element_name": "PersistenceApiServer",
    "language": "kotlin",
    "llm_type": "api",
    "llm_legend": "Unified API server providing REST and gRPC endpoints for all persistence operations",
    "llm_key": "Central API gateway that routes requests to appropriate database technologies with authentication and rate limiting",
    "llm_map": "Unified API layer that abstracts database complexity behind consistent REST/gRPC endpoints",
    "llm_axiom": "All persistence operations must go through this API layer for consistency and security",
    "llm_contract": "Provides technology-agnostic REST/gRPC APIs with automatic routing and observability",
    "llm_token": "persistence-api-server: Unified API gateway for all database operations",
    "llm_context": null,
    "raw_comment": "@llm-type api-server\n@llm-legend Unified API server providing REST and gRPC endpoints for all persistence operations\n@llm-key Central API gateway that routes requests to appropriate database technologies with authentication and rate limiting\n@llm-map Unified API layer that abstracts database complexity behind consistent REST/gRPC endpoints\n@llm-axiom All persistence operations must go through this API layer for consistency and security\n@llm-contract Provides technology-agnostic REST/gRPC APIs with automatic routing and observability\n@llm-token persistence-api-server: Unified API gateway for all database operations",
    "context": "class PersistenceApiServer("
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/config/ConfigurationModels.kt",
    "line_number": 26,
    "element_name": "PersistenceConfiguration",
    "language": "kotlin",
    "llm_type": "config",
    "llm_legend": "Main persistence platform configuration loaded from YAML",
    "llm_key": "Root configuration object containing all platform settings and technology definitions",
    "llm_map": "Central configuration that drives all persistence platform behavior and routing decisions",
    "llm_axiom": "Configuration must be validated before platform initialization",
    "llm_contract": "Provides complete platform configuration including technologies, databases, and operations",
    "llm_token": "persistence-configuration: Complete platform configuration object",
    "llm_context": null,
    "raw_comment": "@llm-type config\n@llm-legend Main persistence platform configuration loaded from YAML\n@llm-key Root configuration object containing all platform settings and technology definitions\n@llm-map Central configuration that drives all persistence platform behavior and routing decisions\n@llm-axiom Configuration must be validated before platform initialization\n@llm-contract Provides complete platform configuration including technologies, databases, and operations\n@llm-token persistence-configuration: Complete platform configuration object",
    "context": "data class PersistenceConfiguration("
  },
  {
    "file_path": "platforms/persistence/src/main/kotlin/com/unhinged/persistence/lifecycle/DataLifecycleManager.kt",
    "line_number": 32,
    "element_name": "DataLifecycleManager",
    "language": "kotlin",
    "llm_type": "lifecycle",
    "llm_legend": "Data lifecycle manager that handles hot/warm/cold data tiering and retention policies",
    "llm_key": "Manages complete data lifecycle with automatic tiering, archival, and retention across all database technologies",
    "llm_map": "Central lifecycle management system that optimizes data placement and enforces retention policies",
    "llm_axiom": "All data must follow defined lifecycle policies for optimal performance and compliance",
    "llm_contract": "Provides automated data tiering, archival, retention, and cross-technology migration",
    "llm_token": "data-lifecycle-manager: Automated data lifecycle and tiering management",
    "llm_context": null,
    "raw_comment": "@llm-type lifecycle-manager\n@llm-legend Data lifecycle manager that handles hot/warm/cold data tiering and retention policies\n@llm-key Manages complete data lifecycle with automatic tiering, archival, and retention across all database technologies\n@llm-map Central lifecycle management system that optimizes data placement and enforces retention policies\n@llm-axiom All data must follow defined lifecycle policies for optimal performance and compliance\n@llm-contract Provides automated data tiering, archival, retention, and cross-technology migration\n@llm-token data-lifecycle-manager: Automated data lifecycle and tiering management",
    "context": "class DataLifecycleManager("
  },
  {
    "file_path": "generated/static_html/registry.js",
    "line_number": 5,
    "element_name": "unknown",
    "language": "typescript",
    "llm_type": "config",
    "llm_legend": "Global registry of static HTML files for browser navigation",
    "llm_key": "Auto-generated from filesystem scan, provides metadata for each HTML file",
    "llm_map": "Used by index.html and navigation components for file discovery",
    "llm_axiom": "Registry must be regenerated whenever HTML files are added/removed/modified",
    "llm_contract": "Provides consistent interface for file metadata and navigation",
    "llm_token": "unhinged-registry: Complete file registry for static HTML interface",
    "llm_context": null,
    "raw_comment": "@llm-type config\n@llm-legend Global registry of static HTML files for browser navigation\n@llm-key Auto-generated from filesystem scan, provides metadata for each HTML file\n@llm-map Used by index.html and navigation components for file discovery\n@llm-axiom Registry must be regenerated whenever HTML files are added/removed/modified\n@llm-contract Provides consistent interface for file metadata and navigation\n@llm-token unhinged-registry: Complete file registry for static HTML interface",
    "context": ""
  },
  {
    "file_path": "generated/static_html/registry.js",
    "line_number": 80,
    "element_name": "unknown",
    "language": "typescript",
    "llm_type": "config",
    "llm_legend": "Hierarchical file structure for table-of-contents navigation",
    "llm_key": "Auto-generated directory tree with file metadata for browser navigation",
    "llm_map": "Used by table-of-contents.html for dynamic file structure display",
    "llm_axiom": "File structure regenerated on every make start to reflect current filesystem",
    "llm_contract": "Provides nested directory structure with file metadata",
    "llm_token": "unhinged-file-structure: Complete directory tree for navigation",
    "llm_context": null,
    "raw_comment": "@llm-type config\n@llm-legend Hierarchical file structure for table-of-contents navigation\n@llm-key Auto-generated directory tree with file metadata for browser navigation\n@llm-map Used by table-of-contents.html for dynamic file structure display\n@llm-axiom File structure regenerated on every make start to reflect current filesystem\n@llm-contract Provides nested directory structure with file metadata\n@llm-token unhinged-file-structure: Complete directory tree for navigation",
    "context": ""
  }
]