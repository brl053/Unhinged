[
  {
    "file_path": "build/llm_integration.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "llm integration for enhanced build system with context generation",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does llm integration for enhanced build system with context generation",
    "context": ""
  },
  {
    "file_path": "build/cli.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.cli",
    "llm_does": "enhanced cli interface for the unhinged build system",
    "llm_rule": null,
    "raw_comment": "@llm-type service.cli\n@llm-does enhanced cli interface for the unhinged build system",
    "context": ""
  },
  {
    "file_path": "build/orchestrator.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.orchestrator",
    "llm_does": "polyglot build orchestration with dependency resolution and intelligent caching",
    "llm_rule": "builds must be deterministic and provide comprehensive error reporting",
    "raw_comment": "@llm-type service.orchestrator\n@llm-does polyglot build orchestration with dependency resolution and intelligent caching\n@llm-rule builds must be deterministic and provide comprehensive error reporting",
    "context": ""
  },
  {
    "file_path": "build/orchestrator.py",
    "line_number": 542,
    "element_name": "validate_build_configuration",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate build configuration at compile time\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler\nReturns list of validation errors that must be fixed before build",
    "context": "def validate_build_configuration(self) -> List[str]:"
  },
  {
    "file_path": "build/monitoring.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.monitor",
    "llm_does": "build performance monitoring and metrics collection system",
    "llm_rule": "performance monitoring must be lightweight and provide actionable insights",
    "raw_comment": "@llm-type service.monitor\n@llm-does build performance monitoring and metrics collection system\n@llm-rule performance monitoring must be lightweight and provide actionable insights",
    "context": ""
  },
  {
    "file_path": "build/developer_experience.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "developer experience enhancements for the enhanced build",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does developer experience enhancements for the enhanced build",
    "context": ""
  },
  {
    "file_path": "build/build.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.launcher",
    "llm_does": "main entry point for the unhinged build system",
    "llm_rule": "build system must be simple, fast, and provide clear feedback",
    "raw_comment": "@llm-type service.launcher\n@llm-does main entry point for the unhinged build system\n@llm-rule build system must be simple, fast, and provide clear feedback",
    "context": ""
  },
  {
    "file_path": "build/python/run.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.executor",
    "llm_does": "python environment operations and execution management",
    "llm_rule": "all execution must be reproducible and pipeline ready",
    "raw_comment": "@llm-type util.executor\n@llm-does python environment operations and execution management\n@llm-rule all execution must be reproducible and pipeline ready",
    "context": ""
  },
  {
    "file_path": "build/python/run.py",
    "line_number": 23,
    "element_name": "UnhingedPythonRunner",
    "language": "python",
    "llm_type": "util.executor",
    "llm_does": "centralized python execution engine for ml/ai etl",
    "llm_rule": "python execution must be reproducible, environment-aware, and big data ready",
    "raw_comment": "@llm-type util.executor\n@llm-does centralized python execution engine for ml/ai etl\n@llm-rule python execution must be reproducible, environment-aware, and big data ready",
    "context": "class UnhingedPythonRunner:"
  },
  {
    "file_path": "build/python/setup.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.setup",
    "llm_does": "python environment setup and dependency management for build system",
    "llm_rule": "python environment must be isolated and reproducible across platforms",
    "raw_comment": "@llm-type util.setup\n@llm-does python environment setup and dependency management for build system\n@llm-rule python environment must be isolated and reproducible across platforms",
    "context": ""
  },
  {
    "file_path": "build/python/setup.py",
    "line_number": 23,
    "element_name": "UnhingedPythonSetup",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "comprehensive python environment setup for ml/ai etl",
    "llm_rule": "environment setup must be reproducible, comprehensive, and failure-resistant",
    "raw_comment": "@llm-type config.build\n@llm-does comprehensive python environment setup for ml/ai etl\n@llm-rule environment setup must be reproducible, comprehensive, and failure-resistant",
    "context": "class UnhingedPythonSetup:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.tool",
    "llm_does": "llm context warming system for onboarding new",
    "llm_rule": null,
    "raw_comment": "@llm-type util.tool\n@llm-does llm context warming system for onboarding new",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 16,
    "element_name": "LLMContextWarmer",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "structured context summaries for new llm agents",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does structured context summaries for new llm agents",
    "context": "class LLMContextWarmer:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 35,
    "element_name": "generate_project_overview",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "comprehensive project overview from extracted comments",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does comprehensive project overview from extracted comments",
    "context": "def generate_project_overview(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 83,
    "element_name": "_extract_key_components",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "extract key system components with improved name",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does extract key system components with improved name",
    "context": "def _extract_key_components(self) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 119,
    "element_name": "paginate_comments",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "paginated access to all extracted comments for",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does paginated access to all extracted comments for",
    "context": "def paginate_comments(self, page: int = 1) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 151,
    "element_name": "_improve_element_name",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "improve element name detection from file paths",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does improve element name detection from file paths",
    "context": "def _improve_element_name(self, comment: Dict[str, Any]) -> str:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 173,
    "element_name": "_find_related_services",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "find related services through port references, api",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does find related services through port references, api",
    "context": "def _find_related_services(self, comment: Dict[str, Any]) -> List[str]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 225,
    "element_name": "_validate_context_completeness",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "validate that service and component comments have",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does validate that service and component comments have",
    "context": "def _validate_context_completeness(self, comments: List[Dict[str, Any]]) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 246,
    "element_name": "_generate_getting_started_section",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "generate getting started section with setup commands",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does generate getting started section with setup commands",
    "context": "def _generate_getting_started_section(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 274,
    "element_name": "_extract_dependency_information",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "extract dependency and build system information from",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does extract dependency and build system information from",
    "context": "def _extract_dependency_information(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 306,
    "element_name": "_validate_legend_completeness",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "validate that",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does validate that",
    "context": "def _validate_legend_completeness(self, comments: List[Dict[str, Any]]) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 340,
    "element_name": "generate_enhanced_project_overview",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "generate enhanced project overview addressing all llm",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does generate enhanced project overview addressing all llm",
    "context": "def generate_enhanced_project_overview(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "tdd test suite ensuring extraction and validation",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does tdd test suite ensuring extraction and validation",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 39,
    "element_name": "test_extract_llm_context_from_python",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test extraction of @llm-context from Python docstring.",
    "context": "def test_extract_llm_context_from_python(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 40,
    "element_name": "test_extract_llm_context_from_python",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "user requests",
    "llm_rule": null,
    "raw_comment": "\"\"\"\n@llm-type service.api\n@llm-does user requests\n\"\"\"\ndef process():\npass",
    "context": "def test_extract_llm_context_from_python(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 66,
    "element_name": "test_extract_llm_context_from_typescript",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test extraction of @llm-context from TypeScript JSDoc.",
    "context": "def test_extract_llm_context_from_typescript(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 67,
    "element_name": "test_extract_llm_context_from_typescript",
    "language": "python",
    "llm_type": "component.primitive",
    "llm_does": "react component for user authentication",
    "llm_rule": null,
    "raw_comment": "\"\"\"\n@llm-type component.primitive\n@llm-does react component for user authentication\n\"\"\"\nexport const AuthComponent = () => {\nreturn null;\n};",
    "context": "def test_extract_llm_context_from_typescript(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 86,
    "element_name": "test_parse_llm_tags_with_context",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test parsing of all tags including @llm-context.",
    "context": "def test_parse_llm_tags_with_context(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 87,
    "element_name": "test_parse_llm_tags_with_context",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "user input",
    "llm_rule": "never trust user input",
    "raw_comment": "@llm-type util.validator\n@llm-does user input\n@llm-rule never trust user input",
    "context": "def test_parse_llm_tags_with_context(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 133,
    "element_name": "test_validate_comment_with_context",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test validation accepts @llm-context.",
    "context": "def test_validate_comment_with_context(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 194,
    "element_name": "TestLLMContextWarmerImprovements",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test suite for llm context warmer improvements",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test suite for llm context warmer improvements",
    "context": "class TestLLMContextWarmerImprovements(unittest.TestCase):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 200,
    "element_name": "test_element_name_detection_from_service_path",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test element name extraction from services directory",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test element name extraction from services directory",
    "context": "def test_element_name_detection_from_service_path(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 230,
    "element_name": "test_element_name_detection_from_python_file",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test element name extraction from python file",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test element name extraction from python file",
    "context": "def test_element_name_detection_from_python_file(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 258,
    "element_name": "test_find_related_services_by_port_references",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test cross-reference detection between services using port",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test cross-reference detection between services using port",
    "context": "def test_find_related_services_by_port_references(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 302,
    "element_name": "test_context_completeness_validation",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test validation of context completeness for service",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test validation of context completeness for service",
    "context": "def test_context_completeness_validation(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 343,
    "element_name": "test_pagination_data_integrity",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test that pagination maintains complete data integrity",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test that pagination maintains complete data integrity",
    "context": "def test_pagination_data_integrity(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 403,
    "element_name": "TestLLMContextWarmerEnhancements",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test suite for final llm context warmer",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test suite for final llm context warmer",
    "context": "class TestLLMContextWarmerEnhancements(unittest.TestCase):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 409,
    "element_name": "test_getting_started_section_generation",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test generation of getting started section with",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test generation of getting started section with",
    "context": "def test_getting_started_section_generation(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 452,
    "element_name": "test_dependency_information_extraction",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test extraction of dependency and setup information",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test extraction of dependency and setup information",
    "context": "def test_dependency_information_extraction(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 488,
    "element_name": "test_complete_legend_validation",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test validation that legends are complete and",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test validation that legends are complete and",
    "context": "def test_complete_legend_validation(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 530,
    "element_name": "test_enhanced_overview_with_getting_started",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test that enhanced overview includes getting started",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test that enhanced overview includes getting started",
    "context": "def test_enhanced_overview_with_getting_started(self):"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.extractor",
    "llm_does": "llmdocs extraction and documentation generation from polyglot codebase",
    "llm_rule": "extraction must be comprehensive and handle all supported file types",
    "raw_comment": "@llm-type util.extractor\n@llm-does llmdocs extraction and documentation generation from polyglot codebase\n@llm-rule extraction must be comprehensive and handle all supported file types",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 126,
    "element_name": "_parse_llm_tags",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Parse @llm-* tags from comment text",
    "context": "def _parse_llm_tags(self, comment_text: str, file_path: str, line_number: int,"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 232,
    "element_name": "_parse_llm_tags",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Parse @llm-* tags from Python docstring",
    "context": "def _parse_llm_tags(self, comment_text: str, file_path: str, line_number: int,"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 541,
    "element_name": "extract_comments_from_file",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Extracts all @llm-* comments from a single source file using appropriate language parser\n@llm-context TDD interface function for testing individual file processing",
    "context": "def extract_comments_from_file(file_path: str) -> List[LLMComment]:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 562,
    "element_name": "extract_comments_from_codebase",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Extracts all @llm-* comments from entire codebase using multi-language parsers\n@llm-context TDD interface function for testing full codebase processing",
    "context": "def extract_comments_from_codebase(root_path: Path) -> List[LLMComment]:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 572,
    "element_name": "parse_llm_tags",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Parses individual @llm-* tags from comment text using regex patterns\n@llm-context TDD interface function for testing tag parsing logic",
    "context": "def parse_llm_tags(text: str) -> Dict[str, str]:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 597,
    "element_name": "save_extraction_results",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Saves extracted comments to JSON with metadata\n@llm-context TDD interface function for testing result serialization",
    "context": "def save_extraction_results(comments: List[LLMComment], output_path: Path) -> Dict:"
  },
  {
    "file_path": "build/docs-generation/generate-project-structure.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.generator",
    "llm_does": "project structure documentation generation from filesystem analysis",
    "llm_rule": "structure documentation must be accurate and reflect current state",
    "raw_comment": "@llm-type util.generator\n@llm-does project structure documentation generation from filesystem analysis\n@llm-rule structure documentation must be accurate and reflect current state",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "llmdocs validation and quality assurance for evolved format compliance",
    "llm_rule": "validation must enforce evolved format standards and provide actionable feedback",
    "raw_comment": "@llm-type util.validator\n@llm-does llmdocs validation and quality assurance for evolved format compliance\n@llm-rule validation must enforce evolved format standards and provide actionable feedback",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 286,
    "element_name": "validate_comment",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "individual comment for completeness and quality",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does individual comment for completeness and quality",
    "context": "def validate_comment(comment) -> List[Dict]:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 296,
    "element_name": "validate_all_comments",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "batch of comments and returns summary",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does batch of comments and returns summary",
    "context": "def validate_all_comments(comments: List) -> Dict:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 319,
    "element_name": "check_required_tags",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "comment has all required tags for its",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does comment has all required tags for its",
    "context": "def check_required_tags(comment) -> List[Dict]:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 344,
    "element_name": "check_tag_format",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "tag content meets quality standards",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does tag content meets quality standards",
    "context": "def check_tag_format(comment) -> List[Dict]:"
  },
  {
    "file_path": "build/docs-generation/llm_types.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "defines data structures and interfaces for llm",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does defines data structures and interfaces for llm",
    "context": ""
  },
  {
    "file_path": "build/tools/dead-code-analyzer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.analyzer",
    "llm_does": "dead code detection and removal recommendations across polyglot codebase",
    "llm_rule": "dead code analysis must be conservative to prevent accidental removal",
    "raw_comment": "@llm-type util.analyzer\n@llm-does dead code detection and removal recommendations across polyglot codebase\n@llm-rule dead code analysis must be conservative to prevent accidental removal",
    "context": ""
  },
  {
    "file_path": "build/tools/dead-code-analyzer.py",
    "line_number": 40,
    "element_name": "DeadCodeAnalyzer",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "main analyzer implementing multi-approach dead code detec...",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does main analyzer implementing multi-approach dead code detec...",
    "context": "class DeadCodeAnalyzer:"
  },
  {
    "file_path": "build/tools/cleanup-dead-code.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.cleaner",
    "llm_does": "automated dead code cleanup with safety checks and rollback capability",
    "llm_rule": "cleanup operations must be reversible and logged for safety",
    "raw_comment": "@llm-type util.cleaner\n@llm-does automated dead code cleanup with safety checks and rollback capability\n@llm-rule cleanup operations must be reversible and logged for safety",
    "context": ""
  },
  {
    "file_path": "build/tools/cleanup-dead-code.py",
    "line_number": 28,
    "element_name": "DeadCodeCleanup",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "safe cleanup implementation with backup and rollback",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does safe cleanup implementation with backup and rollback",
    "context": "class DeadCodeCleanup:"
  },
  {
    "file_path": "build/tools/llmdocs-evolution-engine.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "operations",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does operations",
    "context": ""
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.enforcer",
    "llm_does": "llmdocs enforcement and template generation for evolved format",
    "llm_rule": "all code files must have proper llmdocs tags for ai comprehension",
    "raw_comment": "@llm-type util.enforcer\n@llm-does llmdocs enforcement and template generation for evolved format\n@llm-rule all code files must have proper llmdocs tags for ai comprehension",
    "context": ""
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 17,
    "element_name": "LLMDocsEnforcer",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Enforces LLM documentation standards across all source files.\n\nValidates and injects @llm- headers into source files to ensure\nconsistent documentation for AI comprehension.",
    "context": "class LLMDocsEnforcer:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 45,
    "element_name": "scan_files",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Scan directories for source files requiring @llm- headers.",
    "context": "def scan_files(self, directories: List[str]) -> List[Path]:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 67,
    "element_name": "_should_process_file",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Determine if file should be processed for @llm- headers.",
    "context": "def _should_process_file(self, file_path: Path) -> bool:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 86,
    "element_name": "validate_file",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate if file has proper @llm- headers.",
    "context": "def validate_file(self, file_path: Path) -> Tuple[bool, List[str]]:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 103,
    "element_name": "inject_headers",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Inject @llm- headers into file if missing.",
    "context": "def inject_headers(self, file_path: Path, file_type: str = None) -> bool:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 141,
    "element_name": "_generate_header",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Generate appropriate @llm- header for file.",
    "context": "def _generate_header(self, file_path: Path, file_type: str) -> str:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 166,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "{llm_type}",
    "llm_does": "{purpose}",
    "llm_rule": null,
    "raw_comment": "@llm-type {llm_type}\n@llm-does {purpose}",
    "context": ""
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 171,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "{llm_type}",
    "llm_does": "{purpose}",
    "llm_rule": null,
    "raw_comment": "{line_comment} @llm-type {llm_type}\n{line_comment} @llm-does {purpose}",
    "context": ""
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 177,
    "element_name": "enforce_compliance",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Enforce @llm- documentation compliance across directories.",
    "context": "def enforce_compliance(self, directories: List[str], fix: bool = False) -> bool:"
  },
  {
    "file_path": "build/ci/ci-config.yml",
    "line_number": 1,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "config.app",
    "llm_does": "ci/cd pipeline configuration integrating with enhanced build",
    "llm_rule": null,
    "raw_comment": "@llm-type config.app\n@llm-does ci/cd pipeline configuration integrating with enhanced build",
    "context": "version: \"1.0\""
  },
  {
    "file_path": "build/ci/scripts/build-verification.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Build Verification Script for CI/CD Pipeline\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nComprehensive build verification that integrates with the enhanced build system.\nValidates builds, dependencies, and system integrity before deployment.\n\n## Features\n- Integration with build/orchestrator.py\n- Intelligent caching validation\n- Parallel build execution\n- Comprehensive error reporting\n- Performance metrics collection\n\n@llm-principle Reliable build verification with enhanced build system integration\n@llm-culture Independence through comprehensive automated validation",
    "context": ""
  },
  {
    "file_path": "build/ci/scripts/build-verification.py",
    "line_number": 44,
    "element_name": "BuildVerificationRunner",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Build verification runner with enhanced build integration\n\nCoordinates build verification using the existing enhanced build system\nwhile providing CI/CD specific validation and reporting.",
    "context": "class BuildVerificationRunner:"
  },
  {
    "file_path": "build/orchestration/docker-compose.production.yml",
    "line_number": 1,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "config.build",
    "llm_does": "production docker-compose with unified service definitions",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does production docker-compose with unified service definitions",
    "context": "version: '3.8'"
  },
  {
    "file_path": "build/orchestration/docker-compose.development.yml",
    "line_number": 1,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "config.build",
    "llm_does": "development docker-compose with debug tools and hot-reload",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does development docker-compose with debug tools and hot-reload",
    "context": "version: '3.8'"
  },
  {
    "file_path": "build/config/build-config.yml",
    "line_number": 1,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "config.app",
    "llm_does": "main build configuration for unhinged platform",
    "llm_rule": null,
    "raw_comment": "@llm-type config.app\n@llm-does main build configuration for unhinged platform",
    "context": "version: \"1.0\""
  },
  {
    "file_path": "build/modules/typescript_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.builder",
    "llm_does": "typescript/npm builds with webpack optimization and hot reloading",
    "llm_rule": null,
    "raw_comment": "@llm-type service.builder\n@llm-does typescript/npm builds with webpack optimization and hot reloading",
    "context": ""
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "static html registry generation module for control",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does static html registry generation module for control",
    "context": ""
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 25,
    "element_name": "RegistryBuilder",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "javascript registry of static html files for",
    "llm_rule": "registry must be generated before browser access to ensure accurate file disc...",
    "raw_comment": "@llm-type config.build\n@llm-does javascript registry of static html files for\n@llm-rule registry must be generated before browser access to ensure accurate file disc...",
    "context": "class RegistryBuilder(BuildModule):"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 36,
    "element_name": "can_handle",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "determines if this module can handle the",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does determines if this module can handle the",
    "context": "def can_handle(self, context: BuildContext) -> bool:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 47,
    "element_name": "get_dependencies",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "returns list of files that affect registry",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does returns list of files that affect registry",
    "context": "def get_dependencies(self, context: BuildContext) -> List[str]:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 62,
    "element_name": "calculate_cache_key",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "content-based cache key for registry generation",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does content-based cache key for registry generation",
    "context": "def calculate_cache_key(self, context: BuildContext) -> str:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 86,
    "element_name": "extract_html_metadata",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "extracts title, description, and metadata from html",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does extracts title, description, and metadata from html",
    "context": "def extract_html_metadata(self, file_path: Path) -> Dict[str, any]:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 151,
    "element_name": "scan_static_html_directory",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "recursively scans control/static_html for html files and",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does recursively scans control/static_html for html files and",
    "context": "def scan_static_html_directory(self, project_root: Path) -> Dict[str, Dict]:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 176,
    "element_name": "build_file_structure",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "hierarchical file structure for table-of-contents navigation",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does hierarchical file structure for table-of-contents navigation",
    "context": "def build_file_structure(self, project_root: Path) -> Dict:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 240,
    "element_name": "generate_registry_js",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "javascript registry file with helper functions and",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does javascript registry file with helper functions and",
    "context": "def generate_registry_js(self, registry: Dict[str, Dict], file_structure: Dict = None) -> str:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 244,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "model.config",
    "llm_does": "global registry of static html files for",
    "llm_rule": "registry must be regenerated whenever html files are added/removed/modified",
    "raw_comment": "// Generated at: {datetime.now().isoformat()}\n// Run 'make start' to regenerate\n\n\"\"\"\n@llm-type model.config\n@llm-does global registry of static html files for\n@llm-rule registry must be regenerated whenever html files are added/removed/modified\n\"\"\"\nwindow.UNHINGED_REGISTRY = {json.dumps(registry, indent=2)};\n\n\"\"\"\n@llm-type model.config\n@llm-does hierarchical file structure for table-of-contents navigation\n\"\"\"\nwindow.UNHINGED_FILE_STRUCTURE = {json.dumps(file_structure or {}, indent=2)};\n\n// Helper functions for registry access\nwindow.getRegistryEntry = function(path) {{\nreturn window.UNHINGED_REGISTRY[path] || null;\n}};\n\nwindow.getAllFiles = function() {{\nreturn Object.keys(window.UNHINGED_REGISTRY);\n}};\n\nwindow.getFilesByCategory = function(category) {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => meta.category === category)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\nwindow.getExistingFiles = function() {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => meta.exists)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\nwindow.getMissingFiles = function() {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => !meta.exists)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\n// Kawaii ASCII TOC generator\nwindow.generateKawaiiTOC = function() {{\nconst existing = window.getExistingFiles();\nconst missing = window.getMissingFiles();\n\nlet toc = `\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502  \ud83c\udf38 Unhinged Static HTML Files \ud83c\udf38  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\ud83d\udcc1 control/static_html/\n`;\n\nexisting.forEach(file => {{\ntoc += `  \u2705 ${{file.title}}\\\\n`;\ntoc += `     \ud83d\udcc4 ${{file.path.split('/').pop()}}\\\\n`;\nif (file.description) {{\ntoc += `     \ud83d\udcad ${{file.description}}\\\\n`;\n}}\ntoc += `\\\\n`;\n}});\n\nif (missing.length > 0) {{\ntoc += `\\\\n\ud83d\udea8 Missing Files:\\\\n`;\nmissing.forEach(file => {{\ntoc += `  \u274c ${{file.title}}\\\\n`;\ntoc += `     \ud83d\udcc4 ${{file.path.split('/').pop()}}\\\\n`;\ntoc += `     \ud83d\udcad File not found - please create!\\\\n\\\\n`;\n}});\n}}\n\nreturn toc;\n}};\n\n// Helper functions for file structure access\nwindow.getFileStructure = function() {{\nreturn window.UNHINGED_FILE_STRUCTURE;\n}};\n\nwindow.getDirectoryContents = function(path) {{\nconst parts = path.split('/').filter(p => p);\nlet current = window.UNHINGED_FILE_STRUCTURE;\n\nfor (const part of parts) {{\nif (current && current[part] && current[part].children) {{\ncurrent = current[part].children;\n}} else {{\nreturn null;\n}}\n}}\n\nreturn current;\n}};\n\nwindow.findFilesByPattern = function(pattern) {{\nconst regex = new RegExp(pattern, 'i');\nconst results = [];\n\nfunction searchTree(node, path = '') {{\nif (!node || typeof node !== 'object') return;\n\nObject.entries(node).forEach(([name, item]) => {{\nconst fullPath = path ? `${{path}}/${{name}}` : name;\n\nif (item.type === 'file' && regex.test(name)) {{\nresults.push({{\npath: fullPath,\nname: name,\n...item\n}});\n}} else if (item.type === 'directory' && item.children) {{\nsearchTree(item.children, fullPath);\n}}\n}});\n}}\n\nsearchTree(window.UNHINGED_FILE_STRUCTURE);\nreturn results;\n}};\n\nconsole.log('\ud83d\udccb Unhinged Registry loaded with', Object.keys(window.UNHINGED_REGISTRY).length, 'files');\nconsole.log('\ud83d\uddc2\ufe0f File structure loaded with', Object.keys(window.UNHINGED_FILE_STRUCTURE).length, 'root directories');",
    "context": ""
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 375,
    "element_name": "build",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "main build function that generates the static",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does main build function that generates the static",
    "context": "def build(self, context: BuildContext) -> BuildModuleResult:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 444,
    "element_name": "clean",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "removes generated registry.js file",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does removes generated registry.js file",
    "context": "def clean(self, context: BuildContext) -> bool:"
  },
  {
    "file_path": "build/modules/proto_client_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "proto-to-polyglot client library generation module using ...",
    "llm_rule": "client libraries must be generated before service compilation and provide typ...",
    "raw_comment": "@llm-type config.build\n@llm-does proto-to-polyglot client library generation module using ...\n@llm-rule client libraries must be generated before service compilation and provide typ...",
    "context": ""
  },
  {
    "file_path": "build/modules/proto_client_builder.py",
    "line_number": 31,
    "element_name": "ProtoClientBuilder",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "polyglot protobuf client generation using unified dry",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does polyglot protobuf client generation using unified dry",
    "context": "class ProtoClientBuilder(BuildModule):"
  },
  {
    "file_path": "build/modules/typescript_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "typescript protobuf client generation handler with grpc-web",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does typescript protobuf client generation handler with grpc-web",
    "context": ""
  },
  {
    "file_path": "build/modules/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.framework",
    "llm_does": "build module framework with abstract base classes and registry",
    "llm_rule": null,
    "raw_comment": "@llm-type service.framework\n@llm-does build module framework with abstract base classes and registry",
    "context": ""
  },
  {
    "file_path": "build/modules/__init__.py",
    "line_number": 229,
    "element_name": "validate_build_patterns",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "validate build system patterns and cultural commandments",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does validate build system patterns and cultural commandments",
    "context": "def validate_build_patterns(repo_root: Path) -> List[str]:"
  },
  {
    "file_path": "build/modules/c_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.builder",
    "llm_does": "c/c++ builds with cmake integration and SIMD optimization",
    "llm_rule": "c builds must be deterministic and provide direct cpu instruction access",
    "raw_comment": "@llm-type service.builder\n@llm-does c/c++ builds with cmake integration and SIMD optimization\n@llm-rule c builds must be deterministic and provide direct cpu instruction access",
    "context": ""
  },
  {
    "file_path": "build/modules/python_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.builder",
    "llm_does": "python builds with virtual environment and dependency management",
    "llm_rule": null,
    "raw_comment": "@llm-type service.builder\n@llm-does python builds with virtual environment and dependency management",
    "context": ""
  },
  {
    "file_path": "build/modules/python_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "python protobuf client generation handler for ai/ml",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does python protobuf client generation handler for ai/ml",
    "context": ""
  },
  {
    "file_path": "build/modules/service_discovery_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.builder",
    "llm_does": "service discovery registry generation from docker-compose and proto files",
    "llm_rule": "service discovery must happen at build time for dashboard consistency",
    "raw_comment": "@llm-type service.builder\n@llm-does service discovery registry generation from docker-compose and proto files\n@llm-rule service discovery must happen at build time for dashboard consistency",
    "context": ""
  },
  {
    "file_path": "build/modules/service_discovery_builder.py",
    "line_number": 26,
    "element_name": "ServiceDiscoveryBuilder",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "build-time service discovery module following existing bu...",
    "llm_rule": "service registry must be generated before html dashboard access",
    "raw_comment": "@llm-type config.build\n@llm-does build-time service discovery module following existing bu...\n@llm-rule service registry must be generated before html dashboard access",
    "context": "class ServiceDiscoveryBuilder(BuildModule):"
  },
  {
    "file_path": "build/modules/dual_system_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "dual-system desktop application build module for ci/cd",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does dual-system desktop application build module for ci/cd",
    "context": ""
  },
  {
    "file_path": "build/modules/kotlin_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "kotlin protobuf client generation handler for jvm",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does kotlin protobuf client generation handler for jvm",
    "context": ""
  },
  {
    "file_path": "build/modules/polyglot_proto_engine.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.builder",
    "llm_does": "polyglot protobuf client generation for multiple languages",
    "llm_rule": null,
    "raw_comment": "@llm-type service.builder\n@llm-does polyglot protobuf client generation for multiple languages",
    "context": ""
  },
  {
    "file_path": "build/modules/polyglot_proto_engine.py",
    "line_number": 150,
    "element_name": "PolyglotProtoEngine",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "unified engine for generating protobuf clients across",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does unified engine for generating protobuf clients across",
    "context": "class PolyglotProtoEngine:"
  },
  {
    "file_path": "build/modules/c_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "c/c++ protobuf client generation handler for high-perform...",
    "llm_rule": "c++ proto clients must provide maximum performance for system-level services",
    "raw_comment": "@llm-type config.build\n@llm-does c/c++ protobuf client generation handler for high-perform...\n@llm-rule c++ proto clients must provide maximum performance for system-level services",
    "context": ""
  },
  {
    "file_path": "build/modules/kotlin_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.builder",
    "llm_does": "kotlin/gradle builds with incremental compilation and parallel execution",
    "llm_rule": "gradle builds must be deterministic and support incremental compilation",
    "raw_comment": "@llm-type service.builder\n@llm-does kotlin/gradle builds with incremental compilation and parallel execution\n@llm-rule gradle builds must be deterministic and support incremental compilation",
    "context": ""
  },
  {
    "file_path": "build/validators/port_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "port conflict detection and auto-resolution across docker-compose files",
    "llm_rule": "port conflicts must be resolved at build time, never at runtime",
    "raw_comment": "@llm-type util.validator\n@llm-does port conflict detection and auto-resolution across docker-compose files\n@llm-rule port conflicts must be resolved at build time, never at runtime",
    "context": ""
  },
  {
    "file_path": "build/validators/port_validator.py",
    "line_number": 61,
    "element_name": "validate_project",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate all port allocations in the project\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler",
    "context": "def validate_project(self) -> List[PortConflict]:"
  },
  {
    "file_path": "build/validators/resource_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "resource allocation validation for memory, disk, and cpu limits",
    "llm_rule": "resource allocation must be validated at build time to prevent runtime failures",
    "raw_comment": "@llm-type util.validator\n@llm-does resource allocation validation for memory, disk, and cpu limits\n@llm-rule resource allocation must be validated at build time to prevent runtime failures",
    "context": ""
  },
  {
    "file_path": "build/validators/resource_validator.py",
    "line_number": 40,
    "element_name": "validate_resources",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate all resource requirements in the project\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler",
    "context": "def validate_resources(self) -> List[ResourceIssue]:"
  },
  {
    "file_path": "build/validators/kotlin_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "kotlin-specific validation for build patterns and code",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does kotlin-specific validation for build patterns and code",
    "context": ""
  },
  {
    "file_path": "build/validators/kotlin_validator.py",
    "line_number": 13,
    "element_name": "KotlinValidator",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "kotlin-specific validation for build patterns and code",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does kotlin-specific validation for build patterns and code",
    "context": "class KotlinValidator(BaseValidator):"
  },
  {
    "file_path": "build/validators/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.validator",
    "llm_does": "compile-time validation system preventing runtime errors",
    "llm_rule": null,
    "raw_comment": "@llm-type service.validator\n@llm-does compile-time validation system preventing runtime errors",
    "context": ""
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "polyglot validation system for enforcing unhinged codebase",
    "llm_rule": "all validation must be fast, parallel, actionable, and educational",
    "raw_comment": "@llm-type config.build\n@llm-does polyglot validation system for enforcing unhinged codebase\n@llm-rule all validation must be fast, parallel, actionable, and educational",
    "context": ""
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 24,
    "element_name": "ValidationResult",
    "language": "python",
    "llm_type": "model.entity",
    "llm_does": "result from a validation check with severity,",
    "llm_rule": null,
    "raw_comment": "@llm-type model.entity\n@llm-does result from a validation check with severity,",
    "context": "class ValidationResult:"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 39,
    "element_name": "ValidationSummary",
    "language": "python",
    "llm_type": "model.entity",
    "llm_does": "summary of all validation results with metrics",
    "llm_rule": null,
    "raw_comment": "@llm-type model.entity\n@llm-does summary of all validation results with metrics",
    "context": "class ValidationSummary:"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 53,
    "element_name": "BaseValidator",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "abstract base class for all validators in",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does abstract base class for all validators in",
    "context": "class BaseValidator(ABC):"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 81,
    "element_name": "FilePatternValidator",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "file creation patterns and prevents scattered cruft",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does file creation patterns and prevents scattered cruft",
    "context": "class FilePatternValidator(BaseValidator):"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 201,
    "element_name": "GeneratedContentValidator",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "that generated content is properly located in",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does that generated content is properly located in",
    "context": "class GeneratedContentValidator(BaseValidator):"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 240,
    "element_name": "PolyglotValidationRunner",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "main validation runner that coordinates all validators",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does main validation runner that coordinates all validators",
    "context": "class PolyglotValidationRunner:"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 279,
    "element_name": "run_validation",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "run all validators in parallel and return",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does run all validators in parallel and return",
    "context": "async def run_validation(self, auto_fix: bool = False) -> ValidationSummary:"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 340,
    "element_name": "main",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "main entry point for polyglot validation system",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does main entry point for polyglot validation system",
    "context": "async def main():"
  },
  {
    "file_path": "build/validators/dependency_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "dependency validation and conflict resolution across package managers",
    "llm_rule": "dependency conflicts must be resolved at build time to prevent runtime failures",
    "raw_comment": "@llm-type util.validator\n@llm-does dependency validation and conflict resolution across package managers\n@llm-rule dependency conflicts must be resolved at build time to prevent runtime failures",
    "context": ""
  },
  {
    "file_path": "build/validators/dependency_validator.py",
    "line_number": 37,
    "element_name": "validate_dependencies",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate all service dependencies in the project\n\n@llm-future This becomes part of Unhinged OS service orchestration compiler",
    "context": "def validate_dependencies(self) -> List[DependencyIssue]:"
  },
  {
    "file_path": "build/validators/python_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "python-specific validation for code quality, imports, and",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does python-specific validation for code quality, imports, and",
    "context": ""
  },
  {
    "file_path": "build/validators/python_validator.py",
    "line_number": 14,
    "element_name": "PythonValidator",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "python-specific validation for code quality and unhinged",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does python-specific validation for code quality and unhinged",
    "context": "class PythonValidator(BaseValidator):"
  },
  {
    "file_path": "build/validators/python_validator.py",
    "line_number": 241,
    "element_name": "PythonFormatterValidator",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "python code formatting validation using black and",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does python code formatting validation using black and",
    "context": "class PythonFormatterValidator(BaseValidator):"
  },
  {
    "file_path": "vm/testing/communication-tests/test-simple-communication.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "component",
    "llm_does": "system component",
    "llm_rule": null,
    "raw_comment": "@llm-type component\n@llm-does system component",
    "context": ""
  },
  {
    "file_path": "vm/testing/communication-tests/test-simple-communication.py",
    "line_number": 6,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Test Simple VM Communication Pipeline\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nTests the simplified VM communication pipeline to ensure:\n1. VM console output is visible in host terminal\n2. Communication is reliable and real-time\n3. VM status messages reach the host\n\n## Test Scenarios\n- VM boot messages \u2192 Host terminal\n- Unhinged status updates \u2192 Host terminal\n- Error messages \u2192 Host terminal\n- Graceful shutdown \u2192 Host terminal\n\n@llm-principle Test unidirectional communication reliability\n@llm-culture Verify independence through isolated VM communication",
    "context": ""
  },
  {
    "file_path": "vm/testing/communication-tests/test-enhanced-communication.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "component",
    "llm_does": "system component",
    "llm_rule": null,
    "raw_comment": "@llm-type component\n@llm-does system component",
    "context": ""
  },
  {
    "file_path": "vm/testing/communication-tests/test-enhanced-communication.py",
    "line_number": 6,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Test Enhanced VM Communication System\n@llm-version 2.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nComprehensive test suite for the enhanced VM communication system.\nTests both Phase 1 (unidirectional) and Phase 2 (bidirectional) communication.\n\n## Test Coverage\n- Simple VM launcher functionality\n- Enhanced VM launcher with bidirectional communication\n- QoL launcher with Makefile integration\n- Build system preservation\n- Communication protocol validation\n\n@llm-principle Test all communication modes thoroughly\n@llm-culture Verify independence through comprehensive validation",
    "context": ""
  },
  {
    "file_path": "vm/testing/integration-tests/test-complete-system.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "component",
    "llm_does": "system component",
    "llm_rule": null,
    "raw_comment": "@llm-type component\n@llm-does system component",
    "context": ""
  },
  {
    "file_path": "vm/docs/unhinged-os-architecture.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "architecture.system/unhinged-os-design",
    "llm_does": "UnhingedOS system architecture documentation and design specifications for voice-first operating system built on Alpine Linux foundation",
    "llm_rule": null,
    "raw_comment": "@llm-does UnhingedOS system architecture documentation and design specifications for voice-first operating system built on Alpine Linux foundation\n@llm-type architecture.system/unhinged-os-design\n@llm-context UnhingedOS Architecture & Vision: UnhingedOS represents a paradigm shift from traditional desktop computing to voice-first interaction. Complete operating system where voice is primary interface, visual elements serve as feedback mechanisms, optimized for natural conversational computing. High-Level Architecture: Host System containing UnhingedOS VM with Voice Interface Layer, Native Graphics Stack, Boot System over Alpine Linux Base, connected via 9p virtio Communication. Core Components: (1) Alpine Linux Foundation - Alpine Linux 3.22.2 base system, APK package manager with minimal package set, OpenRC init system for service management, hardened kernel with minimal attack surface, 64MB base footprint, (2) Voice Interface Layer - natural language command processing, integrated speech-to-text engine, text-to-speech feedback system, intent recognition and action mapping, conversation state and history management, (3) Native Graphics Stack - direct hardware access via DRM/framebuffer without abstraction, SIMD-optimized rendering (AVX2, NEON, SSE4.2), zero-allocation memory pool management, hardware-accelerated compositing, custom graphics library with performance optimization, (4) Boot System - custom boot sequence optimized for voice-first interaction, service orchestration for voice components, hardware detection and initialization, graphics system startup coordination, (5) Communication Layer - 9p virtio filesystem for host-VM communication, secure data exchange protocols, shared directory mounting, bidirectional message passing, (6) Security Architecture - complete VM isolation boundary, minimal attack surface through Alpine base, secure communication protocols, memory safety in native C components, reproducible build process. Technical Specifications: Base System (Alpine Linux 3.22.2, musl libc, BusyBox utilities, OpenRC init), Voice Processing (speech recognition engine, natural language processing, voice synthesis, audio device management), Graphics Rendering (direct framebuffer access, DRM driver integration, SIMD optimization, memory management), Virtualization (QEMU/KVM hypervisor, hardware acceleration, 9p virtio filesystem, network isolation), Development (systematic build pipeline, profile-based configuration, comprehensive testing framework, reproducible builds). Performance Characteristics: Boot time under 10 seconds, voice response latency under 200ms, memory footprint 64-512MB depending on profile, graphics rendering 60+ FPS, minimal CPU overhead for voice processing.",
    "context": ""
  },
  {
    "file_path": "vm/docs/unhinged-os-development.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "development.workflow/unhinged-os-development",
    "llm_does": "UnhingedOS development workflow documentation with testing framework, image management, and contributing guidelines",
    "llm_rule": null,
    "raw_comment": "@llm-does UnhingedOS development workflow documentation with testing framework, image management, and contributing guidelines\n@llm-type development.workflow/unhinged-os-development\n@llm-context UnhingedOS Development Workflow: Complete development environment for voice-first operating system. Testing Framework Structure: (1) boot-tests/ - Boot sequence and initialization validation (boot time measurement, service startup verification, hardware detection testing, init system validation, kernel parameter testing), (2) graphics-tests/ - Native graphics system validation (framebuffer functionality, DRM driver testing, SIMD optimization validation, memory pool testing, rendering correctness), (3) voice-tests/ - Voice interface system validation (speech recognition accuracy, voice synthesis quality, command processing latency, natural language understanding, audio device compatibility), (4) integration-tests/ - Full system integration testing (end-to-end workflow validation, component interaction testing, system resource usage, multi-service coordination, real-world scenario testing), (5) performance-tests/ - System performance benchmarking (boot time benchmarks, memory usage profiling, CPU utilization analysis, voice latency measurement, graphics performance testing), (6) system-tests/ - Core system functionality testing (file system operations, process management, network connectivity, service management). Image Management: Systematic VM image naming with unhinged-os-{profile}.{format} conventions, Image lifecycle management (build process, image operations, testing & validation), Version management (versioned backups, symlink management, archival strategies), Storage optimization (compression, cleanup procedures). Runtime Artifacts: images/ (QCOW2 virtual machine disk images), isos/ (bootable ISO images), shared/ (host-VM communication interfaces). Development Guidelines: Voice-First principle (all features must support voice interaction), Minimal Overhead (justify every dependency and service), Native Performance (prefer C implementations over frameworks), Security by Design (consider isolation and attack surface), Reproducible builds (all builds must be deterministic). Contributing Workflow: identify category for new components, follow consistent naming and structure, document changes in relevant files, test integration with build system. Component Dependencies: alpine-base (foundation for all other components), boot-system (depends on alpine-base, initializes other layers), graphics-stack (independent native C implementation), unhinged-layer (depends on all other components). Security Model: VM isolation through complete hardware virtualization boundary, minimal attack surface via Alpine Linux minimal base, secure communication through controlled host-VM data exchange, memory safety via native C with careful memory management, reproducible builds through deterministic build process.",
    "context": ""
  },
  {
    "file_path": "vm/docs/unhinged-os-build-system.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build.documentation/unhinged-os-build-system",
    "llm_does": "UnhingedOS build system documentation with comprehensive build instructions, profile specifications, and development workflow",
    "llm_rule": null,
    "raw_comment": "@llm-does UnhingedOS build system documentation with comprehensive build instructions, profile specifications, and development workflow\n@llm-type build.documentation/unhinged-os-build-system\n@llm-context UnhingedOS Build System: Transforms source components into bootable operating system images through systematic, profile-based approach. Build Pipeline: Source Components (os/ directory) \u2192 Profile Selection (build/profiles/) \u2192 Alpine Customization (package selection) \u2192 ISO Generation (bootable ISO) \u2192 VM Image (QCOW2 format). Directory Structure: os/ (alpine-base - Base Alpine Linux components, unhinged-layer - UnhingedOS-specific layer, boot-system - Boot and init system, graphics-stack - Native graphics system), build/ (unhinged-os-builder.sh - Master OS builder, os-configurator.sh - OS configuration script, profiles/ - Build profiles for minimal/desktop/server/dev), runtime/ (images/ - VM disk images .qcow2, isos/ - Bootable ISOs, shared/ - Host-VM communication), testing/ (boot-tests - Boot sequence validation, graphics-tests - Graphics system testing, integration-tests - Full system testing). Build Profiles: (1) Minimal Profile (64MB RAM) - Alpine Linux base 32MB, Voice interface engine 16MB, Basic graphics stack 16MB, Essential services only, Use cases: embedded systems, IoT devices, resource-constrained environments, voice-only interfaces, (2) Desktop Profile (256MB RAM) - Complete voice interface 64MB, Full graphics stack with compositing 128MB, Desktop services and utilities 64MB, Multi-application support, Use cases: primary desktop replacement, voice-controlled workstations, accessibility-focused computing, demonstration systems, (3) Server Profile (128MB RAM) - Voice processing engine 96MB, Network services 16MB, Minimal graphics 16MB, Server utilities, Use cases: voice processing backend, API server for voice services, distributed voice computing, cloud deployments, (4) Development Profile (512MB RAM) - Complete development toolchain 256MB, Debugging and profiling tools 128MB, Full graphics and voice stack 128MB, Use cases: UnhingedOS development, system debugging, performance analysis, research platform. Build Commands: make unhinged-os-minimal (core voice-first OS), make unhinged-os-desktop (full desktop environment), make unhinged-os-server (headless server variant), make unhinged-os-dev (development environment). Development Workflow: source development in os/, build process with build/ tools, comprehensive testing in testing/, deployment artifacts in runtime/. Build Configuration: profile-based package selection, service configuration, kernel customization, system optimization, image generation with bootable ISO creation, QCOW2 VM image generation, optimization and compression, artifact placement in runtime/.",
    "context": ""
  },
  {
    "file_path": "services/shared/__init__.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.shared",
    "llm_does": "shared service utilities and base classes for",
    "llm_rule": "shared service code must be simple, reusable, and eliminate duplication",
    "raw_comment": "@llm-type service.shared\n@llm-does shared service utilities and base classes for\n@llm-rule shared service code must be simple, reusable, and eliminate duplication",
    "context": ""
  },
  {
    "file_path": "services/shared/paths.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.util",
    "llm_does": "shared utilities for service path management and",
    "llm_rule": "service utilities must be simple, reusable, and eliminate path hardcoding",
    "raw_comment": "@llm-type service.util\n@llm-does shared utilities for service path management and\n@llm-rule service utilities must be simple, reusable, and eliminate path hardcoding",
    "context": ""
  },
  {
    "file_path": "services/shared/paths.py",
    "line_number": 75,
    "element_name": "ServicePaths",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "service path manager providing standardized directory access",
    "llm_rule": "service paths must be consistent, predictable, and environment-agnostic",
    "raw_comment": "@llm-type service.api\n@llm-does service path manager providing standardized directory access\n@llm-rule service paths must be consistent, predictable, and environment-agnostic",
    "context": "class ServicePaths:"
  },
  {
    "file_path": "services/speech-to-text/simple_whisper_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "simple whisper http server for voice transcription",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does simple whisper http server for voice transcription",
    "context": ""
  },
  {
    "file_path": "services/speech-to-text/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "__init__.py - microservice component",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does __init__.py - microservice component",
    "context": ""
  },
  {
    "file_path": "services/speech-to-text/main.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.launcher",
    "llm_does": "speech-to-text service launcher with grpc health.proto im...",
    "llm_rule": null,
    "raw_comment": "@llm-type service.launcher\n@llm-does speech-to-text service launcher with grpc health.proto im...",
    "context": ""
  },
  {
    "file_path": "services/speech-to-text/grpc_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "speech-to-text grpc server with health.proto implementation",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does speech-to-text grpc server with health.proto implementation",
    "context": ""
  },
  {
    "file_path": "services/text-to-speech/main.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.launcher",
    "llm_does": "text-to-speech service launcher with grpc health.proto im...",
    "llm_rule": null,
    "raw_comment": "@llm-type service.launcher\n@llm-does text-to-speech service launcher with grpc health.proto im...",
    "context": ""
  },
  {
    "file_path": "services/text-to-speech/grpc_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "text-to-speech grpc server with health.proto implementation",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does text-to-speech grpc server with health.proto implementation",
    "context": ""
  },
  {
    "file_path": "services/vision-ai/main.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.launcher",
    "llm_does": "vision ai service launcher with grpc health.proto",
    "llm_rule": null,
    "raw_comment": "@llm-type service.launcher\n@llm-does vision ai service launcher with grpc health.proto",
    "context": ""
  },
  {
    "file_path": "services/vision-ai/grpc_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "vision ai grpc server with health.proto implementation",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does vision ai grpc server with health.proto implementation",
    "context": ""
  },
  {
    "file_path": "control/enhanced_vm_launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced VM Launcher with Bidirectional Communication\n@llm-version 2.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nEnhanced VM launcher that extends simple_vm_launcher.py with bidirectional\ncommunication capabilities while maintaining the same reliability.\n\n## Communication Channels\n- **VM \u2192 Host**: Serial console output (inherited from simple launcher)\n- **Host \u2192 VM**: QEMU monitor socket for sending commands\n- **Protocol**: Structured JSON messages with fallback to plain text\n\n## Design Principles\n- **Backward Compatible**: Extends SimpleVMLauncher\n- **Reliable**: Robust error handling and fallback modes\n- **Real-time**: Immediate bidirectional communication\n- **Simple**: Easy to use and understand\n\n@llm-principle Build on proven foundation, add capabilities incrementally\n@llm-culture Independence through enhanced but reliable communication",
    "context": ""
  },
  {
    "file_path": "control/enhanced_vm_launcher.py",
    "line_number": 46,
    "element_name": "EnhancedVMLauncher",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced VM Launcher with Bidirectional Communication\n\nExtends SimpleVMLauncher with Host \u2192 VM communication via QEMU monitor.\nMaintains all existing VM \u2192 Host functionality while adding new capabilities.",
    "context": "class EnhancedVMLauncher(SimpleVMLauncher):"
  },
  {
    "file_path": "control/enhanced_vm_launcher.py",
    "line_number": 70,
    "element_name": "launch_vm_with_bidirectional_communication",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Launch VM with Bidirectional Communication\n\nExtends the simple launcher with QEMU monitor socket for Host \u2192 VM commands.\nMaintains serial console for VM \u2192 Host output.",
    "context": "def launch_vm_with_bidirectional_communication(self):"
  },
  {
    "file_path": "control/enhanced_vm_launcher.py",
    "line_number": 166,
    "element_name": "send_to_vm",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Send Command to VM\n\nSends command to VM via QEMU monitor socket.\nProvides Host \u2192 VM communication capability.",
    "context": "def send_to_vm(self, command):"
  },
  {
    "file_path": "control/enhanced_vm_launcher.py",
    "line_number": 195,
    "element_name": "stream_enhanced_vm_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Stream Enhanced VM Output\n\nEnhanced version of stream_vm_output with bidirectional message processing.\nHandles structured messages and provides interactive capabilities.",
    "context": "def stream_enhanced_vm_output(self):"
  },
  {
    "file_path": "control/enhanced_vm_launcher.py",
    "line_number": 309,
    "element_name": "run",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced Main Entry Point\n\nMain entry point for enhanced VM launcher with bidirectional communication.",
    "context": "def run(self):"
  },
  {
    "file_path": "control/unhinged_launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Unhinged Quality-of-Life Launcher\n@llm-version 2.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nQuality-of-life launcher that provides enhanced user experience while calling\nMakefile targets \"behind the scenes\". Preserves Makefile as core build system.\n\n## Design Philosophy\n- **Makefile Preservation**: All build logic remains in Makefile\n- **Enhanced UX**: Better user experience with real-time feedback\n- **Behind-the-Scenes**: Calls Makefile targets internally\n- **Incremental**: Builds on existing infrastructure\n\n## Integration Strategy\n1. Call Makefile setup targets for dependencies\n2. Launch enhanced VM with bidirectional communication\n3. Provide real-time status and interaction\n4. Maintain all existing Makefile functionality\n\n@llm-principle Enhance experience while preserving build system foundation\n@llm-culture Independence through improved but reliable tooling",
    "context": ""
  },
  {
    "file_path": "control/unhinged_launcher.py",
    "line_number": 46,
    "element_name": "UnhingedLauncher",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Quality-of-Life Launcher with Makefile Integration\n\nProvides enhanced user experience while calling Makefile targets behind\nthe scenes. Preserves Makefile as the core build system.",
    "context": "class UnhingedLauncher:"
  },
  {
    "file_path": "control/unhinged_launcher.py",
    "line_number": 73,
    "element_name": "call_makefile_target",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Call Makefile Target Behind the Scenes\n\nCalls Makefile targets while providing user feedback.\nPreserves all Makefile functionality while enhancing UX.",
    "context": "def call_makefile_target(self, target, description=None, silent=False):"
  },
  {
    "file_path": "control/unhinged_launcher.py",
    "line_number": 240,
    "element_name": "run",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Main Entry Point for Enhanced Launcher\n\nOrchestrates the entire enhanced launch process:\n1. Check prerequisites\n2. Setup dependencies via Makefile\n3. Build essentials via Makefile\n4. Launch enhanced VM\n5. Provide user interface",
    "context": "def run(self):"
  },
  {
    "file_path": "control/simple_vm_launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Simple VM Launcher for Unhinged\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nSimplified VM launcher focused on core unidirectional communication:\nVM visual CLI output \u2192 Ubuntu host terminal that ran 'make start'\n\n## Design Principles\n- **Simplicity**: Single communication channel (serial console)\n- **Reliability**: Direct output streaming to host terminal\n- **Minimal Dependencies**: No complex shared directories or SSH\n- **Real-time**: Immediate VM output visibility in host terminal\n\n## Communication Flow\n1. Host runs 'make start' \u2192 launches VM with serial console output\n2. VM boots and runs Unhinged graphics \u2192 outputs to serial console\n3. Serial console \u2192 directly streams to host terminal in real-time\n4. Host terminal shows VM output immediately\n\n@llm-principle Unidirectional communication first, bidirectional later\n@llm-culture Independence through VM isolation with simple communication",
    "context": ""
  },
  {
    "file_path": "control/simple_vm_launcher.py",
    "line_number": 37,
    "element_name": "SimpleVMLauncher",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Simple VM Launcher with Direct Console Output\n\nLaunches QEMU VM and streams console output directly to host terminal.\nNo complex communication channels - just serial console output.",
    "context": "class SimpleVMLauncher:"
  },
  {
    "file_path": "control/simple_vm_launcher.py",
    "line_number": 113,
    "element_name": "launch_vm_with_console_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Launch VM with Direct Console Output\n\nLaunches QEMU VM and streams console output directly to host terminal.\nThis is the core unidirectional communication channel.",
    "context": "def launch_vm_with_console_output(self):"
  },
  {
    "file_path": "control/simple_vm_launcher.py",
    "line_number": 176,
    "element_name": "stream_vm_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Stream VM Output to Host Terminal\n\nReads VM console output and displays it in real-time on host terminal.\nThis provides immediate visibility of VM status and Unhinged graphics output.",
    "context": "def stream_vm_output(self):"
  },
  {
    "file_path": "control/simple_vm_launcher.py",
    "line_number": 243,
    "element_name": "run",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Main Entry Point\n\nSets up signal handlers and launches VM with console output streaming.\nThis is the simplified communication pipeline entry point.",
    "context": "def run(self):"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "misc.virtualization-boundary",
    "llm_does": "http proxy server that represents the line-in-the-sand",
    "llm_rule": null,
    "raw_comment": "@llm-type misc.virtualization-boundary\n@llm-does http proxy server that represents the line-in-the-sand",
    "context": ""
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 65,
    "element_name": "health_check",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Health check endpoint - Future: sys_health_check()\n\n@llm-future This becomes a fundamental OS health monitoring system call",
    "context": "async def health_check():"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 82,
    "element_name": "start_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Start a service tier - Future Unhinged OS system call: sys_start_tier()\n\n@llm-future This HTTP endpoint will become: int sys_start_tier(tier_id_t tier)\n@llm-kernel-design Service tiers are fundamental OS abstractions in Unhinged",
    "context": "async def start_service_tier(tier: str, request: Request):"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 129,
    "element_name": "stop_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Stop a service tier - Future: sys_stop_tier()\n\n@llm-future This becomes the foundation for Unhinged process lifecycle management",
    "context": "async def stop_service_tier(tier: str, request: Request):"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 158,
    "element_name": "get_system_status",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Get system status - Future: sys_get_system_info()\n\n@llm-future This endpoint design informs future OS status reporting",
    "context": "async def get_system_status():"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 188,
    "element_name": "get_virtualization_insights",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Endpoint for gathering insights about system operations for future OS design\n\n@llm-purpose Collect operational patterns that inform Unhinged OS kernel design",
    "context": "async def get_virtualization_insights():"
  },
  {
    "file_path": "control/conversation_cli.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "conversation-based cli interface for unhinged dual-system...",
    "llm_rule": "voice-first interaction must be immediate, natural, and work seamlessly acros...",
    "raw_comment": "@llm-type service.api\n@llm-does conversation-based cli interface for unhinged dual-system...\n@llm-rule voice-first interaction must be immediate, natural, and work seamlessly acros...",
    "context": ""
  },
  {
    "file_path": "control/service_launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "service launcher with unified service registry integration",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does service launcher with unified service registry integration",
    "context": ""
  },
  {
    "file_path": "control/network/service_registry.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "service_registry.py - central service discovery and regis...",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does service_registry.py - central service discovery and regis...",
    "context": ""
  },
  {
    "file_path": "control/network/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "misc.control-system",
    "llm_does": "__init__.py - network control system module initialization",
    "llm_rule": null,
    "raw_comment": "@llm-type misc.control-system\n@llm-does __init__.py - network control system module initialization",
    "context": ""
  },
  {
    "file_path": "control/deployment/deploy.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "misc.control-tool",
    "llm_does": "unified deployment orchestrator for unhinged system runtime",
    "llm_rule": "deployments must be atomic, reversible, and health-validated for operational ...",
    "raw_comment": "@llm-type misc.control-tool\n@llm-does unified deployment orchestrator for unhinged system runtime\n@llm-rule deployments must be atomic, reversible, and health-validated for operational ...",
    "context": ""
  },
  {
    "file_path": "control/deployment/deploy.py",
    "line_number": 21,
    "element_name": "UnhingedDeploymentOrchestrator",
    "language": "python",
    "llm_type": "misc.control-orchestrator",
    "llm_does": "central deployment orchestrator managing environment-awar...",
    "llm_rule": "all deployments must be atomic, health-validated, and reversible",
    "raw_comment": "@llm-type misc.control-orchestrator\n@llm-does central deployment orchestrator managing environment-awar...\n@llm-rule all deployments must be atomic, health-validated, and reversible",
    "context": "class UnhingedDeploymentOrchestrator:"
  },
  {
    "file_path": "control/deployment/health-checks.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "misc.control-tool",
    "llm_does": "service health monitoring and validation for unhinged",
    "llm_rule": "service health must be continuously monitored with automatic recovery actions",
    "raw_comment": "@llm-type misc.control-tool\n@llm-does service health monitoring and validation for unhinged\n@llm-rule service health must be continuously monitored with automatic recovery actions",
    "context": ""
  },
  {
    "file_path": "control/deployment/health-checks.py",
    "line_number": 47,
    "element_name": "UnhingedHealthMonitor",
    "language": "python",
    "llm_type": "misc.control-monitor",
    "llm_does": "continuous health monitoring system for unhinged service",
    "llm_rule": "health monitoring must be continuous, accurate, and trigger automatic recovery",
    "raw_comment": "@llm-type misc.control-monitor\n@llm-does continuous health monitoring system for unhinged service\n@llm-rule health monitoring must be continuous, accurate, and trigger automatic recovery",
    "context": "class UnhingedHealthMonitor:"
  },
  {
    "file_path": "control/gtk4_gui/realtime_system_info.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Real-time System Information Manager for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nProvides real-time system information updates for the GTK4 system info page\nwith efficient data collection and UI update mechanisms.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc GTK4 GUI Control Module\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nSimple GTK4 desktop application integration with direct control module access.\nAcademic exercise implementation - no abstraction layers, direct imports.\n\n@llm-principle Simple direct integration for learning and iteration\n@llm-culture Independence through straightforward implementation",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/system_info.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc System Information Collection Module for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nComprehensive system information gathering using psutil, platform, and system utilities.\nProvides structured data for the GTK4 system info page with proper error handling and caching.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/process_monitor.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Process Information Collection for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nCross-platform process monitoring using psutil for aux/top command equivalence\nwith efficient data collection, sorting, and process management capabilities.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/bluetooth_monitor.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Bluetooth Information Collection for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nCross-platform Bluetooth monitoring using D-Bus and bluetoothctl for device discovery,\npairing management, connection tracking, and adapter control capabilities.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/audio_monitor.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Audio Device Information Collection for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nCross-platform audio device monitoring using ALSA for device enumeration,\nvolume control, device switching, and connection management capabilities.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/desktop_app.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Unhinged Desktop Application for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nEnhanced GTK4 desktop application with comprehensive system monitoring, process management,\nBluetooth device control, and audio output management. Features tabbed interface with\nreal-time updates, component library integration, and professional design system.\n- Real-time status updates and progress indication\n- Integration with existing Makefile system and VM communication\n- User-friendly error handling and feedback\n\n## Design Principles\n- **Native Integration**: Uses GTK4 for authentic Ubuntu GNOME experience\n- **Functionality Mapping**: Executes same operations as 'make start'\n- **Visual Appeal**: Modern, clean interface following GNOME HIG\n- **Accessibility**: Keyboard navigation and screen reader support\n\n@llm-principle Native desktop integration with existing backend\n@llm-culture Independence through accessible graphical interface",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/desktop_app.py",
    "line_number": 86,
    "element_name": "UnhingedDesktopApp",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Main Desktop Application Class\n\nGTK4/Libadwaita application that provides graphical interface\nfor Unhinged platform functionality.\n\nFeatures:\n- Design system integration with semantic tokens\n- CSS loading from generated/design_system/gtk4/\n- Graceful fallback to Libadwaita defaults",
    "context": "class UnhingedDesktopApp(Adw.Application):"
  },
  {
    "file_path": "control/gtk4_gui/desktop_app.py",
    "line_number": 256,
    "element_name": "create_main_window",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Create Main Application Window\n\nCreates the main GTK4 window with modern Ubuntu GNOME styling\nusing Libadwaita for native look and feel.",
    "context": "def create_main_window(self):"
  },
  {
    "file_path": "control/gtk4_gui/desktop_app.py",
    "line_number": 1692,
    "element_name": "start_platform",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Start Platform Backend\n\nExecutes the same functionality as 'make start' but with\nGUI feedback and progress indication.",
    "context": "def start_platform(self):"
  },
  {
    "file_path": "control/gtk4_gui/launch.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Simple GTK4 Desktop Application Launcher\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nSimple launcher for the GTK4 desktop application with direct control integration.\nAcademic exercise implementation.\n\n@llm-principle Simple direct integration for learning and iteration\n@llm-culture Independence through straightforward implementation",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/tests/__init__.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc GTK4 GUI Test Suite\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nConsolidated test suite for the GTK4 GUI components and modules.\nProvides comprehensive testing for all components, monitors, and integrations.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/tests/test_monitors.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Monitor Tests for GTK4 GUI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nComprehensive tests for all monitor modules including SystemInfo, ProcessMonitor,\nAudioMonitor, and BluetoothMonitor. Tests real system data collection, performance, and error handling.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/tests/test_components.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Component Library Test Script\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nSimple test script to verify all components work correctly.\nRun this to test the component library before integration.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/tables.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Generic Table Components for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nReusable table foundation components following design system patterns\nfor structured data display with sorting, filtering, and accessibility.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/base.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Base Component Classes for GTK4 Component Library\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nBase classes providing common functionality for all components:\n- Design system integration\n- Theme management\n- Event handling patterns\n- Accessibility support",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/example_usage.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Example Usage of Unhinged GTK4 Component Library\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nDemonstrates how to integrate the component library into your existing\nGTK4 application. Shows practical usage patterns and best practices.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/containers.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Container GTK4 Components\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nContainer components for organizing and grouping content:\n- StatusCard: Card displaying status information with icon and actions\n- ServicePanel: Panel for displaying service information and controls\n- LogContainer: Scrollable container for log content",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc GTK4 Component Library for Unhinged\n@llm-version 1.0.0\n@llm-date 2025-10-27\n@llm-author Unhinged Team\n\n## Overview\nFocused GTK4 component library that integrates with the Unhinged design system.\nProvides reusable, accessible widgets following GNOME HIG patterns.\n\n## Design Principles\n- **Design System Integration**: Uses semantic tokens from libs/design_system/\n- **Libadwaita First**: Builds on Adw widgets for native GNOME experience\n- **Focused Components**: Only components actually needed by the application\n- **Type Safety**: Proper GTK4 typing and signal handling\n- **Accessibility**: ARIA labels, keyboard navigation, screen reader support\n\n## Component Categories\n- **Primitives**: Basic building blocks (buttons, inputs, labels)\n- **Containers**: Layout and grouping (cards, panels, sections)\n- **Complex**: Stateful components (log viewer, progress indicators)\n- **System**: Application-level components (status displays, service rows)\n\n@llm-principle Focused, practical components with design system integration\n@llm-culture Independence through reusable, accessible UI components",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/complex.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Complex GTK4 Components\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nComplex components that combine multiple elements for comprehensive interfaces:\n- LogViewer: Advanced log viewer with filtering and search\n- ServiceRow: Complete service status row with controls\n- SystemStatus: Overall system status display\n- PerformanceIndicator: System performance monitoring display\n- ProcessTable: Complete process management interface\n- BluetoothTable: Bluetooth device management with discovery\n- AudioTable: Audio device management with volume control",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/primitives.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Primitive GTK4 Components\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nBasic building block components with design system integration:\n- ActionButton: Enhanced button with semantic styling\n- StatusLabel: Label with status styling (success, warning, error)\n- ProgressIndicator: Progress bar with semantic styling\n- HardwareInfoRow: Hardware information display row\n- ProcessRow: Process information display with controls\n- BluetoothRow: Bluetooth device display with connection controls\n- AudioDeviceRow: Audio device display with volume controls",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/integration_example.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Integration Example for Existing Desktop App\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nShows how to integrate the component library into your existing\ncontrol/gtk4_gui/desktop_app.py with minimal changes.",
    "context": ""
  },
  {
    "file_path": "control/system/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "misc.control-plane-package",
    "llm_does": "system control abstraction layer package for unhinged",
    "llm_rule": "all system operations must be auditable, reversible, and provide clear operat...",
    "raw_comment": "@llm-type misc.control-plane-package\n@llm-does system control abstraction layer package for unhinged\n@llm-rule all system operations must be auditable, reversible, and provide clear operat...",
    "context": ""
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "misc.control-plane",
    "llm_does": "system control abstraction layer that bridges build",
    "llm_rule": "all system operations must be auditable, reversible, and provide clear operat...",
    "raw_comment": "@llm-type misc.control-plane\n@llm-does system control abstraction layer that bridges build\n@llm-rule all system operations must be auditable, reversible, and provide clear operat...",
    "context": ""
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 31,
    "element_name": "SystemController",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "System Control Abstraction Layer\n\nBridges operational semantics (start/stop services) with build system implementation.\nThis class represents the future boundary between Unhinged applications and the OS.\n\n@llm-future Every method here is a candidate for a future Unhinged OS system call\n@llm-virtualization This class will evolve into the primary OS interface",
    "context": "class SystemController:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 81,
    "element_name": "start_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Start a logical service tier\n\n@llm-future This will become: int sys_start_tier(tier_id_t tier)\n@llm-kernel-design Service tiers are fundamental OS abstractions in Unhinged",
    "context": "async def start_service_tier(self, tier: str) -> OperationResult:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 136,
    "element_name": "stop_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Stop a logical service tier\n\n@llm-future This will become: int sys_stop_tier(tier_id_t tier)",
    "context": "async def stop_service_tier(self, tier: str) -> OperationResult:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 199,
    "element_name": "_execute_docker_command",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Execute Docker command as fallback when build system unavailable\n\n@llm-future This direct command execution will be replaced by Unhinged container management",
    "context": "async def _execute_docker_command(self, operation: str, tier_config: Dict[str, Any]) -> OperationResult:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 242,
    "element_name": "get_system_status",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Get current system status\n\n@llm-future This will become: sys_get_system_info()",
    "context": "async def get_system_status(self) -> SystemStatus:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 296,
    "element_name": "get_operation_patterns",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Analyze operation patterns for future OS design insights\n\n@llm-purpose Collect operational patterns that inform Unhinged OS kernel design",
    "context": "def get_operation_patterns(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "model.entity",
    "llm_does": "operation result data model for system control",
    "llm_rule": null,
    "raw_comment": "@llm-type model.entity\n@llm-does operation result data model for system control",
    "context": ""
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 14,
    "element_name": "OperationResult",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Standardized result for system operations\n\n@llm-future This data structure will become the return format for Unhinged OS system calls\n@llm-evolution Each field here represents metadata that future OS kernel will track",
    "context": "class OperationResult:"
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 54,
    "element_name": "from_build_results",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Create OperationResult from build system results\n\n@llm-note This bridges build system results to operational semantics\n@llm-future This translation layer will be removed when we have direct OS operations",
    "context": "def from_build_results(cls, operation: str, build_results: List[Any]) -> 'OperationResult':"
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 97,
    "element_name": "SystemStatus",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Current system status snapshot\n\n@llm-future This will become the Unhinged OS system information structure",
    "context": "class SystemStatus:"
  },
  {
    "file_path": "control/config/environments/production.yml",
    "line_number": 1,
    "element_name": "environment",
    "language": "yaml",
    "llm_type": "config.app",
    "llm_does": "production environment settings for unhinged system deplo...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.app\n@llm-does production environment settings for unhinged system deplo...",
    "context": "environment: \"production\""
  },
  {
    "file_path": "control/config/environments/development.yml",
    "line_number": 1,
    "element_name": "environment",
    "language": "yaml",
    "llm_type": "config.app",
    "llm_does": "development environment settings for unhinged system deve...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.app\n@llm-does development environment settings for unhinged system deve...",
    "context": "environment: \"development\""
  },
  {
    "file_path": "platforms/persistence/docker-compose.yml",
    "line_number": 1,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "misc.platform",
    "llm_does": "docker-compose.yml - platform infrastructure component",
    "llm_rule": null,
    "raw_comment": "@llm-type misc.platform\n@llm-does docker-compose.yml - platform infrastructure component",
    "context": "version: '3.8'"
  },
  {
    "file_path": "platforms/persistence/config/persistence-platform.yaml",
    "line_number": 1,
    "element_name": "persistence_platform",
    "language": "yaml",
    "llm_type": "config.app",
    "llm_does": "persistence-platform.yaml - platform infrastructure compo...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.app\n@llm-does persistence-platform.yaml - platform infrastructure compo...",
    "context": "persistence_platform:"
  },
  {
    "file_path": "desktop/test-desktop-app.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Test Desktop Application\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nTest script for the Unhinged desktop application to verify functionality\nwithout requiring a full GUI session.\n\n## Test Coverage\n- Import and syntax validation\n- GTK4/Libadwaita availability\n- Application initialization\n- Desktop file validation\n- Installation script testing\n\n@llm-principle Test desktop integration thoroughly\n@llm-culture Verify independence through GUI accessibility",
    "context": ""
  },
  {
    "file_path": "desktop/auto_updater.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "auto-update system for unhinged desktop application",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does auto-update system for unhinged desktop application",
    "context": ""
  },
  {
    "file_path": "libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc GUI Session Logger for Unhinged Desktop Application\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nSession-based logging system that captures all GTK4 application output\nand writes it to timestamped log files in /build/tmp/ directory.\n\n## Features\n- Dual output: GTK4 UI display + file logging\n- Session-based file naming with UUID4 session IDs\n- ISO 8601 timestamp format for file names\n- Integration with existing event framework\n- Real-time file writing for all UI output\n\n@llm-principle Comprehensive logging for desktop application sessions\n@llm-culture Independence through detailed session tracking",
    "context": ""
  },
  {
    "file_path": "libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 35,
    "element_name": "GUISessionLogger",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced Session-based logger for GTK4 desktop application\n\nCaptures all output that appears in the GTK4 application's output log\nand simultaneously writes it to timestamped session log files with\nnoise reduction and error grouping capabilities.",
    "context": "class GUISessionLogger:"
  },
  {
    "file_path": "libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 121,
    "element_name": "log_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Log Output to Session File\n\nLogs a message that appeared in the GTK4 application's output log\nto the session file with timestamp and source information.\n\nArgs:\nmessage: The message that appeared in the GUI\nsource: Source of the message (GUI, VM, MAKE, etc.)",
    "context": "def log_output(self, message: str, source: str = \"GUI\"):"
  },
  {
    "file_path": "libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 149,
    "element_name": "log_platform_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced platform output logging with noise reduction\n\nProcesses platform output with intelligent filtering to reduce noise\nand group related errors while maintaining debugging value.",
    "context": "def log_platform_output(self, output: str):"
  },
  {
    "file_path": "libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 301,
    "element_name": "log_platform_status_update",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Log platform status with accuracy verification\n\nPrevents premature success claims by checking actual component status\nbefore logging platform state changes.",
    "context": "def log_platform_status_update(self, claimed_status: str):"
  },
  {
    "file_path": "libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 387,
    "element_name": "GUIOutputCapture",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Output capture system for GTK4 application\n\nCaptures output that would normally go to the GTK4 text view\nand sends it to both the GUI and the session logger.",
    "context": "class GUIOutputCapture:"
  },
  {
    "file_path": "libs/design_system/build/design_token_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "design token generation module following protoclientbuild...",
    "llm_rule": "design tokens must be generated before ui compilation and provide consistent ...",
    "raw_comment": "@llm-type config.build\n@llm-does design token generation module following protoclientbuild...\n@llm-rule design tokens must be generated before ui compilation and provide consistent ...",
    "context": ""
  },
  {
    "file_path": "libs/design_system/build/design_token_builder.py",
    "line_number": 50,
    "element_name": "DesignTokenBuilder",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "design token generation following protoclientbuilder arch...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does design token generation following protoclientbuilder arch...",
    "context": "class DesignTokenBuilder(BuildModule):"
  },
  {
    "file_path": "libs/design_system/build/component_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "component specification validator ensuring yaml specs con...",
    "llm_rule": "all component specifications must be validated before generator consumption",
    "raw_comment": "@llm-type util.validator\n@llm-does component specification validator ensuring yaml specs con...\n@llm-rule all component specifications must be validated before generator consumption",
    "context": ""
  },
  {
    "file_path": "libs/design_system/build/component_validator.py",
    "line_number": 52,
    "element_name": "ComponentSpecificationValidator",
    "language": "python",
    "llm_type": "component.primitive",
    "llm_does": "core validator implementing comprehensive component speci...",
    "llm_rule": null,
    "raw_comment": "@llm-type component.primitive\n@llm-does core validator implementing comprehensive component speci...",
    "context": "class ComponentSpecificationValidator:"
  },
  {
    "file_path": "libs/design_system/build/component_generator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "component generation orchestrator coordinating platform-s...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does component generation orchestrator coordinating platform-s...",
    "context": ""
  },
  {
    "file_path": "libs/design_system/build/component_build_module.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "component generation build module integrating with unhinged",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does component generation build module integrating with unhinged",
    "context": ""
  },
  {
    "file_path": "libs/design_system/build/component_build_module.py",
    "line_number": 38,
    "element_name": "ComponentBuildModule",
    "language": "python",
    "llm_type": "component.primitive",
    "llm_does": "component generation build module implementing buildmodul...",
    "llm_rule": null,
    "raw_comment": "@llm-type component.primitive\n@llm-does component generation build module implementing buildmodul...",
    "context": "class ComponentBuildModule(BuildModule):"
  },
  {
    "file_path": "libs/design_system/build/generators/_abstract_generator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "abstract component generator interface ensuring platform ...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does abstract component generator interface ensuring platform ...",
    "context": ""
  },
  {
    "file_path": "libs/design_system/build/generators/gtk4/generator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "gtk4 component generator producing python widget implemen...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does gtk4 component generator producing python widget implemen...",
    "context": ""
  },
  {
    "file_path": "libs/design_system/build/generators/gtk4/generator.py",
    "line_number": 152,
    "element_name": "resolve_token",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "resolves platform-agnostic token references to gtk4-speci...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does resolves platform-agnostic token references to gtk4-speci...",
    "context": "def resolve_token(self, token_path: str, context: str = \"light\") -> str:"
  },
  {
    "file_path": "libs/design_system/build/generators/gtk4/generator.py",
    "line_number": 213,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "auto-generated gtk4 widget from design system component",
    "llm_rule": null,
    "raw_comment": "gi.require_version('Gtk', '4.0')\ngi.require_version('Adw', '1')\n\nfrom gi.repository import Gtk, Adw, GObject, GLib\nfrom typing import Dict, Any, Optional, Callable\n\n\"\"\"\n@llm-type config.build\n@llm-does auto-generated gtk4 widget from design system component\n\"\"\"\ndef _generate_class_definition(self, class_name: str, base_class: str, spec: Dict[str, Any]) -> str:\n\"\"\"Generate class definition with GObject registration.\"\"\"\ncomponent = spec['component']\n\nreturn f\"\"\"\nclass {class_name}({base_class}):\n\\\"\\\"\\\"\n{component['name']} - {component['description']}\n\nCategory: {component['category']}\nGenerated from: {component['id']}.yaml\n\\\"\\\"\\\"\n\n__gtype_name__ = '{class_name}'\"\"\"\n\ndef _generate_properties(self, spec: Dict[str, Any]) -> str:\n\"\"\"Generate GObject property definitions.\"\"\"\nproperties = self.get_component_properties(spec)\n\nif not properties:\nreturn \"\"\n\nprop_lines = []\nfor prop_name, prop_def in properties.items():\ngtype = self._map_type_to_gtype(prop_def['type'])\ndefault = prop_def.get('default', self._get_default_for_type(prop_def['type']))\n\nprop_lines.append(f\"\"\"\n# Property: {prop_name}\n{prop_name} = GObject.Property(\ntype={gtype},\ndefault={repr(default)},\nnick=\"{prop_name.replace('_', ' ').title()}\",\nblurb=\"{prop_def['description']}\"\n)\"\"\")\n\nreturn \"\\n\".join(prop_lines)\n\ndef _generate_signals(self, spec: Dict[str, Any]) -> str:\n\"\"\"Generate GObject signal definitions.\"\"\"\nevents = self.get_component_events(spec)\n\nif not events:\nreturn \"\"\n\nsignal_lines = []\nfor event_name, event_def in events.items():\nsignal_name = event_name.replace('_', '-')\nsignal_lines.append(f\"\"\"\n# Signal: {event_name}\n__gsignals__ = {{\n'{signal_name}': (GObject.SignalFlags.RUN_FIRST, None, (object,))\n}}\"\"\")\n\nreturn \"\\n\".join(signal_lines)\n\ndef _generate_init_method(self, spec: Dict[str, Any]) -> str:\n\"\"\"Generate component initialization method.\"\"\"\ncomponent = spec['component']\ncomponent_id = component['id']\n\nreturn f\"\"\"\ndef __init__(self, **kwargs):\nsuper().__init__(**kwargs)\n\n# Add design system CSS classes\nself.add_css_class(\"{self.css_class_prefix}component\")\nself.add_css_class(\"{self.css_class_prefix}{component_id}\")\n\n# Initialize component state\nself._setup_component()\nself._apply_default_styling()\n\ndef _setup_component(self):\n\\\"\\\"\\\"Set up component-specific initialization.\\\"\\\"\\\"\n# Component-specific setup will be added here\npass\n\ndef _apply_default_styling(self):\n\\\"\\\"\\\"Apply default styling from design tokens.\\\"\\\"\\\"\n# Default styling will be applied here\npass\"\"\"\n\ndef _generate_state_methods(self, spec: Dict[str, Any]) -> str:\n\"\"\"Generate state management methods.\"\"\"\nreturn self.generate_state_handler(spec)\n\ndef _generate_event_methods(self, spec: Dict[str, Any]) -> str:\n\"\"\"Generate event handling methods.\"\"\"\nreturn self.generate_event_handler(spec)\n\ndef _get_base_widget_class(self, component: Dict[str, Any]) -> str:\n\"\"\"Determine appropriate GTK base widget class.\"\"\"\ncategory = component['category']\ncomponent_id = component['id']\n\n# Special cases for specific components\nif component_id == 'button':\nreturn 'Gtk.Button'\nelif component_id == 'text_editor':\nreturn 'Gtk.TextView'\nelif component_id in ['input', 'text_input']:\nreturn 'Gtk.Entry'\nelif component_id == 'modal':\nreturn 'Adw.MessageDialog'\n\n# Default based on category\nreturn self.base_widget_mapping.get(category, 'Gtk.Widget')\n\ndef _map_type_to_gtype(self, prop_type: str) -> str:\n\"\"\"Map component property type to GObject type.\"\"\"\ntype_mapping = {\n'string': 'str',\n'number': 'float',\n'boolean': 'bool',\n'enum': 'str',  # Enums are validated as strings\n'object': 'object',\n'array': 'object'\n}\nreturn type_mapping.get(prop_type, 'object')\n\ndef _get_default_for_type(self, prop_type: str) -> Any:\n\"\"\"Get appropriate default value for property type.\"\"\"\ndefaults = {\n'string': '',\n'number': 0,\n'boolean': False,\n'enum': '',\n'object': None,\n'array': []\n}\nreturn defaults.get(prop_type, None)\n\ndef _to_pascal_case(self, kebab_case: str) -> str:\n\"\"\"Convert kebab-case to PascalCase.\"\"\"\nreturn ''.join(word.capitalize() for word in kebab_case.split('-'))\n",
    "context": ""
  },
  {
    "file_path": "libs/design_system/components/_schema.yaml",
    "line_number": 1,
    "element_name": "schema_version",
    "language": "yaml",
    "llm_type": "model.schema",
    "llm_does": "component specification meta-schema defining platform-agn...",
    "llm_rule": "component specifications must be platform-agnostic and describe what not how",
    "raw_comment": "@llm-type model.schema\n@llm-does component specification meta-schema defining platform-agn...\n@llm-rule component specifications must be platform-agnostic and describe what not how",
    "context": "schema_version: \"1.0.0\""
  },
  {
    "file_path": "libs/design_system/components/primitives/modal.yaml",
    "line_number": 1,
    "element_name": "component",
    "language": "yaml",
    "llm_type": "component.spec",
    "llm_does": "platform-agnostic modal dialog component specification fo...",
    "llm_rule": "modal specifications must be platform-agnostic describing semantic behavior n...",
    "raw_comment": "@llm-type component.spec\n@llm-does platform-agnostic modal dialog component specification fo...\n@llm-rule modal specifications must be platform-agnostic describing semantic behavior n...",
    "context": "component:"
  },
  {
    "file_path": "libs/design_system/components/primitives/input.yaml",
    "line_number": 1,
    "element_name": "component",
    "language": "yaml",
    "llm_type": "component.spec",
    "llm_does": "platform-agnostic input field component specification for...",
    "llm_rule": "input specifications must be platform-agnostic describing semantic behavior n...",
    "raw_comment": "@llm-type component.spec\n@llm-does platform-agnostic input field component specification for...\n@llm-rule input specifications must be platform-agnostic describing semantic behavior n...",
    "context": "component:"
  },
  {
    "file_path": "libs/design_system/components/primitives/button.yaml",
    "line_number": 1,
    "element_name": "component",
    "language": "yaml",
    "llm_type": "component.spec",
    "llm_does": "platform-agnostic button component specification defining...",
    "llm_rule": "button specifications must be platform-agnostic describing what not how",
    "raw_comment": "@llm-type component.spec\n@llm-does platform-agnostic button component specification defining...\n@llm-rule button specifications must be platform-agnostic describing what not how",
    "context": "component:"
  },
  {
    "file_path": "libs/design_system/components/primitives/simple-button.yaml",
    "line_number": 1,
    "element_name": "component",
    "language": "yaml",
    "llm_type": "component.spec",
    "llm_does": "minimal button component specification for testing component",
    "llm_rule": null,
    "raw_comment": "@llm-type component.spec\n@llm-does minimal button component specification for testing component",
    "context": "component:"
  }
]