[
  {
    "file_path": "build/llm_integration.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "llm integration for enhanced build system with context generation",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does llm integration for enhanced build system with context generation",
    "context": ""
  },
  {
    "file_path": "build/cli.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "enhanced cli interface for the unhinged build",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does enhanced cli interface for the unhinged build",
    "context": ""
  },
  {
    "file_path": "build/orchestrator.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "enhanced build orchestrator for unhinged polyglot monorepo",
    "llm_rule": "build operations must be deterministic, cacheable, and provide clear feedback...",
    "raw_comment": "@llm-type service.api\n@llm-does enhanced build orchestrator for unhinged polyglot monorepo\n@llm-rule build operations must be deterministic, cacheable, and provide clear feedback...",
    "context": ""
  },
  {
    "file_path": "build/orchestrator.py",
    "line_number": 542,
    "element_name": "validate_build_configuration",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate build configuration at compile time\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler\nReturns list of validation errors that must be fixed before build",
    "context": "def validate_build_configuration(self) -> List[str]:"
  },
  {
    "file_path": "build/monitoring.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "build performance monitoring and metrics collection system",
    "llm_rule": "performance monitoring must be lightweight and provide actionable insights fo...",
    "raw_comment": "@llm-type service.api\n@llm-does build performance monitoring and metrics collection system\n@llm-rule performance monitoring must be lightweight and provide actionable insights fo...",
    "context": ""
  },
  {
    "file_path": "build/developer_experience.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "developer experience enhancements for the enhanced build",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does developer experience enhancements for the enhanced build",
    "context": ""
  },
  {
    "file_path": "build/build.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "main entry point for the unhinged build",
    "llm_rule": "build system must be simple, fast, and provide clear feedback",
    "raw_comment": "@llm-type service.api\n@llm-does main entry point for the unhinged build\n@llm-rule build system must be simple, fast, and provide clear feedback",
    "context": ""
  },
  {
    "file_path": "build/python/run.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "python environment operations and execution management",
    "llm_rule": "all execution must be reproducible and pipeline ready",
    "raw_comment": "@llm-type config.build\n@llm-does python environment operations and execution management\n@llm-rule all execution must be reproducible and pipeline ready",
    "context": ""
  },
  {
    "file_path": "build/python/run.py",
    "line_number": 23,
    "element_name": "UnhingedPythonRunner",
    "language": "python",
    "llm_type": "util.executor",
    "llm_does": "centralized python execution engine for ml/ai etl",
    "llm_rule": "python execution must be reproducible, environment-aware, and big data ready",
    "raw_comment": "@llm-type util.executor\n@llm-does centralized python execution engine for ml/ai etl\n@llm-rule python execution must be reproducible, environment-aware, and big data ready",
    "context": "class UnhingedPythonRunner:"
  },
  {
    "file_path": "build/python/setup.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.setup",
    "llm_does": "python environment setup for unhinged on-premise ml/ai",
    "llm_rule": "python environment must be reproducible, comprehensive, and big data ready",
    "raw_comment": "@llm-type util.setup\n@llm-does python environment setup for unhinged on-premise ml/ai\n@llm-rule python environment must be reproducible, comprehensive, and big data ready",
    "context": ""
  },
  {
    "file_path": "build/python/setup.py",
    "line_number": 23,
    "element_name": "UnhingedPythonSetup",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "comprehensive python environment setup for ml/ai etl",
    "llm_rule": "environment setup must be reproducible, comprehensive, and failure-resistant",
    "raw_comment": "@llm-type config.build\n@llm-does comprehensive python environment setup for ml/ai etl\n@llm-rule environment setup must be reproducible, comprehensive, and failure-resistant",
    "context": "class UnhingedPythonSetup:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.tool",
    "llm_does": "llm context warming system for onboarding new",
    "llm_rule": null,
    "raw_comment": "@llm-type util.tool\n@llm-does llm context warming system for onboarding new",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 16,
    "element_name": "LLMContextWarmer",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "structured context summaries for new llm agents",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does structured context summaries for new llm agents",
    "context": "class LLMContextWarmer:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 35,
    "element_name": "generate_project_overview",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "comprehensive project overview from extracted comments",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does comprehensive project overview from extracted comments",
    "context": "def generate_project_overview(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 83,
    "element_name": "_extract_key_components",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "extract key system components with improved name",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does extract key system components with improved name",
    "context": "def _extract_key_components(self) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 119,
    "element_name": "paginate_comments",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "paginated access to all extracted comments for",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does paginated access to all extracted comments for",
    "context": "def paginate_comments(self, page: int = 1) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 151,
    "element_name": "_improve_element_name",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "improve element name detection from file paths",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does improve element name detection from file paths",
    "context": "def _improve_element_name(self, comment: Dict[str, Any]) -> str:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 173,
    "element_name": "_find_related_services",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "find related services through port references, api",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does find related services through port references, api",
    "context": "def _find_related_services(self, comment: Dict[str, Any]) -> List[str]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 225,
    "element_name": "_validate_context_completeness",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "validate that service and component comments have",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does validate that service and component comments have",
    "context": "def _validate_context_completeness(self, comments: List[Dict[str, Any]]) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 246,
    "element_name": "_generate_getting_started_section",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "generate getting started section with setup commands",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does generate getting started section with setup commands",
    "context": "def _generate_getting_started_section(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 274,
    "element_name": "_extract_dependency_information",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "extract dependency and build system information from",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does extract dependency and build system information from",
    "context": "def _extract_dependency_information(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 306,
    "element_name": "_validate_legend_completeness",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "validate that",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does validate that",
    "context": "def _validate_legend_completeness(self, comments: List[Dict[str, Any]]) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "build/docs-generation/llm-context-warmer.py",
    "line_number": 340,
    "element_name": "generate_enhanced_project_overview",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "generate enhanced project overview addressing all llm",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does generate enhanced project overview addressing all llm",
    "context": "def generate_enhanced_project_overview(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "tdd test suite ensuring extraction and validation",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does tdd test suite ensuring extraction and validation",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 39,
    "element_name": "test_extract_llm_context_from_python",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test extraction of @llm-context from Python docstring.",
    "context": "def test_extract_llm_context_from_python(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 40,
    "element_name": "test_extract_llm_context_from_python",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "user requests",
    "llm_rule": null,
    "raw_comment": "\"\"\"\n@llm-type service.api\n@llm-does user requests\n\"\"\"\ndef process():\npass",
    "context": "def test_extract_llm_context_from_python(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 66,
    "element_name": "test_extract_llm_context_from_typescript",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test extraction of @llm-context from TypeScript JSDoc.",
    "context": "def test_extract_llm_context_from_typescript(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 67,
    "element_name": "test_extract_llm_context_from_typescript",
    "language": "python",
    "llm_type": "component.primitive",
    "llm_does": "react component for user authentication",
    "llm_rule": null,
    "raw_comment": "\"\"\"\n@llm-type component.primitive\n@llm-does react component for user authentication\n\"\"\"\nexport const AuthComponent = () => {\nreturn null;\n};",
    "context": "def test_extract_llm_context_from_typescript(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 86,
    "element_name": "test_parse_llm_tags_with_context",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test parsing of all tags including @llm-context.",
    "context": "def test_parse_llm_tags_with_context(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 87,
    "element_name": "test_parse_llm_tags_with_context",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "user input",
    "llm_rule": "never trust user input",
    "raw_comment": "@llm-type util.validator\n@llm-does user input\n@llm-rule never trust user input",
    "context": "def test_parse_llm_tags_with_context(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 133,
    "element_name": "test_validate_comment_with_context",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test validation accepts @llm-context.",
    "context": "def test_validate_comment_with_context(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 194,
    "element_name": "TestLLMContextWarmerImprovements",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test suite for llm context warmer improvements",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test suite for llm context warmer improvements",
    "context": "class TestLLMContextWarmerImprovements(unittest.TestCase):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 200,
    "element_name": "test_element_name_detection_from_service_path",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test element name extraction from services directory",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test element name extraction from services directory",
    "context": "def test_element_name_detection_from_service_path(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 230,
    "element_name": "test_element_name_detection_from_python_file",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test element name extraction from python file",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test element name extraction from python file",
    "context": "def test_element_name_detection_from_python_file(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 258,
    "element_name": "test_find_related_services_by_port_references",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test cross-reference detection between services using port",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test cross-reference detection between services using port",
    "context": "def test_find_related_services_by_port_references(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 302,
    "element_name": "test_context_completeness_validation",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test validation of context completeness for service",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test validation of context completeness for service",
    "context": "def test_context_completeness_validation(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 343,
    "element_name": "test_pagination_data_integrity",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test that pagination maintains complete data integrity",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test that pagination maintains complete data integrity",
    "context": "def test_pagination_data_integrity(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 403,
    "element_name": "TestLLMContextWarmerEnhancements",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test suite for final llm context warmer",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test suite for final llm context warmer",
    "context": "class TestLLMContextWarmerEnhancements(unittest.TestCase):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 409,
    "element_name": "test_getting_started_section_generation",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test generation of getting started section with",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test generation of getting started section with",
    "context": "def test_getting_started_section_generation(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 452,
    "element_name": "test_dependency_information_extraction",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test extraction of dependency and setup information",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test extraction of dependency and setup information",
    "context": "def test_dependency_information_extraction(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 488,
    "element_name": "test_complete_legend_validation",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test validation that legends are complete and",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test validation that legends are complete and",
    "context": "def test_complete_legend_validation(self):"
  },
  {
    "file_path": "build/docs-generation/test_llm_extraction.py",
    "line_number": 530,
    "element_name": "test_enhanced_overview_with_getting_started",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test that enhanced overview includes getting started",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test that enhanced overview includes getting started",
    "context": "def test_enhanced_overview_with_getting_started(self):"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "LLM Comment Extraction System\n\nParses @llm-* tags from code comments across all programming languages\nin the Unhinged monorepo and generates architectural documentation.",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 127,
    "element_name": "_parse_llm_tags",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Parse @llm-* tags from comment text",
    "context": "def _parse_llm_tags(self, comment_text: str, file_path: str, line_number: int,"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 233,
    "element_name": "_parse_llm_tags",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Parse @llm-* tags from Python docstring",
    "context": "def _parse_llm_tags(self, comment_text: str, file_path: str, line_number: int,"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 542,
    "element_name": "extract_comments_from_file",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Extracts all @llm-* comments from a single source file using appropriate language parser\n@llm-context TDD interface function for testing individual file processing",
    "context": "def extract_comments_from_file(file_path: str) -> List[LLMComment]:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 563,
    "element_name": "extract_comments_from_codebase",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Extracts all @llm-* comments from entire codebase using multi-language parsers\n@llm-context TDD interface function for testing full codebase processing",
    "context": "def extract_comments_from_codebase(root_path: Path) -> List[LLMComment]:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 573,
    "element_name": "parse_llm_tags",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Parses individual @llm-* tags from comment text using regex patterns\n@llm-context TDD interface function for testing tag parsing logic",
    "context": "def parse_llm_tags(text: str) -> Dict[str, str]:"
  },
  {
    "file_path": "build/docs-generation/extract-llm-comments.py",
    "line_number": 598,
    "element_name": "save_extraction_results",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Saves extracted comments to JSON with metadata\n@llm-context TDD interface function for testing result serialization",
    "context": "def save_extraction_results(comments: List[LLMComment], output_path: Path) -> Dict:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "LLM Comment Validation System\n\nValidates consistency and quality of @llm-* comments across the codebase.\nIntegrates with the existing documentation validation workflow.",
    "context": ""
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 287,
    "element_name": "validate_comment",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "individual comment for completeness and quality",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does individual comment for completeness and quality",
    "context": "def validate_comment(comment) -> List[Dict]:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 297,
    "element_name": "validate_all_comments",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "batch of comments and returns summary",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does batch of comments and returns summary",
    "context": "def validate_all_comments(comments: List) -> Dict:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 320,
    "element_name": "check_required_tags",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "comment has all required tags for its",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does comment has all required tags for its",
    "context": "def check_required_tags(comment) -> List[Dict]:"
  },
  {
    "file_path": "build/docs-generation/validate-llm-comments.py",
    "line_number": 345,
    "element_name": "check_tag_format",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "tag content meets quality standards",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does tag content meets quality standards",
    "context": "def check_tag_format(comment) -> List[Dict]:"
  },
  {
    "file_path": "build/docs-generation/llm_types.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "defines data structures and interfaces for llm",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does defines data structures and interfaces for llm",
    "context": ""
  },
  {
    "file_path": "build/tools/dead-code-analyzer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "comprehensive dead code and cruft detection tool",
    "llm_rule": "dead code analysis must be conservative to avoid deleting functional code",
    "raw_comment": "@llm-type util.function\n@llm-does comprehensive dead code and cruft detection tool\n@llm-rule dead code analysis must be conservative to avoid deleting functional code",
    "context": ""
  },
  {
    "file_path": "build/tools/dead-code-analyzer.py",
    "line_number": 40,
    "element_name": "DeadCodeAnalyzer",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "main analyzer implementing multi-approach dead code detec...",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does main analyzer implementing multi-approach dead code detec...",
    "context": "class DeadCodeAnalyzer:"
  },
  {
    "file_path": "build/tools/cleanup-dead-code.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "safe dead code cleanup tool with backup",
    "llm_rule": "cleanup operations must be reversible and include comprehensive safety checks",
    "raw_comment": "@llm-type util.function\n@llm-does safe dead code cleanup tool with backup\n@llm-rule cleanup operations must be reversible and include comprehensive safety checks",
    "context": ""
  },
  {
    "file_path": "build/tools/cleanup-dead-code.py",
    "line_number": 28,
    "element_name": "DeadCodeCleanup",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "safe cleanup implementation with backup and rollback",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does safe cleanup implementation with backup and rollback",
    "context": "class DeadCodeCleanup:"
  },
  {
    "file_path": "build/tools/llmdocs-evolution-engine.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "operations",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does operations",
    "context": ""
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "automated llm documentation header enforcement across all",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does automated llm documentation header enforcement across all",
    "context": ""
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 16,
    "element_name": "LLMDocsEnforcer",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Enforces LLM documentation standards across all source files.\n\nValidates and injects @llm- headers into source files to ensure\nconsistent documentation for AI comprehension.",
    "context": "class LLMDocsEnforcer:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 44,
    "element_name": "scan_files",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Scan directories for source files requiring @llm- headers.",
    "context": "def scan_files(self, directories: List[str]) -> List[Path]:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 66,
    "element_name": "_should_process_file",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Determine if file should be processed for @llm- headers.",
    "context": "def _should_process_file(self, file_path: Path) -> bool:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 85,
    "element_name": "validate_file",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate if file has proper @llm- headers.",
    "context": "def validate_file(self, file_path: Path) -> Tuple[bool, List[str]]:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 102,
    "element_name": "inject_headers",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Inject @llm- headers into file if missing.",
    "context": "def inject_headers(self, file_path: Path, file_type: str = None) -> bool:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 140,
    "element_name": "_generate_header",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Generate appropriate @llm- header for file.",
    "context": "def _generate_header(self, file_path: Path, file_type: str) -> str:"
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 165,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "{llm_type}",
    "llm_does": "{purpose}",
    "llm_rule": null,
    "raw_comment": "@llm-type {llm_type}\n@llm-does {purpose}",
    "context": ""
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 170,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "{llm_type}",
    "llm_does": "{purpose}",
    "llm_rule": null,
    "raw_comment": "{line_comment} @llm-type {llm_type}\n{line_comment} @llm-does {purpose}",
    "context": ""
  },
  {
    "file_path": "build/tools/llm-docs-enforcer.py",
    "line_number": 176,
    "element_name": "enforce_compliance",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Enforce @llm- documentation compliance across directories.",
    "context": "def enforce_compliance(self, directories: List[str], fix: bool = False) -> bool:"
  },
  {
    "file_path": "build/ci/ci-config.yml",
    "line_number": 1,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "config.app",
    "llm_does": "ci/cd pipeline configuration integrating with enhanced build",
    "llm_rule": null,
    "raw_comment": "@llm-type config.app\n@llm-does ci/cd pipeline configuration integrating with enhanced build",
    "context": "version: \"1.0\""
  },
  {
    "file_path": "build/ci/scripts/build-verification.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Build Verification Script for CI/CD Pipeline\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nComprehensive build verification that integrates with the enhanced build system.\nValidates builds, dependencies, and system integrity before deployment.\n\n## Features\n- Integration with build/orchestrator.py\n- Intelligent caching validation\n- Parallel build execution\n- Comprehensive error reporting\n- Performance metrics collection\n\n@llm-principle Reliable build verification with enhanced build system integration\n@llm-culture Independence through comprehensive automated validation",
    "context": ""
  },
  {
    "file_path": "build/ci/scripts/build-verification.py",
    "line_number": 44,
    "element_name": "BuildVerificationRunner",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Build verification runner with enhanced build integration\n\nCoordinates build verification using the existing enhanced build system\nwhile providing CI/CD specific validation and reporting.",
    "context": "class BuildVerificationRunner:"
  },
  {
    "file_path": "build/orchestration/docker-compose.production.yml",
    "line_number": 1,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "config.build",
    "llm_does": "production docker-compose with unified service definitions",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does production docker-compose with unified service definitions",
    "context": "version: '3.8'"
  },
  {
    "file_path": "build/orchestration/docker-compose.development.yml",
    "line_number": 1,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "config.build",
    "llm_does": "development docker-compose with debug tools and hot-reload",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does development docker-compose with debug tools and hot-reload",
    "context": "version: '3.8'"
  },
  {
    "file_path": "build/config/build-config.yml",
    "line_number": 1,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "config.app",
    "llm_does": "main build configuration for unhinged platform",
    "llm_rule": null,
    "raw_comment": "@llm-type config.app\n@llm-does main build configuration for unhinged platform",
    "context": "version: \"1.0\""
  },
  {
    "file_path": "build/modules/typescript_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "typescript/npm build module with webpack optimization and",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does typescript/npm build module with webpack optimization and",
    "context": ""
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "static html registry generation module for control",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does static html registry generation module for control",
    "context": ""
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 25,
    "element_name": "RegistryBuilder",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "javascript registry of static html files for",
    "llm_rule": "registry must be generated before browser access to ensure accurate file disc...",
    "raw_comment": "@llm-type config.build\n@llm-does javascript registry of static html files for\n@llm-rule registry must be generated before browser access to ensure accurate file disc...",
    "context": "class RegistryBuilder(BuildModule):"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 36,
    "element_name": "can_handle",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "determines if this module can handle the",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does determines if this module can handle the",
    "context": "def can_handle(self, context: BuildContext) -> bool:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 47,
    "element_name": "get_dependencies",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "returns list of files that affect registry",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does returns list of files that affect registry",
    "context": "def get_dependencies(self, context: BuildContext) -> List[str]:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 62,
    "element_name": "calculate_cache_key",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "content-based cache key for registry generation",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does content-based cache key for registry generation",
    "context": "def calculate_cache_key(self, context: BuildContext) -> str:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 86,
    "element_name": "extract_html_metadata",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "extracts title, description, and metadata from html",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does extracts title, description, and metadata from html",
    "context": "def extract_html_metadata(self, file_path: Path) -> Dict[str, any]:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 151,
    "element_name": "scan_static_html_directory",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "recursively scans control/static_html for html files and",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does recursively scans control/static_html for html files and",
    "context": "def scan_static_html_directory(self, project_root: Path) -> Dict[str, Dict]:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 176,
    "element_name": "build_file_structure",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "hierarchical file structure for table-of-contents navigation",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does hierarchical file structure for table-of-contents navigation",
    "context": "def build_file_structure(self, project_root: Path) -> Dict:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 240,
    "element_name": "generate_registry_js",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "javascript registry file with helper functions and",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does javascript registry file with helper functions and",
    "context": "def generate_registry_js(self, registry: Dict[str, Dict], file_structure: Dict = None) -> str:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 244,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "model.config",
    "llm_does": "global registry of static html files for",
    "llm_rule": "registry must be regenerated whenever html files are added/removed/modified",
    "raw_comment": "// Generated at: {datetime.now().isoformat()}\n// Run 'make start' to regenerate\n\n\"\"\"\n@llm-type model.config\n@llm-does global registry of static html files for\n@llm-rule registry must be regenerated whenever html files are added/removed/modified\n\"\"\"\nwindow.UNHINGED_REGISTRY = {json.dumps(registry, indent=2)};\n\n\"\"\"\n@llm-type model.config\n@llm-does hierarchical file structure for table-of-contents navigation\n\"\"\"\nwindow.UNHINGED_FILE_STRUCTURE = {json.dumps(file_structure or {}, indent=2)};\n\n// Helper functions for registry access\nwindow.getRegistryEntry = function(path) {{\nreturn window.UNHINGED_REGISTRY[path] || null;\n}};\n\nwindow.getAllFiles = function() {{\nreturn Object.keys(window.UNHINGED_REGISTRY);\n}};\n\nwindow.getFilesByCategory = function(category) {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => meta.category === category)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\nwindow.getExistingFiles = function() {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => meta.exists)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\nwindow.getMissingFiles = function() {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => !meta.exists)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\n// Kawaii ASCII TOC generator\nwindow.generateKawaiiTOC = function() {{\nconst existing = window.getExistingFiles();\nconst missing = window.getMissingFiles();\n\nlet toc = `\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502  \ud83c\udf38 Unhinged Static HTML Files \ud83c\udf38  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\ud83d\udcc1 control/static_html/\n`;\n\nexisting.forEach(file => {{\ntoc += `  \u2705 ${{file.title}}\\\\n`;\ntoc += `     \ud83d\udcc4 ${{file.path.split('/').pop()}}\\\\n`;\nif (file.description) {{\ntoc += `     \ud83d\udcad ${{file.description}}\\\\n`;\n}}\ntoc += `\\\\n`;\n}});\n\nif (missing.length > 0) {{\ntoc += `\\\\n\ud83d\udea8 Missing Files:\\\\n`;\nmissing.forEach(file => {{\ntoc += `  \u274c ${{file.title}}\\\\n`;\ntoc += `     \ud83d\udcc4 ${{file.path.split('/').pop()}}\\\\n`;\ntoc += `     \ud83d\udcad File not found - please create!\\\\n\\\\n`;\n}});\n}}\n\nreturn toc;\n}};\n\n// Helper functions for file structure access\nwindow.getFileStructure = function() {{\nreturn window.UNHINGED_FILE_STRUCTURE;\n}};\n\nwindow.getDirectoryContents = function(path) {{\nconst parts = path.split('/').filter(p => p);\nlet current = window.UNHINGED_FILE_STRUCTURE;\n\nfor (const part of parts) {{\nif (current && current[part] && current[part].children) {{\ncurrent = current[part].children;\n}} else {{\nreturn null;\n}}\n}}\n\nreturn current;\n}};\n\nwindow.findFilesByPattern = function(pattern) {{\nconst regex = new RegExp(pattern, 'i');\nconst results = [];\n\nfunction searchTree(node, path = '') {{\nif (!node || typeof node !== 'object') return;\n\nObject.entries(node).forEach(([name, item]) => {{\nconst fullPath = path ? `${{path}}/${{name}}` : name;\n\nif (item.type === 'file' && regex.test(name)) {{\nresults.push({{\npath: fullPath,\nname: name,\n...item\n}});\n}} else if (item.type === 'directory' && item.children) {{\nsearchTree(item.children, fullPath);\n}}\n}});\n}}\n\nsearchTree(window.UNHINGED_FILE_STRUCTURE);\nreturn results;\n}};\n\nconsole.log('\ud83d\udccb Unhinged Registry loaded with', Object.keys(window.UNHINGED_REGISTRY).length, 'files');\nconsole.log('\ud83d\uddc2\ufe0f File structure loaded with', Object.keys(window.UNHINGED_FILE_STRUCTURE).length, 'root directories');",
    "context": ""
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 375,
    "element_name": "build",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "main build function that generates the static",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does main build function that generates the static",
    "context": "def build(self, context: BuildContext) -> BuildModuleResult:"
  },
  {
    "file_path": "build/modules/registry_builder.py",
    "line_number": 444,
    "element_name": "clean",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "removes generated registry.js file",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does removes generated registry.js file",
    "context": "def clean(self, context: BuildContext) -> bool:"
  },
  {
    "file_path": "build/modules/proto_client_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "proto-to-polyglot client library generation module using ...",
    "llm_rule": "client libraries must be generated before service compilation and provide typ...",
    "raw_comment": "@llm-type config.build\n@llm-does proto-to-polyglot client library generation module using ...\n@llm-rule client libraries must be generated before service compilation and provide typ...",
    "context": ""
  },
  {
    "file_path": "build/modules/proto_client_builder.py",
    "line_number": 31,
    "element_name": "ProtoClientBuilder",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "polyglot protobuf client generation using unified dry",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does polyglot protobuf client generation using unified dry",
    "context": "class ProtoClientBuilder(BuildModule):"
  },
  {
    "file_path": "build/modules/typescript_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "typescript protobuf client generation handler with grpc-web",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does typescript protobuf client generation handler with grpc-web",
    "context": ""
  },
  {
    "file_path": "build/modules/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "language-specific build modules for enhanced build orches...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does language-specific build modules for enhanced build orches...",
    "context": ""
  },
  {
    "file_path": "build/modules/__init__.py",
    "line_number": 229,
    "element_name": "validate_build_patterns",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "validate build system patterns and cultural commandments",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does validate build system patterns and cultural commandments",
    "context": "def validate_build_patterns(repo_root: Path) -> List[str]:"
  },
  {
    "file_path": "build/modules/c_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "c/c++ build module with cmake integration and",
    "llm_rule": "c builds must be deterministic, fast, and provide direct cpu instruction acce...",
    "raw_comment": "@llm-type service.api\n@llm-does c/c++ build module with cmake integration and\n@llm-rule c builds must be deterministic, fast, and provide direct cpu instruction acce...",
    "context": ""
  },
  {
    "file_path": "build/modules/python_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "python build module with virtual environment management",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does python build module with virtual environment management",
    "context": ""
  },
  {
    "file_path": "build/modules/python_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "python protobuf client generation handler for ai/ml",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does python protobuf client generation handler for ai/ml",
    "context": ""
  },
  {
    "file_path": "build/modules/service_discovery_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "service discovery build module for compile-time service",
    "llm_rule": "service discovery must happen at build time to ensure html dashboard is alway...",
    "raw_comment": "@llm-type config.build\n@llm-does service discovery build module for compile-time service\n@llm-rule service discovery must happen at build time to ensure html dashboard is alway...",
    "context": ""
  },
  {
    "file_path": "build/modules/service_discovery_builder.py",
    "line_number": 26,
    "element_name": "ServiceDiscoveryBuilder",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "build-time service discovery module following existing bu...",
    "llm_rule": "service registry must be generated before html dashboard access",
    "raw_comment": "@llm-type config.build\n@llm-does build-time service discovery module following existing bu...\n@llm-rule service registry must be generated before html dashboard access",
    "context": "class ServiceDiscoveryBuilder(BuildModule):"
  },
  {
    "file_path": "build/modules/dual_system_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "dual-system desktop application build module for ci/cd",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does dual-system desktop application build module for ci/cd",
    "context": ""
  },
  {
    "file_path": "build/modules/kotlin_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "kotlin protobuf client generation handler for jvm",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does kotlin protobuf client generation handler for jvm",
    "context": ""
  },
  {
    "file_path": "build/modules/polyglot_proto_engine.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "unified polyglot protobuf client generation engine with",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does unified polyglot protobuf client generation engine with",
    "context": ""
  },
  {
    "file_path": "build/modules/polyglot_proto_engine.py",
    "line_number": 150,
    "element_name": "PolyglotProtoEngine",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "unified engine for generating protobuf clients across",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does unified engine for generating protobuf clients across",
    "context": "class PolyglotProtoEngine:"
  },
  {
    "file_path": "build/modules/c_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "c/c++ protobuf client generation handler for high-perform...",
    "llm_rule": "c++ proto clients must provide maximum performance for system-level services",
    "raw_comment": "@llm-type config.build\n@llm-does c/c++ protobuf client generation handler for high-perform...\n@llm-rule c++ proto clients must provide maximum performance for system-level services",
    "context": ""
  },
  {
    "file_path": "build/modules/kotlin_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "kotlin/gradle build module with incremental compilation and",
    "llm_rule": "gradle builds must be deterministic and support incremental compilation for f...",
    "raw_comment": "@llm-type service.api\n@llm-does kotlin/gradle build module with incremental compilation and\n@llm-rule gradle builds must be deterministic and support incremental compilation for f...",
    "context": ""
  },
  {
    "file_path": "build/validators/port_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "port conflict detection and resolution at build",
    "llm_rule": "port conflicts must be resolved at build time, never at runtime",
    "raw_comment": "@llm-type config.build\n@llm-does port conflict detection and resolution at build\n@llm-rule port conflicts must be resolved at build time, never at runtime",
    "context": ""
  },
  {
    "file_path": "build/validators/port_validator.py",
    "line_number": 61,
    "element_name": "validate_project",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate all port allocations in the project\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler",
    "context": "def validate_project(self) -> List[PortConflict]:"
  },
  {
    "file_path": "build/validators/resource_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "resource requirement validation at build time",
    "llm_rule": "resource issues must be detected at build time, never at runtime",
    "raw_comment": "@llm-type config.build\n@llm-does resource requirement validation at build time\n@llm-rule resource issues must be detected at build time, never at runtime",
    "context": ""
  },
  {
    "file_path": "build/validators/resource_validator.py",
    "line_number": 40,
    "element_name": "validate_resources",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate all resource requirements in the project\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler",
    "context": "def validate_resources(self) -> List[ResourceIssue]:"
  },
  {
    "file_path": "build/validators/kotlin_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "kotlin-specific validation for build patterns and code",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does kotlin-specific validation for build patterns and code",
    "context": ""
  },
  {
    "file_path": "build/validators/kotlin_validator.py",
    "line_number": 13,
    "element_name": "KotlinValidator",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "kotlin-specific validation for build patterns and code",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does kotlin-specific validation for build patterns and code",
    "context": "class KotlinValidator(BaseValidator):"
  },
  {
    "file_path": "build/validators/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "compile-time validation system that eliminates runtime er...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does compile-time validation system that eliminates runtime er...",
    "context": ""
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "polyglot validation system for enforcing unhinged codebase",
    "llm_rule": "all validation must be fast, parallel, actionable, and educational",
    "raw_comment": "@llm-type config.build\n@llm-does polyglot validation system for enforcing unhinged codebase\n@llm-rule all validation must be fast, parallel, actionable, and educational",
    "context": ""
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 24,
    "element_name": "ValidationResult",
    "language": "python",
    "llm_type": "model.entity",
    "llm_does": "result from a validation check with severity,",
    "llm_rule": null,
    "raw_comment": "@llm-type model.entity\n@llm-does result from a validation check with severity,",
    "context": "class ValidationResult:"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 39,
    "element_name": "ValidationSummary",
    "language": "python",
    "llm_type": "model.entity",
    "llm_does": "summary of all validation results with metrics",
    "llm_rule": null,
    "raw_comment": "@llm-type model.entity\n@llm-does summary of all validation results with metrics",
    "context": "class ValidationSummary:"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 53,
    "element_name": "BaseValidator",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "abstract base class for all validators in",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does abstract base class for all validators in",
    "context": "class BaseValidator(ABC):"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 81,
    "element_name": "FilePatternValidator",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "file creation patterns and prevents scattered cruft",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does file creation patterns and prevents scattered cruft",
    "context": "class FilePatternValidator(BaseValidator):"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 201,
    "element_name": "GeneratedContentValidator",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "that generated content is properly located in",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does that generated content is properly located in",
    "context": "class GeneratedContentValidator(BaseValidator):"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 240,
    "element_name": "PolyglotValidationRunner",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "main validation runner that coordinates all validators",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does main validation runner that coordinates all validators",
    "context": "class PolyglotValidationRunner:"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 279,
    "element_name": "run_validation",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "run all validators in parallel and return",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does run all validators in parallel and return",
    "context": "async def run_validation(self, auto_fix: bool = False) -> ValidationSummary:"
  },
  {
    "file_path": "build/validators/polyglot_validator.py",
    "line_number": 340,
    "element_name": "main",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "main entry point for polyglot validation system",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does main entry point for polyglot validation system",
    "context": "async def main():"
  },
  {
    "file_path": "build/validators/dependency_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "dependency validation at build time to prevent",
    "llm_rule": "dependency issues must be resolved at build time, never at runtime",
    "raw_comment": "@llm-type config.build\n@llm-does dependency validation at build time to prevent\n@llm-rule dependency issues must be resolved at build time, never at runtime",
    "context": ""
  },
  {
    "file_path": "build/validators/dependency_validator.py",
    "line_number": 37,
    "element_name": "validate_dependencies",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate all service dependencies in the project\n\n@llm-future This becomes part of Unhinged OS service orchestration compiler",
    "context": "def validate_dependencies(self) -> List[DependencyIssue]:"
  },
  {
    "file_path": "build/validators/python_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "python-specific validation for code quality, imports, and",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does python-specific validation for code quality, imports, and",
    "context": ""
  },
  {
    "file_path": "build/validators/python_validator.py",
    "line_number": 14,
    "element_name": "PythonValidator",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "python-specific validation for code quality and unhinged",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does python-specific validation for code quality and unhinged",
    "context": "class PythonValidator(BaseValidator):"
  },
  {
    "file_path": "build/validators/python_validator.py",
    "line_number": 241,
    "element_name": "PythonFormatterValidator",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "python code formatting validation using black and",
    "llm_rule": null,
    "raw_comment": "@llm-type util.validator\n@llm-does python code formatting validation using black and",
    "context": "class PythonFormatterValidator(BaseValidator):"
  },
  {
    "file_path": ".llmdocs-backup/build/llm_integration.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend LLM integration for enhanced build system with context generation and error explanation\n@llm-key Provides AI-powered build assistance, error explanation, and context generation for developer onboarding\n@llm-map LLM integration layer that connects build system with existing documentation system for enhanced developer experience\n@llm-axiom LLM integration must provide helpful, accurate, and contextual assistance without overwhelming developers\n@llm-contract Returns structured LLM responses with build context, error explanations, and optimization suggestions\n@llm-token llm-build-integration: AI-powered assistance for build system operations\n\nLLM Integration for Enhanced Build System\n\nIntegrates the enhanced build system with the existing LLM documentation system\nto provide:\n- Build context generation for AI assistance\n- Error explanation and troubleshooting\n- Optimization suggestions\n- Developer onboarding assistance\n- Build process documentation\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/cli.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Enhanced CLI interface for the Unhinged build system\n@llm-key Provides developer-friendly command-line interface with progress indicators, build status, and LLM integration\n@llm-map CLI layer that wraps the build orchestrator with enhanced user experience and developer tools\n@llm-axiom CLI must provide clear feedback, helpful error messages, and efficient developer workflows\n@llm-contract Returns appropriate exit codes and provides structured output for both humans and scripts\n@llm-token build-cli: Command-line interface for enhanced build system\n\nEnhanced Build System CLI\n\nProvides a developer-friendly command-line interface for the enhanced build system\nwith features like:\n- Real-time progress indicators\n- Build status monitoring\n- LLM-powered error explanation\n- Performance profiling\n- Interactive build selection\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/orchestrator.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Enhanced build orchestrator for Unhinged polyglot monorepo\n@llm-key Provides intelligent dependency tracking, parallel execution, caching, and multi-language build coordination\n@llm-map Central build coordination system that integrates with existing Makefile and Docker Compose workflows\n@llm-axiom Build operations must be deterministic, cacheable, and provide clear feedback to developers\n@llm-contract Returns BuildResult with success status, artifacts, and performance metrics\n@llm-token build-orchestrator: Python service coordinating all build operations across languages\n\nEnhanced Build Orchestrator for Unhinged Platform\n\nCoordinates builds across Kotlin, TypeScript, Python, and Protobuf with intelligent\ndependency tracking, parallel execution, and comprehensive caching.\n\nFeatures:\n- Dependency graph resolution\n- Parallel execution with resource management\n- Intelligent caching with content-based keys\n- Build performance monitoring\n- Integration with existing Makefile commands\n- LLM-powered error explanation\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/orchestrator.py",
    "line_number": 563,
    "element_name": "validate_build_configuration",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate build configuration at compile time\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler\nReturns list of validation errors that must be fixed before build",
    "context": "def validate_build_configuration(self) -> List[str]:"
  },
  {
    "file_path": ".llmdocs-backup/build/monitoring.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Build performance monitoring and metrics collection system\n@llm-key Provides comprehensive build performance tracking, caching analytics, and optimization insights\n@llm-map Performance monitoring system that tracks build metrics and provides optimization recommendations\n@llm-axiom Performance monitoring must be lightweight and provide actionable insights for developers\n@llm-contract Returns structured performance data and optimization recommendations\n@llm-token build-monitoring: Performance tracking and analytics for build system\n\nBuild Performance Monitoring System\n\nProvides comprehensive monitoring and analytics for the enhanced build system:\n- Build time tracking and analysis\n- Cache performance metrics\n- Resource utilization monitoring\n- Performance trend analysis\n- Optimization recommendations\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/developer_experience.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Developer experience enhancements for the enhanced build system\n@llm-key Provides developer-friendly features like progress indicators, quick commands, and better error messages\n@llm-map Developer experience layer that makes the build system more accessible and productive for developers\n@llm-axiom Developer experience must reduce friction and provide clear, actionable feedback\n@llm-contract Returns enhanced user interfaces and developer productivity tools\n@llm-token dev-experience: Developer productivity enhancements for build system\n\nDeveloper Experience Enhancements\n\nProvides developer-friendly features for the enhanced build system:\n- Progress indicators and status displays\n- Quick setup and development commands\n- Interactive target selection\n- Build status dashboard\n- Error recovery suggestions\n- Performance insights\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/build.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Main entry point for the Unhinged build system (v1)\n@llm-key Provides unified access to intelligent build orchestration with caching, parallelism, and AI assistance\n@llm-map Primary build system entry point with clean v1 interface\n@llm-axiom Build system must be simple, fast, and provide clear feedback\n@llm-contract Provides clean v1 interface for all build operations\n@llm-token build-v1: Main entry point for v1 build system\n\nUnhinged Build System (v1)\n\nPrimary entry point for the consolidated build system with:\n- Intelligent caching and parallel execution\n- AI-powered development assistance\n- Performance monitoring and optimization\n- Clean, simple interface\n\nUsage:\npython build/build.py build dev-fast        # Fast development build\npython build/build.py status                # Show build status\npython build/build.py list                  # List all targets\npython build/build.py explain dev-fast      # Explain build target\n\nAuthor: Unhinged Team\nVersion: 1.0.0 (Consolidated)\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/python/run.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.runner",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type util.runner\n@llm-purpose Executes Python scripts with ML/AI environment isolation\n@llm-contract Python Script -> Execution Result\n@llm-axiom All execution must be reproducible and pipeline ready\n@llm-deps Apache Stack, Virtual Environment\n\nUniversal Python Runner for Unhinged System:\n- Single virtual environment for all Python execution\n- Apache stack integration (Kafka, Spark, Flink, Cassandra)\n- ML/AI pipeline support with proper environment setup\n- Consistent execution across build system, services, and ETL\n- On-premise big data processing capabilities",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/python/run.py",
    "line_number": 32,
    "element_name": "UnhingedPythonRunner",
    "language": "python",
    "llm_type": "python-executor",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type python-executor\n@llm-legend Centralized Python execution engine for ML/AI ETL and big data pipelines\n@llm-key Universal Python runner with Apache stack integration and environment management\n@llm-map Core execution engine enabling consistent Python environments across all services\n@llm-axiom Python execution must be reproducible, environment-aware, and big data ready\n@llm-token python-executor: Production Python execution with ML/AI and big data support",
    "context": "class UnhingedPythonRunner:"
  },
  {
    "file_path": ".llmdocs-backup/build/python/setup.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "python-setup",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type python-setup\n@llm-legend Python environment setup for Unhinged on-premise ML/AI ETL & Big Data pipelines\n@llm-key Centralized Python environment creation with Apache stack and ML/AI dependencies\n@llm-map Environment setup enabling ML/AI ETL pipelines with Kafka, Spark, Flink, Cassandra\n@llm-axiom Python environment must be reproducible, comprehensive, and big data ready\n@llm-token python-setup: Production Python environment setup for ML/AI and big data workflows\n\nPython Environment Setup for Unhinged System:\n- Creates single virtual environment for all Python execution\n- Installs comprehensive ML/AI and big data dependencies\n- Configures Apache stack integration (Kafka, Spark, Flink)\n- Sets up development tools and Jupyter environment\n- Ensures reproducible on-premise big data processing",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/python/setup.py",
    "line_number": 33,
    "element_name": "UnhingedPythonSetup",
    "language": "python",
    "llm_type": "python-environment-setup",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type python-environment-setup\n@llm-legend Comprehensive Python environment setup for ML/AI ETL and big data processing\n@llm-key Environment creation with Apache stack integration and ML/AI pipeline support\n@llm-map Core setup tool enabling consistent Python environments for on-premise big data\n@llm-axiom Environment setup must be reproducible, comprehensive, and failure-resistant\n@llm-token python-environment-setup: Production environment creation for ML/AI workflows",
    "context": "class UnhingedPythonSetup:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/llm-context-warmer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "tool",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type tool\n@llm-legend LLM context warming system for onboarding new AI agents to the Unhinged monorepo\n@llm-context Provides paginated, structured summaries of codebase culture, vision, and architecture",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/llm-context-warmer.py",
    "line_number": 17,
    "element_name": "LLMContextWarmer",
    "language": "python",
    "llm_type": "class",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type class\n@llm-legend Generates structured context summaries for new LLM agents joining the project\n@llm-context Converts extracted comments into digestible chunks with pagination support",
    "context": "class LLMContextWarmer:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/llm-context-warmer.py",
    "line_number": 37,
    "element_name": "generate_project_overview",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Generates comprehensive project overview from extracted comments\n@llm-context Creates high-level summary perfect for LLM context warming",
    "context": "def generate_project_overview(self) -> Dict[str, Any]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/llm-context-warmer.py",
    "line_number": 86,
    "element_name": "_extract_key_components",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Extract key system components with improved name resolution and cross-references\n@llm-context Addresses LLM feedback about unknown element names and missing navigation",
    "context": "def _extract_key_components(self) -> List[Dict[str, str]]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/llm-context-warmer.py",
    "line_number": 123,
    "element_name": "paginate_comments",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Provides paginated access to all extracted comments for detailed review\n@llm-context Allows LLMs to scroll through codebase comments in digestible chunks",
    "context": "def paginate_comments(self, page: int = 1) -> Dict[str, Any]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/llm-context-warmer.py",
    "line_number": 156,
    "element_name": "_improve_element_name",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Improve element name detection from file paths when element_name is unknown\n@llm-context Addresses LLM feedback about unknown element names in service files",
    "context": "def _improve_element_name(self, comment: Dict[str, Any]) -> str:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/llm-context-warmer.py",
    "line_number": 179,
    "element_name": "_find_related_services",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Find related services through port references, API calls, and integration patterns\n@llm-context Addresses LLM feedback about lack of cross-reference navigation capabilities",
    "context": "def _find_related_services(self, comment: Dict[str, Any]) -> List[str]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/llm-context-warmer.py",
    "line_number": 232,
    "element_name": "_validate_context_completeness",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Validate that service and component comments have proper context information\n@llm-context Addresses LLM feedback about null llm_context fields where context should exist",
    "context": "def _validate_context_completeness(self, comments: List[Dict[str, Any]]) -> List[Dict[str, str]]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/llm-context-warmer.py",
    "line_number": 254,
    "element_name": "_generate_getting_started_section",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Generate getting started section with setup commands and prerequisites\n@llm-context Addresses LLM feedback about missing getting started section in overview",
    "context": "def _generate_getting_started_section(self) -> Dict[str, Any]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/llm-context-warmer.py",
    "line_number": 283,
    "element_name": "_extract_dependency_information",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Extract dependency and build system information from configuration files\n@llm-context Addresses LLM feedback about missing dependency/setup information",
    "context": "def _extract_dependency_information(self) -> Dict[str, Any]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/llm-context-warmer.py",
    "line_number": 316,
    "element_name": "_validate_legend_completeness",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Validate that @llm-legend entries are complete and not truncated\n@llm-context Addresses LLM feedback about incomplete/truncated legend entries",
    "context": "def _validate_legend_completeness(self, comments: List[Dict[str, Any]]) -> List[Dict[str, str]]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/llm-context-warmer.py",
    "line_number": 351,
    "element_name": "generate_enhanced_project_overview",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Generate enhanced project overview addressing all LLM feedback for 10/10 rating\n@llm-context Includes getting started, dependencies, and complete information sections",
    "context": "def generate_enhanced_project_overview(self) -> Dict[str, Any]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "test",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type test\n@llm-legend TDD test suite ensuring extraction and validation correctness\n@llm-context Defines expected behavior for all LLM comment processing functions",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 41,
    "element_name": "test_extract_llm_context_from_python",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test extraction of @llm-context from Python docstring.",
    "context": "def test_extract_llm_context_from_python(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 42,
    "element_name": "test_extract_llm_context_from_python",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\"\"\"\n@llm-type service\n@llm-legend Processes user requests\n@llm-context Handles HTTP requests with rate limiting and caching\n\"\"\"\ndef process():\npass",
    "context": "def test_extract_llm_context_from_python(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 69,
    "element_name": "test_extract_llm_context_from_typescript",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test extraction of @llm-context from TypeScript JSDoc.",
    "context": "def test_extract_llm_context_from_typescript(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 70,
    "element_name": "test_extract_llm_context_from_typescript",
    "language": "python",
    "llm_type": "component",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "/**\n* @llm-type component\n* @llm-legend React component for user authentication\n* @llm-context Manages login state and JWT token refresh\n*/\nexport const AuthComponent = () => {\nreturn null;\n};",
    "context": "def test_extract_llm_context_from_typescript(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 90,
    "element_name": "test_parse_llm_tags_with_context",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test parsing of all tags including @llm-context.",
    "context": "def test_parse_llm_tags_with_context(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 91,
    "element_name": "test_parse_llm_tags_with_context",
    "language": "python",
    "llm_type": "validator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type validator\n@llm-legend Validates user input\n@llm-key Checks format and business rules\n@llm-map Part of validation pipeline\n@llm-axiom Never trust user input\n@llm-contract Returns ValidationResult or throws\n@llm-token user-validator\n@llm-context Integrates with form handling and error display",
    "context": "def test_parse_llm_tags_with_context(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 142,
    "element_name": "test_validate_comment_with_context",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test validation accepts @llm-context.",
    "context": "def test_validate_comment_with_context(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 203,
    "element_name": "TestLLMContextWarmerImprovements",
    "language": "python",
    "llm_type": "test",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type test\n@llm-legend Test suite for LLM context warmer improvements based on feedback\n@llm-context Validates element name detection, cross-references, and context completeness",
    "context": "class TestLLMContextWarmerImprovements(unittest.TestCase):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 210,
    "element_name": "test_element_name_detection_from_service_path",
    "language": "python",
    "llm_type": "test",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type test\n@llm-legend Test element name extraction from services directory paths\n@llm-context Addresses LLM feedback about unknown element names in service files",
    "context": "def test_element_name_detection_from_service_path(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 241,
    "element_name": "test_element_name_detection_from_python_file",
    "language": "python",
    "llm_type": "test",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type test\n@llm-legend Test element name extraction from Python file names\n@llm-context Ensures Python modules get proper names instead of unknown",
    "context": "def test_element_name_detection_from_python_file(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 270,
    "element_name": "test_find_related_services_by_port_references",
    "language": "python",
    "llm_type": "test",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type test\n@llm-legend Test cross-reference detection between services using port numbers\n@llm-context Addresses LLM feedback about lack of cross-reference navigation",
    "context": "def test_find_related_services_by_port_references(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 315,
    "element_name": "test_context_completeness_validation",
    "language": "python",
    "llm_type": "test",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type test\n@llm-legend Test validation of context completeness for service components\n@llm-context Addresses LLM feedback about null llm_context fields where context should exist",
    "context": "def test_context_completeness_validation(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 357,
    "element_name": "test_pagination_data_integrity",
    "language": "python",
    "llm_type": "test",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type test\n@llm-legend Test that pagination maintains complete data integrity across pages\n@llm-context Ensures no data loss or corruption when browsing paginated comments",
    "context": "def test_pagination_data_integrity(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 418,
    "element_name": "TestLLMContextWarmerEnhancements",
    "language": "python",
    "llm_type": "test",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type test\n@llm-legend Test suite for final LLM context warmer enhancements addressing 9/10 feedback\n@llm-context Validates getting started section, dependency info, and complete legend handling",
    "context": "class TestLLMContextWarmerEnhancements(unittest.TestCase):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 425,
    "element_name": "test_getting_started_section_generation",
    "language": "python",
    "llm_type": "test",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type test\n@llm-legend Test generation of getting started section with setup and dependency information\n@llm-context Addresses LLM feedback about missing getting started section in overview",
    "context": "def test_getting_started_section_generation(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 469,
    "element_name": "test_dependency_information_extraction",
    "language": "python",
    "llm_type": "test",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type test\n@llm-legend Test extraction of dependency and setup information from build files\n@llm-context Addresses LLM feedback about missing dependency/setup information in overview",
    "context": "def test_dependency_information_extraction(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 506,
    "element_name": "test_complete_legend_validation",
    "language": "python",
    "llm_type": "test",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type test\n@llm-legend Test validation that legends are complete and not truncated\n@llm-context Addresses LLM feedback about incomplete/truncated @llm-legend entries",
    "context": "def test_complete_legend_validation(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/test_llm_extraction.py",
    "line_number": 549,
    "element_name": "test_enhanced_overview_with_getting_started",
    "language": "python",
    "llm_type": "test",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type test\n@llm-legend Test that enhanced overview includes getting started and dependency sections\n@llm-context Validates complete overview addresses all LLM feedback points for 10/10 rating",
    "context": "def test_enhanced_overview_with_getting_started(self):"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/extract-llm-comments.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "LLM Comment Extraction System\n\nParses @llm-* tags from code comments across all programming languages\nin the Unhinged monorepo and generates architectural documentation.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/extract-llm-comments.py",
    "line_number": 132,
    "element_name": "_parse_llm_tags",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Parse @llm-* tags from comment text",
    "context": "def _parse_llm_tags(self, comment_text: str, file_path: str, line_number: int,"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/extract-llm-comments.py",
    "line_number": 243,
    "element_name": "_parse_llm_tags",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Parse @llm-* tags from Python docstring",
    "context": "def _parse_llm_tags(self, comment_text: str, file_path: str, line_number: int,"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/extract-llm-comments.py",
    "line_number": 485,
    "element_name": "generate_architectural_overview",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Generate architectural overview from @llm-map comments",
    "context": "def generate_architectural_overview(self) -> str:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/extract-llm-comments.py",
    "line_number": 573,
    "element_name": "extract_comments_from_file",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Extracts all @llm-* comments from a single source file using appropriate language parser\n@llm-context TDD interface function for testing individual file processing",
    "context": "def extract_comments_from_file(file_path: str) -> List[LLMComment]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/extract-llm-comments.py",
    "line_number": 594,
    "element_name": "extract_comments_from_codebase",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Extracts all @llm-* comments from entire codebase using multi-language parsers\n@llm-context TDD interface function for testing full codebase processing",
    "context": "def extract_comments_from_codebase(root_path: Path) -> List[LLMComment]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/extract-llm-comments.py",
    "line_number": 604,
    "element_name": "parse_llm_tags",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Parses individual @llm-* tags from comment text using regex patterns\n@llm-context TDD interface function for testing tag parsing logic",
    "context": "def parse_llm_tags(text: str) -> Dict[str, str]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/extract-llm-comments.py",
    "line_number": 634,
    "element_name": "save_extraction_results",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Saves extracted comments to JSON with metadata\n@llm-context TDD interface function for testing result serialization",
    "context": "def save_extraction_results(comments: List[LLMComment], output_path: Path) -> Dict:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/validate-llm-comments.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "LLM Comment Validation System\n\nValidates consistency and quality of @llm-* comments across the codebase.\nIntegrates with the existing documentation validation workflow.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/validate-llm-comments.py",
    "line_number": 287,
    "element_name": "validate_comment",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Validates individual comment for completeness and quality\n@llm-context TDD interface function for testing single comment validation",
    "context": "def validate_comment(comment) -> List[Dict]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/validate-llm-comments.py",
    "line_number": 299,
    "element_name": "validate_all_comments",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Validates batch of comments and returns summary\n@llm-context TDD interface function for testing batch validation",
    "context": "def validate_all_comments(comments: List) -> Dict:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/validate-llm-comments.py",
    "line_number": 324,
    "element_name": "check_required_tags",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Validates comment has all required tags for its type\n@llm-context TDD interface function for testing required tag validation",
    "context": "def check_required_tags(comment) -> List[Dict]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/validate-llm-comments.py",
    "line_number": 351,
    "element_name": "check_tag_format",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Validates tag content meets quality standards\n@llm-context TDD interface function for testing tag format validation",
    "context": "def check_tag_format(comment) -> List[Dict]:"
  },
  {
    "file_path": ".llmdocs-backup/build/docs-generation/llm_types.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "contract",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type contract\n@llm-legend Defines data structures and interfaces for LLM comment extraction/validation\n@llm-context Central type system ensuring consistency across extraction and validation pipeline",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/tools/dead-code-analyzer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "dead-code-analyzer",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type dead-code-analyzer\n@llm-legend Comprehensive dead code and cruft detection tool for Unhinged codebase\n@llm-key Identifies unused files, phantom modules, orphaned documentation, and build artifacts\n@llm-map Integrates with existing dependency tracker and build system for accurate analysis\n@llm-axiom Dead code analysis must be conservative to avoid deleting functional code\n@llm-contract Provides systematic cleanup recommendations with safety classifications\n@llm-token dead-code-analyzer: Systematic cruft detection and cleanup tool\n\nDead Code and Cruft Analyzer for Unhinged\n\nSystematic analysis tool that identifies unused/dead code and files using multiple\napproaches including dependency tracing, build system analysis, and static analysis.\n\nFeatures:\n- Makefile dependency root analysis\n- Build system integration tracing\n- Phantom module detection\n- Orphaned documentation identification\n- Static file reference analysis\n- Conservative safety classifications\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-01-27",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/tools/dead-code-analyzer.py",
    "line_number": 61,
    "element_name": "DeadCodeAnalyzer",
    "language": "python",
    "llm_type": "analyzer-class",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Comprehensive dead code and cruft analyzer.\n\n@llm-type analyzer-class\n@llm-legend Main analyzer implementing multi-approach dead code detection\n@llm-key Uses dependency tracing, build analysis, and static analysis for accuracy",
    "context": "class DeadCodeAnalyzer:"
  },
  {
    "file_path": ".llmdocs-backup/build/tools/cleanup-dead-code.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "cleanup-tool",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type cleanup-tool\n@llm-legend Safe dead code cleanup tool with backup and rollback capabilities\n@llm-key Removes identified dead code with safety checks and backup mechanisms\n@llm-map Integrates with dead-code-analyzer for systematic codebase cleanup\n@llm-axiom Cleanup operations must be reversible and include comprehensive safety checks\n@llm-contract Provides safe cleanup with backup, dry-run, and rollback capabilities\n@llm-token cleanup-tool: Safe dead code removal with backup and rollback\n\nDead Code Cleanup Tool\n\nSafe removal tool for dead code identified by the dead-code-analyzer.\nIncludes backup mechanisms, dry-run mode, and rollback capabilities.\n\nFeatures:\n- Safety level filtering (only remove safe items by default)\n- Backup creation before deletion\n- Dry-run mode for preview\n- Rollback capability\n- Size and impact reporting\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-01-27",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/tools/cleanup-dead-code.py",
    "line_number": 48,
    "element_name": "DeadCodeCleanup",
    "language": "python",
    "llm_type": "cleanup-class",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Safe dead code cleanup tool.\n\n@llm-type cleanup-class\n@llm-legend Safe cleanup implementation with backup and rollback capabilities\n@llm-key Removes dead code with comprehensive safety checks and recovery options",
    "context": "class DeadCodeCleanup:"
  },
  {
    "file_path": ".llmdocs-backup/build/tools/llmdocs-evolution-engine.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.migrator",
    "llm_does": "transforms 8-tag LlmDocs to 3-tag evolved format",
    "llm_rule": "must preserve semantic meaning while eliminating redundancy",
    "raw_comment": "@llm-type util.migrator\n@llm-does transforms 8-tag LlmDocs to 3-tag evolved format\n@llm-rule must preserve semantic meaning while eliminating redundancy",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/tools/llmdocs-v2-migrator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.migrator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type util.migrator\n@llm-purpose Migrates LlmDocs from V1 to V2 format\n@llm-contract V1 LlmDocs -> V2 LlmDocs\n@llm-axiom Migration must preserve semantic meaning while reducing redundancy",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/tools/llm-docs-enforcer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build-tool",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-tool\n@llm-legend Automated LLM documentation header enforcement across all source files\n@llm-key Validates and injects standardized @llm- headers into Python, Kotlin, and other source files\n@llm-map Build-time tool ensuring documentation consistency across the entire codebase\n@llm-axiom All source files must have @llm- documentation headers for AI comprehension\n@llm-contract Fails build if files lack proper documentation headers\n@llm-token llm-docs-enforcer: Automated documentation header validation and injection",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/tools/llm-docs-enforcer.py",
    "line_number": 21,
    "element_name": "LLMDocsEnforcer",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Enforces LLM documentation standards across all source files.\n\nValidates and injects @llm- headers into source files to ensure\nconsistent documentation for AI comprehension.",
    "context": "class LLMDocsEnforcer:"
  },
  {
    "file_path": ".llmdocs-backup/build/tools/llm-docs-enforcer.py",
    "line_number": 49,
    "element_name": "scan_files",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Scan directories for source files requiring @llm- headers.",
    "context": "def scan_files(self, directories: List[str]) -> List[Path]:"
  },
  {
    "file_path": ".llmdocs-backup/build/tools/llm-docs-enforcer.py",
    "line_number": 71,
    "element_name": "_should_process_file",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Determine if file should be processed for @llm- headers.",
    "context": "def _should_process_file(self, file_path: Path) -> bool:"
  },
  {
    "file_path": ".llmdocs-backup/build/tools/llm-docs-enforcer.py",
    "line_number": 90,
    "element_name": "validate_file",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate if file has proper @llm- headers.",
    "context": "def validate_file(self, file_path: Path) -> Tuple[bool, List[str]]:"
  },
  {
    "file_path": ".llmdocs-backup/build/tools/llm-docs-enforcer.py",
    "line_number": 107,
    "element_name": "inject_headers",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Inject @llm- headers into file if missing.",
    "context": "def inject_headers(self, file_path: Path, file_type: str = None) -> bool:"
  },
  {
    "file_path": ".llmdocs-backup/build/tools/llm-docs-enforcer.py",
    "line_number": 145,
    "element_name": "_generate_header",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Generate appropriate @llm- header for file.",
    "context": "def _generate_header(self, file_path: Path, file_type: str) -> str:"
  },
  {
    "file_path": ".llmdocs-backup/build/tools/llm-docs-enforcer.py",
    "line_number": 170,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "{llm_type}",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type {llm_type}\n@llm-legend {file_name} - {purpose}\n@llm-key Core functionality for {file_path.stem}\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token {file_path.stem}: {purpose}",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/tools/llm-docs-enforcer.py",
    "line_number": 180,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "{llm_type}",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "{line_comment} @llm-type {llm_type}\n{line_comment} @llm-legend {file_name} - {purpose}\n{line_comment} @llm-key Core functionality for {file_path.stem}\n{line_comment} @llm-map Part of the Unhinged system architecture\n{line_comment} @llm-axiom Maintains system independence and architectural compliance\n{line_comment} @llm-contract Provides standardized interface for system integration\n{line_comment} @llm-token {file_path.stem}: {purpose}",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/tools/llm-docs-enforcer.py",
    "line_number": 191,
    "element_name": "enforce_compliance",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Enforce @llm- documentation compliance across directories.",
    "context": "def enforce_compliance(self, directories: List[str], fix: bool = False) -> bool:"
  },
  {
    "file_path": ".llmdocs-backup/build/ci/ci-config.yml",
    "line_number": 2,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "ci-configuration",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type ci-configuration\n@llm-legend CI/CD pipeline configuration integrating with enhanced build system\n@llm-key Defines CI/CD workflows, test suites, and deployment automation\n@llm-map Central CI/CD configuration extending build-config.yml\n@llm-axiom CI/CD must maintain build system independence and caching benefits\n@llm-contract Provides CI/CD pipeline definitions and integration points\n@llm-token ci-config: CI/CD configuration for automated testing and deployment",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/ci/scripts/build-verification.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Build Verification Script for CI/CD Pipeline\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nComprehensive build verification that integrates with the enhanced build system.\nValidates builds, dependencies, and system integrity before deployment.\n\n## Features\n- Integration with build/orchestrator.py\n- Intelligent caching validation\n- Parallel build execution\n- Comprehensive error reporting\n- Performance metrics collection\n\n@llm-principle Reliable build verification with enhanced build system integration\n@llm-culture Independence through comprehensive automated validation",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/ci/scripts/build-verification.py",
    "line_number": 44,
    "element_name": "BuildVerificationRunner",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Build verification runner with enhanced build integration\n\nCoordinates build verification using the existing enhanced build system\nwhile providing CI/CD specific validation and reporting.",
    "context": "class BuildVerificationRunner:"
  },
  {
    "file_path": ".llmdocs-backup/build/orchestration/docker-compose.production.yml",
    "line_number": 5,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "infrastructure-config",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type infrastructure-config\n@llm-legend Production docker-compose with unified service definitions\n@llm-key Single source of truth for production service orchestration\n@llm-map Primary production deployment replacing fragmented compose files\n@llm-axiom All services use categorical port allocation for conflict prevention\n@llm-contract Provides complete service stack with health checks and networking\n@llm-token docker-compose-production: Unified production service orchestration\n\n============================================================================",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/orchestration/docker-compose.development.yml",
    "line_number": 5,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "infrastructure-config",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type infrastructure-config\n@llm-legend Development docker-compose with debug tools and hot-reload\n@llm-key Development environment with debugging and monitoring tools\n@llm-map Development deployment with additional observability services\n@llm-axiom Development services include debugging and monitoring capabilities\n@llm-contract Provides complete development stack with hot-reload and debugging\n@llm-token docker-compose-development: Development environment with debugging tools\n\n============================================================================",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/config/build-config.yml",
    "line_number": 2,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "build-configuration",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-configuration\n@llm-legend Main build configuration for Unhinged platform\n@llm-key Defines build targets, dependencies, and orchestration settings\n@llm-map Central configuration for build system orchestration\n@llm-axiom Build configuration must maintain system independence\n@llm-contract Provides build target definitions and dependency management\n@llm-token build-config: Central build configuration for Unhinged platform",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/typescript_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend TypeScript/npm build module with webpack optimization and hot reloading\n@llm-key Provides optimized npm builds with webpack, hot module replacement, and intelligent caching\n@llm-map TypeScript build module that integrates with npm/webpack build system and provides enhanced caching\n@llm-axiom TypeScript builds must support hot reloading for development and optimization for production\n@llm-contract Returns BuildModuleResult with JS bundle artifacts and build metrics\n@llm-token typescript-builder: npm/webpack-based build module for TypeScript/React projects\n\nTypeScript/npm Build Module\n\nProvides optimized builds for TypeScript projects using npm/webpack with:\n- Hot module replacement for development\n- Bundle optimization for production\n- Source map generation\n- Dependency analysis\n- Asset management\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/registry_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build-module",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Static HTML registry generation module for control plane browser interface\n@llm-key Scans control/static_html directory and generates JavaScript registry following BuildModule interface\n@llm-map Integrates with existing build orchestrator as specialized module for static asset management\n@llm-axiom Must follow BuildModule contract and provide caching, validation, and artifact management\n@llm-contract Implements BuildModule interface with build(), cache_key(), and validate() methods\n@llm-token registry-builder: Build module for static HTML file registry generation\n\nRegistry Builder Module\n\nSpecialized build module that scans the control/static_html directory and generates\na JavaScript registry file for browser consumption. Integrates with the existing\nbuild orchestrator to provide caching, dependency tracking, and performance monitoring.\n\nFeatures:\n- Recursive HTML file discovery\n- Metadata extraction from HTML files\n- JavaScript registry generation\n- Content-based caching\n- Build artifact management\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/registry_builder.py",
    "line_number": 47,
    "element_name": "RegistryBuilder",
    "language": "python",
    "llm_type": "build-module",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Generates JavaScript registry of static HTML files for browser navigation\n@llm-key Scans filesystem, extracts HTML metadata, generates registry.js with kawaii ASCII TOC\n@llm-map Integrates with build orchestrator for caching and dependency management\n@llm-axiom Registry must be generated before browser access to ensure accurate file discovery\n@llm-contract Returns BuildResult with registry.js artifact or error details\n@llm-token static-html-registry: Browser-consumable file registry for navigation",
    "context": "class RegistryBuilder(BuildModule):"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/registry_builder.py",
    "line_number": 62,
    "element_name": "can_handle",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Determines if this module can handle the given build context\n@llm-key Checks for registry-related target names and static_html directory existence\n@llm-map Called by build orchestrator during module selection phase\n@llm-contract Returns True for registry targets, False otherwise",
    "context": "def can_handle(self, context: BuildContext) -> bool:"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/registry_builder.py",
    "line_number": 76,
    "element_name": "get_dependencies",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Returns list of files that affect registry generation\n@llm-key Scans control/static_html for all HTML files to establish dependencies\n@llm-map Used by build orchestrator for cache invalidation and dependency tracking\n@llm-contract Returns list of file paths that trigger registry regeneration when changed",
    "context": "def get_dependencies(self, context: BuildContext) -> List[str]:"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/registry_builder.py",
    "line_number": 94,
    "element_name": "calculate_cache_key",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Generates content-based cache key for registry generation\n@llm-key Combines file modification times and content hashes of all HTML files\n@llm-map Used by build orchestrator for intelligent cache invalidation\n@llm-contract Returns stable cache key that changes only when HTML files change",
    "context": "def calculate_cache_key(self, context: BuildContext) -> str:"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/registry_builder.py",
    "line_number": 121,
    "element_name": "extract_html_metadata",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Extracts title, description, and metadata from HTML file\n@llm-key Parses HTML content using regex to find title and meta tags\n@llm-map Helper function for registry generation process\n@llm-contract Returns metadata dict with title, description, category, and file info",
    "context": "def extract_html_metadata(self, file_path: Path) -> Dict[str, any]:"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/registry_builder.py",
    "line_number": 189,
    "element_name": "scan_static_html_directory",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Recursively scans control/static_html for HTML files and extracts metadata\n@llm-key Walks filesystem tree, processes each HTML file, builds registry dictionary\n@llm-map Core scanning function that builds the complete file registry\n@llm-contract Returns registry dict with absolute paths as keys and metadata as values",
    "context": "def scan_static_html_directory(self, project_root: Path) -> Dict[str, Dict]:"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/registry_builder.py",
    "line_number": 217,
    "element_name": "build_file_structure",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Builds hierarchical file structure for table-of-contents navigation\n@llm-key Scans control/static_html directory and creates nested structure with metadata\n@llm-map Generates browser-consumable file tree for navigation components\n@llm-contract Returns nested dict with directories and files organized hierarchically",
    "context": "def build_file_structure(self, project_root: Path) -> Dict:"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/registry_builder.py",
    "line_number": 284,
    "element_name": "generate_registry_js",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Generates JavaScript registry file with helper functions and kawaii ASCII TOC\n@llm-key Creates JavaScript module with registry object and utility functions\n@llm-map Converts Python registry dict to browser-consumable JavaScript\n@llm-contract Returns valid JavaScript code with UNHINGED_REGISTRY global",
    "context": "def generate_registry_js(self, registry: Dict[str, Dict], file_structure: Dict = None) -> str:"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/registry_builder.py",
    "line_number": 291,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "// Generated at: {datetime.now().isoformat()}\n// Run 'make start' to regenerate\n\n/**\n* @llm-type config\n* @llm-legend Global registry of static HTML files for browser navigation\n* @llm-key Auto-generated from filesystem scan, provides metadata for each HTML file\n* @llm-map Used by index.html and navigation components for file discovery\n* @llm-axiom Registry must be regenerated whenever HTML files are added/removed/modified\n* @llm-contract Provides consistent interface for file metadata and navigation\n* @llm-token unhinged-registry: Complete file registry for static HTML interface\n*/\nwindow.UNHINGED_REGISTRY = {json.dumps(registry, indent=2)};\n\n/**\n* @llm-type config\n* @llm-legend Hierarchical file structure for table-of-contents navigation\n* @llm-key Auto-generated directory tree with file metadata for browser navigation\n* @llm-map Used by table-of-contents.html for dynamic file structure display\n* @llm-axiom File structure regenerated on every make start to reflect current filesystem\n* @llm-contract Provides nested directory structure with file metadata\n* @llm-token unhinged-file-structure: Complete directory tree for navigation\n*/\nwindow.UNHINGED_FILE_STRUCTURE = {json.dumps(file_structure or {}, indent=2)};\n\n// Helper functions for registry access\nwindow.getRegistryEntry = function(path) {{\nreturn window.UNHINGED_REGISTRY[path] || null;\n}};\n\nwindow.getAllFiles = function() {{\nreturn Object.keys(window.UNHINGED_REGISTRY);\n}};\n\nwindow.getFilesByCategory = function(category) {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => meta.category === category)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\nwindow.getExistingFiles = function() {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => meta.exists)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\nwindow.getMissingFiles = function() {{\nreturn Object.entries(window.UNHINGED_REGISTRY)\n.filter(([path, meta]) => !meta.exists)\n.map(([path, meta]) => ({{path, ...meta}}));\n}};\n\n// Kawaii ASCII TOC generator\nwindow.generateKawaiiTOC = function() {{\nconst existing = window.getExistingFiles();\nconst missing = window.getMissingFiles();\n\nlet toc = `\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502  \ud83c\udf38 Unhinged Static HTML Files \ud83c\udf38  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\ud83d\udcc1 control/static_html/\n`;\n\nexisting.forEach(file => {{\ntoc += `  \u2705 ${{file.title}}\\\\n`;\ntoc += `     \ud83d\udcc4 ${{file.path.split('/').pop()}}\\\\n`;\nif (file.description) {{\ntoc += `     \ud83d\udcad ${{file.description}}\\\\n`;\n}}\ntoc += `\\\\n`;\n}});\n\nif (missing.length > 0) {{\ntoc += `\\\\n\ud83d\udea8 Missing Files:\\\\n`;\nmissing.forEach(file => {{\ntoc += `  \u274c ${{file.title}}\\\\n`;\ntoc += `     \ud83d\udcc4 ${{file.path.split('/').pop()}}\\\\n`;\ntoc += `     \ud83d\udcad File not found - please create!\\\\n\\\\n`;\n}});\n}}\n\nreturn toc;\n}};\n\n// Helper functions for file structure access\nwindow.getFileStructure = function() {{\nreturn window.UNHINGED_FILE_STRUCTURE;\n}};\n\nwindow.getDirectoryContents = function(path) {{\nconst parts = path.split('/').filter(p => p);\nlet current = window.UNHINGED_FILE_STRUCTURE;\n\nfor (const part of parts) {{\nif (current && current[part] && current[part].children) {{\ncurrent = current[part].children;\n}} else {{\nreturn null;\n}}\n}}\n\nreturn current;\n}};\n\nwindow.findFilesByPattern = function(pattern) {{\nconst regex = new RegExp(pattern, 'i');\nconst results = [];\n\nfunction searchTree(node, path = '') {{\nif (!node || typeof node !== 'object') return;\n\nObject.entries(node).forEach(([name, item]) => {{\nconst fullPath = path ? `${{path}}/${{name}}` : name;\n\nif (item.type === 'file' && regex.test(name)) {{\nresults.push({{\npath: fullPath,\nname: name,\n...item\n}});\n}} else if (item.type === 'directory' && item.children) {{\nsearchTree(item.children, fullPath);\n}}\n}});\n}}\n\nsearchTree(window.UNHINGED_FILE_STRUCTURE);\nreturn results;\n}};\n\nconsole.log('\ud83d\udccb Unhinged Registry loaded with', Object.keys(window.UNHINGED_REGISTRY).length, 'files');\nconsole.log('\ud83d\uddc2\ufe0f File structure loaded with', Object.keys(window.UNHINGED_FILE_STRUCTURE).length, 'root directories');",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/registry_builder.py",
    "line_number": 431,
    "element_name": "build",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Main build function that generates the static HTML registry\n@llm-key Scans filesystem, generates JavaScript registry, writes output file\n@llm-map Called by build orchestrator to execute registry generation\n@llm-contract Returns BuildModuleResult with success status and generated artifacts",
    "context": "def build(self, context: BuildContext) -> BuildModuleResult:"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/registry_builder.py",
    "line_number": 503,
    "element_name": "clean",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Removes generated registry.js file\n@llm-key Deletes output file to force regeneration on next build\n@llm-map Called by build orchestrator during clean operations\n@llm-contract Returns True if cleanup successful, False otherwise",
    "context": "def clean(self, context: BuildContext) -> bool:"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/proto_client_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build-module",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Proto-to-polyglot client library generation module using unified DRY architecture\n@llm-key Generates TypeScript, C, Python, Kotlin client libraries from protobuf definitions using polyglot engine\n@llm-map Integrates with build orchestrator to provide cached, parallel proto client generation with DRY principles\n@llm-axiom Client libraries must be generated before service compilation and provide type-safe APIs across all languages\n@llm-contract Implements BuildModule interface with polyglot engine for consistent multi-language client generation\n@llm-token proto-client-builder: DRY polyglot gRPC client library generation from protobuf schemas\n\nProto-to-Polyglot Client Library Generation Module (DRY Architecture)\n\nGenerates client libraries from Protocol Buffer service definitions for:\n- TypeScript (gRPC-Web for browsers)\n- C/C++ (high-performance native services)\n- Python (backend services and AI/ML)\n- Kotlin (JVM services and persistence platform)\n\nFeatures:\n- Unified polyglot generation engine (DRY principle)\n- Language-specific handlers for customization\n- Intelligent dependency tracking and caching\n- Parallel generation across languages\n- Cross-language type coordination\n- Pluggable language support\n\nAuthor: Unhinged Team\nVersion: 3.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/proto_client_builder.py",
    "line_number": 55,
    "element_name": "ProtoClientBuilder",
    "language": "python",
    "llm_type": "build-module",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Polyglot protobuf client generation using unified DRY engine architecture\n@llm-key Orchestrates TypeScript, C, Python, Kotlin proto client generation through pluggable handlers\n@llm-map Build module that eliminates code duplication in proto generation across multiple languages\n@llm-axiom All proto client generation must use the unified polyglot engine for consistency\n@llm-contract Returns BuildModuleResult with generated client artifacts across all specified languages\n@llm-token polyglot-proto-builder: Unified multi-language protobuf client generation orchestrator",
    "context": "class ProtoClientBuilder(BuildModule):"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/typescript_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "proto-handler",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type proto-handler\n@llm-legend TypeScript protobuf client generation handler with gRPC-Web support for browser applications\n@llm-key Generates TypeScript protobuf clients with gRPC-Web integration for frontend applications\n@llm-map TypeScript language handler for the polyglot proto engine providing browser-compatible gRPC clients\n@llm-axiom TypeScript proto clients must support both Node.js and browser environments with type safety\n@llm-contract Implements ProtoLanguageHandler interface for TypeScript protobuf and gRPC-Web client generation\n@llm-token typescript-proto-handler: Type-safe TypeScript protobuf client generation for web applications\n\nTypeScript Protocol Buffer Client Handler\n\nGenerates type-safe TypeScript protobuf clients for:\n- Browser applications (gRPC-Web)\n- Node.js services (gRPC)\n- Frontend frameworks (React, Vue, Angular)\n- Static HTML interfaces\n\nFeatures:\n- ts-proto plugin integration\n- gRPC-Web client generation\n- Type-safe interfaces\n- ESModule compatibility\n- Tree-shaking support\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "contract",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type contract\n@llm-legend Language-specific build modules for enhanced build orchestration\n@llm-key Provides specialized builders for Kotlin, TypeScript, Python, and Protobuf with caching and optimization\n@llm-map Build module system that integrates with main orchestrator for multi-language support\n@llm-axiom Each language builder must provide consistent interface and caching capabilities\n@llm-contract All builders implement BuildModule interface with build, cache, and validate methods\n@llm-token build-modules: Specialized build handlers for different programming languages\n\nEnhanced Build Modules Package\n\nProvides language-specific build modules that integrate with the main build orchestrator\nto provide optimized, cached, and parallel builds for different technologies.\n\nModules:\n- kotlin_builder: Gradle-based Kotlin/JVM builds with incremental compilation\n- typescript_builder: npm/webpack-based TypeScript builds with hot reloading\n- python_builder: pip/poetry-based Python builds with virtual environment management\n- protobuf_builder: Multi-language protobuf generation with smart caching\n- mobile_ui_builder: Mobile-responsive UI framework with CSS generation and validation\n- docker_builder: Container build optimization with layer caching\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/__init__.py",
    "line_number": 251,
    "element_name": "validate_build_patterns",
    "language": "python",
    "llm_type": "validation",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type validation\n@llm-legend Validate build system patterns and cultural commandments\n@llm-key Checks for scattered files, proper generated content location, and cultural compliance\n@llm-map Integrated enforcement that runs as part of build validation\n@llm-axiom Build validation must prevent chaos and maintain architectural integrity\n@llm-contract Returns list of violations, empty list means all patterns are valid\n@llm-token build-validation: Pattern enforcement integrated into build system\n\nValidate that build patterns are followed:\n- No scattered build files in root\n- Generated content in /generated/\n- No backup/temp files\n- Proper use of centralized Python environment",
    "context": "def validate_build_patterns(repo_root: Path) -> List[str]:"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/c_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend C/C++ build module with CMake integration and CFFI bindings\n@llm-key Provides optimized C builds with CMake, custom memory management, and Python CFFI integration\n@llm-map C build module that integrates with CMake build system and provides graphics rendering capabilities\n@llm-axiom C builds must be deterministic, fast, and provide direct CPU instruction access for maximum performance\n@llm-contract Returns BuildModuleResult with shared library artifacts and CFFI bindings\n@llm-token c-builder: CMake-based build module for C graphics rendering layer\n\nC Graphics Build Module\n\nProvides optimized builds for C graphics rendering projects with:\n- CMake configuration and build management\n- SIMD optimization detection (AVX2, NEON)\n- Platform-specific optimizations\n- CFFI Python bindings generation\n- Custom memory allocators\n- Performance profiling integration\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-25",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/python_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Python build module with virtual environment management and dependency caching\n@llm-key Provides optimized Python builds with pip/poetry, virtual environments, and intelligent caching\n@llm-map Python build module that integrates with pip/poetry build systems and provides enhanced caching\n@llm-axiom Python builds must use isolated virtual environments and cache dependencies effectively\n@llm-contract Returns BuildModuleResult with Python package artifacts and build metrics\n@llm-token python-builder: pip/poetry-based build module for Python services\n\nPython Build Module\n\nProvides optimized builds for Python projects with:\n- Virtual environment management\n- Dependency caching\n- Package building\n- Test execution\n- Requirements analysis\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/python_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "proto-handler",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type proto-handler\n@llm-legend Python protobuf client generation handler for AI/ML services and backend systems\n@llm-key Generates Python protobuf clients with gRPC support for AI services and backend applications\n@llm-map Python language handler for the polyglot proto engine providing gRPC client generation for ML/AI services\n@llm-axiom Python proto clients must support async/await patterns and integrate with AI/ML frameworks\n@llm-contract Implements ProtoLanguageHandler interface for Python protobuf and gRPC client generation\n@llm-token python-proto-handler: Python protobuf client generation for AI/ML services and backend systems\n\nPython Protocol Buffer Client Handler\n\nGenerates Python protobuf clients for:\n- AI/ML services (Whisper, Vision, LLM)\n- Backend gRPC services\n- Data processing pipelines\n- Async service integration\n\nFeatures:\n- Standard protoc Python generation\n- gRPC Python service stubs\n- Async/await support\n- Type hints integration\n- Package structure organization\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/service_discovery_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build-module",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Service discovery build module for compile-time service registry generation\n@llm-key Discovers Docker and gRPC services at build time, generates static JavaScript registry for system health dashboard\n@llm-map Integrates with existing build orchestrator using BuildModule contract for cached service discovery\n@llm-axiom Service discovery must happen at build time to ensure HTML dashboard is always up-to-date\n@llm-contract Implements BuildModule interface with docker-compose.yml and proto file parsing\n@llm-token service-discovery-builder: Build-time service discovery for system health monitoring\n\nService Discovery Build Module\n\nDiscovers services at build time from:\n- Docker Compose services (docker-compose.yml)\n- gRPC services (proto/*.proto files)\n- Health endpoint mappings\n- Service dependency topology\n\nGenerates static JavaScript registry consumed by system-health.html dashboard.\nFollows existing BuildModule contract pattern for consistency and caching.\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/service_discovery_builder.py",
    "line_number": 45,
    "element_name": "ServiceDiscoveryBuilder",
    "language": "python",
    "llm_type": "build-module",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Build-time service discovery module following existing BuildModule contract\n@llm-key Parses docker-compose.yml and proto files to generate static service registry\n@llm-map Integrates with build orchestrator for cached, dependency-aware service discovery\n@llm-axiom Service registry must be generated before HTML dashboard access\n@llm-contract Returns BuildModuleResult with service-registry.js artifact\n@llm-token build-time-service-discovery: Compile-time service discovery for health monitoring",
    "context": "class ServiceDiscoveryBuilder(BuildModule):"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/dual_system_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Dual-system desktop application build module for CI/CD integration\n@llm-key Builds and packages the enhanced GTK4 desktop application with conversation CLI integration\n@llm-map Build module that creates distribution packages for the dual-system architecture\n@llm-axiom Desktop application must include all dual-system components and be ready for immediate deployment\n@llm-contract Returns BuildModuleResult with desktop application packages and conversation CLI integration\n@llm-token dual-system-builder: Build module for dual-system desktop application packaging\n\nDual-System Desktop Application Build Module\n\nProvides comprehensive build and packaging for the dual-system architecture:\n- Enhanced GTK4 desktop application with conversation interface\n- Conversation CLI integration and packaging\n- Native C graphics dependency validation\n- Distribution package creation (DEB, AppImage, installation guides)\n- CI/CD integration for automated deployment\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-26",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/kotlin_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "proto-handler",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type proto-handler\n@llm-legend Kotlin protobuf client generation handler for JVM services and persistence platform\n@llm-key Generates Kotlin protobuf clients with gRPC support for JVM-based services and persistence layer\n@llm-map Kotlin language handler for the polyglot proto engine providing JVM gRPC client generation\n@llm-axiom Kotlin proto clients must integrate seamlessly with existing JVM services and provide coroutine support\n@llm-contract Implements ProtoLanguageHandler interface for Kotlin protobuf and gRPC client generation\n@llm-token kotlin-proto-handler: Kotlin protobuf client generation for JVM services and persistence platform\n\nKotlin Protocol Buffer Client Handler\n\nGenerates Kotlin protobuf clients for:\n- Persistence platform services\n- JVM-based microservices\n- Ktor web applications\n- Coroutine-based async services\n\nFeatures:\n- Kotlin protobuf generation\n- gRPC Kotlin stubs\n- Coroutine integration\n- Gradle build integration\n- Package organization\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/polyglot_proto_engine.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build-engine",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-engine\n@llm-legend Unified polyglot protobuf client generation engine with DRY architecture\n@llm-key Generates TypeScript, C, Python, Kotlin clients from protobuf definitions using shared generation patterns\n@llm-map Central proto generation engine that eliminates code duplication across language-specific generators\n@llm-axiom All proto client generation must use this unified engine to maintain consistency and reduce duplication\n@llm-contract Provides language-agnostic proto generation with pluggable language-specific handlers\n@llm-token polyglot-proto-engine: Unified DRY protobuf client generation for multiple languages\n\nPolyglot Protocol Buffer Client Generation Engine\n\nImplements DRY principle for proto client generation across:\n- TypeScript (gRPC-Web, browser clients)\n- C/C++ (native gRPC, high-performance services)\n- Python (gRPC services, AI/ML backends)\n- Kotlin (JVM services, persistence platform)\n\nFeatures:\n- Unified protoc command generation\n- Shared error handling and validation\n- Cross-language type coordination\n- Pluggable language handlers\n- Intelligent dependency tracking\n- Parallel generation support\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/polyglot_proto_engine.py",
    "line_number": 175,
    "element_name": "PolyglotProtoEngine",
    "language": "python",
    "llm_type": "proto-engine",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type proto-engine\n@llm-legend Unified engine for generating protobuf clients across multiple languages with DRY architecture\n@llm-key Coordinates TypeScript, C, Python, Kotlin proto generation using pluggable language handlers\n@llm-map Central orchestrator that eliminates duplication in proto generation logic across languages\n@llm-axiom All proto client generation must use this engine for consistency and maintainability\n@llm-contract Provides unified interface for multi-language proto generation with shared validation and error handling\n@llm-token polyglot-proto-coordinator: Multi-language protobuf client generation orchestrator",
    "context": "class PolyglotProtoEngine:"
  },
  {
    "file_path": ".llmdocs-backup/build/modules/c_proto_handler.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "proto-handler",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type proto-handler\n@llm-legend C/C++ protobuf client generation handler for high-performance native services\n@llm-key Generates C++ protobuf clients with gRPC support for native performance-critical services\n@llm-map C++ language handler for the polyglot proto engine providing native gRPC client generation\n@llm-axiom C++ proto clients must provide maximum performance for system-level services\n@llm-contract Implements ProtoLanguageHandler interface for C++ protobuf and gRPC client generation\n@llm-token c-proto-handler: High-performance C++ protobuf client generation for native services\n\nC/C++ Protocol Buffer Client Handler\n\nGenerates high-performance C++ protobuf clients for:\n- Native gRPC services\n- System-level integrations\n- Performance-critical components\n- Low-latency applications\n\nFeatures:\n- Standard protoc C++ generation\n- gRPC C++ service stubs\n- CMake build integration\n- Header/source file organization\n- Namespace management\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-20",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/modules/kotlin_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Kotlin/Gradle build module with incremental compilation and caching\n@llm-key Provides optimized Gradle builds with parallel execution, incremental compilation, and intelligent caching\n@llm-map Kotlin build module that integrates with Gradle build system and provides enhanced caching\n@llm-axiom Gradle builds must be deterministic and support incremental compilation for fast development\n@llm-contract Returns BuildModuleResult with JAR artifacts and build metrics\n@llm-token kotlin-builder: Gradle-based build module for Kotlin/JVM projects\n\nKotlin/Gradle Build Module\n\nProvides optimized builds for Kotlin projects using Gradle with:\n- Incremental compilation support\n- Parallel execution\n- Build cache integration\n- Dependency analysis\n- JAR artifact management\n\nAuthor: Unhinged Team\nVersion: 2.0.0\nDate: 2025-10-19",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/validators/port_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build-validator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-validator\n@llm-legend Port conflict detection and resolution at build time\n@llm-key Statically analyzes port allocations to prevent runtime binding failures\n@llm-map Compile-time port validation that eliminates Docker port conflicts\n@llm-axiom Port conflicts must be resolved at build time, never at runtime\n@llm-token port-validator: Static port allocation analyzer preventing runtime binding errors",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/validators/port_validator.py",
    "line_number": 64,
    "element_name": "validate_project",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate all port allocations in the project\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler",
    "context": "def validate_project(self) -> List[PortConflict]:"
  },
  {
    "file_path": ".llmdocs-backup/build/validators/resource_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build-validator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-validator\n@llm-legend Resource requirement validation at build time\n@llm-key Statically analyzes resource requirements to prevent runtime resource exhaustion\n@llm-map Compile-time resource validation ensuring adequate system resources\n@llm-axiom Resource issues must be detected at build time, never at runtime\n@llm-token resource-validator: Static resource analyzer preventing runtime resource failures",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/validators/resource_validator.py",
    "line_number": 43,
    "element_name": "validate_resources",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate all resource requirements in the project\n\n@llm-future This becomes part of Unhinged OS resource allocation compiler",
    "context": "def validate_resources(self) -> List[ResourceIssue]:"
  },
  {
    "file_path": ".llmdocs-backup/build/validators/kotlin_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "validator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type validator\n@llm-legend Kotlin-specific validation for build patterns and code quality\n@llm-key Validates Kotlin files for proper build structure, dependencies, and Unhinged patterns\n@llm-map Language-specific validator that checks Kotlin/Gradle patterns and conventions\n@llm-axiom Kotlin validation must enforce centralized build patterns and proper structure\n@llm-contract Validates Kotlin files for build compliance, dependencies, and pattern adherence\n@llm-token kotlin-validator: Kotlin and Gradle pattern validation for centralized build system\n\nKotlin Validator for Unhinged Monorepo\n\nValidates Kotlin-specific patterns:\n- Proper Gradle build structure\n- Dependency management patterns\n- Package structure and naming\n- Integration with centralized build system\n- Proto client generation compliance",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/validators/kotlin_validator.py",
    "line_number": 27,
    "element_name": "KotlinValidator",
    "language": "python",
    "llm_type": "validator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type validator\n@llm-legend Kotlin-specific validation for build patterns and code structure\n@llm-key Validates Kotlin files for proper build integration and patterns",
    "context": "class KotlinValidator(BaseValidator):"
  },
  {
    "file_path": ".llmdocs-backup/build/validators/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build-validation",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Build-Time Validators\n\n@llm-type build-validation\n@llm-legend Compile-time validation system that eliminates runtime errors through static analysis\n@llm-key Validates port allocations, dependencies, and resource requirements before any deployment\n@llm-map Central validation system that ensures zero-failure runtime execution\n@llm-axiom All runtime errors should be prevented by compile-time validation\n@llm-token build-validators: Static analysis system preventing runtime failures",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/validators/polyglot_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "validation-system",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type validation-system\n@llm-legend Polyglot validation system for enforcing Unhinged codebase patterns and cultural commandments\n@llm-key Modular, parallel validation runner that checks file patterns, build structure, and cultural compliance across all languages\n@llm-map Central validation orchestrator that coordinates language-specific validators and pattern checkers\n@llm-axiom All validation must be fast, parallel, actionable, and educational\n@llm-contract Provides unified validation interface with detailed reporting and optional auto-fixing\n@llm-token polyglot-validator: Comprehensive codebase pattern enforcement and validation system\n\nPolyglot Validation System for Unhinged Monorepo\n\nProvides comprehensive validation of:\n- File creation patterns and locations\n- Build system structure and compliance\n- Cultural commandments (independence, centralization)\n- Language-specific patterns and conventions\n- Generated content management\n- Documentation standards (llm-docs)\n\nDesigned for parallel execution and actionable feedback.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/validators/polyglot_validator.py",
    "line_number": 40,
    "element_name": "ValidationResult",
    "language": "python",
    "llm_type": "data-model",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type data-model\n@llm-legend Result from a validation check with severity, location, and fix suggestions\n@llm-key Structured validation result that provides actionable feedback to developers",
    "context": "class ValidationResult:"
  },
  {
    "file_path": ".llmdocs-backup/build/validators/polyglot_validator.py",
    "line_number": 56,
    "element_name": "ValidationSummary",
    "language": "python",
    "llm_type": "data-model",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type data-model\n@llm-legend Summary of all validation results with metrics and categorization\n@llm-key Comprehensive validation report for build system integration",
    "context": "class ValidationSummary:"
  },
  {
    "file_path": ".llmdocs-backup/build/validators/polyglot_validator.py",
    "line_number": 71,
    "element_name": "BaseValidator",
    "language": "python",
    "llm_type": "interface",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type interface\n@llm-legend Abstract base class for all validators in the polyglot system\n@llm-key Defines common interface for pattern validation, cultural checks, and language-specific rules",
    "context": "class BaseValidator(ABC):"
  },
  {
    "file_path": ".llmdocs-backup/build/validators/polyglot_validator.py",
    "line_number": 100,
    "element_name": "FilePatternValidator",
    "language": "python",
    "llm_type": "validator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type validator\n@llm-legend Validates file creation patterns and prevents scattered cruft\n@llm-key Checks for forbidden files in root, scattered build files, and proper directory usage",
    "context": "class FilePatternValidator(BaseValidator):"
  },
  {
    "file_path": ".llmdocs-backup/build/validators/polyglot_validator.py",
    "line_number": 221,
    "element_name": "GeneratedContentValidator",
    "language": "python",
    "llm_type": "validator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type validator\n@llm-legend Validates that generated content is properly located in /generated/\n@llm-key Checks for proto-generated files, build artifacts, and other generated content outside /generated/",
    "context": "class GeneratedContentValidator(BaseValidator):"
  },
  {
    "file_path": ".llmdocs-backup/build/validators/polyglot_validator.py",
    "line_number": 261,
    "element_name": "PolyglotValidationRunner",
    "language": "python",
    "llm_type": "orchestrator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type orchestrator\n@llm-legend Main validation runner that coordinates all validators in parallel\n@llm-key Executes validation checks concurrently and provides comprehensive reporting",
    "context": "class PolyglotValidationRunner:"
  },
  {
    "file_path": ".llmdocs-backup/build/validators/polyglot_validator.py",
    "line_number": 301,
    "element_name": "run_validation",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Run all validators in parallel and return comprehensive summary\n@llm-key Main entry point for validation system with optional auto-fixing",
    "context": "async def run_validation(self, auto_fix: bool = False) -> ValidationSummary:"
  },
  {
    "file_path": ".llmdocs-backup/build/validators/polyglot_validator.py",
    "line_number": 363,
    "element_name": "main",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type function\n@llm-legend Main entry point for polyglot validation system\n@llm-key Command-line interface for running validation with reporting",
    "context": "async def main():"
  },
  {
    "file_path": ".llmdocs-backup/build/validators/dependency_validator.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build-validator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-validator\n@llm-legend Dependency validation at build time to prevent runtime dependency failures\n@llm-key Statically analyzes service dependencies to ensure proper startup order\n@llm-map Compile-time dependency validation preventing runtime startup failures\n@llm-axiom Dependency issues must be resolved at build time, never at runtime\n@llm-token dependency-validator: Static dependency analyzer preventing runtime startup errors",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/validators/dependency_validator.py",
    "line_number": 40,
    "element_name": "validate_dependencies",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validate all service dependencies in the project\n\n@llm-future This becomes part of Unhinged OS service orchestration compiler",
    "context": "def validate_dependencies(self) -> List[DependencyIssue]:"
  },
  {
    "file_path": ".llmdocs-backup/build/validators/python_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "validator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type validator\n@llm-legend Python-specific validation for code quality, imports, and Unhinged patterns\n@llm-key Validates Python files for proper imports, llm-docs usage, and centralized environment compliance\n@llm-map Language-specific validator that checks Python code patterns and conventions\n@llm-axiom Python validation must enforce centralized environment usage and proper documentation\n@llm-contract Validates Python files for imports, documentation, and pattern compliance\n@llm-token python-validator: Python-specific pattern and quality validation\n\nPython Validator for Unhinged Monorepo\n\nValidates Python-specific patterns:\n- Proper use of centralized Python environment\n- LLM-docs comment standard compliance\n- Import patterns and dependencies\n- Code quality and formatting\n- Service structure and patterns",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/build/validators/python_validator.py",
    "line_number": 28,
    "element_name": "PythonValidator",
    "language": "python",
    "llm_type": "validator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type validator\n@llm-legend Python-specific validation for code quality and Unhinged patterns\n@llm-key Validates Python files for proper structure, imports, and documentation",
    "context": "class PythonValidator(BaseValidator):"
  },
  {
    "file_path": ".llmdocs-backup/build/validators/python_validator.py",
    "line_number": 256,
    "element_name": "PythonFormatterValidator",
    "language": "python",
    "llm_type": "validator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type validator\n@llm-legend Python code formatting validation using black and isort\n@llm-key Validates Python code formatting and can auto-fix formatting issues",
    "context": "class PythonFormatterValidator(BaseValidator):"
  },
  {
    "file_path": ".llmdocs-backup/vm/test-simple-communication.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Test Simple VM Communication Pipeline\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nTests the simplified VM communication pipeline to ensure:\n1. VM console output is visible in host terminal\n2. Communication is reliable and real-time\n3. VM status messages reach the host\n\n## Test Scenarios\n- VM boot messages \u2192 Host terminal\n- Unhinged status updates \u2192 Host terminal\n- Error messages \u2192 Host terminal\n- Graceful shutdown \u2192 Host terminal\n\n@llm-principle Test unidirectional communication reliability\n@llm-culture Verify independence through isolated VM communication",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/vm/test-enhanced-communication.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Test Enhanced VM Communication System\n@llm-version 2.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nComprehensive test suite for the enhanced VM communication system.\nTests both Phase 1 (unidirectional) and Phase 2 (bidirectional) communication.\n\n## Test Coverage\n- Simple VM launcher functionality\n- Enhanced VM launcher with bidirectional communication\n- QoL launcher with Makefile integration\n- Build system preservation\n- Communication protocol validation\n\n@llm-principle Test all communication modes thoroughly\n@llm-culture Verify independence through comprehensive validation",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/services/shared/__init__.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service-shared",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service-shared\n@llm-legend Shared service utilities and base classes for Unhinged services\n@llm-key Common service functionality eliminating DRY violations across services\n@llm-map Shared service components enabling consistent service architecture\n@llm-axiom Shared service code must be simple, reusable, and eliminate duplication\n@llm-contract Provides common service utilities, paths, and base classes\n@llm-token service-shared: Shared utilities and base classes for service consistency\n\nShared Service Components for Unhinged Services\nEliminates DRY violations and provides consistent service architecture",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/services/shared/paths.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service-utilities",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service-utilities\n@llm-legend Shared utilities for service path management and common service operations\n@llm-key Centralized path utilities eliminating hardcoded Docker paths across services\n@llm-map Common service utilities reducing DRY violations and standardizing service behavior\n@llm-axiom Service utilities must be simple, reusable, and eliminate path hardcoding\n@llm-contract Provides standardized path resolution and service directory management\n@llm-token service-utilities: Shared utilities for consistent service path management\n\nShared Service Utilities for Unhinged Services\nEliminates DRY violations and standardizes service behavior across all services",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/services/shared/paths.py",
    "line_number": 82,
    "element_name": "ServicePaths",
    "language": "python",
    "llm_type": "service-path-manager",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service-path-manager\n@llm-legend Service path manager providing standardized directory access\n@llm-key Centralized service path management eliminating hardcoded paths\n@llm-map Service path manager enabling consistent directory structure across services\n@llm-axiom Service paths must be consistent, predictable, and environment-agnostic\n@llm-contract Provides standardized service directory access and management\n@llm-token service-path-manager: Centralized service directory management\n\nCentralized service path management for consistent directory structure",
    "context": "class ServicePaths:"
  },
  {
    "file_path": ".llmdocs-backup/services/speech-to-text/simple_whisper_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Simple Whisper HTTP server for voice transcription\n@llm-key Provides HTTP endpoint for audio transcription using Whisper\n@llm-map Core voice transcription service for voice-first GUI experience\n@llm-axiom Voice transcription must work immediately without setup\n@llm-contract Provides /health and /transcribe endpoints for voice input\n@llm-token whisper-server: HTTP service for voice transcription\n\nSimple Whisper Server for Voice Transcription\n\nProvides HTTP endpoints for audio transcription using OpenAI Whisper.\nDesigned for immediate voice interaction in the Unhinged voice-first GUI.\n\nEndpoints:\n- GET /health - Health check\n- POST /transcribe - Transcribe audio file to text\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-26",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/services/speech-to-text/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend __init__.py - microservice component\n@llm-key Core functionality for __init__\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token __init__: microservice component",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/services/speech-to-text/main.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service-launcher",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service-launcher\n@llm-legend Speech-to-text service launcher with gRPC health.proto implementation\n@llm-key Launches gRPC API for speech transcription with standardized health endpoints\n@llm-map Main entry point for whisper-based speech-to-text service using health.proto\n@llm-axiom Service must implement health.proto for service discovery and monitoring\n@llm-contract Provides speech transcription via gRPC streaming API with health.proto compliance\n@llm-token speech-service: Whisper-based speech-to-text with gRPC and health.proto\n\nSpeech-to-Text Service Main Entry Point\n\ngRPC-only service with health.proto implementation:\n- gRPC API: Streaming audio processing and real-time transcription\n- Health checks: Implements unhinged.health.v1.HealthService\n- Service discovery integration via health.proto\n- Whisper model management and CUDA optimization",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/services/speech-to-text/grpc_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Speech-to-Text gRPC server with health.proto implementation\n@llm-key Provides STT capabilities via gRPC with standardized health endpoints\n@llm-map gRPC server for speech-to-text service using health.proto compliance\n@llm-axiom Service must implement health.proto for service discovery and monitoring\n@llm-contract Provides speech transcription via gRPC API with health.proto compliance\n@llm-token stt-service: Speech-to-text with gRPC and health.proto\n\nSpeech-to-Text gRPC Server - Proto-Compliant Implementation\n\nProvides Speech-to-Text (Whisper) capabilities with health.proto implementation:\n- STT processing: Whisper-based speech transcription\n- Health checks: Implements unhinged.health.v1.HealthService\n- Service discovery integration via health.proto\n- Whisper model management and CUDA optimization",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/services/text-to-speech/main.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service-launcher",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service-launcher\n@llm-legend Text-to-speech service launcher with gRPC health.proto implementation\n@llm-key Launches gRPC API for text-to-speech with standardized health endpoints\n@llm-map Main entry point for TTS service using health.proto\n@llm-axiom Service must implement health.proto for service discovery and monitoring\n@llm-contract Provides TTS via gRPC API with health.proto compliance\n@llm-token tts-service: Text-to-speech with gRPC and health.proto\n\nText-to-Speech Service Main Entry Point\n\ngRPC-only service with health.proto implementation:\n- gRPC API: Text-to-speech processing\n- Health checks: Implements unhinged.health.v1.HealthService\n- Service discovery integration via health.proto",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/services/text-to-speech/grpc_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Text-to-Speech gRPC server with health.proto implementation\n@llm-key Provides TTS capabilities via gRPC with standardized health endpoints\n@llm-map gRPC server for text-to-speech service using health.proto compliance\n@llm-axiom Service must implement health.proto for service discovery and monitoring\n@llm-contract Provides TTS via gRPC API with health.proto compliance\n@llm-token tts-service: Text-to-speech with gRPC and health.proto\n\nText-to-Speech gRPC Server\n\nImplements health.proto for service discovery:\n- Health checks: Implements unhinged.health.v1.HealthService\n- TTS processing: Basic text-to-speech functionality\n- Service discovery integration via health.proto",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/services/vision-ai/main.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service-launcher",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service-launcher\n@llm-legend Vision AI service launcher with gRPC health.proto implementation\n@llm-key Launches gRPC API for vision analysis with standardized health endpoints\n@llm-map Main entry point for vision AI service using health.proto\n@llm-axiom Service must implement health.proto for service discovery and monitoring\n@llm-contract Provides vision analysis via gRPC API with health.proto compliance\n@llm-token vision-service: Vision AI with gRPC and health.proto\n\nVision AI Service Main Entry Point\n\ngRPC-only service with health.proto implementation:\n- gRPC API: Image analysis and captioning\n- Health checks: Implements unhinged.health.v1.HealthService\n- Service discovery integration via health.proto\n- BLIP model management and processing",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/services/vision-ai/grpc_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Vision AI gRPC server with health.proto implementation\n@llm-key Provides vision analysis via gRPC with standardized health endpoints\n@llm-map gRPC server for vision AI service using health.proto compliance\n@llm-axiom Service must implement health.proto for service discovery and monitoring\n@llm-contract Provides vision analysis via gRPC API with health.proto compliance\n@llm-token vision-service: Vision AI with gRPC and health.proto\n\nVision AI gRPC Server\n\nImplements health.proto for service discovery:\n- Health checks: Implements unhinged.health.v1.HealthService\n- Vision processing: Image analysis and captioning\n- Service discovery integration via health.proto",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/enhanced_vm_launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced VM Launcher with Bidirectional Communication\n@llm-version 2.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nEnhanced VM launcher that extends simple_vm_launcher.py with bidirectional\ncommunication capabilities while maintaining the same reliability.\n\n## Communication Channels\n- **VM \u2192 Host**: Serial console output (inherited from simple launcher)\n- **Host \u2192 VM**: QEMU monitor socket for sending commands\n- **Protocol**: Structured JSON messages with fallback to plain text\n\n## Design Principles\n- **Backward Compatible**: Extends SimpleVMLauncher\n- **Reliable**: Robust error handling and fallback modes\n- **Real-time**: Immediate bidirectional communication\n- **Simple**: Easy to use and understand\n\n@llm-principle Build on proven foundation, add capabilities incrementally\n@llm-culture Independence through enhanced but reliable communication",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/enhanced_vm_launcher.py",
    "line_number": 46,
    "element_name": "EnhancedVMLauncher",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced VM Launcher with Bidirectional Communication\n\nExtends SimpleVMLauncher with Host \u2192 VM communication via QEMU monitor.\nMaintains all existing VM \u2192 Host functionality while adding new capabilities.",
    "context": "class EnhancedVMLauncher(SimpleVMLauncher):"
  },
  {
    "file_path": ".llmdocs-backup/control/enhanced_vm_launcher.py",
    "line_number": 70,
    "element_name": "launch_vm_with_bidirectional_communication",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Launch VM with Bidirectional Communication\n\nExtends the simple launcher with QEMU monitor socket for Host \u2192 VM commands.\nMaintains serial console for VM \u2192 Host output.",
    "context": "def launch_vm_with_bidirectional_communication(self):"
  },
  {
    "file_path": ".llmdocs-backup/control/enhanced_vm_launcher.py",
    "line_number": 166,
    "element_name": "send_to_vm",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Send Command to VM\n\nSends command to VM via QEMU monitor socket.\nProvides Host \u2192 VM communication capability.",
    "context": "def send_to_vm(self, command):"
  },
  {
    "file_path": ".llmdocs-backup/control/enhanced_vm_launcher.py",
    "line_number": 195,
    "element_name": "stream_enhanced_vm_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Stream Enhanced VM Output\n\nEnhanced version of stream_vm_output with bidirectional message processing.\nHandles structured messages and provides interactive capabilities.",
    "context": "def stream_enhanced_vm_output(self):"
  },
  {
    "file_path": ".llmdocs-backup/control/enhanced_vm_launcher.py",
    "line_number": 309,
    "element_name": "run",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced Main Entry Point\n\nMain entry point for enhanced VM launcher with bidirectional communication.",
    "context": "def run(self):"
  },
  {
    "file_path": ".llmdocs-backup/control/unhinged_launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Unhinged Quality-of-Life Launcher\n@llm-version 2.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nQuality-of-life launcher that provides enhanced user experience while calling\nMakefile targets \"behind the scenes\". Preserves Makefile as core build system.\n\n## Design Philosophy\n- **Makefile Preservation**: All build logic remains in Makefile\n- **Enhanced UX**: Better user experience with real-time feedback\n- **Behind-the-Scenes**: Calls Makefile targets internally\n- **Incremental**: Builds on existing infrastructure\n\n## Integration Strategy\n1. Call Makefile setup targets for dependencies\n2. Launch enhanced VM with bidirectional communication\n3. Provide real-time status and interaction\n4. Maintain all existing Makefile functionality\n\n@llm-principle Enhance experience while preserving build system foundation\n@llm-culture Independence through improved but reliable tooling",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/unhinged_launcher.py",
    "line_number": 46,
    "element_name": "UnhingedLauncher",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Quality-of-Life Launcher with Makefile Integration\n\nProvides enhanced user experience while calling Makefile targets behind\nthe scenes. Preserves Makefile as the core build system.",
    "context": "class UnhingedLauncher:"
  },
  {
    "file_path": ".llmdocs-backup/control/unhinged_launcher.py",
    "line_number": 73,
    "element_name": "call_makefile_target",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Call Makefile Target Behind the Scenes\n\nCalls Makefile targets while providing user feedback.\nPreserves all Makefile functionality while enhancing UX.",
    "context": "def call_makefile_target(self, target, description=None, silent=False):"
  },
  {
    "file_path": ".llmdocs-backup/control/unhinged_launcher.py",
    "line_number": 240,
    "element_name": "run",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Main Entry Point for Enhanced Launcher\n\nOrchestrates the entire enhanced launch process:\n1. Check prerequisites\n2. Setup dependencies via Makefile\n3. Build essentials via Makefile\n4. Launch enhanced VM\n5. Provide user interface",
    "context": "def run(self):"
  },
  {
    "file_path": ".llmdocs-backup/control/simple_vm_launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Simple VM Launcher for Unhinged\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nSimplified VM launcher focused on core unidirectional communication:\nVM visual CLI output \u2192 Ubuntu host terminal that ran 'make start'\n\n## Design Principles\n- **Simplicity**: Single communication channel (serial console)\n- **Reliability**: Direct output streaming to host terminal\n- **Minimal Dependencies**: No complex shared directories or SSH\n- **Real-time**: Immediate VM output visibility in host terminal\n\n## Communication Flow\n1. Host runs 'make start' \u2192 launches VM with serial console output\n2. VM boots and runs Unhinged graphics \u2192 outputs to serial console\n3. Serial console \u2192 directly streams to host terminal in real-time\n4. Host terminal shows VM output immediately\n\n@llm-principle Unidirectional communication first, bidirectional later\n@llm-culture Independence through VM isolation with simple communication",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/simple_vm_launcher.py",
    "line_number": 37,
    "element_name": "SimpleVMLauncher",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Simple VM Launcher with Direct Console Output\n\nLaunches QEMU VM and streams console output directly to host terminal.\nNo complex communication channels - just serial console output.",
    "context": "class SimpleVMLauncher:"
  },
  {
    "file_path": ".llmdocs-backup/control/simple_vm_launcher.py",
    "line_number": 113,
    "element_name": "launch_vm_with_console_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Launch VM with Direct Console Output\n\nLaunches QEMU VM and streams console output directly to host terminal.\nThis is the core unidirectional communication channel.",
    "context": "def launch_vm_with_console_output(self):"
  },
  {
    "file_path": ".llmdocs-backup/control/simple_vm_launcher.py",
    "line_number": 176,
    "element_name": "stream_vm_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Stream VM Output to Host Terminal\n\nReads VM console output and displays it in real-time on host terminal.\nThis provides immediate visibility of VM status and Unhinged graphics output.",
    "context": "def stream_vm_output(self):"
  },
  {
    "file_path": ".llmdocs-backup/control/simple_vm_launcher.py",
    "line_number": 243,
    "element_name": "run",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Main Entry Point\n\nSets up signal handlers and launches VM with console output streaming.\nThis is the simplified communication pipeline entry point.",
    "context": "def run(self):"
  },
  {
    "file_path": ".llmdocs-backup/control/proxy_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "virtualization-boundary",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type virtualization-boundary\n@llm-legend HTTP proxy server that represents the line-in-the-sand between Unhinged System Commands and host OS operations\n@llm-key Temporary shim server that will evolve into the primary interface for Unhinged OS virtualization layer\n@llm-map This server is the future kernel interface - every endpoint here represents a system call in Unhinged OS\n@llm-axiom This is where Unhinged abstractions meet raw system operations - design with future OS in mind\n@llm-contract Provides HTTP interface for system operations while maintaining audit trail for future OS development\n@llm-token virtualization-proxy: The foundational HTTP layer that will become the Unhinged OS system call interface\n@llm-evolution Every endpoint added here is a candidate for a future Unhinged OS system call or kernel operation\n\nARCHITECTURAL VISION:\nThis proxy server represents the exact boundary where Unhinged will eventually replace the host OS.\nCurrent: HTML \u2192 HTTP Proxy \u2192 System Controller \u2192 Build System \u2192 Docker \u2192 Host OS\nFuture:  HTML \u2192 HTTP Proxy \u2192 System Controller \u2192 Unhinged Kernel \u2192 Unhinged Hardware Abstraction\n\nVIRTUALIZATION ROADMAP:\n1. Phase 1 (Current): HTTP shim over existing build system\n2. Phase 2: Direct container orchestration bypassing Docker\n3. Phase 3: Custom process management and resource allocation\n4. Phase 4: Hardware abstraction layer\n5. Phase 5: Full Unhinged OS with custom kernel\n\nDESIGN PRINCIPLES:\n- Every HTTP endpoint maps to a future OS system call\n- All operations must be auditable for OS development insights\n- Resource management patterns here inform future kernel design\n- Security model here becomes the foundation for OS security",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/proxy_server.py",
    "line_number": 89,
    "element_name": "health_check",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Health check endpoint - Future: sys_health_check()\n\n@llm-future This becomes a fundamental OS health monitoring system call",
    "context": "async def health_check():"
  },
  {
    "file_path": ".llmdocs-backup/control/proxy_server.py",
    "line_number": 106,
    "element_name": "start_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Start a service tier - Future Unhinged OS system call: sys_start_tier()\n\n@llm-future This HTTP endpoint will become: int sys_start_tier(tier_id_t tier)\n@llm-kernel-design Service tiers are fundamental OS abstractions in Unhinged",
    "context": "async def start_service_tier(tier: str, request: Request):"
  },
  {
    "file_path": ".llmdocs-backup/control/proxy_server.py",
    "line_number": 153,
    "element_name": "stop_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Stop a service tier - Future: sys_stop_tier()\n\n@llm-future This becomes the foundation for Unhinged process lifecycle management",
    "context": "async def stop_service_tier(tier: str, request: Request):"
  },
  {
    "file_path": ".llmdocs-backup/control/proxy_server.py",
    "line_number": 182,
    "element_name": "get_system_status",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Get system status - Future: sys_get_system_info()\n\n@llm-future This endpoint design informs future OS status reporting",
    "context": "async def get_system_status():"
  },
  {
    "file_path": ".llmdocs-backup/control/proxy_server.py",
    "line_number": 212,
    "element_name": "get_virtualization_insights",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Endpoint for gathering insights about system operations for future OS design\n\n@llm-purpose Collect operational patterns that inform Unhinged OS kernel design",
    "context": "async def get_virtualization_insights():"
  },
  {
    "file_path": ".llmdocs-backup/control/conversation_cli.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Conversation-based CLI interface for Unhinged dual-system architecture\n@llm-key Provides voice-first conversation interface accessible from both GTK4 control plane and native Alpine environment\n@llm-map Conversation CLI that bridges GTK4 control plane with Alpine VM conversation system\n@llm-axiom Voice-first interaction must be immediate, natural, and work seamlessly across both systems\n@llm-contract Provides conversation interface with voice pipeline integration and session logging\n@llm-token conversation-cli: Voice-first conversation interface for dual-system architecture\n\nConversation-Based CLI Interface\n\nProvides voice-first conversation interface for the Unhinged dual-system architecture:\n- Accessible from both GTK4 control plane and native Alpine environment\n- Integrates with voice pipeline (arecord \u2192 Whisper \u2192 AI)\n- Maintains feature parity between host and guest systems\n- Session logging and diagnostics integration\n- Real-time conversation processing\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-26",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/service_launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control-system",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type control-system\n@llm-legend Service launcher with unified service registry integration\n@llm-key Launches essential services using centralized service discovery\n@llm-map Core service orchestration component replacing hardcoded configurations\n@llm-axiom Uses service registry for dynamic service discovery and health monitoring\n@llm-contract Provides cohesive service integration for GUI startup\n@llm-token service-launcher: Unified service orchestration with registry integration",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/service_launcher.py",
    "line_number": 238,
    "element_name": "_start_direct_service",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-key Direct service execution for non-Docker components\n@llm-contract Starts services via direct command execution with environment setup\n@llm-map Service launcher extension enabling voice transcription service integration\n\nStart a service using direct command execution rather than Docker Compose.\n\nThis method extends the service launcher to support services that run directly\nas Python processes rather than Docker containers, enabling integration of\ncomponents like the Whisper transcription service into the standard startup flow.\n\nKey Features:\n- Environment variable setup (PYTHONPATH, etc.)\n- Background process execution\n- Health check integration\n- Consistent service management interface\n\nArgs:\nservice: Service configuration dictionary with start_command\ntimeout: Maximum time to wait for service health check\n\nReturns:\nbool: True if service started successfully and passed health check",
    "context": "def _start_direct_service(self, service: Dict, timeout: int) -> bool:"
  },
  {
    "file_path": ".llmdocs-backup/control/service_launcher.py",
    "line_number": 294,
    "element_name": "_is_service_healthy",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-key Service health verification for direct and Docker services\n@llm-contract HTTP health check validation for service availability\n@llm-map Health monitoring component supporting voice transcription service integration\n\nCheck if a service is currently healthy via HTTP health endpoint.\n\nThis method provides unified health checking for both Docker Compose services\nand direct command services, enabling consistent service monitoring across\nthe voice transcription pipeline.\n\nArgs:\nservice: Service configuration with health_url\n\nReturns:\nbool: True if service responds successfully to health check",
    "context": "def _is_service_healthy(self, service: Dict) -> bool:"
  },
  {
    "file_path": ".llmdocs-backup/control/network/service_registry.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control-system",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type control-system\n@llm-legend service_registry.py - Central service discovery and registration system\n@llm-key Unified service discovery replacing hardcoded service configurations\n@llm-map Core component of the network control system providing service location transparency\n@llm-axiom Single source of truth for all service endpoints and health status\n@llm-contract Provides standardized service discovery interface for all system components\n@llm-token service_registry: Centralized service discovery and health monitoring",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/network/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control-system",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type control-system\n@llm-legend __init__.py - Network control system module initialization\n@llm-key Network subsystem providing service discovery and health monitoring\n@llm-map Core network control components for unified service management\n@llm-axiom Network layer maintains service discovery and health monitoring independence\n@llm-contract Provides standardized network control interface for system components\n@llm-token network-control: Unified network service management subsystem",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/deployment/deploy.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control-tool",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type control-tool\n@llm-legend Unified deployment orchestrator for Unhinged system runtime control\n@llm-key Central deployment automation with environment-aware orchestration and health validation\n@llm-map Runtime deployment control enabling automated service orchestration and monitoring\n@llm-axiom Deployments must be atomic, reversible, and health-validated for operational safety\n@llm-token deployment-orchestrator: Automated deployment control with environment management\n\nUnified Deployment Orchestrator:\n- Environment-aware deployment (dev, staging, production)\n- Health check validation before and after deployment\n- Rollback capability on deployment failures\n- Service dependency management\n- Integrated monitoring and logging",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/deployment/deploy.py",
    "line_number": 31,
    "element_name": "UnhingedDeploymentOrchestrator",
    "language": "python",
    "llm_type": "control-orchestrator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type control-orchestrator\n@llm-legend Central deployment orchestrator managing environment-aware service deployment\n@llm-key Automated deployment with health validation, dependency management, and rollback\n@llm-map Core operational tool for runtime service orchestration and deployment control\n@llm-axiom All deployments must be atomic, health-validated, and reversible\n@llm-token deployment-core: Production deployment orchestration with operational safety",
    "context": "class UnhingedDeploymentOrchestrator:"
  },
  {
    "file_path": ".llmdocs-backup/control/deployment/health-checks.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control-tool",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type control-tool\n@llm-legend Service health monitoring and validation for Unhinged runtime control\n@llm-key Continuous health monitoring with alerting and automatic recovery capabilities\n@llm-map Runtime health monitoring enabling proactive service management and reliability\n@llm-axiom Service health must be continuously monitored with automatic recovery actions\n@llm-token health-monitor: Continuous service health monitoring with automated recovery\n\nService Health Monitoring:\n- Real-time health check execution\n- Service dependency validation\n- Automatic recovery actions\n- Health metrics collection\n- Alert generation and notification",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/deployment/health-checks.py",
    "line_number": 57,
    "element_name": "UnhingedHealthMonitor",
    "language": "python",
    "llm_type": "control-monitor",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type control-monitor\n@llm-legend Continuous health monitoring system for Unhinged service ecosystem\n@llm-key Real-time health validation with dependency checking and automatic recovery\n@llm-map Core operational monitoring enabling proactive service reliability management\n@llm-axiom Health monitoring must be continuous, accurate, and trigger automatic recovery\n@llm-token health-monitor-core: Production health monitoring with automated recovery",
    "context": "class UnhingedHealthMonitor:"
  },
  {
    "file_path": ".llmdocs-backup/control/sdk/javascript/unhinged-sdk.js",
    "line_number": 1,
    "element_name": "UnhingedSDK",
    "language": "typescript",
    "llm_type": "client-sdk",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Unhinged System SDK - JavaScript Client\n\n@llm-type client-sdk\n@llm-legend JavaScript client SDK providing syntax sugar for Unhinged system operations\n@llm-key Beautiful API abstractions over HTTP control proxy for system calls\n@llm-map Client library that makes system operations feel like native JavaScript\n@llm-axiom All system operations should feel natural and intuitive to developers\n@llm-token unhinged-sdk: JavaScript client providing elegant system call abstractions\n\nBeautiful syntax sugar for system operations:\n- file.write(path, content) instead of fetch('/control/system/file/write')\n- service.start('applications') instead of fetch('/control/system/tier/applications/start')\n- network.ping(host) instead of raw HTTP calls\n- package.apt.install(name) instead of subprocess calls",
    "context": "class UnhingedSDK {"
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/realtime_system_info.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Real-time System Information Manager for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nProvides real-time system information updates for the GTK4 system info page\nwith efficient data collection and UI update mechanisms.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc GTK4 GUI Control Module\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nSimple GTK4 desktop application integration with direct control module access.\nAcademic exercise implementation - no abstraction layers, direct imports.\n\n@llm-principle Simple direct integration for learning and iteration\n@llm-culture Independence through straightforward implementation",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/system_info.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc System Information Collection Module for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nComprehensive system information gathering using psutil, platform, and system utilities.\nProvides structured data for the GTK4 system info page with proper error handling and caching.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/process_monitor.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Process Information Collection for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nCross-platform process monitoring using psutil for aux/top command equivalence\nwith efficient data collection, sorting, and process management capabilities.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/bluetooth_monitor.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Bluetooth Information Collection for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nCross-platform Bluetooth monitoring using D-Bus and bluetoothctl for device discovery,\npairing management, connection tracking, and adapter control capabilities.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/audio_monitor.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Audio Device Information Collection for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nCross-platform audio device monitoring using ALSA for device enumeration,\nvolume control, device switching, and connection management capabilities.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/desktop_app.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Unhinged Desktop Application for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nEnhanced GTK4 desktop application with comprehensive system monitoring, process management,\nBluetooth device control, and audio output management. Features tabbed interface with\nreal-time updates, component library integration, and professional design system.\n- Real-time status updates and progress indication\n- Integration with existing Makefile system and VM communication\n- User-friendly error handling and feedback\n\n## Design Principles\n- **Native Integration**: Uses GTK4 for authentic Ubuntu GNOME experience\n- **Functionality Mapping**: Executes same operations as 'make start'\n- **Visual Appeal**: Modern, clean interface following GNOME HIG\n- **Accessibility**: Keyboard navigation and screen reader support\n\n@llm-principle Native desktop integration with existing backend\n@llm-culture Independence through accessible graphical interface",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/desktop_app.py",
    "line_number": 86,
    "element_name": "UnhingedDesktopApp",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Main Desktop Application Class\n\nGTK4/Libadwaita application that provides graphical interface\nfor Unhinged platform functionality.\n\nFeatures:\n- Design system integration with semantic tokens\n- CSS loading from generated/design_system/gtk4/\n- Graceful fallback to Libadwaita defaults",
    "context": "class UnhingedDesktopApp(Adw.Application):"
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/desktop_app.py",
    "line_number": 256,
    "element_name": "create_main_window",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Create Main Application Window\n\nCreates the main GTK4 window with modern Ubuntu GNOME styling\nusing Libadwaita for native look and feel.",
    "context": "def create_main_window(self):"
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/desktop_app.py",
    "line_number": 1692,
    "element_name": "start_platform",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Start Platform Backend\n\nExecutes the same functionality as 'make start' but with\nGUI feedback and progress indication.",
    "context": "def start_platform(self):"
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/launch.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Simple GTK4 Desktop Application Launcher\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nSimple launcher for the GTK4 desktop application with direct control integration.\nAcademic exercise implementation.\n\n@llm-principle Simple direct integration for learning and iteration\n@llm-culture Independence through straightforward implementation",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/tests/__init__.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc GTK4 GUI Test Suite\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nConsolidated test suite for the GTK4 GUI components and modules.\nProvides comprehensive testing for all components, monitors, and integrations.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/tests/test_monitors.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Monitor Tests for GTK4 GUI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nComprehensive tests for all monitor modules including SystemInfo, ProcessMonitor,\nAudioMonitor, and BluetoothMonitor. Tests real system data collection, performance, and error handling.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/tests/test_components.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Component Library Test Script\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nSimple test script to verify all components work correctly.\nRun this to test the component library before integration.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/components/tables.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Generic Table Components for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nReusable table foundation components following design system patterns\nfor structured data display with sorting, filtering, and accessibility.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/components/base.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Base Component Classes for GTK4 Component Library\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nBase classes providing common functionality for all components:\n- Design system integration\n- Theme management\n- Event handling patterns\n- Accessibility support",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/components/example_usage.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Example Usage of Unhinged GTK4 Component Library\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nDemonstrates how to integrate the component library into your existing\nGTK4 application. Shows practical usage patterns and best practices.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/components/containers.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Container GTK4 Components\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nContainer components for organizing and grouping content:\n- StatusCard: Card displaying status information with icon and actions\n- ServicePanel: Panel for displaying service information and controls\n- LogContainer: Scrollable container for log content",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/components/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc GTK4 Component Library for Unhinged\n@llm-version 1.0.0\n@llm-date 2025-10-27\n@llm-author Unhinged Team\n\n## Overview\nFocused GTK4 component library that integrates with the Unhinged design system.\nProvides reusable, accessible widgets following GNOME HIG patterns.\n\n## Design Principles\n- **Design System Integration**: Uses semantic tokens from libs/design_system/\n- **Libadwaita First**: Builds on Adw widgets for native GNOME experience\n- **Focused Components**: Only components actually needed by the application\n- **Type Safety**: Proper GTK4 typing and signal handling\n- **Accessibility**: ARIA labels, keyboard navigation, screen reader support\n\n## Component Categories\n- **Primitives**: Basic building blocks (buttons, inputs, labels)\n- **Containers**: Layout and grouping (cards, panels, sections)\n- **Complex**: Stateful components (log viewer, progress indicators)\n- **System**: Application-level components (status displays, service rows)\n\n@llm-principle Focused, practical components with design system integration\n@llm-culture Independence through reusable, accessible UI components",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/components/complex.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Complex GTK4 Components\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nComplex components that combine multiple elements for comprehensive interfaces:\n- LogViewer: Advanced log viewer with filtering and search\n- ServiceRow: Complete service status row with controls\n- SystemStatus: Overall system status display\n- PerformanceIndicator: System performance monitoring display\n- ProcessTable: Complete process management interface\n- BluetoothTable: Bluetooth device management with discovery\n- AudioTable: Audio device management with volume control",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/components/primitives.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Primitive GTK4 Components\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nBasic building block components with design system integration:\n- ActionButton: Enhanced button with semantic styling\n- StatusLabel: Label with status styling (success, warning, error)\n- ProgressIndicator: Progress bar with semantic styling\n- HardwareInfoRow: Hardware information display row\n- ProcessRow: Process information display with controls\n- BluetoothRow: Bluetooth device display with connection controls\n- AudioDeviceRow: Audio device display with volume controls",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/gtk4_gui/components/integration_example.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Integration Example for Existing Desktop App\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nShows how to integrate the component library into your existing\ncontrol/gtk4_gui/desktop_app.py with minimal changes.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/system/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control-plane-package",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Unhinged Control System\n\n@llm-type control-plane-package\n@llm-legend System control abstraction layer package for Unhinged platform\n@llm-key Provides operational abstractions over build system while preparing for future OS virtualization\n@llm-map Central control plane that bridges DevOps operations with build orchestration\n@llm-axiom All system operations must be auditable, reversible, and provide clear operational feedback\n@llm-token control-system: Package containing system control abstractions and virtualization boundary interfaces",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/system/system_controller.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "control-plane",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type control-plane\n@llm-legend System control abstraction layer that bridges build orchestration with operations semantics\n@llm-key Translates DevOps operations (start/stop/restart) into build system targets while maintaining operational context\n@llm-map Central control plane that will evolve into virtualization boundary between Unhinged and host OS\n@llm-axiom All system operations must be auditable, reversible, and provide clear operational feedback\n@llm-contract Returns OperationResult with success status, affected services, and system state changes\n@llm-token system-controller: Control plane service managing the boundary between application logic and system operations\n@llm-evolution This is the foundation layer for future OS virtualization - every command here represents a potential kernel operation",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/system/system_controller.py",
    "line_number": 36,
    "element_name": "SystemController",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "System Control Abstraction Layer\n\nBridges operational semantics (start/stop services) with build system implementation.\nThis class represents the future boundary between Unhinged applications and the OS.\n\n@llm-future Every method here is a candidate for a future Unhinged OS system call\n@llm-virtualization This class will evolve into the primary OS interface",
    "context": "class SystemController:"
  },
  {
    "file_path": ".llmdocs-backup/control/system/system_controller.py",
    "line_number": 86,
    "element_name": "start_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Start a logical service tier\n\n@llm-future This will become: int sys_start_tier(tier_id_t tier)\n@llm-kernel-design Service tiers are fundamental OS abstractions in Unhinged",
    "context": "async def start_service_tier(self, tier: str) -> OperationResult:"
  },
  {
    "file_path": ".llmdocs-backup/control/system/system_controller.py",
    "line_number": 141,
    "element_name": "stop_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Stop a logical service tier\n\n@llm-future This will become: int sys_stop_tier(tier_id_t tier)",
    "context": "async def stop_service_tier(self, tier: str) -> OperationResult:"
  },
  {
    "file_path": ".llmdocs-backup/control/system/system_controller.py",
    "line_number": 204,
    "element_name": "_execute_docker_command",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Execute Docker command as fallback when build system unavailable\n\n@llm-future This direct command execution will be replaced by Unhinged container management",
    "context": "async def _execute_docker_command(self, operation: str, tier_config: Dict[str, Any]) -> OperationResult:"
  },
  {
    "file_path": ".llmdocs-backup/control/system/system_controller.py",
    "line_number": 247,
    "element_name": "get_system_status",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Get current system status\n\n@llm-future This will become: sys_get_system_info()",
    "context": "async def get_system_status(self) -> SystemStatus:"
  },
  {
    "file_path": ".llmdocs-backup/control/system/system_controller.py",
    "line_number": 301,
    "element_name": "get_operation_patterns",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Analyze operation patterns for future OS design insights\n\n@llm-purpose Collect operational patterns that inform Unhinged OS kernel design",
    "context": "def get_operation_patterns(self) -> Dict[str, Any]:"
  },
  {
    "file_path": ".llmdocs-backup/control/system/operation_result.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "data-model",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type data-model\n@llm-legend Operation result data model for system control operations\n@llm-key Standardized result format for all system operations with future OS compatibility\n@llm-map Result model that will evolve into OS system call return values\n@llm-axiom All operations must return structured, auditable results\n@llm-token operation-result: Data model for system operation results and future OS return values",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/system/operation_result.py",
    "line_number": 18,
    "element_name": "OperationResult",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Standardized result for system operations\n\n@llm-future This data structure will become the return format for Unhinged OS system calls\n@llm-evolution Each field here represents metadata that future OS kernel will track",
    "context": "class OperationResult:"
  },
  {
    "file_path": ".llmdocs-backup/control/system/operation_result.py",
    "line_number": 58,
    "element_name": "from_build_results",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Create OperationResult from build system results\n\n@llm-note This bridges build system results to operational semantics\n@llm-future This translation layer will be removed when we have direct OS operations",
    "context": "def from_build_results(cls, operation: str, build_results: List[Any]) -> 'OperationResult':"
  },
  {
    "file_path": ".llmdocs-backup/control/system/operation_result.py",
    "line_number": 101,
    "element_name": "SystemStatus",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Current system status snapshot\n\n@llm-future This will become the Unhinged OS system information structure",
    "context": "class SystemStatus:"
  },
  {
    "file_path": ".llmdocs-backup/control/config/environments/production.yml",
    "line_number": 2,
    "element_name": "environment",
    "language": "yaml",
    "llm_type": "control-config",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type control-config\n@llm-legend Production environment settings for Unhinged system deployment\n@llm-key Production-grade configuration with security, performance, and reliability settings\n@llm-map Production environment control configuration for operational deployment\n@llm-axiom Production environment must prioritize security, performance, and reliability\n@llm-token production-config: Production environment configuration for operational control",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/control/config/environments/development.yml",
    "line_number": 2,
    "element_name": "environment",
    "language": "yaml",
    "llm_type": "control-config",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type control-config\n@llm-legend Development environment settings for Unhinged system development\n@llm-key Development-friendly configuration with debugging and rapid iteration support\n@llm-map Development environment control configuration for local development\n@llm-axiom Development environment must prioritize developer experience and debugging\n@llm-token development-config: Development environment configuration for local control",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/docker-compose.yml",
    "line_number": 2,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "platform",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type platform\n@llm-legend docker-compose.yml - platform infrastructure component\n@llm-key Core functionality for docker-compose\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token docker-compose: platform infrastructure component\n\n============================================================================\nUnhinged Persistence Platform - Docker Compose Configuration\n============================================================================\n\n@file docker-compose.yml\n@version 1.0.0\n@author Unhinged Team\n@date 2025-10-19\n@description Docker Compose setup for the persistence platform\n\nThis Docker Compose file sets up all database technologies and the\npersistence platform service with proper networking, volumes, and\nenvironment configuration for development and testing.\n\nLocation: platforms/persistence/docker-compose.yml\n============================================================================",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/PersistencePlatformApplication.kt",
    "line_number": 27,
    "element_name": "PersistencePlatformApplication",
    "language": "kotlin",
    "llm_type": "application",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type application\n@llm-legend Main application entry point for the Persistence Platform\n@llm-key Application bootstrap that initializes platform, loads configuration, and starts API server\n@llm-map Main application orchestrating platform startup, configuration loading, and service initialization\n@llm-axiom Application must handle graceful startup and shutdown with proper error handling\n@llm-contract Provides complete platform initialization and API server startup with configuration management\n@llm-token persistence-platform-app: Main application entry point and bootstrap",
    "context": "class PersistencePlatformApplication {"
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/client/DatabaseClientRegistry.kt",
    "line_number": 24,
    "element_name": "DatabaseClientRegistry",
    "language": "kotlin",
    "llm_type": "database-registry",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type database-registry\n@llm-legend Unified database client registry for multi-database persistence platform\n@llm-key Manages CockroachDB, Redis, Cassandra, Chroma connections with health monitoring\n@llm-map Central access point for all database operations in Kotlin services\n@llm-axiom All database access must go through registry for monitoring and connection management\n@llm-contract Provides type-safe database clients with automatic health checking and reconnection\n@llm-token database-client-registry: Unified database access management for Kotlin backend",
    "context": "class DatabaseClientRegistry {"
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/monitoring/ObservabilityManager.kt",
    "line_number": 34,
    "element_name": "ObservabilityManager",
    "language": "kotlin",
    "llm_type": "observability-manager",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type observability-manager\n@llm-legend Comprehensive observability system providing metrics, tracing, and monitoring for the persistence platform\n@llm-key Central observability hub that collects metrics, traces requests, monitors health, and provides analytics\n@llm-map Complete monitoring solution with metrics collection, distributed tracing, and performance analytics\n@llm-axiom All persistence operations must be observable for proper monitoring and troubleshooting\n@llm-contract Provides comprehensive observability including metrics, tracing, health checks, and alerting\n@llm-token observability-manager: Complete monitoring and observability system",
    "context": "class ObservabilityManager("
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/model/CoreModels.kt",
    "line_number": 26,
    "element_name": "ExecutionContext",
    "language": "kotlin",
    "llm_type": "model",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type model\n@llm-legend Execution context that carries request metadata, tracing, and security information\n@llm-key Provides request context for all persistence operations including auth, tracing, and metadata\n@llm-map Context object passed through all persistence operations for observability and security\n@llm-axiom All persistence operations must include execution context for proper tracing and security\n@llm-contract Contains user identity, trace information, and request metadata for operation execution\n@llm-token execution-context: Request context for persistence operations",
    "context": "data class ExecutionContext("
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/core/OperationOrchestrator.kt",
    "line_number": 25,
    "element_name": "OperationOrchestrator",
    "language": "kotlin",
    "llm_type": "interface",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type interface\n@llm-legend Operation orchestrator that manages complex multi-technology operations and workflows\n@llm-key Coordinates distributed transactions, async pipelines, and ML workflows across database technologies\n@llm-map Central orchestration engine for complex operations requiring multiple database interactions\n@llm-axiom All complex operations must be orchestrated through this interface for consistency and reliability\n@llm-contract Provides transaction management, workflow orchestration, and error handling for complex operations\n@llm-token operation-orchestrator: Complex operation coordination and workflow management",
    "context": "interface OperationOrchestrator {"
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/core/DatabaseProvider.kt",
    "line_number": 25,
    "element_name": "DatabaseProvider",
    "language": "kotlin",
    "llm_type": "interface",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type interface\n@llm-legend Database provider interface that each technology implements for platform integration\n@llm-key Defines contract for database operations that enables unified access across all technologies\n@llm-map Technology-specific implementations provide database access while maintaining common interface\n@llm-axiom Each database technology must implement this interface to participate in the platform\n@llm-contract Provides standardized CRUD, query, and management operations for any database technology\n@llm-token database-provider: Technology-specific database access interface",
    "context": "interface DatabaseProvider {"
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/core/QueryExecutor.kt",
    "line_number": 23,
    "element_name": "QueryExecutor",
    "language": "kotlin",
    "llm_type": "interface",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type interface\n@llm-legend Query executor that handles query planning, optimization, caching, and routing\n@llm-key Provides intelligent query execution with automatic optimization and caching strategies\n@llm-map Central query processing engine that routes queries to optimal database technologies\n@llm-axiom All queries must be processed through this executor for consistency and optimization\n@llm-contract Handles query planning, caching, routing, and execution across all database technologies\n@llm-token query-executor: Intelligent query processing and routing engine",
    "context": "interface QueryExecutor {"
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/core/PersistenceManager.kt",
    "line_number": 24,
    "element_name": "PersistenceManager",
    "language": "kotlin",
    "llm_type": "interface",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type interface\n@llm-legend Main persistence platform manager that provides unified access to all database technologies\n@llm-key Abstracts database complexity behind single API, handles routing, caching, and lifecycle management\n@llm-map Central orchestrator for all persistence operations across multiple database technologies\n@llm-axiom All database operations must go through this interface to ensure consistency and observability\n@llm-contract Provides technology-agnostic CRUD operations with automatic routing and optimization\n@llm-token persistence-manager: Core interface for unified database access",
    "context": "interface PersistenceManager {"
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/impl/PersistenceManagerImpl.kt",
    "line_number": 29,
    "element_name": "PersistenceManagerImpl",
    "language": "kotlin",
    "llm_type": "implementation",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type implementation\n@llm-legend Main persistence manager implementation that orchestrates all database operations\n@llm-key Central implementation that coordinates providers, routing, caching, and lifecycle management\n@llm-map Core persistence platform implementation that provides unified access to all database technologies\n@llm-axiom All persistence operations flow through this implementation for consistency and observability\n@llm-contract Implements PersistenceManager interface with intelligent routing and multi-technology coordination\n@llm-token persistence-manager-impl: Core persistence platform implementation",
    "context": "class PersistenceManagerImpl : PersistenceManager {"
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/providers/RedisProvider.kt",
    "line_number": 35,
    "element_name": "RedisProvider",
    "language": "kotlin",
    "llm_type": "provider",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type provider\n@llm-legend Redis database provider for high-performance caching and session storage\n@llm-key Implements DatabaseProvider interface for Redis with TTL support and pub/sub capabilities\n@llm-map Redis provider for cache operations, session management, and real-time data storage\n@llm-axiom All Redis operations must handle TTL and provide fast access patterns\n@llm-contract Provides Redis-specific operations including caching, sessions, and pub/sub messaging\n@llm-token redis-provider: High-performance Redis database provider implementation",
    "context": "class RedisProvider : DatabaseProvider {"
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/providers/ProviderRegistry.kt",
    "line_number": 25,
    "element_name": "ProviderRegistry",
    "language": "kotlin",
    "llm_type": "registry",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type registry\n@llm-legend Provider registry that manages all database technology providers and their lifecycle\n@llm-key Central registry for creating, configuring, and managing database providers across all technologies\n@llm-map Provider factory and lifecycle manager for all database technology implementations\n@llm-axiom All database providers must be registered and managed through this registry\n@llm-contract Provides provider creation, configuration, and lifecycle management for all database technologies\n@llm-token provider-registry: Central database provider management and factory",
    "context": "class ProviderRegistry {"
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/providers/CockroachDBProvider.kt",
    "line_number": 35,
    "element_name": "CockroachDBProvider",
    "language": "kotlin",
    "llm_type": "provider",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type provider\n@llm-legend CockroachDB database provider for distributed SQL with ACID transactions\n@llm-key Implements DatabaseProvider interface for CockroachDB with strong consistency and horizontal scaling\n@llm-map CockroachDB provider for transactional data, financial records, and relational operations\n@llm-axiom All CockroachDB operations must maintain ACID properties and strong consistency\n@llm-contract Provides SQL operations with distributed transactions and automatic sharding\n@llm-token cockroachdb-provider: Distributed SQL database provider implementation",
    "context": "class CockroachDBProvider : DatabaseProvider {"
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/api/PersistenceApiServer.kt",
    "line_number": 42,
    "element_name": "PersistenceApiServer",
    "language": "kotlin",
    "llm_type": "api-server",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type api-server\n@llm-legend Unified API server providing REST and gRPC endpoints for all persistence operations\n@llm-key Central API gateway that routes requests to appropriate database technologies with authentication and rate limiting\n@llm-map Unified API layer that abstracts database complexity behind consistent REST/gRPC endpoints\n@llm-axiom All persistence operations must go through this API layer for consistency and security\n@llm-contract Provides technology-agnostic REST/gRPC APIs with automatic routing and observability\n@llm-token persistence-api-server: Unified API gateway for all database operations",
    "context": "class PersistenceApiServer("
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/config/ConfigurationModels.kt",
    "line_number": 26,
    "element_name": "PersistenceConfiguration",
    "language": "kotlin",
    "llm_type": "config",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type config\n@llm-legend Main persistence platform configuration loaded from YAML\n@llm-key Root configuration object containing all platform settings and technology definitions\n@llm-map Central configuration that drives all persistence platform behavior and routing decisions\n@llm-axiom Configuration must be validated before platform initialization\n@llm-contract Provides complete platform configuration including technologies, databases, and operations\n@llm-token persistence-configuration: Complete platform configuration object",
    "context": "data class PersistenceConfiguration("
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/src/main/kotlin/com/unhinged/persistence/lifecycle/DataLifecycleManager.kt",
    "line_number": 32,
    "element_name": "DataLifecycleManager",
    "language": "kotlin",
    "llm_type": "lifecycle-manager",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type lifecycle-manager\n@llm-legend Data lifecycle manager that handles hot/warm/cold data tiering and retention policies\n@llm-key Manages complete data lifecycle with automatic tiering, archival, and retention across all database technologies\n@llm-map Central lifecycle management system that optimizes data placement and enforces retention policies\n@llm-axiom All data must follow defined lifecycle policies for optimal performance and compliance\n@llm-contract Provides automated data tiering, archival, retention, and cross-technology migration\n@llm-token data-lifecycle-manager: Automated data lifecycle and tiering management",
    "context": "class DataLifecycleManager("
  },
  {
    "file_path": ".llmdocs-backup/platforms/persistence/config/persistence-platform.yaml",
    "line_number": 2,
    "element_name": "persistence_platform",
    "language": "yaml",
    "llm_type": "platform",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type platform\n@llm-legend persistence-platform.yaml - platform infrastructure component\n@llm-key Core functionality for persistence-platform\n@llm-map Part of the Unhinged system architecture\n@llm-axiom Maintains system independence and architectural compliance\n@llm-contract Provides standardized interface for system integration\n@llm-token persistence-platform: platform infrastructure component\n\n============================================================================\nPersistence Platform Configuration\n============================================================================\n\n@file persistence-platform.yaml\n@version 2.1.0\n@author Unhinged Team\n@date 2025-10-19\n@description Complete self-service persistence platform configuration\n\nThis configuration enables declarative provisioning of databases, tables,\nqueries, and operations across multiple database technologies without\nrequiring infrastructure knowledge.\n\nSupported Technologies:\n- Redis: High-performance caching and session storage\n- CockroachDB: Distributed SQL for transactional data\n- MongoDB: Document-oriented NoSQL for flexible schemas\n- Weaviate: Vector database for AI/ML embeddings and semantic search\n- Elasticsearch: Full-text search and analytics\n- Cassandra: Wide-column store for time-series and high-write workloads\n- Neo4j: Graph database for relationship modeling\n- Data Lake: OLAP capabilities with Apache Iceberg\n\n============================================================================",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/desktop/test-desktop-app.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Test Desktop Application\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nTest script for the Unhinged desktop application to verify functionality\nwithout requiring a full GUI session.\n\n## Test Coverage\n- Import and syntax validation\n- GTK4/Libadwaita availability\n- Application initialization\n- Desktop file validation\n- Installation script testing\n\n@llm-principle Test desktop integration thoroughly\n@llm-culture Verify independence through GUI accessibility",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/desktop/auto_updater.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type service\n@llm-legend Auto-update system for Unhinged desktop application\n@llm-key Provides automatic update checking and installation for the dual-system architecture desktop application\n@llm-map Auto-updater that checks for new versions and can update the desktop application automatically\n@llm-axiom Applications should stay current automatically without user intervention\n@llm-contract Provides version checking, update downloading, and automatic installation capabilities\n@llm-token auto-updater: Automatic update system for desktop application\n\nAuto-Update System for Unhinged Desktop Application\n\nProvides comprehensive auto-update functionality:\n- Version checking against local and remote sources\n- Automatic update detection on application launch\n- Safe update downloading and installation\n- Rollback capability in case of update failures\n- User notification and consent management\n- Integration with existing desktop application\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-26",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc GUI Session Logger for Unhinged Desktop Application\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nSession-based logging system that captures all GTK4 application output\nand writes it to timestamped log files in /build/tmp/ directory.\n\n## Features\n- Dual output: GTK4 UI display + file logging\n- Session-based file naming with UUID4 session IDs\n- ISO 8601 timestamp format for file names\n- Integration with existing event framework\n- Real-time file writing for all UI output\n\n@llm-principle Comprehensive logging for desktop application sessions\n@llm-culture Independence through detailed session tracking",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 35,
    "element_name": "GUISessionLogger",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced Session-based logger for GTK4 desktop application\n\nCaptures all output that appears in the GTK4 application's output log\nand simultaneously writes it to timestamped session log files with\nnoise reduction and error grouping capabilities.",
    "context": "class GUISessionLogger:"
  },
  {
    "file_path": ".llmdocs-backup/libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 121,
    "element_name": "log_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Log Output to Session File\n\nLogs a message that appeared in the GTK4 application's output log\nto the session file with timestamp and source information.\n\nArgs:\nmessage: The message that appeared in the GUI\nsource: Source of the message (GUI, VM, MAKE, etc.)",
    "context": "def log_output(self, message: str, source: str = \"GUI\"):"
  },
  {
    "file_path": ".llmdocs-backup/libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 149,
    "element_name": "log_platform_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced platform output logging with noise reduction\n\nProcesses platform output with intelligent filtering to reduce noise\nand group related errors while maintaining debugging value.",
    "context": "def log_platform_output(self, output: str):"
  },
  {
    "file_path": ".llmdocs-backup/libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 301,
    "element_name": "log_platform_status_update",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Log platform status with accuracy verification\n\nPrevents premature success claims by checking actual component status\nbefore logging platform state changes.",
    "context": "def log_platform_status_update(self, claimed_status: str):"
  },
  {
    "file_path": ".llmdocs-backup/libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 387,
    "element_name": "GUIOutputCapture",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Output capture system for GTK4 application\n\nCaptures output that would normally go to the GTK4 text view\nand sends it to both the GUI and the session logger.",
    "context": "class GUIOutputCapture:"
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/build/design_token_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build-module",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Design token generation module following ProtoClientBuilder architecture pattern\n@llm-key Generates GTK4 CSS from YAML design tokens with dependency tracking and caching\n@llm-map Integrates with build orchestrator to provide cached design token generation\n@llm-axiom Design tokens must be generated before UI compilation and provide consistent styling\n@llm-contract Implements BuildModule interface for design token generation with validation\n@llm-token design-token-builder: Design system generation from semantic YAML token definitions\n\nDesign Token Builder Module (Following ProtoClientBuilder Pattern)\n\nGenerates design system artifacts from YAML token definitions for:\n- GTK4 CSS (desktop applications) - Primary target\n- Future: TypeScript, Kotlin, C implementations\n\nFeatures:\n- Follows established ProtoClientBuilder architecture\n- Intelligent dependency tracking and caching\n- Semantic token validation\n- GTK4-specific CSS generation\n- Theme-aware output (light/dark variants)\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-10-27",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/build/design_token_builder.py",
    "line_number": 71,
    "element_name": "DesignTokenBuilder",
    "language": "python",
    "llm_type": "build-module",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Design token generation following ProtoClientBuilder architecture pattern\n@llm-key Orchestrates GTK4 CSS generation from semantic YAML tokens with caching and validation\n@llm-map Build module that generates design system artifacts with dependency tracking\n@llm-axiom Design tokens serve as single source of truth for all styling decisions\n@llm-contract Returns BuildModuleResult with generated design artifacts for specified platforms\n@llm-token design-token-builder: Semantic design token generation with build system integration",
    "context": "class DesignTokenBuilder(BuildModule):"
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/build/component_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "validator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type validator\n@llm-legend Component specification validator ensuring YAML specs conform to schema and design constraints\n@llm-key Validates component specifications against meta-schema, token references, and accessibility requirements\n@llm-map Integrates with component generation pipeline to ensure specification quality before code generation\n@llm-axiom All component specifications must be validated before generator consumption\n@llm-contract Implements validation interface compatible with build system error reporting\n@llm-token component-validator: YAML specification validation with comprehensive error reporting\n\nComponent Specification Validator\n\nValidates YAML component specifications against the meta-schema and design system constraints.\nEnsures specifications are platform-agnostic and properly reference design tokens.\n\nFeatures:\n- Schema validation against _schema.yaml\n- Design token reference validation\n- Accessibility requirement validation\n- Component ID uniqueness validation\n- State consistency validation\n- Comprehensive error reporting with line numbers\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-01-27",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/build/component_validator.py",
    "line_number": 73,
    "element_name": "ComponentSpecificationValidator",
    "language": "python",
    "llm_type": "validator-class",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Validates component specifications against schema and design constraints.\n\n@llm-type validator-class\n@llm-legend Core validator implementing comprehensive component specification validation\n@llm-key Validates YAML specs against schema, tokens, accessibility, and consistency rules",
    "context": "class ComponentSpecificationValidator:"
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/build/component_generator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build-orchestrator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-orchestrator\n@llm-legend Component generation orchestrator coordinating platform-specific generators from YAML specifications\n@llm-key Manages component generation pipeline with platform equality and specification-first architecture\n@llm-map Central orchestrator integrating with build system for component code generation\n@llm-axiom Component generation is specification-first with platform equality, not GTK4-first\n@llm-contract Implements build module interface for component generation with caching and validation\n@llm-token component-orchestrator: Platform-agnostic component generation coordination\n\nComponent Generation Orchestrator\n\nPlatform-agnostic orchestrator that coordinates component generation across all platforms.\nThis treats all platforms as equal consumers of component specifications.\n\nThe orchestrator:\n1. Loads component specifications from YAML files\n2. Loads design tokens for token resolution\n3. Instantiates platform-specific generators\n4. Coordinates generation across all platforms\n5. Manages output file organization\n\nThis is NOT GTK4-first. It's specification-first, platform-equal.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/build/component_build_module.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "build-module",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type build-module\n@llm-legend Component generation build module integrating with Unhinged build system\n@llm-key Implements BuildModule interface for component generation with caching and dependency tracking\n@llm-map Integrates component generation orchestrator with existing build infrastructure\n@llm-axiom Component generation follows build system patterns with proper caching and validation\n@llm-contract Implements BuildModule interface compatible with build orchestrator and Makefile targets\n@llm-token component-build-module: Build system integration for component generation pipeline\n\nComponent Generation Build Module\n\nIntegrates component generation with the Unhinged build system following established patterns.\nImplements BuildModule interface for proper caching, dependency tracking, and error handling.\n\nFeatures:\n- Component specification validation before generation\n- Platform-specific code generation (currently GTK4)\n- Build artifact management and caching\n- Integration with design token system\n- Comprehensive error reporting\n\nAuthor: Unhinged Team\nVersion: 1.0.0\nDate: 2025-01-27",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/build/component_build_module.py",
    "line_number": 59,
    "element_name": "ComponentBuildModule",
    "language": "python",
    "llm_type": "build-module-implementation",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Build module for component generation from YAML specifications.\n\n@llm-type build-module-implementation\n@llm-legend Component generation build module implementing BuildModule interface\n@llm-key Integrates component generation with build system caching and dependency tracking",
    "context": "class ComponentBuildModule(BuildModule):"
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/build/generators/_abstract_generator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "generator-interface",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type generator-interface\n@llm-legend Abstract component generator interface ensuring platform equality in design system\n@llm-key Defines consistent interface for generating platform-specific code from YAML specifications\n@llm-map Core abstraction enabling platform-agnostic component specifications with platform-specific implementations\n@llm-axiom All platform generators must implement identical interface for specification consumption\n@llm-contract Provides token resolution, code generation, and validation interface for all platforms\n@llm-token component-generator-interface: Abstract base for platform-specific component code generation\n\nAbstract Component Generator Interface\n\nAll platform-specific generators inherit from this base class.\nEnsures consistent interface across GTK4, Alpine+Unhinged native, and future platforms.\n\nThis is the key to platform equality - each generator implements the same interface\nbut produces platform-specific code from identical component specifications.",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/build/generators/gtk4/generator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "component-generator",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type component-generator\n@llm-legend GTK4 component generator producing Python widget implementations from YAML specifications\n@llm-key Generates GtkWidget subclasses with GObject properties, signals, and design token integration\n@llm-map Platform-specific implementation of abstract generator interface for GTK4 desktop applications\n@llm-axiom GTK4 generator is one equal platform among many, not primary implementation\n@llm-contract Implements ComponentGenerator interface producing Python GTK4 code from platform-agnostic specs\n@llm-token gtk4-generator: Platform-specific generator for GTK4 Python widget implementations\n\nGTK4 Component Generator\n\nGenerates GTK4 Python implementations from platform-agnostic component specifications.\nThis is ONE platform implementation - Alpine+Unhinged native generators are equally valid.\n\nThe GTK4 generator produces:\n- Custom GtkWidget subclasses with LlmDocs annotations\n- GObject property definitions for state management\n- GObject signal definitions for event handling\n- CSS class integration with design tokens\n- Accessibility support following GNOME HIG",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/build/generators/gtk4/generator.py",
    "line_number": 169,
    "element_name": "resolve_token",
    "language": "python",
    "llm_type": "token-resolver",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Resolve design token to GTK4 CSS value.\n\n@llm-type token-resolver\n@llm-legend Resolves platform-agnostic token references to GTK4-specific CSS values\n@llm-key Converts semantic tokens to CSS properties with proper theme context",
    "context": "def resolve_token(self, token_path: str, context: str = \"light\") -> str:"
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/build/generators/gtk4/generator.py",
    "line_number": 233,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "generated-component",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "gi.require_version('Gtk', '4.0')\ngi.require_version('Adw', '1')\n\nfrom gi.repository import Gtk, Adw, GObject, GLib\nfrom typing import Dict, Any, Optional, Callable\n\n# Generated GTK4 component for {component_id}\n# @llm-type generated-component\n# @llm-legend Auto-generated GTK4 widget from design system component specification\n# @llm-key GTK4 implementation of {component_name} with design token integration\n# @llm-map Generated component implementing platform-agnostic specification\n# @llm-axiom Generated code should not be manually edited - regenerate from YAML specification\n# @llm-contract Implements GTK4 widget interface with GObject properties and signals",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/components/_schema.yaml",
    "line_number": 2,
    "element_name": "schema_version",
    "language": "yaml",
    "llm_type": "schema",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type schema\n@llm-legend Component specification meta-schema defining platform-agnostic component structure\n@llm-key Validates YAML component specifications ensuring consistency across all platform generators\n@llm-map Central schema authority for design system component generation architecture\n@llm-axiom Component specifications must be platform-agnostic and describe WHAT not HOW\n@llm-contract Defines required fields, validation rules, and token integration patterns for components\n@llm-token component-schema: Meta-schema for platform-agnostic component specifications",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/components/primitives/modal.yaml",
    "line_number": 2,
    "element_name": "component",
    "language": "yaml",
    "llm_type": "component-specification",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type component-specification\n@llm-legend Platform-agnostic modal dialog component specification for overlay content presentation\n@llm-key Modal container with focus management, backdrop handling, and keyboard navigation support\n@llm-map Core container component for interrupting user flow with contextual content\n@llm-axiom Modal specifications must be platform-agnostic describing semantic behavior not implementation\n@llm-contract Defines modal interface, states, focus management, and accessibility for generator consumption\n@llm-token modal-component: Overlay dialog specification with focus trapping and backdrop interaction",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/components/primitives/input.yaml",
    "line_number": 2,
    "element_name": "component",
    "language": "yaml",
    "llm_type": "component-specification",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type component-specification\n@llm-legend Platform-agnostic input field component specification for single-line text entry\n@llm-key Text input element with validation states, placeholder support, and accessibility features\n@llm-map Core primitive component for form data collection in design system\n@llm-axiom Input specifications must be platform-agnostic describing semantic behavior not implementation\n@llm-contract Defines input interface, validation states, events, and styling for generator consumption\n@llm-token input-component: Single-line text input specification with validation and accessibility",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/components/primitives/button.yaml",
    "line_number": 2,
    "element_name": "component",
    "language": "yaml",
    "llm_type": "component-specification",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type component-specification\n@llm-legend Platform-agnostic button component specification defining semantic behavior and styling\n@llm-key Primary interactive element specification with semantic types, states, and accessibility requirements\n@llm-map Core primitive component in design system component hierarchy\n@llm-axiom Button specifications must be platform-agnostic describing WHAT not HOW\n@llm-contract Defines button interface, states, events, and token mappings for generator consumption\n@llm-token button-component: Interactive element specification with semantic styling and accessibility",
    "context": ""
  },
  {
    "file_path": ".llmdocs-backup/libs/design_system/components/primitives/simple-button.yaml",
    "line_number": 2,
    "element_name": "component",
    "language": "yaml",
    "llm_type": "component-specification",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-type component-specification\n@llm-legend Minimal button component specification for testing component generation pipeline\n@llm-key Simple interactive button with correct token references for validation testing\n@llm-map Test component for validating component generation system\n@llm-axiom Simple component specifications should validate without errors\n@llm-contract Minimal button interface with proper token references and required fields\n@llm-token simple-button: Test component for component generation validation",
    "context": ""
  },
  {
    "file_path": "vm/test-simple-communication.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Test Simple VM Communication Pipeline\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nTests the simplified VM communication pipeline to ensure:\n1. VM console output is visible in host terminal\n2. Communication is reliable and real-time\n3. VM status messages reach the host\n\n## Test Scenarios\n- VM boot messages \u2192 Host terminal\n- Unhinged status updates \u2192 Host terminal\n- Error messages \u2192 Host terminal\n- Graceful shutdown \u2192 Host terminal\n\n@llm-principle Test unidirectional communication reliability\n@llm-culture Verify independence through isolated VM communication",
    "context": ""
  },
  {
    "file_path": "vm/test-enhanced-communication.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Test Enhanced VM Communication System\n@llm-version 2.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nComprehensive test suite for the enhanced VM communication system.\nTests both Phase 1 (unidirectional) and Phase 2 (bidirectional) communication.\n\n## Test Coverage\n- Simple VM launcher functionality\n- Enhanced VM launcher with bidirectional communication\n- QoL launcher with Makefile integration\n- Build system preservation\n- Communication protocol validation\n\n@llm-principle Test all communication modes thoroughly\n@llm-culture Verify independence through comprehensive validation",
    "context": ""
  },
  {
    "file_path": "services/shared/__init__.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.shared",
    "llm_does": "shared service utilities and base classes for",
    "llm_rule": "shared service code must be simple, reusable, and eliminate duplication",
    "raw_comment": "@llm-type service.shared\n@llm-does shared service utilities and base classes for\n@llm-rule shared service code must be simple, reusable, and eliminate duplication",
    "context": ""
  },
  {
    "file_path": "services/shared/paths.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.util",
    "llm_does": "shared utilities for service path management and",
    "llm_rule": "service utilities must be simple, reusable, and eliminate path hardcoding",
    "raw_comment": "@llm-type service.util\n@llm-does shared utilities for service path management and\n@llm-rule service utilities must be simple, reusable, and eliminate path hardcoding",
    "context": ""
  },
  {
    "file_path": "services/shared/paths.py",
    "line_number": 75,
    "element_name": "ServicePaths",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "service path manager providing standardized directory access",
    "llm_rule": "service paths must be consistent, predictable, and environment-agnostic",
    "raw_comment": "@llm-type service.api\n@llm-does service path manager providing standardized directory access\n@llm-rule service paths must be consistent, predictable, and environment-agnostic",
    "context": "class ServicePaths:"
  },
  {
    "file_path": "services/speech-to-text/simple_whisper_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "simple whisper http server for voice transcription",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does simple whisper http server for voice transcription",
    "context": ""
  },
  {
    "file_path": "services/speech-to-text/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "__init__.py - microservice component",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does __init__.py - microservice component",
    "context": ""
  },
  {
    "file_path": "services/speech-to-text/main.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.launcher",
    "llm_does": "speech-to-text service launcher with grpc health.proto im...",
    "llm_rule": null,
    "raw_comment": "@llm-type service.launcher\n@llm-does speech-to-text service launcher with grpc health.proto im...",
    "context": ""
  },
  {
    "file_path": "services/speech-to-text/grpc_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "speech-to-text grpc server with health.proto implementation",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does speech-to-text grpc server with health.proto implementation",
    "context": ""
  },
  {
    "file_path": "services/text-to-speech/main.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.launcher",
    "llm_does": "text-to-speech service launcher with grpc health.proto im...",
    "llm_rule": null,
    "raw_comment": "@llm-type service.launcher\n@llm-does text-to-speech service launcher with grpc health.proto im...",
    "context": ""
  },
  {
    "file_path": "services/text-to-speech/grpc_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "text-to-speech grpc server with health.proto implementation",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does text-to-speech grpc server with health.proto implementation",
    "context": ""
  },
  {
    "file_path": "services/vision-ai/main.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.launcher",
    "llm_does": "vision ai service launcher with grpc health.proto",
    "llm_rule": null,
    "raw_comment": "@llm-type service.launcher\n@llm-does vision ai service launcher with grpc health.proto",
    "context": ""
  },
  {
    "file_path": "services/vision-ai/grpc_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "vision ai grpc server with health.proto implementation",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does vision ai grpc server with health.proto implementation",
    "context": ""
  },
  {
    "file_path": "control/enhanced_vm_launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced VM Launcher with Bidirectional Communication\n@llm-version 2.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nEnhanced VM launcher that extends simple_vm_launcher.py with bidirectional\ncommunication capabilities while maintaining the same reliability.\n\n## Communication Channels\n- **VM \u2192 Host**: Serial console output (inherited from simple launcher)\n- **Host \u2192 VM**: QEMU monitor socket for sending commands\n- **Protocol**: Structured JSON messages with fallback to plain text\n\n## Design Principles\n- **Backward Compatible**: Extends SimpleVMLauncher\n- **Reliable**: Robust error handling and fallback modes\n- **Real-time**: Immediate bidirectional communication\n- **Simple**: Easy to use and understand\n\n@llm-principle Build on proven foundation, add capabilities incrementally\n@llm-culture Independence through enhanced but reliable communication",
    "context": ""
  },
  {
    "file_path": "control/enhanced_vm_launcher.py",
    "line_number": 46,
    "element_name": "EnhancedVMLauncher",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced VM Launcher with Bidirectional Communication\n\nExtends SimpleVMLauncher with Host \u2192 VM communication via QEMU monitor.\nMaintains all existing VM \u2192 Host functionality while adding new capabilities.",
    "context": "class EnhancedVMLauncher(SimpleVMLauncher):"
  },
  {
    "file_path": "control/enhanced_vm_launcher.py",
    "line_number": 70,
    "element_name": "launch_vm_with_bidirectional_communication",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Launch VM with Bidirectional Communication\n\nExtends the simple launcher with QEMU monitor socket for Host \u2192 VM commands.\nMaintains serial console for VM \u2192 Host output.",
    "context": "def launch_vm_with_bidirectional_communication(self):"
  },
  {
    "file_path": "control/enhanced_vm_launcher.py",
    "line_number": 166,
    "element_name": "send_to_vm",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Send Command to VM\n\nSends command to VM via QEMU monitor socket.\nProvides Host \u2192 VM communication capability.",
    "context": "def send_to_vm(self, command):"
  },
  {
    "file_path": "control/enhanced_vm_launcher.py",
    "line_number": 195,
    "element_name": "stream_enhanced_vm_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Stream Enhanced VM Output\n\nEnhanced version of stream_vm_output with bidirectional message processing.\nHandles structured messages and provides interactive capabilities.",
    "context": "def stream_enhanced_vm_output(self):"
  },
  {
    "file_path": "control/enhanced_vm_launcher.py",
    "line_number": 309,
    "element_name": "run",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced Main Entry Point\n\nMain entry point for enhanced VM launcher with bidirectional communication.",
    "context": "def run(self):"
  },
  {
    "file_path": "control/unhinged_launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Unhinged Quality-of-Life Launcher\n@llm-version 2.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nQuality-of-life launcher that provides enhanced user experience while calling\nMakefile targets \"behind the scenes\". Preserves Makefile as core build system.\n\n## Design Philosophy\n- **Makefile Preservation**: All build logic remains in Makefile\n- **Enhanced UX**: Better user experience with real-time feedback\n- **Behind-the-Scenes**: Calls Makefile targets internally\n- **Incremental**: Builds on existing infrastructure\n\n## Integration Strategy\n1. Call Makefile setup targets for dependencies\n2. Launch enhanced VM with bidirectional communication\n3. Provide real-time status and interaction\n4. Maintain all existing Makefile functionality\n\n@llm-principle Enhance experience while preserving build system foundation\n@llm-culture Independence through improved but reliable tooling",
    "context": ""
  },
  {
    "file_path": "control/unhinged_launcher.py",
    "line_number": 46,
    "element_name": "UnhingedLauncher",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Quality-of-Life Launcher with Makefile Integration\n\nProvides enhanced user experience while calling Makefile targets behind\nthe scenes. Preserves Makefile as the core build system.",
    "context": "class UnhingedLauncher:"
  },
  {
    "file_path": "control/unhinged_launcher.py",
    "line_number": 73,
    "element_name": "call_makefile_target",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Call Makefile Target Behind the Scenes\n\nCalls Makefile targets while providing user feedback.\nPreserves all Makefile functionality while enhancing UX.",
    "context": "def call_makefile_target(self, target, description=None, silent=False):"
  },
  {
    "file_path": "control/unhinged_launcher.py",
    "line_number": 240,
    "element_name": "run",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Main Entry Point for Enhanced Launcher\n\nOrchestrates the entire enhanced launch process:\n1. Check prerequisites\n2. Setup dependencies via Makefile\n3. Build essentials via Makefile\n4. Launch enhanced VM\n5. Provide user interface",
    "context": "def run(self):"
  },
  {
    "file_path": "control/simple_vm_launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Simple VM Launcher for Unhinged\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nSimplified VM launcher focused on core unidirectional communication:\nVM visual CLI output \u2192 Ubuntu host terminal that ran 'make start'\n\n## Design Principles\n- **Simplicity**: Single communication channel (serial console)\n- **Reliability**: Direct output streaming to host terminal\n- **Minimal Dependencies**: No complex shared directories or SSH\n- **Real-time**: Immediate VM output visibility in host terminal\n\n## Communication Flow\n1. Host runs 'make start' \u2192 launches VM with serial console output\n2. VM boots and runs Unhinged graphics \u2192 outputs to serial console\n3. Serial console \u2192 directly streams to host terminal in real-time\n4. Host terminal shows VM output immediately\n\n@llm-principle Unidirectional communication first, bidirectional later\n@llm-culture Independence through VM isolation with simple communication",
    "context": ""
  },
  {
    "file_path": "control/simple_vm_launcher.py",
    "line_number": 37,
    "element_name": "SimpleVMLauncher",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Simple VM Launcher with Direct Console Output\n\nLaunches QEMU VM and streams console output directly to host terminal.\nNo complex communication channels - just serial console output.",
    "context": "class SimpleVMLauncher:"
  },
  {
    "file_path": "control/simple_vm_launcher.py",
    "line_number": 113,
    "element_name": "launch_vm_with_console_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Launch VM with Direct Console Output\n\nLaunches QEMU VM and streams console output directly to host terminal.\nThis is the core unidirectional communication channel.",
    "context": "def launch_vm_with_console_output(self):"
  },
  {
    "file_path": "control/simple_vm_launcher.py",
    "line_number": 176,
    "element_name": "stream_vm_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Stream VM Output to Host Terminal\n\nReads VM console output and displays it in real-time on host terminal.\nThis provides immediate visibility of VM status and Unhinged graphics output.",
    "context": "def stream_vm_output(self):"
  },
  {
    "file_path": "control/simple_vm_launcher.py",
    "line_number": 243,
    "element_name": "run",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Main Entry Point\n\nSets up signal handlers and launches VM with console output streaming.\nThis is the simplified communication pipeline entry point.",
    "context": "def run(self):"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "misc.virtualization-boundary",
    "llm_does": "http proxy server that represents the line-in-the-sand",
    "llm_rule": null,
    "raw_comment": "@llm-type misc.virtualization-boundary\n@llm-does http proxy server that represents the line-in-the-sand",
    "context": ""
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 65,
    "element_name": "health_check",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Health check endpoint - Future: sys_health_check()\n\n@llm-future This becomes a fundamental OS health monitoring system call",
    "context": "async def health_check():"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 82,
    "element_name": "start_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Start a service tier - Future Unhinged OS system call: sys_start_tier()\n\n@llm-future This HTTP endpoint will become: int sys_start_tier(tier_id_t tier)\n@llm-kernel-design Service tiers are fundamental OS abstractions in Unhinged",
    "context": "async def start_service_tier(tier: str, request: Request):"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 129,
    "element_name": "stop_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Stop a service tier - Future: sys_stop_tier()\n\n@llm-future This becomes the foundation for Unhinged process lifecycle management",
    "context": "async def stop_service_tier(tier: str, request: Request):"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 158,
    "element_name": "get_system_status",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Get system status - Future: sys_get_system_info()\n\n@llm-future This endpoint design informs future OS status reporting",
    "context": "async def get_system_status():"
  },
  {
    "file_path": "control/proxy_server.py",
    "line_number": 188,
    "element_name": "get_virtualization_insights",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Endpoint for gathering insights about system operations for future OS design\n\n@llm-purpose Collect operational patterns that inform Unhinged OS kernel design",
    "context": "async def get_virtualization_insights():"
  },
  {
    "file_path": "control/conversation_cli.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "conversation-based cli interface for unhinged dual-system...",
    "llm_rule": "voice-first interaction must be immediate, natural, and work seamlessly acros...",
    "raw_comment": "@llm-type service.api\n@llm-does conversation-based cli interface for unhinged dual-system...\n@llm-rule voice-first interaction must be immediate, natural, and work seamlessly acros...",
    "context": ""
  },
  {
    "file_path": "control/service_launcher.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "service launcher with unified service registry integration",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does service launcher with unified service registry integration",
    "context": ""
  },
  {
    "file_path": "control/network/service_registry.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "service_registry.py - central service discovery and regis...",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does service_registry.py - central service discovery and regis...",
    "context": ""
  },
  {
    "file_path": "control/network/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "misc.control-system",
    "llm_does": "__init__.py - network control system module initialization",
    "llm_rule": null,
    "raw_comment": "@llm-type misc.control-system\n@llm-does __init__.py - network control system module initialization",
    "context": ""
  },
  {
    "file_path": "control/deployment/deploy.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "misc.control-tool",
    "llm_does": "unified deployment orchestrator for unhinged system runtime",
    "llm_rule": "deployments must be atomic, reversible, and health-validated for operational ...",
    "raw_comment": "@llm-type misc.control-tool\n@llm-does unified deployment orchestrator for unhinged system runtime\n@llm-rule deployments must be atomic, reversible, and health-validated for operational ...",
    "context": ""
  },
  {
    "file_path": "control/deployment/deploy.py",
    "line_number": 21,
    "element_name": "UnhingedDeploymentOrchestrator",
    "language": "python",
    "llm_type": "misc.control-orchestrator",
    "llm_does": "central deployment orchestrator managing environment-awar...",
    "llm_rule": "all deployments must be atomic, health-validated, and reversible",
    "raw_comment": "@llm-type misc.control-orchestrator\n@llm-does central deployment orchestrator managing environment-awar...\n@llm-rule all deployments must be atomic, health-validated, and reversible",
    "context": "class UnhingedDeploymentOrchestrator:"
  },
  {
    "file_path": "control/deployment/health-checks.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "misc.control-tool",
    "llm_does": "service health monitoring and validation for unhinged",
    "llm_rule": "service health must be continuously monitored with automatic recovery actions",
    "raw_comment": "@llm-type misc.control-tool\n@llm-does service health monitoring and validation for unhinged\n@llm-rule service health must be continuously monitored with automatic recovery actions",
    "context": ""
  },
  {
    "file_path": "control/deployment/health-checks.py",
    "line_number": 47,
    "element_name": "UnhingedHealthMonitor",
    "language": "python",
    "llm_type": "misc.control-monitor",
    "llm_does": "continuous health monitoring system for unhinged service",
    "llm_rule": "health monitoring must be continuous, accurate, and trigger automatic recovery",
    "raw_comment": "@llm-type misc.control-monitor\n@llm-does continuous health monitoring system for unhinged service\n@llm-rule health monitoring must be continuous, accurate, and trigger automatic recovery",
    "context": "class UnhingedHealthMonitor:"
  },
  {
    "file_path": "control/gtk4_gui/realtime_system_info.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Real-time System Information Manager for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nProvides real-time system information updates for the GTK4 system info page\nwith efficient data collection and UI update mechanisms.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc GTK4 GUI Control Module\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nSimple GTK4 desktop application integration with direct control module access.\nAcademic exercise implementation - no abstraction layers, direct imports.\n\n@llm-principle Simple direct integration for learning and iteration\n@llm-culture Independence through straightforward implementation",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/system_info.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc System Information Collection Module for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nComprehensive system information gathering using psutil, platform, and system utilities.\nProvides structured data for the GTK4 system info page with proper error handling and caching.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/process_monitor.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Process Information Collection for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nCross-platform process monitoring using psutil for aux/top command equivalence\nwith efficient data collection, sorting, and process management capabilities.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/bluetooth_monitor.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Bluetooth Information Collection for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nCross-platform Bluetooth monitoring using D-Bus and bluetoothctl for device discovery,\npairing management, connection tracking, and adapter control capabilities.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/audio_monitor.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Audio Device Information Collection for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nCross-platform audio device monitoring using ALSA for device enumeration,\nvolume control, device switching, and connection management capabilities.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/desktop_app.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Unhinged Desktop Application for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nEnhanced GTK4 desktop application with comprehensive system monitoring, process management,\nBluetooth device control, and audio output management. Features tabbed interface with\nreal-time updates, component library integration, and professional design system.\n- Real-time status updates and progress indication\n- Integration with existing Makefile system and VM communication\n- User-friendly error handling and feedback\n\n## Design Principles\n- **Native Integration**: Uses GTK4 for authentic Ubuntu GNOME experience\n- **Functionality Mapping**: Executes same operations as 'make start'\n- **Visual Appeal**: Modern, clean interface following GNOME HIG\n- **Accessibility**: Keyboard navigation and screen reader support\n\n@llm-principle Native desktop integration with existing backend\n@llm-culture Independence through accessible graphical interface",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/desktop_app.py",
    "line_number": 86,
    "element_name": "UnhingedDesktopApp",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Main Desktop Application Class\n\nGTK4/Libadwaita application that provides graphical interface\nfor Unhinged platform functionality.\n\nFeatures:\n- Design system integration with semantic tokens\n- CSS loading from generated/design_system/gtk4/\n- Graceful fallback to Libadwaita defaults",
    "context": "class UnhingedDesktopApp(Adw.Application):"
  },
  {
    "file_path": "control/gtk4_gui/desktop_app.py",
    "line_number": 256,
    "element_name": "create_main_window",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Create Main Application Window\n\nCreates the main GTK4 window with modern Ubuntu GNOME styling\nusing Libadwaita for native look and feel.",
    "context": "def create_main_window(self):"
  },
  {
    "file_path": "control/gtk4_gui/desktop_app.py",
    "line_number": 1692,
    "element_name": "start_platform",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Start Platform Backend\n\nExecutes the same functionality as 'make start' but with\nGUI feedback and progress indication.",
    "context": "def start_platform(self):"
  },
  {
    "file_path": "control/gtk4_gui/launch.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Simple GTK4 Desktop Application Launcher\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nSimple launcher for the GTK4 desktop application with direct control integration.\nAcademic exercise implementation.\n\n@llm-principle Simple direct integration for learning and iteration\n@llm-culture Independence through straightforward implementation",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/tests/__init__.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc GTK4 GUI Test Suite\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nConsolidated test suite for the GTK4 GUI components and modules.\nProvides comprehensive testing for all components, monitors, and integrations.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/tests/test_monitors.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Monitor Tests for GTK4 GUI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nComprehensive tests for all monitor modules including SystemInfo, ProcessMonitor,\nAudioMonitor, and BluetoothMonitor. Tests real system data collection, performance, and error handling.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/tests/test_components.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Component Library Test Script\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nSimple test script to verify all components work correctly.\nRun this to test the component library before integration.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/tables.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Generic Table Components for GTK4 UI\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nReusable table foundation components following design system patterns\nfor structured data display with sorting, filtering, and accessibility.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/base.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Base Component Classes for GTK4 Component Library\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nBase classes providing common functionality for all components:\n- Design system integration\n- Theme management\n- Event handling patterns\n- Accessibility support",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/example_usage.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Example Usage of Unhinged GTK4 Component Library\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nDemonstrates how to integrate the component library into your existing\nGTK4 application. Shows practical usage patterns and best practices.",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/containers.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Container GTK4 Components\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nContainer components for organizing and grouping content:\n- StatusCard: Card displaying status information with icon and actions\n- ServicePanel: Panel for displaying service information and controls\n- LogContainer: Scrollable container for log content",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc GTK4 Component Library for Unhinged\n@llm-version 1.0.0\n@llm-date 2025-10-27\n@llm-author Unhinged Team\n\n## Overview\nFocused GTK4 component library that integrates with the Unhinged design system.\nProvides reusable, accessible widgets following GNOME HIG patterns.\n\n## Design Principles\n- **Design System Integration**: Uses semantic tokens from libs/design_system/\n- **Libadwaita First**: Builds on Adw widgets for native GNOME experience\n- **Focused Components**: Only components actually needed by the application\n- **Type Safety**: Proper GTK4 typing and signal handling\n- **Accessibility**: ARIA labels, keyboard navigation, screen reader support\n\n## Component Categories\n- **Primitives**: Basic building blocks (buttons, inputs, labels)\n- **Containers**: Layout and grouping (cards, panels, sections)\n- **Complex**: Stateful components (log viewer, progress indicators)\n- **System**: Application-level components (status displays, service rows)\n\n@llm-principle Focused, practical components with design system integration\n@llm-culture Independence through reusable, accessible UI components",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/complex.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Complex GTK4 Components\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nComplex components that combine multiple elements for comprehensive interfaces:\n- LogViewer: Advanced log viewer with filtering and search\n- ServiceRow: Complete service status row with controls\n- SystemStatus: Overall system status display\n- PerformanceIndicator: System performance monitoring display\n- ProcessTable: Complete process management interface\n- BluetoothTable: Bluetooth device management with discovery\n- AudioTable: Audio device management with volume control",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/primitives.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Primitive GTK4 Components\n@llm-version 1.0.0\n@llm-date 2025-10-28\n\nBasic building block components with design system integration:\n- ActionButton: Enhanced button with semantic styling\n- StatusLabel: Label with status styling (success, warning, error)\n- ProgressIndicator: Progress bar with semantic styling\n- HardwareInfoRow: Hardware information display row\n- ProcessRow: Process information display with controls\n- BluetoothRow: Bluetooth device display with connection controls\n- AudioDeviceRow: Audio device display with volume controls",
    "context": ""
  },
  {
    "file_path": "control/gtk4_gui/components/integration_example.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Integration Example for Existing Desktop App\n@llm-version 1.0.0\n@llm-date 2025-10-27\n\nShows how to integrate the component library into your existing\ncontrol/gtk4_gui/desktop_app.py with minimal changes.",
    "context": ""
  },
  {
    "file_path": "control/system/__init__.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "misc.control-plane-package",
    "llm_does": "system control abstraction layer package for unhinged",
    "llm_rule": "all system operations must be auditable, reversible, and provide clear operat...",
    "raw_comment": "@llm-type misc.control-plane-package\n@llm-does system control abstraction layer package for unhinged\n@llm-rule all system operations must be auditable, reversible, and provide clear operat...",
    "context": ""
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "misc.control-plane",
    "llm_does": "system control abstraction layer that bridges build",
    "llm_rule": "all system operations must be auditable, reversible, and provide clear operat...",
    "raw_comment": "@llm-type misc.control-plane\n@llm-does system control abstraction layer that bridges build\n@llm-rule all system operations must be auditable, reversible, and provide clear operat...",
    "context": ""
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 31,
    "element_name": "SystemController",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "System Control Abstraction Layer\n\nBridges operational semantics (start/stop services) with build system implementation.\nThis class represents the future boundary between Unhinged applications and the OS.\n\n@llm-future Every method here is a candidate for a future Unhinged OS system call\n@llm-virtualization This class will evolve into the primary OS interface",
    "context": "class SystemController:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 81,
    "element_name": "start_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Start a logical service tier\n\n@llm-future This will become: int sys_start_tier(tier_id_t tier)\n@llm-kernel-design Service tiers are fundamental OS abstractions in Unhinged",
    "context": "async def start_service_tier(self, tier: str) -> OperationResult:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 136,
    "element_name": "stop_service_tier",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Stop a logical service tier\n\n@llm-future This will become: int sys_stop_tier(tier_id_t tier)",
    "context": "async def stop_service_tier(self, tier: str) -> OperationResult:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 199,
    "element_name": "_execute_docker_command",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Execute Docker command as fallback when build system unavailable\n\n@llm-future This direct command execution will be replaced by Unhinged container management",
    "context": "async def _execute_docker_command(self, operation: str, tier_config: Dict[str, Any]) -> OperationResult:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 242,
    "element_name": "get_system_status",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Get current system status\n\n@llm-future This will become: sys_get_system_info()",
    "context": "async def get_system_status(self) -> SystemStatus:"
  },
  {
    "file_path": "control/system/system_controller.py",
    "line_number": 296,
    "element_name": "get_operation_patterns",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Analyze operation patterns for future OS design insights\n\n@llm-purpose Collect operational patterns that inform Unhinged OS kernel design",
    "context": "def get_operation_patterns(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "model.entity",
    "llm_does": "operation result data model for system control",
    "llm_rule": null,
    "raw_comment": "@llm-type model.entity\n@llm-does operation result data model for system control",
    "context": ""
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 14,
    "element_name": "OperationResult",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Standardized result for system operations\n\n@llm-future This data structure will become the return format for Unhinged OS system calls\n@llm-evolution Each field here represents metadata that future OS kernel will track",
    "context": "class OperationResult:"
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 54,
    "element_name": "from_build_results",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Create OperationResult from build system results\n\n@llm-note This bridges build system results to operational semantics\n@llm-future This translation layer will be removed when we have direct OS operations",
    "context": "def from_build_results(cls, operation: str, build_results: List[Any]) -> 'OperationResult':"
  },
  {
    "file_path": "control/system/operation_result.py",
    "line_number": 97,
    "element_name": "SystemStatus",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Current system status snapshot\n\n@llm-future This will become the Unhinged OS system information structure",
    "context": "class SystemStatus:"
  },
  {
    "file_path": "control/config/environments/production.yml",
    "line_number": 1,
    "element_name": "environment",
    "language": "yaml",
    "llm_type": "config.app",
    "llm_does": "production environment settings for unhinged system deplo...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.app\n@llm-does production environment settings for unhinged system deplo...",
    "context": "environment: \"production\""
  },
  {
    "file_path": "control/config/environments/development.yml",
    "line_number": 1,
    "element_name": "environment",
    "language": "yaml",
    "llm_type": "config.app",
    "llm_does": "development environment settings for unhinged system deve...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.app\n@llm-does development environment settings for unhinged system deve...",
    "context": "environment: \"development\""
  },
  {
    "file_path": "platforms/persistence/docker-compose.yml",
    "line_number": 1,
    "element_name": "version",
    "language": "yaml",
    "llm_type": "misc.platform",
    "llm_does": "docker-compose.yml - platform infrastructure component",
    "llm_rule": null,
    "raw_comment": "@llm-type misc.platform\n@llm-does docker-compose.yml - platform infrastructure component",
    "context": "version: '3.8'"
  },
  {
    "file_path": "platforms/persistence/config/persistence-platform.yaml",
    "line_number": 1,
    "element_name": "persistence_platform",
    "language": "yaml",
    "llm_type": "config.app",
    "llm_does": "persistence-platform.yaml - platform infrastructure compo...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.app\n@llm-does persistence-platform.yaml - platform infrastructure compo...",
    "context": "persistence_platform:"
  },
  {
    "file_path": "desktop/test-desktop-app.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Test Desktop Application\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nTest script for the Unhinged desktop application to verify functionality\nwithout requiring a full GUI session.\n\n## Test Coverage\n- Import and syntax validation\n- GTK4/Libadwaita availability\n- Application initialization\n- Desktop file validation\n- Installation script testing\n\n@llm-principle Test desktop integration thoroughly\n@llm-culture Verify independence through GUI accessibility",
    "context": ""
  },
  {
    "file_path": "desktop/auto_updater.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "auto-update system for unhinged desktop application",
    "llm_rule": null,
    "raw_comment": "@llm-type service.api\n@llm-does auto-update system for unhinged desktop application",
    "context": ""
  },
  {
    "file_path": "libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 1,
    "element_name": "unknown",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc GUI Session Logger for Unhinged Desktop Application\n@llm-version 1.0.0\n@llm-date 2025-01-26\n@llm-author Unhinged Team\n\n## Overview\nSession-based logging system that captures all GTK4 application output\nand writes it to timestamped log files in /build/tmp/ directory.\n\n## Features\n- Dual output: GTK4 UI display + file logging\n- Session-based file naming with UUID4 session IDs\n- ISO 8601 timestamp format for file names\n- Integration with existing event framework\n- Real-time file writing for all UI output\n\n@llm-principle Comprehensive logging for desktop application sessions\n@llm-culture Independence through detailed session tracking",
    "context": ""
  },
  {
    "file_path": "libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 35,
    "element_name": "GUISessionLogger",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced Session-based logger for GTK4 desktop application\n\nCaptures all output that appears in the GTK4 application's output log\nand simultaneously writes it to timestamped session log files with\nnoise reduction and error grouping capabilities.",
    "context": "class GUISessionLogger:"
  },
  {
    "file_path": "libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 121,
    "element_name": "log_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Log Output to Session File\n\nLogs a message that appeared in the GTK4 application's output log\nto the session file with timestamp and source information.\n\nArgs:\nmessage: The message that appeared in the GUI\nsource: Source of the message (GUI, VM, MAKE, etc.)",
    "context": "def log_output(self, message: str, source: str = \"GUI\"):"
  },
  {
    "file_path": "libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 149,
    "element_name": "log_platform_output",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Enhanced platform output logging with noise reduction\n\nProcesses platform output with intelligent filtering to reduce noise\nand group related errors while maintaining debugging value.",
    "context": "def log_platform_output(self, output: str):"
  },
  {
    "file_path": "libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 301,
    "element_name": "log_platform_status_update",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Log platform status with accuracy verification\n\nPrevents premature success claims by checking actual component status\nbefore logging platform state changes.",
    "context": "def log_platform_status_update(self, claimed_status: str):"
  },
  {
    "file_path": "libs/event-framework/python/src/events/gui_session_logger.py",
    "line_number": 387,
    "element_name": "GUIOutputCapture",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "@llm-doc Output capture system for GTK4 application\n\nCaptures output that would normally go to the GTK4 text view\nand sends it to both the GUI and the session logger.",
    "context": "class GUIOutputCapture:"
  },
  {
    "file_path": "libs/design_system/build/design_token_builder.py",
    "line_number": 3,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "design token generation module following protoclientbuild...",
    "llm_rule": "design tokens must be generated before ui compilation and provide consistent ...",
    "raw_comment": "@llm-type config.build\n@llm-does design token generation module following protoclientbuild...\n@llm-rule design tokens must be generated before ui compilation and provide consistent ...",
    "context": ""
  },
  {
    "file_path": "libs/design_system/build/design_token_builder.py",
    "line_number": 50,
    "element_name": "DesignTokenBuilder",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "design token generation following protoclientbuilder arch...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does design token generation following protoclientbuilder arch...",
    "context": "class DesignTokenBuilder(BuildModule):"
  },
  {
    "file_path": "libs/design_system/build/component_validator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "component specification validator ensuring yaml specs con...",
    "llm_rule": "all component specifications must be validated before generator consumption",
    "raw_comment": "@llm-type util.validator\n@llm-does component specification validator ensuring yaml specs con...\n@llm-rule all component specifications must be validated before generator consumption",
    "context": ""
  },
  {
    "file_path": "libs/design_system/build/component_validator.py",
    "line_number": 52,
    "element_name": "ComponentSpecificationValidator",
    "language": "python",
    "llm_type": "component.primitive",
    "llm_does": "core validator implementing comprehensive component speci...",
    "llm_rule": null,
    "raw_comment": "@llm-type component.primitive\n@llm-does core validator implementing comprehensive component speci...",
    "context": "class ComponentSpecificationValidator:"
  },
  {
    "file_path": "libs/design_system/build/component_generator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "component generation orchestrator coordinating platform-s...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does component generation orchestrator coordinating platform-s...",
    "context": ""
  },
  {
    "file_path": "libs/design_system/build/component_build_module.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "component generation build module integrating with unhinged",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does component generation build module integrating with unhinged",
    "context": ""
  },
  {
    "file_path": "libs/design_system/build/component_build_module.py",
    "line_number": 38,
    "element_name": "ComponentBuildModule",
    "language": "python",
    "llm_type": "component.primitive",
    "llm_does": "component generation build module implementing buildmodul...",
    "llm_rule": null,
    "raw_comment": "@llm-type component.primitive\n@llm-does component generation build module implementing buildmodul...",
    "context": "class ComponentBuildModule(BuildModule):"
  },
  {
    "file_path": "libs/design_system/build/generators/_abstract_generator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "abstract component generator interface ensuring platform ...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does abstract component generator interface ensuring platform ...",
    "context": ""
  },
  {
    "file_path": "libs/design_system/build/generators/gtk4/generator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "gtk4 component generator producing python widget implemen...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does gtk4 component generator producing python widget implemen...",
    "context": ""
  },
  {
    "file_path": "libs/design_system/build/generators/gtk4/generator.py",
    "line_number": 152,
    "element_name": "resolve_token",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "resolves platform-agnostic token references to gtk4-speci...",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does resolves platform-agnostic token references to gtk4-speci...",
    "context": "def resolve_token(self, token_path: str, context: str = \"light\") -> str:"
  },
  {
    "file_path": "libs/design_system/build/generators/gtk4/generator.py",
    "line_number": 213,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "auto-generated gtk4 widget from design system component",
    "llm_rule": null,
    "raw_comment": "gi.require_version('Gtk', '4.0')\ngi.require_version('Adw', '1')\n\nfrom gi.repository import Gtk, Adw, GObject, GLib\nfrom typing import Dict, Any, Optional, Callable\n\n\"\"\"\n@llm-type config.build\n@llm-does auto-generated gtk4 widget from design system component\n\"\"\"\ndef _generate_class_definition(self, class_name: str, base_class: str, spec: Dict[str, Any]) -> str:\n\"\"\"Generate class definition with GObject registration.\"\"\"\ncomponent = spec['component']\n\nreturn f\"\"\"\nclass {class_name}({base_class}):\n\\\"\\\"\\\"\n{component['name']} - {component['description']}\n\nCategory: {component['category']}\nGenerated from: {component['id']}.yaml\n\\\"\\\"\\\"\n\n__gtype_name__ = '{class_name}'\"\"\"\n\ndef _generate_properties(self, spec: Dict[str, Any]) -> str:\n\"\"\"Generate GObject property definitions.\"\"\"\nproperties = self.get_component_properties(spec)\n\nif not properties:\nreturn \"\"\n\nprop_lines = []\nfor prop_name, prop_def in properties.items():\ngtype = self._map_type_to_gtype(prop_def['type'])\ndefault = prop_def.get('default', self._get_default_for_type(prop_def['type']))\n\nprop_lines.append(f\"\"\"\n# Property: {prop_name}\n{prop_name} = GObject.Property(\ntype={gtype},\ndefault={repr(default)},\nnick=\"{prop_name.replace('_', ' ').title()}\",\nblurb=\"{prop_def['description']}\"\n)\"\"\")\n\nreturn \"\\n\".join(prop_lines)\n\ndef _generate_signals(self, spec: Dict[str, Any]) -> str:\n\"\"\"Generate GObject signal definitions.\"\"\"\nevents = self.get_component_events(spec)\n\nif not events:\nreturn \"\"\n\nsignal_lines = []\nfor event_name, event_def in events.items():\nsignal_name = event_name.replace('_', '-')\nsignal_lines.append(f\"\"\"\n# Signal: {event_name}\n__gsignals__ = {{\n'{signal_name}': (GObject.SignalFlags.RUN_FIRST, None, (object,))\n}}\"\"\")\n\nreturn \"\\n\".join(signal_lines)\n\ndef _generate_init_method(self, spec: Dict[str, Any]) -> str:\n\"\"\"Generate component initialization method.\"\"\"\ncomponent = spec['component']\ncomponent_id = component['id']\n\nreturn f\"\"\"\ndef __init__(self, **kwargs):\nsuper().__init__(**kwargs)\n\n# Add design system CSS classes\nself.add_css_class(\"{self.css_class_prefix}component\")\nself.add_css_class(\"{self.css_class_prefix}{component_id}\")\n\n# Initialize component state\nself._setup_component()\nself._apply_default_styling()\n\ndef _setup_component(self):\n\\\"\\\"\\\"Set up component-specific initialization.\\\"\\\"\\\"\n# Component-specific setup will be added here\npass\n\ndef _apply_default_styling(self):\n\\\"\\\"\\\"Apply default styling from design tokens.\\\"\\\"\\\"\n# Default styling will be applied here\npass\"\"\"\n\ndef _generate_state_methods(self, spec: Dict[str, Any]) -> str:\n\"\"\"Generate state management methods.\"\"\"\nreturn self.generate_state_handler(spec)\n\ndef _generate_event_methods(self, spec: Dict[str, Any]) -> str:\n\"\"\"Generate event handling methods.\"\"\"\nreturn self.generate_event_handler(spec)\n\ndef _get_base_widget_class(self, component: Dict[str, Any]) -> str:\n\"\"\"Determine appropriate GTK base widget class.\"\"\"\ncategory = component['category']\ncomponent_id = component['id']\n\n# Special cases for specific components\nif component_id == 'button':\nreturn 'Gtk.Button'\nelif component_id == 'text_editor':\nreturn 'Gtk.TextView'\nelif component_id in ['input', 'text_input']:\nreturn 'Gtk.Entry'\nelif component_id == 'modal':\nreturn 'Adw.MessageDialog'\n\n# Default based on category\nreturn self.base_widget_mapping.get(category, 'Gtk.Widget')\n\ndef _map_type_to_gtype(self, prop_type: str) -> str:\n\"\"\"Map component property type to GObject type.\"\"\"\ntype_mapping = {\n'string': 'str',\n'number': 'float',\n'boolean': 'bool',\n'enum': 'str',  # Enums are validated as strings\n'object': 'object',\n'array': 'object'\n}\nreturn type_mapping.get(prop_type, 'object')\n\ndef _get_default_for_type(self, prop_type: str) -> Any:\n\"\"\"Get appropriate default value for property type.\"\"\"\ndefaults = {\n'string': '',\n'number': 0,\n'boolean': False,\n'enum': '',\n'object': None,\n'array': []\n}\nreturn defaults.get(prop_type, None)\n\ndef _to_pascal_case(self, kebab_case: str) -> str:\n\"\"\"Convert kebab-case to PascalCase.\"\"\"\nreturn ''.join(word.capitalize() for word in kebab_case.split('-'))\n",
    "context": ""
  },
  {
    "file_path": "libs/design_system/components/_schema.yaml",
    "line_number": 1,
    "element_name": "schema_version",
    "language": "yaml",
    "llm_type": "model.schema",
    "llm_does": "component specification meta-schema defining platform-agn...",
    "llm_rule": "component specifications must be platform-agnostic and describe what not how",
    "raw_comment": "@llm-type model.schema\n@llm-does component specification meta-schema defining platform-agn...\n@llm-rule component specifications must be platform-agnostic and describe what not how",
    "context": "schema_version: \"1.0.0\""
  },
  {
    "file_path": "libs/design_system/components/primitives/modal.yaml",
    "line_number": 1,
    "element_name": "component",
    "language": "yaml",
    "llm_type": "component.spec",
    "llm_does": "platform-agnostic modal dialog component specification fo...",
    "llm_rule": "modal specifications must be platform-agnostic describing semantic behavior n...",
    "raw_comment": "@llm-type component.spec\n@llm-does platform-agnostic modal dialog component specification fo...\n@llm-rule modal specifications must be platform-agnostic describing semantic behavior n...",
    "context": "component:"
  },
  {
    "file_path": "libs/design_system/components/primitives/input.yaml",
    "line_number": 1,
    "element_name": "component",
    "language": "yaml",
    "llm_type": "component.spec",
    "llm_does": "platform-agnostic input field component specification for...",
    "llm_rule": "input specifications must be platform-agnostic describing semantic behavior n...",
    "raw_comment": "@llm-type component.spec\n@llm-does platform-agnostic input field component specification for...\n@llm-rule input specifications must be platform-agnostic describing semantic behavior n...",
    "context": "component:"
  },
  {
    "file_path": "libs/design_system/components/primitives/button.yaml",
    "line_number": 1,
    "element_name": "component",
    "language": "yaml",
    "llm_type": "component.spec",
    "llm_does": "platform-agnostic button component specification defining...",
    "llm_rule": "button specifications must be platform-agnostic describing what not how",
    "raw_comment": "@llm-type component.spec\n@llm-does platform-agnostic button component specification defining...\n@llm-rule button specifications must be platform-agnostic describing what not how",
    "context": "component:"
  },
  {
    "file_path": "libs/design_system/components/primitives/simple-button.yaml",
    "line_number": 1,
    "element_name": "component",
    "language": "yaml",
    "llm_type": "component.spec",
    "llm_does": "minimal button component specification for testing component",
    "llm_rule": null,
    "raw_comment": "@llm-type component.spec\n@llm-does minimal button component specification for testing component",
    "context": "component:"
  }
]