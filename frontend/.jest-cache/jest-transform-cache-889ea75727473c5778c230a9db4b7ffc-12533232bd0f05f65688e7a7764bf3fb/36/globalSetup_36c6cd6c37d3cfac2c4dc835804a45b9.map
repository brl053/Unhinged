{"file":"/home/e-bliss-station-1/projects/Unhinged/frontend/tests/setup/globalSetup.ts","mappings":"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","names":[],"sources":["/home/e-bliss-station-1/projects/Unhinged/frontend/tests/setup/globalSetup.ts"],"sourcesContent":["/**\n * @fileoverview Jest Global Setup\n * \n * @description\n * Global setup for Jest test suite. Runs once before all tests.\n * Sets up test environment, starts mock servers, and initializes\n * test databases.\n * \n * @author LLM Agent\n * @version 1.0.0\n * @since 2025-01-04\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nexport default async function globalSetup(): Promise<void> {\n  console.log('üöÄ Setting up Jest test environment...');\n\n  try {\n    // Create test directories\n    await createTestDirectories();\n    \n    // Setup test database\n    await setupTestDatabase();\n    \n    // Verify services for integration tests\n    await verifyTestServices();\n    \n    // Setup test fixtures\n    await setupTestFixtures();\n    \n    console.log('‚úÖ Jest global setup completed successfully');\n  } catch (error) {\n    console.error('‚ùå Jest global setup failed:', error);\n    throw error;\n  }\n}\n\n/**\n * Create necessary test directories\n */\nasync function createTestDirectories(): Promise<void> {\n  const directories = [\n    'tests/fixtures/audio',\n    'tests/fixtures/images',\n    'tests/fixtures/data',\n    'test-results',\n    'coverage',\n    '.jest-cache',\n  ];\n\n  for (const dir of directories) {\n    try {\n      await fs.mkdir(dir, { recursive: true });\n    } catch (error) {\n      // Directory might already exist, ignore error\n    }\n  }\n}\n\n/**\n * Setup test database\n */\nasync function setupTestDatabase(): Promise<void> {\n  // For now, we'll use IndexedDB mocks\n  // In the future, we might want to setup a test database\n  console.log('üìä Test database setup completed (using mocks)');\n}\n\n/**\n * Verify test services are available for integration tests\n */\nasync function verifyTestServices(): Promise<void> {\n  const services = [\n    {\n      name: 'TTS/STT Service',\n      url: 'http://localhost:8000/health',\n      required: false, // Optional for unit tests\n    },\n    {\n      name: 'Backend API',\n      url: 'http://localhost:8080/health',\n      required: false, // Optional for unit tests\n    },\n  ];\n\n  for (const service of services) {\n    try {\n      const response = await fetch(service.url);\n      if (response.ok) {\n        console.log(`‚úÖ ${service.name} is available for integration tests`);\n      } else {\n        throw new Error(`Service returned ${response.status}`);\n      }\n    } catch (error) {\n      if (service.required) {\n        throw new Error(`Required service ${service.name} is not available: ${error}`);\n      } else {\n        console.log(`‚ö†Ô∏è  ${service.name} is not available (integration tests will be skipped)`);\n      }\n    }\n  }\n}\n\n/**\n * Setup test fixtures\n */\nasync function setupTestFixtures(): Promise<void> {\n  // Create sample test data\n  const testData = {\n    sampleMessages: [\n      {\n        id: '1',\n        type: 'sent',\n        message: 'Hello, this is a test message',\n        timestamp: Date.now(),\n      },\n      {\n        id: '2',\n        type: 'received',\n        message: 'This is a response message',\n        timestamp: Date.now() + 1000,\n      },\n    ],\n    sampleTranscriptions: [\n      {\n        text: 'Hello world',\n        language: 'en',\n        confidence: 0.95,\n      },\n      {\n        text: 'Create a React component',\n        language: 'en',\n        confidence: 0.88,\n      },\n    ],\n    sampleAudioTestCases: [\n      {\n        id: 'test-basic',\n        text: 'This is a basic test',\n        description: 'Basic test case',\n      },\n      {\n        id: 'test-technical',\n        text: 'Create a TypeScript interface',\n        description: 'Technical terminology test',\n      },\n    ],\n  };\n\n  await fs.writeFile(\n    'tests/fixtures/data/testData.json',\n    JSON.stringify(testData, null, 2)\n  );\n\n  console.log('üìÅ Test fixtures created');\n}\n\n/**\n * Check if running in CI environment\n */\nfunction isCI(): boolean {\n  return !!(\n    process.env.CI ||\n    process.env.CONTINUOUS_INTEGRATION ||\n    process.env.BUILD_NUMBER ||\n    process.env.GITHUB_ACTIONS ||\n    process.env.GITLAB_CI\n  );\n}\n\n/**\n * Get test environment configuration\n */\nfunction getTestConfig() {\n  return {\n    isCI: isCI(),\n    timeout: isCI() ? 30000 : 10000,\n    retries: isCI() ? 2 : 0,\n    workers: isCI() ? 2 : '50%',\n  };\n}\n"],"version":3}