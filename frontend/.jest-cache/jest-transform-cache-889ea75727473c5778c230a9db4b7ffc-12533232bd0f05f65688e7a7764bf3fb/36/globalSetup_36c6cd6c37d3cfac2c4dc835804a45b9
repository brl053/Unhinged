4568b89da3cb0b61329921f34c6762a5
"use strict";
/**
 * @fileoverview Jest Global Setup
 *
 * @description
 * Global setup for Jest test suite. Runs once before all tests.
 * Sets up test environment, starts mock servers, and initializes
 * test databases.
 *
 * @author LLM Agent
 * @version 1.0.0
 * @since 2025-01-04
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = globalSetup;
const promises_1 = __importDefault(require("fs/promises"));
function globalSetup() {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('üöÄ Setting up Jest test environment...');
        try {
            // Create test directories
            yield createTestDirectories();
            // Setup test database
            yield setupTestDatabase();
            // Verify services for integration tests
            yield verifyTestServices();
            // Setup test fixtures
            yield setupTestFixtures();
            console.log('‚úÖ Jest global setup completed successfully');
        }
        catch (error) {
            console.error('‚ùå Jest global setup failed:', error);
            throw error;
        }
    });
}
/**
 * Create necessary test directories
 */
function createTestDirectories() {
    return __awaiter(this, void 0, void 0, function* () {
        const directories = [
            'tests/fixtures/audio',
            'tests/fixtures/images',
            'tests/fixtures/data',
            'test-results',
            'coverage',
            '.jest-cache',
        ];
        for (const dir of directories) {
            try {
                yield promises_1.default.mkdir(dir, { recursive: true });
            }
            catch (error) {
                // Directory might already exist, ignore error
            }
        }
    });
}
/**
 * Setup test database
 */
function setupTestDatabase() {
    return __awaiter(this, void 0, void 0, function* () {
        // For now, we'll use IndexedDB mocks
        // In the future, we might want to setup a test database
        console.log('üìä Test database setup completed (using mocks)');
    });
}
/**
 * Verify test services are available for integration tests
 */
function verifyTestServices() {
    return __awaiter(this, void 0, void 0, function* () {
        const services = [
            {
                name: 'TTS/STT Service',
                url: 'http://localhost:8000/health',
                required: false, // Optional for unit tests
            },
            {
                name: 'Backend API',
                url: 'http://localhost:8080/health',
                required: false, // Optional for unit tests
            },
        ];
        for (const service of services) {
            try {
                const response = yield fetch(service.url);
                if (response.ok) {
                    console.log(`‚úÖ ${service.name} is available for integration tests`);
                }
                else {
                    throw new Error(`Service returned ${response.status}`);
                }
            }
            catch (error) {
                if (service.required) {
                    throw new Error(`Required service ${service.name} is not available: ${error}`);
                }
                else {
                    console.log(`‚ö†Ô∏è  ${service.name} is not available (integration tests will be skipped)`);
                }
            }
        }
    });
}
/**
 * Setup test fixtures
 */
function setupTestFixtures() {
    return __awaiter(this, void 0, void 0, function* () {
        // Create sample test data
        const testData = {
            sampleMessages: [
                {
                    id: '1',
                    type: 'sent',
                    message: 'Hello, this is a test message',
                    timestamp: Date.now(),
                },
                {
                    id: '2',
                    type: 'received',
                    message: 'This is a response message',
                    timestamp: Date.now() + 1000,
                },
            ],
            sampleTranscriptions: [
                {
                    text: 'Hello world',
                    language: 'en',
                    confidence: 0.95,
                },
                {
                    text: 'Create a React component',
                    language: 'en',
                    confidence: 0.88,
                },
            ],
            sampleAudioTestCases: [
                {
                    id: 'test-basic',
                    text: 'This is a basic test',
                    description: 'Basic test case',
                },
                {
                    id: 'test-technical',
                    text: 'Create a TypeScript interface',
                    description: 'Technical terminology test',
                },
            ],
        };
        yield promises_1.default.writeFile('tests/fixtures/data/testData.json', JSON.stringify(testData, null, 2));
        console.log('üìÅ Test fixtures created');
    });
}
/**
 * Check if running in CI environment
 */
function isCI() {
    return !!(process.env.CI ||
        process.env.CONTINUOUS_INTEGRATION ||
        process.env.BUILD_NUMBER ||
        process.env.GITHUB_ACTIONS ||
        process.env.GITLAB_CI);
}
/**
 * Get test environment configuration
 */
function getTestConfig() {
    return {
        isCI: isCI(),
        timeout: isCI() ? 30000 : 10000,
        retries: isCI() ? 2 : 0,
        workers: isCI() ? 2 : '50%',
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,