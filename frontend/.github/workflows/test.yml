name: Frontend Tests

on:
  push:
    branches: [ main, develop ]
    paths: [ 'frontend/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'frontend/**' ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci --legacy-peer-deps
    
    - name: Run unit tests
      run: |
        cd frontend
        npm run test:unit:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend-unit
        name: frontend-unit-tests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: unhinged_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Python for Whisper-TTS
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        cd whisper-tts
        pip install -r requirements.txt
    
    - name: Start Whisper-TTS service
      run: |
        cd whisper-tts
        python app.py &
        sleep 10
      env:
        FLASK_ENV: testing
    
    - name: Start backend services
      run: |
        cd backend
        # Add backend startup commands here
        sleep 5
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci --legacy-peer-deps
    
    - name: Run integration tests
      run: |
        cd frontend
        npm run test:integration:services
      env:
        TEST_INTEGRATION: true
        TEST_SERVICE_URL: http://localhost:8000
    
    - name: Run audio pipeline tests
      run: |
        cd frontend
        npm run test:audio-demo

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci --legacy-peer-deps
    
    - name: Install Playwright browsers
      run: |
        cd frontend
        npx playwright install --with-deps
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Start frontend dev server
      run: |
        cd frontend
        npm run dev &
        sleep 10
    
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci --legacy-peer-deps
    
    - name: TypeScript type check
      run: |
        cd frontend
        npx tsc --noEmit
    
    - name: Lint check
      run: |
        cd frontend
        npm run lint
    
    - name: Build production
      run: |
        cd frontend
        npm run build
    
    - name: Verify build artifacts
      run: |
        cd frontend
        ls -la dist/
        test -f dist/index.html
        test -d dist/assets
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7
