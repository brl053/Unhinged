# ============================================================================
# Docker Compose - Audio Services Configuration
# ============================================================================
#
# @file docker-compose.audio.yml
# @version 1.0.0
# @author Unhinged Team
# @date 2025-01-05
# @description Docker orchestration for audio processing services
#
# This configuration sets up the complete audio processing stack:
# - Kotlin backend with clean architecture
# - Python Whisper TTS service with gRPC
# - PostgreSQL database for persistence
# - Proper networking and health checks
# ============================================================================

version: '3.8'

services:
  # ============================================================================
  # Kotlin Backend Service
  # ============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: unhinged-backend
    ports:
      - "8080:8080"  # HTTP REST API
      - "9090:9090"  # gRPC API (future)
    environment:
      # Database configuration
      - DATABASE_URL=jdbc:postgresql://postgres:5432/unhinged
      - DATABASE_USER=unhinged
      - DATABASE_PASSWORD=unhinged_password
      
      # Audio service configuration
      - AUDIO_SERVICE_HOST=whisper-tts
      - AUDIO_SERVICE_PORT=9091
      - AUDIO_SERVICE_PROTOCOL=grpc
      
      # Application configuration
      - SERVER_PORT=8080
      - LOG_LEVEL=INFO
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
      
    depends_on:
      postgres:
        condition: service_healthy
      whisper-tts:
        condition: service_healthy
    networks:
      - unhinged-network
    volumes:
      - backend-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # ============================================================================
  # Python Whisper TTS Service
  # ============================================================================
  whisper-tts:
    build:
      context: ./services/whisper-tts
      dockerfile: Dockerfile
    container_name: whisper-tts-service
    ports:
      - "8000:8000"  # HTTP API (legacy)
      - "9091:9091"  # gRPC API (primary)
    environment:
      # Service configuration
      - ENABLE_FLASK=true
      - ENABLE_GRPC=true
      - WHISPER_MODEL=base
      - TTS_ENGINE=gtts
      
      # Performance configuration
      - CUDA_VISIBLE_DEVICES=0  # Enable GPU if available
      - OMP_NUM_THREADS=4
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
      
      # Logging configuration
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      
    volumes:
      - whisper-models:/root/.cache/whisper
      - audio-uploads:/app/uploads
      - whisper-logs:/app/logs
    networks:
      - unhinged-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s  # Whisper model loading takes time
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # ============================================================================
  # PostgreSQL Database
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: unhinged-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=unhinged
      - POSTGRES_USER=unhinged
      - POSTGRES_PASSWORD=unhinged_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - unhinged-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U unhinged -d unhinged"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ============================================================================
  # Redis Cache (Optional - for session management)
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: unhinged-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis-data:/data
    networks:
      - unhinged-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # ============================================================================
  # Monitoring and Observability
  # ============================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: unhinged-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - unhinged-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: unhinged-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - unhinged-network
    restart: unless-stopped

# ============================================================================
# Networks
# ============================================================================
networks:
  unhinged-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Volumes
# ============================================================================
volumes:
  # Database storage
  postgres-data:
    driver: local
  redis-data:
    driver: local
  
  # Application storage
  backend-logs:
    driver: local
  whisper-logs:
    driver: local
  audio-uploads:
    driver: local
  
  # Model storage (persistent across container restarts)
  whisper-models:
    driver: local
  
  # Monitoring storage
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ============================================================================
# Development Overrides
# ============================================================================
# To use this configuration:
# 1. Development: docker-compose -f docker-compose.audio.yml up -d
# 2. Production: docker-compose -f docker-compose.audio.yml -f docker-compose.prod.yml up -d
# 3. Testing: docker-compose -f docker-compose.audio.yml -f docker-compose.test.yml up -d
