# @llm-type component.spec
# @llm-does Toolbar for graph editor with node palette and controls
# @llm-key Primary UI for graph editing operations
# @llm-axiom Toolbar provides access to all graph editing functions

component:
  id: "graph-toolbar"
  name: "Graph Toolbar"
  category: "container"
  
  description: |
    Toolbar for graph editing operations. Provides:
    - Node palette (available node types to add)
    - Canvas controls (zoom, fit, reset view)
    - Edit controls (undo, redo, delete)
    - Graph controls (save, execute, validate)
    - View options (show grid, show minimap)
    
    The toolbar is typically positioned at the top or left of the canvas.
    It adapts to show relevant controls based on selection state.

  interface:
    properties:
      node_types:
        type: "array"
        required: true
        description: |
          Available node types to add to graph. Each item:
          {
            "id": "speech_to_text",
            "label": "Speech to Text",
            "icon": "microphone-symbolic",
            "description": "Convert audio to text"
          }
      
      selected_count:
        type: "number"
        default: 0
        description: "Number of currently selected nodes/edges"
      
      can_undo:
        type: "boolean"
        default: false
        description: "Whether undo is available"
      
      can_redo:
        type: "boolean"
        default: false
        description: "Whether redo is available"
      
      zoom_level:
        type: "number"
        default: 1
        min: 0.1
        max: 4
        description: "Current canvas zoom level"
      
      is_executing:
        type: "boolean"
        default: false
        description: "Whether graph is currently executing"
      
      orientation:
        type: "enum"
        values: ["horizontal", "vertical"]
        default: "horizontal"
        description: "Toolbar layout orientation"
    
    states:
      default:
        description: "Toolbar ready, no active operation"

      selecting_node:
        description: "User is selecting a node type to add"

      executing:
        description: "Graph is executing"
    
    events:
      node_type_selected:
        description: "User selected a node type to add"
        payload:
          node_type: "string"
      
      zoom_changed:
        description: "Zoom level changed"
        payload:
          zoom_level: "number"
      
      undo_clicked:
        description: "Undo button clicked"
        payload: {}
      
      redo_clicked:
        description: "Redo button clicked"
        payload: {}
      
      delete_clicked:
        description: "Delete button clicked"
        payload: {}
      
      save_clicked:
        description: "Save button clicked"
        payload: {}
      
      execute_clicked:
        description: "Execute button clicked"
        payload: {}
      
      validate_clicked:
        description: "Validate button clicked"
        payload: {}
      
      fit_view_clicked:
        description: "Fit view button clicked"
        payload: {}
      
      reset_view_clicked:
        description: "Reset view button clicked"
        payload: {}
      
      toggle_grid_clicked:
        description: "Toggle grid visibility"
        payload:
          show_grid: "boolean"
      
      toggle_minimap_clicked:
        description: "Toggle minimap visibility"
        payload:
          show_minimap: "boolean"

  styling:
    default_state:
      background: "colors.surface.elevated"
      border: "1px solid"
      border_color: "colors.border.default"
      padding: "8px"
      gap: "8px"

    state_overrides:
      default:
        background: "colors.surface.elevated"

      executing:
        background: "colors.surface.default"

  composition:
    is_leaf: false
    can_contain: ["action-button", "icon-button", "dropdown", "slider"]
    layout_type: "box"
    description: |
      Toolbar contains:
      - Node palette (dropdown or scrollable list)
      - Separator
      - Canvas controls (zoom, fit, reset)
      - Separator
      - Edit controls (undo, redo, delete)
      - Separator
      - Graph controls (save, execute, validate)
      - Separator
      - View options (grid, minimap toggles)

  accessibility:
    keyboard_support: true
    screen_reader_label: "required"
    focus_indicator: "required"

    keyboard_interactions:
      - key: "Ctrl+Z"
        action: "undo"
      - key: "Ctrl+Y"
        action: "redo"
      - key: "Delete"
        action: "delete_selected"
      - key: "Ctrl+S"
        action: "save"
      - key: "Ctrl+Enter"
        action: "execute"
    
    aria_attributes:
      - "aria-label: Graph editor toolbar"
      - "role: toolbar"
      - "aria-describedby: instructions"

  examples:
    - name: "Default toolbar"
      description: "Toolbar with all controls available"
      properties:
        node_types:
          - { id: "speech_to_text", label: "Speech to Text", icon: "microphone-symbolic" }
          - { id: "text_to_speech", label: "Text to Speech", icon: "speaker-symbolic" }
          - { id: "llm_chat", label: "LLM Chat", icon: "chat-symbolic" }
          - { id: "data_transform", label: "Data Transform", icon: "transform-symbolic" }
        selected_count: 0
        can_undo: false
        can_redo: false
        zoom_level: 1
        is_executing: false
    
    - name: "With selection"
      description: "Toolbar with nodes selected"
      properties:
        node_types: []
        selected_count: 2
        can_undo: true
        can_redo: false
        zoom_level: 1.5
        is_executing: false
    
    - name: "During execution"
      description: "Toolbar while graph is executing"
      properties:
        node_types: []
        selected_count: 0
        can_undo: false
        can_redo: false
        zoom_level: 1
        is_executing: true

metadata:
  version: "1.0.0"
  last_updated: "2025-10-31"
  design_review: "pending"
  implementation_status:
    gtk4: "not_started"
    react: "not_started"
  notes: |
    Toolbar is a container component that composes existing button and
    control components. Node types are dynamically populated from the
    graph service proto definition.

