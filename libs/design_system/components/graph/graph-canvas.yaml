# @llm-type component.spec
# @llm-does Infinite canvas for node-based graph editing with pan/zoom
# @llm-key Graph editor foundation - renders nodes and edges on infinite canvas
# @llm-axiom Canvas is platform-agnostic; rendering details are implementation-specific

component:
  id: "graph-canvas"
  name: "Graph Canvas"
  category: "complex"
  
  description: |
    Infinite pan/zoom canvas for rendering and editing node-based graphs.
    Provides the foundation for visual graph editing with support for:
    - Drag-to-pan and scroll-to-zoom navigation
    - Grid snapping and alignment
    - Node and edge rendering
    - Selection and interaction
    - Real-time viewport state management
    
    This is a complex component that serves as the container for all graph
    editing interactions. It manages viewport state, rendering, and event
    coordination between nodes and edges.

  interface:
    properties:
      nodes:
        type: "array"
        required: true
        description: |
          Array of node objects. Each node must have:
          - id: unique identifier (string)
          - position: {x: number, y: number}
          - type: node type identifier (string)
          - data: node-specific configuration (object)

      edges:
        type: "array"
        required: true
        description: |
          Array of edge objects. Each edge must have:
          - id: unique identifier (string)
          - source: source node id (string)
          - target: target node id (string)
          - sourceHandle: output port name (string, optional)
          - targetHandle: input port name (string, optional)

      viewport:
        type: "object"
        default: { x: 0, y: 0, zoom: 1 }
        description: |
          Current viewport state:
          - x: pan offset horizontal (number)
          - y: pan offset vertical (number)
          - zoom: zoom level, 1.0 = 100% (number, min: 0.1, max: 4.0)

      grid_size:
        type: "number"
        default: 20
        min: 10
        max: 100
        description: "Grid cell size in pixels for visual alignment"

      snap_to_grid:
        type: "boolean"
        default: true
        description: "Whether to snap node positions to grid when moving"

      show_grid:
        type: "boolean"
        default: true
        description: "Whether to display grid background"

      readonly:
        type: "boolean"
        default: false
        description: "When true, disables all editing interactions"

    states:
      default:
        description: "Canvas is ready, no active interaction"

      panning:
        description: "User is dragging to pan the canvas"

      selecting:
        description: "User is selecting nodes (click or marquee)"

      connecting:
        description: "User is creating a connection between nodes"

      dragging_node:
        description: "User is moving a node"
    
    events:
      node_moved:
        description: "Node position changed"
        payload:
          node_id: "string"
          position: "object"
          snapped: "boolean"
      
      edge_created:
        description: "New edge created between nodes"
        payload:
          edge_id: "string"
          source_id: "string"
          target_id: "string"
          source_handle: "string"
          target_handle: "string"
      
      edge_deleted:
        description: "Edge removed"
        payload:
          edge_id: "string"
      
      node_selected:
        description: "Node selection changed"
        payload:
          selected_ids: "array"
          multi_select: "boolean"
      
      viewport_changed:
        description: "Pan or zoom changed"
        payload:
          x: "number"
          y: "number"
          zoom: "number"
      
      canvas_clicked:
        description: "Canvas background clicked (deselect)"
        payload:
          position: "object"

  styling:
    default_state:
      background: "colors.surface.default"
      grid_color: "colors.border.subtle"
      grid_opacity: 0.3
      selection_color: "colors.action.primary"
      selection_opacity: 0.2
      border: "1px solid"
      border_color: "colors.border.default"

    state_overrides:
      default:
        cursor: "default"

      panning:
        cursor: "grabbing"

      connecting:
        cursor: "crosshair"

      dragging_node:
        cursor: "grabbing"

  composition:
    is_leaf: false
    can_contain: ["graph-node", "graph-edge"]
    layout_type: "custom"
    description: |
      Canvas uses custom layout. Nodes and edges are positioned absolutely
      based on their position properties. The canvas manages coordinate
      transformation (viewport to screen space).

  accessibility:
    role: "application"
    keyboard_support: true
    screen_reader_label: "required"
    focus_indicator: "required"

    keyboard_interactions:
      - key: "Delete"
        action: "delete_selected_nodes_and_edges"
      - key: "Ctrl+Z"
        action: "undo"
      - key: "Ctrl+Y"
        action: "redo"
      - key: "Ctrl+A"
        action: "select_all_nodes"
      - key: "Escape"
        action: "deselect_all"
      - key: "Arrow Keys"
        action: "move_selected_nodes"
      - key: "Ctrl+C"
        action: "copy_selected"
      - key: "Ctrl+V"
        action: "paste"
      - key: "Ctrl+D"
        action: "duplicate_selected"
    
    aria_attributes:
      - "aria-label: Graph editor canvas"
      - "aria-describedby: instructions for keyboard navigation"
      - "role: application (allows keyboard shortcuts)"

  examples:
    - name: "Empty canvas"
      description: "Blank canvas ready for node creation"
      properties:
        nodes: []
        edges: []
        viewport: { x: 0, y: 0, zoom: 1 }
    
    - name: "Simple pipeline"
      description: "Three nodes connected in sequence"
      properties:
        nodes:
          - { id: "node1", position: {x: 100, y: 100}, type: "stt", data: {} }
          - { id: "node2", position: {x: 300, y: 100}, type: "llm", data: {} }
          - { id: "node3", position: {x: 500, y: 100}, type: "tts", data: {} }
        edges:
          - { id: "edge1", source: "node1", target: "node2" }
          - { id: "edge2", source: "node2", target: "node3" }

metadata:
  version: "1.0.0"
  last_updated: "2025-10-31"
  design_review: "pending"
  implementation_status:
    gtk4: "not_started"
    react: "not_started"
  notes: |
    This is a foundational complex component. Implementation requires:
    1. Canvas rendering engine (Cairo for GTK4, Canvas API for React)
    2. Gesture handling (drag, zoom, click)
    3. Coordinate transformation (viewport to screen space)
    4. Event coordination with child nodes and edges

