# @llm-type component.spec
# @llm-does Generic node container for graph editor
# @llm-key Represents a single operation/service in the graph
# @llm-axiom Nodes are data-driven; appearance determined by type and data

component:
  id: "graph-node"
  name: "Graph Node"
  category: "complex"
  
  description: |
    Generic container for a single node in a graph. Nodes represent operations,
    services, or data transformations in the workflow.
    
    Each node has:
    - Visual representation (icon, label, status indicator)
    - Input/output ports for connections
    - Configuration panel (optional)
    - Status display (idle, running, completed, failed)
    
    Nodes are positioned absolutely on the canvas and can be dragged to
    reposition. The node type determines available ports and configuration.

  interface:
    properties:
      id:
        type: "string"
        required: true
        description: "Unique node identifier (UUID)"
      
      type:
        type: "string"
        required: true
        description: |
          Node type identifier. Maps to NodeType enum in graph_service.proto:
          - "speech_to_text"
          - "text_to_speech"
          - "llm_chat"
          - "vision_ai"
          - "context_hydration"
          - "data_transform"
          - "custom_service"
      
      label:
        type: "string"
        required: true
        description: "Display name for the node"
      
      position:
        type: "object"
        required: true
        description: |
          Canvas position:
          - x: horizontal offset (number)
          - y: vertical offset (number)
      
      data:
        type: "object"
        default: {}
        description: |
          Node-specific configuration. Structure depends on node type.
          Example for LLM node:
          {
            "model": "llama3.1:8b",
            "temperature": 0.7,
            "max_tokens": 2048
          }
      
      selected:
        type: "boolean"
        default: false
        description: "Whether node is currently selected"
      
      status:
        type: "enum"
        values: ["idle", "running", "completed", "failed"]
        default: "idle"
        description: "Current execution status"
      
      error_message:
        type: "string"
        default: ""
        description: "Error message if status is 'failed'"
    
    states:
      default:
        description: "Node is ready, not executing"

      running:
        description: "Node is currently executing"

      completed:
        description: "Node execution completed successfully"

      failed:
        description: "Node execution failed"

      selected:
        description: "Node is selected by user"

      hovered:
        description: "Mouse is over the node"
    
    events:
      clicked:
        description: "Node clicked by user"
        payload:
          node_id: "string"
          multi_select: "boolean"
      
      double_clicked:
        description: "Node double-clicked (open config)"
        payload:
          node_id: "string"
      
      drag_started:
        description: "User started dragging node"
        payload:
          node_id: "string"
          position: "object"
      
      drag_ended:
        description: "User finished dragging node"
        payload:
          node_id: "string"
          position: "object"
      
      port_hovered:
        description: "Mouse over input/output port"
        payload:
          node_id: "string"
          port_name: "string"
          port_type: "input|output"
      
      connection_initiated:
        description: "User started creating connection from port"
        payload:
          node_id: "string"
          port_name: "string"
          port_type: "input|output"

  styling:
    default_state:
      background: "colors.surface.elevated"
      border: "2px solid"
      border_color: "colors.border.default"
      border_radius: "8px"
      padding: "12px"
      min_width: "160px"
      min_height: "80px"
      box_shadow: "elevation.shadows.1"

    state_overrides:
      default:
        border_color: "colors.border.default"

      selected:
        border_color: "colors.action.primary"
        border_width: "2px"
        box_shadow: "elevation.shadows.2"

      hovered:
        box_shadow: "elevation.shadows.2"
        border_color: "colors.border.strong"

      running:
        border_color: "colors.feedback.info"
        animation: "pulse"

      completed:
        border_color: "colors.feedback.success"

      failed:
        border_color: "colors.feedback.error"
        background: "colors.surface.default"

  composition:
    is_leaf: false
    can_contain: ["graph-port"]
    layout_type: "box"
    description: |
      Nodes contain:
      - Header: icon + label + status indicator
      - Body: configuration preview (optional)
      - Ports: input/output connection points (bottom/sides)

  accessibility:
    keyboard_support: true
    screen_reader_label: "required"
    focus_indicator: "required"

    keyboard_interactions:
      - key: "Enter"
        action: "open_configuration"
      - key: "Delete"
        action: "delete_node"
      - key: "Arrow Keys"
        action: "move_node"
      - key: "Tab"
        action: "focus_next_port"
    
    aria_attributes:
      - "aria-label: Node type and label"
      - "aria-describedby: node status and error message"
      - "role: button (for keyboard interaction)"

  examples:
    - name: "STT Node"
      description: "Speech-to-text service node"
      properties:
        id: "stt-1"
        type: "speech_to_text"
        label: "Speech to Text"
        position: { x: 100, y: 100 }
        data:
          model: "whisper-large-v3"
          service_endpoint: "localhost:9091"
        status: "idle"
    
    - name: "LLM Node (Running)"
      description: "LLM chat node during execution"
      properties:
        id: "llm-1"
        type: "llm_chat"
        label: "LLM Processing"
        position: { x: 300, y: 100 }
        data:
          model: "llama3.1:8b"
          temperature: 0.7
        status: "running"
        selected: true
    
    - name: "Failed Node"
      description: "Node with execution error"
      properties:
        id: "transform-1"
        type: "data_transform"
        label: "Data Transform"
        position: { x: 500, y: 100 }
        status: "failed"
        error_message: "Invalid input format"

metadata:
  version: "1.0.0"
  last_updated: "2025-10-31"
  design_review: "pending"
  implementation_status:
    gtk4: "not_started"
    react: "not_started"
  notes: |
    Node appearance and available ports are determined by type.
    Type-specific configuration is handled by node type definitions
    (separate component specs for each node type).

