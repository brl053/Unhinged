# Unhinged Service Registry Configuration
# @llm-type control-config
# @llm-legend Service discovery and registration configuration for runtime control
# @llm-key Central registry defining all services, their endpoints, and health checks
# @llm-map Runtime service discovery enabling dynamic orchestration and monitoring
# @llm-axiom All services must be discoverable and health-checkable for operational control
# @llm-token service-registry: Runtime service discovery and health monitoring configuration

version: "1.0"
registry_type: "unhinged-control"
last_updated: "2025-10-20T20:00:00Z"

# Service Categories and Discovery
service_categories:
  frontend:
    description: "Web interfaces and user-facing applications"
    health_check_interval: 30
    timeout: 10
    
  backend:
    description: "REST APIs and application services"
    health_check_interval: 15
    timeout: 5
    
  database:
    description: "SQL, NoSQL, and graph databases"
    health_check_interval: 60
    timeout: 30
    
  vector:
    description: "Vector databases and AI data stores"
    health_check_interval: 30
    timeout: 15
    
  messaging:
    description: "Event streaming and message brokers"
    health_check_interval: 20
    timeout: 10
    
  ai_ml:
    description: "Machine learning and AI processing"
    health_check_interval: 45
    timeout: 20
    
  admin:
    description: "Management and administrative interfaces"
    health_check_interval: 60
    timeout: 15
    
  storage:
    description: "Object storage and file systems"
    health_check_interval: 30
    timeout: 10
    
  observability:
    description: "Monitoring, logging, and tracing"
    health_check_interval: 30
    timeout: 10
    
  platform:
    description: "Core platform and infrastructure"
    health_check_interval: 20
    timeout: 10

# Service Registry
services:
  # Frontend Services
  frontend:
    category: frontend
    endpoint: "http://localhost:1000"
    health_check: "http://localhost:1000/health"
    dependencies: ["backend"]
    deployment: "control/orchestration/docker-compose.production.yml"
    
  # Backend APIs
  backend:
    category: backend
    endpoint: "http://localhost:1100"
    health_check: "http://localhost:1100/health"
    dependencies: ["database", "redis"]
    deployment: "control/orchestration/docker-compose.production.yml"
    
  speech-to-text:
    category: backend
    endpoint: "http://localhost:1101"
    health_check: "http://localhost:1101/health"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  text-to-speech:
    category: backend
    endpoint: "http://localhost:1102"
    health_check: "http://localhost:1102/health"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  vision-ai:
    category: backend
    endpoint: "http://localhost:1103"
    health_check: "http://localhost:1103/health"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  whisper-tts:
    category: backend
    endpoint: "http://localhost:1104"
    health_check: "http://localhost:1104/health"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  # Databases
  database:
    category: database
    endpoint: "postgresql://localhost:1200/unhinged"
    health_check: "tcp://localhost:1200"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  cockroachdb:
    category: database
    endpoint: "postgresql://localhost:1202"
    health_check: "http://localhost:1203/health"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  mongodb:
    category: database
    endpoint: "mongodb://localhost:1204"
    health_check: "tcp://localhost:1204"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  neo4j:
    category: database
    endpoint: "bolt://localhost:1206"
    health_check: "http://localhost:1205"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  cassandra:
    category: database
    endpoint: "cassandra://localhost:1207"
    health_check: "tcp://localhost:1207"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  # Vector/AI Stores
  weaviate:
    category: vector
    endpoint: "http://localhost:1300"
    health_check: "http://localhost:1300/v1/.well-known/ready"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  chroma:
    category: vector
    endpoint: "http://localhost:1301"
    health_check: "http://localhost:1301/api/v1/heartbeat"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  redis:
    category: vector
    endpoint: "redis://localhost:1302"
    health_check: "tcp://localhost:1302"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  elasticsearch:
    category: vector
    endpoint: "http://localhost:1303"
    health_check: "http://localhost:1303/_cluster/health"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  # Message Queues
  kafka:
    category: messaging
    endpoint: "kafka://localhost:1400"
    health_check: "tcp://localhost:1400"
    dependencies: ["zookeeper"]
    deployment: "control/orchestration/docker-compose.production.yml"
    
  zookeeper:
    category: messaging
    endpoint: "zookeeper://localhost:1401"
    health_check: "tcp://localhost:1401"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  cdc-service:
    category: messaging
    endpoint: "http://localhost:1402"
    health_check: "http://localhost:1402/health"
    dependencies: ["kafka", "database"]
    deployment: "control/orchestration/docker-compose.production.yml"
    
  # AI/ML Services
  llm:
    category: ai_ml
    endpoint: "http://localhost:1500"
    health_check: "http://localhost:1500/api/tags"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  flink-jobmanager:
    category: ai_ml
    endpoint: "http://localhost:1501"
    health_check: "http://localhost:1501/overview"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  spark-master:
    category: ai_ml
    endpoint: "spark://localhost:1502"
    health_check: "http://localhost:1601"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  # Admin UIs
  kafka-ui:
    category: admin
    endpoint: "http://localhost:1600"
    health_check: "http://localhost:1600/actuator/health"
    dependencies: ["kafka"]
    deployment: "control/orchestration/docker-compose.production.yml"
    
  # Storage
  minio:
    category: storage
    endpoint: "http://localhost:1700"
    health_check: "http://localhost:1700/minio/health/live"
    dependencies: []
    deployment: "control/orchestration/docker-compose.production.yml"
    
  # Observability (from observability compose)
  jaeger:
    category: observability
    endpoint: "http://localhost:1800"
    health_check: "http://localhost:1800"
    dependencies: []
    deployment: "control/orchestration/docker-compose.observability.yml"
    
  loki:
    category: observability
    endpoint: "http://localhost:1802"
    health_check: "http://localhost:1802/ready"
    dependencies: []
    deployment: "control/orchestration/docker-compose.observability.yml"
    
  tempo:
    category: observability
    endpoint: "http://localhost:1803"
    health_check: "http://localhost:1803/ready"
    dependencies: []
    deployment: "control/orchestration/docker-compose.observability.yml"
    
  prometheus:
    category: observability
    endpoint: "http://localhost:1806"
    health_check: "http://localhost:1806/-/healthy"
    dependencies: []
    deployment: "control/orchestration/docker-compose.observability.yml"
    
  grafana:
    category: observability
    endpoint: "http://localhost:1807"
    health_check: "http://localhost:1807/api/health"
    dependencies: ["prometheus", "loki", "tempo"]
    deployment: "control/orchestration/docker-compose.observability.yml"

# Health Check Configuration
health_checks:
  global_timeout: 30
  retry_attempts: 3
  retry_delay: 5
  failure_threshold: 3
  success_threshold: 1

# Service Discovery Settings
discovery:
  refresh_interval: 60
  cache_ttl: 300
  enable_auto_registration: true
  enable_health_monitoring: true
