# Unhinged Production Docker Compose - Categorical Port Allocation
# @llm-type infrastructure-config
# @llm-legend Production docker-compose with conflict-free categorical port allocation
# @llm-key Clean service definitions using systematic 1000-1999 port ranges
# @llm-map Primary production deployment configuration with logical port organization
# @llm-axiom All ports must be within categorical ranges to enable static-time validation
# @llm-token docker-compose-production: Conflict-free service orchestration with categorical ports

version: '3.8'

services:
  # =============================================================================
  # FRONTEND SERVICES (1000-1099)
  # Web interfaces and user-facing applications
  # =============================================================================
  
  frontend:
    build: ./frontend
    ports:
      - "1000:3000"  # External 1000 → Internal 3000
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:1100
    depends_on:
      - backend
    networks:
      - unhinged-network

  # =============================================================================
  # BACKEND APIs (1100-1199)
  # REST APIs and application services
  # =============================================================================
  
  backend:
    build: ./backend
    ports:
      - "1100:8080"  # External 1100 → Internal 8080
    environment:
      - DATABASE_URL=postgresql://postgres:password@database:5432/unhinged
      - REDIS_URL=redis://redis:6379
    depends_on:
      - database
      - redis
    networks:
      - unhinged-network

  speech-to-text:
    image: openai/whisper:latest
    ports:
      - "1101:8000"  # External 1101 → Internal 8000
    volumes:
      - ./models:/models
    networks:
      - unhinged-network

  text-to-speech:
    build: ./services/tts
    ports:
      - "1102:8000"  # External 1102 → Internal 8000
    networks:
      - unhinged-network

  vision-ai:
    build: ./services/vision
    ports:
      - "1103:8000"  # External 1103 → Internal 8000
    volumes:
      - ./models/vision:/models
    networks:
      - unhinged-network

  whisper-tts:
    build: ./services/whisper-tts
    ports:
      - "1104:8000"  # External 1104 → Internal 8000
    networks:
      - unhinged-network

  # =============================================================================
  # DATABASES (1200-1299)
  # SQL, NoSQL, and graph databases
  # =============================================================================
  
  database:
    image: postgres:15
    ports:
      - "1200:5432"  # External 1200 → Internal 5432
    environment:
      - POSTGRES_DB=unhinged
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - unhinged-network

  cockroachdb:
    image: cockroachdb/cockroach:latest
    ports:
      - "1202:26257"  # External 1202 → Internal 26257 (SQL)
      - "1203:8080"   # External 1203 → Internal 8080 (Admin UI)
    command: start-single-node --insecure
    volumes:
      - cockroach_data:/cockroach/cockroach-data
    networks:
      - unhinged-network

  mongodb:
    image: mongo:7
    ports:
      - "1204:27017"  # External 1204 → Internal 27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo_data:/data/db
    networks:
      - unhinged-network

  neo4j:
    image: neo4j:5
    ports:
      - "1205:7474"   # External 1205 → Internal 7474 (HTTP)
      - "1206:7687"   # External 1206 → Internal 7687 (Bolt)
    environment:
      - NEO4J_AUTH=neo4j/password
    volumes:
      - neo4j_data:/data
    networks:
      - unhinged-network

  cassandra:
    image: cassandra:4
    ports:
      - "1207:9042"  # External 1207 → Internal 9042
    environment:
      - CASSANDRA_CLUSTER_NAME=unhinged-cluster
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - unhinged-network

  # =============================================================================
  # VECTOR/AI STORES (1300-1399)
  # Vector databases and AI data stores
  # =============================================================================
  
  weaviate:
    image: semitechnologies/weaviate:latest
    ports:
      - "1300:8080"  # External 1300 → Internal 8080
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - unhinged-network

  chroma:
    image: chromadb/chroma:latest
    ports:
      - "1301:8000"  # External 1301 → Internal 8000
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - unhinged-network

  redis:
    image: redis:7-alpine
    ports:
      - "1302:6379"  # External 1302 → Internal 6379
    volumes:
      - redis_data:/data
    networks:
      - unhinged-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    ports:
      - "1303:9200"  # External 1303 → Internal 9200
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - unhinged-network

  # =============================================================================
  # MESSAGE QUEUES/STREAMING (1400-1499)
  # Event streaming and message brokers
  # =============================================================================
  
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "1400:9092"  # External 1400 → Internal 9092
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:1400
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - unhinged-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "1401:2181"  # External 1401 → Internal 2181
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - unhinged-network

  cdc-service:
    build: ./services/cdc
    ports:
      - "1402:8080"  # External 1402 → Internal 8080
    environment:
      - KAFKA_BROKERS=kafka:9092
      - DATABASE_URL=postgresql://postgres:password@database:5432/unhinged
    depends_on:
      - kafka
      - database
    networks:
      - unhinged-network

  # =============================================================================
  # AI/ML SERVICES (1500-1599)
  # Machine learning and AI processing
  # =============================================================================
  
  llm:
    image: ollama/ollama:latest
    ports:
      - "1500:11434"  # External 1500 → Internal 11434
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - unhinged-network

  flink-jobmanager:
    image: flink:latest
    ports:
      - "1501:8081"  # External 1501 → Internal 8081
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    networks:
      - unhinged-network

  spark-master:
    image: bitnami/spark:latest
    ports:
      - "1502:7077"  # External 1502 → Internal 7077 (Master)
      - "1601:8080"  # External 1601 → Internal 8080 (Web UI - Admin category)
    environment:
      - SPARK_MODE=master
    networks:
      - unhinged-network

  # =============================================================================
  # ADMIN/MANAGEMENT UIs (1600-1699)
  # Management and administrative interfaces
  # =============================================================================
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "1600:8080"  # External 1600 → Internal 8080
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - unhinged-network

  # Note: spark-ui is defined above with spark-master (1601:8080)

  # =============================================================================
  # STORAGE (1700-1799)
  # Object storage and file systems
  # =============================================================================
  
  minio:
    image: minio/minio:latest
    ports:
      - "1700:9000"  # External 1700 → Internal 9000 (API)
      - "1701:9001"  # External 1701 → Internal 9001 (Console)
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - unhinged-network

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  unhinged-network:
    driver: bridge
    name: unhinged-production

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  postgres_data:
    name: unhinged-postgres-data
  cockroach_data:
    name: unhinged-cockroach-data
  mongo_data:
    name: unhinged-mongo-data
  neo4j_data:
    name: unhinged-neo4j-data
  cassandra_data:
    name: unhinged-cassandra-data
  weaviate_data:
    name: unhinged-weaviate-data
  chroma_data:
    name: unhinged-chroma-data
  redis_data:
    name: unhinged-redis-data
  elasticsearch_data:
    name: unhinged-elasticsearch-data
  kafka_data:
    name: unhinged-kafka-data
  zookeeper_data:
    name: unhinged-zookeeper-data
  ollama_data:
    name: unhinged-ollama-data
  minio_data:
    name: unhinged-minio-data
