version: '3.8'

services:
  # ─────────────────────────────────────
  # DATABASES
  # ─────────────────────────────────────
  postgres:
    image: postgres:15-alpine
    container_name: unhinged-postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - unhinged
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    container_name: unhinged-redis
    ports:
      - "${REDIS_PORT}:6379"
    command: redis-server --appendonly yes --maxmemory ${REDIS_MAX_MEMORY} --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - unhinged
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # ─────────────────────────────────────
  # AI/ML SERVICES
  # ─────────────────────────────────────
  ollama:
    build:
      context: .
      dockerfile: llm/Dockerfile
    container_name: unhinged-ollama
    ports:
      - "${OLLAMA_PORT}:11434"
    volumes:
      - ollama-models:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
    networks:
      - unhinged
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  speech-to-text:
    build:
      context: .
      dockerfile: services/speech-to-text/Dockerfile
    container_name: unhinged-speech-to-text
    ports:
      - "${SPEECH_TO_TEXT_GRPC_PORT}:9091"
    environment:
      WHISPER_MODEL: ${WHISPER_MODEL}
      LOG_LEVEL: ${LOG_LEVEL}
      PYTHONUNBUFFERED: 1
    volumes:
      - whisper-models:/root/.cache/whisper
      - audio-uploads:/app/uploads
    networks:
      - unhinged

    restart: unless-stopped

  text-to-speech:
    build:
      context: .
      dockerfile: services/text-to-speech/Dockerfile
    container_name: unhinged-text-to-speech
    ports:
      - "${TEXT_TO_SPEECH_GRPC_PORT}:9092"
    environment:
      TTS_MODEL_NAME: ${TTS_MODEL_NAME}
      LOG_LEVEL: ${LOG_LEVEL}
      PYTHONUNBUFFERED: 1
    volumes:
      - tts-models:/app/models
      - audio-outputs:/app/outputs
    networks:
      - unhinged

    restart: unless-stopped

  vision-ai:
    build:
      context: .
      dockerfile: services/vision-ai/Dockerfile
    container_name: unhinged-vision-ai
    ports:
      - "${VISION_AI_GRPC_PORT}:9093"
    environment:
      VISION_MODEL: ${VISION_MODEL}
      LOG_LEVEL: ${LOG_LEVEL}
      PYTHONUNBUFFERED: 1
    volumes:
      - vision-models:/root/.cache/transformers
      - image-uploads:/app/uploads
    networks:
      - unhinged

    restart: unless-stopped

  # ─────────────────────────────────────
  # PLATFORM SERVICES
  # ─────────────────────────────────────
  persistence-platform:
    build:
      context: platforms/persistence
      dockerfile: Dockerfile.mock
    container_name: unhinged-persistence-platform
    ports:
      - "${PERSISTENCE_PLATFORM_HTTP_PORT}:8090"
      - "${PERSISTENCE_PLATFORM_GRPC_PORT}:9090"
    environment:
      JAVA_OPTS: -Xmx2g -Xms1g
      CONFIG_PATH: /app/config/persistence-platform.yaml
      LOG_LEVEL: ${LOG_LEVEL}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./build/orchestration/platforms/persistence/config:/app/config:ro
      - persistence-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - unhinged
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

networks:
  unhinged:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  ollama-models:
  whisper-models:
  tts-models:
  vision-models:
  audio-uploads:
  audio-outputs:
  image-uploads:
  persistence-logs:
