version: '3.8'

services:
  backend:
    build: ./backend
    container_name: backend-service
    environment:
      - DB_HOST=database
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - OLLAMA_HOST=http://llm:11434
      - KAFKA_BROKERS=kafka:29092
    ports:
      - "8080:8080"
    depends_on:
      - database
      - llm

  # CDC Service (Python FastAPI)
  cdc-service:
    build: ./backend/cdc-service
    container_name: cdc-service
    environment:
      - KAFKA_BROKERS=kafka:29092
      - POSTGRES_URL=postgresql://postgres:postgres@database:5432/unhinged_db
    ports:
      - "8081:8081"
    depends_on:
      - database
      - kafka

  frontend:
    build: ./frontend
    container_name: frontend-service
    ports:
      - "3000:80"
    depends_on:
      - backend

  llm:
    build: ./llm
    container_name: ollama-service
    volumes:
      - llm-models:/models  # Mount the volume to persist the model
    ports:
      - "11434:11434"
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    environment:
      # - NVIDIA_VISIBLE_DEVICES=all
      # - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      # - OLLAMA_GPU_MEMORY_FRACTION=0.8
      # - OLLAMA_NUM_PARALLEL=1
      - OLLAMA_HOST=0.0.0.0

  # @llm-type config
  # @llm-legend Docker service configuration for AI-powered image analysis microservice
  # @llm-key Defines Python container with BLIP model, Flask HTTP server, and persistent model storage
  # @llm-map Part of microservices architecture, connects backend to vision processing capabilities
  # @llm-axiom Vision service must be accessible on port 8001 for backend integration
  # @llm-contract Service must respond to health checks within 30 seconds and handle image uploads
  # @llm-token vision-models: Docker volume for persistent transformer model cache
  vision-ai:
    build: ./services/vision-ai
    container_name: vision-ai-service
    environment:
      - ENABLE_FLASK=true
      - ENABLE_GRPC=false
      - VISION_MODEL=Salesforce/blip-image-captioning-base
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    ports:
      - "8001:8001"
    volumes:
      - vision-models:/root/.cache/transformers
      - image-uploads:/app/uploads

  database:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: unhinged_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init-minimal.sql:/docker-entrypoint-initdb.d/init-cdc.sql

  # Kafka for CDC events
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 1
    ports:
      - "9092:9092"

  # Kafka UI for debugging
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    ports:
      - "8090:8080"

volumes:
  llm-models:  # Declare the volume to store the model data
  postgres-data:
  vision-models:  # Store vision model cache
  image-uploads:  # Store uploaded images
