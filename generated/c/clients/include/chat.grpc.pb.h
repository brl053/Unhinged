// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto
// Original file comments:
// ============================================================================
// Chat Service Protocol Buffer Definition - DRY Refactored
// ============================================================================
//
// @file chat.proto
// @version 1.1.0
// @author Unhinged Team
// @date 2025-01-04
// @description gRPC service definition for chat and conversation management
//
// This service provides:
// - Conversation lifecycle management using common patterns
// - Message sending with universal attachment support
// - Real-time streaming using common StreamChunk pattern
// - Standardized pagination and error handling
//
// DRY Benefits:
// - Uses common.proto for metadata, pagination, streaming, errors
// - Consistent patterns across all services
// - Reduced duplication and maintenance overhead
// ============================================================================
//
#ifndef GRPC_chat_2eproto__INCLUDED
#define GRPC_chat_2eproto__INCLUDED

#include "chat.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace unhinged {
namespace chat {
namespace v1 {

// ============================================================================
// Chat Service Definition
// ============================================================================
//
// *
// Chat service for conversation and message management
// 
// Uses common patterns for consistent API behavior across services
class ChatService final {
 public:
  static constexpr char const* service_full_name() {
    return "unhinged.chat.v1.ChatService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Conversation management
    virtual ::grpc::Status CreateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest& request, ::unhinged::chat::v1::CreateConversationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::CreateConversationResponse>> AsyncCreateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::CreateConversationResponse>>(AsyncCreateConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::CreateConversationResponse>> PrepareAsyncCreateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::CreateConversationResponse>>(PrepareAsyncCreateConversationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest& request, ::unhinged::chat::v1::GetConversationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::GetConversationResponse>> AsyncGetConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::GetConversationResponse>>(AsyncGetConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::GetConversationResponse>> PrepareAsyncGetConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::GetConversationResponse>>(PrepareAsyncGetConversationRaw(context, request, cq));
    }
    virtual ::grpc::Status ListConversations(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest& request, ::unhinged::chat::v1::ListConversationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::ListConversationsResponse>> AsyncListConversations(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::ListConversationsResponse>>(AsyncListConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::ListConversationsResponse>> PrepareAsyncListConversations(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::ListConversationsResponse>>(PrepareAsyncListConversationsRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest& request, ::unhinged::chat::v1::UpdateConversationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::UpdateConversationResponse>> AsyncUpdateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::UpdateConversationResponse>>(AsyncUpdateConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::UpdateConversationResponse>> PrepareAsyncUpdateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::UpdateConversationResponse>>(PrepareAsyncUpdateConversationRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest& request, ::unhinged::chat::v1::DeleteConversationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::DeleteConversationResponse>> AsyncDeleteConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::DeleteConversationResponse>>(AsyncDeleteConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::DeleteConversationResponse>> PrepareAsyncDeleteConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::DeleteConversationResponse>>(PrepareAsyncDeleteConversationRaw(context, request, cq));
    }
    // Message management
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest& request, ::unhinged::chat::v1::SendMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMessages(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest& request, ::unhinged::chat::v1::GetMessagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::GetMessagesResponse>> AsyncGetMessages(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::GetMessagesResponse>>(AsyncGetMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::GetMessagesResponse>> PrepareAsyncGetMessages(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::GetMessagesResponse>>(PrepareAsyncGetMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest& request, ::unhinged::chat::v1::UpdateMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::UpdateMessageResponse>> AsyncUpdateMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::UpdateMessageResponse>>(AsyncUpdateMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::UpdateMessageResponse>> PrepareAsyncUpdateMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::UpdateMessageResponse>>(PrepareAsyncUpdateMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest& request, ::unhinged::chat::v1::DeleteMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::DeleteMessageResponse>> AsyncDeleteMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::DeleteMessageResponse>>(AsyncDeleteMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::DeleteMessageResponse>> PrepareAsyncDeleteMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::DeleteMessageResponse>>(PrepareAsyncDeleteMessageRaw(context, request, cq));
    }
    // Real-time streaming (uses common StreamChunk pattern)
    std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::common::v1::StreamChunk>> StreamChat(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::common::v1::StreamChunk>>(StreamChatRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>> AsyncStreamChat(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>>(AsyncStreamChatRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>> PrepareAsyncStreamChat(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>>(PrepareAsyncStreamChatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::common::v1::StreamChunk>> SubscribeToConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::common::v1::StreamChunk>>(SubscribeToConversationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>> AsyncSubscribeToConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>>(AsyncSubscribeToConversationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>> PrepareAsyncSubscribeToConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>>(PrepareAsyncSubscribeToConversationRaw(context, request, cq));
    }
    // Standard health check
    virtual ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::unhinged::common::v1::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Conversation management
      virtual void CreateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest* request, ::unhinged::chat::v1::CreateConversationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest* request, ::unhinged::chat::v1::CreateConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest* request, ::unhinged::chat::v1::GetConversationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest* request, ::unhinged::chat::v1::GetConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListConversations(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest* request, ::unhinged::chat::v1::ListConversationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListConversations(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest* request, ::unhinged::chat::v1::ListConversationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest* request, ::unhinged::chat::v1::UpdateConversationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest* request, ::unhinged::chat::v1::UpdateConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest* request, ::unhinged::chat::v1::DeleteConversationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest* request, ::unhinged::chat::v1::DeleteConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Message management
      virtual void SendMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest* request, ::unhinged::chat::v1::SendMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest* request, ::unhinged::chat::v1::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMessages(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest* request, ::unhinged::chat::v1::GetMessagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMessages(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest* request, ::unhinged::chat::v1::GetMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest* request, ::unhinged::chat::v1::UpdateMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest* request, ::unhinged::chat::v1::UpdateMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest* request, ::unhinged::chat::v1::DeleteMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest* request, ::unhinged::chat::v1::DeleteMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Real-time streaming (uses common StreamChunk pattern)
      virtual void StreamChat(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest* request, ::grpc::ClientReadReactor< ::unhinged::common::v1::StreamChunk>* reactor) = 0;
      virtual void SubscribeToConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest* request, ::grpc::ClientReadReactor< ::unhinged::common::v1::StreamChunk>* reactor) = 0;
      // Standard health check
      virtual void HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::CreateConversationResponse>* AsyncCreateConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::CreateConversationResponse>* PrepareAsyncCreateConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::GetConversationResponse>* AsyncGetConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::GetConversationResponse>* PrepareAsyncGetConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::ListConversationsResponse>* AsyncListConversationsRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::ListConversationsResponse>* PrepareAsyncListConversationsRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::UpdateConversationResponse>* AsyncUpdateConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::UpdateConversationResponse>* PrepareAsyncUpdateConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::DeleteConversationResponse>* AsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::DeleteConversationResponse>* PrepareAsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::GetMessagesResponse>* AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::GetMessagesResponse>* PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::UpdateMessageResponse>* AsyncUpdateMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::UpdateMessageResponse>* PrepareAsyncUpdateMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::DeleteMessageResponse>* AsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::chat::v1::DeleteMessageResponse>* PrepareAsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::unhinged::common::v1::StreamChunk>* StreamChatRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>* AsyncStreamChatRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>* PrepareAsyncStreamChatRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::unhinged::common::v1::StreamChunk>* SubscribeToConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>* AsyncSubscribeToConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>* PrepareAsyncSubscribeToConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest& request, ::unhinged::chat::v1::CreateConversationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::CreateConversationResponse>> AsyncCreateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::CreateConversationResponse>>(AsyncCreateConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::CreateConversationResponse>> PrepareAsyncCreateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::CreateConversationResponse>>(PrepareAsyncCreateConversationRaw(context, request, cq));
    }
    ::grpc::Status GetConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest& request, ::unhinged::chat::v1::GetConversationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetConversationResponse>> AsyncGetConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetConversationResponse>>(AsyncGetConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetConversationResponse>> PrepareAsyncGetConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetConversationResponse>>(PrepareAsyncGetConversationRaw(context, request, cq));
    }
    ::grpc::Status ListConversations(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest& request, ::unhinged::chat::v1::ListConversationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::ListConversationsResponse>> AsyncListConversations(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::ListConversationsResponse>>(AsyncListConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::ListConversationsResponse>> PrepareAsyncListConversations(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::ListConversationsResponse>>(PrepareAsyncListConversationsRaw(context, request, cq));
    }
    ::grpc::Status UpdateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest& request, ::unhinged::chat::v1::UpdateConversationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateConversationResponse>> AsyncUpdateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateConversationResponse>>(AsyncUpdateConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateConversationResponse>> PrepareAsyncUpdateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateConversationResponse>>(PrepareAsyncUpdateConversationRaw(context, request, cq));
    }
    ::grpc::Status DeleteConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest& request, ::unhinged::chat::v1::DeleteConversationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteConversationResponse>> AsyncDeleteConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteConversationResponse>>(AsyncDeleteConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteConversationResponse>> PrepareAsyncDeleteConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteConversationResponse>>(PrepareAsyncDeleteConversationRaw(context, request, cq));
    }
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest& request, ::unhinged::chat::v1::SendMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    ::grpc::Status GetMessages(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest& request, ::unhinged::chat::v1::GetMessagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetMessagesResponse>> AsyncGetMessages(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetMessagesResponse>>(AsyncGetMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetMessagesResponse>> PrepareAsyncGetMessages(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetMessagesResponse>>(PrepareAsyncGetMessagesRaw(context, request, cq));
    }
    ::grpc::Status UpdateMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest& request, ::unhinged::chat::v1::UpdateMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateMessageResponse>> AsyncUpdateMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateMessageResponse>>(AsyncUpdateMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateMessageResponse>> PrepareAsyncUpdateMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateMessageResponse>>(PrepareAsyncUpdateMessageRaw(context, request, cq));
    }
    ::grpc::Status DeleteMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest& request, ::unhinged::chat::v1::DeleteMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteMessageResponse>> AsyncDeleteMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteMessageResponse>>(AsyncDeleteMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteMessageResponse>> PrepareAsyncDeleteMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteMessageResponse>>(PrepareAsyncDeleteMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>> StreamChat(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>>(StreamChatRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>> AsyncStreamChat(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>>(AsyncStreamChatRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>> PrepareAsyncStreamChat(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>>(PrepareAsyncStreamChatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>> SubscribeToConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>>(SubscribeToConversationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>> AsyncSubscribeToConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>>(AsyncSubscribeToConversationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>> PrepareAsyncSubscribeToConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>>(PrepareAsyncSubscribeToConversationRaw(context, request, cq));
    }
    ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::unhinged::common::v1::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest* request, ::unhinged::chat::v1::CreateConversationResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest* request, ::unhinged::chat::v1::CreateConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest* request, ::unhinged::chat::v1::GetConversationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest* request, ::unhinged::chat::v1::GetConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListConversations(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest* request, ::unhinged::chat::v1::ListConversationsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListConversations(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest* request, ::unhinged::chat::v1::ListConversationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest* request, ::unhinged::chat::v1::UpdateConversationResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest* request, ::unhinged::chat::v1::UpdateConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest* request, ::unhinged::chat::v1::DeleteConversationResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest* request, ::unhinged::chat::v1::DeleteConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest* request, ::unhinged::chat::v1::SendMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void SendMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest* request, ::unhinged::chat::v1::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMessages(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest* request, ::unhinged::chat::v1::GetMessagesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMessages(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest* request, ::unhinged::chat::v1::GetMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest* request, ::unhinged::chat::v1::UpdateMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest* request, ::unhinged::chat::v1::UpdateMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest* request, ::unhinged::chat::v1::DeleteMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest* request, ::unhinged::chat::v1::DeleteMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamChat(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest* request, ::grpc::ClientReadReactor< ::unhinged::common::v1::StreamChunk>* reactor) override;
      void SubscribeToConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest* request, ::grpc::ClientReadReactor< ::unhinged::common::v1::StreamChunk>* reactor) override;
      void HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::CreateConversationResponse>* AsyncCreateConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::CreateConversationResponse>* PrepareAsyncCreateConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetConversationResponse>* AsyncGetConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetConversationResponse>* PrepareAsyncGetConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::ListConversationsResponse>* AsyncListConversationsRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::ListConversationsResponse>* PrepareAsyncListConversationsRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateConversationResponse>* AsyncUpdateConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateConversationResponse>* PrepareAsyncUpdateConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteConversationResponse>* AsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteConversationResponse>* PrepareAsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetMessagesResponse>* AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetMessagesResponse>* PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateMessageResponse>* AsyncUpdateMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateMessageResponse>* PrepareAsyncUpdateMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteMessageResponse>* AsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteMessageResponse>* PrepareAsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>* StreamChatRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request) override;
    ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* AsyncStreamChatRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* PrepareAsyncStreamChatRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>* SubscribeToConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request) override;
    ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* AsyncSubscribeToConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* PrepareAsyncSubscribeToConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateConversation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConversation_;
    const ::grpc::internal::RpcMethod rpcmethod_ListConversations_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateConversation_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteConversation_;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamChat_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeToConversation_;
    const ::grpc::internal::RpcMethod rpcmethod_HealthCheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Conversation management
    virtual ::grpc::Status CreateConversation(::grpc::ServerContext* context, const ::unhinged::chat::v1::CreateConversationRequest* request, ::unhinged::chat::v1::CreateConversationResponse* response);
    virtual ::grpc::Status GetConversation(::grpc::ServerContext* context, const ::unhinged::chat::v1::GetConversationRequest* request, ::unhinged::chat::v1::GetConversationResponse* response);
    virtual ::grpc::Status ListConversations(::grpc::ServerContext* context, const ::unhinged::chat::v1::ListConversationsRequest* request, ::unhinged::chat::v1::ListConversationsResponse* response);
    virtual ::grpc::Status UpdateConversation(::grpc::ServerContext* context, const ::unhinged::chat::v1::UpdateConversationRequest* request, ::unhinged::chat::v1::UpdateConversationResponse* response);
    virtual ::grpc::Status DeleteConversation(::grpc::ServerContext* context, const ::unhinged::chat::v1::DeleteConversationRequest* request, ::unhinged::chat::v1::DeleteConversationResponse* response);
    // Message management
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::unhinged::chat::v1::SendMessageRequest* request, ::unhinged::chat::v1::SendMessageResponse* response);
    virtual ::grpc::Status GetMessages(::grpc::ServerContext* context, const ::unhinged::chat::v1::GetMessagesRequest* request, ::unhinged::chat::v1::GetMessagesResponse* response);
    virtual ::grpc::Status UpdateMessage(::grpc::ServerContext* context, const ::unhinged::chat::v1::UpdateMessageRequest* request, ::unhinged::chat::v1::UpdateMessageResponse* response);
    virtual ::grpc::Status DeleteMessage(::grpc::ServerContext* context, const ::unhinged::chat::v1::DeleteMessageRequest* request, ::unhinged::chat::v1::DeleteMessageResponse* response);
    // Real-time streaming (uses common StreamChunk pattern)
    virtual ::grpc::Status StreamChat(::grpc::ServerContext* context, const ::unhinged::chat::v1::StreamChatRequest* request, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* writer);
    virtual ::grpc::Status SubscribeToConversation(::grpc::ServerContext* context, const ::unhinged::chat::v1::SubscribeRequest* request, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* writer);
    // Standard health check
    virtual ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateConversation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::CreateConversationRequest* /*request*/, ::unhinged::chat::v1::CreateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateConversation(::grpc::ServerContext* context, ::unhinged::chat::v1::CreateConversationRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::chat::v1::CreateConversationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConversation() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::GetConversationRequest* /*request*/, ::unhinged::chat::v1::GetConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConversation(::grpc::ServerContext* context, ::unhinged::chat::v1::GetConversationRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::chat::v1::GetConversationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListConversations() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConversations(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::ListConversationsRequest* /*request*/, ::unhinged::chat::v1::ListConversationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListConversations(::grpc::ServerContext* context, ::unhinged::chat::v1::ListConversationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::chat::v1::ListConversationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateConversation() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::UpdateConversationRequest* /*request*/, ::unhinged::chat::v1::UpdateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateConversation(::grpc::ServerContext* context, ::unhinged::chat::v1::UpdateConversationRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::chat::v1::UpdateConversationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteConversation() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::DeleteConversationRequest* /*request*/, ::unhinged::chat::v1::DeleteConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteConversation(::grpc::ServerContext* context, ::unhinged::chat::v1::DeleteConversationRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::chat::v1::DeleteConversationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::SendMessageRequest* /*request*/, ::unhinged::chat::v1::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::unhinged::chat::v1::SendMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::chat::v1::SendMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMessages() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::GetMessagesRequest* /*request*/, ::unhinged::chat::v1::GetMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessages(::grpc::ServerContext* context, ::unhinged::chat::v1::GetMessagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::chat::v1::GetMessagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateMessage() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_UpdateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::UpdateMessageRequest* /*request*/, ::unhinged::chat::v1::UpdateMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMessage(::grpc::ServerContext* context, ::unhinged::chat::v1::UpdateMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::chat::v1::UpdateMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::DeleteMessageRequest* /*request*/, ::unhinged::chat::v1::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMessage(::grpc::ServerContext* context, ::unhinged::chat::v1::DeleteMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::chat::v1::DeleteMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamChat() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_StreamChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamChat(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::StreamChatRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamChat(::grpc::ServerContext* context, ::unhinged::chat::v1::StreamChatRequest* request, ::grpc::ServerAsyncWriter< ::unhinged::common::v1::StreamChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeToConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeToConversation() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SubscribeToConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeToConversation(::grpc::ServerContext* context, ::unhinged::chat::v1::SubscribeRequest* request, ::grpc::ServerAsyncWriter< ::unhinged::common::v1::StreamChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HealthCheck() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::unhinged::common::v1::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::common::v1::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateConversation<WithAsyncMethod_GetConversation<WithAsyncMethod_ListConversations<WithAsyncMethod_UpdateConversation<WithAsyncMethod_DeleteConversation<WithAsyncMethod_SendMessage<WithAsyncMethod_GetMessages<WithAsyncMethod_UpdateMessage<WithAsyncMethod_DeleteMessage<WithAsyncMethod_StreamChat<WithAsyncMethod_SubscribeToConversation<WithAsyncMethod_HealthCheck<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateConversation() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::CreateConversationRequest, ::unhinged::chat::v1::CreateConversationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::chat::v1::CreateConversationRequest* request, ::unhinged::chat::v1::CreateConversationResponse* response) { return this->CreateConversation(context, request, response); }));}
    void SetMessageAllocatorFor_CreateConversation(
        ::grpc::MessageAllocator< ::unhinged::chat::v1::CreateConversationRequest, ::unhinged::chat::v1::CreateConversationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::CreateConversationRequest, ::unhinged::chat::v1::CreateConversationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::CreateConversationRequest* /*request*/, ::unhinged::chat::v1::CreateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::chat::v1::CreateConversationRequest* /*request*/, ::unhinged::chat::v1::CreateConversationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetConversation() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::GetConversationRequest, ::unhinged::chat::v1::GetConversationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::chat::v1::GetConversationRequest* request, ::unhinged::chat::v1::GetConversationResponse* response) { return this->GetConversation(context, request, response); }));}
    void SetMessageAllocatorFor_GetConversation(
        ::grpc::MessageAllocator< ::unhinged::chat::v1::GetConversationRequest, ::unhinged::chat::v1::GetConversationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::GetConversationRequest, ::unhinged::chat::v1::GetConversationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::GetConversationRequest* /*request*/, ::unhinged::chat::v1::GetConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::chat::v1::GetConversationRequest* /*request*/, ::unhinged::chat::v1::GetConversationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListConversations() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::ListConversationsRequest, ::unhinged::chat::v1::ListConversationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::chat::v1::ListConversationsRequest* request, ::unhinged::chat::v1::ListConversationsResponse* response) { return this->ListConversations(context, request, response); }));}
    void SetMessageAllocatorFor_ListConversations(
        ::grpc::MessageAllocator< ::unhinged::chat::v1::ListConversationsRequest, ::unhinged::chat::v1::ListConversationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::ListConversationsRequest, ::unhinged::chat::v1::ListConversationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConversations(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::ListConversationsRequest* /*request*/, ::unhinged::chat::v1::ListConversationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::chat::v1::ListConversationsRequest* /*request*/, ::unhinged::chat::v1::ListConversationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateConversation() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::UpdateConversationRequest, ::unhinged::chat::v1::UpdateConversationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::chat::v1::UpdateConversationRequest* request, ::unhinged::chat::v1::UpdateConversationResponse* response) { return this->UpdateConversation(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateConversation(
        ::grpc::MessageAllocator< ::unhinged::chat::v1::UpdateConversationRequest, ::unhinged::chat::v1::UpdateConversationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::UpdateConversationRequest, ::unhinged::chat::v1::UpdateConversationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::UpdateConversationRequest* /*request*/, ::unhinged::chat::v1::UpdateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::chat::v1::UpdateConversationRequest* /*request*/, ::unhinged::chat::v1::UpdateConversationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteConversation() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::DeleteConversationRequest, ::unhinged::chat::v1::DeleteConversationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::chat::v1::DeleteConversationRequest* request, ::unhinged::chat::v1::DeleteConversationResponse* response) { return this->DeleteConversation(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteConversation(
        ::grpc::MessageAllocator< ::unhinged::chat::v1::DeleteConversationRequest, ::unhinged::chat::v1::DeleteConversationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::DeleteConversationRequest, ::unhinged::chat::v1::DeleteConversationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::DeleteConversationRequest* /*request*/, ::unhinged::chat::v1::DeleteConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::chat::v1::DeleteConversationRequest* /*request*/, ::unhinged::chat::v1::DeleteConversationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::SendMessageRequest, ::unhinged::chat::v1::SendMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::chat::v1::SendMessageRequest* request, ::unhinged::chat::v1::SendMessageResponse* response) { return this->SendMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessage(
        ::grpc::MessageAllocator< ::unhinged::chat::v1::SendMessageRequest, ::unhinged::chat::v1::SendMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::SendMessageRequest, ::unhinged::chat::v1::SendMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::SendMessageRequest* /*request*/, ::unhinged::chat::v1::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::chat::v1::SendMessageRequest* /*request*/, ::unhinged::chat::v1::SendMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMessages() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::GetMessagesRequest, ::unhinged::chat::v1::GetMessagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::chat::v1::GetMessagesRequest* request, ::unhinged::chat::v1::GetMessagesResponse* response) { return this->GetMessages(context, request, response); }));}
    void SetMessageAllocatorFor_GetMessages(
        ::grpc::MessageAllocator< ::unhinged::chat::v1::GetMessagesRequest, ::unhinged::chat::v1::GetMessagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::GetMessagesRequest, ::unhinged::chat::v1::GetMessagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::GetMessagesRequest* /*request*/, ::unhinged::chat::v1::GetMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::chat::v1::GetMessagesRequest* /*request*/, ::unhinged::chat::v1::GetMessagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateMessage() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::UpdateMessageRequest, ::unhinged::chat::v1::UpdateMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::chat::v1::UpdateMessageRequest* request, ::unhinged::chat::v1::UpdateMessageResponse* response) { return this->UpdateMessage(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateMessage(
        ::grpc::MessageAllocator< ::unhinged::chat::v1::UpdateMessageRequest, ::unhinged::chat::v1::UpdateMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::UpdateMessageRequest, ::unhinged::chat::v1::UpdateMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::UpdateMessageRequest* /*request*/, ::unhinged::chat::v1::UpdateMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::chat::v1::UpdateMessageRequest* /*request*/, ::unhinged::chat::v1::UpdateMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::DeleteMessageRequest, ::unhinged::chat::v1::DeleteMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::chat::v1::DeleteMessageRequest* request, ::unhinged::chat::v1::DeleteMessageResponse* response) { return this->DeleteMessage(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteMessage(
        ::grpc::MessageAllocator< ::unhinged::chat::v1::DeleteMessageRequest, ::unhinged::chat::v1::DeleteMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::chat::v1::DeleteMessageRequest, ::unhinged::chat::v1::DeleteMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::DeleteMessageRequest* /*request*/, ::unhinged::chat::v1::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::chat::v1::DeleteMessageRequest* /*request*/, ::unhinged::chat::v1::DeleteMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamChat() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::unhinged::chat::v1::StreamChatRequest, ::unhinged::common::v1::StreamChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::chat::v1::StreamChatRequest* request) { return this->StreamChat(context, request); }));
    }
    ~WithCallbackMethod_StreamChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamChat(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::StreamChatRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::unhinged::common::v1::StreamChunk>* StreamChat(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::chat::v1::StreamChatRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeToConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeToConversation() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackServerStreamingHandler< ::unhinged::chat::v1::SubscribeRequest, ::unhinged::common::v1::StreamChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::chat::v1::SubscribeRequest* request) { return this->SubscribeToConversation(context, request); }));
    }
    ~WithCallbackMethod_SubscribeToConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::unhinged::common::v1::StreamChunk>* SubscribeToConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::chat::v1::SubscribeRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response) { return this->HealthCheck(context, request, response); }));}
    void SetMessageAllocatorFor_HealthCheck(
        ::grpc::MessageAllocator< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateConversation<WithCallbackMethod_GetConversation<WithCallbackMethod_ListConversations<WithCallbackMethod_UpdateConversation<WithCallbackMethod_DeleteConversation<WithCallbackMethod_SendMessage<WithCallbackMethod_GetMessages<WithCallbackMethod_UpdateMessage<WithCallbackMethod_DeleteMessage<WithCallbackMethod_StreamChat<WithCallbackMethod_SubscribeToConversation<WithCallbackMethod_HealthCheck<Service > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateConversation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::CreateConversationRequest* /*request*/, ::unhinged::chat::v1::CreateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConversation() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::GetConversationRequest* /*request*/, ::unhinged::chat::v1::GetConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListConversations() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConversations(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::ListConversationsRequest* /*request*/, ::unhinged::chat::v1::ListConversationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateConversation() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::UpdateConversationRequest* /*request*/, ::unhinged::chat::v1::UpdateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteConversation() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::DeleteConversationRequest* /*request*/, ::unhinged::chat::v1::DeleteConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::SendMessageRequest* /*request*/, ::unhinged::chat::v1::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMessages() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::GetMessagesRequest* /*request*/, ::unhinged::chat::v1::GetMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateMessage() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_UpdateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::UpdateMessageRequest* /*request*/, ::unhinged::chat::v1::UpdateMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::DeleteMessageRequest* /*request*/, ::unhinged::chat::v1::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamChat() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_StreamChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamChat(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::StreamChatRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeToConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeToConversation() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SubscribeToConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HealthCheck() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateConversation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::CreateConversationRequest* /*request*/, ::unhinged::chat::v1::CreateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateConversation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConversation() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::GetConversationRequest* /*request*/, ::unhinged::chat::v1::GetConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConversation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListConversations() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConversations(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::ListConversationsRequest* /*request*/, ::unhinged::chat::v1::ListConversationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListConversations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateConversation() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::UpdateConversationRequest* /*request*/, ::unhinged::chat::v1::UpdateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateConversation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteConversation() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::DeleteConversationRequest* /*request*/, ::unhinged::chat::v1::DeleteConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteConversation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessage() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::SendMessageRequest* /*request*/, ::unhinged::chat::v1::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMessages() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::GetMessagesRequest* /*request*/, ::unhinged::chat::v1::GetMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateMessage() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_UpdateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::UpdateMessageRequest* /*request*/, ::unhinged::chat::v1::UpdateMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::DeleteMessageRequest* /*request*/, ::unhinged::chat::v1::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamChat() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_StreamChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamChat(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::StreamChatRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamChat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeToConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeToConversation() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SubscribeToConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeToConversation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateConversation() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateConversation(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::CreateConversationRequest* /*request*/, ::unhinged::chat::v1::CreateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetConversation() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetConversation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::GetConversationRequest* /*request*/, ::unhinged::chat::v1::GetConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListConversations() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListConversations(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConversations(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::ListConversationsRequest* /*request*/, ::unhinged::chat::v1::ListConversationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateConversation() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateConversation(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::UpdateConversationRequest* /*request*/, ::unhinged::chat::v1::UpdateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteConversation() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteConversation(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::DeleteConversationRequest* /*request*/, ::unhinged::chat::v1::DeleteConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::SendMessageRequest* /*request*/, ::unhinged::chat::v1::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMessages() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMessages(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::GetMessagesRequest* /*request*/, ::unhinged::chat::v1::GetMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateMessage() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::UpdateMessageRequest* /*request*/, ::unhinged::chat::v1::UpdateMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::DeleteMessageRequest* /*request*/, ::unhinged::chat::v1::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamChat() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamChat(context, request); }));
    }
    ~WithRawCallbackMethod_StreamChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamChat(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::StreamChatRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamChat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeToConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeToConversation() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeToConversation(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeToConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeToConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HealthCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateConversation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::chat::v1::CreateConversationRequest, ::unhinged::chat::v1::CreateConversationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::chat::v1::CreateConversationRequest, ::unhinged::chat::v1::CreateConversationResponse>* streamer) {
                       return this->StreamedCreateConversation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::CreateConversationRequest* /*request*/, ::unhinged::chat::v1::CreateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateConversation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::chat::v1::CreateConversationRequest,::unhinged::chat::v1::CreateConversationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConversation() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::chat::v1::GetConversationRequest, ::unhinged::chat::v1::GetConversationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::chat::v1::GetConversationRequest, ::unhinged::chat::v1::GetConversationResponse>* streamer) {
                       return this->StreamedGetConversation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::GetConversationRequest* /*request*/, ::unhinged::chat::v1::GetConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConversation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::chat::v1::GetConversationRequest,::unhinged::chat::v1::GetConversationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListConversations() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::chat::v1::ListConversationsRequest, ::unhinged::chat::v1::ListConversationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::chat::v1::ListConversationsRequest, ::unhinged::chat::v1::ListConversationsResponse>* streamer) {
                       return this->StreamedListConversations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListConversations(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::ListConversationsRequest* /*request*/, ::unhinged::chat::v1::ListConversationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListConversations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::chat::v1::ListConversationsRequest,::unhinged::chat::v1::ListConversationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateConversation() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::chat::v1::UpdateConversationRequest, ::unhinged::chat::v1::UpdateConversationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::chat::v1::UpdateConversationRequest, ::unhinged::chat::v1::UpdateConversationResponse>* streamer) {
                       return this->StreamedUpdateConversation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::UpdateConversationRequest* /*request*/, ::unhinged::chat::v1::UpdateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateConversation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::chat::v1::UpdateConversationRequest,::unhinged::chat::v1::UpdateConversationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteConversation() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::chat::v1::DeleteConversationRequest, ::unhinged::chat::v1::DeleteConversationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::chat::v1::DeleteConversationRequest, ::unhinged::chat::v1::DeleteConversationResponse>* streamer) {
                       return this->StreamedDeleteConversation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::DeleteConversationRequest* /*request*/, ::unhinged::chat::v1::DeleteConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteConversation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::chat::v1::DeleteConversationRequest,::unhinged::chat::v1::DeleteConversationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::chat::v1::SendMessageRequest, ::unhinged::chat::v1::SendMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::chat::v1::SendMessageRequest, ::unhinged::chat::v1::SendMessageResponse>* streamer) {
                       return this->StreamedSendMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::SendMessageRequest* /*request*/, ::unhinged::chat::v1::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::chat::v1::SendMessageRequest,::unhinged::chat::v1::SendMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMessages() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::chat::v1::GetMessagesRequest, ::unhinged::chat::v1::GetMessagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::chat::v1::GetMessagesRequest, ::unhinged::chat::v1::GetMessagesResponse>* streamer) {
                       return this->StreamedGetMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::GetMessagesRequest* /*request*/, ::unhinged::chat::v1::GetMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::chat::v1::GetMessagesRequest,::unhinged::chat::v1::GetMessagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateMessage() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::chat::v1::UpdateMessageRequest, ::unhinged::chat::v1::UpdateMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::chat::v1::UpdateMessageRequest, ::unhinged::chat::v1::UpdateMessageResponse>* streamer) {
                       return this->StreamedUpdateMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::UpdateMessageRequest* /*request*/, ::unhinged::chat::v1::UpdateMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::chat::v1::UpdateMessageRequest,::unhinged::chat::v1::UpdateMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::chat::v1::DeleteMessageRequest, ::unhinged::chat::v1::DeleteMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::chat::v1::DeleteMessageRequest, ::unhinged::chat::v1::DeleteMessageResponse>* streamer) {
                       return this->StreamedDeleteMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::DeleteMessageRequest* /*request*/, ::unhinged::chat::v1::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::chat::v1::DeleteMessageRequest,::unhinged::chat::v1::DeleteMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HealthCheck() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>* streamer) {
                       return this->StreamedHealthCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::common::v1::HealthCheckRequest,::unhinged::common::v1::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateConversation<WithStreamedUnaryMethod_GetConversation<WithStreamedUnaryMethod_ListConversations<WithStreamedUnaryMethod_UpdateConversation<WithStreamedUnaryMethod_DeleteConversation<WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_GetMessages<WithStreamedUnaryMethod_UpdateMessage<WithStreamedUnaryMethod_DeleteMessage<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamChat() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::unhinged::chat::v1::StreamChatRequest, ::unhinged::common::v1::StreamChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::unhinged::chat::v1::StreamChatRequest, ::unhinged::common::v1::StreamChunk>* streamer) {
                       return this->StreamedStreamChat(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamChat(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::StreamChatRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamChat(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::unhinged::chat::v1::StreamChatRequest,::unhinged::common::v1::StreamChunk>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeToConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeToConversation() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::unhinged::chat::v1::SubscribeRequest, ::unhinged::common::v1::StreamChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::unhinged::chat::v1::SubscribeRequest, ::unhinged::common::v1::StreamChunk>* streamer) {
                       return this->StreamedSubscribeToConversation(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeToConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeToConversation(::grpc::ServerContext* /*context*/, const ::unhinged::chat::v1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeToConversation(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::unhinged::chat::v1::SubscribeRequest,::unhinged::common::v1::StreamChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamChat<WithSplitStreamingMethod_SubscribeToConversation<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateConversation<WithStreamedUnaryMethod_GetConversation<WithStreamedUnaryMethod_ListConversations<WithStreamedUnaryMethod_UpdateConversation<WithStreamedUnaryMethod_DeleteConversation<WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_GetMessages<WithStreamedUnaryMethod_UpdateMessage<WithStreamedUnaryMethod_DeleteMessage<WithSplitStreamingMethod_StreamChat<WithSplitStreamingMethod_SubscribeToConversation<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace chat
}  // namespace unhinged


#endif  // GRPC_chat_2eproto__INCLUDED
