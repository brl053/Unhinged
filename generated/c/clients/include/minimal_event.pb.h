// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minimal_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minimal_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_minimal_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_minimal_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minimal_5fevent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minimal_5fevent_2eproto;
namespace unhinged {
namespace cdc {
namespace minimal {
class LLMInferenceEvent;
struct LLMInferenceEventDefaultTypeInternal;
extern LLMInferenceEventDefaultTypeInternal _LLMInferenceEvent_default_instance_;
class UniversalEvent;
struct UniversalEventDefaultTypeInternal;
extern UniversalEventDefaultTypeInternal _UniversalEvent_default_instance_;
}  // namespace minimal
}  // namespace cdc
}  // namespace unhinged
PROTOBUF_NAMESPACE_OPEN
template<> ::unhinged::cdc::minimal::LLMInferenceEvent* Arena::CreateMaybeMessage<::unhinged::cdc::minimal::LLMInferenceEvent>(Arena*);
template<> ::unhinged::cdc::minimal::UniversalEvent* Arena::CreateMaybeMessage<::unhinged::cdc::minimal::UniversalEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace unhinged {
namespace cdc {
namespace minimal {

// ===================================================================

class UniversalEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unhinged.cdc.minimal.UniversalEvent) */ {
 public:
  inline UniversalEvent() : UniversalEvent(nullptr) {}
  ~UniversalEvent() override;
  explicit PROTOBUF_CONSTEXPR UniversalEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UniversalEvent(const UniversalEvent& from);
  UniversalEvent(UniversalEvent&& from) noexcept
    : UniversalEvent() {
    *this = ::std::move(from);
  }

  inline UniversalEvent& operator=(const UniversalEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniversalEvent& operator=(UniversalEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UniversalEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const UniversalEvent* internal_default_instance() {
    return reinterpret_cast<const UniversalEvent*>(
               &_UniversalEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UniversalEvent& a, UniversalEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(UniversalEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniversalEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UniversalEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UniversalEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UniversalEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UniversalEvent& from) {
    UniversalEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniversalEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unhinged.cdc.minimal.UniversalEvent";
  }
  protected:
  explicit UniversalEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
    kEventTypeFieldNumber = 2,
    kUserIdFieldNumber = 4,
    kSessionIdFieldNumber = 5,
    kPayloadFieldNumber = 6,
    kTimestampMsFieldNumber = 3,
  };
  // string event_id = 1;
  void clear_event_id();
  const std::string& event_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_id();
  PROTOBUF_NODISCARD std::string* release_event_id();
  void set_allocated_event_id(std::string* event_id);
  private:
  const std::string& _internal_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_id(const std::string& value);
  std::string* _internal_mutable_event_id();
  public:

  // string event_type = 2;
  void clear_event_type();
  const std::string& event_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_type();
  PROTOBUF_NODISCARD std::string* release_event_type();
  void set_allocated_event_type(std::string* event_type);
  private:
  const std::string& _internal_event_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_type(const std::string& value);
  std::string* _internal_mutable_event_type();
  public:

  // string user_id = 4;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 5;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // bytes payload = 6;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // int64 timestamp_ms = 3;
  void clear_timestamp_ms();
  int64_t timestamp_ms() const;
  void set_timestamp_ms(int64_t value);
  private:
  int64_t _internal_timestamp_ms() const;
  void _internal_set_timestamp_ms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:unhinged.cdc.minimal.UniversalEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    int64_t timestamp_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minimal_5fevent_2eproto;
};
// -------------------------------------------------------------------

class LLMInferenceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unhinged.cdc.minimal.LLMInferenceEvent) */ {
 public:
  inline LLMInferenceEvent() : LLMInferenceEvent(nullptr) {}
  ~LLMInferenceEvent() override;
  explicit PROTOBUF_CONSTEXPR LLMInferenceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LLMInferenceEvent(const LLMInferenceEvent& from);
  LLMInferenceEvent(LLMInferenceEvent&& from) noexcept
    : LLMInferenceEvent() {
    *this = ::std::move(from);
  }

  inline LLMInferenceEvent& operator=(const LLMInferenceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LLMInferenceEvent& operator=(LLMInferenceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LLMInferenceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const LLMInferenceEvent* internal_default_instance() {
    return reinterpret_cast<const LLMInferenceEvent*>(
               &_LLMInferenceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LLMInferenceEvent& a, LLMInferenceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(LLMInferenceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LLMInferenceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LLMInferenceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LLMInferenceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LLMInferenceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LLMInferenceEvent& from) {
    LLMInferenceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LLMInferenceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unhinged.cdc.minimal.LLMInferenceEvent";
  }
  protected:
  explicit LLMInferenceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPromptFieldNumber = 1,
    kResponseFieldNumber = 2,
    kModelFieldNumber = 3,
    kErrorMessageFieldNumber = 8,
    kIntentFieldNumber = 9,
    kPromptTokensFieldNumber = 4,
    kResponseTokensFieldNumber = 5,
    kLatencyMsFieldNumber = 6,
    kSuccessFieldNumber = 7,
    kConfidenceFieldNumber = 10,
  };
  // string prompt = 1;
  void clear_prompt();
  const std::string& prompt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prompt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prompt();
  PROTOBUF_NODISCARD std::string* release_prompt();
  void set_allocated_prompt(std::string* prompt);
  private:
  const std::string& _internal_prompt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prompt(const std::string& value);
  std::string* _internal_mutable_prompt();
  public:

  // string response = 2;
  void clear_response();
  const std::string& response() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response();
  PROTOBUF_NODISCARD std::string* release_response();
  void set_allocated_response(std::string* response);
  private:
  const std::string& _internal_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // string model = 3;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string error_message = 8;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // string intent = 9;
  void clear_intent();
  const std::string& intent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_intent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_intent();
  PROTOBUF_NODISCARD std::string* release_intent();
  void set_allocated_intent(std::string* intent);
  private:
  const std::string& _internal_intent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intent(const std::string& value);
  std::string* _internal_mutable_intent();
  public:

  // int32 prompt_tokens = 4;
  void clear_prompt_tokens();
  int32_t prompt_tokens() const;
  void set_prompt_tokens(int32_t value);
  private:
  int32_t _internal_prompt_tokens() const;
  void _internal_set_prompt_tokens(int32_t value);
  public:

  // int32 response_tokens = 5;
  void clear_response_tokens();
  int32_t response_tokens() const;
  void set_response_tokens(int32_t value);
  private:
  int32_t _internal_response_tokens() const;
  void _internal_set_response_tokens(int32_t value);
  public:

  // int64 latency_ms = 6;
  void clear_latency_ms();
  int64_t latency_ms() const;
  void set_latency_ms(int64_t value);
  private:
  int64_t _internal_latency_ms() const;
  void _internal_set_latency_ms(int64_t value);
  public:

  // bool success = 7;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // float confidence = 10;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:unhinged.cdc.minimal.LLMInferenceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prompt_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intent_;
    int32_t prompt_tokens_;
    int32_t response_tokens_;
    int64_t latency_ms_;
    bool success_;
    float confidence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minimal_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UniversalEvent

// string event_id = 1;
inline void UniversalEvent::clear_event_id() {
  _impl_.event_id_.ClearToEmpty();
}
inline const std::string& UniversalEvent::event_id() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.UniversalEvent.event_id)
  return _internal_event_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UniversalEvent::set_event_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.event_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.UniversalEvent.event_id)
}
inline std::string* UniversalEvent::mutable_event_id() {
  std::string* _s = _internal_mutable_event_id();
  // @@protoc_insertion_point(field_mutable:unhinged.cdc.minimal.UniversalEvent.event_id)
  return _s;
}
inline const std::string& UniversalEvent::_internal_event_id() const {
  return _impl_.event_id_.Get();
}
inline void UniversalEvent::_internal_set_event_id(const std::string& value) {
  
  _impl_.event_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UniversalEvent::_internal_mutable_event_id() {
  
  return _impl_.event_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UniversalEvent::release_event_id() {
  // @@protoc_insertion_point(field_release:unhinged.cdc.minimal.UniversalEvent.event_id)
  return _impl_.event_id_.Release();
}
inline void UniversalEvent::set_allocated_event_id(std::string* event_id) {
  if (event_id != nullptr) {
    
  } else {
    
  }
  _impl_.event_id_.SetAllocated(event_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_id_.IsDefault()) {
    _impl_.event_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.minimal.UniversalEvent.event_id)
}

// string event_type = 2;
inline void UniversalEvent::clear_event_type() {
  _impl_.event_type_.ClearToEmpty();
}
inline const std::string& UniversalEvent::event_type() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.UniversalEvent.event_type)
  return _internal_event_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UniversalEvent::set_event_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.event_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.UniversalEvent.event_type)
}
inline std::string* UniversalEvent::mutable_event_type() {
  std::string* _s = _internal_mutable_event_type();
  // @@protoc_insertion_point(field_mutable:unhinged.cdc.minimal.UniversalEvent.event_type)
  return _s;
}
inline const std::string& UniversalEvent::_internal_event_type() const {
  return _impl_.event_type_.Get();
}
inline void UniversalEvent::_internal_set_event_type(const std::string& value) {
  
  _impl_.event_type_.Set(value, GetArenaForAllocation());
}
inline std::string* UniversalEvent::_internal_mutable_event_type() {
  
  return _impl_.event_type_.Mutable(GetArenaForAllocation());
}
inline std::string* UniversalEvent::release_event_type() {
  // @@protoc_insertion_point(field_release:unhinged.cdc.minimal.UniversalEvent.event_type)
  return _impl_.event_type_.Release();
}
inline void UniversalEvent::set_allocated_event_type(std::string* event_type) {
  if (event_type != nullptr) {
    
  } else {
    
  }
  _impl_.event_type_.SetAllocated(event_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_type_.IsDefault()) {
    _impl_.event_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.minimal.UniversalEvent.event_type)
}

// int64 timestamp_ms = 3;
inline void UniversalEvent::clear_timestamp_ms() {
  _impl_.timestamp_ms_ = int64_t{0};
}
inline int64_t UniversalEvent::_internal_timestamp_ms() const {
  return _impl_.timestamp_ms_;
}
inline int64_t UniversalEvent::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.UniversalEvent.timestamp_ms)
  return _internal_timestamp_ms();
}
inline void UniversalEvent::_internal_set_timestamp_ms(int64_t value) {
  
  _impl_.timestamp_ms_ = value;
}
inline void UniversalEvent::set_timestamp_ms(int64_t value) {
  _internal_set_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.UniversalEvent.timestamp_ms)
}

// string user_id = 4;
inline void UniversalEvent::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UniversalEvent::user_id() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.UniversalEvent.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UniversalEvent::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.UniversalEvent.user_id)
}
inline std::string* UniversalEvent::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:unhinged.cdc.minimal.UniversalEvent.user_id)
  return _s;
}
inline const std::string& UniversalEvent::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UniversalEvent::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UniversalEvent::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UniversalEvent::release_user_id() {
  // @@protoc_insertion_point(field_release:unhinged.cdc.minimal.UniversalEvent.user_id)
  return _impl_.user_id_.Release();
}
inline void UniversalEvent::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.minimal.UniversalEvent.user_id)
}

// string session_id = 5;
inline void UniversalEvent::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& UniversalEvent::session_id() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.UniversalEvent.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UniversalEvent::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.UniversalEvent.session_id)
}
inline std::string* UniversalEvent::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:unhinged.cdc.minimal.UniversalEvent.session_id)
  return _s;
}
inline const std::string& UniversalEvent::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void UniversalEvent::_internal_set_session_id(const std::string& value) {
  
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UniversalEvent::_internal_mutable_session_id() {
  
  return _impl_.session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UniversalEvent::release_session_id() {
  // @@protoc_insertion_point(field_release:unhinged.cdc.minimal.UniversalEvent.session_id)
  return _impl_.session_id_.Release();
}
inline void UniversalEvent::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  _impl_.session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.minimal.UniversalEvent.session_id)
}

// bytes payload = 6;
inline void UniversalEvent::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& UniversalEvent::payload() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.UniversalEvent.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UniversalEvent::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.UniversalEvent.payload)
}
inline std::string* UniversalEvent::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:unhinged.cdc.minimal.UniversalEvent.payload)
  return _s;
}
inline const std::string& UniversalEvent::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void UniversalEvent::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* UniversalEvent::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* UniversalEvent::release_payload() {
  // @@protoc_insertion_point(field_release:unhinged.cdc.minimal.UniversalEvent.payload)
  return _impl_.payload_.Release();
}
inline void UniversalEvent::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.minimal.UniversalEvent.payload)
}

// -------------------------------------------------------------------

// LLMInferenceEvent

// string prompt = 1;
inline void LLMInferenceEvent::clear_prompt() {
  _impl_.prompt_.ClearToEmpty();
}
inline const std::string& LLMInferenceEvent::prompt() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.LLMInferenceEvent.prompt)
  return _internal_prompt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LLMInferenceEvent::set_prompt(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prompt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.LLMInferenceEvent.prompt)
}
inline std::string* LLMInferenceEvent::mutable_prompt() {
  std::string* _s = _internal_mutable_prompt();
  // @@protoc_insertion_point(field_mutable:unhinged.cdc.minimal.LLMInferenceEvent.prompt)
  return _s;
}
inline const std::string& LLMInferenceEvent::_internal_prompt() const {
  return _impl_.prompt_.Get();
}
inline void LLMInferenceEvent::_internal_set_prompt(const std::string& value) {
  
  _impl_.prompt_.Set(value, GetArenaForAllocation());
}
inline std::string* LLMInferenceEvent::_internal_mutable_prompt() {
  
  return _impl_.prompt_.Mutable(GetArenaForAllocation());
}
inline std::string* LLMInferenceEvent::release_prompt() {
  // @@protoc_insertion_point(field_release:unhinged.cdc.minimal.LLMInferenceEvent.prompt)
  return _impl_.prompt_.Release();
}
inline void LLMInferenceEvent::set_allocated_prompt(std::string* prompt) {
  if (prompt != nullptr) {
    
  } else {
    
  }
  _impl_.prompt_.SetAllocated(prompt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prompt_.IsDefault()) {
    _impl_.prompt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.minimal.LLMInferenceEvent.prompt)
}

// string response = 2;
inline void LLMInferenceEvent::clear_response() {
  _impl_.response_.ClearToEmpty();
}
inline const std::string& LLMInferenceEvent::response() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.LLMInferenceEvent.response)
  return _internal_response();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LLMInferenceEvent::set_response(ArgT0&& arg0, ArgT... args) {
 
 _impl_.response_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.LLMInferenceEvent.response)
}
inline std::string* LLMInferenceEvent::mutable_response() {
  std::string* _s = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:unhinged.cdc.minimal.LLMInferenceEvent.response)
  return _s;
}
inline const std::string& LLMInferenceEvent::_internal_response() const {
  return _impl_.response_.Get();
}
inline void LLMInferenceEvent::_internal_set_response(const std::string& value) {
  
  _impl_.response_.Set(value, GetArenaForAllocation());
}
inline std::string* LLMInferenceEvent::_internal_mutable_response() {
  
  return _impl_.response_.Mutable(GetArenaForAllocation());
}
inline std::string* LLMInferenceEvent::release_response() {
  // @@protoc_insertion_point(field_release:unhinged.cdc.minimal.LLMInferenceEvent.response)
  return _impl_.response_.Release();
}
inline void LLMInferenceEvent::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  _impl_.response_.SetAllocated(response, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.response_.IsDefault()) {
    _impl_.response_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.minimal.LLMInferenceEvent.response)
}

// string model = 3;
inline void LLMInferenceEvent::clear_model() {
  _impl_.model_.ClearToEmpty();
}
inline const std::string& LLMInferenceEvent::model() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.LLMInferenceEvent.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LLMInferenceEvent::set_model(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.LLMInferenceEvent.model)
}
inline std::string* LLMInferenceEvent::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:unhinged.cdc.minimal.LLMInferenceEvent.model)
  return _s;
}
inline const std::string& LLMInferenceEvent::_internal_model() const {
  return _impl_.model_.Get();
}
inline void LLMInferenceEvent::_internal_set_model(const std::string& value) {
  
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* LLMInferenceEvent::_internal_mutable_model() {
  
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* LLMInferenceEvent::release_model() {
  // @@protoc_insertion_point(field_release:unhinged.cdc.minimal.LLMInferenceEvent.model)
  return _impl_.model_.Release();
}
inline void LLMInferenceEvent::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.minimal.LLMInferenceEvent.model)
}

// int32 prompt_tokens = 4;
inline void LLMInferenceEvent::clear_prompt_tokens() {
  _impl_.prompt_tokens_ = 0;
}
inline int32_t LLMInferenceEvent::_internal_prompt_tokens() const {
  return _impl_.prompt_tokens_;
}
inline int32_t LLMInferenceEvent::prompt_tokens() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.LLMInferenceEvent.prompt_tokens)
  return _internal_prompt_tokens();
}
inline void LLMInferenceEvent::_internal_set_prompt_tokens(int32_t value) {
  
  _impl_.prompt_tokens_ = value;
}
inline void LLMInferenceEvent::set_prompt_tokens(int32_t value) {
  _internal_set_prompt_tokens(value);
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.LLMInferenceEvent.prompt_tokens)
}

// int32 response_tokens = 5;
inline void LLMInferenceEvent::clear_response_tokens() {
  _impl_.response_tokens_ = 0;
}
inline int32_t LLMInferenceEvent::_internal_response_tokens() const {
  return _impl_.response_tokens_;
}
inline int32_t LLMInferenceEvent::response_tokens() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.LLMInferenceEvent.response_tokens)
  return _internal_response_tokens();
}
inline void LLMInferenceEvent::_internal_set_response_tokens(int32_t value) {
  
  _impl_.response_tokens_ = value;
}
inline void LLMInferenceEvent::set_response_tokens(int32_t value) {
  _internal_set_response_tokens(value);
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.LLMInferenceEvent.response_tokens)
}

// int64 latency_ms = 6;
inline void LLMInferenceEvent::clear_latency_ms() {
  _impl_.latency_ms_ = int64_t{0};
}
inline int64_t LLMInferenceEvent::_internal_latency_ms() const {
  return _impl_.latency_ms_;
}
inline int64_t LLMInferenceEvent::latency_ms() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.LLMInferenceEvent.latency_ms)
  return _internal_latency_ms();
}
inline void LLMInferenceEvent::_internal_set_latency_ms(int64_t value) {
  
  _impl_.latency_ms_ = value;
}
inline void LLMInferenceEvent::set_latency_ms(int64_t value) {
  _internal_set_latency_ms(value);
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.LLMInferenceEvent.latency_ms)
}

// bool success = 7;
inline void LLMInferenceEvent::clear_success() {
  _impl_.success_ = false;
}
inline bool LLMInferenceEvent::_internal_success() const {
  return _impl_.success_;
}
inline bool LLMInferenceEvent::success() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.LLMInferenceEvent.success)
  return _internal_success();
}
inline void LLMInferenceEvent::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void LLMInferenceEvent::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.LLMInferenceEvent.success)
}

// string error_message = 8;
inline void LLMInferenceEvent::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& LLMInferenceEvent::error_message() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.LLMInferenceEvent.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LLMInferenceEvent::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.LLMInferenceEvent.error_message)
}
inline std::string* LLMInferenceEvent::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:unhinged.cdc.minimal.LLMInferenceEvent.error_message)
  return _s;
}
inline const std::string& LLMInferenceEvent::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void LLMInferenceEvent::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* LLMInferenceEvent::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* LLMInferenceEvent::release_error_message() {
  // @@protoc_insertion_point(field_release:unhinged.cdc.minimal.LLMInferenceEvent.error_message)
  return _impl_.error_message_.Release();
}
inline void LLMInferenceEvent::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.minimal.LLMInferenceEvent.error_message)
}

// string intent = 9;
inline void LLMInferenceEvent::clear_intent() {
  _impl_.intent_.ClearToEmpty();
}
inline const std::string& LLMInferenceEvent::intent() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.LLMInferenceEvent.intent)
  return _internal_intent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LLMInferenceEvent::set_intent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.intent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.LLMInferenceEvent.intent)
}
inline std::string* LLMInferenceEvent::mutable_intent() {
  std::string* _s = _internal_mutable_intent();
  // @@protoc_insertion_point(field_mutable:unhinged.cdc.minimal.LLMInferenceEvent.intent)
  return _s;
}
inline const std::string& LLMInferenceEvent::_internal_intent() const {
  return _impl_.intent_.Get();
}
inline void LLMInferenceEvent::_internal_set_intent(const std::string& value) {
  
  _impl_.intent_.Set(value, GetArenaForAllocation());
}
inline std::string* LLMInferenceEvent::_internal_mutable_intent() {
  
  return _impl_.intent_.Mutable(GetArenaForAllocation());
}
inline std::string* LLMInferenceEvent::release_intent() {
  // @@protoc_insertion_point(field_release:unhinged.cdc.minimal.LLMInferenceEvent.intent)
  return _impl_.intent_.Release();
}
inline void LLMInferenceEvent::set_allocated_intent(std::string* intent) {
  if (intent != nullptr) {
    
  } else {
    
  }
  _impl_.intent_.SetAllocated(intent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.intent_.IsDefault()) {
    _impl_.intent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.minimal.LLMInferenceEvent.intent)
}

// float confidence = 10;
inline void LLMInferenceEvent::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float LLMInferenceEvent::_internal_confidence() const {
  return _impl_.confidence_;
}
inline float LLMInferenceEvent::confidence() const {
  // @@protoc_insertion_point(field_get:unhinged.cdc.minimal.LLMInferenceEvent.confidence)
  return _internal_confidence();
}
inline void LLMInferenceEvent::_internal_set_confidence(float value) {
  
  _impl_.confidence_ = value;
}
inline void LLMInferenceEvent::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:unhinged.cdc.minimal.LLMInferenceEvent.confidence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minimal
}  // namespace cdc
}  // namespace unhinged

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_minimal_5fevent_2eproto
