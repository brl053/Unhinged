// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: llm.proto
// Original file comments:
// ============================================================================
// LLM Service Protocol Buffer Definition - DRY Refactored
// ============================================================================
//
// @file llm.proto
// @version 1.1.0
// @author Unhinged Team
// @date 2025-01-04
// @description gRPC service definition for LLM completion and model management
//
// This service provides:
// - LLM completion (synchronous and streaming)
// - Model management and capabilities
// - Token estimation and usage tracking
// - Integration with chat messages and DocumentStore context
//
// DRY Benefits:
// - Uses common.proto for streaming, usage metrics, pagination
// - Reuses chat.proto message types for consistency
// - Standardized error handling and health checks
// ============================================================================
//
#ifndef GRPC_llm_2eproto__INCLUDED
#define GRPC_llm_2eproto__INCLUDED

#include "llm.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace unhinged {
namespace llm {
namespace v1 {

// ============================================================================
// LLM Service Definition
// ============================================================================
//
// *
// LLM service for completion and model management
// 
// Integrates with chat service for conversation context
// and uses common patterns for consistency
class LLMService final {
 public:
  static constexpr char const* service_full_name() {
    return "unhinged.llm.v1.LLMService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Completion operations
    virtual ::grpc::Status GenerateCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::unhinged::llm::v1::CompletionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::CompletionResponse>> AsyncGenerateCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::CompletionResponse>>(AsyncGenerateCompletionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::CompletionResponse>> PrepareAsyncGenerateCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::CompletionResponse>>(PrepareAsyncGenerateCompletionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::common::v1::StreamChunk>> StreamCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::common::v1::StreamChunk>>(StreamCompletionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>> AsyncStreamCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>>(AsyncStreamCompletionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>> PrepareAsyncStreamCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>>(PrepareAsyncStreamCompletionRaw(context, request, cq));
    }
    // ← DRY!
    // Model management
    virtual ::grpc::Status ListModels(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest& request, ::unhinged::llm::v1::ListModelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::ListModelsResponse>> AsyncListModels(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::ListModelsResponse>>(AsyncListModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::ListModelsResponse>> PrepareAsyncListModels(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::ListModelsResponse>>(PrepareAsyncListModelsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetModel(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest& request, ::unhinged::llm::v1::GetModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::GetModelResponse>> AsyncGetModel(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::GetModelResponse>>(AsyncGetModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::GetModelResponse>> PrepareAsyncGetModel(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::GetModelResponse>>(PrepareAsyncGetModelRaw(context, request, cq));
    }
    // Token operations
    virtual ::grpc::Status EstimateTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest& request, ::unhinged::llm::v1::TokenEstimationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::TokenEstimationResponse>> AsyncEstimateTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::TokenEstimationResponse>>(AsyncEstimateTokensRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::TokenEstimationResponse>> PrepareAsyncEstimateTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::TokenEstimationResponse>>(PrepareAsyncEstimateTokensRaw(context, request, cq));
    }
    virtual ::grpc::Status CountTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest& request, ::unhinged::llm::v1::TokenCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::TokenCountResponse>> AsyncCountTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::TokenCountResponse>>(AsyncCountTokensRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::TokenCountResponse>> PrepareAsyncCountTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::TokenCountResponse>>(PrepareAsyncCountTokensRaw(context, request, cq));
    }
    // Standard health check
    virtual ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::unhinged::common::v1::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    // ← DRY!
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Completion operations
      virtual void GenerateCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::unhinged::llm::v1::CompletionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::unhinged::llm::v1::CompletionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::grpc::ClientReadReactor< ::unhinged::common::v1::StreamChunk>* reactor) = 0;
      // ← DRY!
      // Model management
      virtual void ListModels(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest* request, ::unhinged::llm::v1::ListModelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListModels(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest* request, ::unhinged::llm::v1::ListModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetModel(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest* request, ::unhinged::llm::v1::GetModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModel(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest* request, ::unhinged::llm::v1::GetModelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Token operations
      virtual void EstimateTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest* request, ::unhinged::llm::v1::TokenEstimationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EstimateTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest* request, ::unhinged::llm::v1::TokenEstimationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CountTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest* request, ::unhinged::llm::v1::TokenCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CountTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest* request, ::unhinged::llm::v1::TokenCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Standard health check
      virtual void HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ← DRY!
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::CompletionResponse>* AsyncGenerateCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::CompletionResponse>* PrepareAsyncGenerateCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::unhinged::common::v1::StreamChunk>* StreamCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>* AsyncStreamCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>* PrepareAsyncStreamCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::ListModelsResponse>* AsyncListModelsRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::ListModelsResponse>* PrepareAsyncListModelsRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::GetModelResponse>* AsyncGetModelRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::GetModelResponse>* PrepareAsyncGetModelRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::TokenEstimationResponse>* AsyncEstimateTokensRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::TokenEstimationResponse>* PrepareAsyncEstimateTokensRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::TokenCountResponse>* AsyncCountTokensRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::llm::v1::TokenCountResponse>* PrepareAsyncCountTokensRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GenerateCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::unhinged::llm::v1::CompletionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::CompletionResponse>> AsyncGenerateCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::CompletionResponse>>(AsyncGenerateCompletionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::CompletionResponse>> PrepareAsyncGenerateCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::CompletionResponse>>(PrepareAsyncGenerateCompletionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>> StreamCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>>(StreamCompletionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>> AsyncStreamCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>>(AsyncStreamCompletionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>> PrepareAsyncStreamCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>>(PrepareAsyncStreamCompletionRaw(context, request, cq));
    }
    ::grpc::Status ListModels(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest& request, ::unhinged::llm::v1::ListModelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::ListModelsResponse>> AsyncListModels(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::ListModelsResponse>>(AsyncListModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::ListModelsResponse>> PrepareAsyncListModels(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::ListModelsResponse>>(PrepareAsyncListModelsRaw(context, request, cq));
    }
    ::grpc::Status GetModel(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest& request, ::unhinged::llm::v1::GetModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::GetModelResponse>> AsyncGetModel(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::GetModelResponse>>(AsyncGetModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::GetModelResponse>> PrepareAsyncGetModel(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::GetModelResponse>>(PrepareAsyncGetModelRaw(context, request, cq));
    }
    ::grpc::Status EstimateTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest& request, ::unhinged::llm::v1::TokenEstimationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenEstimationResponse>> AsyncEstimateTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenEstimationResponse>>(AsyncEstimateTokensRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenEstimationResponse>> PrepareAsyncEstimateTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenEstimationResponse>>(PrepareAsyncEstimateTokensRaw(context, request, cq));
    }
    ::grpc::Status CountTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest& request, ::unhinged::llm::v1::TokenCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenCountResponse>> AsyncCountTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenCountResponse>>(AsyncCountTokensRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenCountResponse>> PrepareAsyncCountTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenCountResponse>>(PrepareAsyncCountTokensRaw(context, request, cq));
    }
    ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::unhinged::common::v1::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GenerateCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::unhinged::llm::v1::CompletionResponse* response, std::function<void(::grpc::Status)>) override;
      void GenerateCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::unhinged::llm::v1::CompletionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::grpc::ClientReadReactor< ::unhinged::common::v1::StreamChunk>* reactor) override;
      void ListModels(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest* request, ::unhinged::llm::v1::ListModelsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListModels(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest* request, ::unhinged::llm::v1::ListModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModel(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest* request, ::unhinged::llm::v1::GetModelResponse* response, std::function<void(::grpc::Status)>) override;
      void GetModel(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest* request, ::unhinged::llm::v1::GetModelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EstimateTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest* request, ::unhinged::llm::v1::TokenEstimationResponse* response, std::function<void(::grpc::Status)>) override;
      void EstimateTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest* request, ::unhinged::llm::v1::TokenEstimationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CountTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest* request, ::unhinged::llm::v1::TokenCountResponse* response, std::function<void(::grpc::Status)>) override;
      void CountTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest* request, ::unhinged::llm::v1::TokenCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::CompletionResponse>* AsyncGenerateCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::CompletionResponse>* PrepareAsyncGenerateCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>* StreamCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request) override;
    ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* AsyncStreamCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* PrepareAsyncStreamCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::ListModelsResponse>* AsyncListModelsRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::ListModelsResponse>* PrepareAsyncListModelsRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::GetModelResponse>* AsyncGetModelRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::GetModelResponse>* PrepareAsyncGetModelRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenEstimationResponse>* AsyncEstimateTokensRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenEstimationResponse>* PrepareAsyncEstimateTokensRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenCountResponse>* AsyncCountTokensRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenCountResponse>* PrepareAsyncCountTokensRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateCompletion_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamCompletion_;
    const ::grpc::internal::RpcMethod rpcmethod_ListModels_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModel_;
    const ::grpc::internal::RpcMethod rpcmethod_EstimateTokens_;
    const ::grpc::internal::RpcMethod rpcmethod_CountTokens_;
    const ::grpc::internal::RpcMethod rpcmethod_HealthCheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Completion operations
    virtual ::grpc::Status GenerateCompletion(::grpc::ServerContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::unhinged::llm::v1::CompletionResponse* response);
    virtual ::grpc::Status StreamCompletion(::grpc::ServerContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* writer);
    // ← DRY!
    // Model management
    virtual ::grpc::Status ListModels(::grpc::ServerContext* context, const ::unhinged::llm::v1::ListModelsRequest* request, ::unhinged::llm::v1::ListModelsResponse* response);
    virtual ::grpc::Status GetModel(::grpc::ServerContext* context, const ::unhinged::llm::v1::GetModelRequest* request, ::unhinged::llm::v1::GetModelResponse* response);
    // Token operations
    virtual ::grpc::Status EstimateTokens(::grpc::ServerContext* context, const ::unhinged::llm::v1::TokenEstimationRequest* request, ::unhinged::llm::v1::TokenEstimationResponse* response);
    virtual ::grpc::Status CountTokens(::grpc::ServerContext* context, const ::unhinged::llm::v1::TokenCountRequest* request, ::unhinged::llm::v1::TokenCountResponse* response);
    // Standard health check
    virtual ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response);
    // ← DRY!
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateCompletion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateCompletion() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GenerateCompletion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateCompletion(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/, ::unhinged::llm::v1::CompletionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateCompletion(::grpc::ServerContext* context, ::unhinged::llm::v1::CompletionRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::llm::v1::CompletionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamCompletion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamCompletion() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamCompletion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCompletion(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamCompletion(::grpc::ServerContext* context, ::unhinged::llm::v1::CompletionRequest* request, ::grpc::ServerAsyncWriter< ::unhinged::common::v1::StreamChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListModels() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::ListModelsRequest* /*request*/, ::unhinged::llm::v1::ListModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModels(::grpc::ServerContext* context, ::unhinged::llm::v1::ListModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::llm::v1::ListModelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::GetModelRequest* /*request*/, ::unhinged::llm::v1::GetModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModel(::grpc::ServerContext* context, ::unhinged::llm::v1::GetModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::llm::v1::GetModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EstimateTokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EstimateTokens() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_EstimateTokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateTokens(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::TokenEstimationRequest* /*request*/, ::unhinged::llm::v1::TokenEstimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstimateTokens(::grpc::ServerContext* context, ::unhinged::llm::v1::TokenEstimationRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::llm::v1::TokenEstimationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CountTokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CountTokens() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CountTokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountTokens(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::TokenCountRequest* /*request*/, ::unhinged::llm::v1::TokenCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCountTokens(::grpc::ServerContext* context, ::unhinged::llm::v1::TokenCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::llm::v1::TokenCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HealthCheck() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::unhinged::common::v1::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::common::v1::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GenerateCompletion<WithAsyncMethod_StreamCompletion<WithAsyncMethod_ListModels<WithAsyncMethod_GetModel<WithAsyncMethod_EstimateTokens<WithAsyncMethod_CountTokens<WithAsyncMethod_HealthCheck<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GenerateCompletion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateCompletion() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::llm::v1::CompletionRequest, ::unhinged::llm::v1::CompletionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::unhinged::llm::v1::CompletionResponse* response) { return this->GenerateCompletion(context, request, response); }));}
    void SetMessageAllocatorFor_GenerateCompletion(
        ::grpc::MessageAllocator< ::unhinged::llm::v1::CompletionRequest, ::unhinged::llm::v1::CompletionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::llm::v1::CompletionRequest, ::unhinged::llm::v1::CompletionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GenerateCompletion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateCompletion(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/, ::unhinged::llm::v1::CompletionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenerateCompletion(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/, ::unhinged::llm::v1::CompletionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamCompletion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamCompletion() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::unhinged::llm::v1::CompletionRequest, ::unhinged::common::v1::StreamChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::llm::v1::CompletionRequest* request) { return this->StreamCompletion(context, request); }));
    }
    ~WithCallbackMethod_StreamCompletion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCompletion(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::unhinged::common::v1::StreamChunk>* StreamCompletion(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListModels() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::llm::v1::ListModelsRequest, ::unhinged::llm::v1::ListModelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::llm::v1::ListModelsRequest* request, ::unhinged::llm::v1::ListModelsResponse* response) { return this->ListModels(context, request, response); }));}
    void SetMessageAllocatorFor_ListModels(
        ::grpc::MessageAllocator< ::unhinged::llm::v1::ListModelsRequest, ::unhinged::llm::v1::ListModelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::llm::v1::ListModelsRequest, ::unhinged::llm::v1::ListModelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::ListModelsRequest* /*request*/, ::unhinged::llm::v1::ListModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModels(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::llm::v1::ListModelsRequest* /*request*/, ::unhinged::llm::v1::ListModelsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModel() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::llm::v1::GetModelRequest, ::unhinged::llm::v1::GetModelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::llm::v1::GetModelRequest* request, ::unhinged::llm::v1::GetModelResponse* response) { return this->GetModel(context, request, response); }));}
    void SetMessageAllocatorFor_GetModel(
        ::grpc::MessageAllocator< ::unhinged::llm::v1::GetModelRequest, ::unhinged::llm::v1::GetModelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::llm::v1::GetModelRequest, ::unhinged::llm::v1::GetModelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::GetModelRequest* /*request*/, ::unhinged::llm::v1::GetModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModel(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::llm::v1::GetModelRequest* /*request*/, ::unhinged::llm::v1::GetModelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EstimateTokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EstimateTokens() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::llm::v1::TokenEstimationRequest, ::unhinged::llm::v1::TokenEstimationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::llm::v1::TokenEstimationRequest* request, ::unhinged::llm::v1::TokenEstimationResponse* response) { return this->EstimateTokens(context, request, response); }));}
    void SetMessageAllocatorFor_EstimateTokens(
        ::grpc::MessageAllocator< ::unhinged::llm::v1::TokenEstimationRequest, ::unhinged::llm::v1::TokenEstimationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::llm::v1::TokenEstimationRequest, ::unhinged::llm::v1::TokenEstimationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EstimateTokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateTokens(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::TokenEstimationRequest* /*request*/, ::unhinged::llm::v1::TokenEstimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EstimateTokens(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::llm::v1::TokenEstimationRequest* /*request*/, ::unhinged::llm::v1::TokenEstimationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CountTokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CountTokens() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::llm::v1::TokenCountRequest, ::unhinged::llm::v1::TokenCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::llm::v1::TokenCountRequest* request, ::unhinged::llm::v1::TokenCountResponse* response) { return this->CountTokens(context, request, response); }));}
    void SetMessageAllocatorFor_CountTokens(
        ::grpc::MessageAllocator< ::unhinged::llm::v1::TokenCountRequest, ::unhinged::llm::v1::TokenCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::llm::v1::TokenCountRequest, ::unhinged::llm::v1::TokenCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CountTokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountTokens(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::TokenCountRequest* /*request*/, ::unhinged::llm::v1::TokenCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CountTokens(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::llm::v1::TokenCountRequest* /*request*/, ::unhinged::llm::v1::TokenCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response) { return this->HealthCheck(context, request, response); }));}
    void SetMessageAllocatorFor_HealthCheck(
        ::grpc::MessageAllocator< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GenerateCompletion<WithCallbackMethod_StreamCompletion<WithCallbackMethod_ListModels<WithCallbackMethod_GetModel<WithCallbackMethod_EstimateTokens<WithCallbackMethod_CountTokens<WithCallbackMethod_HealthCheck<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GenerateCompletion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateCompletion() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GenerateCompletion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateCompletion(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/, ::unhinged::llm::v1::CompletionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamCompletion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamCompletion() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamCompletion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCompletion(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListModels() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::ListModelsRequest* /*request*/, ::unhinged::llm::v1::ListModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::GetModelRequest* /*request*/, ::unhinged::llm::v1::GetModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EstimateTokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EstimateTokens() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_EstimateTokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateTokens(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::TokenEstimationRequest* /*request*/, ::unhinged::llm::v1::TokenEstimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CountTokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CountTokens() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CountTokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountTokens(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::TokenCountRequest* /*request*/, ::unhinged::llm::v1::TokenCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HealthCheck() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateCompletion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateCompletion() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GenerateCompletion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateCompletion(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/, ::unhinged::llm::v1::CompletionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateCompletion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamCompletion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamCompletion() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamCompletion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCompletion(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamCompletion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListModels() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::ListModelsRequest* /*request*/, ::unhinged::llm::v1::ListModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModel() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::GetModelRequest* /*request*/, ::unhinged::llm::v1::GetModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EstimateTokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EstimateTokens() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_EstimateTokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateTokens(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::TokenEstimationRequest* /*request*/, ::unhinged::llm::v1::TokenEstimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstimateTokens(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CountTokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CountTokens() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CountTokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountTokens(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::TokenCountRequest* /*request*/, ::unhinged::llm::v1::TokenCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCountTokens(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateCompletion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateCompletion() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GenerateCompletion(context, request, response); }));
    }
    ~WithRawCallbackMethod_GenerateCompletion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateCompletion(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/, ::unhinged::llm::v1::CompletionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenerateCompletion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamCompletion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamCompletion() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamCompletion(context, request); }));
    }
    ~WithRawCallbackMethod_StreamCompletion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCompletion(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamCompletion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListModels() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::ListModelsRequest* /*request*/, ::unhinged::llm::v1::ListModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModel() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModel(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::GetModelRequest* /*request*/, ::unhinged::llm::v1::GetModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EstimateTokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EstimateTokens() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EstimateTokens(context, request, response); }));
    }
    ~WithRawCallbackMethod_EstimateTokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateTokens(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::TokenEstimationRequest* /*request*/, ::unhinged::llm::v1::TokenEstimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EstimateTokens(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CountTokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CountTokens() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CountTokens(context, request, response); }));
    }
    ~WithRawCallbackMethod_CountTokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountTokens(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::TokenCountRequest* /*request*/, ::unhinged::llm::v1::TokenCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CountTokens(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HealthCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateCompletion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GenerateCompletion() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::llm::v1::CompletionRequest, ::unhinged::llm::v1::CompletionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::llm::v1::CompletionRequest, ::unhinged::llm::v1::CompletionResponse>* streamer) {
                       return this->StreamedGenerateCompletion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GenerateCompletion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateCompletion(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/, ::unhinged::llm::v1::CompletionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateCompletion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::llm::v1::CompletionRequest,::unhinged::llm::v1::CompletionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListModels() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::llm::v1::ListModelsRequest, ::unhinged::llm::v1::ListModelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::llm::v1::ListModelsRequest, ::unhinged::llm::v1::ListModelsResponse>* streamer) {
                       return this->StreamedListModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::ListModelsRequest* /*request*/, ::unhinged::llm::v1::ListModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::llm::v1::ListModelsRequest,::unhinged::llm::v1::ListModelsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModel() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::llm::v1::GetModelRequest, ::unhinged::llm::v1::GetModelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::llm::v1::GetModelRequest, ::unhinged::llm::v1::GetModelResponse>* streamer) {
                       return this->StreamedGetModel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::GetModelRequest* /*request*/, ::unhinged::llm::v1::GetModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::llm::v1::GetModelRequest,::unhinged::llm::v1::GetModelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EstimateTokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EstimateTokens() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::llm::v1::TokenEstimationRequest, ::unhinged::llm::v1::TokenEstimationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::llm::v1::TokenEstimationRequest, ::unhinged::llm::v1::TokenEstimationResponse>* streamer) {
                       return this->StreamedEstimateTokens(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EstimateTokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EstimateTokens(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::TokenEstimationRequest* /*request*/, ::unhinged::llm::v1::TokenEstimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEstimateTokens(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::llm::v1::TokenEstimationRequest,::unhinged::llm::v1::TokenEstimationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CountTokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CountTokens() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::llm::v1::TokenCountRequest, ::unhinged::llm::v1::TokenCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::llm::v1::TokenCountRequest, ::unhinged::llm::v1::TokenCountResponse>* streamer) {
                       return this->StreamedCountTokens(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CountTokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CountTokens(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::TokenCountRequest* /*request*/, ::unhinged::llm::v1::TokenCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCountTokens(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::llm::v1::TokenCountRequest,::unhinged::llm::v1::TokenCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HealthCheck() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>* streamer) {
                       return this->StreamedHealthCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::common::v1::HealthCheckRequest,::unhinged::common::v1::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GenerateCompletion<WithStreamedUnaryMethod_ListModels<WithStreamedUnaryMethod_GetModel<WithStreamedUnaryMethod_EstimateTokens<WithStreamedUnaryMethod_CountTokens<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamCompletion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamCompletion() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::unhinged::llm::v1::CompletionRequest, ::unhinged::common::v1::StreamChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::unhinged::llm::v1::CompletionRequest, ::unhinged::common::v1::StreamChunk>* streamer) {
                       return this->StreamedStreamCompletion(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamCompletion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamCompletion(::grpc::ServerContext* /*context*/, const ::unhinged::llm::v1::CompletionRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamCompletion(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::unhinged::llm::v1::CompletionRequest,::unhinged::common::v1::StreamChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamCompletion<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GenerateCompletion<WithSplitStreamingMethod_StreamCompletion<WithStreamedUnaryMethod_ListModels<WithStreamedUnaryMethod_GetModel<WithStreamedUnaryMethod_EstimateTokens<WithStreamedUnaryMethod_CountTokens<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace llm
}  // namespace unhinged


#endif  // GRPC_llm_2eproto__INCLUDED
