// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vision_service.proto
#ifndef GRPC_vision_5fservice_2eproto__INCLUDED
#define GRPC_vision_5fservice_2eproto__INCLUDED

#include "vision_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace multimodal {

// Vision AI Service - Pure model inference operations
class VisionService final {
 public:
  static constexpr char const* service_full_name() {
    return "multimodal.VisionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Perform image inference using specified model
    virtual ::grpc::Status Infer(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest& request, ::multimodal::VisionInferenceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::VisionInferenceResponse>> AsyncInfer(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::VisionInferenceResponse>>(AsyncInferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::VisionInferenceResponse>> PrepareAsyncInfer(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::VisionInferenceResponse>>(PrepareAsyncInferRaw(context, request, cq));
    }
    // Get list of available vision models
    virtual ::grpc::Status GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::multimodal::ModelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ModelsResponse>> AsyncGetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ModelsResponse>>(AsyncGetAvailableModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ModelsResponse>> PrepareAsyncGetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ModelsResponse>>(PrepareAsyncGetAvailableModelsRaw(context, request, cq));
    }
    // Health check for service availability
    virtual ::grpc::Status GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::multimodal::HealthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::HealthResponse>> AsyncGetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::HealthResponse>>(AsyncGetHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::HealthResponse>> PrepareAsyncGetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::HealthResponse>>(PrepareAsyncGetHealthRaw(context, request, cq));
    }
    // Get model performance metrics
    virtual ::grpc::Status GetModelMetrics(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest& request, ::multimodal::ModelMetricsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ModelMetricsResponse>> AsyncGetModelMetrics(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ModelMetricsResponse>>(AsyncGetModelMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ModelMetricsResponse>> PrepareAsyncGetModelMetrics(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ModelMetricsResponse>>(PrepareAsyncGetModelMetricsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Perform image inference using specified model
      virtual void Infer(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest* request, ::multimodal::VisionInferenceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Infer(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest* request, ::multimodal::VisionInferenceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get list of available vision models
      virtual void GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::ModelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Health check for service availability
      virtual void GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get model performance metrics
      virtual void GetModelMetrics(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest* request, ::multimodal::ModelMetricsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModelMetrics(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest* request, ::multimodal::ModelMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::VisionInferenceResponse>* AsyncInferRaw(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::VisionInferenceResponse>* PrepareAsyncInferRaw(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ModelsResponse>* AsyncGetAvailableModelsRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ModelsResponse>* PrepareAsyncGetAvailableModelsRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::HealthResponse>* AsyncGetHealthRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::HealthResponse>* PrepareAsyncGetHealthRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ModelMetricsResponse>* AsyncGetModelMetricsRaw(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ModelMetricsResponse>* PrepareAsyncGetModelMetricsRaw(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Infer(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest& request, ::multimodal::VisionInferenceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::VisionInferenceResponse>> AsyncInfer(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::VisionInferenceResponse>>(AsyncInferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::VisionInferenceResponse>> PrepareAsyncInfer(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::VisionInferenceResponse>>(PrepareAsyncInferRaw(context, request, cq));
    }
    ::grpc::Status GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::multimodal::ModelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::ModelsResponse>> AsyncGetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::ModelsResponse>>(AsyncGetAvailableModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::ModelsResponse>> PrepareAsyncGetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::ModelsResponse>>(PrepareAsyncGetAvailableModelsRaw(context, request, cq));
    }
    ::grpc::Status GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::multimodal::HealthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>> AsyncGetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>>(AsyncGetHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>> PrepareAsyncGetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>>(PrepareAsyncGetHealthRaw(context, request, cq));
    }
    ::grpc::Status GetModelMetrics(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest& request, ::multimodal::ModelMetricsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::ModelMetricsResponse>> AsyncGetModelMetrics(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::ModelMetricsResponse>>(AsyncGetModelMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::ModelMetricsResponse>> PrepareAsyncGetModelMetrics(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::ModelMetricsResponse>>(PrepareAsyncGetModelMetricsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Infer(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest* request, ::multimodal::VisionInferenceResponse* response, std::function<void(::grpc::Status)>) override;
      void Infer(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest* request, ::multimodal::VisionInferenceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::ModelsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModelMetrics(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest* request, ::multimodal::ModelMetricsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetModelMetrics(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest* request, ::multimodal::ModelMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::multimodal::VisionInferenceResponse>* AsyncInferRaw(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::VisionInferenceResponse>* PrepareAsyncInferRaw(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::ModelsResponse>* AsyncGetAvailableModelsRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::ModelsResponse>* PrepareAsyncGetAvailableModelsRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>* AsyncGetHealthRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>* PrepareAsyncGetHealthRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::ModelMetricsResponse>* AsyncGetModelMetricsRaw(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::ModelMetricsResponse>* PrepareAsyncGetModelMetricsRaw(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Infer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAvailableModels_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHealth_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModelMetrics_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Perform image inference using specified model
    virtual ::grpc::Status Infer(::grpc::ServerContext* context, const ::multimodal::VisionInferenceRequest* request, ::multimodal::VisionInferenceResponse* response);
    // Get list of available vision models
    virtual ::grpc::Status GetAvailableModels(::grpc::ServerContext* context, const ::multimodal::Empty* request, ::multimodal::ModelsResponse* response);
    // Health check for service availability
    virtual ::grpc::Status GetHealth(::grpc::ServerContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response);
    // Get model performance metrics
    virtual ::grpc::Status GetModelMetrics(::grpc::ServerContext* context, const ::multimodal::ModelMetricsRequest* request, ::multimodal::ModelMetricsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Infer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Infer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Infer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Infer(::grpc::ServerContext* /*context*/, const ::multimodal::VisionInferenceRequest* /*request*/, ::multimodal::VisionInferenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfer(::grpc::ServerContext* context, ::multimodal::VisionInferenceRequest* request, ::grpc::ServerAsyncResponseWriter< ::multimodal::VisionInferenceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAvailableModels() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableModels(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableModels(::grpc::ServerContext* context, ::multimodal::Empty* request, ::grpc::ServerAsyncResponseWriter< ::multimodal::ModelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetHealth() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHealth(::grpc::ServerContext* context, ::multimodal::Empty* request, ::grpc::ServerAsyncResponseWriter< ::multimodal::HealthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModelMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModelMetrics() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetModelMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelMetrics(::grpc::ServerContext* /*context*/, const ::multimodal::ModelMetricsRequest* /*request*/, ::multimodal::ModelMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelMetrics(::grpc::ServerContext* context, ::multimodal::ModelMetricsRequest* request, ::grpc::ServerAsyncResponseWriter< ::multimodal::ModelMetricsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Infer<WithAsyncMethod_GetAvailableModels<WithAsyncMethod_GetHealth<WithAsyncMethod_GetModelMetrics<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Infer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Infer() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::multimodal::VisionInferenceRequest, ::multimodal::VisionInferenceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::multimodal::VisionInferenceRequest* request, ::multimodal::VisionInferenceResponse* response) { return this->Infer(context, request, response); }));}
    void SetMessageAllocatorFor_Infer(
        ::grpc::MessageAllocator< ::multimodal::VisionInferenceRequest, ::multimodal::VisionInferenceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::multimodal::VisionInferenceRequest, ::multimodal::VisionInferenceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Infer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Infer(::grpc::ServerContext* /*context*/, const ::multimodal::VisionInferenceRequest* /*request*/, ::multimodal::VisionInferenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Infer(
      ::grpc::CallbackServerContext* /*context*/, const ::multimodal::VisionInferenceRequest* /*request*/, ::multimodal::VisionInferenceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAvailableModels() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::multimodal::Empty, ::multimodal::ModelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::multimodal::Empty* request, ::multimodal::ModelsResponse* response) { return this->GetAvailableModels(context, request, response); }));}
    void SetMessageAllocatorFor_GetAvailableModels(
        ::grpc::MessageAllocator< ::multimodal::Empty, ::multimodal::ModelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::multimodal::Empty, ::multimodal::ModelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableModels(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAvailableModels(
      ::grpc::CallbackServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::ModelsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetHealth() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::multimodal::Empty, ::multimodal::HealthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response) { return this->GetHealth(context, request, response); }));}
    void SetMessageAllocatorFor_GetHealth(
        ::grpc::MessageAllocator< ::multimodal::Empty, ::multimodal::HealthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::multimodal::Empty, ::multimodal::HealthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModelMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModelMetrics() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::multimodal::ModelMetricsRequest, ::multimodal::ModelMetricsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::multimodal::ModelMetricsRequest* request, ::multimodal::ModelMetricsResponse* response) { return this->GetModelMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_GetModelMetrics(
        ::grpc::MessageAllocator< ::multimodal::ModelMetricsRequest, ::multimodal::ModelMetricsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::multimodal::ModelMetricsRequest, ::multimodal::ModelMetricsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModelMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelMetrics(::grpc::ServerContext* /*context*/, const ::multimodal::ModelMetricsRequest* /*request*/, ::multimodal::ModelMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::multimodal::ModelMetricsRequest* /*request*/, ::multimodal::ModelMetricsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Infer<WithCallbackMethod_GetAvailableModels<WithCallbackMethod_GetHealth<WithCallbackMethod_GetModelMetrics<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Infer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Infer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Infer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Infer(::grpc::ServerContext* /*context*/, const ::multimodal::VisionInferenceRequest* /*request*/, ::multimodal::VisionInferenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAvailableModels() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableModels(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetHealth() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModelMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModelMetrics() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetModelMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelMetrics(::grpc::ServerContext* /*context*/, const ::multimodal::ModelMetricsRequest* /*request*/, ::multimodal::ModelMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Infer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Infer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Infer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Infer(::grpc::ServerContext* /*context*/, const ::multimodal::VisionInferenceRequest* /*request*/, ::multimodal::VisionInferenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAvailableModels() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableModels(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetHealth() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHealth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModelMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModelMetrics() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetModelMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelMetrics(::grpc::ServerContext* /*context*/, const ::multimodal::ModelMetricsRequest* /*request*/, ::multimodal::ModelMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Infer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Infer() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Infer(context, request, response); }));
    }
    ~WithRawCallbackMethod_Infer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Infer(::grpc::ServerContext* /*context*/, const ::multimodal::VisionInferenceRequest* /*request*/, ::multimodal::VisionInferenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Infer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAvailableModels() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAvailableModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableModels(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAvailableModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetHealth() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetHealth(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModelMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModelMetrics() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModelMetrics(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModelMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelMetrics(::grpc::ServerContext* /*context*/, const ::multimodal::ModelMetricsRequest* /*request*/, ::multimodal::ModelMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Infer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Infer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::multimodal::VisionInferenceRequest, ::multimodal::VisionInferenceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::multimodal::VisionInferenceRequest, ::multimodal::VisionInferenceResponse>* streamer) {
                       return this->StreamedInfer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Infer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Infer(::grpc::ServerContext* /*context*/, const ::multimodal::VisionInferenceRequest* /*request*/, ::multimodal::VisionInferenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInfer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::multimodal::VisionInferenceRequest,::multimodal::VisionInferenceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAvailableModels() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::multimodal::Empty, ::multimodal::ModelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::multimodal::Empty, ::multimodal::ModelsResponse>* streamer) {
                       return this->StreamedGetAvailableModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAvailableModels(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAvailableModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::multimodal::Empty,::multimodal::ModelsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetHealth() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::multimodal::Empty, ::multimodal::HealthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::multimodal::Empty, ::multimodal::HealthResponse>* streamer) {
                       return this->StreamedGetHealth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHealth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::multimodal::Empty,::multimodal::HealthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModelMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModelMetrics() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::multimodal::ModelMetricsRequest, ::multimodal::ModelMetricsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::multimodal::ModelMetricsRequest, ::multimodal::ModelMetricsResponse>* streamer) {
                       return this->StreamedGetModelMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModelMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModelMetrics(::grpc::ServerContext* /*context*/, const ::multimodal::ModelMetricsRequest* /*request*/, ::multimodal::ModelMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModelMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::multimodal::ModelMetricsRequest,::multimodal::ModelMetricsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Infer<WithStreamedUnaryMethod_GetAvailableModels<WithStreamedUnaryMethod_GetHealth<WithStreamedUnaryMethod_GetModelMetrics<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Infer<WithStreamedUnaryMethod_GetAvailableModels<WithStreamedUnaryMethod_GetHealth<WithStreamedUnaryMethod_GetModelMetrics<Service > > > > StreamedService;
};

}  // namespace multimodal


#endif  // GRPC_vision_5fservice_2eproto__INCLUDED
