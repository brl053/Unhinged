// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cdc_service.proto
#ifndef GRPC_cdc_5fservice_2eproto__INCLUDED
#define GRPC_cdc_5fservice_2eproto__INCLUDED

#include "cdc_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace unhinged {
namespace cdc {

// ============================================================================
// Service Definition
// ============================================================================
//
class CDCService final {
 public:
  static constexpr char const* service_full_name() {
    return "unhinged.cdc.CDCService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Event publishing
    virtual ::grpc::Status PublishEvent(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest& request, ::unhinged::cdc::PublishEventResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::PublishEventResponse>> AsyncPublishEvent(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::PublishEventResponse>>(AsyncPublishEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::PublishEventResponse>> PrepareAsyncPublishEvent(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::PublishEventResponse>>(PrepareAsyncPublishEventRaw(context, request, cq));
    }
    virtual ::grpc::Status PublishEvents(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest& request, ::unhinged::cdc::PublishEventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::PublishEventsResponse>> AsyncPublishEvents(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::PublishEventsResponse>>(AsyncPublishEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::PublishEventsResponse>> PrepareAsyncPublishEvents(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::PublishEventsResponse>>(PrepareAsyncPublishEventsRaw(context, request, cq));
    }
    // Event subscription (streaming)
    std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::cdc::EventStreamResponse>> Subscribe(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::cdc::EventStreamResponse>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::cdc::EventStreamResponse>> AsyncSubscribe(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::cdc::EventStreamResponse>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::cdc::EventStreamResponse>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::cdc::EventStreamResponse>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    virtual ::grpc::Status AcknowledgeEvents(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest& request, ::unhinged::cdc::AcknowledgeEventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::AcknowledgeEventsResponse>> AsyncAcknowledgeEvents(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::AcknowledgeEventsResponse>>(AsyncAcknowledgeEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::AcknowledgeEventsResponse>> PrepareAsyncAcknowledgeEvents(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::AcknowledgeEventsResponse>>(PrepareAsyncAcknowledgeEventsRaw(context, request, cq));
    }
    // Event replay
    std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::cdc::EventStreamResponse>> ReplayEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::cdc::EventStreamResponse>>(ReplayEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::cdc::EventStreamResponse>> AsyncReplayEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::cdc::EventStreamResponse>>(AsyncReplayEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::cdc::EventStreamResponse>> PrepareAsyncReplayEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::cdc::EventStreamResponse>>(PrepareAsyncReplayEventsRaw(context, request, cq));
    }
    // Dead letter queue
    virtual ::grpc::Status ListDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest& request, ::unhinged::cdc::ListDeadLetterEventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ListDeadLetterEventsResponse>> AsyncListDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ListDeadLetterEventsResponse>>(AsyncListDeadLetterEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ListDeadLetterEventsResponse>> PrepareAsyncListDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ListDeadLetterEventsResponse>>(PrepareAsyncListDeadLetterEventsRaw(context, request, cq));
    }
    virtual ::grpc::Status ReprocessDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest& request, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>> AsyncReprocessDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>>(AsyncReprocessDeadLetterEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>> PrepareAsyncReprocessDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>>(PrepareAsyncReprocessDeadLetterEventsRaw(context, request, cq));
    }
    // Analytics
    virtual ::grpc::Status GetEventStats(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest& request, ::unhinged::cdc::GetEventStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::GetEventStatsResponse>> AsyncGetEventStats(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::GetEventStatsResponse>>(AsyncGetEventStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::GetEventStatsResponse>> PrepareAsyncGetEventStats(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::GetEventStatsResponse>>(PrepareAsyncGetEventStatsRaw(context, request, cq));
    }
    // Subscription management
    virtual ::grpc::Status ListSubscriptions(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest& request, ::unhinged::cdc::ListSubscriptionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ListSubscriptionsResponse>> AsyncListSubscriptions(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ListSubscriptionsResponse>>(AsyncListSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ListSubscriptionsResponse>> PrepareAsyncListSubscriptions(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ListSubscriptionsResponse>>(PrepareAsyncListSubscriptionsRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest& request, ::unhinged::cdc::UpdateSubscriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::UpdateSubscriptionResponse>> AsyncUpdateSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::UpdateSubscriptionResponse>>(AsyncUpdateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::UpdateSubscriptionResponse>> PrepareAsyncUpdateSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::UpdateSubscriptionResponse>>(PrepareAsyncUpdateSubscriptionRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest& request, ::unhinged::cdc::DeleteSubscriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::DeleteSubscriptionResponse>> AsyncDeleteSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::DeleteSubscriptionResponse>>(AsyncDeleteSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::DeleteSubscriptionResponse>> PrepareAsyncDeleteSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::DeleteSubscriptionResponse>>(PrepareAsyncDeleteSubscriptionRaw(context, request, cq));
    }
    // Health and status
    virtual ::grpc::Status GetServiceStatus(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest& request, ::unhinged::cdc::GetServiceStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::GetServiceStatusResponse>> AsyncGetServiceStatus(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::GetServiceStatusResponse>>(AsyncGetServiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::GetServiceStatusResponse>> PrepareAsyncGetServiceStatus(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::GetServiceStatusResponse>>(PrepareAsyncGetServiceStatusRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Event publishing
      virtual void PublishEvent(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest* request, ::unhinged::cdc::PublishEventResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PublishEvent(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest* request, ::unhinged::cdc::PublishEventResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PublishEvents(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest* request, ::unhinged::cdc::PublishEventsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PublishEvents(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest* request, ::unhinged::cdc::PublishEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Event subscription (streaming)
      virtual void Subscribe(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest* request, ::grpc::ClientReadReactor< ::unhinged::cdc::EventStreamResponse>* reactor) = 0;
      virtual void AcknowledgeEvents(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest* request, ::unhinged::cdc::AcknowledgeEventsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AcknowledgeEvents(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest* request, ::unhinged::cdc::AcknowledgeEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Event replay
      virtual void ReplayEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest* request, ::grpc::ClientReadReactor< ::unhinged::cdc::EventStreamResponse>* reactor) = 0;
      // Dead letter queue
      virtual void ListDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest* request, ::unhinged::cdc::ListDeadLetterEventsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest* request, ::unhinged::cdc::ListDeadLetterEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReprocessDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* request, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReprocessDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* request, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Analytics
      virtual void GetEventStats(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest* request, ::unhinged::cdc::GetEventStatsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEventStats(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest* request, ::unhinged::cdc::GetEventStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Subscription management
      virtual void ListSubscriptions(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest* request, ::unhinged::cdc::ListSubscriptionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSubscriptions(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest* request, ::unhinged::cdc::ListSubscriptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest* request, ::unhinged::cdc::UpdateSubscriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest* request, ::unhinged::cdc::UpdateSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest* request, ::unhinged::cdc::DeleteSubscriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest* request, ::unhinged::cdc::DeleteSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Health and status
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest* request, ::unhinged::cdc::GetServiceStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest* request, ::unhinged::cdc::GetServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::PublishEventResponse>* AsyncPublishEventRaw(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::PublishEventResponse>* PrepareAsyncPublishEventRaw(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::PublishEventsResponse>* AsyncPublishEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::PublishEventsResponse>* PrepareAsyncPublishEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::unhinged::cdc::EventStreamResponse>* SubscribeRaw(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::cdc::EventStreamResponse>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::cdc::EventStreamResponse>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::AcknowledgeEventsResponse>* AsyncAcknowledgeEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::AcknowledgeEventsResponse>* PrepareAsyncAcknowledgeEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::unhinged::cdc::EventStreamResponse>* ReplayEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::cdc::EventStreamResponse>* AsyncReplayEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::cdc::EventStreamResponse>* PrepareAsyncReplayEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ListDeadLetterEventsResponse>* AsyncListDeadLetterEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ListDeadLetterEventsResponse>* PrepareAsyncListDeadLetterEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>* AsyncReprocessDeadLetterEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>* PrepareAsyncReprocessDeadLetterEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::GetEventStatsResponse>* AsyncGetEventStatsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::GetEventStatsResponse>* PrepareAsyncGetEventStatsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ListSubscriptionsResponse>* AsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::ListSubscriptionsResponse>* PrepareAsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::UpdateSubscriptionResponse>* AsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::UpdateSubscriptionResponse>* PrepareAsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::DeleteSubscriptionResponse>* AsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::DeleteSubscriptionResponse>* PrepareAsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::GetServiceStatusResponse>* AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::cdc::GetServiceStatusResponse>* PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PublishEvent(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest& request, ::unhinged::cdc::PublishEventResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventResponse>> AsyncPublishEvent(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventResponse>>(AsyncPublishEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventResponse>> PrepareAsyncPublishEvent(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventResponse>>(PrepareAsyncPublishEventRaw(context, request, cq));
    }
    ::grpc::Status PublishEvents(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest& request, ::unhinged::cdc::PublishEventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventsResponse>> AsyncPublishEvents(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventsResponse>>(AsyncPublishEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventsResponse>> PrepareAsyncPublishEvents(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventsResponse>>(PrepareAsyncPublishEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::unhinged::cdc::EventStreamResponse>> Subscribe(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::unhinged::cdc::EventStreamResponse>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>> AsyncSubscribe(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    ::grpc::Status AcknowledgeEvents(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest& request, ::unhinged::cdc::AcknowledgeEventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::AcknowledgeEventsResponse>> AsyncAcknowledgeEvents(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::AcknowledgeEventsResponse>>(AsyncAcknowledgeEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::AcknowledgeEventsResponse>> PrepareAsyncAcknowledgeEvents(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::AcknowledgeEventsResponse>>(PrepareAsyncAcknowledgeEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::unhinged::cdc::EventStreamResponse>> ReplayEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::unhinged::cdc::EventStreamResponse>>(ReplayEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>> AsyncReplayEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>>(AsyncReplayEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>> PrepareAsyncReplayEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>>(PrepareAsyncReplayEventsRaw(context, request, cq));
    }
    ::grpc::Status ListDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest& request, ::unhinged::cdc::ListDeadLetterEventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListDeadLetterEventsResponse>> AsyncListDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListDeadLetterEventsResponse>>(AsyncListDeadLetterEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListDeadLetterEventsResponse>> PrepareAsyncListDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListDeadLetterEventsResponse>>(PrepareAsyncListDeadLetterEventsRaw(context, request, cq));
    }
    ::grpc::Status ReprocessDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest& request, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>> AsyncReprocessDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>>(AsyncReprocessDeadLetterEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>> PrepareAsyncReprocessDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>>(PrepareAsyncReprocessDeadLetterEventsRaw(context, request, cq));
    }
    ::grpc::Status GetEventStats(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest& request, ::unhinged::cdc::GetEventStatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetEventStatsResponse>> AsyncGetEventStats(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetEventStatsResponse>>(AsyncGetEventStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetEventStatsResponse>> PrepareAsyncGetEventStats(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetEventStatsResponse>>(PrepareAsyncGetEventStatsRaw(context, request, cq));
    }
    ::grpc::Status ListSubscriptions(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest& request, ::unhinged::cdc::ListSubscriptionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListSubscriptionsResponse>> AsyncListSubscriptions(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListSubscriptionsResponse>>(AsyncListSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListSubscriptionsResponse>> PrepareAsyncListSubscriptions(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListSubscriptionsResponse>>(PrepareAsyncListSubscriptionsRaw(context, request, cq));
    }
    ::grpc::Status UpdateSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest& request, ::unhinged::cdc::UpdateSubscriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::UpdateSubscriptionResponse>> AsyncUpdateSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::UpdateSubscriptionResponse>>(AsyncUpdateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::UpdateSubscriptionResponse>> PrepareAsyncUpdateSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::UpdateSubscriptionResponse>>(PrepareAsyncUpdateSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status DeleteSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest& request, ::unhinged::cdc::DeleteSubscriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::DeleteSubscriptionResponse>> AsyncDeleteSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::DeleteSubscriptionResponse>>(AsyncDeleteSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::DeleteSubscriptionResponse>> PrepareAsyncDeleteSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::DeleteSubscriptionResponse>>(PrepareAsyncDeleteSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status GetServiceStatus(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest& request, ::unhinged::cdc::GetServiceStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetServiceStatusResponse>> AsyncGetServiceStatus(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetServiceStatusResponse>>(AsyncGetServiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetServiceStatusResponse>> PrepareAsyncGetServiceStatus(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetServiceStatusResponse>>(PrepareAsyncGetServiceStatusRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PublishEvent(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest* request, ::unhinged::cdc::PublishEventResponse* response, std::function<void(::grpc::Status)>) override;
      void PublishEvent(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest* request, ::unhinged::cdc::PublishEventResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PublishEvents(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest* request, ::unhinged::cdc::PublishEventsResponse* response, std::function<void(::grpc::Status)>) override;
      void PublishEvents(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest* request, ::unhinged::cdc::PublishEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Subscribe(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest* request, ::grpc::ClientReadReactor< ::unhinged::cdc::EventStreamResponse>* reactor) override;
      void AcknowledgeEvents(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest* request, ::unhinged::cdc::AcknowledgeEventsResponse* response, std::function<void(::grpc::Status)>) override;
      void AcknowledgeEvents(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest* request, ::unhinged::cdc::AcknowledgeEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplayEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest* request, ::grpc::ClientReadReactor< ::unhinged::cdc::EventStreamResponse>* reactor) override;
      void ListDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest* request, ::unhinged::cdc::ListDeadLetterEventsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest* request, ::unhinged::cdc::ListDeadLetterEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReprocessDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* request, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* response, std::function<void(::grpc::Status)>) override;
      void ReprocessDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* request, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEventStats(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest* request, ::unhinged::cdc::GetEventStatsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEventStats(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest* request, ::unhinged::cdc::GetEventStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListSubscriptions(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest* request, ::unhinged::cdc::ListSubscriptionsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSubscriptions(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest* request, ::unhinged::cdc::ListSubscriptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest* request, ::unhinged::cdc::UpdateSubscriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest* request, ::unhinged::cdc::UpdateSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest* request, ::unhinged::cdc::DeleteSubscriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest* request, ::unhinged::cdc::DeleteSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetServiceStatus(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest* request, ::unhinged::cdc::GetServiceStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServiceStatus(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest* request, ::unhinged::cdc::GetServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventResponse>* AsyncPublishEventRaw(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventResponse>* PrepareAsyncPublishEventRaw(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventsResponse>* AsyncPublishEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventsResponse>* PrepareAsyncPublishEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::unhinged::cdc::EventStreamResponse>* SubscribeRaw(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request) override;
    ::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::AcknowledgeEventsResponse>* AsyncAcknowledgeEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::AcknowledgeEventsResponse>* PrepareAsyncAcknowledgeEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::unhinged::cdc::EventStreamResponse>* ReplayEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request) override;
    ::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>* AsyncReplayEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>* PrepareAsyncReplayEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListDeadLetterEventsResponse>* AsyncListDeadLetterEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListDeadLetterEventsResponse>* PrepareAsyncListDeadLetterEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>* AsyncReprocessDeadLetterEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>* PrepareAsyncReprocessDeadLetterEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetEventStatsResponse>* AsyncGetEventStatsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetEventStatsResponse>* PrepareAsyncGetEventStatsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListSubscriptionsResponse>* AsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListSubscriptionsResponse>* PrepareAsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::UpdateSubscriptionResponse>* AsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::UpdateSubscriptionResponse>* PrepareAsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::DeleteSubscriptionResponse>* AsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::DeleteSubscriptionResponse>* PrepareAsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetServiceStatusResponse>* AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetServiceStatusResponse>* PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PublishEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_PublishEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_AcknowledgeEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDeadLetterEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_ReprocessDeadLetterEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEventStats_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSubscriptions_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Event publishing
    virtual ::grpc::Status PublishEvent(::grpc::ServerContext* context, const ::unhinged::cdc::PublishEventRequest* request, ::unhinged::cdc::PublishEventResponse* response);
    virtual ::grpc::Status PublishEvents(::grpc::ServerContext* context, const ::unhinged::cdc::PublishEventsRequest* request, ::unhinged::cdc::PublishEventsResponse* response);
    // Event subscription (streaming)
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::unhinged::cdc::SubscribeRequest* request, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* writer);
    virtual ::grpc::Status AcknowledgeEvents(::grpc::ServerContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest* request, ::unhinged::cdc::AcknowledgeEventsResponse* response);
    // Event replay
    virtual ::grpc::Status ReplayEvents(::grpc::ServerContext* context, const ::unhinged::cdc::ReplayEventsRequest* request, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* writer);
    // Dead letter queue
    virtual ::grpc::Status ListDeadLetterEvents(::grpc::ServerContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest* request, ::unhinged::cdc::ListDeadLetterEventsResponse* response);
    virtual ::grpc::Status ReprocessDeadLetterEvents(::grpc::ServerContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* request, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* response);
    // Analytics
    virtual ::grpc::Status GetEventStats(::grpc::ServerContext* context, const ::unhinged::cdc::GetEventStatsRequest* request, ::unhinged::cdc::GetEventStatsResponse* response);
    // Subscription management
    virtual ::grpc::Status ListSubscriptions(::grpc::ServerContext* context, const ::unhinged::cdc::ListSubscriptionsRequest* request, ::unhinged::cdc::ListSubscriptionsResponse* response);
    virtual ::grpc::Status UpdateSubscription(::grpc::ServerContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest* request, ::unhinged::cdc::UpdateSubscriptionResponse* response);
    virtual ::grpc::Status DeleteSubscription(::grpc::ServerContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest* request, ::unhinged::cdc::DeleteSubscriptionResponse* response);
    // Health and status
    virtual ::grpc::Status GetServiceStatus(::grpc::ServerContext* context, const ::unhinged::cdc::GetServiceStatusRequest* request, ::unhinged::cdc::GetServiceStatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PublishEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PublishEvent() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PublishEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEvent(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::PublishEventRequest* /*request*/, ::unhinged::cdc::PublishEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishEvent(::grpc::ServerContext* context, ::unhinged::cdc::PublishEventRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::cdc::PublishEventResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PublishEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PublishEvents() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PublishEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::PublishEventsRequest* /*request*/, ::unhinged::cdc::PublishEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishEvents(::grpc::ServerContext* context, ::unhinged::cdc::PublishEventsRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::cdc::PublishEventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::unhinged::cdc::SubscribeRequest* request, ::grpc::ServerAsyncWriter< ::unhinged::cdc::EventStreamResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AcknowledgeEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AcknowledgeEvents() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AcknowledgeEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcknowledgeEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::AcknowledgeEventsRequest* /*request*/, ::unhinged::cdc::AcknowledgeEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcknowledgeEvents(::grpc::ServerContext* context, ::unhinged::cdc::AcknowledgeEventsRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::cdc::AcknowledgeEventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayEvents() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReplayEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ReplayEventsRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayEvents(::grpc::ServerContext* context, ::unhinged::cdc::ReplayEventsRequest* request, ::grpc::ServerAsyncWriter< ::unhinged::cdc::EventStreamResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDeadLetterEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDeadLetterEvents() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListDeadLetterEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDeadLetterEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ListDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ListDeadLetterEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDeadLetterEvents(::grpc::ServerContext* context, ::unhinged::cdc::ListDeadLetterEventsRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::cdc::ListDeadLetterEventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReprocessDeadLetterEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReprocessDeadLetterEvents() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ReprocessDeadLetterEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReprocessDeadLetterEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReprocessDeadLetterEvents(::grpc::ServerContext* context, ::unhinged::cdc::ReprocessDeadLetterEventsRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEventStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEventStats() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetEventStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventStats(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::GetEventStatsRequest* /*request*/, ::unhinged::cdc::GetEventStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEventStats(::grpc::ServerContext* context, ::unhinged::cdc::GetEventStatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::cdc::GetEventStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ListSubscriptionsRequest* /*request*/, ::unhinged::cdc::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSubscriptions(::grpc::ServerContext* context, ::unhinged::cdc::ListSubscriptionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::cdc::ListSubscriptionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateSubscription() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_UpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubscription(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::UpdateSubscriptionRequest* /*request*/, ::unhinged::cdc::UpdateSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSubscription(::grpc::ServerContext* context, ::unhinged::cdc::UpdateSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::cdc::UpdateSubscriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::DeleteSubscriptionRequest* /*request*/, ::unhinged::cdc::DeleteSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSubscription(::grpc::ServerContext* context, ::unhinged::cdc::DeleteSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::cdc::DeleteSubscriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::GetServiceStatusRequest* /*request*/, ::unhinged::cdc::GetServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceStatus(::grpc::ServerContext* context, ::unhinged::cdc::GetServiceStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::cdc::GetServiceStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PublishEvent<WithAsyncMethod_PublishEvents<WithAsyncMethod_Subscribe<WithAsyncMethod_AcknowledgeEvents<WithAsyncMethod_ReplayEvents<WithAsyncMethod_ListDeadLetterEvents<WithAsyncMethod_ReprocessDeadLetterEvents<WithAsyncMethod_GetEventStats<WithAsyncMethod_ListSubscriptions<WithAsyncMethod_UpdateSubscription<WithAsyncMethod_DeleteSubscription<WithAsyncMethod_GetServiceStatus<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PublishEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PublishEvent() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::PublishEventRequest, ::unhinged::cdc::PublishEventResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::cdc::PublishEventRequest* request, ::unhinged::cdc::PublishEventResponse* response) { return this->PublishEvent(context, request, response); }));}
    void SetMessageAllocatorFor_PublishEvent(
        ::grpc::MessageAllocator< ::unhinged::cdc::PublishEventRequest, ::unhinged::cdc::PublishEventResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::PublishEventRequest, ::unhinged::cdc::PublishEventResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PublishEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEvent(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::PublishEventRequest* /*request*/, ::unhinged::cdc::PublishEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublishEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::cdc::PublishEventRequest* /*request*/, ::unhinged::cdc::PublishEventResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PublishEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PublishEvents() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::PublishEventsRequest, ::unhinged::cdc::PublishEventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::cdc::PublishEventsRequest* request, ::unhinged::cdc::PublishEventsResponse* response) { return this->PublishEvents(context, request, response); }));}
    void SetMessageAllocatorFor_PublishEvents(
        ::grpc::MessageAllocator< ::unhinged::cdc::PublishEventsRequest, ::unhinged::cdc::PublishEventsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::PublishEventsRequest, ::unhinged::cdc::PublishEventsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PublishEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::PublishEventsRequest* /*request*/, ::unhinged::cdc::PublishEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublishEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::cdc::PublishEventsRequest* /*request*/, ::unhinged::cdc::PublishEventsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::unhinged::cdc::SubscribeRequest, ::unhinged::cdc::EventStreamResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::cdc::SubscribeRequest* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::unhinged::cdc::EventStreamResponse>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::cdc::SubscribeRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AcknowledgeEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AcknowledgeEvents() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::AcknowledgeEventsRequest, ::unhinged::cdc::AcknowledgeEventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest* request, ::unhinged::cdc::AcknowledgeEventsResponse* response) { return this->AcknowledgeEvents(context, request, response); }));}
    void SetMessageAllocatorFor_AcknowledgeEvents(
        ::grpc::MessageAllocator< ::unhinged::cdc::AcknowledgeEventsRequest, ::unhinged::cdc::AcknowledgeEventsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::AcknowledgeEventsRequest, ::unhinged::cdc::AcknowledgeEventsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AcknowledgeEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcknowledgeEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::AcknowledgeEventsRequest* /*request*/, ::unhinged::cdc::AcknowledgeEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AcknowledgeEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::cdc::AcknowledgeEventsRequest* /*request*/, ::unhinged::cdc::AcknowledgeEventsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayEvents() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::unhinged::cdc::ReplayEventsRequest, ::unhinged::cdc::EventStreamResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::cdc::ReplayEventsRequest* request) { return this->ReplayEvents(context, request); }));
    }
    ~WithCallbackMethod_ReplayEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ReplayEventsRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::unhinged::cdc::EventStreamResponse>* ReplayEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::cdc::ReplayEventsRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListDeadLetterEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListDeadLetterEvents() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::ListDeadLetterEventsRequest, ::unhinged::cdc::ListDeadLetterEventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest* request, ::unhinged::cdc::ListDeadLetterEventsResponse* response) { return this->ListDeadLetterEvents(context, request, response); }));}
    void SetMessageAllocatorFor_ListDeadLetterEvents(
        ::grpc::MessageAllocator< ::unhinged::cdc::ListDeadLetterEventsRequest, ::unhinged::cdc::ListDeadLetterEventsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::ListDeadLetterEventsRequest, ::unhinged::cdc::ListDeadLetterEventsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListDeadLetterEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDeadLetterEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ListDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ListDeadLetterEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDeadLetterEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::cdc::ListDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ListDeadLetterEventsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReprocessDeadLetterEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReprocessDeadLetterEvents() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::ReprocessDeadLetterEventsRequest, ::unhinged::cdc::ReprocessDeadLetterEventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* request, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* response) { return this->ReprocessDeadLetterEvents(context, request, response); }));}
    void SetMessageAllocatorFor_ReprocessDeadLetterEvents(
        ::grpc::MessageAllocator< ::unhinged::cdc::ReprocessDeadLetterEventsRequest, ::unhinged::cdc::ReprocessDeadLetterEventsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::ReprocessDeadLetterEventsRequest, ::unhinged::cdc::ReprocessDeadLetterEventsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReprocessDeadLetterEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReprocessDeadLetterEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReprocessDeadLetterEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEventStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEventStats() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::GetEventStatsRequest, ::unhinged::cdc::GetEventStatsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::cdc::GetEventStatsRequest* request, ::unhinged::cdc::GetEventStatsResponse* response) { return this->GetEventStats(context, request, response); }));}
    void SetMessageAllocatorFor_GetEventStats(
        ::grpc::MessageAllocator< ::unhinged::cdc::GetEventStatsRequest, ::unhinged::cdc::GetEventStatsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::GetEventStatsRequest, ::unhinged::cdc::GetEventStatsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEventStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventStats(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::GetEventStatsRequest* /*request*/, ::unhinged::cdc::GetEventStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEventStats(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::cdc::GetEventStatsRequest* /*request*/, ::unhinged::cdc::GetEventStatsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::ListSubscriptionsRequest, ::unhinged::cdc::ListSubscriptionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::cdc::ListSubscriptionsRequest* request, ::unhinged::cdc::ListSubscriptionsResponse* response) { return this->ListSubscriptions(context, request, response); }));}
    void SetMessageAllocatorFor_ListSubscriptions(
        ::grpc::MessageAllocator< ::unhinged::cdc::ListSubscriptionsRequest, ::unhinged::cdc::ListSubscriptionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::ListSubscriptionsRequest, ::unhinged::cdc::ListSubscriptionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ListSubscriptionsRequest* /*request*/, ::unhinged::cdc::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSubscriptions(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::cdc::ListSubscriptionsRequest* /*request*/, ::unhinged::cdc::ListSubscriptionsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateSubscription() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::UpdateSubscriptionRequest, ::unhinged::cdc::UpdateSubscriptionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest* request, ::unhinged::cdc::UpdateSubscriptionResponse* response) { return this->UpdateSubscription(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateSubscription(
        ::grpc::MessageAllocator< ::unhinged::cdc::UpdateSubscriptionRequest, ::unhinged::cdc::UpdateSubscriptionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::UpdateSubscriptionRequest, ::unhinged::cdc::UpdateSubscriptionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubscription(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::UpdateSubscriptionRequest* /*request*/, ::unhinged::cdc::UpdateSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::cdc::UpdateSubscriptionRequest* /*request*/, ::unhinged::cdc::UpdateSubscriptionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::DeleteSubscriptionRequest, ::unhinged::cdc::DeleteSubscriptionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest* request, ::unhinged::cdc::DeleteSubscriptionResponse* response) { return this->DeleteSubscription(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSubscription(
        ::grpc::MessageAllocator< ::unhinged::cdc::DeleteSubscriptionRequest, ::unhinged::cdc::DeleteSubscriptionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::DeleteSubscriptionRequest, ::unhinged::cdc::DeleteSubscriptionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::DeleteSubscriptionRequest* /*request*/, ::unhinged::cdc::DeleteSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::cdc::DeleteSubscriptionRequest* /*request*/, ::unhinged::cdc::DeleteSubscriptionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::GetServiceStatusRequest, ::unhinged::cdc::GetServiceStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::cdc::GetServiceStatusRequest* request, ::unhinged::cdc::GetServiceStatusResponse* response) { return this->GetServiceStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceStatus(
        ::grpc::MessageAllocator< ::unhinged::cdc::GetServiceStatusRequest, ::unhinged::cdc::GetServiceStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::cdc::GetServiceStatusRequest, ::unhinged::cdc::GetServiceStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::GetServiceStatusRequest* /*request*/, ::unhinged::cdc::GetServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServiceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::cdc::GetServiceStatusRequest* /*request*/, ::unhinged::cdc::GetServiceStatusResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PublishEvent<WithCallbackMethod_PublishEvents<WithCallbackMethod_Subscribe<WithCallbackMethod_AcknowledgeEvents<WithCallbackMethod_ReplayEvents<WithCallbackMethod_ListDeadLetterEvents<WithCallbackMethod_ReprocessDeadLetterEvents<WithCallbackMethod_GetEventStats<WithCallbackMethod_ListSubscriptions<WithCallbackMethod_UpdateSubscription<WithCallbackMethod_DeleteSubscription<WithCallbackMethod_GetServiceStatus<Service > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PublishEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PublishEvent() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PublishEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEvent(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::PublishEventRequest* /*request*/, ::unhinged::cdc::PublishEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PublishEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PublishEvents() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PublishEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::PublishEventsRequest* /*request*/, ::unhinged::cdc::PublishEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AcknowledgeEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AcknowledgeEvents() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AcknowledgeEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcknowledgeEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::AcknowledgeEventsRequest* /*request*/, ::unhinged::cdc::AcknowledgeEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayEvents() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReplayEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ReplayEventsRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDeadLetterEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDeadLetterEvents() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListDeadLetterEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDeadLetterEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ListDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ListDeadLetterEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReprocessDeadLetterEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReprocessDeadLetterEvents() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ReprocessDeadLetterEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReprocessDeadLetterEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEventStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEventStats() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetEventStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventStats(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::GetEventStatsRequest* /*request*/, ::unhinged::cdc::GetEventStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ListSubscriptionsRequest* /*request*/, ::unhinged::cdc::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateSubscription() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_UpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubscription(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::UpdateSubscriptionRequest* /*request*/, ::unhinged::cdc::UpdateSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::DeleteSubscriptionRequest* /*request*/, ::unhinged::cdc::DeleteSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::GetServiceStatusRequest* /*request*/, ::unhinged::cdc::GetServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PublishEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PublishEvent() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PublishEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEvent(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::PublishEventRequest* /*request*/, ::unhinged::cdc::PublishEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PublishEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PublishEvents() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PublishEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::PublishEventsRequest* /*request*/, ::unhinged::cdc::PublishEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AcknowledgeEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AcknowledgeEvents() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AcknowledgeEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcknowledgeEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::AcknowledgeEventsRequest* /*request*/, ::unhinged::cdc::AcknowledgeEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcknowledgeEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayEvents() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReplayEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ReplayEventsRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDeadLetterEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDeadLetterEvents() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListDeadLetterEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDeadLetterEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ListDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ListDeadLetterEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDeadLetterEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReprocessDeadLetterEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReprocessDeadLetterEvents() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ReprocessDeadLetterEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReprocessDeadLetterEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReprocessDeadLetterEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEventStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEventStats() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetEventStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventStats(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::GetEventStatsRequest* /*request*/, ::unhinged::cdc::GetEventStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEventStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ListSubscriptionsRequest* /*request*/, ::unhinged::cdc::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSubscriptions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateSubscription() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_UpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubscription(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::UpdateSubscriptionRequest* /*request*/, ::unhinged::cdc::UpdateSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::DeleteSubscriptionRequest* /*request*/, ::unhinged::cdc::DeleteSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::GetServiceStatusRequest* /*request*/, ::unhinged::cdc::GetServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PublishEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PublishEvent() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PublishEvent(context, request, response); }));
    }
    ~WithRawCallbackMethod_PublishEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEvent(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::PublishEventRequest* /*request*/, ::unhinged::cdc::PublishEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublishEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PublishEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PublishEvents() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PublishEvents(context, request, response); }));
    }
    ~WithRawCallbackMethod_PublishEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::PublishEventsRequest* /*request*/, ::unhinged::cdc::PublishEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublishEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AcknowledgeEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AcknowledgeEvents() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AcknowledgeEvents(context, request, response); }));
    }
    ~WithRawCallbackMethod_AcknowledgeEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcknowledgeEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::AcknowledgeEventsRequest* /*request*/, ::unhinged::cdc::AcknowledgeEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AcknowledgeEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayEvents() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ReplayEvents(context, request); }));
    }
    ~WithRawCallbackMethod_ReplayEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ReplayEventsRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ReplayEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListDeadLetterEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListDeadLetterEvents() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDeadLetterEvents(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListDeadLetterEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDeadLetterEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ListDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ListDeadLetterEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDeadLetterEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReprocessDeadLetterEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReprocessDeadLetterEvents() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReprocessDeadLetterEvents(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReprocessDeadLetterEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReprocessDeadLetterEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReprocessDeadLetterEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEventStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEventStats() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEventStats(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEventStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventStats(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::GetEventStatsRequest* /*request*/, ::unhinged::cdc::GetEventStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEventStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListSubscriptions(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ListSubscriptionsRequest* /*request*/, ::unhinged::cdc::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSubscriptions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateSubscription() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateSubscription(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubscription(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::UpdateSubscriptionRequest* /*request*/, ::unhinged::cdc::UpdateSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSubscription(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::DeleteSubscriptionRequest* /*request*/, ::unhinged::cdc::DeleteSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::GetServiceStatusRequest* /*request*/, ::unhinged::cdc::GetServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServiceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PublishEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PublishEvent() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::cdc::PublishEventRequest, ::unhinged::cdc::PublishEventResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::cdc::PublishEventRequest, ::unhinged::cdc::PublishEventResponse>* streamer) {
                       return this->StreamedPublishEvent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PublishEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PublishEvent(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::PublishEventRequest* /*request*/, ::unhinged::cdc::PublishEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublishEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::cdc::PublishEventRequest,::unhinged::cdc::PublishEventResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PublishEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PublishEvents() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::cdc::PublishEventsRequest, ::unhinged::cdc::PublishEventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::cdc::PublishEventsRequest, ::unhinged::cdc::PublishEventsResponse>* streamer) {
                       return this->StreamedPublishEvents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PublishEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PublishEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::PublishEventsRequest* /*request*/, ::unhinged::cdc::PublishEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublishEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::cdc::PublishEventsRequest,::unhinged::cdc::PublishEventsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AcknowledgeEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AcknowledgeEvents() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::cdc::AcknowledgeEventsRequest, ::unhinged::cdc::AcknowledgeEventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::cdc::AcknowledgeEventsRequest, ::unhinged::cdc::AcknowledgeEventsResponse>* streamer) {
                       return this->StreamedAcknowledgeEvents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AcknowledgeEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AcknowledgeEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::AcknowledgeEventsRequest* /*request*/, ::unhinged::cdc::AcknowledgeEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAcknowledgeEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::cdc::AcknowledgeEventsRequest,::unhinged::cdc::AcknowledgeEventsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDeadLetterEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDeadLetterEvents() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::cdc::ListDeadLetterEventsRequest, ::unhinged::cdc::ListDeadLetterEventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::cdc::ListDeadLetterEventsRequest, ::unhinged::cdc::ListDeadLetterEventsResponse>* streamer) {
                       return this->StreamedListDeadLetterEvents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDeadLetterEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDeadLetterEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ListDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ListDeadLetterEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDeadLetterEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::cdc::ListDeadLetterEventsRequest,::unhinged::cdc::ListDeadLetterEventsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReprocessDeadLetterEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReprocessDeadLetterEvents() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::cdc::ReprocessDeadLetterEventsRequest, ::unhinged::cdc::ReprocessDeadLetterEventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::cdc::ReprocessDeadLetterEventsRequest, ::unhinged::cdc::ReprocessDeadLetterEventsResponse>* streamer) {
                       return this->StreamedReprocessDeadLetterEvents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReprocessDeadLetterEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReprocessDeadLetterEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* /*request*/, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReprocessDeadLetterEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::cdc::ReprocessDeadLetterEventsRequest,::unhinged::cdc::ReprocessDeadLetterEventsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEventStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEventStats() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::cdc::GetEventStatsRequest, ::unhinged::cdc::GetEventStatsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::cdc::GetEventStatsRequest, ::unhinged::cdc::GetEventStatsResponse>* streamer) {
                       return this->StreamedGetEventStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEventStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEventStats(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::GetEventStatsRequest* /*request*/, ::unhinged::cdc::GetEventStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEventStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::cdc::GetEventStatsRequest,::unhinged::cdc::GetEventStatsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::cdc::ListSubscriptionsRequest, ::unhinged::cdc::ListSubscriptionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::cdc::ListSubscriptionsRequest, ::unhinged::cdc::ListSubscriptionsResponse>* streamer) {
                       return this->StreamedListSubscriptions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ListSubscriptionsRequest* /*request*/, ::unhinged::cdc::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSubscriptions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::cdc::ListSubscriptionsRequest,::unhinged::cdc::ListSubscriptionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateSubscription() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::cdc::UpdateSubscriptionRequest, ::unhinged::cdc::UpdateSubscriptionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::cdc::UpdateSubscriptionRequest, ::unhinged::cdc::UpdateSubscriptionResponse>* streamer) {
                       return this->StreamedUpdateSubscription(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSubscription(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::UpdateSubscriptionRequest* /*request*/, ::unhinged::cdc::UpdateSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::cdc::UpdateSubscriptionRequest,::unhinged::cdc::UpdateSubscriptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::cdc::DeleteSubscriptionRequest, ::unhinged::cdc::DeleteSubscriptionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::cdc::DeleteSubscriptionRequest, ::unhinged::cdc::DeleteSubscriptionResponse>* streamer) {
                       return this->StreamedDeleteSubscription(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::DeleteSubscriptionRequest* /*request*/, ::unhinged::cdc::DeleteSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::cdc::DeleteSubscriptionRequest,::unhinged::cdc::DeleteSubscriptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::cdc::GetServiceStatusRequest, ::unhinged::cdc::GetServiceStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::cdc::GetServiceStatusRequest, ::unhinged::cdc::GetServiceStatusResponse>* streamer) {
                       return this->StreamedGetServiceStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::GetServiceStatusRequest* /*request*/, ::unhinged::cdc::GetServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::cdc::GetServiceStatusRequest,::unhinged::cdc::GetServiceStatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PublishEvent<WithStreamedUnaryMethod_PublishEvents<WithStreamedUnaryMethod_AcknowledgeEvents<WithStreamedUnaryMethod_ListDeadLetterEvents<WithStreamedUnaryMethod_ReprocessDeadLetterEvents<WithStreamedUnaryMethod_GetEventStats<WithStreamedUnaryMethod_ListSubscriptions<WithStreamedUnaryMethod_UpdateSubscription<WithStreamedUnaryMethod_DeleteSubscription<WithStreamedUnaryMethod_GetServiceStatus<Service > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::unhinged::cdc::SubscribeRequest, ::unhinged::cdc::EventStreamResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::unhinged::cdc::SubscribeRequest, ::unhinged::cdc::EventStreamResponse>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::unhinged::cdc::SubscribeRequest,::unhinged::cdc::EventStreamResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ReplayEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ReplayEvents() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::unhinged::cdc::ReplayEventsRequest, ::unhinged::cdc::EventStreamResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::unhinged::cdc::ReplayEventsRequest, ::unhinged::cdc::EventStreamResponse>* streamer) {
                       return this->StreamedReplayEvents(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ReplayEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayEvents(::grpc::ServerContext* /*context*/, const ::unhinged::cdc::ReplayEventsRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReplayEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::unhinged::cdc::ReplayEventsRequest,::unhinged::cdc::EventStreamResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<WithSplitStreamingMethod_ReplayEvents<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_PublishEvent<WithStreamedUnaryMethod_PublishEvents<WithSplitStreamingMethod_Subscribe<WithStreamedUnaryMethod_AcknowledgeEvents<WithSplitStreamingMethod_ReplayEvents<WithStreamedUnaryMethod_ListDeadLetterEvents<WithStreamedUnaryMethod_ReprocessDeadLetterEvents<WithStreamedUnaryMethod_GetEventStats<WithStreamedUnaryMethod_ListSubscriptions<WithStreamedUnaryMethod_UpdateSubscription<WithStreamedUnaryMethod_DeleteSubscription<WithStreamedUnaryMethod_GetServiceStatus<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace cdc
}  // namespace unhinged


#endif  // GRPC_cdc_5fservice_2eproto__INCLUDED
