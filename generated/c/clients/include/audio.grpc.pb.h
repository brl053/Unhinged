// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: audio.proto
// Original file comments:
// ============================================================================
// Audio Service Protocol Buffer Definition - DRY Refactored
// ============================================================================
//
// @file audio.proto
// @version 1.1.0
// @author Unhinged Team
// @date 2025-01-04
// @description gRPC service definition for audio processing (TTS/STT)
//
// This service provides:
// - Text-to-Speech (TTS) with streaming audio output
// - Speech-to-Text (STT) with streaming audio input
// - Voice management and configuration
// - Audio format conversion and processing
//
// DRY Benefits:
// - Uses common.proto for streaming, usage metrics, pagination
// - Standardized error handling and health checks
// - Universal attachment support for audio files
// ============================================================================
//
#ifndef GRPC_audio_2eproto__INCLUDED
#define GRPC_audio_2eproto__INCLUDED

#include "audio.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace unhinged {
namespace audio {
namespace v1 {

// ============================================================================
// Audio Service Definition
// ============================================================================
//
// *
// Audio processing service for TTS and STT operations
// 
// Uses common streaming patterns for consistent behavior
class AudioService final {
 public:
  static constexpr char const* service_full_name() {
    return "unhinged.audio.v1.AudioService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Text-to-Speech (streaming audio output)
    std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::common::v1::StreamChunk>> TextToSpeech(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::common::v1::StreamChunk>>(TextToSpeechRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>> AsyncTextToSpeech(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>>(AsyncTextToSpeechRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>> PrepareAsyncTextToSpeech(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>>(PrepareAsyncTextToSpeechRaw(context, request, cq));
    }
    // ← DRY!
    // Speech-to-Text (streaming audio input)
    std::unique_ptr< ::grpc::ClientWriterInterface< ::unhinged::common::v1::StreamChunk>> SpeechToText(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::unhinged::common::v1::StreamChunk>>(SpeechToTextRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::unhinged::common::v1::StreamChunk>> AsyncSpeechToText(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::unhinged::common::v1::StreamChunk>>(AsyncSpeechToTextRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::unhinged::common::v1::StreamChunk>> PrepareAsyncSpeechToText(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::unhinged::common::v1::StreamChunk>>(PrepareAsyncSpeechToTextRaw(context, response, cq));
    }
    // ← DRY!
    // Batch processing
    virtual ::grpc::Status ProcessAudioFile(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest& request, ::unhinged::audio::v1::ProcessAudioResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ProcessAudioResponse>> AsyncProcessAudioFile(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ProcessAudioResponse>>(AsyncProcessAudioFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ProcessAudioResponse>> PrepareAsyncProcessAudioFile(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ProcessAudioResponse>>(PrepareAsyncProcessAudioFileRaw(context, request, cq));
    }
    // Voice management
    virtual ::grpc::Status ListVoices(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest& request, ::unhinged::audio::v1::ListVoicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ListVoicesResponse>> AsyncListVoices(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ListVoicesResponse>>(AsyncListVoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ListVoicesResponse>> PrepareAsyncListVoices(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ListVoicesResponse>>(PrepareAsyncListVoicesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest& request, ::unhinged::audio::v1::GetVoiceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::GetVoiceResponse>> AsyncGetVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::GetVoiceResponse>>(AsyncGetVoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::GetVoiceResponse>> PrepareAsyncGetVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::GetVoiceResponse>>(PrepareAsyncGetVoiceRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCustomVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest& request, ::unhinged::audio::v1::CreateCustomVoiceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::CreateCustomVoiceResponse>> AsyncCreateCustomVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::CreateCustomVoiceResponse>>(AsyncCreateCustomVoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::CreateCustomVoiceResponse>> PrepareAsyncCreateCustomVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::CreateCustomVoiceResponse>>(PrepareAsyncCreateCustomVoiceRaw(context, request, cq));
    }
    // Audio utilities
    virtual ::grpc::Status ConvertAudioFormat(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest& request, ::unhinged::audio::v1::ConvertAudioResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ConvertAudioResponse>> AsyncConvertAudioFormat(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ConvertAudioResponse>>(AsyncConvertAudioFormatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ConvertAudioResponse>> PrepareAsyncConvertAudioFormat(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ConvertAudioResponse>>(PrepareAsyncConvertAudioFormatRaw(context, request, cq));
    }
    virtual ::grpc::Status AnalyzeAudio(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest& request, ::unhinged::audio::v1::AnalyzeAudioResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::AnalyzeAudioResponse>> AsyncAnalyzeAudio(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::AnalyzeAudioResponse>>(AsyncAnalyzeAudioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::AnalyzeAudioResponse>> PrepareAsyncAnalyzeAudio(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::AnalyzeAudioResponse>>(PrepareAsyncAnalyzeAudioRaw(context, request, cq));
    }
    // Standard health check
    virtual ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::unhinged::common::v1::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    // ← DRY!
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Text-to-Speech (streaming audio output)
      virtual void TextToSpeech(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest* request, ::grpc::ClientReadReactor< ::unhinged::common::v1::StreamChunk>* reactor) = 0;
      // ← DRY!
      // Speech-to-Text (streaming audio input)
      virtual void SpeechToText(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response, ::grpc::ClientWriteReactor< ::unhinged::common::v1::StreamChunk>* reactor) = 0;
      // ← DRY!
      // Batch processing
      virtual void ProcessAudioFile(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest* request, ::unhinged::audio::v1::ProcessAudioResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProcessAudioFile(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest* request, ::unhinged::audio::v1::ProcessAudioResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Voice management
      virtual void ListVoices(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest* request, ::unhinged::audio::v1::ListVoicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListVoices(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest* request, ::unhinged::audio::v1::ListVoicesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest* request, ::unhinged::audio::v1::GetVoiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest* request, ::unhinged::audio::v1::GetVoiceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateCustomVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest* request, ::unhinged::audio::v1::CreateCustomVoiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCustomVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest* request, ::unhinged::audio::v1::CreateCustomVoiceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Audio utilities
      virtual void ConvertAudioFormat(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest* request, ::unhinged::audio::v1::ConvertAudioResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConvertAudioFormat(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest* request, ::unhinged::audio::v1::ConvertAudioResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AnalyzeAudio(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest* request, ::unhinged::audio::v1::AnalyzeAudioResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AnalyzeAudio(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest* request, ::unhinged::audio::v1::AnalyzeAudioResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Standard health check
      virtual void HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ← DRY!
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::unhinged::common::v1::StreamChunk>* TextToSpeechRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>* AsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::common::v1::StreamChunk>* PrepareAsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::unhinged::common::v1::StreamChunk>* SpeechToTextRaw(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::unhinged::common::v1::StreamChunk>* AsyncSpeechToTextRaw(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::unhinged::common::v1::StreamChunk>* PrepareAsyncSpeechToTextRaw(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ProcessAudioResponse>* AsyncProcessAudioFileRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ProcessAudioResponse>* PrepareAsyncProcessAudioFileRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ListVoicesResponse>* AsyncListVoicesRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ListVoicesResponse>* PrepareAsyncListVoicesRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::GetVoiceResponse>* AsyncGetVoiceRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::GetVoiceResponse>* PrepareAsyncGetVoiceRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::CreateCustomVoiceResponse>* AsyncCreateCustomVoiceRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::CreateCustomVoiceResponse>* PrepareAsyncCreateCustomVoiceRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ConvertAudioResponse>* AsyncConvertAudioFormatRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::ConvertAudioResponse>* PrepareAsyncConvertAudioFormatRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::AnalyzeAudioResponse>* AsyncAnalyzeAudioRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::audio::v1::AnalyzeAudioResponse>* PrepareAsyncAnalyzeAudioRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::common::v1::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>> TextToSpeech(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>>(TextToSpeechRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>> AsyncTextToSpeech(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>>(AsyncTextToSpeechRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>> PrepareAsyncTextToSpeech(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>>(PrepareAsyncTextToSpeechRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::unhinged::common::v1::StreamChunk>> SpeechToText(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::unhinged::common::v1::StreamChunk>>(SpeechToTextRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::unhinged::common::v1::StreamChunk>> AsyncSpeechToText(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::unhinged::common::v1::StreamChunk>>(AsyncSpeechToTextRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::unhinged::common::v1::StreamChunk>> PrepareAsyncSpeechToText(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::unhinged::common::v1::StreamChunk>>(PrepareAsyncSpeechToTextRaw(context, response, cq));
    }
    ::grpc::Status ProcessAudioFile(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest& request, ::unhinged::audio::v1::ProcessAudioResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ProcessAudioResponse>> AsyncProcessAudioFile(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ProcessAudioResponse>>(AsyncProcessAudioFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ProcessAudioResponse>> PrepareAsyncProcessAudioFile(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ProcessAudioResponse>>(PrepareAsyncProcessAudioFileRaw(context, request, cq));
    }
    ::grpc::Status ListVoices(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest& request, ::unhinged::audio::v1::ListVoicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ListVoicesResponse>> AsyncListVoices(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ListVoicesResponse>>(AsyncListVoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ListVoicesResponse>> PrepareAsyncListVoices(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ListVoicesResponse>>(PrepareAsyncListVoicesRaw(context, request, cq));
    }
    ::grpc::Status GetVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest& request, ::unhinged::audio::v1::GetVoiceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::GetVoiceResponse>> AsyncGetVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::GetVoiceResponse>>(AsyncGetVoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::GetVoiceResponse>> PrepareAsyncGetVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::GetVoiceResponse>>(PrepareAsyncGetVoiceRaw(context, request, cq));
    }
    ::grpc::Status CreateCustomVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest& request, ::unhinged::audio::v1::CreateCustomVoiceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::CreateCustomVoiceResponse>> AsyncCreateCustomVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::CreateCustomVoiceResponse>>(AsyncCreateCustomVoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::CreateCustomVoiceResponse>> PrepareAsyncCreateCustomVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::CreateCustomVoiceResponse>>(PrepareAsyncCreateCustomVoiceRaw(context, request, cq));
    }
    ::grpc::Status ConvertAudioFormat(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest& request, ::unhinged::audio::v1::ConvertAudioResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ConvertAudioResponse>> AsyncConvertAudioFormat(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ConvertAudioResponse>>(AsyncConvertAudioFormatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ConvertAudioResponse>> PrepareAsyncConvertAudioFormat(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ConvertAudioResponse>>(PrepareAsyncConvertAudioFormatRaw(context, request, cq));
    }
    ::grpc::Status AnalyzeAudio(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest& request, ::unhinged::audio::v1::AnalyzeAudioResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::AnalyzeAudioResponse>> AsyncAnalyzeAudio(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::AnalyzeAudioResponse>>(AsyncAnalyzeAudioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::AnalyzeAudioResponse>> PrepareAsyncAnalyzeAudio(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::AnalyzeAudioResponse>>(PrepareAsyncAnalyzeAudioRaw(context, request, cq));
    }
    ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::unhinged::common::v1::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void TextToSpeech(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest* request, ::grpc::ClientReadReactor< ::unhinged::common::v1::StreamChunk>* reactor) override;
      void SpeechToText(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response, ::grpc::ClientWriteReactor< ::unhinged::common::v1::StreamChunk>* reactor) override;
      void ProcessAudioFile(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest* request, ::unhinged::audio::v1::ProcessAudioResponse* response, std::function<void(::grpc::Status)>) override;
      void ProcessAudioFile(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest* request, ::unhinged::audio::v1::ProcessAudioResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListVoices(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest* request, ::unhinged::audio::v1::ListVoicesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListVoices(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest* request, ::unhinged::audio::v1::ListVoicesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest* request, ::unhinged::audio::v1::GetVoiceResponse* response, std::function<void(::grpc::Status)>) override;
      void GetVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest* request, ::unhinged::audio::v1::GetVoiceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCustomVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest* request, ::unhinged::audio::v1::CreateCustomVoiceResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateCustomVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest* request, ::unhinged::audio::v1::CreateCustomVoiceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConvertAudioFormat(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest* request, ::unhinged::audio::v1::ConvertAudioResponse* response, std::function<void(::grpc::Status)>) override;
      void ConvertAudioFormat(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest* request, ::unhinged::audio::v1::ConvertAudioResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AnalyzeAudio(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest* request, ::unhinged::audio::v1::AnalyzeAudioResponse* response, std::function<void(::grpc::Status)>) override;
      void AnalyzeAudio(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest* request, ::unhinged::audio::v1::AnalyzeAudioResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>* TextToSpeechRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request) override;
    ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* AsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* PrepareAsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::unhinged::common::v1::StreamChunk>* SpeechToTextRaw(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response) override;
    ::grpc::ClientAsyncWriter< ::unhinged::common::v1::StreamChunk>* AsyncSpeechToTextRaw(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::unhinged::common::v1::StreamChunk>* PrepareAsyncSpeechToTextRaw(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ProcessAudioResponse>* AsyncProcessAudioFileRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ProcessAudioResponse>* PrepareAsyncProcessAudioFileRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ListVoicesResponse>* AsyncListVoicesRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ListVoicesResponse>* PrepareAsyncListVoicesRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::GetVoiceResponse>* AsyncGetVoiceRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::GetVoiceResponse>* PrepareAsyncGetVoiceRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::CreateCustomVoiceResponse>* AsyncCreateCustomVoiceRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::CreateCustomVoiceResponse>* PrepareAsyncCreateCustomVoiceRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ConvertAudioResponse>* AsyncConvertAudioFormatRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ConvertAudioResponse>* PrepareAsyncConvertAudioFormatRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::AnalyzeAudioResponse>* AsyncAnalyzeAudioRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::AnalyzeAudioResponse>* PrepareAsyncAnalyzeAudioRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_TextToSpeech_;
    const ::grpc::internal::RpcMethod rpcmethod_SpeechToText_;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessAudioFile_;
    const ::grpc::internal::RpcMethod rpcmethod_ListVoices_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVoice_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCustomVoice_;
    const ::grpc::internal::RpcMethod rpcmethod_ConvertAudioFormat_;
    const ::grpc::internal::RpcMethod rpcmethod_AnalyzeAudio_;
    const ::grpc::internal::RpcMethod rpcmethod_HealthCheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Text-to-Speech (streaming audio output)
    virtual ::grpc::Status TextToSpeech(::grpc::ServerContext* context, const ::unhinged::audio::v1::TTSRequest* request, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* writer);
    // ← DRY!
    // Speech-to-Text (streaming audio input)
    virtual ::grpc::Status SpeechToText(::grpc::ServerContext* context, ::grpc::ServerReader< ::unhinged::common::v1::StreamChunk>* reader, ::unhinged::audio::v1::STTResponse* response);
    // ← DRY!
    // Batch processing
    virtual ::grpc::Status ProcessAudioFile(::grpc::ServerContext* context, const ::unhinged::audio::v1::ProcessAudioRequest* request, ::unhinged::audio::v1::ProcessAudioResponse* response);
    // Voice management
    virtual ::grpc::Status ListVoices(::grpc::ServerContext* context, const ::unhinged::audio::v1::ListVoicesRequest* request, ::unhinged::audio::v1::ListVoicesResponse* response);
    virtual ::grpc::Status GetVoice(::grpc::ServerContext* context, const ::unhinged::audio::v1::GetVoiceRequest* request, ::unhinged::audio::v1::GetVoiceResponse* response);
    virtual ::grpc::Status CreateCustomVoice(::grpc::ServerContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest* request, ::unhinged::audio::v1::CreateCustomVoiceResponse* response);
    // Audio utilities
    virtual ::grpc::Status ConvertAudioFormat(::grpc::ServerContext* context, const ::unhinged::audio::v1::ConvertAudioRequest* request, ::unhinged::audio::v1::ConvertAudioResponse* response);
    virtual ::grpc::Status AnalyzeAudio(::grpc::ServerContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest* request, ::unhinged::audio::v1::AnalyzeAudioResponse* response);
    // Standard health check
    virtual ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response);
    // ← DRY!
  };
  template <class BaseClass>
  class WithAsyncMethod_TextToSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TextToSpeech() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_TextToSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextToSpeech(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::TTSRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTextToSpeech(::grpc::ServerContext* context, ::unhinged::audio::v1::TTSRequest* request, ::grpc::ServerAsyncWriter< ::unhinged::common::v1::StreamChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpeechToText() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::unhinged::common::v1::StreamChunk>* /*reader*/, ::unhinged::audio::v1::STTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpeechToText(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::unhinged::audio::v1::STTResponse, ::unhinged::common::v1::StreamChunk>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessAudioFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessAudioFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ProcessAudioFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAudioFile(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ProcessAudioRequest* /*request*/, ::unhinged::audio::v1::ProcessAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessAudioFile(::grpc::ServerContext* context, ::unhinged::audio::v1::ProcessAudioRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::audio::v1::ProcessAudioResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListVoices() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ListVoicesRequest* /*request*/, ::unhinged::audio::v1::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVoices(::grpc::ServerContext* context, ::unhinged::audio::v1::ListVoicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::audio::v1::ListVoicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVoice() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetVoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVoice(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::GetVoiceRequest* /*request*/, ::unhinged::audio::v1::GetVoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVoice(::grpc::ServerContext* context, ::unhinged::audio::v1::GetVoiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::audio::v1::GetVoiceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCustomVoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCustomVoice() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateCustomVoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCustomVoice(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::CreateCustomVoiceRequest* /*request*/, ::unhinged::audio::v1::CreateCustomVoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCustomVoice(::grpc::ServerContext* context, ::unhinged::audio::v1::CreateCustomVoiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::audio::v1::CreateCustomVoiceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConvertAudioFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConvertAudioFormat() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ConvertAudioFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertAudioFormat(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ConvertAudioRequest* /*request*/, ::unhinged::audio::v1::ConvertAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConvertAudioFormat(::grpc::ServerContext* context, ::unhinged::audio::v1::ConvertAudioRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::audio::v1::ConvertAudioResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AnalyzeAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AnalyzeAudio() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_AnalyzeAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnalyzeAudio(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::AnalyzeAudioRequest* /*request*/, ::unhinged::audio::v1::AnalyzeAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnalyzeAudio(::grpc::ServerContext* context, ::unhinged::audio::v1::AnalyzeAudioRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::audio::v1::AnalyzeAudioResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HealthCheck() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::unhinged::common::v1::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::common::v1::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_TextToSpeech<WithAsyncMethod_SpeechToText<WithAsyncMethod_ProcessAudioFile<WithAsyncMethod_ListVoices<WithAsyncMethod_GetVoice<WithAsyncMethod_CreateCustomVoice<WithAsyncMethod_ConvertAudioFormat<WithAsyncMethod_AnalyzeAudio<WithAsyncMethod_HealthCheck<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_TextToSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TextToSpeech() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::unhinged::audio::v1::TTSRequest, ::unhinged::common::v1::StreamChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::audio::v1::TTSRequest* request) { return this->TextToSpeech(context, request); }));
    }
    ~WithCallbackMethod_TextToSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextToSpeech(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::TTSRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::unhinged::common::v1::StreamChunk>* TextToSpeech(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::audio::v1::TTSRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SpeechToText() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::unhinged::common::v1::StreamChunk, ::unhinged::audio::v1::STTResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::unhinged::audio::v1::STTResponse* response) { return this->SpeechToText(context, response); }));
    }
    ~WithCallbackMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::unhinged::common::v1::StreamChunk>* /*reader*/, ::unhinged::audio::v1::STTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::unhinged::common::v1::StreamChunk>* SpeechToText(
      ::grpc::CallbackServerContext* /*context*/, ::unhinged::audio::v1::STTResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProcessAudioFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProcessAudioFile() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::audio::v1::ProcessAudioRequest, ::unhinged::audio::v1::ProcessAudioResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::audio::v1::ProcessAudioRequest* request, ::unhinged::audio::v1::ProcessAudioResponse* response) { return this->ProcessAudioFile(context, request, response); }));}
    void SetMessageAllocatorFor_ProcessAudioFile(
        ::grpc::MessageAllocator< ::unhinged::audio::v1::ProcessAudioRequest, ::unhinged::audio::v1::ProcessAudioResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::audio::v1::ProcessAudioRequest, ::unhinged::audio::v1::ProcessAudioResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProcessAudioFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAudioFile(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ProcessAudioRequest* /*request*/, ::unhinged::audio::v1::ProcessAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessAudioFile(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::audio::v1::ProcessAudioRequest* /*request*/, ::unhinged::audio::v1::ProcessAudioResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListVoices() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::audio::v1::ListVoicesRequest, ::unhinged::audio::v1::ListVoicesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::audio::v1::ListVoicesRequest* request, ::unhinged::audio::v1::ListVoicesResponse* response) { return this->ListVoices(context, request, response); }));}
    void SetMessageAllocatorFor_ListVoices(
        ::grpc::MessageAllocator< ::unhinged::audio::v1::ListVoicesRequest, ::unhinged::audio::v1::ListVoicesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::audio::v1::ListVoicesRequest, ::unhinged::audio::v1::ListVoicesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ListVoicesRequest* /*request*/, ::unhinged::audio::v1::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListVoices(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::audio::v1::ListVoicesRequest* /*request*/, ::unhinged::audio::v1::ListVoicesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetVoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetVoice() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::audio::v1::GetVoiceRequest, ::unhinged::audio::v1::GetVoiceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::audio::v1::GetVoiceRequest* request, ::unhinged::audio::v1::GetVoiceResponse* response) { return this->GetVoice(context, request, response); }));}
    void SetMessageAllocatorFor_GetVoice(
        ::grpc::MessageAllocator< ::unhinged::audio::v1::GetVoiceRequest, ::unhinged::audio::v1::GetVoiceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::audio::v1::GetVoiceRequest, ::unhinged::audio::v1::GetVoiceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetVoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVoice(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::GetVoiceRequest* /*request*/, ::unhinged::audio::v1::GetVoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVoice(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::audio::v1::GetVoiceRequest* /*request*/, ::unhinged::audio::v1::GetVoiceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCustomVoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCustomVoice() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::audio::v1::CreateCustomVoiceRequest, ::unhinged::audio::v1::CreateCustomVoiceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest* request, ::unhinged::audio::v1::CreateCustomVoiceResponse* response) { return this->CreateCustomVoice(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCustomVoice(
        ::grpc::MessageAllocator< ::unhinged::audio::v1::CreateCustomVoiceRequest, ::unhinged::audio::v1::CreateCustomVoiceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::audio::v1::CreateCustomVoiceRequest, ::unhinged::audio::v1::CreateCustomVoiceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCustomVoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCustomVoice(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::CreateCustomVoiceRequest* /*request*/, ::unhinged::audio::v1::CreateCustomVoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCustomVoice(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::audio::v1::CreateCustomVoiceRequest* /*request*/, ::unhinged::audio::v1::CreateCustomVoiceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConvertAudioFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConvertAudioFormat() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::audio::v1::ConvertAudioRequest, ::unhinged::audio::v1::ConvertAudioResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::audio::v1::ConvertAudioRequest* request, ::unhinged::audio::v1::ConvertAudioResponse* response) { return this->ConvertAudioFormat(context, request, response); }));}
    void SetMessageAllocatorFor_ConvertAudioFormat(
        ::grpc::MessageAllocator< ::unhinged::audio::v1::ConvertAudioRequest, ::unhinged::audio::v1::ConvertAudioResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::audio::v1::ConvertAudioRequest, ::unhinged::audio::v1::ConvertAudioResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConvertAudioFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertAudioFormat(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ConvertAudioRequest* /*request*/, ::unhinged::audio::v1::ConvertAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConvertAudioFormat(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::audio::v1::ConvertAudioRequest* /*request*/, ::unhinged::audio::v1::ConvertAudioResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AnalyzeAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AnalyzeAudio() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::audio::v1::AnalyzeAudioRequest, ::unhinged::audio::v1::AnalyzeAudioResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest* request, ::unhinged::audio::v1::AnalyzeAudioResponse* response) { return this->AnalyzeAudio(context, request, response); }));}
    void SetMessageAllocatorFor_AnalyzeAudio(
        ::grpc::MessageAllocator< ::unhinged::audio::v1::AnalyzeAudioRequest, ::unhinged::audio::v1::AnalyzeAudioResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::audio::v1::AnalyzeAudioRequest, ::unhinged::audio::v1::AnalyzeAudioResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AnalyzeAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnalyzeAudio(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::AnalyzeAudioRequest* /*request*/, ::unhinged::audio::v1::AnalyzeAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AnalyzeAudio(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::audio::v1::AnalyzeAudioRequest* /*request*/, ::unhinged::audio::v1::AnalyzeAudioResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response) { return this->HealthCheck(context, request, response); }));}
    void SetMessageAllocatorFor_HealthCheck(
        ::grpc::MessageAllocator< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_TextToSpeech<WithCallbackMethod_SpeechToText<WithCallbackMethod_ProcessAudioFile<WithCallbackMethod_ListVoices<WithCallbackMethod_GetVoice<WithCallbackMethod_CreateCustomVoice<WithCallbackMethod_ConvertAudioFormat<WithCallbackMethod_AnalyzeAudio<WithCallbackMethod_HealthCheck<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_TextToSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TextToSpeech() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_TextToSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextToSpeech(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::TTSRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpeechToText() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::unhinged::common::v1::StreamChunk>* /*reader*/, ::unhinged::audio::v1::STTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProcessAudioFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessAudioFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ProcessAudioFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAudioFile(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ProcessAudioRequest* /*request*/, ::unhinged::audio::v1::ProcessAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListVoices() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ListVoicesRequest* /*request*/, ::unhinged::audio::v1::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVoice() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetVoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVoice(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::GetVoiceRequest* /*request*/, ::unhinged::audio::v1::GetVoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCustomVoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCustomVoice() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateCustomVoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCustomVoice(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::CreateCustomVoiceRequest* /*request*/, ::unhinged::audio::v1::CreateCustomVoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConvertAudioFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConvertAudioFormat() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ConvertAudioFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertAudioFormat(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ConvertAudioRequest* /*request*/, ::unhinged::audio::v1::ConvertAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AnalyzeAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AnalyzeAudio() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_AnalyzeAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnalyzeAudio(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::AnalyzeAudioRequest* /*request*/, ::unhinged::audio::v1::AnalyzeAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HealthCheck() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_TextToSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TextToSpeech() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_TextToSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextToSpeech(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::TTSRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTextToSpeech(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpeechToText() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::unhinged::common::v1::StreamChunk>* /*reader*/, ::unhinged::audio::v1::STTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpeechToText(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessAudioFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessAudioFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ProcessAudioFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAudioFile(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ProcessAudioRequest* /*request*/, ::unhinged::audio::v1::ProcessAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessAudioFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListVoices() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ListVoicesRequest* /*request*/, ::unhinged::audio::v1::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVoices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVoice() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetVoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVoice(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::GetVoiceRequest* /*request*/, ::unhinged::audio::v1::GetVoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVoice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCustomVoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCustomVoice() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CreateCustomVoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCustomVoice(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::CreateCustomVoiceRequest* /*request*/, ::unhinged::audio::v1::CreateCustomVoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCustomVoice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConvertAudioFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConvertAudioFormat() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ConvertAudioFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertAudioFormat(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ConvertAudioRequest* /*request*/, ::unhinged::audio::v1::ConvertAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConvertAudioFormat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AnalyzeAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AnalyzeAudio() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_AnalyzeAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnalyzeAudio(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::AnalyzeAudioRequest* /*request*/, ::unhinged::audio::v1::AnalyzeAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnalyzeAudio(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TextToSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TextToSpeech() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->TextToSpeech(context, request); }));
    }
    ~WithRawCallbackMethod_TextToSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextToSpeech(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::TTSRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* TextToSpeech(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SpeechToText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SpeechToText() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SpeechToText(context, response); }));
    }
    ~WithRawCallbackMethod_SpeechToText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpeechToText(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::unhinged::common::v1::StreamChunk>* /*reader*/, ::unhinged::audio::v1::STTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SpeechToText(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProcessAudioFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProcessAudioFile() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProcessAudioFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProcessAudioFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAudioFile(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ProcessAudioRequest* /*request*/, ::unhinged::audio::v1::ProcessAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessAudioFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListVoices() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListVoices(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ListVoicesRequest* /*request*/, ::unhinged::audio::v1::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListVoices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetVoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetVoice() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVoice(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetVoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVoice(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::GetVoiceRequest* /*request*/, ::unhinged::audio::v1::GetVoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVoice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCustomVoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCustomVoice() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCustomVoice(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCustomVoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCustomVoice(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::CreateCustomVoiceRequest* /*request*/, ::unhinged::audio::v1::CreateCustomVoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCustomVoice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConvertAudioFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConvertAudioFormat() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConvertAudioFormat(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConvertAudioFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertAudioFormat(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ConvertAudioRequest* /*request*/, ::unhinged::audio::v1::ConvertAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConvertAudioFormat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AnalyzeAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AnalyzeAudio() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AnalyzeAudio(context, request, response); }));
    }
    ~WithRawCallbackMethod_AnalyzeAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnalyzeAudio(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::AnalyzeAudioRequest* /*request*/, ::unhinged::audio::v1::AnalyzeAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AnalyzeAudio(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HealthCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProcessAudioFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProcessAudioFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::audio::v1::ProcessAudioRequest, ::unhinged::audio::v1::ProcessAudioResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::audio::v1::ProcessAudioRequest, ::unhinged::audio::v1::ProcessAudioResponse>* streamer) {
                       return this->StreamedProcessAudioFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProcessAudioFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessAudioFile(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ProcessAudioRequest* /*request*/, ::unhinged::audio::v1::ProcessAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcessAudioFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::audio::v1::ProcessAudioRequest,::unhinged::audio::v1::ProcessAudioResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListVoices() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::audio::v1::ListVoicesRequest, ::unhinged::audio::v1::ListVoicesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::audio::v1::ListVoicesRequest, ::unhinged::audio::v1::ListVoicesResponse>* streamer) {
                       return this->StreamedListVoices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ListVoicesRequest* /*request*/, ::unhinged::audio::v1::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListVoices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::audio::v1::ListVoicesRequest,::unhinged::audio::v1::ListVoicesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVoice() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::audio::v1::GetVoiceRequest, ::unhinged::audio::v1::GetVoiceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::audio::v1::GetVoiceRequest, ::unhinged::audio::v1::GetVoiceResponse>* streamer) {
                       return this->StreamedGetVoice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVoice(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::GetVoiceRequest* /*request*/, ::unhinged::audio::v1::GetVoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVoice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::audio::v1::GetVoiceRequest,::unhinged::audio::v1::GetVoiceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCustomVoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCustomVoice() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::audio::v1::CreateCustomVoiceRequest, ::unhinged::audio::v1::CreateCustomVoiceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::audio::v1::CreateCustomVoiceRequest, ::unhinged::audio::v1::CreateCustomVoiceResponse>* streamer) {
                       return this->StreamedCreateCustomVoice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCustomVoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCustomVoice(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::CreateCustomVoiceRequest* /*request*/, ::unhinged::audio::v1::CreateCustomVoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCustomVoice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::audio::v1::CreateCustomVoiceRequest,::unhinged::audio::v1::CreateCustomVoiceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConvertAudioFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConvertAudioFormat() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::audio::v1::ConvertAudioRequest, ::unhinged::audio::v1::ConvertAudioResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::audio::v1::ConvertAudioRequest, ::unhinged::audio::v1::ConvertAudioResponse>* streamer) {
                       return this->StreamedConvertAudioFormat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConvertAudioFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConvertAudioFormat(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::ConvertAudioRequest* /*request*/, ::unhinged::audio::v1::ConvertAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConvertAudioFormat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::audio::v1::ConvertAudioRequest,::unhinged::audio::v1::ConvertAudioResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AnalyzeAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AnalyzeAudio() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::audio::v1::AnalyzeAudioRequest, ::unhinged::audio::v1::AnalyzeAudioResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::audio::v1::AnalyzeAudioRequest, ::unhinged::audio::v1::AnalyzeAudioResponse>* streamer) {
                       return this->StreamedAnalyzeAudio(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AnalyzeAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AnalyzeAudio(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::AnalyzeAudioRequest* /*request*/, ::unhinged::audio::v1::AnalyzeAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAnalyzeAudio(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::audio::v1::AnalyzeAudioRequest,::unhinged::audio::v1::AnalyzeAudioResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HealthCheck() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse>* streamer) {
                       return this->StreamedHealthCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::common::v1::HealthCheckRequest* /*request*/, ::unhinged::common::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::common::v1::HealthCheckRequest,::unhinged::common::v1::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ProcessAudioFile<WithStreamedUnaryMethod_ListVoices<WithStreamedUnaryMethod_GetVoice<WithStreamedUnaryMethod_CreateCustomVoice<WithStreamedUnaryMethod_ConvertAudioFormat<WithStreamedUnaryMethod_AnalyzeAudio<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_TextToSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_TextToSpeech() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::unhinged::audio::v1::TTSRequest, ::unhinged::common::v1::StreamChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::unhinged::audio::v1::TTSRequest, ::unhinged::common::v1::StreamChunk>* streamer) {
                       return this->StreamedTextToSpeech(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_TextToSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TextToSpeech(::grpc::ServerContext* /*context*/, const ::unhinged::audio::v1::TTSRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedTextToSpeech(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::unhinged::audio::v1::TTSRequest,::unhinged::common::v1::StreamChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_TextToSpeech<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_TextToSpeech<WithStreamedUnaryMethod_ProcessAudioFile<WithStreamedUnaryMethod_ListVoices<WithStreamedUnaryMethod_GetVoice<WithStreamedUnaryMethod_CreateCustomVoice<WithStreamedUnaryMethod_ConvertAudioFormat<WithStreamedUnaryMethod_AnalyzeAudio<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace audio
}  // namespace unhinged


#endif  // GRPC_audio_2eproto__INCLUDED
