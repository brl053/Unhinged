// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: context_service.proto
#ifndef GRPC_context_5fservice_2eproto__INCLUDED
#define GRPC_context_5fservice_2eproto__INCLUDED

#include "context_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace multimodal {

// Context-Aware LLM Service - Pure LLM operations for prompt enhancement
class ContextService final {
 public:
  static constexpr char const* service_full_name() {
    return "multimodal.ContextService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Generate enhanced prompt with project context
    virtual ::grpc::Status GeneratePrompt(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest& request, ::multimodal::PromptGenerationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::PromptGenerationResponse>> AsyncGeneratePrompt(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::PromptGenerationResponse>>(AsyncGeneratePromptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::PromptGenerationResponse>> PrepareAsyncGeneratePrompt(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::PromptGenerationResponse>>(PrepareAsyncGeneratePromptRaw(context, request, cq));
    }
    // Search project context and documentation
    virtual ::grpc::Status SearchContext(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest& request, ::multimodal::ContextSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ContextSearchResponse>> AsyncSearchContext(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ContextSearchResponse>>(AsyncSearchContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ContextSearchResponse>> PrepareAsyncSearchContext(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ContextSearchResponse>>(PrepareAsyncSearchContextRaw(context, request, cq));
    }
    // Generate text using LLM
    virtual ::grpc::Status GenerateText(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest& request, ::multimodal::TextGenerationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::TextGenerationResponse>> AsyncGenerateText(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::TextGenerationResponse>>(AsyncGenerateTextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::TextGenerationResponse>> PrepareAsyncGenerateText(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::TextGenerationResponse>>(PrepareAsyncGenerateTextRaw(context, request, cq));
    }
    // Get available LLM models
    virtual ::grpc::Status GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::multimodal::LLMModelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::LLMModelsResponse>> AsyncGetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::LLMModelsResponse>>(AsyncGetAvailableModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::LLMModelsResponse>> PrepareAsyncGetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::LLMModelsResponse>>(PrepareAsyncGetAvailableModelsRaw(context, request, cq));
    }
    // Health check for service availability
    virtual ::grpc::Status GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::multimodal::HealthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::HealthResponse>> AsyncGetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::HealthResponse>>(AsyncGetHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::HealthResponse>> PrepareAsyncGetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::HealthResponse>>(PrepareAsyncGetHealthRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Generate enhanced prompt with project context
      virtual void GeneratePrompt(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest* request, ::multimodal::PromptGenerationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GeneratePrompt(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest* request, ::multimodal::PromptGenerationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Search project context and documentation
      virtual void SearchContext(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest* request, ::multimodal::ContextSearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchContext(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest* request, ::multimodal::ContextSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Generate text using LLM
      virtual void GenerateText(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest* request, ::multimodal::TextGenerationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateText(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest* request, ::multimodal::TextGenerationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get available LLM models
      virtual void GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::LLMModelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::LLMModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Health check for service availability
      virtual void GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::PromptGenerationResponse>* AsyncGeneratePromptRaw(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::PromptGenerationResponse>* PrepareAsyncGeneratePromptRaw(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ContextSearchResponse>* AsyncSearchContextRaw(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::ContextSearchResponse>* PrepareAsyncSearchContextRaw(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::TextGenerationResponse>* AsyncGenerateTextRaw(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::TextGenerationResponse>* PrepareAsyncGenerateTextRaw(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::LLMModelsResponse>* AsyncGetAvailableModelsRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::LLMModelsResponse>* PrepareAsyncGetAvailableModelsRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::HealthResponse>* AsyncGetHealthRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multimodal::HealthResponse>* PrepareAsyncGetHealthRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GeneratePrompt(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest& request, ::multimodal::PromptGenerationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::PromptGenerationResponse>> AsyncGeneratePrompt(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::PromptGenerationResponse>>(AsyncGeneratePromptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::PromptGenerationResponse>> PrepareAsyncGeneratePrompt(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::PromptGenerationResponse>>(PrepareAsyncGeneratePromptRaw(context, request, cq));
    }
    ::grpc::Status SearchContext(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest& request, ::multimodal::ContextSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::ContextSearchResponse>> AsyncSearchContext(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::ContextSearchResponse>>(AsyncSearchContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::ContextSearchResponse>> PrepareAsyncSearchContext(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::ContextSearchResponse>>(PrepareAsyncSearchContextRaw(context, request, cq));
    }
    ::grpc::Status GenerateText(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest& request, ::multimodal::TextGenerationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::TextGenerationResponse>> AsyncGenerateText(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::TextGenerationResponse>>(AsyncGenerateTextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::TextGenerationResponse>> PrepareAsyncGenerateText(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::TextGenerationResponse>>(PrepareAsyncGenerateTextRaw(context, request, cq));
    }
    ::grpc::Status GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::multimodal::LLMModelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::LLMModelsResponse>> AsyncGetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::LLMModelsResponse>>(AsyncGetAvailableModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::LLMModelsResponse>> PrepareAsyncGetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::LLMModelsResponse>>(PrepareAsyncGetAvailableModelsRaw(context, request, cq));
    }
    ::grpc::Status GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::multimodal::HealthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>> AsyncGetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>>(AsyncGetHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>> PrepareAsyncGetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>>(PrepareAsyncGetHealthRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GeneratePrompt(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest* request, ::multimodal::PromptGenerationResponse* response, std::function<void(::grpc::Status)>) override;
      void GeneratePrompt(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest* request, ::multimodal::PromptGenerationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SearchContext(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest* request, ::multimodal::ContextSearchResponse* response, std::function<void(::grpc::Status)>) override;
      void SearchContext(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest* request, ::multimodal::ContextSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GenerateText(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest* request, ::multimodal::TextGenerationResponse* response, std::function<void(::grpc::Status)>) override;
      void GenerateText(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest* request, ::multimodal::TextGenerationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::LLMModelsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::LLMModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::multimodal::PromptGenerationResponse>* AsyncGeneratePromptRaw(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::PromptGenerationResponse>* PrepareAsyncGeneratePromptRaw(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::ContextSearchResponse>* AsyncSearchContextRaw(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::ContextSearchResponse>* PrepareAsyncSearchContextRaw(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::TextGenerationResponse>* AsyncGenerateTextRaw(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::TextGenerationResponse>* PrepareAsyncGenerateTextRaw(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::LLMModelsResponse>* AsyncGetAvailableModelsRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::LLMModelsResponse>* PrepareAsyncGetAvailableModelsRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>* AsyncGetHealthRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>* PrepareAsyncGetHealthRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GeneratePrompt_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchContext_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateText_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAvailableModels_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHealth_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Generate enhanced prompt with project context
    virtual ::grpc::Status GeneratePrompt(::grpc::ServerContext* context, const ::multimodal::PromptGenerationRequest* request, ::multimodal::PromptGenerationResponse* response);
    // Search project context and documentation
    virtual ::grpc::Status SearchContext(::grpc::ServerContext* context, const ::multimodal::ContextSearchRequest* request, ::multimodal::ContextSearchResponse* response);
    // Generate text using LLM
    virtual ::grpc::Status GenerateText(::grpc::ServerContext* context, const ::multimodal::TextGenerationRequest* request, ::multimodal::TextGenerationResponse* response);
    // Get available LLM models
    virtual ::grpc::Status GetAvailableModels(::grpc::ServerContext* context, const ::multimodal::Empty* request, ::multimodal::LLMModelsResponse* response);
    // Health check for service availability
    virtual ::grpc::Status GetHealth(::grpc::ServerContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GeneratePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GeneratePrompt() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GeneratePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePrompt(::grpc::ServerContext* /*context*/, const ::multimodal::PromptGenerationRequest* /*request*/, ::multimodal::PromptGenerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGeneratePrompt(::grpc::ServerContext* context, ::multimodal::PromptGenerationRequest* request, ::grpc::ServerAsyncResponseWriter< ::multimodal::PromptGenerationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchContext() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SearchContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchContext(::grpc::ServerContext* /*context*/, const ::multimodal::ContextSearchRequest* /*request*/, ::multimodal::ContextSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchContext(::grpc::ServerContext* context, ::multimodal::ContextSearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::multimodal::ContextSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateText() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GenerateText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateText(::grpc::ServerContext* /*context*/, const ::multimodal::TextGenerationRequest* /*request*/, ::multimodal::TextGenerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateText(::grpc::ServerContext* context, ::multimodal::TextGenerationRequest* request, ::grpc::ServerAsyncResponseWriter< ::multimodal::TextGenerationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAvailableModels() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableModels(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::LLMModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableModels(::grpc::ServerContext* context, ::multimodal::Empty* request, ::grpc::ServerAsyncResponseWriter< ::multimodal::LLMModelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetHealth() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHealth(::grpc::ServerContext* context, ::multimodal::Empty* request, ::grpc::ServerAsyncResponseWriter< ::multimodal::HealthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GeneratePrompt<WithAsyncMethod_SearchContext<WithAsyncMethod_GenerateText<WithAsyncMethod_GetAvailableModels<WithAsyncMethod_GetHealth<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GeneratePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GeneratePrompt() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::multimodal::PromptGenerationRequest, ::multimodal::PromptGenerationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::multimodal::PromptGenerationRequest* request, ::multimodal::PromptGenerationResponse* response) { return this->GeneratePrompt(context, request, response); }));}
    void SetMessageAllocatorFor_GeneratePrompt(
        ::grpc::MessageAllocator< ::multimodal::PromptGenerationRequest, ::multimodal::PromptGenerationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::multimodal::PromptGenerationRequest, ::multimodal::PromptGenerationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GeneratePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePrompt(::grpc::ServerContext* /*context*/, const ::multimodal::PromptGenerationRequest* /*request*/, ::multimodal::PromptGenerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GeneratePrompt(
      ::grpc::CallbackServerContext* /*context*/, const ::multimodal::PromptGenerationRequest* /*request*/, ::multimodal::PromptGenerationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SearchContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SearchContext() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::multimodal::ContextSearchRequest, ::multimodal::ContextSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::multimodal::ContextSearchRequest* request, ::multimodal::ContextSearchResponse* response) { return this->SearchContext(context, request, response); }));}
    void SetMessageAllocatorFor_SearchContext(
        ::grpc::MessageAllocator< ::multimodal::ContextSearchRequest, ::multimodal::ContextSearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::multimodal::ContextSearchRequest, ::multimodal::ContextSearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SearchContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchContext(::grpc::ServerContext* /*context*/, const ::multimodal::ContextSearchRequest* /*request*/, ::multimodal::ContextSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchContext(
      ::grpc::CallbackServerContext* /*context*/, const ::multimodal::ContextSearchRequest* /*request*/, ::multimodal::ContextSearchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenerateText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateText() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::multimodal::TextGenerationRequest, ::multimodal::TextGenerationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::multimodal::TextGenerationRequest* request, ::multimodal::TextGenerationResponse* response) { return this->GenerateText(context, request, response); }));}
    void SetMessageAllocatorFor_GenerateText(
        ::grpc::MessageAllocator< ::multimodal::TextGenerationRequest, ::multimodal::TextGenerationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::multimodal::TextGenerationRequest, ::multimodal::TextGenerationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GenerateText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateText(::grpc::ServerContext* /*context*/, const ::multimodal::TextGenerationRequest* /*request*/, ::multimodal::TextGenerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenerateText(
      ::grpc::CallbackServerContext* /*context*/, const ::multimodal::TextGenerationRequest* /*request*/, ::multimodal::TextGenerationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAvailableModels() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::multimodal::Empty, ::multimodal::LLMModelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::multimodal::Empty* request, ::multimodal::LLMModelsResponse* response) { return this->GetAvailableModels(context, request, response); }));}
    void SetMessageAllocatorFor_GetAvailableModels(
        ::grpc::MessageAllocator< ::multimodal::Empty, ::multimodal::LLMModelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::multimodal::Empty, ::multimodal::LLMModelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableModels(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::LLMModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAvailableModels(
      ::grpc::CallbackServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::LLMModelsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetHealth() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::multimodal::Empty, ::multimodal::HealthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response) { return this->GetHealth(context, request, response); }));}
    void SetMessageAllocatorFor_GetHealth(
        ::grpc::MessageAllocator< ::multimodal::Empty, ::multimodal::HealthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::multimodal::Empty, ::multimodal::HealthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GeneratePrompt<WithCallbackMethod_SearchContext<WithCallbackMethod_GenerateText<WithCallbackMethod_GetAvailableModels<WithCallbackMethod_GetHealth<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GeneratePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GeneratePrompt() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GeneratePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePrompt(::grpc::ServerContext* /*context*/, const ::multimodal::PromptGenerationRequest* /*request*/, ::multimodal::PromptGenerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchContext() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SearchContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchContext(::grpc::ServerContext* /*context*/, const ::multimodal::ContextSearchRequest* /*request*/, ::multimodal::ContextSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateText() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GenerateText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateText(::grpc::ServerContext* /*context*/, const ::multimodal::TextGenerationRequest* /*request*/, ::multimodal::TextGenerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAvailableModels() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableModels(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::LLMModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetHealth() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GeneratePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GeneratePrompt() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GeneratePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePrompt(::grpc::ServerContext* /*context*/, const ::multimodal::PromptGenerationRequest* /*request*/, ::multimodal::PromptGenerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGeneratePrompt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchContext() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SearchContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchContext(::grpc::ServerContext* /*context*/, const ::multimodal::ContextSearchRequest* /*request*/, ::multimodal::ContextSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchContext(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateText() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GenerateText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateText(::grpc::ServerContext* /*context*/, const ::multimodal::TextGenerationRequest* /*request*/, ::multimodal::TextGenerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateText(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAvailableModels() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableModels(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::LLMModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetHealth() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHealth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GeneratePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GeneratePrompt() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GeneratePrompt(context, request, response); }));
    }
    ~WithRawCallbackMethod_GeneratePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePrompt(::grpc::ServerContext* /*context*/, const ::multimodal::PromptGenerationRequest* /*request*/, ::multimodal::PromptGenerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GeneratePrompt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SearchContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SearchContext() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchContext(context, request, response); }));
    }
    ~WithRawCallbackMethod_SearchContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchContext(::grpc::ServerContext* /*context*/, const ::multimodal::ContextSearchRequest* /*request*/, ::multimodal::ContextSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchContext(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateText() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GenerateText(context, request, response); }));
    }
    ~WithRawCallbackMethod_GenerateText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateText(::grpc::ServerContext* /*context*/, const ::multimodal::TextGenerationRequest* /*request*/, ::multimodal::TextGenerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenerateText(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAvailableModels() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAvailableModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableModels(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::LLMModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAvailableModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetHealth() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetHealth(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GeneratePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GeneratePrompt() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::multimodal::PromptGenerationRequest, ::multimodal::PromptGenerationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::multimodal::PromptGenerationRequest, ::multimodal::PromptGenerationResponse>* streamer) {
                       return this->StreamedGeneratePrompt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GeneratePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GeneratePrompt(::grpc::ServerContext* /*context*/, const ::multimodal::PromptGenerationRequest* /*request*/, ::multimodal::PromptGenerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGeneratePrompt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::multimodal::PromptGenerationRequest,::multimodal::PromptGenerationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchContext() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::multimodal::ContextSearchRequest, ::multimodal::ContextSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::multimodal::ContextSearchRequest, ::multimodal::ContextSearchResponse>* streamer) {
                       return this->StreamedSearchContext(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchContext(::grpc::ServerContext* /*context*/, const ::multimodal::ContextSearchRequest* /*request*/, ::multimodal::ContextSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchContext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::multimodal::ContextSearchRequest,::multimodal::ContextSearchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GenerateText() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::multimodal::TextGenerationRequest, ::multimodal::TextGenerationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::multimodal::TextGenerationRequest, ::multimodal::TextGenerationResponse>* streamer) {
                       return this->StreamedGenerateText(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GenerateText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateText(::grpc::ServerContext* /*context*/, const ::multimodal::TextGenerationRequest* /*request*/, ::multimodal::TextGenerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateText(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::multimodal::TextGenerationRequest,::multimodal::TextGenerationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAvailableModels() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::multimodal::Empty, ::multimodal::LLMModelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::multimodal::Empty, ::multimodal::LLMModelsResponse>* streamer) {
                       return this->StreamedGetAvailableModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAvailableModels(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::LLMModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAvailableModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::multimodal::Empty,::multimodal::LLMModelsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetHealth() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::multimodal::Empty, ::multimodal::HealthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::multimodal::Empty, ::multimodal::HealthResponse>* streamer) {
                       return this->StreamedGetHealth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* /*context*/, const ::multimodal::Empty* /*request*/, ::multimodal::HealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHealth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::multimodal::Empty,::multimodal::HealthResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GeneratePrompt<WithStreamedUnaryMethod_SearchContext<WithStreamedUnaryMethod_GenerateText<WithStreamedUnaryMethod_GetAvailableModels<WithStreamedUnaryMethod_GetHealth<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GeneratePrompt<WithStreamedUnaryMethod_SearchContext<WithStreamedUnaryMethod_GenerateText<WithStreamedUnaryMethod_GetAvailableModels<WithStreamedUnaryMethod_GetHealth<Service > > > > > StreamedService;
};

}  // namespace multimodal


#endif  // GRPC_context_5fservice_2eproto__INCLUDED
