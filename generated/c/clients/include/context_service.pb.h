// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: context_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_context_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_context_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "vision_service.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_context_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_context_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_context_5fservice_2eproto;
namespace multimodal {
class ContextItem;
struct ContextItemDefaultTypeInternal;
extern ContextItemDefaultTypeInternal _ContextItem_default_instance_;
class ContextItem_MetadataEntry_DoNotUse;
struct ContextItem_MetadataEntry_DoNotUseDefaultTypeInternal;
extern ContextItem_MetadataEntry_DoNotUseDefaultTypeInternal _ContextItem_MetadataEntry_DoNotUse_default_instance_;
class ContextSearchRequest;
struct ContextSearchRequestDefaultTypeInternal;
extern ContextSearchRequestDefaultTypeInternal _ContextSearchRequest_default_instance_;
class ContextSearchRequest_FiltersEntry_DoNotUse;
struct ContextSearchRequest_FiltersEntry_DoNotUseDefaultTypeInternal;
extern ContextSearchRequest_FiltersEntry_DoNotUseDefaultTypeInternal _ContextSearchRequest_FiltersEntry_DoNotUse_default_instance_;
class ContextSearchResponse;
struct ContextSearchResponseDefaultTypeInternal;
extern ContextSearchResponseDefaultTypeInternal _ContextSearchResponse_default_instance_;
class LLMModelInfo;
struct LLMModelInfoDefaultTypeInternal;
extern LLMModelInfoDefaultTypeInternal _LLMModelInfo_default_instance_;
class LLMModelsResponse;
struct LLMModelsResponseDefaultTypeInternal;
extern LLMModelsResponseDefaultTypeInternal _LLMModelsResponse_default_instance_;
class PromptGenerationRequest;
struct PromptGenerationRequestDefaultTypeInternal;
extern PromptGenerationRequestDefaultTypeInternal _PromptGenerationRequest_default_instance_;
class PromptGenerationRequest_ContextHintsEntry_DoNotUse;
struct PromptGenerationRequest_ContextHintsEntry_DoNotUseDefaultTypeInternal;
extern PromptGenerationRequest_ContextHintsEntry_DoNotUseDefaultTypeInternal _PromptGenerationRequest_ContextHintsEntry_DoNotUse_default_instance_;
class PromptGenerationResponse;
struct PromptGenerationResponseDefaultTypeInternal;
extern PromptGenerationResponseDefaultTypeInternal _PromptGenerationResponse_default_instance_;
class TextGenerationRequest;
struct TextGenerationRequestDefaultTypeInternal;
extern TextGenerationRequestDefaultTypeInternal _TextGenerationRequest_default_instance_;
class TextGenerationRequest_ParametersEntry_DoNotUse;
struct TextGenerationRequest_ParametersEntry_DoNotUseDefaultTypeInternal;
extern TextGenerationRequest_ParametersEntry_DoNotUseDefaultTypeInternal _TextGenerationRequest_ParametersEntry_DoNotUse_default_instance_;
class TextGenerationResponse;
struct TextGenerationResponseDefaultTypeInternal;
extern TextGenerationResponseDefaultTypeInternal _TextGenerationResponse_default_instance_;
}  // namespace multimodal
PROTOBUF_NAMESPACE_OPEN
template<> ::multimodal::ContextItem* Arena::CreateMaybeMessage<::multimodal::ContextItem>(Arena*);
template<> ::multimodal::ContextItem_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::multimodal::ContextItem_MetadataEntry_DoNotUse>(Arena*);
template<> ::multimodal::ContextSearchRequest* Arena::CreateMaybeMessage<::multimodal::ContextSearchRequest>(Arena*);
template<> ::multimodal::ContextSearchRequest_FiltersEntry_DoNotUse* Arena::CreateMaybeMessage<::multimodal::ContextSearchRequest_FiltersEntry_DoNotUse>(Arena*);
template<> ::multimodal::ContextSearchResponse* Arena::CreateMaybeMessage<::multimodal::ContextSearchResponse>(Arena*);
template<> ::multimodal::LLMModelInfo* Arena::CreateMaybeMessage<::multimodal::LLMModelInfo>(Arena*);
template<> ::multimodal::LLMModelsResponse* Arena::CreateMaybeMessage<::multimodal::LLMModelsResponse>(Arena*);
template<> ::multimodal::PromptGenerationRequest* Arena::CreateMaybeMessage<::multimodal::PromptGenerationRequest>(Arena*);
template<> ::multimodal::PromptGenerationRequest_ContextHintsEntry_DoNotUse* Arena::CreateMaybeMessage<::multimodal::PromptGenerationRequest_ContextHintsEntry_DoNotUse>(Arena*);
template<> ::multimodal::PromptGenerationResponse* Arena::CreateMaybeMessage<::multimodal::PromptGenerationResponse>(Arena*);
template<> ::multimodal::TextGenerationRequest* Arena::CreateMaybeMessage<::multimodal::TextGenerationRequest>(Arena*);
template<> ::multimodal::TextGenerationRequest_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::multimodal::TextGenerationRequest_ParametersEntry_DoNotUse>(Arena*);
template<> ::multimodal::TextGenerationResponse* Arena::CreateMaybeMessage<::multimodal::TextGenerationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace multimodal {

// ===================================================================

class PromptGenerationRequest_ContextHintsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PromptGenerationRequest_ContextHintsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PromptGenerationRequest_ContextHintsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  PromptGenerationRequest_ContextHintsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PromptGenerationRequest_ContextHintsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PromptGenerationRequest_ContextHintsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PromptGenerationRequest_ContextHintsEntry_DoNotUse& other);
  static const PromptGenerationRequest_ContextHintsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PromptGenerationRequest_ContextHintsEntry_DoNotUse*>(&_PromptGenerationRequest_ContextHintsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "multimodal.PromptGenerationRequest.ContextHintsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "multimodal.PromptGenerationRequest.ContextHintsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_context_5fservice_2eproto;
};

// -------------------------------------------------------------------

class PromptGenerationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multimodal.PromptGenerationRequest) */ {
 public:
  inline PromptGenerationRequest() : PromptGenerationRequest(nullptr) {}
  ~PromptGenerationRequest() override;
  explicit PROTOBUF_CONSTEXPR PromptGenerationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PromptGenerationRequest(const PromptGenerationRequest& from);
  PromptGenerationRequest(PromptGenerationRequest&& from) noexcept
    : PromptGenerationRequest() {
    *this = ::std::move(from);
  }

  inline PromptGenerationRequest& operator=(const PromptGenerationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromptGenerationRequest& operator=(PromptGenerationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PromptGenerationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PromptGenerationRequest* internal_default_instance() {
    return reinterpret_cast<const PromptGenerationRequest*>(
               &_PromptGenerationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PromptGenerationRequest& a, PromptGenerationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PromptGenerationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromptGenerationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PromptGenerationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PromptGenerationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PromptGenerationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PromptGenerationRequest& from) {
    PromptGenerationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromptGenerationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multimodal.PromptGenerationRequest";
  }
  protected:
  explicit PromptGenerationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kContextTypesFieldNumber = 3,
    kContextHintsFieldNumber = 5,
    kBasePromptFieldNumber = 1,
    kAnalysisTypeFieldNumber = 2,
    kModelFieldNumber = 6,
    kMaxContextItemsFieldNumber = 4,
    kMaxTokensFieldNumber = 7,
    kTemperatureFieldNumber = 8,
  };
  // repeated string context_types = 3;
  int context_types_size() const;
  private:
  int _internal_context_types_size() const;
  public:
  void clear_context_types();
  const std::string& context_types(int index) const;
  std::string* mutable_context_types(int index);
  void set_context_types(int index, const std::string& value);
  void set_context_types(int index, std::string&& value);
  void set_context_types(int index, const char* value);
  void set_context_types(int index, const char* value, size_t size);
  std::string* add_context_types();
  void add_context_types(const std::string& value);
  void add_context_types(std::string&& value);
  void add_context_types(const char* value);
  void add_context_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& context_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_context_types();
  private:
  const std::string& _internal_context_types(int index) const;
  std::string* _internal_add_context_types();
  public:

  // map<string, string> context_hints = 5;
  int context_hints_size() const;
  private:
  int _internal_context_hints_size() const;
  public:
  void clear_context_hints();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_context_hints() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_context_hints();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      context_hints() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_context_hints();

  // string base_prompt = 1;
  void clear_base_prompt();
  const std::string& base_prompt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base_prompt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base_prompt();
  PROTOBUF_NODISCARD std::string* release_base_prompt();
  void set_allocated_base_prompt(std::string* base_prompt);
  private:
  const std::string& _internal_base_prompt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_prompt(const std::string& value);
  std::string* _internal_mutable_base_prompt();
  public:

  // string analysis_type = 2;
  void clear_analysis_type();
  const std::string& analysis_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_analysis_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_analysis_type();
  PROTOBUF_NODISCARD std::string* release_analysis_type();
  void set_allocated_analysis_type(std::string* analysis_type);
  private:
  const std::string& _internal_analysis_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_analysis_type(const std::string& value);
  std::string* _internal_mutable_analysis_type();
  public:

  // string model = 6;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // int32 max_context_items = 4;
  void clear_max_context_items();
  int32_t max_context_items() const;
  void set_max_context_items(int32_t value);
  private:
  int32_t _internal_max_context_items() const;
  void _internal_set_max_context_items(int32_t value);
  public:

  // int32 max_tokens = 7;
  void clear_max_tokens();
  int32_t max_tokens() const;
  void set_max_tokens(int32_t value);
  private:
  int32_t _internal_max_tokens() const;
  void _internal_set_max_tokens(int32_t value);
  public:

  // float temperature = 8;
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // @@protoc_insertion_point(class_scope:multimodal.PromptGenerationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> context_types_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PromptGenerationRequest_ContextHintsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> context_hints_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_prompt_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr analysis_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    int32_t max_context_items_;
    int32_t max_tokens_;
    float temperature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_context_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PromptGenerationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multimodal.PromptGenerationResponse) */ {
 public:
  inline PromptGenerationResponse() : PromptGenerationResponse(nullptr) {}
  ~PromptGenerationResponse() override;
  explicit PROTOBUF_CONSTEXPR PromptGenerationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PromptGenerationResponse(const PromptGenerationResponse& from);
  PromptGenerationResponse(PromptGenerationResponse&& from) noexcept
    : PromptGenerationResponse() {
    *this = ::std::move(from);
  }

  inline PromptGenerationResponse& operator=(const PromptGenerationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromptGenerationResponse& operator=(PromptGenerationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PromptGenerationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PromptGenerationResponse* internal_default_instance() {
    return reinterpret_cast<const PromptGenerationResponse*>(
               &_PromptGenerationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PromptGenerationResponse& a, PromptGenerationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PromptGenerationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromptGenerationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PromptGenerationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PromptGenerationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PromptGenerationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PromptGenerationResponse& from) {
    PromptGenerationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromptGenerationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multimodal.PromptGenerationResponse";
  }
  protected:
  explicit PromptGenerationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextItemsFieldNumber = 3,
    kEnhancedPromptFieldNumber = 1,
    kModelUsedFieldNumber = 5,
    kErrorFieldNumber = 7,
    kProcessingTimeFieldNumber = 4,
    kContextItemsUsedFieldNumber = 2,
    kSuccessFieldNumber = 6,
  };
  // repeated .multimodal.ContextItem context_items = 3;
  int context_items_size() const;
  private:
  int _internal_context_items_size() const;
  public:
  void clear_context_items();
  ::multimodal::ContextItem* mutable_context_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::ContextItem >*
      mutable_context_items();
  private:
  const ::multimodal::ContextItem& _internal_context_items(int index) const;
  ::multimodal::ContextItem* _internal_add_context_items();
  public:
  const ::multimodal::ContextItem& context_items(int index) const;
  ::multimodal::ContextItem* add_context_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::ContextItem >&
      context_items() const;

  // string enhanced_prompt = 1;
  void clear_enhanced_prompt();
  const std::string& enhanced_prompt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enhanced_prompt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enhanced_prompt();
  PROTOBUF_NODISCARD std::string* release_enhanced_prompt();
  void set_allocated_enhanced_prompt(std::string* enhanced_prompt);
  private:
  const std::string& _internal_enhanced_prompt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enhanced_prompt(const std::string& value);
  std::string* _internal_mutable_enhanced_prompt();
  public:

  // string model_used = 5;
  void clear_model_used();
  const std::string& model_used() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_used(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_used();
  PROTOBUF_NODISCARD std::string* release_model_used();
  void set_allocated_model_used(std::string* model_used);
  private:
  const std::string& _internal_model_used() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_used(const std::string& value);
  std::string* _internal_mutable_model_used();
  public:

  // string error = 7;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // double processing_time = 4;
  void clear_processing_time();
  double processing_time() const;
  void set_processing_time(double value);
  private:
  double _internal_processing_time() const;
  void _internal_set_processing_time(double value);
  public:

  // int32 context_items_used = 2;
  void clear_context_items_used();
  int32_t context_items_used() const;
  void set_context_items_used(int32_t value);
  private:
  int32_t _internal_context_items_used() const;
  void _internal_set_context_items_used(int32_t value);
  public:

  // bool success = 6;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:multimodal.PromptGenerationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::ContextItem > context_items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enhanced_prompt_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_used_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    double processing_time_;
    int32_t context_items_used_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_context_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ContextSearchRequest_FiltersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContextSearchRequest_FiltersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContextSearchRequest_FiltersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ContextSearchRequest_FiltersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ContextSearchRequest_FiltersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ContextSearchRequest_FiltersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContextSearchRequest_FiltersEntry_DoNotUse& other);
  static const ContextSearchRequest_FiltersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContextSearchRequest_FiltersEntry_DoNotUse*>(&_ContextSearchRequest_FiltersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "multimodal.ContextSearchRequest.FiltersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "multimodal.ContextSearchRequest.FiltersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_context_5fservice_2eproto;
};

// -------------------------------------------------------------------

class ContextSearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multimodal.ContextSearchRequest) */ {
 public:
  inline ContextSearchRequest() : ContextSearchRequest(nullptr) {}
  ~ContextSearchRequest() override;
  explicit PROTOBUF_CONSTEXPR ContextSearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContextSearchRequest(const ContextSearchRequest& from);
  ContextSearchRequest(ContextSearchRequest&& from) noexcept
    : ContextSearchRequest() {
    *this = ::std::move(from);
  }

  inline ContextSearchRequest& operator=(const ContextSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContextSearchRequest& operator=(ContextSearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContextSearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContextSearchRequest* internal_default_instance() {
    return reinterpret_cast<const ContextSearchRequest*>(
               &_ContextSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ContextSearchRequest& a, ContextSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ContextSearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContextSearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContextSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContextSearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContextSearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContextSearchRequest& from) {
    ContextSearchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContextSearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multimodal.ContextSearchRequest";
  }
  protected:
  explicit ContextSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kContextTypesFieldNumber = 2,
    kFiltersFieldNumber = 5,
    kQueryFieldNumber = 1,
    kMaxResultsFieldNumber = 3,
    kMinRelevanceFieldNumber = 4,
  };
  // repeated string context_types = 2;
  int context_types_size() const;
  private:
  int _internal_context_types_size() const;
  public:
  void clear_context_types();
  const std::string& context_types(int index) const;
  std::string* mutable_context_types(int index);
  void set_context_types(int index, const std::string& value);
  void set_context_types(int index, std::string&& value);
  void set_context_types(int index, const char* value);
  void set_context_types(int index, const char* value, size_t size);
  std::string* add_context_types();
  void add_context_types(const std::string& value);
  void add_context_types(std::string&& value);
  void add_context_types(const char* value);
  void add_context_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& context_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_context_types();
  private:
  const std::string& _internal_context_types(int index) const;
  std::string* _internal_add_context_types();
  public:

  // map<string, string> filters = 5;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_filters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_filters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      filters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_filters();

  // string query = 1;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // int32 max_results = 3;
  void clear_max_results();
  int32_t max_results() const;
  void set_max_results(int32_t value);
  private:
  int32_t _internal_max_results() const;
  void _internal_set_max_results(int32_t value);
  public:

  // float min_relevance = 4;
  void clear_min_relevance();
  float min_relevance() const;
  void set_min_relevance(float value);
  private:
  float _internal_min_relevance() const;
  void _internal_set_min_relevance(float value);
  public:

  // @@protoc_insertion_point(class_scope:multimodal.ContextSearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> context_types_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ContextSearchRequest_FiltersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> filters_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    int32_t max_results_;
    float min_relevance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_context_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ContextSearchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multimodal.ContextSearchResponse) */ {
 public:
  inline ContextSearchResponse() : ContextSearchResponse(nullptr) {}
  ~ContextSearchResponse() override;
  explicit PROTOBUF_CONSTEXPR ContextSearchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContextSearchResponse(const ContextSearchResponse& from);
  ContextSearchResponse(ContextSearchResponse&& from) noexcept
    : ContextSearchResponse() {
    *this = ::std::move(from);
  }

  inline ContextSearchResponse& operator=(const ContextSearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContextSearchResponse& operator=(ContextSearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContextSearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContextSearchResponse* internal_default_instance() {
    return reinterpret_cast<const ContextSearchResponse*>(
               &_ContextSearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ContextSearchResponse& a, ContextSearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ContextSearchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContextSearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContextSearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContextSearchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContextSearchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContextSearchResponse& from) {
    ContextSearchResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContextSearchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multimodal.ContextSearchResponse";
  }
  protected:
  explicit ContextSearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
    kQueryFieldNumber = 3,
    kProcessingTimeFieldNumber = 4,
    kTotalResultsFieldNumber = 2,
  };
  // repeated .multimodal.ContextItem results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::multimodal::ContextItem* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::ContextItem >*
      mutable_results();
  private:
  const ::multimodal::ContextItem& _internal_results(int index) const;
  ::multimodal::ContextItem* _internal_add_results();
  public:
  const ::multimodal::ContextItem& results(int index) const;
  ::multimodal::ContextItem* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::ContextItem >&
      results() const;

  // string query = 3;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // double processing_time = 4;
  void clear_processing_time();
  double processing_time() const;
  void set_processing_time(double value);
  private:
  double _internal_processing_time() const;
  void _internal_set_processing_time(double value);
  public:

  // int32 total_results = 2;
  void clear_total_results();
  int32_t total_results() const;
  void set_total_results(int32_t value);
  private:
  int32_t _internal_total_results() const;
  void _internal_set_total_results(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:multimodal.ContextSearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::ContextItem > results_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    double processing_time_;
    int32_t total_results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_context_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TextGenerationRequest_ParametersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TextGenerationRequest_ParametersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TextGenerationRequest_ParametersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TextGenerationRequest_ParametersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TextGenerationRequest_ParametersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TextGenerationRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TextGenerationRequest_ParametersEntry_DoNotUse& other);
  static const TextGenerationRequest_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TextGenerationRequest_ParametersEntry_DoNotUse*>(&_TextGenerationRequest_ParametersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "multimodal.TextGenerationRequest.ParametersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "multimodal.TextGenerationRequest.ParametersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_context_5fservice_2eproto;
};

// -------------------------------------------------------------------

class TextGenerationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multimodal.TextGenerationRequest) */ {
 public:
  inline TextGenerationRequest() : TextGenerationRequest(nullptr) {}
  ~TextGenerationRequest() override;
  explicit PROTOBUF_CONSTEXPR TextGenerationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextGenerationRequest(const TextGenerationRequest& from);
  TextGenerationRequest(TextGenerationRequest&& from) noexcept
    : TextGenerationRequest() {
    *this = ::std::move(from);
  }

  inline TextGenerationRequest& operator=(const TextGenerationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextGenerationRequest& operator=(TextGenerationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextGenerationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextGenerationRequest* internal_default_instance() {
    return reinterpret_cast<const TextGenerationRequest*>(
               &_TextGenerationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TextGenerationRequest& a, TextGenerationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TextGenerationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextGenerationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextGenerationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextGenerationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextGenerationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextGenerationRequest& from) {
    TextGenerationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextGenerationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multimodal.TextGenerationRequest";
  }
  protected:
  explicit TextGenerationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStopSequencesFieldNumber = 6,
    kParametersFieldNumber = 7,
    kPromptFieldNumber = 1,
    kModelFieldNumber = 2,
    kMaxTokensFieldNumber = 3,
    kTemperatureFieldNumber = 4,
    kTopPFieldNumber = 5,
  };
  // repeated string stop_sequences = 6;
  int stop_sequences_size() const;
  private:
  int _internal_stop_sequences_size() const;
  public:
  void clear_stop_sequences();
  const std::string& stop_sequences(int index) const;
  std::string* mutable_stop_sequences(int index);
  void set_stop_sequences(int index, const std::string& value);
  void set_stop_sequences(int index, std::string&& value);
  void set_stop_sequences(int index, const char* value);
  void set_stop_sequences(int index, const char* value, size_t size);
  std::string* add_stop_sequences();
  void add_stop_sequences(const std::string& value);
  void add_stop_sequences(std::string&& value);
  void add_stop_sequences(const char* value);
  void add_stop_sequences(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stop_sequences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stop_sequences();
  private:
  const std::string& _internal_stop_sequences(int index) const;
  std::string* _internal_add_stop_sequences();
  public:

  // map<string, string> parameters = 7;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_parameters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_parameters();

  // string prompt = 1;
  void clear_prompt();
  const std::string& prompt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prompt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prompt();
  PROTOBUF_NODISCARD std::string* release_prompt();
  void set_allocated_prompt(std::string* prompt);
  private:
  const std::string& _internal_prompt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prompt(const std::string& value);
  std::string* _internal_mutable_prompt();
  public:

  // string model = 2;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // int32 max_tokens = 3;
  void clear_max_tokens();
  int32_t max_tokens() const;
  void set_max_tokens(int32_t value);
  private:
  int32_t _internal_max_tokens() const;
  void _internal_set_max_tokens(int32_t value);
  public:

  // float temperature = 4;
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // float top_p = 5;
  void clear_top_p();
  float top_p() const;
  void set_top_p(float value);
  private:
  float _internal_top_p() const;
  void _internal_set_top_p(float value);
  public:

  // @@protoc_insertion_point(class_scope:multimodal.TextGenerationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stop_sequences_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TextGenerationRequest_ParametersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> parameters_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prompt_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    int32_t max_tokens_;
    float temperature_;
    float top_p_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_context_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TextGenerationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multimodal.TextGenerationResponse) */ {
 public:
  inline TextGenerationResponse() : TextGenerationResponse(nullptr) {}
  ~TextGenerationResponse() override;
  explicit PROTOBUF_CONSTEXPR TextGenerationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextGenerationResponse(const TextGenerationResponse& from);
  TextGenerationResponse(TextGenerationResponse&& from) noexcept
    : TextGenerationResponse() {
    *this = ::std::move(from);
  }

  inline TextGenerationResponse& operator=(const TextGenerationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextGenerationResponse& operator=(TextGenerationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextGenerationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextGenerationResponse* internal_default_instance() {
    return reinterpret_cast<const TextGenerationResponse*>(
               &_TextGenerationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TextGenerationResponse& a, TextGenerationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TextGenerationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextGenerationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextGenerationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextGenerationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextGenerationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextGenerationResponse& from) {
    TextGenerationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextGenerationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multimodal.TextGenerationResponse";
  }
  protected:
  explicit TextGenerationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kModelUsedFieldNumber = 2,
    kErrorFieldNumber = 6,
    kProcessingTimeFieldNumber = 4,
    kTokensGeneratedFieldNumber = 3,
    kSuccessFieldNumber = 5,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string model_used = 2;
  void clear_model_used();
  const std::string& model_used() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_used(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_used();
  PROTOBUF_NODISCARD std::string* release_model_used();
  void set_allocated_model_used(std::string* model_used);
  private:
  const std::string& _internal_model_used() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_used(const std::string& value);
  std::string* _internal_mutable_model_used();
  public:

  // string error = 6;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // double processing_time = 4;
  void clear_processing_time();
  double processing_time() const;
  void set_processing_time(double value);
  private:
  double _internal_processing_time() const;
  void _internal_set_processing_time(double value);
  public:

  // int32 tokens_generated = 3;
  void clear_tokens_generated();
  int32_t tokens_generated() const;
  void set_tokens_generated(int32_t value);
  private:
  int32_t _internal_tokens_generated() const;
  void _internal_set_tokens_generated(int32_t value);
  public:

  // bool success = 5;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:multimodal.TextGenerationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_used_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    double processing_time_;
    int32_t tokens_generated_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_context_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ContextItem_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContextItem_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContextItem_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ContextItem_MetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ContextItem_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ContextItem_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContextItem_MetadataEntry_DoNotUse& other);
  static const ContextItem_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContextItem_MetadataEntry_DoNotUse*>(&_ContextItem_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "multimodal.ContextItem.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "multimodal.ContextItem.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_context_5fservice_2eproto;
};

// -------------------------------------------------------------------

class ContextItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multimodal.ContextItem) */ {
 public:
  inline ContextItem() : ContextItem(nullptr) {}
  ~ContextItem() override;
  explicit PROTOBUF_CONSTEXPR ContextItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContextItem(const ContextItem& from);
  ContextItem(ContextItem&& from) noexcept
    : ContextItem() {
    *this = ::std::move(from);
  }

  inline ContextItem& operator=(const ContextItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContextItem& operator=(ContextItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContextItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContextItem* internal_default_instance() {
    return reinterpret_cast<const ContextItem*>(
               &_ContextItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ContextItem& a, ContextItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ContextItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContextItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContextItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContextItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContextItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContextItem& from) {
    ContextItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContextItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multimodal.ContextItem";
  }
  protected:
  explicit ContextItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 6,
    kMetadataFieldNumber = 9,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTitleFieldNumber = 3,
    kContentFieldNumber = 4,
    kFilePathFieldNumber = 5,
    kRelevanceScoreFieldNumber = 7,
    kLastModifiedFieldNumber = 8,
  };
  // repeated string tags = 6;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // map<string, string> metadata = 9;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string title = 3;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string content = 4;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string file_path = 5;
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // double relevance_score = 7;
  void clear_relevance_score();
  double relevance_score() const;
  void set_relevance_score(double value);
  private:
  double _internal_relevance_score() const;
  void _internal_set_relevance_score(double value);
  public:

  // int64 last_modified = 8;
  void clear_last_modified();
  int64_t last_modified() const;
  void set_last_modified(int64_t value);
  private:
  int64_t _internal_last_modified() const;
  void _internal_set_last_modified(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:multimodal.ContextItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ContextItem_MetadataEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
    double relevance_score_;
    int64_t last_modified_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_context_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LLMModelsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multimodal.LLMModelsResponse) */ {
 public:
  inline LLMModelsResponse() : LLMModelsResponse(nullptr) {}
  ~LLMModelsResponse() override;
  explicit PROTOBUF_CONSTEXPR LLMModelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LLMModelsResponse(const LLMModelsResponse& from);
  LLMModelsResponse(LLMModelsResponse&& from) noexcept
    : LLMModelsResponse() {
    *this = ::std::move(from);
  }

  inline LLMModelsResponse& operator=(const LLMModelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LLMModelsResponse& operator=(LLMModelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LLMModelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LLMModelsResponse* internal_default_instance() {
    return reinterpret_cast<const LLMModelsResponse*>(
               &_LLMModelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LLMModelsResponse& a, LLMModelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LLMModelsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LLMModelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LLMModelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LLMModelsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LLMModelsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LLMModelsResponse& from) {
    LLMModelsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LLMModelsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multimodal.LLMModelsResponse";
  }
  protected:
  explicit LLMModelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 1,
  };
  // repeated .multimodal.LLMModelInfo models = 1;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::multimodal::LLMModelInfo* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::LLMModelInfo >*
      mutable_models();
  private:
  const ::multimodal::LLMModelInfo& _internal_models(int index) const;
  ::multimodal::LLMModelInfo* _internal_add_models();
  public:
  const ::multimodal::LLMModelInfo& models(int index) const;
  ::multimodal::LLMModelInfo* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::LLMModelInfo >&
      models() const;

  // @@protoc_insertion_point(class_scope:multimodal.LLMModelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::LLMModelInfo > models_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_context_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LLMModelInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multimodal.LLMModelInfo) */ {
 public:
  inline LLMModelInfo() : LLMModelInfo(nullptr) {}
  ~LLMModelInfo() override;
  explicit PROTOBUF_CONSTEXPR LLMModelInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LLMModelInfo(const LLMModelInfo& from);
  LLMModelInfo(LLMModelInfo&& from) noexcept
    : LLMModelInfo() {
    *this = ::std::move(from);
  }

  inline LLMModelInfo& operator=(const LLMModelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LLMModelInfo& operator=(LLMModelInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LLMModelInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LLMModelInfo* internal_default_instance() {
    return reinterpret_cast<const LLMModelInfo*>(
               &_LLMModelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LLMModelInfo& a, LLMModelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LLMModelInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LLMModelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LLMModelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LLMModelInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LLMModelInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LLMModelInfo& from) {
    LLMModelInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LLMModelInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multimodal.LLMModelInfo";
  }
  protected:
  explicit LLMModelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapabilitiesFieldNumber = 7,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kProviderFieldNumber = 5,
    kAvailableFieldNumber = 4,
    kMaxTokensFieldNumber = 6,
  };
  // repeated string capabilities = 7;
  int capabilities_size() const;
  private:
  int _internal_capabilities_size() const;
  public:
  void clear_capabilities();
  const std::string& capabilities(int index) const;
  std::string* mutable_capabilities(int index);
  void set_capabilities(int index, const std::string& value);
  void set_capabilities(int index, std::string&& value);
  void set_capabilities(int index, const char* value);
  void set_capabilities(int index, const char* value, size_t size);
  std::string* add_capabilities();
  void add_capabilities(const std::string& value);
  void add_capabilities(std::string&& value);
  void add_capabilities(const char* value);
  void add_capabilities(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& capabilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_capabilities();
  private:
  const std::string& _internal_capabilities(int index) const;
  std::string* _internal_add_capabilities();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string provider = 5;
  void clear_provider();
  const std::string& provider() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_provider(ArgT0&& arg0, ArgT... args);
  std::string* mutable_provider();
  PROTOBUF_NODISCARD std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // bool available = 4;
  void clear_available();
  bool available() const;
  void set_available(bool value);
  private:
  bool _internal_available() const;
  void _internal_set_available(bool value);
  public:

  // int32 max_tokens = 6;
  void clear_max_tokens();
  int32_t max_tokens() const;
  void set_max_tokens(int32_t value);
  private:
  int32_t _internal_max_tokens() const;
  void _internal_set_max_tokens(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:multimodal.LLMModelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> capabilities_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
    bool available_;
    int32_t max_tokens_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_context_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PromptGenerationRequest

// string base_prompt = 1;
inline void PromptGenerationRequest::clear_base_prompt() {
  _impl_.base_prompt_.ClearToEmpty();
}
inline const std::string& PromptGenerationRequest::base_prompt() const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationRequest.base_prompt)
  return _internal_base_prompt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromptGenerationRequest::set_base_prompt(ArgT0&& arg0, ArgT... args) {
 
 _impl_.base_prompt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationRequest.base_prompt)
}
inline std::string* PromptGenerationRequest::mutable_base_prompt() {
  std::string* _s = _internal_mutable_base_prompt();
  // @@protoc_insertion_point(field_mutable:multimodal.PromptGenerationRequest.base_prompt)
  return _s;
}
inline const std::string& PromptGenerationRequest::_internal_base_prompt() const {
  return _impl_.base_prompt_.Get();
}
inline void PromptGenerationRequest::_internal_set_base_prompt(const std::string& value) {
  
  _impl_.base_prompt_.Set(value, GetArenaForAllocation());
}
inline std::string* PromptGenerationRequest::_internal_mutable_base_prompt() {
  
  return _impl_.base_prompt_.Mutable(GetArenaForAllocation());
}
inline std::string* PromptGenerationRequest::release_base_prompt() {
  // @@protoc_insertion_point(field_release:multimodal.PromptGenerationRequest.base_prompt)
  return _impl_.base_prompt_.Release();
}
inline void PromptGenerationRequest::set_allocated_base_prompt(std::string* base_prompt) {
  if (base_prompt != nullptr) {
    
  } else {
    
  }
  _impl_.base_prompt_.SetAllocated(base_prompt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base_prompt_.IsDefault()) {
    _impl_.base_prompt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.PromptGenerationRequest.base_prompt)
}

// string analysis_type = 2;
inline void PromptGenerationRequest::clear_analysis_type() {
  _impl_.analysis_type_.ClearToEmpty();
}
inline const std::string& PromptGenerationRequest::analysis_type() const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationRequest.analysis_type)
  return _internal_analysis_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromptGenerationRequest::set_analysis_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.analysis_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationRequest.analysis_type)
}
inline std::string* PromptGenerationRequest::mutable_analysis_type() {
  std::string* _s = _internal_mutable_analysis_type();
  // @@protoc_insertion_point(field_mutable:multimodal.PromptGenerationRequest.analysis_type)
  return _s;
}
inline const std::string& PromptGenerationRequest::_internal_analysis_type() const {
  return _impl_.analysis_type_.Get();
}
inline void PromptGenerationRequest::_internal_set_analysis_type(const std::string& value) {
  
  _impl_.analysis_type_.Set(value, GetArenaForAllocation());
}
inline std::string* PromptGenerationRequest::_internal_mutable_analysis_type() {
  
  return _impl_.analysis_type_.Mutable(GetArenaForAllocation());
}
inline std::string* PromptGenerationRequest::release_analysis_type() {
  // @@protoc_insertion_point(field_release:multimodal.PromptGenerationRequest.analysis_type)
  return _impl_.analysis_type_.Release();
}
inline void PromptGenerationRequest::set_allocated_analysis_type(std::string* analysis_type) {
  if (analysis_type != nullptr) {
    
  } else {
    
  }
  _impl_.analysis_type_.SetAllocated(analysis_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.analysis_type_.IsDefault()) {
    _impl_.analysis_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.PromptGenerationRequest.analysis_type)
}

// repeated string context_types = 3;
inline int PromptGenerationRequest::_internal_context_types_size() const {
  return _impl_.context_types_.size();
}
inline int PromptGenerationRequest::context_types_size() const {
  return _internal_context_types_size();
}
inline void PromptGenerationRequest::clear_context_types() {
  _impl_.context_types_.Clear();
}
inline std::string* PromptGenerationRequest::add_context_types() {
  std::string* _s = _internal_add_context_types();
  // @@protoc_insertion_point(field_add_mutable:multimodal.PromptGenerationRequest.context_types)
  return _s;
}
inline const std::string& PromptGenerationRequest::_internal_context_types(int index) const {
  return _impl_.context_types_.Get(index);
}
inline const std::string& PromptGenerationRequest::context_types(int index) const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationRequest.context_types)
  return _internal_context_types(index);
}
inline std::string* PromptGenerationRequest::mutable_context_types(int index) {
  // @@protoc_insertion_point(field_mutable:multimodal.PromptGenerationRequest.context_types)
  return _impl_.context_types_.Mutable(index);
}
inline void PromptGenerationRequest::set_context_types(int index, const std::string& value) {
  _impl_.context_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationRequest.context_types)
}
inline void PromptGenerationRequest::set_context_types(int index, std::string&& value) {
  _impl_.context_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationRequest.context_types)
}
inline void PromptGenerationRequest::set_context_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.context_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:multimodal.PromptGenerationRequest.context_types)
}
inline void PromptGenerationRequest::set_context_types(int index, const char* value, size_t size) {
  _impl_.context_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:multimodal.PromptGenerationRequest.context_types)
}
inline std::string* PromptGenerationRequest::_internal_add_context_types() {
  return _impl_.context_types_.Add();
}
inline void PromptGenerationRequest::add_context_types(const std::string& value) {
  _impl_.context_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:multimodal.PromptGenerationRequest.context_types)
}
inline void PromptGenerationRequest::add_context_types(std::string&& value) {
  _impl_.context_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:multimodal.PromptGenerationRequest.context_types)
}
inline void PromptGenerationRequest::add_context_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.context_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:multimodal.PromptGenerationRequest.context_types)
}
inline void PromptGenerationRequest::add_context_types(const char* value, size_t size) {
  _impl_.context_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:multimodal.PromptGenerationRequest.context_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PromptGenerationRequest::context_types() const {
  // @@protoc_insertion_point(field_list:multimodal.PromptGenerationRequest.context_types)
  return _impl_.context_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PromptGenerationRequest::mutable_context_types() {
  // @@protoc_insertion_point(field_mutable_list:multimodal.PromptGenerationRequest.context_types)
  return &_impl_.context_types_;
}

// int32 max_context_items = 4;
inline void PromptGenerationRequest::clear_max_context_items() {
  _impl_.max_context_items_ = 0;
}
inline int32_t PromptGenerationRequest::_internal_max_context_items() const {
  return _impl_.max_context_items_;
}
inline int32_t PromptGenerationRequest::max_context_items() const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationRequest.max_context_items)
  return _internal_max_context_items();
}
inline void PromptGenerationRequest::_internal_set_max_context_items(int32_t value) {
  
  _impl_.max_context_items_ = value;
}
inline void PromptGenerationRequest::set_max_context_items(int32_t value) {
  _internal_set_max_context_items(value);
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationRequest.max_context_items)
}

// map<string, string> context_hints = 5;
inline int PromptGenerationRequest::_internal_context_hints_size() const {
  return _impl_.context_hints_.size();
}
inline int PromptGenerationRequest::context_hints_size() const {
  return _internal_context_hints_size();
}
inline void PromptGenerationRequest::clear_context_hints() {
  _impl_.context_hints_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PromptGenerationRequest::_internal_context_hints() const {
  return _impl_.context_hints_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PromptGenerationRequest::context_hints() const {
  // @@protoc_insertion_point(field_map:multimodal.PromptGenerationRequest.context_hints)
  return _internal_context_hints();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PromptGenerationRequest::_internal_mutable_context_hints() {
  return _impl_.context_hints_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PromptGenerationRequest::mutable_context_hints() {
  // @@protoc_insertion_point(field_mutable_map:multimodal.PromptGenerationRequest.context_hints)
  return _internal_mutable_context_hints();
}

// string model = 6;
inline void PromptGenerationRequest::clear_model() {
  _impl_.model_.ClearToEmpty();
}
inline const std::string& PromptGenerationRequest::model() const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationRequest.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromptGenerationRequest::set_model(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationRequest.model)
}
inline std::string* PromptGenerationRequest::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:multimodal.PromptGenerationRequest.model)
  return _s;
}
inline const std::string& PromptGenerationRequest::_internal_model() const {
  return _impl_.model_.Get();
}
inline void PromptGenerationRequest::_internal_set_model(const std::string& value) {
  
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* PromptGenerationRequest::_internal_mutable_model() {
  
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* PromptGenerationRequest::release_model() {
  // @@protoc_insertion_point(field_release:multimodal.PromptGenerationRequest.model)
  return _impl_.model_.Release();
}
inline void PromptGenerationRequest::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.PromptGenerationRequest.model)
}

// int32 max_tokens = 7;
inline void PromptGenerationRequest::clear_max_tokens() {
  _impl_.max_tokens_ = 0;
}
inline int32_t PromptGenerationRequest::_internal_max_tokens() const {
  return _impl_.max_tokens_;
}
inline int32_t PromptGenerationRequest::max_tokens() const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationRequest.max_tokens)
  return _internal_max_tokens();
}
inline void PromptGenerationRequest::_internal_set_max_tokens(int32_t value) {
  
  _impl_.max_tokens_ = value;
}
inline void PromptGenerationRequest::set_max_tokens(int32_t value) {
  _internal_set_max_tokens(value);
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationRequest.max_tokens)
}

// float temperature = 8;
inline void PromptGenerationRequest::clear_temperature() {
  _impl_.temperature_ = 0;
}
inline float PromptGenerationRequest::_internal_temperature() const {
  return _impl_.temperature_;
}
inline float PromptGenerationRequest::temperature() const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationRequest.temperature)
  return _internal_temperature();
}
inline void PromptGenerationRequest::_internal_set_temperature(float value) {
  
  _impl_.temperature_ = value;
}
inline void PromptGenerationRequest::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationRequest.temperature)
}

// -------------------------------------------------------------------

// PromptGenerationResponse

// string enhanced_prompt = 1;
inline void PromptGenerationResponse::clear_enhanced_prompt() {
  _impl_.enhanced_prompt_.ClearToEmpty();
}
inline const std::string& PromptGenerationResponse::enhanced_prompt() const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationResponse.enhanced_prompt)
  return _internal_enhanced_prompt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromptGenerationResponse::set_enhanced_prompt(ArgT0&& arg0, ArgT... args) {
 
 _impl_.enhanced_prompt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationResponse.enhanced_prompt)
}
inline std::string* PromptGenerationResponse::mutable_enhanced_prompt() {
  std::string* _s = _internal_mutable_enhanced_prompt();
  // @@protoc_insertion_point(field_mutable:multimodal.PromptGenerationResponse.enhanced_prompt)
  return _s;
}
inline const std::string& PromptGenerationResponse::_internal_enhanced_prompt() const {
  return _impl_.enhanced_prompt_.Get();
}
inline void PromptGenerationResponse::_internal_set_enhanced_prompt(const std::string& value) {
  
  _impl_.enhanced_prompt_.Set(value, GetArenaForAllocation());
}
inline std::string* PromptGenerationResponse::_internal_mutable_enhanced_prompt() {
  
  return _impl_.enhanced_prompt_.Mutable(GetArenaForAllocation());
}
inline std::string* PromptGenerationResponse::release_enhanced_prompt() {
  // @@protoc_insertion_point(field_release:multimodal.PromptGenerationResponse.enhanced_prompt)
  return _impl_.enhanced_prompt_.Release();
}
inline void PromptGenerationResponse::set_allocated_enhanced_prompt(std::string* enhanced_prompt) {
  if (enhanced_prompt != nullptr) {
    
  } else {
    
  }
  _impl_.enhanced_prompt_.SetAllocated(enhanced_prompt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enhanced_prompt_.IsDefault()) {
    _impl_.enhanced_prompt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.PromptGenerationResponse.enhanced_prompt)
}

// int32 context_items_used = 2;
inline void PromptGenerationResponse::clear_context_items_used() {
  _impl_.context_items_used_ = 0;
}
inline int32_t PromptGenerationResponse::_internal_context_items_used() const {
  return _impl_.context_items_used_;
}
inline int32_t PromptGenerationResponse::context_items_used() const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationResponse.context_items_used)
  return _internal_context_items_used();
}
inline void PromptGenerationResponse::_internal_set_context_items_used(int32_t value) {
  
  _impl_.context_items_used_ = value;
}
inline void PromptGenerationResponse::set_context_items_used(int32_t value) {
  _internal_set_context_items_used(value);
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationResponse.context_items_used)
}

// repeated .multimodal.ContextItem context_items = 3;
inline int PromptGenerationResponse::_internal_context_items_size() const {
  return _impl_.context_items_.size();
}
inline int PromptGenerationResponse::context_items_size() const {
  return _internal_context_items_size();
}
inline void PromptGenerationResponse::clear_context_items() {
  _impl_.context_items_.Clear();
}
inline ::multimodal::ContextItem* PromptGenerationResponse::mutable_context_items(int index) {
  // @@protoc_insertion_point(field_mutable:multimodal.PromptGenerationResponse.context_items)
  return _impl_.context_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::ContextItem >*
PromptGenerationResponse::mutable_context_items() {
  // @@protoc_insertion_point(field_mutable_list:multimodal.PromptGenerationResponse.context_items)
  return &_impl_.context_items_;
}
inline const ::multimodal::ContextItem& PromptGenerationResponse::_internal_context_items(int index) const {
  return _impl_.context_items_.Get(index);
}
inline const ::multimodal::ContextItem& PromptGenerationResponse::context_items(int index) const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationResponse.context_items)
  return _internal_context_items(index);
}
inline ::multimodal::ContextItem* PromptGenerationResponse::_internal_add_context_items() {
  return _impl_.context_items_.Add();
}
inline ::multimodal::ContextItem* PromptGenerationResponse::add_context_items() {
  ::multimodal::ContextItem* _add = _internal_add_context_items();
  // @@protoc_insertion_point(field_add:multimodal.PromptGenerationResponse.context_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::ContextItem >&
PromptGenerationResponse::context_items() const {
  // @@protoc_insertion_point(field_list:multimodal.PromptGenerationResponse.context_items)
  return _impl_.context_items_;
}

// double processing_time = 4;
inline void PromptGenerationResponse::clear_processing_time() {
  _impl_.processing_time_ = 0;
}
inline double PromptGenerationResponse::_internal_processing_time() const {
  return _impl_.processing_time_;
}
inline double PromptGenerationResponse::processing_time() const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationResponse.processing_time)
  return _internal_processing_time();
}
inline void PromptGenerationResponse::_internal_set_processing_time(double value) {
  
  _impl_.processing_time_ = value;
}
inline void PromptGenerationResponse::set_processing_time(double value) {
  _internal_set_processing_time(value);
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationResponse.processing_time)
}

// string model_used = 5;
inline void PromptGenerationResponse::clear_model_used() {
  _impl_.model_used_.ClearToEmpty();
}
inline const std::string& PromptGenerationResponse::model_used() const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationResponse.model_used)
  return _internal_model_used();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromptGenerationResponse::set_model_used(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_used_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationResponse.model_used)
}
inline std::string* PromptGenerationResponse::mutable_model_used() {
  std::string* _s = _internal_mutable_model_used();
  // @@protoc_insertion_point(field_mutable:multimodal.PromptGenerationResponse.model_used)
  return _s;
}
inline const std::string& PromptGenerationResponse::_internal_model_used() const {
  return _impl_.model_used_.Get();
}
inline void PromptGenerationResponse::_internal_set_model_used(const std::string& value) {
  
  _impl_.model_used_.Set(value, GetArenaForAllocation());
}
inline std::string* PromptGenerationResponse::_internal_mutable_model_used() {
  
  return _impl_.model_used_.Mutable(GetArenaForAllocation());
}
inline std::string* PromptGenerationResponse::release_model_used() {
  // @@protoc_insertion_point(field_release:multimodal.PromptGenerationResponse.model_used)
  return _impl_.model_used_.Release();
}
inline void PromptGenerationResponse::set_allocated_model_used(std::string* model_used) {
  if (model_used != nullptr) {
    
  } else {
    
  }
  _impl_.model_used_.SetAllocated(model_used, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_used_.IsDefault()) {
    _impl_.model_used_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.PromptGenerationResponse.model_used)
}

// bool success = 6;
inline void PromptGenerationResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool PromptGenerationResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool PromptGenerationResponse::success() const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationResponse.success)
  return _internal_success();
}
inline void PromptGenerationResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void PromptGenerationResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationResponse.success)
}

// string error = 7;
inline void PromptGenerationResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& PromptGenerationResponse::error() const {
  // @@protoc_insertion_point(field_get:multimodal.PromptGenerationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromptGenerationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.PromptGenerationResponse.error)
}
inline std::string* PromptGenerationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:multimodal.PromptGenerationResponse.error)
  return _s;
}
inline const std::string& PromptGenerationResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void PromptGenerationResponse::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* PromptGenerationResponse::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* PromptGenerationResponse::release_error() {
  // @@protoc_insertion_point(field_release:multimodal.PromptGenerationResponse.error)
  return _impl_.error_.Release();
}
inline void PromptGenerationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.PromptGenerationResponse.error)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ContextSearchRequest

// string query = 1;
inline void ContextSearchRequest::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& ContextSearchRequest::query() const {
  // @@protoc_insertion_point(field_get:multimodal.ContextSearchRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContextSearchRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.ContextSearchRequest.query)
}
inline std::string* ContextSearchRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:multimodal.ContextSearchRequest.query)
  return _s;
}
inline const std::string& ContextSearchRequest::_internal_query() const {
  return _impl_.query_.Get();
}
inline void ContextSearchRequest::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* ContextSearchRequest::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* ContextSearchRequest::release_query() {
  // @@protoc_insertion_point(field_release:multimodal.ContextSearchRequest.query)
  return _impl_.query_.Release();
}
inline void ContextSearchRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.ContextSearchRequest.query)
}

// repeated string context_types = 2;
inline int ContextSearchRequest::_internal_context_types_size() const {
  return _impl_.context_types_.size();
}
inline int ContextSearchRequest::context_types_size() const {
  return _internal_context_types_size();
}
inline void ContextSearchRequest::clear_context_types() {
  _impl_.context_types_.Clear();
}
inline std::string* ContextSearchRequest::add_context_types() {
  std::string* _s = _internal_add_context_types();
  // @@protoc_insertion_point(field_add_mutable:multimodal.ContextSearchRequest.context_types)
  return _s;
}
inline const std::string& ContextSearchRequest::_internal_context_types(int index) const {
  return _impl_.context_types_.Get(index);
}
inline const std::string& ContextSearchRequest::context_types(int index) const {
  // @@protoc_insertion_point(field_get:multimodal.ContextSearchRequest.context_types)
  return _internal_context_types(index);
}
inline std::string* ContextSearchRequest::mutable_context_types(int index) {
  // @@protoc_insertion_point(field_mutable:multimodal.ContextSearchRequest.context_types)
  return _impl_.context_types_.Mutable(index);
}
inline void ContextSearchRequest::set_context_types(int index, const std::string& value) {
  _impl_.context_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:multimodal.ContextSearchRequest.context_types)
}
inline void ContextSearchRequest::set_context_types(int index, std::string&& value) {
  _impl_.context_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:multimodal.ContextSearchRequest.context_types)
}
inline void ContextSearchRequest::set_context_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.context_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:multimodal.ContextSearchRequest.context_types)
}
inline void ContextSearchRequest::set_context_types(int index, const char* value, size_t size) {
  _impl_.context_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:multimodal.ContextSearchRequest.context_types)
}
inline std::string* ContextSearchRequest::_internal_add_context_types() {
  return _impl_.context_types_.Add();
}
inline void ContextSearchRequest::add_context_types(const std::string& value) {
  _impl_.context_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:multimodal.ContextSearchRequest.context_types)
}
inline void ContextSearchRequest::add_context_types(std::string&& value) {
  _impl_.context_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:multimodal.ContextSearchRequest.context_types)
}
inline void ContextSearchRequest::add_context_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.context_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:multimodal.ContextSearchRequest.context_types)
}
inline void ContextSearchRequest::add_context_types(const char* value, size_t size) {
  _impl_.context_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:multimodal.ContextSearchRequest.context_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ContextSearchRequest::context_types() const {
  // @@protoc_insertion_point(field_list:multimodal.ContextSearchRequest.context_types)
  return _impl_.context_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ContextSearchRequest::mutable_context_types() {
  // @@protoc_insertion_point(field_mutable_list:multimodal.ContextSearchRequest.context_types)
  return &_impl_.context_types_;
}

// int32 max_results = 3;
inline void ContextSearchRequest::clear_max_results() {
  _impl_.max_results_ = 0;
}
inline int32_t ContextSearchRequest::_internal_max_results() const {
  return _impl_.max_results_;
}
inline int32_t ContextSearchRequest::max_results() const {
  // @@protoc_insertion_point(field_get:multimodal.ContextSearchRequest.max_results)
  return _internal_max_results();
}
inline void ContextSearchRequest::_internal_set_max_results(int32_t value) {
  
  _impl_.max_results_ = value;
}
inline void ContextSearchRequest::set_max_results(int32_t value) {
  _internal_set_max_results(value);
  // @@protoc_insertion_point(field_set:multimodal.ContextSearchRequest.max_results)
}

// float min_relevance = 4;
inline void ContextSearchRequest::clear_min_relevance() {
  _impl_.min_relevance_ = 0;
}
inline float ContextSearchRequest::_internal_min_relevance() const {
  return _impl_.min_relevance_;
}
inline float ContextSearchRequest::min_relevance() const {
  // @@protoc_insertion_point(field_get:multimodal.ContextSearchRequest.min_relevance)
  return _internal_min_relevance();
}
inline void ContextSearchRequest::_internal_set_min_relevance(float value) {
  
  _impl_.min_relevance_ = value;
}
inline void ContextSearchRequest::set_min_relevance(float value) {
  _internal_set_min_relevance(value);
  // @@protoc_insertion_point(field_set:multimodal.ContextSearchRequest.min_relevance)
}

// map<string, string> filters = 5;
inline int ContextSearchRequest::_internal_filters_size() const {
  return _impl_.filters_.size();
}
inline int ContextSearchRequest::filters_size() const {
  return _internal_filters_size();
}
inline void ContextSearchRequest::clear_filters() {
  _impl_.filters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContextSearchRequest::_internal_filters() const {
  return _impl_.filters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContextSearchRequest::filters() const {
  // @@protoc_insertion_point(field_map:multimodal.ContextSearchRequest.filters)
  return _internal_filters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContextSearchRequest::_internal_mutable_filters() {
  return _impl_.filters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContextSearchRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_map:multimodal.ContextSearchRequest.filters)
  return _internal_mutable_filters();
}

// -------------------------------------------------------------------

// ContextSearchResponse

// repeated .multimodal.ContextItem results = 1;
inline int ContextSearchResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int ContextSearchResponse::results_size() const {
  return _internal_results_size();
}
inline void ContextSearchResponse::clear_results() {
  _impl_.results_.Clear();
}
inline ::multimodal::ContextItem* ContextSearchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:multimodal.ContextSearchResponse.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::ContextItem >*
ContextSearchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:multimodal.ContextSearchResponse.results)
  return &_impl_.results_;
}
inline const ::multimodal::ContextItem& ContextSearchResponse::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::multimodal::ContextItem& ContextSearchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:multimodal.ContextSearchResponse.results)
  return _internal_results(index);
}
inline ::multimodal::ContextItem* ContextSearchResponse::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::multimodal::ContextItem* ContextSearchResponse::add_results() {
  ::multimodal::ContextItem* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:multimodal.ContextSearchResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::ContextItem >&
ContextSearchResponse::results() const {
  // @@protoc_insertion_point(field_list:multimodal.ContextSearchResponse.results)
  return _impl_.results_;
}

// int32 total_results = 2;
inline void ContextSearchResponse::clear_total_results() {
  _impl_.total_results_ = 0;
}
inline int32_t ContextSearchResponse::_internal_total_results() const {
  return _impl_.total_results_;
}
inline int32_t ContextSearchResponse::total_results() const {
  // @@protoc_insertion_point(field_get:multimodal.ContextSearchResponse.total_results)
  return _internal_total_results();
}
inline void ContextSearchResponse::_internal_set_total_results(int32_t value) {
  
  _impl_.total_results_ = value;
}
inline void ContextSearchResponse::set_total_results(int32_t value) {
  _internal_set_total_results(value);
  // @@protoc_insertion_point(field_set:multimodal.ContextSearchResponse.total_results)
}

// string query = 3;
inline void ContextSearchResponse::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& ContextSearchResponse::query() const {
  // @@protoc_insertion_point(field_get:multimodal.ContextSearchResponse.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContextSearchResponse::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.ContextSearchResponse.query)
}
inline std::string* ContextSearchResponse::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:multimodal.ContextSearchResponse.query)
  return _s;
}
inline const std::string& ContextSearchResponse::_internal_query() const {
  return _impl_.query_.Get();
}
inline void ContextSearchResponse::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* ContextSearchResponse::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* ContextSearchResponse::release_query() {
  // @@protoc_insertion_point(field_release:multimodal.ContextSearchResponse.query)
  return _impl_.query_.Release();
}
inline void ContextSearchResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.ContextSearchResponse.query)
}

// double processing_time = 4;
inline void ContextSearchResponse::clear_processing_time() {
  _impl_.processing_time_ = 0;
}
inline double ContextSearchResponse::_internal_processing_time() const {
  return _impl_.processing_time_;
}
inline double ContextSearchResponse::processing_time() const {
  // @@protoc_insertion_point(field_get:multimodal.ContextSearchResponse.processing_time)
  return _internal_processing_time();
}
inline void ContextSearchResponse::_internal_set_processing_time(double value) {
  
  _impl_.processing_time_ = value;
}
inline void ContextSearchResponse::set_processing_time(double value) {
  _internal_set_processing_time(value);
  // @@protoc_insertion_point(field_set:multimodal.ContextSearchResponse.processing_time)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TextGenerationRequest

// string prompt = 1;
inline void TextGenerationRequest::clear_prompt() {
  _impl_.prompt_.ClearToEmpty();
}
inline const std::string& TextGenerationRequest::prompt() const {
  // @@protoc_insertion_point(field_get:multimodal.TextGenerationRequest.prompt)
  return _internal_prompt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextGenerationRequest::set_prompt(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prompt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.TextGenerationRequest.prompt)
}
inline std::string* TextGenerationRequest::mutable_prompt() {
  std::string* _s = _internal_mutable_prompt();
  // @@protoc_insertion_point(field_mutable:multimodal.TextGenerationRequest.prompt)
  return _s;
}
inline const std::string& TextGenerationRequest::_internal_prompt() const {
  return _impl_.prompt_.Get();
}
inline void TextGenerationRequest::_internal_set_prompt(const std::string& value) {
  
  _impl_.prompt_.Set(value, GetArenaForAllocation());
}
inline std::string* TextGenerationRequest::_internal_mutable_prompt() {
  
  return _impl_.prompt_.Mutable(GetArenaForAllocation());
}
inline std::string* TextGenerationRequest::release_prompt() {
  // @@protoc_insertion_point(field_release:multimodal.TextGenerationRequest.prompt)
  return _impl_.prompt_.Release();
}
inline void TextGenerationRequest::set_allocated_prompt(std::string* prompt) {
  if (prompt != nullptr) {
    
  } else {
    
  }
  _impl_.prompt_.SetAllocated(prompt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prompt_.IsDefault()) {
    _impl_.prompt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.TextGenerationRequest.prompt)
}

// string model = 2;
inline void TextGenerationRequest::clear_model() {
  _impl_.model_.ClearToEmpty();
}
inline const std::string& TextGenerationRequest::model() const {
  // @@protoc_insertion_point(field_get:multimodal.TextGenerationRequest.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextGenerationRequest::set_model(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.TextGenerationRequest.model)
}
inline std::string* TextGenerationRequest::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:multimodal.TextGenerationRequest.model)
  return _s;
}
inline const std::string& TextGenerationRequest::_internal_model() const {
  return _impl_.model_.Get();
}
inline void TextGenerationRequest::_internal_set_model(const std::string& value) {
  
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* TextGenerationRequest::_internal_mutable_model() {
  
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* TextGenerationRequest::release_model() {
  // @@protoc_insertion_point(field_release:multimodal.TextGenerationRequest.model)
  return _impl_.model_.Release();
}
inline void TextGenerationRequest::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.TextGenerationRequest.model)
}

// int32 max_tokens = 3;
inline void TextGenerationRequest::clear_max_tokens() {
  _impl_.max_tokens_ = 0;
}
inline int32_t TextGenerationRequest::_internal_max_tokens() const {
  return _impl_.max_tokens_;
}
inline int32_t TextGenerationRequest::max_tokens() const {
  // @@protoc_insertion_point(field_get:multimodal.TextGenerationRequest.max_tokens)
  return _internal_max_tokens();
}
inline void TextGenerationRequest::_internal_set_max_tokens(int32_t value) {
  
  _impl_.max_tokens_ = value;
}
inline void TextGenerationRequest::set_max_tokens(int32_t value) {
  _internal_set_max_tokens(value);
  // @@protoc_insertion_point(field_set:multimodal.TextGenerationRequest.max_tokens)
}

// float temperature = 4;
inline void TextGenerationRequest::clear_temperature() {
  _impl_.temperature_ = 0;
}
inline float TextGenerationRequest::_internal_temperature() const {
  return _impl_.temperature_;
}
inline float TextGenerationRequest::temperature() const {
  // @@protoc_insertion_point(field_get:multimodal.TextGenerationRequest.temperature)
  return _internal_temperature();
}
inline void TextGenerationRequest::_internal_set_temperature(float value) {
  
  _impl_.temperature_ = value;
}
inline void TextGenerationRequest::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:multimodal.TextGenerationRequest.temperature)
}

// float top_p = 5;
inline void TextGenerationRequest::clear_top_p() {
  _impl_.top_p_ = 0;
}
inline float TextGenerationRequest::_internal_top_p() const {
  return _impl_.top_p_;
}
inline float TextGenerationRequest::top_p() const {
  // @@protoc_insertion_point(field_get:multimodal.TextGenerationRequest.top_p)
  return _internal_top_p();
}
inline void TextGenerationRequest::_internal_set_top_p(float value) {
  
  _impl_.top_p_ = value;
}
inline void TextGenerationRequest::set_top_p(float value) {
  _internal_set_top_p(value);
  // @@protoc_insertion_point(field_set:multimodal.TextGenerationRequest.top_p)
}

// repeated string stop_sequences = 6;
inline int TextGenerationRequest::_internal_stop_sequences_size() const {
  return _impl_.stop_sequences_.size();
}
inline int TextGenerationRequest::stop_sequences_size() const {
  return _internal_stop_sequences_size();
}
inline void TextGenerationRequest::clear_stop_sequences() {
  _impl_.stop_sequences_.Clear();
}
inline std::string* TextGenerationRequest::add_stop_sequences() {
  std::string* _s = _internal_add_stop_sequences();
  // @@protoc_insertion_point(field_add_mutable:multimodal.TextGenerationRequest.stop_sequences)
  return _s;
}
inline const std::string& TextGenerationRequest::_internal_stop_sequences(int index) const {
  return _impl_.stop_sequences_.Get(index);
}
inline const std::string& TextGenerationRequest::stop_sequences(int index) const {
  // @@protoc_insertion_point(field_get:multimodal.TextGenerationRequest.stop_sequences)
  return _internal_stop_sequences(index);
}
inline std::string* TextGenerationRequest::mutable_stop_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:multimodal.TextGenerationRequest.stop_sequences)
  return _impl_.stop_sequences_.Mutable(index);
}
inline void TextGenerationRequest::set_stop_sequences(int index, const std::string& value) {
  _impl_.stop_sequences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:multimodal.TextGenerationRequest.stop_sequences)
}
inline void TextGenerationRequest::set_stop_sequences(int index, std::string&& value) {
  _impl_.stop_sequences_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:multimodal.TextGenerationRequest.stop_sequences)
}
inline void TextGenerationRequest::set_stop_sequences(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stop_sequences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:multimodal.TextGenerationRequest.stop_sequences)
}
inline void TextGenerationRequest::set_stop_sequences(int index, const char* value, size_t size) {
  _impl_.stop_sequences_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:multimodal.TextGenerationRequest.stop_sequences)
}
inline std::string* TextGenerationRequest::_internal_add_stop_sequences() {
  return _impl_.stop_sequences_.Add();
}
inline void TextGenerationRequest::add_stop_sequences(const std::string& value) {
  _impl_.stop_sequences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:multimodal.TextGenerationRequest.stop_sequences)
}
inline void TextGenerationRequest::add_stop_sequences(std::string&& value) {
  _impl_.stop_sequences_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:multimodal.TextGenerationRequest.stop_sequences)
}
inline void TextGenerationRequest::add_stop_sequences(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stop_sequences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:multimodal.TextGenerationRequest.stop_sequences)
}
inline void TextGenerationRequest::add_stop_sequences(const char* value, size_t size) {
  _impl_.stop_sequences_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:multimodal.TextGenerationRequest.stop_sequences)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TextGenerationRequest::stop_sequences() const {
  // @@protoc_insertion_point(field_list:multimodal.TextGenerationRequest.stop_sequences)
  return _impl_.stop_sequences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TextGenerationRequest::mutable_stop_sequences() {
  // @@protoc_insertion_point(field_mutable_list:multimodal.TextGenerationRequest.stop_sequences)
  return &_impl_.stop_sequences_;
}

// map<string, string> parameters = 7;
inline int TextGenerationRequest::_internal_parameters_size() const {
  return _impl_.parameters_.size();
}
inline int TextGenerationRequest::parameters_size() const {
  return _internal_parameters_size();
}
inline void TextGenerationRequest::clear_parameters() {
  _impl_.parameters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TextGenerationRequest::_internal_parameters() const {
  return _impl_.parameters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TextGenerationRequest::parameters() const {
  // @@protoc_insertion_point(field_map:multimodal.TextGenerationRequest.parameters)
  return _internal_parameters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TextGenerationRequest::_internal_mutable_parameters() {
  return _impl_.parameters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TextGenerationRequest::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:multimodal.TextGenerationRequest.parameters)
  return _internal_mutable_parameters();
}

// -------------------------------------------------------------------

// TextGenerationResponse

// string text = 1;
inline void TextGenerationResponse::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& TextGenerationResponse::text() const {
  // @@protoc_insertion_point(field_get:multimodal.TextGenerationResponse.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextGenerationResponse::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.TextGenerationResponse.text)
}
inline std::string* TextGenerationResponse::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:multimodal.TextGenerationResponse.text)
  return _s;
}
inline const std::string& TextGenerationResponse::_internal_text() const {
  return _impl_.text_.Get();
}
inline void TextGenerationResponse::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* TextGenerationResponse::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* TextGenerationResponse::release_text() {
  // @@protoc_insertion_point(field_release:multimodal.TextGenerationResponse.text)
  return _impl_.text_.Release();
}
inline void TextGenerationResponse::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.TextGenerationResponse.text)
}

// string model_used = 2;
inline void TextGenerationResponse::clear_model_used() {
  _impl_.model_used_.ClearToEmpty();
}
inline const std::string& TextGenerationResponse::model_used() const {
  // @@protoc_insertion_point(field_get:multimodal.TextGenerationResponse.model_used)
  return _internal_model_used();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextGenerationResponse::set_model_used(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_used_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.TextGenerationResponse.model_used)
}
inline std::string* TextGenerationResponse::mutable_model_used() {
  std::string* _s = _internal_mutable_model_used();
  // @@protoc_insertion_point(field_mutable:multimodal.TextGenerationResponse.model_used)
  return _s;
}
inline const std::string& TextGenerationResponse::_internal_model_used() const {
  return _impl_.model_used_.Get();
}
inline void TextGenerationResponse::_internal_set_model_used(const std::string& value) {
  
  _impl_.model_used_.Set(value, GetArenaForAllocation());
}
inline std::string* TextGenerationResponse::_internal_mutable_model_used() {
  
  return _impl_.model_used_.Mutable(GetArenaForAllocation());
}
inline std::string* TextGenerationResponse::release_model_used() {
  // @@protoc_insertion_point(field_release:multimodal.TextGenerationResponse.model_used)
  return _impl_.model_used_.Release();
}
inline void TextGenerationResponse::set_allocated_model_used(std::string* model_used) {
  if (model_used != nullptr) {
    
  } else {
    
  }
  _impl_.model_used_.SetAllocated(model_used, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_used_.IsDefault()) {
    _impl_.model_used_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.TextGenerationResponse.model_used)
}

// int32 tokens_generated = 3;
inline void TextGenerationResponse::clear_tokens_generated() {
  _impl_.tokens_generated_ = 0;
}
inline int32_t TextGenerationResponse::_internal_tokens_generated() const {
  return _impl_.tokens_generated_;
}
inline int32_t TextGenerationResponse::tokens_generated() const {
  // @@protoc_insertion_point(field_get:multimodal.TextGenerationResponse.tokens_generated)
  return _internal_tokens_generated();
}
inline void TextGenerationResponse::_internal_set_tokens_generated(int32_t value) {
  
  _impl_.tokens_generated_ = value;
}
inline void TextGenerationResponse::set_tokens_generated(int32_t value) {
  _internal_set_tokens_generated(value);
  // @@protoc_insertion_point(field_set:multimodal.TextGenerationResponse.tokens_generated)
}

// double processing_time = 4;
inline void TextGenerationResponse::clear_processing_time() {
  _impl_.processing_time_ = 0;
}
inline double TextGenerationResponse::_internal_processing_time() const {
  return _impl_.processing_time_;
}
inline double TextGenerationResponse::processing_time() const {
  // @@protoc_insertion_point(field_get:multimodal.TextGenerationResponse.processing_time)
  return _internal_processing_time();
}
inline void TextGenerationResponse::_internal_set_processing_time(double value) {
  
  _impl_.processing_time_ = value;
}
inline void TextGenerationResponse::set_processing_time(double value) {
  _internal_set_processing_time(value);
  // @@protoc_insertion_point(field_set:multimodal.TextGenerationResponse.processing_time)
}

// bool success = 5;
inline void TextGenerationResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool TextGenerationResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool TextGenerationResponse::success() const {
  // @@protoc_insertion_point(field_get:multimodal.TextGenerationResponse.success)
  return _internal_success();
}
inline void TextGenerationResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void TextGenerationResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:multimodal.TextGenerationResponse.success)
}

// string error = 6;
inline void TextGenerationResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& TextGenerationResponse::error() const {
  // @@protoc_insertion_point(field_get:multimodal.TextGenerationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextGenerationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.TextGenerationResponse.error)
}
inline std::string* TextGenerationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:multimodal.TextGenerationResponse.error)
  return _s;
}
inline const std::string& TextGenerationResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void TextGenerationResponse::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* TextGenerationResponse::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* TextGenerationResponse::release_error() {
  // @@protoc_insertion_point(field_release:multimodal.TextGenerationResponse.error)
  return _impl_.error_.Release();
}
inline void TextGenerationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.TextGenerationResponse.error)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ContextItem

// string id = 1;
inline void ContextItem::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ContextItem::id() const {
  // @@protoc_insertion_point(field_get:multimodal.ContextItem.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContextItem::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.ContextItem.id)
}
inline std::string* ContextItem::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:multimodal.ContextItem.id)
  return _s;
}
inline const std::string& ContextItem::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ContextItem::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ContextItem::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ContextItem::release_id() {
  // @@protoc_insertion_point(field_release:multimodal.ContextItem.id)
  return _impl_.id_.Release();
}
inline void ContextItem::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.ContextItem.id)
}

// string type = 2;
inline void ContextItem::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& ContextItem::type() const {
  // @@protoc_insertion_point(field_get:multimodal.ContextItem.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContextItem::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.ContextItem.type)
}
inline std::string* ContextItem::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:multimodal.ContextItem.type)
  return _s;
}
inline const std::string& ContextItem::_internal_type() const {
  return _impl_.type_.Get();
}
inline void ContextItem::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* ContextItem::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* ContextItem::release_type() {
  // @@protoc_insertion_point(field_release:multimodal.ContextItem.type)
  return _impl_.type_.Release();
}
inline void ContextItem::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.ContextItem.type)
}

// string title = 3;
inline void ContextItem::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ContextItem::title() const {
  // @@protoc_insertion_point(field_get:multimodal.ContextItem.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContextItem::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.ContextItem.title)
}
inline std::string* ContextItem::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:multimodal.ContextItem.title)
  return _s;
}
inline const std::string& ContextItem::_internal_title() const {
  return _impl_.title_.Get();
}
inline void ContextItem::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* ContextItem::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* ContextItem::release_title() {
  // @@protoc_insertion_point(field_release:multimodal.ContextItem.title)
  return _impl_.title_.Release();
}
inline void ContextItem::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.ContextItem.title)
}

// string content = 4;
inline void ContextItem::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ContextItem::content() const {
  // @@protoc_insertion_point(field_get:multimodal.ContextItem.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContextItem::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.ContextItem.content)
}
inline std::string* ContextItem::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:multimodal.ContextItem.content)
  return _s;
}
inline const std::string& ContextItem::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ContextItem::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ContextItem::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ContextItem::release_content() {
  // @@protoc_insertion_point(field_release:multimodal.ContextItem.content)
  return _impl_.content_.Release();
}
inline void ContextItem::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.ContextItem.content)
}

// string file_path = 5;
inline void ContextItem::clear_file_path() {
  _impl_.file_path_.ClearToEmpty();
}
inline const std::string& ContextItem::file_path() const {
  // @@protoc_insertion_point(field_get:multimodal.ContextItem.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContextItem::set_file_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.ContextItem.file_path)
}
inline std::string* ContextItem::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:multimodal.ContextItem.file_path)
  return _s;
}
inline const std::string& ContextItem::_internal_file_path() const {
  return _impl_.file_path_.Get();
}
inline void ContextItem::_internal_set_file_path(const std::string& value) {
  
  _impl_.file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ContextItem::_internal_mutable_file_path() {
  
  return _impl_.file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ContextItem::release_file_path() {
  // @@protoc_insertion_point(field_release:multimodal.ContextItem.file_path)
  return _impl_.file_path_.Release();
}
inline void ContextItem::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  _impl_.file_path_.SetAllocated(file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_path_.IsDefault()) {
    _impl_.file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.ContextItem.file_path)
}

// repeated string tags = 6;
inline int ContextItem::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int ContextItem::tags_size() const {
  return _internal_tags_size();
}
inline void ContextItem::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* ContextItem::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:multimodal.ContextItem.tags)
  return _s;
}
inline const std::string& ContextItem::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& ContextItem::tags(int index) const {
  // @@protoc_insertion_point(field_get:multimodal.ContextItem.tags)
  return _internal_tags(index);
}
inline std::string* ContextItem::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:multimodal.ContextItem.tags)
  return _impl_.tags_.Mutable(index);
}
inline void ContextItem::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:multimodal.ContextItem.tags)
}
inline void ContextItem::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:multimodal.ContextItem.tags)
}
inline void ContextItem::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:multimodal.ContextItem.tags)
}
inline void ContextItem::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:multimodal.ContextItem.tags)
}
inline std::string* ContextItem::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void ContextItem::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:multimodal.ContextItem.tags)
}
inline void ContextItem::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:multimodal.ContextItem.tags)
}
inline void ContextItem::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:multimodal.ContextItem.tags)
}
inline void ContextItem::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:multimodal.ContextItem.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ContextItem::tags() const {
  // @@protoc_insertion_point(field_list:multimodal.ContextItem.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ContextItem::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:multimodal.ContextItem.tags)
  return &_impl_.tags_;
}

// double relevance_score = 7;
inline void ContextItem::clear_relevance_score() {
  _impl_.relevance_score_ = 0;
}
inline double ContextItem::_internal_relevance_score() const {
  return _impl_.relevance_score_;
}
inline double ContextItem::relevance_score() const {
  // @@protoc_insertion_point(field_get:multimodal.ContextItem.relevance_score)
  return _internal_relevance_score();
}
inline void ContextItem::_internal_set_relevance_score(double value) {
  
  _impl_.relevance_score_ = value;
}
inline void ContextItem::set_relevance_score(double value) {
  _internal_set_relevance_score(value);
  // @@protoc_insertion_point(field_set:multimodal.ContextItem.relevance_score)
}

// int64 last_modified = 8;
inline void ContextItem::clear_last_modified() {
  _impl_.last_modified_ = int64_t{0};
}
inline int64_t ContextItem::_internal_last_modified() const {
  return _impl_.last_modified_;
}
inline int64_t ContextItem::last_modified() const {
  // @@protoc_insertion_point(field_get:multimodal.ContextItem.last_modified)
  return _internal_last_modified();
}
inline void ContextItem::_internal_set_last_modified(int64_t value) {
  
  _impl_.last_modified_ = value;
}
inline void ContextItem::set_last_modified(int64_t value) {
  _internal_set_last_modified(value);
  // @@protoc_insertion_point(field_set:multimodal.ContextItem.last_modified)
}

// map<string, string> metadata = 9;
inline int ContextItem::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int ContextItem::metadata_size() const {
  return _internal_metadata_size();
}
inline void ContextItem::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContextItem::_internal_metadata() const {
  return _impl_.metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContextItem::metadata() const {
  // @@protoc_insertion_point(field_map:multimodal.ContextItem.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContextItem::_internal_mutable_metadata() {
  return _impl_.metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContextItem::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:multimodal.ContextItem.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// LLMModelsResponse

// repeated .multimodal.LLMModelInfo models = 1;
inline int LLMModelsResponse::_internal_models_size() const {
  return _impl_.models_.size();
}
inline int LLMModelsResponse::models_size() const {
  return _internal_models_size();
}
inline void LLMModelsResponse::clear_models() {
  _impl_.models_.Clear();
}
inline ::multimodal::LLMModelInfo* LLMModelsResponse::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:multimodal.LLMModelsResponse.models)
  return _impl_.models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::LLMModelInfo >*
LLMModelsResponse::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:multimodal.LLMModelsResponse.models)
  return &_impl_.models_;
}
inline const ::multimodal::LLMModelInfo& LLMModelsResponse::_internal_models(int index) const {
  return _impl_.models_.Get(index);
}
inline const ::multimodal::LLMModelInfo& LLMModelsResponse::models(int index) const {
  // @@protoc_insertion_point(field_get:multimodal.LLMModelsResponse.models)
  return _internal_models(index);
}
inline ::multimodal::LLMModelInfo* LLMModelsResponse::_internal_add_models() {
  return _impl_.models_.Add();
}
inline ::multimodal::LLMModelInfo* LLMModelsResponse::add_models() {
  ::multimodal::LLMModelInfo* _add = _internal_add_models();
  // @@protoc_insertion_point(field_add:multimodal.LLMModelsResponse.models)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multimodal::LLMModelInfo >&
LLMModelsResponse::models() const {
  // @@protoc_insertion_point(field_list:multimodal.LLMModelsResponse.models)
  return _impl_.models_;
}

// -------------------------------------------------------------------

// LLMModelInfo

// string name = 1;
inline void LLMModelInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LLMModelInfo::name() const {
  // @@protoc_insertion_point(field_get:multimodal.LLMModelInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LLMModelInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.LLMModelInfo.name)
}
inline std::string* LLMModelInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:multimodal.LLMModelInfo.name)
  return _s;
}
inline const std::string& LLMModelInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LLMModelInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LLMModelInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LLMModelInfo::release_name() {
  // @@protoc_insertion_point(field_release:multimodal.LLMModelInfo.name)
  return _impl_.name_.Release();
}
inline void LLMModelInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.LLMModelInfo.name)
}

// string display_name = 2;
inline void LLMModelInfo::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& LLMModelInfo::display_name() const {
  // @@protoc_insertion_point(field_get:multimodal.LLMModelInfo.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LLMModelInfo::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.LLMModelInfo.display_name)
}
inline std::string* LLMModelInfo::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:multimodal.LLMModelInfo.display_name)
  return _s;
}
inline const std::string& LLMModelInfo::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void LLMModelInfo::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LLMModelInfo::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LLMModelInfo::release_display_name() {
  // @@protoc_insertion_point(field_release:multimodal.LLMModelInfo.display_name)
  return _impl_.display_name_.Release();
}
inline void LLMModelInfo::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.LLMModelInfo.display_name)
}

// string description = 3;
inline void LLMModelInfo::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& LLMModelInfo::description() const {
  // @@protoc_insertion_point(field_get:multimodal.LLMModelInfo.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LLMModelInfo::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.LLMModelInfo.description)
}
inline std::string* LLMModelInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:multimodal.LLMModelInfo.description)
  return _s;
}
inline const std::string& LLMModelInfo::_internal_description() const {
  return _impl_.description_.Get();
}
inline void LLMModelInfo::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* LLMModelInfo::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* LLMModelInfo::release_description() {
  // @@protoc_insertion_point(field_release:multimodal.LLMModelInfo.description)
  return _impl_.description_.Release();
}
inline void LLMModelInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.LLMModelInfo.description)
}

// bool available = 4;
inline void LLMModelInfo::clear_available() {
  _impl_.available_ = false;
}
inline bool LLMModelInfo::_internal_available() const {
  return _impl_.available_;
}
inline bool LLMModelInfo::available() const {
  // @@protoc_insertion_point(field_get:multimodal.LLMModelInfo.available)
  return _internal_available();
}
inline void LLMModelInfo::_internal_set_available(bool value) {
  
  _impl_.available_ = value;
}
inline void LLMModelInfo::set_available(bool value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:multimodal.LLMModelInfo.available)
}

// string provider = 5;
inline void LLMModelInfo::clear_provider() {
  _impl_.provider_.ClearToEmpty();
}
inline const std::string& LLMModelInfo::provider() const {
  // @@protoc_insertion_point(field_get:multimodal.LLMModelInfo.provider)
  return _internal_provider();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LLMModelInfo::set_provider(ArgT0&& arg0, ArgT... args) {
 
 _impl_.provider_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:multimodal.LLMModelInfo.provider)
}
inline std::string* LLMModelInfo::mutable_provider() {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:multimodal.LLMModelInfo.provider)
  return _s;
}
inline const std::string& LLMModelInfo::_internal_provider() const {
  return _impl_.provider_.Get();
}
inline void LLMModelInfo::_internal_set_provider(const std::string& value) {
  
  _impl_.provider_.Set(value, GetArenaForAllocation());
}
inline std::string* LLMModelInfo::_internal_mutable_provider() {
  
  return _impl_.provider_.Mutable(GetArenaForAllocation());
}
inline std::string* LLMModelInfo::release_provider() {
  // @@protoc_insertion_point(field_release:multimodal.LLMModelInfo.provider)
  return _impl_.provider_.Release();
}
inline void LLMModelInfo::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  _impl_.provider_.SetAllocated(provider, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.provider_.IsDefault()) {
    _impl_.provider_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:multimodal.LLMModelInfo.provider)
}

// int32 max_tokens = 6;
inline void LLMModelInfo::clear_max_tokens() {
  _impl_.max_tokens_ = 0;
}
inline int32_t LLMModelInfo::_internal_max_tokens() const {
  return _impl_.max_tokens_;
}
inline int32_t LLMModelInfo::max_tokens() const {
  // @@protoc_insertion_point(field_get:multimodal.LLMModelInfo.max_tokens)
  return _internal_max_tokens();
}
inline void LLMModelInfo::_internal_set_max_tokens(int32_t value) {
  
  _impl_.max_tokens_ = value;
}
inline void LLMModelInfo::set_max_tokens(int32_t value) {
  _internal_set_max_tokens(value);
  // @@protoc_insertion_point(field_set:multimodal.LLMModelInfo.max_tokens)
}

// repeated string capabilities = 7;
inline int LLMModelInfo::_internal_capabilities_size() const {
  return _impl_.capabilities_.size();
}
inline int LLMModelInfo::capabilities_size() const {
  return _internal_capabilities_size();
}
inline void LLMModelInfo::clear_capabilities() {
  _impl_.capabilities_.Clear();
}
inline std::string* LLMModelInfo::add_capabilities() {
  std::string* _s = _internal_add_capabilities();
  // @@protoc_insertion_point(field_add_mutable:multimodal.LLMModelInfo.capabilities)
  return _s;
}
inline const std::string& LLMModelInfo::_internal_capabilities(int index) const {
  return _impl_.capabilities_.Get(index);
}
inline const std::string& LLMModelInfo::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:multimodal.LLMModelInfo.capabilities)
  return _internal_capabilities(index);
}
inline std::string* LLMModelInfo::mutable_capabilities(int index) {
  // @@protoc_insertion_point(field_mutable:multimodal.LLMModelInfo.capabilities)
  return _impl_.capabilities_.Mutable(index);
}
inline void LLMModelInfo::set_capabilities(int index, const std::string& value) {
  _impl_.capabilities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:multimodal.LLMModelInfo.capabilities)
}
inline void LLMModelInfo::set_capabilities(int index, std::string&& value) {
  _impl_.capabilities_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:multimodal.LLMModelInfo.capabilities)
}
inline void LLMModelInfo::set_capabilities(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.capabilities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:multimodal.LLMModelInfo.capabilities)
}
inline void LLMModelInfo::set_capabilities(int index, const char* value, size_t size) {
  _impl_.capabilities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:multimodal.LLMModelInfo.capabilities)
}
inline std::string* LLMModelInfo::_internal_add_capabilities() {
  return _impl_.capabilities_.Add();
}
inline void LLMModelInfo::add_capabilities(const std::string& value) {
  _impl_.capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:multimodal.LLMModelInfo.capabilities)
}
inline void LLMModelInfo::add_capabilities(std::string&& value) {
  _impl_.capabilities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:multimodal.LLMModelInfo.capabilities)
}
inline void LLMModelInfo::add_capabilities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:multimodal.LLMModelInfo.capabilities)
}
inline void LLMModelInfo::add_capabilities(const char* value, size_t size) {
  _impl_.capabilities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:multimodal.LLMModelInfo.capabilities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LLMModelInfo::capabilities() const {
  // @@protoc_insertion_point(field_list:multimodal.LLMModelInfo.capabilities)
  return _impl_.capabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LLMModelInfo::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:multimodal.LLMModelInfo.capabilities)
  return &_impl_.capabilities_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace multimodal

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_context_5fservice_2eproto
