// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: persistence_platform.proto
#ifndef GRPC_persistence_5fplatform_2eproto__INCLUDED
#define GRPC_persistence_5fplatform_2eproto__INCLUDED

#include "persistence_platform.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace unhinged {
namespace persistence {

// ============================================================================
// Service Definition
// ============================================================================
//
class PersistencePlatformService final {
 public:
  static constexpr char const* service_full_name() {
    return "unhinged.persistence.PersistencePlatformService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // CRUD Operations
    virtual ::grpc::Status Insert(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest& request, ::unhinged::persistence::InsertResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::InsertResponse>> AsyncInsert(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::InsertResponse>>(AsyncInsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::InsertResponse>> PrepareAsyncInsert(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::InsertResponse>>(PrepareAsyncInsertRaw(context, request, cq));
    }
    virtual ::grpc::Status InsertBatch(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest& request, ::unhinged::persistence::InsertBatchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::InsertBatchResponse>> AsyncInsertBatch(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::InsertBatchResponse>>(AsyncInsertBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::InsertBatchResponse>> PrepareAsyncInsertBatch(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::InsertBatchResponse>>(PrepareAsyncInsertBatchRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest& request, ::unhinged::persistence::UpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest& request, ::unhinged::persistence::DeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::DeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::DeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::DeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::DeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    // Query Operations
    virtual ::grpc::Status ExecuteQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest& request, ::unhinged::persistence::ExecuteQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteQueryResponse>> AsyncExecuteQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteQueryResponse>>(AsyncExecuteQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteQueryResponse>> PrepareAsyncExecuteQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteQueryResponse>>(PrepareAsyncExecuteQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteRawQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest& request, ::unhinged::persistence::ExecuteRawQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteRawQueryResponse>> AsyncExecuteRawQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteRawQueryResponse>>(AsyncExecuteRawQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteRawQueryResponse>> PrepareAsyncExecuteRawQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteRawQueryResponse>>(PrepareAsyncExecuteRawQueryRaw(context, request, cq));
    }
    // Vector Operations
    virtual ::grpc::Status VectorSearch(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest& request, ::unhinged::persistence::VectorSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::VectorSearchResponse>> AsyncVectorSearch(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::VectorSearchResponse>>(AsyncVectorSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::VectorSearchResponse>> PrepareAsyncVectorSearch(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::VectorSearchResponse>>(PrepareAsyncVectorSearchRaw(context, request, cq));
    }
    // Graph Operations
    virtual ::grpc::Status GraphTraverse(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest& request, ::unhinged::persistence::GraphTraverseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GraphTraverseResponse>> AsyncGraphTraverse(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GraphTraverseResponse>>(AsyncGraphTraverseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GraphTraverseResponse>> PrepareAsyncGraphTraverse(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GraphTraverseResponse>>(PrepareAsyncGraphTraverseRaw(context, request, cq));
    }
    // Complex Operations
    virtual ::grpc::Status ExecuteOperation(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest& request, ::unhinged::persistence::ExecuteOperationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteOperationResponse>> AsyncExecuteOperation(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteOperationResponse>>(AsyncExecuteOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteOperationResponse>> PrepareAsyncExecuteOperation(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteOperationResponse>>(PrepareAsyncExecuteOperationRaw(context, request, cq));
    }
    // Platform Management
    virtual ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest& request, ::unhinged::persistence::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPlatformInfo(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest& request, ::unhinged::persistence::GetPlatformInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GetPlatformInfoResponse>> AsyncGetPlatformInfo(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GetPlatformInfoResponse>>(AsyncGetPlatformInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GetPlatformInfoResponse>> PrepareAsyncGetPlatformInfo(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GetPlatformInfoResponse>>(PrepareAsyncGetPlatformInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMetrics(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest& request, ::unhinged::persistence::GetMetricsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GetMetricsResponse>> AsyncGetMetrics(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GetMetricsResponse>>(AsyncGetMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GetMetricsResponse>> PrepareAsyncGetMetrics(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GetMetricsResponse>>(PrepareAsyncGetMetricsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // CRUD Operations
      virtual void Insert(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest* request, ::unhinged::persistence::InsertResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Insert(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest* request, ::unhinged::persistence::InsertResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InsertBatch(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest* request, ::unhinged::persistence::InsertBatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsertBatch(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest* request, ::unhinged::persistence::InsertBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest* request, ::unhinged::persistence::UpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest* request, ::unhinged::persistence::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest* request, ::unhinged::persistence::DeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest* request, ::unhinged::persistence::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Query Operations
      virtual void ExecuteQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest* request, ::unhinged::persistence::ExecuteQueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest* request, ::unhinged::persistence::ExecuteQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteRawQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest* request, ::unhinged::persistence::ExecuteRawQueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteRawQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest* request, ::unhinged::persistence::ExecuteRawQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Vector Operations
      virtual void VectorSearch(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest* request, ::unhinged::persistence::VectorSearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VectorSearch(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest* request, ::unhinged::persistence::VectorSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Graph Operations
      virtual void GraphTraverse(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest* request, ::unhinged::persistence::GraphTraverseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GraphTraverse(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest* request, ::unhinged::persistence::GraphTraverseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Complex Operations
      virtual void ExecuteOperation(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest* request, ::unhinged::persistence::ExecuteOperationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteOperation(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest* request, ::unhinged::persistence::ExecuteOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Platform Management
      virtual void HealthCheck(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest* request, ::unhinged::persistence::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest* request, ::unhinged::persistence::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPlatformInfo(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest* request, ::unhinged::persistence::GetPlatformInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPlatformInfo(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest* request, ::unhinged::persistence::GetPlatformInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMetrics(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest* request, ::unhinged::persistence::GetMetricsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMetrics(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest* request, ::unhinged::persistence::GetMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::InsertResponse>* AsyncInsertRaw(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::InsertResponse>* PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::InsertBatchResponse>* AsyncInsertBatchRaw(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::InsertBatchResponse>* PrepareAsyncInsertBatchRaw(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::DeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::DeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteQueryResponse>* AsyncExecuteQueryRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteQueryResponse>* PrepareAsyncExecuteQueryRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteRawQueryResponse>* AsyncExecuteRawQueryRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteRawQueryResponse>* PrepareAsyncExecuteRawQueryRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::VectorSearchResponse>* AsyncVectorSearchRaw(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::VectorSearchResponse>* PrepareAsyncVectorSearchRaw(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GraphTraverseResponse>* AsyncGraphTraverseRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GraphTraverseResponse>* PrepareAsyncGraphTraverseRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteOperationResponse>* AsyncExecuteOperationRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::ExecuteOperationResponse>* PrepareAsyncExecuteOperationRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GetPlatformInfoResponse>* AsyncGetPlatformInfoRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GetPlatformInfoResponse>* PrepareAsyncGetPlatformInfoRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GetMetricsResponse>* AsyncGetMetricsRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::persistence::GetMetricsResponse>* PrepareAsyncGetMetricsRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Insert(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest& request, ::unhinged::persistence::InsertResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertResponse>> AsyncInsert(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertResponse>>(AsyncInsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertResponse>> PrepareAsyncInsert(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertResponse>>(PrepareAsyncInsertRaw(context, request, cq));
    }
    ::grpc::Status InsertBatch(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest& request, ::unhinged::persistence::InsertBatchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertBatchResponse>> AsyncInsertBatch(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertBatchResponse>>(AsyncInsertBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertBatchResponse>> PrepareAsyncInsertBatch(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertBatchResponse>>(PrepareAsyncInsertBatchRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest& request, ::unhinged::persistence::UpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest& request, ::unhinged::persistence::DeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::DeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::DeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::DeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::DeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status ExecuteQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest& request, ::unhinged::persistence::ExecuteQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteQueryResponse>> AsyncExecuteQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteQueryResponse>>(AsyncExecuteQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteQueryResponse>> PrepareAsyncExecuteQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteQueryResponse>>(PrepareAsyncExecuteQueryRaw(context, request, cq));
    }
    ::grpc::Status ExecuteRawQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest& request, ::unhinged::persistence::ExecuteRawQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteRawQueryResponse>> AsyncExecuteRawQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteRawQueryResponse>>(AsyncExecuteRawQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteRawQueryResponse>> PrepareAsyncExecuteRawQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteRawQueryResponse>>(PrepareAsyncExecuteRawQueryRaw(context, request, cq));
    }
    ::grpc::Status VectorSearch(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest& request, ::unhinged::persistence::VectorSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::VectorSearchResponse>> AsyncVectorSearch(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::VectorSearchResponse>>(AsyncVectorSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::VectorSearchResponse>> PrepareAsyncVectorSearch(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::VectorSearchResponse>>(PrepareAsyncVectorSearchRaw(context, request, cq));
    }
    ::grpc::Status GraphTraverse(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest& request, ::unhinged::persistence::GraphTraverseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GraphTraverseResponse>> AsyncGraphTraverse(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GraphTraverseResponse>>(AsyncGraphTraverseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GraphTraverseResponse>> PrepareAsyncGraphTraverse(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GraphTraverseResponse>>(PrepareAsyncGraphTraverseRaw(context, request, cq));
    }
    ::grpc::Status ExecuteOperation(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest& request, ::unhinged::persistence::ExecuteOperationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteOperationResponse>> AsyncExecuteOperation(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteOperationResponse>>(AsyncExecuteOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteOperationResponse>> PrepareAsyncExecuteOperation(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteOperationResponse>>(PrepareAsyncExecuteOperationRaw(context, request, cq));
    }
    ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest& request, ::unhinged::persistence::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    ::grpc::Status GetPlatformInfo(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest& request, ::unhinged::persistence::GetPlatformInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetPlatformInfoResponse>> AsyncGetPlatformInfo(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetPlatformInfoResponse>>(AsyncGetPlatformInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetPlatformInfoResponse>> PrepareAsyncGetPlatformInfo(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetPlatformInfoResponse>>(PrepareAsyncGetPlatformInfoRaw(context, request, cq));
    }
    ::grpc::Status GetMetrics(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest& request, ::unhinged::persistence::GetMetricsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetMetricsResponse>> AsyncGetMetrics(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetMetricsResponse>>(AsyncGetMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetMetricsResponse>> PrepareAsyncGetMetrics(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetMetricsResponse>>(PrepareAsyncGetMetricsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Insert(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest* request, ::unhinged::persistence::InsertResponse* response, std::function<void(::grpc::Status)>) override;
      void Insert(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest* request, ::unhinged::persistence::InsertResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InsertBatch(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest* request, ::unhinged::persistence::InsertBatchResponse* response, std::function<void(::grpc::Status)>) override;
      void InsertBatch(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest* request, ::unhinged::persistence::InsertBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Update(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest* request, ::unhinged::persistence::UpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest* request, ::unhinged::persistence::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest* request, ::unhinged::persistence::DeleteResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest* request, ::unhinged::persistence::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest* request, ::unhinged::persistence::ExecuteQueryResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest* request, ::unhinged::persistence::ExecuteQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteRawQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest* request, ::unhinged::persistence::ExecuteRawQueryResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteRawQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest* request, ::unhinged::persistence::ExecuteRawQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VectorSearch(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest* request, ::unhinged::persistence::VectorSearchResponse* response, std::function<void(::grpc::Status)>) override;
      void VectorSearch(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest* request, ::unhinged::persistence::VectorSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GraphTraverse(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest* request, ::unhinged::persistence::GraphTraverseResponse* response, std::function<void(::grpc::Status)>) override;
      void GraphTraverse(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest* request, ::unhinged::persistence::GraphTraverseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteOperation(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest* request, ::unhinged::persistence::ExecuteOperationResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteOperation(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest* request, ::unhinged::persistence::ExecuteOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HealthCheck(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest* request, ::unhinged::persistence::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void HealthCheck(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest* request, ::unhinged::persistence::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPlatformInfo(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest* request, ::unhinged::persistence::GetPlatformInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPlatformInfo(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest* request, ::unhinged::persistence::GetPlatformInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMetrics(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest* request, ::unhinged::persistence::GetMetricsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMetrics(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest* request, ::unhinged::persistence::GetMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertResponse>* AsyncInsertRaw(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertResponse>* PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertBatchResponse>* AsyncInsertBatchRaw(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertBatchResponse>* PrepareAsyncInsertBatchRaw(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::DeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::DeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteQueryResponse>* AsyncExecuteQueryRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteQueryResponse>* PrepareAsyncExecuteQueryRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteRawQueryResponse>* AsyncExecuteRawQueryRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteRawQueryResponse>* PrepareAsyncExecuteRawQueryRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::VectorSearchResponse>* AsyncVectorSearchRaw(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::VectorSearchResponse>* PrepareAsyncVectorSearchRaw(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GraphTraverseResponse>* AsyncGraphTraverseRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GraphTraverseResponse>* PrepareAsyncGraphTraverseRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteOperationResponse>* AsyncExecuteOperationRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteOperationResponse>* PrepareAsyncExecuteOperationRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetPlatformInfoResponse>* AsyncGetPlatformInfoRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetPlatformInfoResponse>* PrepareAsyncGetPlatformInfoRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetMetricsResponse>* AsyncGetMetricsRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetMetricsResponse>* PrepareAsyncGetMetricsRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Insert_;
    const ::grpc::internal::RpcMethod rpcmethod_InsertBatch_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteRawQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_VectorSearch_;
    const ::grpc::internal::RpcMethod rpcmethod_GraphTraverse_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteOperation_;
    const ::grpc::internal::RpcMethod rpcmethod_HealthCheck_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPlatformInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMetrics_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // CRUD Operations
    virtual ::grpc::Status Insert(::grpc::ServerContext* context, const ::unhinged::persistence::InsertRequest* request, ::unhinged::persistence::InsertResponse* response);
    virtual ::grpc::Status InsertBatch(::grpc::ServerContext* context, const ::unhinged::persistence::InsertBatchRequest* request, ::unhinged::persistence::InsertBatchResponse* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::unhinged::persistence::UpdateRequest* request, ::unhinged::persistence::UpdateResponse* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::unhinged::persistence::DeleteRequest* request, ::unhinged::persistence::DeleteResponse* response);
    // Query Operations
    virtual ::grpc::Status ExecuteQuery(::grpc::ServerContext* context, const ::unhinged::persistence::ExecuteQueryRequest* request, ::unhinged::persistence::ExecuteQueryResponse* response);
    virtual ::grpc::Status ExecuteRawQuery(::grpc::ServerContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest* request, ::unhinged::persistence::ExecuteRawQueryResponse* response);
    // Vector Operations
    virtual ::grpc::Status VectorSearch(::grpc::ServerContext* context, const ::unhinged::persistence::VectorSearchRequest* request, ::unhinged::persistence::VectorSearchResponse* response);
    // Graph Operations
    virtual ::grpc::Status GraphTraverse(::grpc::ServerContext* context, const ::unhinged::persistence::GraphTraverseRequest* request, ::unhinged::persistence::GraphTraverseResponse* response);
    // Complex Operations
    virtual ::grpc::Status ExecuteOperation(::grpc::ServerContext* context, const ::unhinged::persistence::ExecuteOperationRequest* request, ::unhinged::persistence::ExecuteOperationResponse* response);
    // Platform Management
    virtual ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::unhinged::persistence::HealthCheckRequest* request, ::unhinged::persistence::HealthCheckResponse* response);
    virtual ::grpc::Status GetPlatformInfo(::grpc::ServerContext* context, const ::unhinged::persistence::GetPlatformInfoRequest* request, ::unhinged::persistence::GetPlatformInfoResponse* response);
    virtual ::grpc::Status GetMetrics(::grpc::ServerContext* context, const ::unhinged::persistence::GetMetricsRequest* request, ::unhinged::persistence::GetMetricsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Insert() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::InsertRequest* /*request*/, ::unhinged::persistence::InsertResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsert(::grpc::ServerContext* context, ::unhinged::persistence::InsertRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::persistence::InsertResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InsertBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsertBatch() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_InsertBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBatch(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::InsertBatchRequest* /*request*/, ::unhinged::persistence::InsertBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertBatch(::grpc::ServerContext* context, ::unhinged::persistence::InsertBatchRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::persistence::InsertBatchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::UpdateRequest* /*request*/, ::unhinged::persistence::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::unhinged::persistence::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::persistence::UpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::DeleteRequest* /*request*/, ::unhinged::persistence::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::unhinged::persistence::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::persistence::DeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteQuery() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ExecuteQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteQuery(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteQueryRequest* /*request*/, ::unhinged::persistence::ExecuteQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteQuery(::grpc::ServerContext* context, ::unhinged::persistence::ExecuteQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::persistence::ExecuteQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteRawQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteRawQuery() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ExecuteRawQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteRawQuery(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteRawQueryRequest* /*request*/, ::unhinged::persistence::ExecuteRawQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteRawQuery(::grpc::ServerContext* context, ::unhinged::persistence::ExecuteRawQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::persistence::ExecuteRawQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VectorSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VectorSearch() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_VectorSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorSearch(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::VectorSearchRequest* /*request*/, ::unhinged::persistence::VectorSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVectorSearch(::grpc::ServerContext* context, ::unhinged::persistence::VectorSearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::persistence::VectorSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GraphTraverse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GraphTraverse() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GraphTraverse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GraphTraverse(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GraphTraverseRequest* /*request*/, ::unhinged::persistence::GraphTraverseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGraphTraverse(::grpc::ServerContext* context, ::unhinged::persistence::GraphTraverseRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::persistence::GraphTraverseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteOperation() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ExecuteOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteOperation(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteOperationRequest* /*request*/, ::unhinged::persistence::ExecuteOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteOperation(::grpc::ServerContext* context, ::unhinged::persistence::ExecuteOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::persistence::ExecuteOperationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HealthCheck() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::HealthCheckRequest* /*request*/, ::unhinged::persistence::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::unhinged::persistence::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::persistence::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPlatformInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPlatformInfo() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetPlatformInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlatformInfo(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GetPlatformInfoRequest* /*request*/, ::unhinged::persistence::GetPlatformInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPlatformInfo(::grpc::ServerContext* context, ::unhinged::persistence::GetPlatformInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::persistence::GetPlatformInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMetrics() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GetMetricsRequest* /*request*/, ::unhinged::persistence::GetMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetrics(::grpc::ServerContext* context, ::unhinged::persistence::GetMetricsRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::persistence::GetMetricsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Insert<WithAsyncMethod_InsertBatch<WithAsyncMethod_Update<WithAsyncMethod_Delete<WithAsyncMethod_ExecuteQuery<WithAsyncMethod_ExecuteRawQuery<WithAsyncMethod_VectorSearch<WithAsyncMethod_GraphTraverse<WithAsyncMethod_ExecuteOperation<WithAsyncMethod_HealthCheck<WithAsyncMethod_GetPlatformInfo<WithAsyncMethod_GetMetrics<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Insert() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::InsertRequest, ::unhinged::persistence::InsertResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::persistence::InsertRequest* request, ::unhinged::persistence::InsertResponse* response) { return this->Insert(context, request, response); }));}
    void SetMessageAllocatorFor_Insert(
        ::grpc::MessageAllocator< ::unhinged::persistence::InsertRequest, ::unhinged::persistence::InsertResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::InsertRequest, ::unhinged::persistence::InsertResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::InsertRequest* /*request*/, ::unhinged::persistence::InsertResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Insert(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::persistence::InsertRequest* /*request*/, ::unhinged::persistence::InsertResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InsertBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InsertBatch() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::InsertBatchRequest, ::unhinged::persistence::InsertBatchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::persistence::InsertBatchRequest* request, ::unhinged::persistence::InsertBatchResponse* response) { return this->InsertBatch(context, request, response); }));}
    void SetMessageAllocatorFor_InsertBatch(
        ::grpc::MessageAllocator< ::unhinged::persistence::InsertBatchRequest, ::unhinged::persistence::InsertBatchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::InsertBatchRequest, ::unhinged::persistence::InsertBatchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InsertBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBatch(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::InsertBatchRequest* /*request*/, ::unhinged::persistence::InsertBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::persistence::InsertBatchRequest* /*request*/, ::unhinged::persistence::InsertBatchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Update() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::UpdateRequest, ::unhinged::persistence::UpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::persistence::UpdateRequest* request, ::unhinged::persistence::UpdateResponse* response) { return this->Update(context, request, response); }));}
    void SetMessageAllocatorFor_Update(
        ::grpc::MessageAllocator< ::unhinged::persistence::UpdateRequest, ::unhinged::persistence::UpdateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::UpdateRequest, ::unhinged::persistence::UpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::UpdateRequest* /*request*/, ::unhinged::persistence::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::persistence::UpdateRequest* /*request*/, ::unhinged::persistence::UpdateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::DeleteRequest, ::unhinged::persistence::DeleteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::persistence::DeleteRequest* request, ::unhinged::persistence::DeleteResponse* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::MessageAllocator< ::unhinged::persistence::DeleteRequest, ::unhinged::persistence::DeleteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::DeleteRequest, ::unhinged::persistence::DeleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::DeleteRequest* /*request*/, ::unhinged::persistence::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::persistence::DeleteRequest* /*request*/, ::unhinged::persistence::DeleteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteQuery() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::ExecuteQueryRequest, ::unhinged::persistence::ExecuteQueryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::persistence::ExecuteQueryRequest* request, ::unhinged::persistence::ExecuteQueryResponse* response) { return this->ExecuteQuery(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteQuery(
        ::grpc::MessageAllocator< ::unhinged::persistence::ExecuteQueryRequest, ::unhinged::persistence::ExecuteQueryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::ExecuteQueryRequest, ::unhinged::persistence::ExecuteQueryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteQuery(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteQueryRequest* /*request*/, ::unhinged::persistence::ExecuteQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::persistence::ExecuteQueryRequest* /*request*/, ::unhinged::persistence::ExecuteQueryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteRawQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteRawQuery() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::ExecuteRawQueryRequest, ::unhinged::persistence::ExecuteRawQueryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest* request, ::unhinged::persistence::ExecuteRawQueryResponse* response) { return this->ExecuteRawQuery(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteRawQuery(
        ::grpc::MessageAllocator< ::unhinged::persistence::ExecuteRawQueryRequest, ::unhinged::persistence::ExecuteRawQueryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::ExecuteRawQueryRequest, ::unhinged::persistence::ExecuteRawQueryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteRawQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteRawQuery(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteRawQueryRequest* /*request*/, ::unhinged::persistence::ExecuteRawQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteRawQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::persistence::ExecuteRawQueryRequest* /*request*/, ::unhinged::persistence::ExecuteRawQueryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VectorSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VectorSearch() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::VectorSearchRequest, ::unhinged::persistence::VectorSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::persistence::VectorSearchRequest* request, ::unhinged::persistence::VectorSearchResponse* response) { return this->VectorSearch(context, request, response); }));}
    void SetMessageAllocatorFor_VectorSearch(
        ::grpc::MessageAllocator< ::unhinged::persistence::VectorSearchRequest, ::unhinged::persistence::VectorSearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::VectorSearchRequest, ::unhinged::persistence::VectorSearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VectorSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorSearch(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::VectorSearchRequest* /*request*/, ::unhinged::persistence::VectorSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VectorSearch(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::persistence::VectorSearchRequest* /*request*/, ::unhinged::persistence::VectorSearchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GraphTraverse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GraphTraverse() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::GraphTraverseRequest, ::unhinged::persistence::GraphTraverseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::persistence::GraphTraverseRequest* request, ::unhinged::persistence::GraphTraverseResponse* response) { return this->GraphTraverse(context, request, response); }));}
    void SetMessageAllocatorFor_GraphTraverse(
        ::grpc::MessageAllocator< ::unhinged::persistence::GraphTraverseRequest, ::unhinged::persistence::GraphTraverseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::GraphTraverseRequest, ::unhinged::persistence::GraphTraverseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GraphTraverse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GraphTraverse(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GraphTraverseRequest* /*request*/, ::unhinged::persistence::GraphTraverseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GraphTraverse(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::persistence::GraphTraverseRequest* /*request*/, ::unhinged::persistence::GraphTraverseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteOperation() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::ExecuteOperationRequest, ::unhinged::persistence::ExecuteOperationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::persistence::ExecuteOperationRequest* request, ::unhinged::persistence::ExecuteOperationResponse* response) { return this->ExecuteOperation(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteOperation(
        ::grpc::MessageAllocator< ::unhinged::persistence::ExecuteOperationRequest, ::unhinged::persistence::ExecuteOperationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::ExecuteOperationRequest, ::unhinged::persistence::ExecuteOperationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteOperation(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteOperationRequest* /*request*/, ::unhinged::persistence::ExecuteOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::persistence::ExecuteOperationRequest* /*request*/, ::unhinged::persistence::ExecuteOperationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::HealthCheckRequest, ::unhinged::persistence::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::persistence::HealthCheckRequest* request, ::unhinged::persistence::HealthCheckResponse* response) { return this->HealthCheck(context, request, response); }));}
    void SetMessageAllocatorFor_HealthCheck(
        ::grpc::MessageAllocator< ::unhinged::persistence::HealthCheckRequest, ::unhinged::persistence::HealthCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::HealthCheckRequest, ::unhinged::persistence::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::HealthCheckRequest* /*request*/, ::unhinged::persistence::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::persistence::HealthCheckRequest* /*request*/, ::unhinged::persistence::HealthCheckResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPlatformInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPlatformInfo() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::GetPlatformInfoRequest, ::unhinged::persistence::GetPlatformInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::persistence::GetPlatformInfoRequest* request, ::unhinged::persistence::GetPlatformInfoResponse* response) { return this->GetPlatformInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetPlatformInfo(
        ::grpc::MessageAllocator< ::unhinged::persistence::GetPlatformInfoRequest, ::unhinged::persistence::GetPlatformInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::GetPlatformInfoRequest, ::unhinged::persistence::GetPlatformInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPlatformInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlatformInfo(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GetPlatformInfoRequest* /*request*/, ::unhinged::persistence::GetPlatformInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPlatformInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::persistence::GetPlatformInfoRequest* /*request*/, ::unhinged::persistence::GetPlatformInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMetrics() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::GetMetricsRequest, ::unhinged::persistence::GetMetricsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::persistence::GetMetricsRequest* request, ::unhinged::persistence::GetMetricsResponse* response) { return this->GetMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_GetMetrics(
        ::grpc::MessageAllocator< ::unhinged::persistence::GetMetricsRequest, ::unhinged::persistence::GetMetricsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::persistence::GetMetricsRequest, ::unhinged::persistence::GetMetricsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GetMetricsRequest* /*request*/, ::unhinged::persistence::GetMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::persistence::GetMetricsRequest* /*request*/, ::unhinged::persistence::GetMetricsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Insert<WithCallbackMethod_InsertBatch<WithCallbackMethod_Update<WithCallbackMethod_Delete<WithCallbackMethod_ExecuteQuery<WithCallbackMethod_ExecuteRawQuery<WithCallbackMethod_VectorSearch<WithCallbackMethod_GraphTraverse<WithCallbackMethod_ExecuteOperation<WithCallbackMethod_HealthCheck<WithCallbackMethod_GetPlatformInfo<WithCallbackMethod_GetMetrics<Service > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Insert() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::InsertRequest* /*request*/, ::unhinged::persistence::InsertResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InsertBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsertBatch() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_InsertBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBatch(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::InsertBatchRequest* /*request*/, ::unhinged::persistence::InsertBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::UpdateRequest* /*request*/, ::unhinged::persistence::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::DeleteRequest* /*request*/, ::unhinged::persistence::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteQuery() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ExecuteQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteQuery(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteQueryRequest* /*request*/, ::unhinged::persistence::ExecuteQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteRawQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteRawQuery() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ExecuteRawQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteRawQuery(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteRawQueryRequest* /*request*/, ::unhinged::persistence::ExecuteRawQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VectorSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VectorSearch() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_VectorSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorSearch(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::VectorSearchRequest* /*request*/, ::unhinged::persistence::VectorSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GraphTraverse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GraphTraverse() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GraphTraverse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GraphTraverse(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GraphTraverseRequest* /*request*/, ::unhinged::persistence::GraphTraverseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteOperation() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ExecuteOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteOperation(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteOperationRequest* /*request*/, ::unhinged::persistence::ExecuteOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HealthCheck() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::HealthCheckRequest* /*request*/, ::unhinged::persistence::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPlatformInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPlatformInfo() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetPlatformInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlatformInfo(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GetPlatformInfoRequest* /*request*/, ::unhinged::persistence::GetPlatformInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMetrics() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GetMetricsRequest* /*request*/, ::unhinged::persistence::GetMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Insert() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::InsertRequest* /*request*/, ::unhinged::persistence::InsertResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsert(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsertBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsertBatch() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_InsertBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBatch(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::InsertBatchRequest* /*request*/, ::unhinged::persistence::InsertBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertBatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::UpdateRequest* /*request*/, ::unhinged::persistence::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::DeleteRequest* /*request*/, ::unhinged::persistence::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteQuery() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ExecuteQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteQuery(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteQueryRequest* /*request*/, ::unhinged::persistence::ExecuteQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteRawQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteRawQuery() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ExecuteRawQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteRawQuery(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteRawQueryRequest* /*request*/, ::unhinged::persistence::ExecuteRawQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteRawQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VectorSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VectorSearch() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_VectorSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorSearch(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::VectorSearchRequest* /*request*/, ::unhinged::persistence::VectorSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVectorSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GraphTraverse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GraphTraverse() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GraphTraverse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GraphTraverse(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GraphTraverseRequest* /*request*/, ::unhinged::persistence::GraphTraverseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGraphTraverse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteOperation() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ExecuteOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteOperation(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteOperationRequest* /*request*/, ::unhinged::persistence::ExecuteOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteOperation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::HealthCheckRequest* /*request*/, ::unhinged::persistence::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPlatformInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPlatformInfo() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetPlatformInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlatformInfo(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GetPlatformInfoRequest* /*request*/, ::unhinged::persistence::GetPlatformInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPlatformInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMetrics() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GetMetricsRequest* /*request*/, ::unhinged::persistence::GetMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Insert() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Insert(context, request, response); }));
    }
    ~WithRawCallbackMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::InsertRequest* /*request*/, ::unhinged::persistence::InsertResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Insert(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InsertBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InsertBatch() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsertBatch(context, request, response); }));
    }
    ~WithRawCallbackMethod_InsertBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBatch(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::InsertBatchRequest* /*request*/, ::unhinged::persistence::InsertBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Update() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Update(context, request, response); }));
    }
    ~WithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::UpdateRequest* /*request*/, ::unhinged::persistence::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::DeleteRequest* /*request*/, ::unhinged::persistence::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteQuery() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteQuery(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteQuery(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteQueryRequest* /*request*/, ::unhinged::persistence::ExecuteQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteRawQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteRawQuery() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteRawQuery(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteRawQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteRawQuery(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteRawQueryRequest* /*request*/, ::unhinged::persistence::ExecuteRawQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteRawQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VectorSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VectorSearch() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VectorSearch(context, request, response); }));
    }
    ~WithRawCallbackMethod_VectorSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorSearch(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::VectorSearchRequest* /*request*/, ::unhinged::persistence::VectorSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VectorSearch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GraphTraverse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GraphTraverse() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GraphTraverse(context, request, response); }));
    }
    ~WithRawCallbackMethod_GraphTraverse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GraphTraverse(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GraphTraverseRequest* /*request*/, ::unhinged::persistence::GraphTraverseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GraphTraverse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteOperation() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteOperation(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteOperation(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteOperationRequest* /*request*/, ::unhinged::persistence::ExecuteOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HealthCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::HealthCheckRequest* /*request*/, ::unhinged::persistence::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPlatformInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPlatformInfo() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPlatformInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPlatformInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlatformInfo(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GetPlatformInfoRequest* /*request*/, ::unhinged::persistence::GetPlatformInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPlatformInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMetrics() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMetrics(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GetMetricsRequest* /*request*/, ::unhinged::persistence::GetMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Insert() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::persistence::InsertRequest, ::unhinged::persistence::InsertResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::persistence::InsertRequest, ::unhinged::persistence::InsertResponse>* streamer) {
                       return this->StreamedInsert(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::InsertRequest* /*request*/, ::unhinged::persistence::InsertResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsert(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::persistence::InsertRequest,::unhinged::persistence::InsertResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsertBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsertBatch() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::persistence::InsertBatchRequest, ::unhinged::persistence::InsertBatchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::persistence::InsertBatchRequest, ::unhinged::persistence::InsertBatchResponse>* streamer) {
                       return this->StreamedInsertBatch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsertBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsertBatch(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::InsertBatchRequest* /*request*/, ::unhinged::persistence::InsertBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsertBatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::persistence::InsertBatchRequest,::unhinged::persistence::InsertBatchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::persistence::UpdateRequest, ::unhinged::persistence::UpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::persistence::UpdateRequest, ::unhinged::persistence::UpdateResponse>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::UpdateRequest* /*request*/, ::unhinged::persistence::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::persistence::UpdateRequest,::unhinged::persistence::UpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::persistence::DeleteRequest, ::unhinged::persistence::DeleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::persistence::DeleteRequest, ::unhinged::persistence::DeleteResponse>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::DeleteRequest* /*request*/, ::unhinged::persistence::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::persistence::DeleteRequest,::unhinged::persistence::DeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteQuery() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::persistence::ExecuteQueryRequest, ::unhinged::persistence::ExecuteQueryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::persistence::ExecuteQueryRequest, ::unhinged::persistence::ExecuteQueryResponse>* streamer) {
                       return this->StreamedExecuteQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteQuery(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteQueryRequest* /*request*/, ::unhinged::persistence::ExecuteQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::persistence::ExecuteQueryRequest,::unhinged::persistence::ExecuteQueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteRawQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteRawQuery() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::persistence::ExecuteRawQueryRequest, ::unhinged::persistence::ExecuteRawQueryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::persistence::ExecuteRawQueryRequest, ::unhinged::persistence::ExecuteRawQueryResponse>* streamer) {
                       return this->StreamedExecuteRawQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteRawQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteRawQuery(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteRawQueryRequest* /*request*/, ::unhinged::persistence::ExecuteRawQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteRawQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::persistence::ExecuteRawQueryRequest,::unhinged::persistence::ExecuteRawQueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VectorSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VectorSearch() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::persistence::VectorSearchRequest, ::unhinged::persistence::VectorSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::persistence::VectorSearchRequest, ::unhinged::persistence::VectorSearchResponse>* streamer) {
                       return this->StreamedVectorSearch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VectorSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VectorSearch(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::VectorSearchRequest* /*request*/, ::unhinged::persistence::VectorSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVectorSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::persistence::VectorSearchRequest,::unhinged::persistence::VectorSearchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GraphTraverse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GraphTraverse() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::persistence::GraphTraverseRequest, ::unhinged::persistence::GraphTraverseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::persistence::GraphTraverseRequest, ::unhinged::persistence::GraphTraverseResponse>* streamer) {
                       return this->StreamedGraphTraverse(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GraphTraverse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GraphTraverse(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GraphTraverseRequest* /*request*/, ::unhinged::persistence::GraphTraverseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGraphTraverse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::persistence::GraphTraverseRequest,::unhinged::persistence::GraphTraverseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteOperation() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::persistence::ExecuteOperationRequest, ::unhinged::persistence::ExecuteOperationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::persistence::ExecuteOperationRequest, ::unhinged::persistence::ExecuteOperationResponse>* streamer) {
                       return this->StreamedExecuteOperation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteOperation(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::ExecuteOperationRequest* /*request*/, ::unhinged::persistence::ExecuteOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteOperation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::persistence::ExecuteOperationRequest,::unhinged::persistence::ExecuteOperationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HealthCheck() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::persistence::HealthCheckRequest, ::unhinged::persistence::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::persistence::HealthCheckRequest, ::unhinged::persistence::HealthCheckResponse>* streamer) {
                       return this->StreamedHealthCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::HealthCheckRequest* /*request*/, ::unhinged::persistence::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::persistence::HealthCheckRequest,::unhinged::persistence::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPlatformInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPlatformInfo() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::persistence::GetPlatformInfoRequest, ::unhinged::persistence::GetPlatformInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::persistence::GetPlatformInfoRequest, ::unhinged::persistence::GetPlatformInfoResponse>* streamer) {
                       return this->StreamedGetPlatformInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPlatformInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPlatformInfo(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GetPlatformInfoRequest* /*request*/, ::unhinged::persistence::GetPlatformInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPlatformInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::persistence::GetPlatformInfoRequest,::unhinged::persistence::GetPlatformInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMetrics() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::persistence::GetMetricsRequest, ::unhinged::persistence::GetMetricsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::persistence::GetMetricsRequest, ::unhinged::persistence::GetMetricsResponse>* streamer) {
                       return this->StreamedGetMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::unhinged::persistence::GetMetricsRequest* /*request*/, ::unhinged::persistence::GetMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::persistence::GetMetricsRequest,::unhinged::persistence::GetMetricsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Insert<WithStreamedUnaryMethod_InsertBatch<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_ExecuteQuery<WithStreamedUnaryMethod_ExecuteRawQuery<WithStreamedUnaryMethod_VectorSearch<WithStreamedUnaryMethod_GraphTraverse<WithStreamedUnaryMethod_ExecuteOperation<WithStreamedUnaryMethod_HealthCheck<WithStreamedUnaryMethod_GetPlatformInfo<WithStreamedUnaryMethod_GetMetrics<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Insert<WithStreamedUnaryMethod_InsertBatch<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_ExecuteQuery<WithStreamedUnaryMethod_ExecuteRawQuery<WithStreamedUnaryMethod_VectorSearch<WithStreamedUnaryMethod_GraphTraverse<WithStreamedUnaryMethod_ExecuteOperation<WithStreamedUnaryMethod_HealthCheck<WithStreamedUnaryMethod_GetPlatformInfo<WithStreamedUnaryMethod_GetMetrics<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace persistence
}  // namespace unhinged


#endif  // GRPC_persistence_5fplatform_2eproto__INCLUDED
