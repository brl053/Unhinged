// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messaging.proto
#ifndef GRPC_messaging_2eproto__INCLUDED
#define GRPC_messaging_2eproto__INCLUDED

#include "messaging.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace unhinged {
namespace messaging {

// ============================================================================
// Service Definition
// ============================================================================
//
class MessagingService final {
 public:
  static constexpr char const* service_full_name() {
    return "unhinged.messaging.MessagingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Message sending
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest& request, ::unhinged::messaging::SendMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status SendMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest& request, ::unhinged::messaging::SendMessagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::SendMessagesResponse>> AsyncSendMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::SendMessagesResponse>>(AsyncSendMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::SendMessagesResponse>> PrepareAsyncSendMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::SendMessagesResponse>>(PrepareAsyncSendMessagesRaw(context, request, cq));
    }
    // Message receiving (polling)
    virtual ::grpc::Status ReceiveMessages(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest& request, ::unhinged::messaging::ReceiveMessagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::ReceiveMessagesResponse>> AsyncReceiveMessages(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::ReceiveMessagesResponse>>(AsyncReceiveMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::ReceiveMessagesResponse>> PrepareAsyncReceiveMessages(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::ReceiveMessagesResponse>>(PrepareAsyncReceiveMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status AcknowledgeMessage(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest& request, ::unhinged::messaging::AcknowledgeMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::AcknowledgeMessageResponse>> AsyncAcknowledgeMessage(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::AcknowledgeMessageResponse>>(AsyncAcknowledgeMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::AcknowledgeMessageResponse>> PrepareAsyncAcknowledgeMessage(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::AcknowledgeMessageResponse>>(PrepareAsyncAcknowledgeMessageRaw(context, request, cq));
    }
    // Message streaming
    std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::messaging::MessageStreamResponse>> SubscribeToMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::unhinged::messaging::MessageStreamResponse>>(SubscribeToMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::messaging::MessageStreamResponse>> AsyncSubscribeToMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::messaging::MessageStreamResponse>>(AsyncSubscribeToMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::messaging::MessageStreamResponse>> PrepareAsyncSubscribeToMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::unhinged::messaging::MessageStreamResponse>>(PrepareAsyncSubscribeToMessagesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Message sending
      virtual void SendMessage(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest* request, ::unhinged::messaging::SendMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest* request, ::unhinged::messaging::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest* request, ::unhinged::messaging::SendMessagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest* request, ::unhinged::messaging::SendMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Message receiving (polling)
      virtual void ReceiveMessages(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest* request, ::unhinged::messaging::ReceiveMessagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReceiveMessages(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest* request, ::unhinged::messaging::ReceiveMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AcknowledgeMessage(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest* request, ::unhinged::messaging::AcknowledgeMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AcknowledgeMessage(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest* request, ::unhinged::messaging::AcknowledgeMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Message streaming
      virtual void SubscribeToMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest* request, ::grpc::ClientReadReactor< ::unhinged::messaging::MessageStreamResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::SendMessagesResponse>* AsyncSendMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::SendMessagesResponse>* PrepareAsyncSendMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::ReceiveMessagesResponse>* AsyncReceiveMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::ReceiveMessagesResponse>* PrepareAsyncReceiveMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::AcknowledgeMessageResponse>* AsyncAcknowledgeMessageRaw(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::unhinged::messaging::AcknowledgeMessageResponse>* PrepareAsyncAcknowledgeMessageRaw(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::unhinged::messaging::MessageStreamResponse>* SubscribeToMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::messaging::MessageStreamResponse>* AsyncSubscribeToMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::unhinged::messaging::MessageStreamResponse>* PrepareAsyncSubscribeToMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest& request, ::unhinged::messaging::SendMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    ::grpc::Status SendMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest& request, ::unhinged::messaging::SendMessagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessagesResponse>> AsyncSendMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessagesResponse>>(AsyncSendMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessagesResponse>> PrepareAsyncSendMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessagesResponse>>(PrepareAsyncSendMessagesRaw(context, request, cq));
    }
    ::grpc::Status ReceiveMessages(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest& request, ::unhinged::messaging::ReceiveMessagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::ReceiveMessagesResponse>> AsyncReceiveMessages(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::ReceiveMessagesResponse>>(AsyncReceiveMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::ReceiveMessagesResponse>> PrepareAsyncReceiveMessages(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::ReceiveMessagesResponse>>(PrepareAsyncReceiveMessagesRaw(context, request, cq));
    }
    ::grpc::Status AcknowledgeMessage(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest& request, ::unhinged::messaging::AcknowledgeMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::AcknowledgeMessageResponse>> AsyncAcknowledgeMessage(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::AcknowledgeMessageResponse>>(AsyncAcknowledgeMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::AcknowledgeMessageResponse>> PrepareAsyncAcknowledgeMessage(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::AcknowledgeMessageResponse>>(PrepareAsyncAcknowledgeMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::unhinged::messaging::MessageStreamResponse>> SubscribeToMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::unhinged::messaging::MessageStreamResponse>>(SubscribeToMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::messaging::MessageStreamResponse>> AsyncSubscribeToMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::messaging::MessageStreamResponse>>(AsyncSubscribeToMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::messaging::MessageStreamResponse>> PrepareAsyncSubscribeToMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::unhinged::messaging::MessageStreamResponse>>(PrepareAsyncSubscribeToMessagesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendMessage(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest* request, ::unhinged::messaging::SendMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void SendMessage(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest* request, ::unhinged::messaging::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest* request, ::unhinged::messaging::SendMessagesResponse* response, std::function<void(::grpc::Status)>) override;
      void SendMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest* request, ::unhinged::messaging::SendMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReceiveMessages(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest* request, ::unhinged::messaging::ReceiveMessagesResponse* response, std::function<void(::grpc::Status)>) override;
      void ReceiveMessages(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest* request, ::unhinged::messaging::ReceiveMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AcknowledgeMessage(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest* request, ::unhinged::messaging::AcknowledgeMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void AcknowledgeMessage(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest* request, ::unhinged::messaging::AcknowledgeMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubscribeToMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest* request, ::grpc::ClientReadReactor< ::unhinged::messaging::MessageStreamResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessagesResponse>* AsyncSendMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessagesResponse>* PrepareAsyncSendMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::ReceiveMessagesResponse>* AsyncReceiveMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::ReceiveMessagesResponse>* PrepareAsyncReceiveMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::AcknowledgeMessageResponse>* AsyncAcknowledgeMessageRaw(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::unhinged::messaging::AcknowledgeMessageResponse>* PrepareAsyncAcknowledgeMessageRaw(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::unhinged::messaging::MessageStreamResponse>* SubscribeToMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request) override;
    ::grpc::ClientAsyncReader< ::unhinged::messaging::MessageStreamResponse>* AsyncSubscribeToMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::unhinged::messaging::MessageStreamResponse>* PrepareAsyncSubscribeToMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_AcknowledgeMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeToMessages_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Message sending
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::unhinged::messaging::SendMessageRequest* request, ::unhinged::messaging::SendMessageResponse* response);
    virtual ::grpc::Status SendMessages(::grpc::ServerContext* context, const ::unhinged::messaging::SendMessagesRequest* request, ::unhinged::messaging::SendMessagesResponse* response);
    // Message receiving (polling)
    virtual ::grpc::Status ReceiveMessages(::grpc::ServerContext* context, const ::unhinged::messaging::ReceiveMessagesRequest* request, ::unhinged::messaging::ReceiveMessagesResponse* response);
    virtual ::grpc::Status AcknowledgeMessage(::grpc::ServerContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest* request, ::unhinged::messaging::AcknowledgeMessageResponse* response);
    // Message streaming
    virtual ::grpc::Status SubscribeToMessages(::grpc::ServerContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest* request, ::grpc::ServerWriter< ::unhinged::messaging::MessageStreamResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SendMessageRequest* /*request*/, ::unhinged::messaging::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::unhinged::messaging::SendMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::messaging::SendMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessages() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SendMessagesRequest* /*request*/, ::unhinged::messaging::SendMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessages(::grpc::ServerContext* context, ::unhinged::messaging::SendMessagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::messaging::SendMessagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveMessages() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReceiveMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::ReceiveMessagesRequest* /*request*/, ::unhinged::messaging::ReceiveMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveMessages(::grpc::ServerContext* context, ::unhinged::messaging::ReceiveMessagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::messaging::ReceiveMessagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AcknowledgeMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AcknowledgeMessage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AcknowledgeMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcknowledgeMessage(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::AcknowledgeMessageRequest* /*request*/, ::unhinged::messaging::AcknowledgeMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcknowledgeMessage(::grpc::ServerContext* context, ::unhinged::messaging::AcknowledgeMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::unhinged::messaging::AcknowledgeMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeToMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeToMessages() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SubscribeToMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SubscribeToMessagesRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::messaging::MessageStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeToMessages(::grpc::ServerContext* context, ::unhinged::messaging::SubscribeToMessagesRequest* request, ::grpc::ServerAsyncWriter< ::unhinged::messaging::MessageStreamResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendMessage<WithAsyncMethod_SendMessages<WithAsyncMethod_ReceiveMessages<WithAsyncMethod_AcknowledgeMessage<WithAsyncMethod_SubscribeToMessages<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::messaging::SendMessageRequest, ::unhinged::messaging::SendMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::messaging::SendMessageRequest* request, ::unhinged::messaging::SendMessageResponse* response) { return this->SendMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessage(
        ::grpc::MessageAllocator< ::unhinged::messaging::SendMessageRequest, ::unhinged::messaging::SendMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::messaging::SendMessageRequest, ::unhinged::messaging::SendMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SendMessageRequest* /*request*/, ::unhinged::messaging::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::messaging::SendMessageRequest* /*request*/, ::unhinged::messaging::SendMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMessages() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::messaging::SendMessagesRequest, ::unhinged::messaging::SendMessagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::messaging::SendMessagesRequest* request, ::unhinged::messaging::SendMessagesResponse* response) { return this->SendMessages(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessages(
        ::grpc::MessageAllocator< ::unhinged::messaging::SendMessagesRequest, ::unhinged::messaging::SendMessagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::messaging::SendMessagesRequest, ::unhinged::messaging::SendMessagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SendMessagesRequest* /*request*/, ::unhinged::messaging::SendMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::messaging::SendMessagesRequest* /*request*/, ::unhinged::messaging::SendMessagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReceiveMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReceiveMessages() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::messaging::ReceiveMessagesRequest, ::unhinged::messaging::ReceiveMessagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::messaging::ReceiveMessagesRequest* request, ::unhinged::messaging::ReceiveMessagesResponse* response) { return this->ReceiveMessages(context, request, response); }));}
    void SetMessageAllocatorFor_ReceiveMessages(
        ::grpc::MessageAllocator< ::unhinged::messaging::ReceiveMessagesRequest, ::unhinged::messaging::ReceiveMessagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::messaging::ReceiveMessagesRequest, ::unhinged::messaging::ReceiveMessagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReceiveMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::ReceiveMessagesRequest* /*request*/, ::unhinged::messaging::ReceiveMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReceiveMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::messaging::ReceiveMessagesRequest* /*request*/, ::unhinged::messaging::ReceiveMessagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AcknowledgeMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AcknowledgeMessage() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::unhinged::messaging::AcknowledgeMessageRequest, ::unhinged::messaging::AcknowledgeMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest* request, ::unhinged::messaging::AcknowledgeMessageResponse* response) { return this->AcknowledgeMessage(context, request, response); }));}
    void SetMessageAllocatorFor_AcknowledgeMessage(
        ::grpc::MessageAllocator< ::unhinged::messaging::AcknowledgeMessageRequest, ::unhinged::messaging::AcknowledgeMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::unhinged::messaging::AcknowledgeMessageRequest, ::unhinged::messaging::AcknowledgeMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AcknowledgeMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcknowledgeMessage(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::AcknowledgeMessageRequest* /*request*/, ::unhinged::messaging::AcknowledgeMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AcknowledgeMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::messaging::AcknowledgeMessageRequest* /*request*/, ::unhinged::messaging::AcknowledgeMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeToMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeToMessages() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::unhinged::messaging::SubscribeToMessagesRequest, ::unhinged::messaging::MessageStreamResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest* request) { return this->SubscribeToMessages(context, request); }));
    }
    ~WithCallbackMethod_SubscribeToMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SubscribeToMessagesRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::messaging::MessageStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::unhinged::messaging::MessageStreamResponse>* SubscribeToMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::unhinged::messaging::SubscribeToMessagesRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendMessage<WithCallbackMethod_SendMessages<WithCallbackMethod_ReceiveMessages<WithCallbackMethod_AcknowledgeMessage<WithCallbackMethod_SubscribeToMessages<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SendMessageRequest* /*request*/, ::unhinged::messaging::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessages() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SendMessagesRequest* /*request*/, ::unhinged::messaging::SendMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReceiveMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveMessages() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReceiveMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::ReceiveMessagesRequest* /*request*/, ::unhinged::messaging::ReceiveMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AcknowledgeMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AcknowledgeMessage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AcknowledgeMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcknowledgeMessage(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::AcknowledgeMessageRequest* /*request*/, ::unhinged::messaging::AcknowledgeMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeToMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeToMessages() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SubscribeToMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SubscribeToMessagesRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::messaging::MessageStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SendMessageRequest* /*request*/, ::unhinged::messaging::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessages() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SendMessagesRequest* /*request*/, ::unhinged::messaging::SendMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveMessages() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReceiveMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::ReceiveMessagesRequest* /*request*/, ::unhinged::messaging::ReceiveMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AcknowledgeMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AcknowledgeMessage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AcknowledgeMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcknowledgeMessage(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::AcknowledgeMessageRequest* /*request*/, ::unhinged::messaging::AcknowledgeMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcknowledgeMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeToMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeToMessages() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SubscribeToMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SubscribeToMessagesRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::messaging::MessageStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeToMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SendMessageRequest* /*request*/, ::unhinged::messaging::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMessages() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessages(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SendMessagesRequest* /*request*/, ::unhinged::messaging::SendMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReceiveMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReceiveMessages() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReceiveMessages(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReceiveMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::ReceiveMessagesRequest* /*request*/, ::unhinged::messaging::ReceiveMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReceiveMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AcknowledgeMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AcknowledgeMessage() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AcknowledgeMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_AcknowledgeMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcknowledgeMessage(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::AcknowledgeMessageRequest* /*request*/, ::unhinged::messaging::AcknowledgeMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AcknowledgeMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeToMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeToMessages() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeToMessages(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeToMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SubscribeToMessagesRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::messaging::MessageStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeToMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::messaging::SendMessageRequest, ::unhinged::messaging::SendMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::messaging::SendMessageRequest, ::unhinged::messaging::SendMessageResponse>* streamer) {
                       return this->StreamedSendMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SendMessageRequest* /*request*/, ::unhinged::messaging::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::messaging::SendMessageRequest,::unhinged::messaging::SendMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessages() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::messaging::SendMessagesRequest, ::unhinged::messaging::SendMessagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::messaging::SendMessagesRequest, ::unhinged::messaging::SendMessagesResponse>* streamer) {
                       return this->StreamedSendMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SendMessagesRequest* /*request*/, ::unhinged::messaging::SendMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::messaging::SendMessagesRequest,::unhinged::messaging::SendMessagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReceiveMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReceiveMessages() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::messaging::ReceiveMessagesRequest, ::unhinged::messaging::ReceiveMessagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::messaging::ReceiveMessagesRequest, ::unhinged::messaging::ReceiveMessagesResponse>* streamer) {
                       return this->StreamedReceiveMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReceiveMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::ReceiveMessagesRequest* /*request*/, ::unhinged::messaging::ReceiveMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReceiveMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::messaging::ReceiveMessagesRequest,::unhinged::messaging::ReceiveMessagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AcknowledgeMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AcknowledgeMessage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::unhinged::messaging::AcknowledgeMessageRequest, ::unhinged::messaging::AcknowledgeMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::unhinged::messaging::AcknowledgeMessageRequest, ::unhinged::messaging::AcknowledgeMessageResponse>* streamer) {
                       return this->StreamedAcknowledgeMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AcknowledgeMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AcknowledgeMessage(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::AcknowledgeMessageRequest* /*request*/, ::unhinged::messaging::AcknowledgeMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAcknowledgeMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::unhinged::messaging::AcknowledgeMessageRequest,::unhinged::messaging::AcknowledgeMessageResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_SendMessages<WithStreamedUnaryMethod_ReceiveMessages<WithStreamedUnaryMethod_AcknowledgeMessage<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeToMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeToMessages() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::unhinged::messaging::SubscribeToMessagesRequest, ::unhinged::messaging::MessageStreamResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::unhinged::messaging::SubscribeToMessagesRequest, ::unhinged::messaging::MessageStreamResponse>* streamer) {
                       return this->StreamedSubscribeToMessages(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeToMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeToMessages(::grpc::ServerContext* /*context*/, const ::unhinged::messaging::SubscribeToMessagesRequest* /*request*/, ::grpc::ServerWriter< ::unhinged::messaging::MessageStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeToMessages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::unhinged::messaging::SubscribeToMessagesRequest,::unhinged::messaging::MessageStreamResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeToMessages<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_SendMessages<WithStreamedUnaryMethod_ReceiveMessages<WithStreamedUnaryMethod_AcknowledgeMessage<WithSplitStreamingMethod_SubscribeToMessages<Service > > > > > StreamedService;
};

}  // namespace messaging
}  // namespace unhinged


#endif  // GRPC_messaging_2eproto__INCLUDED
