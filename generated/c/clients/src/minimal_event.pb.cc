// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minimal_event.proto

#include "minimal_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace unhinged {
namespace cdc {
namespace minimal {
PROTOBUF_CONSTEXPR UniversalEvent::UniversalEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_ms_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UniversalEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UniversalEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UniversalEventDefaultTypeInternal() {}
  union {
    UniversalEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UniversalEventDefaultTypeInternal _UniversalEvent_default_instance_;
PROTOBUF_CONSTEXPR LLMInferenceEvent::LLMInferenceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prompt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.intent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prompt_tokens_)*/0
  , /*decltype(_impl_.response_tokens_)*/0
  , /*decltype(_impl_.latency_ms_)*/int64_t{0}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.confidence_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LLMInferenceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LLMInferenceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LLMInferenceEventDefaultTypeInternal() {}
  union {
    LLMInferenceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LLMInferenceEventDefaultTypeInternal _LLMInferenceEvent_default_instance_;
}  // namespace minimal
}  // namespace cdc
}  // namespace unhinged
static ::_pb::Metadata file_level_metadata_minimal_5fevent_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_minimal_5fevent_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_minimal_5fevent_2eproto = nullptr;

const uint32_t TableStruct_minimal_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::UniversalEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::UniversalEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::UniversalEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::UniversalEvent, _impl_.timestamp_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::UniversalEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::UniversalEvent, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::UniversalEvent, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::LLMInferenceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::LLMInferenceEvent, _impl_.prompt_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::LLMInferenceEvent, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::LLMInferenceEvent, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::LLMInferenceEvent, _impl_.prompt_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::LLMInferenceEvent, _impl_.response_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::LLMInferenceEvent, _impl_.latency_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::LLMInferenceEvent, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::LLMInferenceEvent, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::LLMInferenceEvent, _impl_.intent_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::minimal::LLMInferenceEvent, _impl_.confidence_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::unhinged::cdc::minimal::UniversalEvent)},
  { 12, -1, -1, sizeof(::unhinged::cdc::minimal::LLMInferenceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::unhinged::cdc::minimal::_UniversalEvent_default_instance_._instance,
  &::unhinged::cdc::minimal::_LLMInferenceEvent_default_instance_._instance,
};

const char descriptor_table_protodef_minimal_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023minimal_event.proto\022\024unhinged.cdc.mini"
  "mal\"\202\001\n\016UniversalEvent\022\020\n\010event_id\030\001 \001(\t"
  "\022\022\n\nevent_type\030\002 \001(\t\022\024\n\014timestamp_ms\030\003 \001"
  "(\003\022\017\n\007user_id\030\004 \001(\t\022\022\n\nsession_id\030\005 \001(\t\022"
  "\017\n\007payload\030\006 \001(\014\"\324\001\n\021LLMInferenceEvent\022\016"
  "\n\006prompt\030\001 \001(\t\022\020\n\010response\030\002 \001(\t\022\r\n\005mode"
  "l\030\003 \001(\t\022\025\n\rprompt_tokens\030\004 \001(\005\022\027\n\017respon"
  "se_tokens\030\005 \001(\005\022\022\n\nlatency_ms\030\006 \001(\003\022\017\n\007s"
  "uccess\030\007 \001(\010\022\025\n\rerror_message\030\010 \001(\t\022\016\n\006i"
  "ntent\030\t \001(\t\022\022\n\nconfidence\030\n \001(\002B-\n\030com.u"
  "nhinged.cdc.minimalB\021MinimalEventProtob\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_minimal_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_minimal_5fevent_2eproto = {
    false, false, 446, descriptor_table_protodef_minimal_5fevent_2eproto,
    "minimal_event.proto",
    &descriptor_table_minimal_5fevent_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_minimal_5fevent_2eproto::offsets,
    file_level_metadata_minimal_5fevent_2eproto, file_level_enum_descriptors_minimal_5fevent_2eproto,
    file_level_service_descriptors_minimal_5fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_minimal_5fevent_2eproto_getter() {
  return &descriptor_table_minimal_5fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_minimal_5fevent_2eproto(&descriptor_table_minimal_5fevent_2eproto);
namespace unhinged {
namespace cdc {
namespace minimal {

// ===================================================================

class UniversalEvent::_Internal {
 public:
};

UniversalEvent::UniversalEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.minimal.UniversalEvent)
}
UniversalEvent::UniversalEvent(const UniversalEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UniversalEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.timestamp_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_type().empty()) {
    _this->_impl_.event_type_.Set(from._internal_event_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.minimal.UniversalEvent)
}

inline void UniversalEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.timestamp_ms_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UniversalEvent::~UniversalEvent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.minimal.UniversalEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UniversalEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_id_.Destroy();
  _impl_.event_type_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.payload_.Destroy();
}

void UniversalEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UniversalEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.minimal.UniversalEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_id_.ClearToEmpty();
  _impl_.event_type_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _impl_.timestamp_ms_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UniversalEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.minimal.UniversalEvent.event_id"));
        } else
          goto handle_unusual;
        continue;
      // string event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_event_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.minimal.UniversalEvent.event_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.minimal.UniversalEvent.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.minimal.UniversalEvent.session_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UniversalEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.minimal.UniversalEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.minimal.UniversalEvent.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_type().data(), static_cast<int>(this->_internal_event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.minimal.UniversalEvent.event_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event_type(), target);
  }

  // int64 timestamp_ms = 3;
  if (this->_internal_timestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp_ms(), target);
  }

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.minimal.UniversalEvent.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // string session_id = 5;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.minimal.UniversalEvent.session_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_session_id(), target);
  }

  // bytes payload = 6;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.minimal.UniversalEvent)
  return target;
}

size_t UniversalEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.minimal.UniversalEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_type());
  }

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string session_id = 5;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // bytes payload = 6;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // int64 timestamp_ms = 3;
  if (this->_internal_timestamp_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UniversalEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UniversalEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UniversalEvent::GetClassData() const { return &_class_data_; }


void UniversalEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UniversalEvent*>(&to_msg);
  auto& from = static_cast<const UniversalEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.minimal.UniversalEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (!from._internal_event_type().empty()) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_timestamp_ms() != 0) {
    _this->_internal_set_timestamp_ms(from._internal_timestamp_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UniversalEvent::CopyFrom(const UniversalEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.minimal.UniversalEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniversalEvent::IsInitialized() const {
  return true;
}

void UniversalEvent::InternalSwap(UniversalEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_type_, lhs_arena,
      &other->_impl_.event_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  swap(_impl_.timestamp_ms_, other->_impl_.timestamp_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniversalEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minimal_5fevent_2eproto_getter, &descriptor_table_minimal_5fevent_2eproto_once,
      file_level_metadata_minimal_5fevent_2eproto[0]);
}

// ===================================================================

class LLMInferenceEvent::_Internal {
 public:
};

LLMInferenceEvent::LLMInferenceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.minimal.LLMInferenceEvent)
}
LLMInferenceEvent::LLMInferenceEvent(const LLMInferenceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LLMInferenceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prompt_){}
    , decltype(_impl_.response_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.intent_){}
    , decltype(_impl_.prompt_tokens_){}
    , decltype(_impl_.response_tokens_){}
    , decltype(_impl_.latency_ms_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.confidence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prompt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prompt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prompt().empty()) {
    _this->_impl_.prompt_.Set(from._internal_prompt(), 
      _this->GetArenaForAllocation());
  }
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response().empty()) {
    _this->_impl_.response_.Set(from._internal_response(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.intent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.intent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_intent().empty()) {
    _this->_impl_.intent_.Set(from._internal_intent(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.prompt_tokens_, &from._impl_.prompt_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.confidence_) -
    reinterpret_cast<char*>(&_impl_.prompt_tokens_)) + sizeof(_impl_.confidence_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.minimal.LLMInferenceEvent)
}

inline void LLMInferenceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prompt_){}
    , decltype(_impl_.response_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.intent_){}
    , decltype(_impl_.prompt_tokens_){0}
    , decltype(_impl_.response_tokens_){0}
    , decltype(_impl_.latency_ms_){int64_t{0}}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.confidence_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prompt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prompt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.intent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.intent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LLMInferenceEvent::~LLMInferenceEvent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.minimal.LLMInferenceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LLMInferenceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prompt_.Destroy();
  _impl_.response_.Destroy();
  _impl_.model_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.intent_.Destroy();
}

void LLMInferenceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LLMInferenceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.minimal.LLMInferenceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prompt_.ClearToEmpty();
  _impl_.response_.ClearToEmpty();
  _impl_.model_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  _impl_.intent_.ClearToEmpty();
  ::memset(&_impl_.prompt_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.confidence_) -
      reinterpret_cast<char*>(&_impl_.prompt_tokens_)) + sizeof(_impl_.confidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LLMInferenceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string prompt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prompt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.minimal.LLMInferenceEvent.prompt"));
        } else
          goto handle_unusual;
        continue;
      // string response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_response();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.minimal.LLMInferenceEvent.response"));
        } else
          goto handle_unusual;
        continue;
      // string model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.minimal.LLMInferenceEvent.model"));
        } else
          goto handle_unusual;
        continue;
      // int32 prompt_tokens = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.prompt_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 response_tokens = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.response_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 latency_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.minimal.LLMInferenceEvent.error_message"));
        } else
          goto handle_unusual;
        continue;
      // string intent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_intent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.minimal.LLMInferenceEvent.intent"));
        } else
          goto handle_unusual;
        continue;
      // float confidence = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LLMInferenceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.minimal.LLMInferenceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string prompt = 1;
  if (!this->_internal_prompt().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prompt().data(), static_cast<int>(this->_internal_prompt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.minimal.LLMInferenceEvent.prompt");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prompt(), target);
  }

  // string response = 2;
  if (!this->_internal_response().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.minimal.LLMInferenceEvent.response");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_response(), target);
  }

  // string model = 3;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.minimal.LLMInferenceEvent.model");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model(), target);
  }

  // int32 prompt_tokens = 4;
  if (this->_internal_prompt_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_prompt_tokens(), target);
  }

  // int32 response_tokens = 5;
  if (this->_internal_response_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_response_tokens(), target);
  }

  // int64 latency_ms = 6;
  if (this->_internal_latency_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_latency_ms(), target);
  }

  // bool success = 7;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_success(), target);
  }

  // string error_message = 8;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.minimal.LLMInferenceEvent.error_message");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_error_message(), target);
  }

  // string intent = 9;
  if (!this->_internal_intent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intent().data(), static_cast<int>(this->_internal_intent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.minimal.LLMInferenceEvent.intent");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_intent(), target);
  }

  // float confidence = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.minimal.LLMInferenceEvent)
  return target;
}

size_t LLMInferenceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.minimal.LLMInferenceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prompt = 1;
  if (!this->_internal_prompt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prompt());
  }

  // string response = 2;
  if (!this->_internal_response().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  // string model = 3;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string error_message = 8;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // string intent = 9;
  if (!this->_internal_intent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intent());
  }

  // int32 prompt_tokens = 4;
  if (this->_internal_prompt_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prompt_tokens());
  }

  // int32 response_tokens = 5;
  if (this->_internal_response_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response_tokens());
  }

  // int64 latency_ms = 6;
  if (this->_internal_latency_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_latency_ms());
  }

  // bool success = 7;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // float confidence = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LLMInferenceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LLMInferenceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LLMInferenceEvent::GetClassData() const { return &_class_data_; }


void LLMInferenceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LLMInferenceEvent*>(&to_msg);
  auto& from = static_cast<const LLMInferenceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.minimal.LLMInferenceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prompt().empty()) {
    _this->_internal_set_prompt(from._internal_prompt());
  }
  if (!from._internal_response().empty()) {
    _this->_internal_set_response(from._internal_response());
  }
  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_intent().empty()) {
    _this->_internal_set_intent(from._internal_intent());
  }
  if (from._internal_prompt_tokens() != 0) {
    _this->_internal_set_prompt_tokens(from._internal_prompt_tokens());
  }
  if (from._internal_response_tokens() != 0) {
    _this->_internal_set_response_tokens(from._internal_response_tokens());
  }
  if (from._internal_latency_ms() != 0) {
    _this->_internal_set_latency_ms(from._internal_latency_ms());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = from._internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LLMInferenceEvent::CopyFrom(const LLMInferenceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.minimal.LLMInferenceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LLMInferenceEvent::IsInitialized() const {
  return true;
}

void LLMInferenceEvent::InternalSwap(LLMInferenceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prompt_, lhs_arena,
      &other->_impl_.prompt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_, lhs_arena,
      &other->_impl_.response_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.intent_, lhs_arena,
      &other->_impl_.intent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LLMInferenceEvent, _impl_.confidence_)
      + sizeof(LLMInferenceEvent::_impl_.confidence_)
      - PROTOBUF_FIELD_OFFSET(LLMInferenceEvent, _impl_.prompt_tokens_)>(
          reinterpret_cast<char*>(&_impl_.prompt_tokens_),
          reinterpret_cast<char*>(&other->_impl_.prompt_tokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LLMInferenceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minimal_5fevent_2eproto_getter, &descriptor_table_minimal_5fevent_2eproto_once,
      file_level_metadata_minimal_5fevent_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace minimal
}  // namespace cdc
}  // namespace unhinged
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::unhinged::cdc::minimal::UniversalEvent*
Arena::CreateMaybeMessage< ::unhinged::cdc::minimal::UniversalEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::minimal::UniversalEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::minimal::LLMInferenceEvent*
Arena::CreateMaybeMessage< ::unhinged::cdc::minimal::LLMInferenceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::minimal::LLMInferenceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
