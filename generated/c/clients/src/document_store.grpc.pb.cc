// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: document_store.proto

#include "document_store.pb.h"
#include "document_store.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace unhinged {
namespace document_store {

static const char* DocumentStoreService_method_names[] = {
  "/unhinged.document_store.DocumentStoreService/PutDocument",
  "/unhinged.document_store.DocumentStoreService/PutDocuments",
  "/unhinged.document_store.DocumentStoreService/GetDocument",
  "/unhinged.document_store.DocumentStoreService/ListDocuments",
  "/unhinged.document_store.DocumentStoreService/ListDocumentVersions",
  "/unhinged.document_store.DocumentStoreService/DeleteDocument",
  "/unhinged.document_store.DocumentStoreService/TagDocument",
  "/unhinged.document_store.DocumentStoreService/ListActiveTags",
  "/unhinged.document_store.DocumentStoreService/ListTagEvents",
  "/unhinged.document_store.DocumentStoreService/GetSessionContext",
  "/unhinged.document_store.DocumentStoreService/HealthCheck",
};

std::unique_ptr< DocumentStoreService::Stub> DocumentStoreService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DocumentStoreService::Stub> stub(new DocumentStoreService::Stub(channel, options));
  return stub;
}

DocumentStoreService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PutDocument_(DocumentStoreService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutDocuments_(DocumentStoreService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDocument_(DocumentStoreService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDocuments_(DocumentStoreService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDocumentVersions_(DocumentStoreService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDocument_(DocumentStoreService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TagDocument_(DocumentStoreService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListActiveTags_(DocumentStoreService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTagEvents_(DocumentStoreService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSessionContext_(DocumentStoreService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HealthCheck_(DocumentStoreService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DocumentStoreService::Stub::PutDocument(::grpc::ClientContext* context, const ::unhinged::document_store::PutDocumentRequest& request, ::unhinged::document_store::PutDocumentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::document_store::PutDocumentRequest, ::unhinged::document_store::PutDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutDocument_, context, request, response);
}

void DocumentStoreService::Stub::async::PutDocument(::grpc::ClientContext* context, const ::unhinged::document_store::PutDocumentRequest* request, ::unhinged::document_store::PutDocumentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::document_store::PutDocumentRequest, ::unhinged::document_store::PutDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutDocument_, context, request, response, std::move(f));
}

void DocumentStoreService::Stub::async::PutDocument(::grpc::ClientContext* context, const ::unhinged::document_store::PutDocumentRequest* request, ::unhinged::document_store::PutDocumentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutDocument_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::PutDocumentResponse>* DocumentStoreService::Stub::PrepareAsyncPutDocumentRaw(::grpc::ClientContext* context, const ::unhinged::document_store::PutDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::document_store::PutDocumentResponse, ::unhinged::document_store::PutDocumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutDocument_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::PutDocumentResponse>* DocumentStoreService::Stub::AsyncPutDocumentRaw(::grpc::ClientContext* context, const ::unhinged::document_store::PutDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutDocumentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DocumentStoreService::Stub::PutDocuments(::grpc::ClientContext* context, const ::unhinged::document_store::PutDocumentsRequest& request, ::unhinged::document_store::PutDocumentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::document_store::PutDocumentsRequest, ::unhinged::document_store::PutDocumentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutDocuments_, context, request, response);
}

void DocumentStoreService::Stub::async::PutDocuments(::grpc::ClientContext* context, const ::unhinged::document_store::PutDocumentsRequest* request, ::unhinged::document_store::PutDocumentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::document_store::PutDocumentsRequest, ::unhinged::document_store::PutDocumentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutDocuments_, context, request, response, std::move(f));
}

void DocumentStoreService::Stub::async::PutDocuments(::grpc::ClientContext* context, const ::unhinged::document_store::PutDocumentsRequest* request, ::unhinged::document_store::PutDocumentsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutDocuments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::PutDocumentsResponse>* DocumentStoreService::Stub::PrepareAsyncPutDocumentsRaw(::grpc::ClientContext* context, const ::unhinged::document_store::PutDocumentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::document_store::PutDocumentsResponse, ::unhinged::document_store::PutDocumentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutDocuments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::PutDocumentsResponse>* DocumentStoreService::Stub::AsyncPutDocumentsRaw(::grpc::ClientContext* context, const ::unhinged::document_store::PutDocumentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutDocumentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DocumentStoreService::Stub::GetDocument(::grpc::ClientContext* context, const ::unhinged::document_store::GetDocumentRequest& request, ::unhinged::document_store::GetDocumentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::document_store::GetDocumentRequest, ::unhinged::document_store::GetDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDocument_, context, request, response);
}

void DocumentStoreService::Stub::async::GetDocument(::grpc::ClientContext* context, const ::unhinged::document_store::GetDocumentRequest* request, ::unhinged::document_store::GetDocumentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::document_store::GetDocumentRequest, ::unhinged::document_store::GetDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDocument_, context, request, response, std::move(f));
}

void DocumentStoreService::Stub::async::GetDocument(::grpc::ClientContext* context, const ::unhinged::document_store::GetDocumentRequest* request, ::unhinged::document_store::GetDocumentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDocument_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::GetDocumentResponse>* DocumentStoreService::Stub::PrepareAsyncGetDocumentRaw(::grpc::ClientContext* context, const ::unhinged::document_store::GetDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::document_store::GetDocumentResponse, ::unhinged::document_store::GetDocumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDocument_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::GetDocumentResponse>* DocumentStoreService::Stub::AsyncGetDocumentRaw(::grpc::ClientContext* context, const ::unhinged::document_store::GetDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDocumentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DocumentStoreService::Stub::ListDocuments(::grpc::ClientContext* context, const ::unhinged::document_store::ListDocumentsRequest& request, ::unhinged::document_store::ListDocumentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::document_store::ListDocumentsRequest, ::unhinged::document_store::ListDocumentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListDocuments_, context, request, response);
}

void DocumentStoreService::Stub::async::ListDocuments(::grpc::ClientContext* context, const ::unhinged::document_store::ListDocumentsRequest* request, ::unhinged::document_store::ListDocumentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::document_store::ListDocumentsRequest, ::unhinged::document_store::ListDocumentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDocuments_, context, request, response, std::move(f));
}

void DocumentStoreService::Stub::async::ListDocuments(::grpc::ClientContext* context, const ::unhinged::document_store::ListDocumentsRequest* request, ::unhinged::document_store::ListDocumentsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDocuments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::ListDocumentsResponse>* DocumentStoreService::Stub::PrepareAsyncListDocumentsRaw(::grpc::ClientContext* context, const ::unhinged::document_store::ListDocumentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::document_store::ListDocumentsResponse, ::unhinged::document_store::ListDocumentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListDocuments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::ListDocumentsResponse>* DocumentStoreService::Stub::AsyncListDocumentsRaw(::grpc::ClientContext* context, const ::unhinged::document_store::ListDocumentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListDocumentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DocumentStoreService::Stub::ListDocumentVersions(::grpc::ClientContext* context, const ::unhinged::document_store::ListDocumentVersionsRequest& request, ::unhinged::document_store::ListDocumentVersionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::document_store::ListDocumentVersionsRequest, ::unhinged::document_store::ListDocumentVersionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListDocumentVersions_, context, request, response);
}

void DocumentStoreService::Stub::async::ListDocumentVersions(::grpc::ClientContext* context, const ::unhinged::document_store::ListDocumentVersionsRequest* request, ::unhinged::document_store::ListDocumentVersionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::document_store::ListDocumentVersionsRequest, ::unhinged::document_store::ListDocumentVersionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDocumentVersions_, context, request, response, std::move(f));
}

void DocumentStoreService::Stub::async::ListDocumentVersions(::grpc::ClientContext* context, const ::unhinged::document_store::ListDocumentVersionsRequest* request, ::unhinged::document_store::ListDocumentVersionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDocumentVersions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::ListDocumentVersionsResponse>* DocumentStoreService::Stub::PrepareAsyncListDocumentVersionsRaw(::grpc::ClientContext* context, const ::unhinged::document_store::ListDocumentVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::document_store::ListDocumentVersionsResponse, ::unhinged::document_store::ListDocumentVersionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListDocumentVersions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::ListDocumentVersionsResponse>* DocumentStoreService::Stub::AsyncListDocumentVersionsRaw(::grpc::ClientContext* context, const ::unhinged::document_store::ListDocumentVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListDocumentVersionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DocumentStoreService::Stub::DeleteDocument(::grpc::ClientContext* context, const ::unhinged::document_store::DeleteDocumentRequest& request, ::unhinged::document_store::DeleteDocumentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::document_store::DeleteDocumentRequest, ::unhinged::document_store::DeleteDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDocument_, context, request, response);
}

void DocumentStoreService::Stub::async::DeleteDocument(::grpc::ClientContext* context, const ::unhinged::document_store::DeleteDocumentRequest* request, ::unhinged::document_store::DeleteDocumentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::document_store::DeleteDocumentRequest, ::unhinged::document_store::DeleteDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDocument_, context, request, response, std::move(f));
}

void DocumentStoreService::Stub::async::DeleteDocument(::grpc::ClientContext* context, const ::unhinged::document_store::DeleteDocumentRequest* request, ::unhinged::document_store::DeleteDocumentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDocument_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::DeleteDocumentResponse>* DocumentStoreService::Stub::PrepareAsyncDeleteDocumentRaw(::grpc::ClientContext* context, const ::unhinged::document_store::DeleteDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::document_store::DeleteDocumentResponse, ::unhinged::document_store::DeleteDocumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDocument_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::DeleteDocumentResponse>* DocumentStoreService::Stub::AsyncDeleteDocumentRaw(::grpc::ClientContext* context, const ::unhinged::document_store::DeleteDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDocumentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DocumentStoreService::Stub::TagDocument(::grpc::ClientContext* context, const ::unhinged::document_store::TagDocumentRequest& request, ::unhinged::document_store::TagDocumentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::document_store::TagDocumentRequest, ::unhinged::document_store::TagDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TagDocument_, context, request, response);
}

void DocumentStoreService::Stub::async::TagDocument(::grpc::ClientContext* context, const ::unhinged::document_store::TagDocumentRequest* request, ::unhinged::document_store::TagDocumentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::document_store::TagDocumentRequest, ::unhinged::document_store::TagDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TagDocument_, context, request, response, std::move(f));
}

void DocumentStoreService::Stub::async::TagDocument(::grpc::ClientContext* context, const ::unhinged::document_store::TagDocumentRequest* request, ::unhinged::document_store::TagDocumentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TagDocument_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::TagDocumentResponse>* DocumentStoreService::Stub::PrepareAsyncTagDocumentRaw(::grpc::ClientContext* context, const ::unhinged::document_store::TagDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::document_store::TagDocumentResponse, ::unhinged::document_store::TagDocumentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TagDocument_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::TagDocumentResponse>* DocumentStoreService::Stub::AsyncTagDocumentRaw(::grpc::ClientContext* context, const ::unhinged::document_store::TagDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTagDocumentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DocumentStoreService::Stub::ListActiveTags(::grpc::ClientContext* context, const ::unhinged::document_store::ListActiveTagsRequest& request, ::unhinged::document_store::ListActiveTagsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::document_store::ListActiveTagsRequest, ::unhinged::document_store::ListActiveTagsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListActiveTags_, context, request, response);
}

void DocumentStoreService::Stub::async::ListActiveTags(::grpc::ClientContext* context, const ::unhinged::document_store::ListActiveTagsRequest* request, ::unhinged::document_store::ListActiveTagsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::document_store::ListActiveTagsRequest, ::unhinged::document_store::ListActiveTagsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListActiveTags_, context, request, response, std::move(f));
}

void DocumentStoreService::Stub::async::ListActiveTags(::grpc::ClientContext* context, const ::unhinged::document_store::ListActiveTagsRequest* request, ::unhinged::document_store::ListActiveTagsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListActiveTags_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::ListActiveTagsResponse>* DocumentStoreService::Stub::PrepareAsyncListActiveTagsRaw(::grpc::ClientContext* context, const ::unhinged::document_store::ListActiveTagsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::document_store::ListActiveTagsResponse, ::unhinged::document_store::ListActiveTagsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListActiveTags_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::ListActiveTagsResponse>* DocumentStoreService::Stub::AsyncListActiveTagsRaw(::grpc::ClientContext* context, const ::unhinged::document_store::ListActiveTagsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListActiveTagsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DocumentStoreService::Stub::ListTagEvents(::grpc::ClientContext* context, const ::unhinged::document_store::ListTagEventsRequest& request, ::unhinged::document_store::ListTagEventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::document_store::ListTagEventsRequest, ::unhinged::document_store::ListTagEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListTagEvents_, context, request, response);
}

void DocumentStoreService::Stub::async::ListTagEvents(::grpc::ClientContext* context, const ::unhinged::document_store::ListTagEventsRequest* request, ::unhinged::document_store::ListTagEventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::document_store::ListTagEventsRequest, ::unhinged::document_store::ListTagEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTagEvents_, context, request, response, std::move(f));
}

void DocumentStoreService::Stub::async::ListTagEvents(::grpc::ClientContext* context, const ::unhinged::document_store::ListTagEventsRequest* request, ::unhinged::document_store::ListTagEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTagEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::ListTagEventsResponse>* DocumentStoreService::Stub::PrepareAsyncListTagEventsRaw(::grpc::ClientContext* context, const ::unhinged::document_store::ListTagEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::document_store::ListTagEventsResponse, ::unhinged::document_store::ListTagEventsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListTagEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::ListTagEventsResponse>* DocumentStoreService::Stub::AsyncListTagEventsRaw(::grpc::ClientContext* context, const ::unhinged::document_store::ListTagEventsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListTagEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DocumentStoreService::Stub::GetSessionContext(::grpc::ClientContext* context, const ::unhinged::document_store::GetSessionContextRequest& request, ::unhinged::document_store::GetSessionContextResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::document_store::GetSessionContextRequest, ::unhinged::document_store::GetSessionContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSessionContext_, context, request, response);
}

void DocumentStoreService::Stub::async::GetSessionContext(::grpc::ClientContext* context, const ::unhinged::document_store::GetSessionContextRequest* request, ::unhinged::document_store::GetSessionContextResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::document_store::GetSessionContextRequest, ::unhinged::document_store::GetSessionContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSessionContext_, context, request, response, std::move(f));
}

void DocumentStoreService::Stub::async::GetSessionContext(::grpc::ClientContext* context, const ::unhinged::document_store::GetSessionContextRequest* request, ::unhinged::document_store::GetSessionContextResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSessionContext_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::GetSessionContextResponse>* DocumentStoreService::Stub::PrepareAsyncGetSessionContextRaw(::grpc::ClientContext* context, const ::unhinged::document_store::GetSessionContextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::document_store::GetSessionContextResponse, ::unhinged::document_store::GetSessionContextRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSessionContext_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::GetSessionContextResponse>* DocumentStoreService::Stub::AsyncGetSessionContextRaw(::grpc::ClientContext* context, const ::unhinged::document_store::GetSessionContextRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSessionContextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DocumentStoreService::Stub::HealthCheck(::grpc::ClientContext* context, const ::unhinged::document_store::HealthCheckRequest& request, ::unhinged::document_store::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::document_store::HealthCheckRequest, ::unhinged::document_store::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void DocumentStoreService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::unhinged::document_store::HealthCheckRequest* request, ::unhinged::document_store::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::document_store::HealthCheckRequest, ::unhinged::document_store::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void DocumentStoreService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::unhinged::document_store::HealthCheckRequest* request, ::unhinged::document_store::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::HealthCheckResponse>* DocumentStoreService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::document_store::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::document_store::HealthCheckResponse, ::unhinged::document_store::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::document_store::HealthCheckResponse>* DocumentStoreService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::document_store::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

DocumentStoreService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DocumentStoreService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DocumentStoreService::Service, ::unhinged::document_store::PutDocumentRequest, ::unhinged::document_store::PutDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DocumentStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::document_store::PutDocumentRequest* req,
             ::unhinged::document_store::PutDocumentResponse* resp) {
               return service->PutDocument(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DocumentStoreService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DocumentStoreService::Service, ::unhinged::document_store::PutDocumentsRequest, ::unhinged::document_store::PutDocumentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DocumentStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::document_store::PutDocumentsRequest* req,
             ::unhinged::document_store::PutDocumentsResponse* resp) {
               return service->PutDocuments(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DocumentStoreService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DocumentStoreService::Service, ::unhinged::document_store::GetDocumentRequest, ::unhinged::document_store::GetDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DocumentStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::document_store::GetDocumentRequest* req,
             ::unhinged::document_store::GetDocumentResponse* resp) {
               return service->GetDocument(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DocumentStoreService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DocumentStoreService::Service, ::unhinged::document_store::ListDocumentsRequest, ::unhinged::document_store::ListDocumentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DocumentStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::document_store::ListDocumentsRequest* req,
             ::unhinged::document_store::ListDocumentsResponse* resp) {
               return service->ListDocuments(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DocumentStoreService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DocumentStoreService::Service, ::unhinged::document_store::ListDocumentVersionsRequest, ::unhinged::document_store::ListDocumentVersionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DocumentStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::document_store::ListDocumentVersionsRequest* req,
             ::unhinged::document_store::ListDocumentVersionsResponse* resp) {
               return service->ListDocumentVersions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DocumentStoreService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DocumentStoreService::Service, ::unhinged::document_store::DeleteDocumentRequest, ::unhinged::document_store::DeleteDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DocumentStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::document_store::DeleteDocumentRequest* req,
             ::unhinged::document_store::DeleteDocumentResponse* resp) {
               return service->DeleteDocument(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DocumentStoreService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DocumentStoreService::Service, ::unhinged::document_store::TagDocumentRequest, ::unhinged::document_store::TagDocumentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DocumentStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::document_store::TagDocumentRequest* req,
             ::unhinged::document_store::TagDocumentResponse* resp) {
               return service->TagDocument(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DocumentStoreService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DocumentStoreService::Service, ::unhinged::document_store::ListActiveTagsRequest, ::unhinged::document_store::ListActiveTagsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DocumentStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::document_store::ListActiveTagsRequest* req,
             ::unhinged::document_store::ListActiveTagsResponse* resp) {
               return service->ListActiveTags(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DocumentStoreService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DocumentStoreService::Service, ::unhinged::document_store::ListTagEventsRequest, ::unhinged::document_store::ListTagEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DocumentStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::document_store::ListTagEventsRequest* req,
             ::unhinged::document_store::ListTagEventsResponse* resp) {
               return service->ListTagEvents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DocumentStoreService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DocumentStoreService::Service, ::unhinged::document_store::GetSessionContextRequest, ::unhinged::document_store::GetSessionContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DocumentStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::document_store::GetSessionContextRequest* req,
             ::unhinged::document_store::GetSessionContextResponse* resp) {
               return service->GetSessionContext(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DocumentStoreService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DocumentStoreService::Service, ::unhinged::document_store::HealthCheckRequest, ::unhinged::document_store::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DocumentStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::document_store::HealthCheckRequest* req,
             ::unhinged::document_store::HealthCheckResponse* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
}

DocumentStoreService::Service::~Service() {
}

::grpc::Status DocumentStoreService::Service::PutDocument(::grpc::ServerContext* context, const ::unhinged::document_store::PutDocumentRequest* request, ::unhinged::document_store::PutDocumentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DocumentStoreService::Service::PutDocuments(::grpc::ServerContext* context, const ::unhinged::document_store::PutDocumentsRequest* request, ::unhinged::document_store::PutDocumentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DocumentStoreService::Service::GetDocument(::grpc::ServerContext* context, const ::unhinged::document_store::GetDocumentRequest* request, ::unhinged::document_store::GetDocumentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DocumentStoreService::Service::ListDocuments(::grpc::ServerContext* context, const ::unhinged::document_store::ListDocumentsRequest* request, ::unhinged::document_store::ListDocumentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DocumentStoreService::Service::ListDocumentVersions(::grpc::ServerContext* context, const ::unhinged::document_store::ListDocumentVersionsRequest* request, ::unhinged::document_store::ListDocumentVersionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DocumentStoreService::Service::DeleteDocument(::grpc::ServerContext* context, const ::unhinged::document_store::DeleteDocumentRequest* request, ::unhinged::document_store::DeleteDocumentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DocumentStoreService::Service::TagDocument(::grpc::ServerContext* context, const ::unhinged::document_store::TagDocumentRequest* request, ::unhinged::document_store::TagDocumentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DocumentStoreService::Service::ListActiveTags(::grpc::ServerContext* context, const ::unhinged::document_store::ListActiveTagsRequest* request, ::unhinged::document_store::ListActiveTagsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DocumentStoreService::Service::ListTagEvents(::grpc::ServerContext* context, const ::unhinged::document_store::ListTagEventsRequest* request, ::unhinged::document_store::ListTagEventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DocumentStoreService::Service::GetSessionContext(::grpc::ServerContext* context, const ::unhinged::document_store::GetSessionContextRequest* request, ::unhinged::document_store::GetSessionContextResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DocumentStoreService::Service::HealthCheck(::grpc::ServerContext* context, const ::unhinged::document_store::HealthCheckRequest* request, ::unhinged::document_store::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace unhinged
}  // namespace document_store

