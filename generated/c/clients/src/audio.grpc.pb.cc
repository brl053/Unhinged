// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: audio.proto

#include "audio.pb.h"
#include "audio.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace unhinged {
namespace audio {
namespace v1 {

static const char* AudioService_method_names[] = {
  "/unhinged.audio.v1.AudioService/TextToSpeech",
  "/unhinged.audio.v1.AudioService/SpeechToText",
  "/unhinged.audio.v1.AudioService/ProcessAudioFile",
  "/unhinged.audio.v1.AudioService/ListVoices",
  "/unhinged.audio.v1.AudioService/GetVoice",
  "/unhinged.audio.v1.AudioService/CreateCustomVoice",
  "/unhinged.audio.v1.AudioService/ConvertAudioFormat",
  "/unhinged.audio.v1.AudioService/AnalyzeAudio",
  "/unhinged.audio.v1.AudioService/HealthCheck",
};

std::unique_ptr< AudioService::Stub> AudioService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AudioService::Stub> stub(new AudioService::Stub(channel, options));
  return stub;
}

AudioService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_TextToSpeech_(AudioService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SpeechToText_(AudioService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_ProcessAudioFile_(AudioService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListVoices_(AudioService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVoice_(AudioService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCustomVoice_(AudioService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConvertAudioFormat_(AudioService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AnalyzeAudio_(AudioService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HealthCheck_(AudioService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>* AudioService::Stub::TextToSpeechRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), rpcmethod_TextToSpeech_, context, request);
}

void AudioService::Stub::async::TextToSpeech(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest* request, ::grpc::ClientReadReactor< ::unhinged::common::v1::StreamChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_TextToSpeech_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* AudioService::Stub::AsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), cq, rpcmethod_TextToSpeech_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* AudioService::Stub::PrepareAsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::TTSRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), cq, rpcmethod_TextToSpeech_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::unhinged::common::v1::StreamChunk>* AudioService::Stub::SpeechToTextRaw(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), rpcmethod_SpeechToText_, context, response);
}

void AudioService::Stub::async::SpeechToText(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response, ::grpc::ClientWriteReactor< ::unhinged::common::v1::StreamChunk>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::unhinged::common::v1::StreamChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_SpeechToText_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::unhinged::common::v1::StreamChunk>* AudioService::Stub::AsyncSpeechToTextRaw(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), cq, rpcmethod_SpeechToText_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::unhinged::common::v1::StreamChunk>* AudioService::Stub::PrepareAsyncSpeechToTextRaw(::grpc::ClientContext* context, ::unhinged::audio::v1::STTResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), cq, rpcmethod_SpeechToText_, context, response, false, nullptr);
}

::grpc::Status AudioService::Stub::ProcessAudioFile(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest& request, ::unhinged::audio::v1::ProcessAudioResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::audio::v1::ProcessAudioRequest, ::unhinged::audio::v1::ProcessAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProcessAudioFile_, context, request, response);
}

void AudioService::Stub::async::ProcessAudioFile(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest* request, ::unhinged::audio::v1::ProcessAudioResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::audio::v1::ProcessAudioRequest, ::unhinged::audio::v1::ProcessAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessAudioFile_, context, request, response, std::move(f));
}

void AudioService::Stub::async::ProcessAudioFile(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest* request, ::unhinged::audio::v1::ProcessAudioResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessAudioFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ProcessAudioResponse>* AudioService::Stub::PrepareAsyncProcessAudioFileRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::audio::v1::ProcessAudioResponse, ::unhinged::audio::v1::ProcessAudioRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProcessAudioFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ProcessAudioResponse>* AudioService::Stub::AsyncProcessAudioFileRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ProcessAudioRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessAudioFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AudioService::Stub::ListVoices(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest& request, ::unhinged::audio::v1::ListVoicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::audio::v1::ListVoicesRequest, ::unhinged::audio::v1::ListVoicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListVoices_, context, request, response);
}

void AudioService::Stub::async::ListVoices(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest* request, ::unhinged::audio::v1::ListVoicesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::audio::v1::ListVoicesRequest, ::unhinged::audio::v1::ListVoicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListVoices_, context, request, response, std::move(f));
}

void AudioService::Stub::async::ListVoices(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest* request, ::unhinged::audio::v1::ListVoicesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListVoices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ListVoicesResponse>* AudioService::Stub::PrepareAsyncListVoicesRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::audio::v1::ListVoicesResponse, ::unhinged::audio::v1::ListVoicesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListVoices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ListVoicesResponse>* AudioService::Stub::AsyncListVoicesRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListVoicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AudioService::Stub::GetVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest& request, ::unhinged::audio::v1::GetVoiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::audio::v1::GetVoiceRequest, ::unhinged::audio::v1::GetVoiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVoice_, context, request, response);
}

void AudioService::Stub::async::GetVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest* request, ::unhinged::audio::v1::GetVoiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::audio::v1::GetVoiceRequest, ::unhinged::audio::v1::GetVoiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVoice_, context, request, response, std::move(f));
}

void AudioService::Stub::async::GetVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest* request, ::unhinged::audio::v1::GetVoiceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVoice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::GetVoiceResponse>* AudioService::Stub::PrepareAsyncGetVoiceRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::audio::v1::GetVoiceResponse, ::unhinged::audio::v1::GetVoiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVoice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::GetVoiceResponse>* AudioService::Stub::AsyncGetVoiceRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::GetVoiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVoiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AudioService::Stub::CreateCustomVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest& request, ::unhinged::audio::v1::CreateCustomVoiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::audio::v1::CreateCustomVoiceRequest, ::unhinged::audio::v1::CreateCustomVoiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCustomVoice_, context, request, response);
}

void AudioService::Stub::async::CreateCustomVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest* request, ::unhinged::audio::v1::CreateCustomVoiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::audio::v1::CreateCustomVoiceRequest, ::unhinged::audio::v1::CreateCustomVoiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCustomVoice_, context, request, response, std::move(f));
}

void AudioService::Stub::async::CreateCustomVoice(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest* request, ::unhinged::audio::v1::CreateCustomVoiceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCustomVoice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::CreateCustomVoiceResponse>* AudioService::Stub::PrepareAsyncCreateCustomVoiceRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::audio::v1::CreateCustomVoiceResponse, ::unhinged::audio::v1::CreateCustomVoiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCustomVoice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::CreateCustomVoiceResponse>* AudioService::Stub::AsyncCreateCustomVoiceRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCustomVoiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AudioService::Stub::ConvertAudioFormat(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest& request, ::unhinged::audio::v1::ConvertAudioResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::audio::v1::ConvertAudioRequest, ::unhinged::audio::v1::ConvertAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConvertAudioFormat_, context, request, response);
}

void AudioService::Stub::async::ConvertAudioFormat(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest* request, ::unhinged::audio::v1::ConvertAudioResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::audio::v1::ConvertAudioRequest, ::unhinged::audio::v1::ConvertAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConvertAudioFormat_, context, request, response, std::move(f));
}

void AudioService::Stub::async::ConvertAudioFormat(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest* request, ::unhinged::audio::v1::ConvertAudioResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConvertAudioFormat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ConvertAudioResponse>* AudioService::Stub::PrepareAsyncConvertAudioFormatRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::audio::v1::ConvertAudioResponse, ::unhinged::audio::v1::ConvertAudioRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConvertAudioFormat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::ConvertAudioResponse>* AudioService::Stub::AsyncConvertAudioFormatRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::ConvertAudioRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConvertAudioFormatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AudioService::Stub::AnalyzeAudio(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest& request, ::unhinged::audio::v1::AnalyzeAudioResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::audio::v1::AnalyzeAudioRequest, ::unhinged::audio::v1::AnalyzeAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AnalyzeAudio_, context, request, response);
}

void AudioService::Stub::async::AnalyzeAudio(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest* request, ::unhinged::audio::v1::AnalyzeAudioResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::audio::v1::AnalyzeAudioRequest, ::unhinged::audio::v1::AnalyzeAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AnalyzeAudio_, context, request, response, std::move(f));
}

void AudioService::Stub::async::AnalyzeAudio(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest* request, ::unhinged::audio::v1::AnalyzeAudioResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AnalyzeAudio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::AnalyzeAudioResponse>* AudioService::Stub::PrepareAsyncAnalyzeAudioRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::audio::v1::AnalyzeAudioResponse, ::unhinged::audio::v1::AnalyzeAudioRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AnalyzeAudio_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::audio::v1::AnalyzeAudioResponse>* AudioService::Stub::AsyncAnalyzeAudioRaw(::grpc::ClientContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAnalyzeAudioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AudioService::Stub::HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::unhinged::common::v1::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void AudioService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void AudioService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>* AudioService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::common::v1::HealthCheckResponse, ::unhinged::common::v1::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>* AudioService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

AudioService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AudioService::Service, ::unhinged::audio::v1::TTSRequest, ::unhinged::common::v1::StreamChunk>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::audio::v1::TTSRequest* req,
             ::grpc::ServerWriter<::unhinged::common::v1::StreamChunk>* writer) {
               return service->TextToSpeech(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< AudioService::Service, ::unhinged::common::v1::StreamChunk, ::unhinged::audio::v1::STTResponse>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::unhinged::common::v1::StreamChunk>* reader,
             ::unhinged::audio::v1::STTResponse* resp) {
               return service->SpeechToText(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioService::Service, ::unhinged::audio::v1::ProcessAudioRequest, ::unhinged::audio::v1::ProcessAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::audio::v1::ProcessAudioRequest* req,
             ::unhinged::audio::v1::ProcessAudioResponse* resp) {
               return service->ProcessAudioFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioService::Service, ::unhinged::audio::v1::ListVoicesRequest, ::unhinged::audio::v1::ListVoicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::audio::v1::ListVoicesRequest* req,
             ::unhinged::audio::v1::ListVoicesResponse* resp) {
               return service->ListVoices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioService::Service, ::unhinged::audio::v1::GetVoiceRequest, ::unhinged::audio::v1::GetVoiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::audio::v1::GetVoiceRequest* req,
             ::unhinged::audio::v1::GetVoiceResponse* resp) {
               return service->GetVoice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioService::Service, ::unhinged::audio::v1::CreateCustomVoiceRequest, ::unhinged::audio::v1::CreateCustomVoiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::audio::v1::CreateCustomVoiceRequest* req,
             ::unhinged::audio::v1::CreateCustomVoiceResponse* resp) {
               return service->CreateCustomVoice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioService::Service, ::unhinged::audio::v1::ConvertAudioRequest, ::unhinged::audio::v1::ConvertAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::audio::v1::ConvertAudioRequest* req,
             ::unhinged::audio::v1::ConvertAudioResponse* resp) {
               return service->ConvertAudioFormat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioService::Service, ::unhinged::audio::v1::AnalyzeAudioRequest, ::unhinged::audio::v1::AnalyzeAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::audio::v1::AnalyzeAudioRequest* req,
             ::unhinged::audio::v1::AnalyzeAudioResponse* resp) {
               return service->AnalyzeAudio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioService::Service, ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::common::v1::HealthCheckRequest* req,
             ::unhinged::common::v1::HealthCheckResponse* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
}

AudioService::Service::~Service() {
}

::grpc::Status AudioService::Service::TextToSpeech(::grpc::ServerContext* context, const ::unhinged::audio::v1::TTSRequest* request, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioService::Service::SpeechToText(::grpc::ServerContext* context, ::grpc::ServerReader< ::unhinged::common::v1::StreamChunk>* reader, ::unhinged::audio::v1::STTResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioService::Service::ProcessAudioFile(::grpc::ServerContext* context, const ::unhinged::audio::v1::ProcessAudioRequest* request, ::unhinged::audio::v1::ProcessAudioResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioService::Service::ListVoices(::grpc::ServerContext* context, const ::unhinged::audio::v1::ListVoicesRequest* request, ::unhinged::audio::v1::ListVoicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioService::Service::GetVoice(::grpc::ServerContext* context, const ::unhinged::audio::v1::GetVoiceRequest* request, ::unhinged::audio::v1::GetVoiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioService::Service::CreateCustomVoice(::grpc::ServerContext* context, const ::unhinged::audio::v1::CreateCustomVoiceRequest* request, ::unhinged::audio::v1::CreateCustomVoiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioService::Service::ConvertAudioFormat(::grpc::ServerContext* context, const ::unhinged::audio::v1::ConvertAudioRequest* request, ::unhinged::audio::v1::ConvertAudioResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioService::Service::AnalyzeAudio(::grpc::ServerContext* context, const ::unhinged::audio::v1::AnalyzeAudioRequest* request, ::unhinged::audio::v1::AnalyzeAudioResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioService::Service::HealthCheck(::grpc::ServerContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace unhinged
}  // namespace audio
}  // namespace v1

