// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace unhinged {
namespace common {
namespace v1 {
PROTOBUF_CONSTEXPR ResourceMetadata::ResourceMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.resource_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.namespace_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.custom_metadata_)*/nullptr
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceMetadataDefaultTypeInternal() {}
  union {
    ResourceMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceMetadataDefaultTypeInternal _ResourceMetadata_default_instance_;
PROTOBUF_CONSTEXPR ResourceReference::ResourceReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceReferenceDefaultTypeInternal() {}
  union {
    ResourceReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceReferenceDefaultTypeInternal _ResourceReference_default_instance_;
PROTOBUF_CONSTEXPR PaginationRequest::PaginationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PaginationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaginationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaginationRequestDefaultTypeInternal() {}
  union {
    PaginationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaginationRequestDefaultTypeInternal _PaginationRequest_default_instance_;
PROTOBUF_CONSTEXPR PaginationResponse::PaginationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.next_page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.total_count_)*/0
  , /*decltype(_impl_.has_more_)*/false
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PaginationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaginationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaginationResponseDefaultTypeInternal() {}
  union {
    PaginationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaginationResponseDefaultTypeInternal _PaginationResponse_default_instance_;
PROTOBUF_CONSTEXPR StreamChunk::StreamChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.structured_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.sequence_number_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.is_final_)*/false
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamChunkDefaultTypeInternal() {}
  union {
    StreamChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamChunkDefaultTypeInternal _StreamChunk_default_instance_;
PROTOBUF_CONSTEXPR UsageMetrics::UsageMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processing_time_)*/nullptr
  , /*decltype(_impl_.recorded_at_)*/nullptr
  , /*decltype(_impl_.cost_usd_)*/0
  , /*decltype(_impl_.metric_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UsageMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UsageMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UsageMetricsDefaultTypeInternal() {}
  union {
    UsageMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UsageMetricsDefaultTypeInternal _UsageMetrics_default_instance_;
PROTOBUF_CONSTEXPR TokenUsage::TokenUsage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prompt_tokens_)*/0
  , /*decltype(_impl_.completion_tokens_)*/0
  , /*decltype(_impl_.total_tokens_)*/0
  , /*decltype(_impl_.cached_tokens_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenUsageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenUsageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenUsageDefaultTypeInternal() {}
  union {
    TokenUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenUsageDefaultTypeInternal _TokenUsage_default_instance_;
PROTOBUF_CONSTEXPR AudioUsage::AudioUsage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_)*/nullptr
  , /*decltype(_impl_.bytes_processed_)*/int64_t{0}
  , /*decltype(_impl_.sample_rate_)*/0
  , /*decltype(_impl_.channels_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AudioUsageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioUsageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioUsageDefaultTypeInternal() {}
  union {
    AudioUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioUsageDefaultTypeInternal _AudioUsage_default_instance_;
PROTOBUF_CONSTEXPR DataUsage::DataUsage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bytes_read_)*/int64_t{0}
  , /*decltype(_impl_.bytes_written_)*/int64_t{0}
  , /*decltype(_impl_.records_processed_)*/0
  , /*decltype(_impl_.api_calls_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataUsageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataUsageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataUsageDefaultTypeInternal() {}
  union {
    DataUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataUsageDefaultTypeInternal _DataUsage_default_instance_;
PROTOBUF_CONSTEXPR ComputeUsage::ComputeUsage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cpu_time_)*/nullptr
  , /*decltype(_impl_.memory_bytes_)*/int64_t{0}
  , /*decltype(_impl_.storage_bytes_)*/int64_t{0}
  , /*decltype(_impl_.gpu_seconds_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComputeUsageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComputeUsageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComputeUsageDefaultTypeInternal() {}
  union {
    ComputeUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComputeUsageDefaultTypeInternal _ComputeUsage_default_instance_;
PROTOBUF_CONSTEXPR Attachment::Attachment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attachment_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uploaded_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.uploaded_at_)*/nullptr
  , /*decltype(_impl_.size_bytes_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentDefaultTypeInternal() {}
  union {
    Attachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentDefaultTypeInternal _Attachment_default_instance_;
PROTOBUF_CONSTEXPR Error::Error(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_errors_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.debug_info_)*/nullptr
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorDefaultTypeInternal _Error_default_instance_;
PROTOBUF_CONSTEXPR ErrorField::ErrorField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ErrorFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorFieldDefaultTypeInternal() {}
  union {
    ErrorField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorFieldDefaultTypeInternal _ErrorField_default_instance_;
PROTOBUF_CONSTEXPR Filter::Filter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operator__)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterDefaultTypeInternal() {}
  union {
    Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterDefaultTypeInternal _Filter_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckRequest::HealthCheckRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.include_dependencies_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckRequestDefaultTypeInternal() {}
  union {
    HealthCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckResponse_DetailsEntry_DoNotUse::HealthCheckResponse_DetailsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HealthCheckResponse_DetailsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal _HealthCheckResponse_DetailsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckResponse::HealthCheckResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.details_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.checked_at_)*/nullptr
  , /*decltype(_impl_.response_time_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthCheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckResponseDefaultTypeInternal() {}
  union {
    HealthCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
PROTOBUF_CONSTEXPR StandardResponse::StandardResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StandardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StandardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StandardResponseDefaultTypeInternal() {}
  union {
    StandardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StandardResponseDefaultTypeInternal _StandardResponse_default_instance_;
PROTOBUF_CONSTEXPR AuditInfo::AuditInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_agent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuditInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuditInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuditInfoDefaultTypeInternal() {}
  union {
    AuditInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuditInfoDefaultTypeInternal _AuditInfo_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace unhinged
static ::_pb::Metadata file_level_metadata_common_2eproto[19];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const uint32_t TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceMetadata, _impl_.resource_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceMetadata, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceMetadata, _impl_.namespace_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceMetadata, _impl_.created_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceMetadata, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceMetadata, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceMetadata, _impl_.custom_metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceMetadata, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceMetadata, _impl_.tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceReference, _impl_.resource_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceReference, _impl_.resource_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceReference, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ResourceReference, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::PaginationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::PaginationRequest, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::PaginationRequest, _impl_.page_token_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::PaginationRequest, _impl_.order_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::PaginationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::PaginationResponse, _impl_.next_page_token_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::PaginationResponse, _impl_.total_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::PaginationResponse, _impl_.has_more_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::PaginationResponse, _impl_.page_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StreamChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StreamChunk, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StreamChunk, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StreamChunk, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StreamChunk, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StreamChunk, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StreamChunk, _impl_.structured_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StreamChunk, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StreamChunk, _impl_.is_final_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StreamChunk, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StreamChunk, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::UsageMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::UsageMetrics, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::UsageMetrics, _impl_.processing_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::UsageMetrics, _impl_.recorded_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::UsageMetrics, _impl_.cost_usd_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::UsageMetrics, _impl_.metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::TokenUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::TokenUsage, _impl_.prompt_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::TokenUsage, _impl_.completion_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::TokenUsage, _impl_.total_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::TokenUsage, _impl_.cached_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::TokenUsage, _impl_.model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AudioUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AudioUsage, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AudioUsage, _impl_.bytes_processed_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AudioUsage, _impl_.sample_rate_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AudioUsage, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AudioUsage, _impl_.format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::DataUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::DataUsage, _impl_.bytes_read_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::DataUsage, _impl_.bytes_written_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::DataUsage, _impl_.records_processed_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::DataUsage, _impl_.api_calls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ComputeUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ComputeUsage, _impl_.cpu_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ComputeUsage, _impl_.memory_bytes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ComputeUsage, _impl_.storage_bytes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ComputeUsage, _impl_.gpu_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Attachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Attachment, _impl_.attachment_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Attachment, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Attachment, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Attachment, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Attachment, _impl_.size_bytes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Attachment, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Attachment, _impl_.thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Attachment, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Attachment, _impl_.uploaded_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Attachment, _impl_.uploaded_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Error, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Error, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Error, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Error, _impl_.field_errors_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Error, _impl_.debug_info_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Error, _impl_.request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ErrorField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ErrorField, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ErrorField, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::ErrorField, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Filter, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Filter, _impl_.operator__),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Filter, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::Filter, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::HealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::HealthCheckRequest, _impl_.service_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::HealthCheckRequest, _impl_.include_dependencies_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::HealthCheckResponse_DetailsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::HealthCheckResponse_DetailsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::HealthCheckResponse_DetailsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::HealthCheckResponse_DetailsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::HealthCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::HealthCheckResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::HealthCheckResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::HealthCheckResponse, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::HealthCheckResponse, _impl_.checked_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::HealthCheckResponse, _impl_.response_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StandardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StandardResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StandardResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StandardResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StandardResponse, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::StandardResponse, _impl_.request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AuditInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AuditInfo, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AuditInfo, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AuditInfo, _impl_.ip_address_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AuditInfo, _impl_.user_agent_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AuditInfo, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AuditInfo, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::unhinged::common::v1::AuditInfo, _impl_.context_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::unhinged::common::v1::ResourceMetadata)},
  { 15, -1, -1, sizeof(::unhinged::common::v1::ResourceReference)},
  { 25, -1, -1, sizeof(::unhinged::common::v1::PaginationRequest)},
  { 34, -1, -1, sizeof(::unhinged::common::v1::PaginationResponse)},
  { 44, -1, -1, sizeof(::unhinged::common::v1::StreamChunk)},
  { 60, -1, -1, sizeof(::unhinged::common::v1::UsageMetrics)},
  { 74, -1, -1, sizeof(::unhinged::common::v1::TokenUsage)},
  { 85, -1, -1, sizeof(::unhinged::common::v1::AudioUsage)},
  { 96, -1, -1, sizeof(::unhinged::common::v1::DataUsage)},
  { 106, -1, -1, sizeof(::unhinged::common::v1::ComputeUsage)},
  { 116, -1, -1, sizeof(::unhinged::common::v1::Attachment)},
  { 132, -1, -1, sizeof(::unhinged::common::v1::Error)},
  { 144, -1, -1, sizeof(::unhinged::common::v1::ErrorField)},
  { 153, -1, -1, sizeof(::unhinged::common::v1::Filter)},
  { 163, -1, -1, sizeof(::unhinged::common::v1::HealthCheckRequest)},
  { 171, 179, -1, sizeof(::unhinged::common::v1::HealthCheckResponse_DetailsEntry_DoNotUse)},
  { 181, -1, -1, sizeof(::unhinged::common::v1::HealthCheckResponse)},
  { 192, -1, -1, sizeof(::unhinged::common::v1::StandardResponse)},
  { 203, -1, -1, sizeof(::unhinged::common::v1::AuditInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::unhinged::common::v1::_ResourceMetadata_default_instance_._instance,
  &::unhinged::common::v1::_ResourceReference_default_instance_._instance,
  &::unhinged::common::v1::_PaginationRequest_default_instance_._instance,
  &::unhinged::common::v1::_PaginationResponse_default_instance_._instance,
  &::unhinged::common::v1::_StreamChunk_default_instance_._instance,
  &::unhinged::common::v1::_UsageMetrics_default_instance_._instance,
  &::unhinged::common::v1::_TokenUsage_default_instance_._instance,
  &::unhinged::common::v1::_AudioUsage_default_instance_._instance,
  &::unhinged::common::v1::_DataUsage_default_instance_._instance,
  &::unhinged::common::v1::_ComputeUsage_default_instance_._instance,
  &::unhinged::common::v1::_Attachment_default_instance_._instance,
  &::unhinged::common::v1::_Error_default_instance_._instance,
  &::unhinged::common::v1::_ErrorField_default_instance_._instance,
  &::unhinged::common::v1::_Filter_default_instance_._instance,
  &::unhinged::common::v1::_HealthCheckRequest_default_instance_._instance,
  &::unhinged::common::v1::_HealthCheckResponse_DetailsEntry_DoNotUse_default_instance_._instance,
  &::unhinged::common::v1::_HealthCheckResponse_default_instance_._instance,
  &::unhinged::common::v1::_StandardResponse_default_instance_._instance,
  &::unhinged::common::v1::_AuditInfo_default_instance_._instance,
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\022unhinged.common.v1\032\037goog"
  "le/protobuf/timestamp.proto\032\034google/prot"
  "obuf/struct.proto\032\036google/protobuf/durat"
  "ion.proto\"\223\002\n\020ResourceMetadata\022\023\n\013resour"
  "ce_id\030\001 \001(\t\022\017\n\007team_id\030\002 \001(\t\022\024\n\014namespac"
  "e_id\030\003 \001(\t\022\022\n\ncreated_by\030\004 \001(\t\022.\n\ncreate"
  "d_at\030\005 \001(\0132\032.google.protobuf.Timestamp\022."
  "\n\nupdated_at\030\006 \001(\0132\032.google.protobuf.Tim"
  "estamp\0220\n\017custom_metadata\030\007 \001(\0132\027.google"
  ".protobuf.Struct\022\017\n\007version\030\010 \001(\005\022\014\n\004tag"
  "s\030\t \003(\t\"b\n\021ResourceReference\022\025\n\rresource"
  "_type\030\001 \001(\t\022\023\n\013resource_id\030\002 \001(\t\022\024\n\014disp"
  "lay_name\030\003 \001(\t\022\013\n\003url\030\004 \001(\t\"L\n\021Paginatio"
  "nRequest\022\021\n\tpage_size\030\001 \001(\005\022\022\n\npage_toke"
  "n\030\002 \001(\t\022\020\n\010order_by\030\003 \001(\t\"g\n\022PaginationR"
  "esponse\022\027\n\017next_page_token\030\001 \001(\t\022\023\n\013tota"
  "l_count\030\002 \001(\005\022\020\n\010has_more\030\003 \001(\010\022\021\n\tpage_"
  "size\030\004 \001(\005\"\314\002\n\013StreamChunk\022\021\n\tstream_id\030"
  "\001 \001(\t\022\027\n\017sequence_number\030\002 \001(\005\022+\n\004type\030\003"
  " \001(\0162\035.unhinged.common.v1.ChunkType\022\014\n\004d"
  "ata\030\004 \001(\014\022\014\n\004text\030\005 \001(\t\022+\n\nstructured\030\006 "
  "\001(\0132\027.google.protobuf.Struct\022)\n\010metadata"
  "\030\007 \001(\0132\027.google.protobuf.Struct\022\020\n\010is_fi"
  "nal\030\010 \001(\010\022/\n\006status\030\t \001(\0162\037.unhinged.com"
  "mon.v1.ChunkStatus\022-\n\ttimestamp\030\n \001(\0132\032."
  "google.protobuf.Timestamp\"\326\002\n\014UsageMetri"
  "cs\0220\n\006tokens\030\001 \001(\0132\036.unhinged.common.v1."
  "TokenUsageH\000\022/\n\005audio\030\002 \001(\0132\036.unhinged.c"
  "ommon.v1.AudioUsageH\000\022-\n\004data\030\003 \001(\0132\035.un"
  "hinged.common.v1.DataUsageH\000\0223\n\007compute\030"
  "\004 \001(\0132 .unhinged.common.v1.ComputeUsageH"
  "\000\0222\n\017processing_time\030\005 \001(\0132\031.google.prot"
  "obuf.Duration\022/\n\013recorded_at\030\006 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\022\020\n\010cost_usd\030\007 \001(\002"
  "B\010\n\006metric\"z\n\nTokenUsage\022\025\n\rprompt_token"
  "s\030\001 \001(\005\022\031\n\021completion_tokens\030\002 \001(\005\022\024\n\014to"
  "tal_tokens\030\003 \001(\005\022\025\n\rcached_tokens\030\004 \001(\005\022"
  "\r\n\005model\030\005 \001(\t\"\211\001\n\nAudioUsage\022+\n\010duratio"
  "n\030\001 \001(\0132\031.google.protobuf.Duration\022\027\n\017by"
  "tes_processed\030\002 \001(\003\022\023\n\013sample_rate\030\003 \001(\005"
  "\022\020\n\010channels\030\004 \001(\005\022\016\n\006format\030\005 \001(\t\"d\n\tDa"
  "taUsage\022\022\n\nbytes_read\030\001 \001(\003\022\025\n\rbytes_wri"
  "tten\030\002 \001(\003\022\031\n\021records_processed\030\003 \001(\005\022\021\n"
  "\tapi_calls\030\004 \001(\005\"}\n\014ComputeUsage\022+\n\010cpu_"
  "time\030\001 \001(\0132\031.google.protobuf.Duration\022\024\n"
  "\014memory_bytes\030\002 \001(\003\022\025\n\rstorage_bytes\030\003 \001"
  "(\003\022\023\n\013gpu_seconds\030\004 \001(\005\"\243\002\n\nAttachment\022\025"
  "\n\rattachment_id\030\001 \001(\t\0220\n\004type\030\002 \001(\0162\".un"
  "hinged.common.v1.AttachmentType\022\013\n\003url\030\003"
  " \001(\t\022\020\n\010filename\030\004 \001(\t\022\022\n\nsize_bytes\030\005 \001"
  "(\003\022\021\n\tmime_type\030\006 \001(\t\022\025\n\rthumbnail_url\030\007"
  " \001(\t\022)\n\010metadata\030\010 \001(\0132\027.google.protobuf"
  ".Struct\022/\n\013uploaded_at\030\t \001(\0132\032.google.pr"
  "otobuf.Timestamp\022\023\n\013uploaded_by\030\n \001(\t\"\315\001"
  "\n\005Error\022+\n\004code\030\001 \001(\0162\035.unhinged.common."
  "v1.ErrorCode\022\017\n\007message\030\002 \001(\t\022\017\n\007details"
  "\030\003 \001(\t\0224\n\014field_errors\030\004 \003(\0132\036.unhinged."
  "common.v1.ErrorField\022+\n\ndebug_info\030\005 \001(\013"
  "2\027.google.protobuf.Struct\022\022\n\nrequest_id\030"
  "\006 \001(\t\":\n\nErrorField\022\r\n\005field\030\001 \001(\t\022\017\n\007me"
  "ssage\030\002 \001(\t\022\014\n\004code\030\003 \001(\t\"l\n\006Filter\022\r\n\005f"
  "ield\030\001 \001(\t\0224\n\010operator\030\002 \001(\0162\".unhinged."
  "common.v1.FilterOperator\022\r\n\005value\030\003 \001(\t\022"
  "\016\n\006values\030\004 \003(\t\"C\n\022HealthCheckRequest\022\017\n"
  "\007service\030\001 \001(\t\022\034\n\024include_dependencies\030\002"
  " \001(\010\"\261\002\n\023HealthCheckResponse\0220\n\006status\030\001"
  " \001(\0162 .unhinged.common.v1.HealthStatus\022\017"
  "\n\007message\030\002 \001(\t\022E\n\007details\030\003 \003(\01324.unhin"
  "ged.common.v1.HealthCheckResponse.Detail"
  "sEntry\022.\n\nchecked_at\030\004 \001(\0132\032.google.prot"
  "obuf.Timestamp\0220\n\rresponse_time\030\005 \001(\0132\031."
  "google.protobuf.Duration\032.\n\014DetailsEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\235\001\n\020Sta"
  "ndardResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007messag"
  "e\030\002 \001(\t\022(\n\005error\030\003 \001(\0132\031.unhinged.common"
  ".v1.Error\022)\n\010metadata\030\004 \001(\0132\027.google.pro"
  "tobuf.Struct\022\022\n\nrequest_id\030\005 \001(\t\"\301\001\n\tAud"
  "itInfo\022\017\n\007user_id\030\001 \001(\t\022\022\n\nsession_id\030\002 "
  "\001(\t\022\022\n\nip_address\030\003 \001(\t\022\022\n\nuser_agent\030\004 "
  "\001(\t\022-\n\ttimestamp\030\005 \001(\0132\032.google.protobuf"
  ".Timestamp\022\016\n\006action\030\006 \001(\t\022(\n\007context\030\007 "
  "\001(\0132\027.google.protobuf.Struct*\236\001\n\tChunkTy"
  "pe\022\032\n\026CHUNK_TYPE_UNSPECIFIED\020\000\022\023\n\017CHUNK_"
  "TYPE_DATA\020\001\022\027\n\023CHUNK_TYPE_METADATA\020\002\022\024\n\020"
  "CHUNK_TYPE_ERROR\020\003\022\030\n\024CHUNK_TYPE_HEARTBE"
  "AT\020\004\022\027\n\023CHUNK_TYPE_PROGRESS\020\005*\227\001\n\013ChunkS"
  "tatus\022\034\n\030CHUNK_STATUS_UNSPECIFIED\020\000\022\033\n\027C"
  "HUNK_STATUS_PROCESSING\020\001\022\031\n\025CHUNK_STATUS"
  "_COMPLETE\020\002\022\026\n\022CHUNK_STATUS_ERROR\020\003\022\032\n\026C"
  "HUNK_STATUS_CANCELLED\020\004*\232\002\n\016AttachmentTy"
  "pe\022\037\n\033ATTACHMENT_TYPE_UNSPECIFIED\020\000\022\031\n\025A"
  "TTACHMENT_TYPE_IMAGE\020\001\022\034\n\030ATTACHMENT_TYP"
  "E_DOCUMENT\020\002\022\031\n\025ATTACHMENT_TYPE_AUDIO\020\003\022"
  "\031\n\025ATTACHMENT_TYPE_VIDEO\020\004\022\033\n\027ATTACHMENT"
  "_TYPE_ARCHIVE\020\005\022\030\n\024ATTACHMENT_TYPE_CODE\020"
  "\006\022\037\n\033ATTACHMENT_TYPE_SPREADSHEET\020\007\022 \n\034AT"
  "TACHMENT_TYPE_PRESENTATION\020\010*\327\002\n\tErrorCo"
  "de\022\032\n\026ERROR_CODE_UNSPECIFIED\020\000\022\037\n\033ERROR_"
  "CODE_INVALID_ARGUMENT\020\001\022\030\n\024ERROR_CODE_NO"
  "T_FOUND\020\002\022 \n\034ERROR_CODE_PERMISSION_DENIE"
  "D\020\003\022\036\n\032ERROR_CODE_UNAUTHENTICATED\020\004\022!\n\035E"
  "RROR_CODE_RESOURCE_EXHAUSTED\020\005\022\027\n\023ERROR_"
  "CODE_INTERNAL\020\006\022\032\n\026ERROR_CODE_UNAVAILABL"
  "E\020\007\022 \n\034ERROR_CODE_DEADLINE_EXCEEDED\020\010\022\035\n"
  "\031ERROR_CODE_ALREADY_EXISTS\020\t\022\030\n\024ERROR_CO"
  "DE_CANCELLED\020\n*\276\002\n\016FilterOperator\022\037\n\033FIL"
  "TER_OPERATOR_UNSPECIFIED\020\000\022\032\n\026FILTER_OPE"
  "RATOR_EQUALS\020\001\022\036\n\032FILTER_OPERATOR_NOT_EQ"
  "UALS\020\002\022 \n\034FILTER_OPERATOR_GREATER_THAN\020\003"
  "\022\035\n\031FILTER_OPERATOR_LESS_THAN\020\004\022\034\n\030FILTE"
  "R_OPERATOR_CONTAINS\020\005\022\026\n\022FILTER_OPERATOR"
  "_IN\020\006\022\032\n\026FILTER_OPERATOR_NOT_IN\020\007\022\033\n\027FIL"
  "TER_OPERATOR_IS_NULL\020\010\022\037\n\033FILTER_OPERATO"
  "R_IS_NOT_NULL\020\t*\234\001\n\014HealthStatus\022\035\n\031HEAL"
  "TH_STATUS_UNSPECIFIED\020\000\022\031\n\025HEALTH_STATUS"
  "_HEALTHY\020\001\022\032\n\026HEALTH_STATUS_DEGRADED\020\002\022\033"
  "\n\027HEALTH_STATUS_UNHEALTHY\020\003\022\031\n\025HEALTH_ST"
  "ATUS_UNKNOWN\020\004B \n\017unhinged.commonB\013Commo"
  "nProtoP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_common_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2eproto = {
    false, false, 4736, descriptor_table_protodef_common_2eproto,
    "common.proto",
    &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_deps, 3, 19,
    schemas, file_default_instances, TableStruct_common_2eproto::offsets,
    file_level_metadata_common_2eproto, file_level_enum_descriptors_common_2eproto,
    file_level_service_descriptors_common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2eproto_getter() {
  return &descriptor_table_common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2eproto(&descriptor_table_common_2eproto);
namespace unhinged {
namespace common {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChunkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool ChunkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChunkStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool ChunkStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttachmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool AttachmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[3];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[4];
}
bool FilterOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HealthStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[5];
}
bool HealthStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ResourceMetadata::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ResourceMetadata* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const ResourceMetadata* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& custom_metadata(const ResourceMetadata* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ResourceMetadata::_Internal::created_at(const ResourceMetadata* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ResourceMetadata::_Internal::updated_at(const ResourceMetadata* msg) {
  return *msg->_impl_.updated_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
ResourceMetadata::_Internal::custom_metadata(const ResourceMetadata* msg) {
  return *msg->_impl_.custom_metadata_;
}
void ResourceMetadata::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void ResourceMetadata::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
void ResourceMetadata::clear_custom_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.custom_metadata_ != nullptr) {
    delete _impl_.custom_metadata_;
  }
  _impl_.custom_metadata_ = nullptr;
}
ResourceMetadata::ResourceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.ResourceMetadata)
}
ResourceMetadata::ResourceMetadata(const ResourceMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.resource_id_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.namespace_id_){}
    , decltype(_impl_.created_by_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.custom_metadata_){nullptr}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_id().empty()) {
    _this->_impl_.resource_id_.Set(from._internal_resource_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_team_id().empty()) {
    _this->_impl_.team_id_.Set(from._internal_team_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.namespace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_id().empty()) {
    _this->_impl_.namespace_id_.Set(from._internal_namespace_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_by().empty()) {
    _this->_impl_.created_by_.Set(from._internal_created_by(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  if (from._internal_has_custom_metadata()) {
    _this->_impl_.custom_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.custom_metadata_);
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.ResourceMetadata)
}

inline void ResourceMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.resource_id_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.namespace_id_){}
    , decltype(_impl_.created_by_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.custom_metadata_){nullptr}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.namespace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResourceMetadata::~ResourceMetadata() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.ResourceMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  _impl_.resource_id_.Destroy();
  _impl_.team_id_.Destroy();
  _impl_.namespace_id_.Destroy();
  _impl_.created_by_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
  if (this != internal_default_instance()) delete _impl_.custom_metadata_;
}

void ResourceMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.ResourceMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.resource_id_.ClearToEmpty();
  _impl_.team_id_.ClearToEmpty();
  _impl_.namespace_id_.ClearToEmpty();
  _impl_.created_by_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.custom_metadata_ != nullptr) {
    delete _impl_.custom_metadata_;
  }
  _impl_.custom_metadata_ = nullptr;
  _impl_.version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string resource_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_resource_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.ResourceMetadata.resource_id"));
        } else
          goto handle_unusual;
        continue;
      // string team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_team_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.ResourceMetadata.team_id"));
        } else
          goto handle_unusual;
        continue;
      // string namespace_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_namespace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.ResourceMetadata.namespace_id"));
        } else
          goto handle_unusual;
        continue;
      // string created_by = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_created_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.ResourceMetadata.created_by"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct custom_metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.ResourceMetadata.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.ResourceMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource_id = 1;
  if (!this->_internal_resource_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_id().data(), static_cast<int>(this->_internal_resource_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.ResourceMetadata.resource_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resource_id(), target);
  }

  // string team_id = 2;
  if (!this->_internal_team_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_team_id().data(), static_cast<int>(this->_internal_team_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.ResourceMetadata.team_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_team_id(), target);
  }

  // string namespace_id = 3;
  if (!this->_internal_namespace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_id().data(), static_cast<int>(this->_internal_namespace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.ResourceMetadata.namespace_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_namespace_id(), target);
  }

  // string created_by = 4;
  if (!this->_internal_created_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_by().data(), static_cast<int>(this->_internal_created_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.ResourceMetadata.created_by");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_created_by(), target);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 6;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct custom_metadata = 7;
  if (this->_internal_has_custom_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::custom_metadata(this),
        _Internal::custom_metadata(this).GetCachedSize(), target, stream);
  }

  // int32 version = 8;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_version(), target);
  }

  // repeated string tags = 9;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.ResourceMetadata.tags");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.ResourceMetadata)
  return target;
}

size_t ResourceMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.ResourceMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string resource_id = 1;
  if (!this->_internal_resource_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_id());
  }

  // string team_id = 2;
  if (!this->_internal_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_team_id());
  }

  // string namespace_id = 3;
  if (!this->_internal_namespace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_id());
  }

  // string created_by = 4;
  if (!this->_internal_created_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_by());
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 6;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .google.protobuf.Struct custom_metadata = 7;
  if (this->_internal_has_custom_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.custom_metadata_);
  }

  // int32 version = 8;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceMetadata::GetClassData() const { return &_class_data_; }


void ResourceMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceMetadata*>(&to_msg);
  auto& from = static_cast<const ResourceMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.ResourceMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_resource_id().empty()) {
    _this->_internal_set_resource_id(from._internal_resource_id());
  }
  if (!from._internal_team_id().empty()) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  if (!from._internal_namespace_id().empty()) {
    _this->_internal_set_namespace_id(from._internal_namespace_id());
  }
  if (!from._internal_created_by().empty()) {
    _this->_internal_set_created_by(from._internal_created_by());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_has_custom_metadata()) {
    _this->_internal_mutable_custom_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_custom_metadata());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceMetadata::CopyFrom(const ResourceMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.ResourceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceMetadata::IsInitialized() const {
  return true;
}

void ResourceMetadata::InternalSwap(ResourceMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_id_, lhs_arena,
      &other->_impl_.resource_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_id_, lhs_arena,
      &other->_impl_.team_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace_id_, lhs_arena,
      &other->_impl_.namespace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.created_by_, lhs_arena,
      &other->_impl_.created_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceMetadata, _impl_.version_)
      + sizeof(ResourceMetadata::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(ResourceMetadata, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[0]);
}

// ===================================================================

class ResourceReference::_Internal {
 public:
};

ResourceReference::ResourceReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.ResourceReference)
}
ResourceReference::ResourceReference(const ResourceReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_type_){}
    , decltype(_impl_.resource_id_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_type().empty()) {
    _this->_impl_.resource_type_.Set(from._internal_resource_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resource_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_id().empty()) {
    _this->_impl_.resource_id_.Set(from._internal_resource_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.ResourceReference)
}

inline void ResourceReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_type_){}
    , decltype(_impl_.resource_id_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resource_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResourceReference::~ResourceReference() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.ResourceReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_type_.Destroy();
  _impl_.resource_id_.Destroy();
  _impl_.display_name_.Destroy();
  _impl_.url_.Destroy();
}

void ResourceReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceReference::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.ResourceReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_type_.ClearToEmpty();
  _impl_.resource_id_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string resource_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_resource_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.ResourceReference.resource_type"));
        } else
          goto handle_unusual;
        continue;
      // string resource_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resource_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.ResourceReference.resource_id"));
        } else
          goto handle_unusual;
        continue;
      // string display_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.ResourceReference.display_name"));
        } else
          goto handle_unusual;
        continue;
      // string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.ResourceReference.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.ResourceReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource_type = 1;
  if (!this->_internal_resource_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_type().data(), static_cast<int>(this->_internal_resource_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.ResourceReference.resource_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resource_type(), target);
  }

  // string resource_id = 2;
  if (!this->_internal_resource_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_id().data(), static_cast<int>(this->_internal_resource_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.ResourceReference.resource_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource_id(), target);
  }

  // string display_name = 3;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.ResourceReference.display_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_display_name(), target);
  }

  // string url = 4;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.ResourceReference.url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.ResourceReference)
  return target;
}

size_t ResourceReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.ResourceReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_type = 1;
  if (!this->_internal_resource_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_type());
  }

  // string resource_id = 2;
  if (!this->_internal_resource_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_id());
  }

  // string display_name = 3;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string url = 4;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceReference::GetClassData() const { return &_class_data_; }


void ResourceReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceReference*>(&to_msg);
  auto& from = static_cast<const ResourceReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.ResourceReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource_type().empty()) {
    _this->_internal_set_resource_type(from._internal_resource_type());
  }
  if (!from._internal_resource_id().empty()) {
    _this->_internal_set_resource_id(from._internal_resource_id());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceReference::CopyFrom(const ResourceReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.ResourceReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceReference::IsInitialized() const {
  return true;
}

void ResourceReference::InternalSwap(ResourceReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_type_, lhs_arena,
      &other->_impl_.resource_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_id_, lhs_arena,
      &other->_impl_.resource_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[1]);
}

// ===================================================================

class PaginationRequest::_Internal {
 public:
};

PaginationRequest::PaginationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.PaginationRequest)
}
PaginationRequest::PaginationRequest(const PaginationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PaginationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_token_){}
    , decltype(_impl_.order_by_){}
    , decltype(_impl_.page_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    _this->_impl_.page_token_.Set(from._internal_page_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.order_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_by().empty()) {
    _this->_impl_.order_by_.Set(from._internal_order_by(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.page_size_ = from._impl_.page_size_;
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.PaginationRequest)
}

inline void PaginationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_token_){}
    , decltype(_impl_.order_by_){}
    , decltype(_impl_.page_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PaginationRequest::~PaginationRequest() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.PaginationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaginationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.page_token_.Destroy();
  _impl_.order_by_.Destroy();
}

void PaginationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaginationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.PaginationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.page_token_.ClearToEmpty();
  _impl_.order_by_.ClearToEmpty();
  _impl_.page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaginationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.PaginationRequest.page_token"));
        } else
          goto handle_unusual;
        continue;
      // string order_by = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_order_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.PaginationRequest.order_by"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaginationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.PaginationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.PaginationRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_token(), target);
  }

  // string order_by = 3;
  if (!this->_internal_order_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_by().data(), static_cast<int>(this->_internal_order_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.PaginationRequest.order_by");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_order_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.PaginationRequest)
  return target;
}

size_t PaginationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.PaginationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // string order_by = 3;
  if (!this->_internal_order_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_by());
  }

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaginationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PaginationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaginationRequest::GetClassData() const { return &_class_data_; }


void PaginationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PaginationRequest*>(&to_msg);
  auto& from = static_cast<const PaginationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.PaginationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_page_token().empty()) {
    _this->_internal_set_page_token(from._internal_page_token());
  }
  if (!from._internal_order_by().empty()) {
    _this->_internal_set_order_by(from._internal_order_by());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaginationRequest::CopyFrom(const PaginationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.PaginationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaginationRequest::IsInitialized() const {
  return true;
}

void PaginationRequest::InternalSwap(PaginationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_token_, lhs_arena,
      &other->_impl_.page_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_by_, lhs_arena,
      &other->_impl_.order_by_, rhs_arena
  );
  swap(_impl_.page_size_, other->_impl_.page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaginationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[2]);
}

// ===================================================================

class PaginationResponse::_Internal {
 public:
};

PaginationResponse::PaginationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.PaginationResponse)
}
PaginationResponse::PaginationResponse(const PaginationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PaginationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.next_page_token_){}
    , decltype(_impl_.total_count_){}
    , decltype(_impl_.has_more_){}
    , decltype(_impl_.page_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    _this->_impl_.next_page_token_.Set(from._internal_next_page_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.total_count_, &from._impl_.total_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.page_size_) -
    reinterpret_cast<char*>(&_impl_.total_count_)) + sizeof(_impl_.page_size_));
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.PaginationResponse)
}

inline void PaginationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.next_page_token_){}
    , decltype(_impl_.total_count_){0}
    , decltype(_impl_.has_more_){false}
    , decltype(_impl_.page_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PaginationResponse::~PaginationResponse() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.PaginationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaginationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.next_page_token_.Destroy();
}

void PaginationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaginationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.PaginationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.next_page_token_.ClearToEmpty();
  ::memset(&_impl_.total_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.page_size_) -
      reinterpret_cast<char*>(&_impl_.total_count_)) + sizeof(_impl_.page_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaginationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string next_page_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.PaginationResponse.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      // int32 total_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_more = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.has_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaginationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.PaginationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string next_page_token = 1;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.PaginationResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_next_page_token(), target);
  }

  // int32 total_count = 2;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_count(), target);
  }

  // bool has_more = 3;
  if (this->_internal_has_more() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_has_more(), target);
  }

  // int32 page_size = 4;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_page_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.PaginationResponse)
  return target;
}

size_t PaginationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.PaginationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string next_page_token = 1;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  // int32 total_count = 2;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
  }

  // bool has_more = 3;
  if (this->_internal_has_more() != 0) {
    total_size += 1 + 1;
  }

  // int32 page_size = 4;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaginationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PaginationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaginationResponse::GetClassData() const { return &_class_data_; }


void PaginationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PaginationResponse*>(&to_msg);
  auto& from = static_cast<const PaginationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.PaginationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_next_page_token().empty()) {
    _this->_internal_set_next_page_token(from._internal_next_page_token());
  }
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  if (from._internal_has_more() != 0) {
    _this->_internal_set_has_more(from._internal_has_more());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaginationResponse::CopyFrom(const PaginationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.PaginationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaginationResponse::IsInitialized() const {
  return true;
}

void PaginationResponse::InternalSwap(PaginationResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_page_token_, lhs_arena,
      &other->_impl_.next_page_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaginationResponse, _impl_.page_size_)
      + sizeof(PaginationResponse::_impl_.page_size_)
      - PROTOBUF_FIELD_OFFSET(PaginationResponse, _impl_.total_count_)>(
          reinterpret_cast<char*>(&_impl_.total_count_),
          reinterpret_cast<char*>(&other->_impl_.total_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaginationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[3]);
}

// ===================================================================

class StreamChunk::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& structured(const StreamChunk* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const StreamChunk* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const StreamChunk* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
StreamChunk::_Internal::structured(const StreamChunk* msg) {
  return *msg->_impl_.structured_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
StreamChunk::_Internal::metadata(const StreamChunk* msg) {
  return *msg->_impl_.metadata_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamChunk::_Internal::timestamp(const StreamChunk* msg) {
  return *msg->_impl_.timestamp_;
}
void StreamChunk::clear_structured() {
  if (GetArenaForAllocation() == nullptr && _impl_.structured_ != nullptr) {
    delete _impl_.structured_;
  }
  _impl_.structured_ = nullptr;
}
void StreamChunk::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
void StreamChunk::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
StreamChunk::StreamChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.StreamChunk)
}
StreamChunk::StreamChunk(const StreamChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_id_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.structured_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.sequence_number_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.is_final_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_id().empty()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_structured()) {
    _this->_impl_.structured_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.structured_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.sequence_number_, &from._impl_.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.StreamChunk)
}

inline void StreamChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_id_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.structured_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.sequence_number_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.is_final_){false}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamChunk::~StreamChunk() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.StreamChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_id_.Destroy();
  _impl_.data_.Destroy();
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.structured_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void StreamChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.StreamChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stream_id_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.structured_ != nullptr) {
    delete _impl_.structured_;
  }
  _impl_.structured_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  ::memset(&_impl_.sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.StreamChunk.stream_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.ChunkType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::unhinged::common::v1::ChunkType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.StreamChunk.text"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct structured = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_structured(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_final = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.is_final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.ChunkStatus status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::unhinged::common::v1::ChunkStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.StreamChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stream_id = 1;
  if (!this->_internal_stream_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.StreamChunk.stream_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stream_id(), target);
  }

  // int32 sequence_number = 2;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  // .unhinged.common.v1.ChunkType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // string text = 5;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.StreamChunk.text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_text(), target);
  }

  // .google.protobuf.Struct structured = 6;
  if (this->_internal_has_structured()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::structured(this),
        _Internal::structured(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 7;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // bool is_final = 8;
  if (this->_internal_is_final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_final(), target);
  }

  // .unhinged.common.v1.ChunkStatus status = 9;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp timestamp = 10;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.StreamChunk)
  return target;
}

size_t StreamChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.StreamChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stream_id = 1;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string text = 5;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .google.protobuf.Struct structured = 6;
  if (this->_internal_has_structured()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.structured_);
  }

  // .google.protobuf.Struct metadata = 7;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .google.protobuf.Timestamp timestamp = 10;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // int32 sequence_number = 2;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequence_number());
  }

  // .unhinged.common.v1.ChunkType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_final = 8;
  if (this->_internal_is_final() != 0) {
    total_size += 1 + 1;
  }

  // .unhinged.common.v1.ChunkStatus status = 9;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamChunk::GetClassData() const { return &_class_data_; }


void StreamChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamChunk*>(&to_msg);
  auto& from = static_cast<const StreamChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.StreamChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_has_structured()) {
    _this->_internal_mutable_structured()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_structured());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_is_final() != 0) {
    _this->_internal_set_is_final(from._internal_is_final());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamChunk::CopyFrom(const StreamChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.StreamChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamChunk::IsInitialized() const {
  return true;
}

void StreamChunk::InternalSwap(StreamChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamChunk, _impl_.status_)
      + sizeof(StreamChunk::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(StreamChunk, _impl_.structured_)>(
          reinterpret_cast<char*>(&_impl_.structured_),
          reinterpret_cast<char*>(&other->_impl_.structured_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[4]);
}

// ===================================================================

class UsageMetrics::_Internal {
 public:
  static const ::unhinged::common::v1::TokenUsage& tokens(const UsageMetrics* msg);
  static const ::unhinged::common::v1::AudioUsage& audio(const UsageMetrics* msg);
  static const ::unhinged::common::v1::DataUsage& data(const UsageMetrics* msg);
  static const ::unhinged::common::v1::ComputeUsage& compute(const UsageMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& processing_time(const UsageMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& recorded_at(const UsageMetrics* msg);
};

const ::unhinged::common::v1::TokenUsage&
UsageMetrics::_Internal::tokens(const UsageMetrics* msg) {
  return *msg->_impl_.metric_.tokens_;
}
const ::unhinged::common::v1::AudioUsage&
UsageMetrics::_Internal::audio(const UsageMetrics* msg) {
  return *msg->_impl_.metric_.audio_;
}
const ::unhinged::common::v1::DataUsage&
UsageMetrics::_Internal::data(const UsageMetrics* msg) {
  return *msg->_impl_.metric_.data_;
}
const ::unhinged::common::v1::ComputeUsage&
UsageMetrics::_Internal::compute(const UsageMetrics* msg) {
  return *msg->_impl_.metric_.compute_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
UsageMetrics::_Internal::processing_time(const UsageMetrics* msg) {
  return *msg->_impl_.processing_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UsageMetrics::_Internal::recorded_at(const UsageMetrics* msg) {
  return *msg->_impl_.recorded_at_;
}
void UsageMetrics::set_allocated_tokens(::unhinged::common::v1::TokenUsage* tokens) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metric();
  if (tokens) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tokens);
    if (message_arena != submessage_arena) {
      tokens = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokens, submessage_arena);
    }
    set_has_tokens();
    _impl_.metric_.tokens_ = tokens;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.common.v1.UsageMetrics.tokens)
}
void UsageMetrics::set_allocated_audio(::unhinged::common::v1::AudioUsage* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metric();
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    set_has_audio();
    _impl_.metric_.audio_ = audio;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.common.v1.UsageMetrics.audio)
}
void UsageMetrics::set_allocated_data(::unhinged::common::v1::DataUsage* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metric();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    _impl_.metric_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.common.v1.UsageMetrics.data)
}
void UsageMetrics::set_allocated_compute(::unhinged::common::v1::ComputeUsage* compute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metric();
  if (compute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compute);
    if (message_arena != submessage_arena) {
      compute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compute, submessage_arena);
    }
    set_has_compute();
    _impl_.metric_.compute_ = compute;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.common.v1.UsageMetrics.compute)
}
void UsageMetrics::clear_processing_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.processing_time_ != nullptr) {
    delete _impl_.processing_time_;
  }
  _impl_.processing_time_ = nullptr;
}
void UsageMetrics::clear_recorded_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.recorded_at_ != nullptr) {
    delete _impl_.recorded_at_;
  }
  _impl_.recorded_at_ = nullptr;
}
UsageMetrics::UsageMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.UsageMetrics)
}
UsageMetrics::UsageMetrics(const UsageMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UsageMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processing_time_){nullptr}
    , decltype(_impl_.recorded_at_){nullptr}
    , decltype(_impl_.cost_usd_){}
    , decltype(_impl_.metric_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_processing_time()) {
    _this->_impl_.processing_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.processing_time_);
  }
  if (from._internal_has_recorded_at()) {
    _this->_impl_.recorded_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.recorded_at_);
  }
  _this->_impl_.cost_usd_ = from._impl_.cost_usd_;
  clear_has_metric();
  switch (from.metric_case()) {
    case kTokens: {
      _this->_internal_mutable_tokens()->::unhinged::common::v1::TokenUsage::MergeFrom(
          from._internal_tokens());
      break;
    }
    case kAudio: {
      _this->_internal_mutable_audio()->::unhinged::common::v1::AudioUsage::MergeFrom(
          from._internal_audio());
      break;
    }
    case kData: {
      _this->_internal_mutable_data()->::unhinged::common::v1::DataUsage::MergeFrom(
          from._internal_data());
      break;
    }
    case kCompute: {
      _this->_internal_mutable_compute()->::unhinged::common::v1::ComputeUsage::MergeFrom(
          from._internal_compute());
      break;
    }
    case METRIC_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.UsageMetrics)
}

inline void UsageMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processing_time_){nullptr}
    , decltype(_impl_.recorded_at_){nullptr}
    , decltype(_impl_.cost_usd_){0}
    , decltype(_impl_.metric_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_metric();
}

UsageMetrics::~UsageMetrics() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.UsageMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UsageMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.processing_time_;
  if (this != internal_default_instance()) delete _impl_.recorded_at_;
  if (has_metric()) {
    clear_metric();
  }
}

void UsageMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UsageMetrics::clear_metric() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.common.v1.UsageMetrics)
  switch (metric_case()) {
    case kTokens: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.metric_.tokens_;
      }
      break;
    }
    case kAudio: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.metric_.audio_;
      }
      break;
    }
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.metric_.data_;
      }
      break;
    }
    case kCompute: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.metric_.compute_;
      }
      break;
    }
    case METRIC_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = METRIC_NOT_SET;
}


void UsageMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.UsageMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.processing_time_ != nullptr) {
    delete _impl_.processing_time_;
  }
  _impl_.processing_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recorded_at_ != nullptr) {
    delete _impl_.recorded_at_;
  }
  _impl_.recorded_at_ = nullptr;
  _impl_.cost_usd_ = 0;
  clear_metric();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsageMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.TokenUsage tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokens(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.AudioUsage audio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.DataUsage data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.ComputeUsage compute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_compute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration processing_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp recorded_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_recorded_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cost_usd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.cost_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UsageMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.UsageMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.TokenUsage tokens = 1;
  if (_internal_has_tokens()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tokens(this),
        _Internal::tokens(this).GetCachedSize(), target, stream);
  }

  // .unhinged.common.v1.AudioUsage audio = 2;
  if (_internal_has_audio()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::audio(this),
        _Internal::audio(this).GetCachedSize(), target, stream);
  }

  // .unhinged.common.v1.DataUsage data = 3;
  if (_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .unhinged.common.v1.ComputeUsage compute = 4;
  if (_internal_has_compute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::compute(this),
        _Internal::compute(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration processing_time = 5;
  if (this->_internal_has_processing_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::processing_time(this),
        _Internal::processing_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp recorded_at = 6;
  if (this->_internal_has_recorded_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::recorded_at(this),
        _Internal::recorded_at(this).GetCachedSize(), target, stream);
  }

  // float cost_usd = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost_usd = this->_internal_cost_usd();
  uint32_t raw_cost_usd;
  memcpy(&raw_cost_usd, &tmp_cost_usd, sizeof(tmp_cost_usd));
  if (raw_cost_usd != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_cost_usd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.UsageMetrics)
  return target;
}

size_t UsageMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.UsageMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration processing_time = 5;
  if (this->_internal_has_processing_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.processing_time_);
  }

  // .google.protobuf.Timestamp recorded_at = 6;
  if (this->_internal_has_recorded_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recorded_at_);
  }

  // float cost_usd = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost_usd = this->_internal_cost_usd();
  uint32_t raw_cost_usd;
  memcpy(&raw_cost_usd, &tmp_cost_usd, sizeof(tmp_cost_usd));
  if (raw_cost_usd != 0) {
    total_size += 1 + 4;
  }

  switch (metric_case()) {
    // .unhinged.common.v1.TokenUsage tokens = 1;
    case kTokens: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metric_.tokens_);
      break;
    }
    // .unhinged.common.v1.AudioUsage audio = 2;
    case kAudio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metric_.audio_);
      break;
    }
    // .unhinged.common.v1.DataUsage data = 3;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metric_.data_);
      break;
    }
    // .unhinged.common.v1.ComputeUsage compute = 4;
    case kCompute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metric_.compute_);
      break;
    }
    case METRIC_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UsageMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UsageMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UsageMetrics::GetClassData() const { return &_class_data_; }


void UsageMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UsageMetrics*>(&to_msg);
  auto& from = static_cast<const UsageMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.UsageMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_processing_time()) {
    _this->_internal_mutable_processing_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_processing_time());
  }
  if (from._internal_has_recorded_at()) {
    _this->_internal_mutable_recorded_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_recorded_at());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost_usd = from._internal_cost_usd();
  uint32_t raw_cost_usd;
  memcpy(&raw_cost_usd, &tmp_cost_usd, sizeof(tmp_cost_usd));
  if (raw_cost_usd != 0) {
    _this->_internal_set_cost_usd(from._internal_cost_usd());
  }
  switch (from.metric_case()) {
    case kTokens: {
      _this->_internal_mutable_tokens()->::unhinged::common::v1::TokenUsage::MergeFrom(
          from._internal_tokens());
      break;
    }
    case kAudio: {
      _this->_internal_mutable_audio()->::unhinged::common::v1::AudioUsage::MergeFrom(
          from._internal_audio());
      break;
    }
    case kData: {
      _this->_internal_mutable_data()->::unhinged::common::v1::DataUsage::MergeFrom(
          from._internal_data());
      break;
    }
    case kCompute: {
      _this->_internal_mutable_compute()->::unhinged::common::v1::ComputeUsage::MergeFrom(
          from._internal_compute());
      break;
    }
    case METRIC_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UsageMetrics::CopyFrom(const UsageMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.UsageMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsageMetrics::IsInitialized() const {
  return true;
}

void UsageMetrics::InternalSwap(UsageMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UsageMetrics, _impl_.cost_usd_)
      + sizeof(UsageMetrics::_impl_.cost_usd_)
      - PROTOBUF_FIELD_OFFSET(UsageMetrics, _impl_.processing_time_)>(
          reinterpret_cast<char*>(&_impl_.processing_time_),
          reinterpret_cast<char*>(&other->_impl_.processing_time_));
  swap(_impl_.metric_, other->_impl_.metric_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsageMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[5]);
}

// ===================================================================

class TokenUsage::_Internal {
 public:
};

TokenUsage::TokenUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.TokenUsage)
}
TokenUsage::TokenUsage(const TokenUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenUsage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){}
    , decltype(_impl_.prompt_tokens_){}
    , decltype(_impl_.completion_tokens_){}
    , decltype(_impl_.total_tokens_){}
    , decltype(_impl_.cached_tokens_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.prompt_tokens_, &from._impl_.prompt_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cached_tokens_) -
    reinterpret_cast<char*>(&_impl_.prompt_tokens_)) + sizeof(_impl_.cached_tokens_));
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.TokenUsage)
}

inline void TokenUsage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){}
    , decltype(_impl_.prompt_tokens_){0}
    , decltype(_impl_.completion_tokens_){0}
    , decltype(_impl_.total_tokens_){0}
    , decltype(_impl_.cached_tokens_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenUsage::~TokenUsage() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.TokenUsage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_.Destroy();
}

void TokenUsage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.TokenUsage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_.ClearToEmpty();
  ::memset(&_impl_.prompt_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cached_tokens_) -
      reinterpret_cast<char*>(&_impl_.prompt_tokens_)) + sizeof(_impl_.cached_tokens_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenUsage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 prompt_tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.prompt_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 completion_tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.completion_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cached_tokens = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.cached_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.TokenUsage.model"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenUsage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.TokenUsage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 prompt_tokens = 1;
  if (this->_internal_prompt_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_prompt_tokens(), target);
  }

  // int32 completion_tokens = 2;
  if (this->_internal_completion_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_completion_tokens(), target);
  }

  // int32 total_tokens = 3;
  if (this->_internal_total_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_tokens(), target);
  }

  // int32 cached_tokens = 4;
  if (this->_internal_cached_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cached_tokens(), target);
  }

  // string model = 5;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.TokenUsage.model");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_model(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.TokenUsage)
  return target;
}

size_t TokenUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.TokenUsage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model = 5;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // int32 prompt_tokens = 1;
  if (this->_internal_prompt_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prompt_tokens());
  }

  // int32 completion_tokens = 2;
  if (this->_internal_completion_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_completion_tokens());
  }

  // int32 total_tokens = 3;
  if (this->_internal_total_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_tokens());
  }

  // int32 cached_tokens = 4;
  if (this->_internal_cached_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cached_tokens());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenUsage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenUsage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenUsage::GetClassData() const { return &_class_data_; }


void TokenUsage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenUsage*>(&to_msg);
  auto& from = static_cast<const TokenUsage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.TokenUsage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (from._internal_prompt_tokens() != 0) {
    _this->_internal_set_prompt_tokens(from._internal_prompt_tokens());
  }
  if (from._internal_completion_tokens() != 0) {
    _this->_internal_set_completion_tokens(from._internal_completion_tokens());
  }
  if (from._internal_total_tokens() != 0) {
    _this->_internal_set_total_tokens(from._internal_total_tokens());
  }
  if (from._internal_cached_tokens() != 0) {
    _this->_internal_set_cached_tokens(from._internal_cached_tokens());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenUsage::CopyFrom(const TokenUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.TokenUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenUsage::IsInitialized() const {
  return true;
}

void TokenUsage::InternalSwap(TokenUsage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenUsage, _impl_.cached_tokens_)
      + sizeof(TokenUsage::_impl_.cached_tokens_)
      - PROTOBUF_FIELD_OFFSET(TokenUsage, _impl_.prompt_tokens_)>(
          reinterpret_cast<char*>(&_impl_.prompt_tokens_),
          reinterpret_cast<char*>(&other->_impl_.prompt_tokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenUsage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[6]);
}

// ===================================================================

class AudioUsage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const AudioUsage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
AudioUsage::_Internal::duration(const AudioUsage* msg) {
  return *msg->_impl_.duration_;
}
void AudioUsage::clear_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
}
AudioUsage::AudioUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.AudioUsage)
}
AudioUsage::AudioUsage(const AudioUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioUsage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.format_){}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.bytes_processed_){}
    , decltype(_impl_.sample_rate_){}
    , decltype(_impl_.channels_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    _this->_impl_.format_.Set(from._internal_format(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_duration()) {
    _this->_impl_.duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.duration_);
  }
  ::memcpy(&_impl_.bytes_processed_, &from._impl_.bytes_processed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channels_) -
    reinterpret_cast<char*>(&_impl_.bytes_processed_)) + sizeof(_impl_.channels_));
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.AudioUsage)
}

inline void AudioUsage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.format_){}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.bytes_processed_){int64_t{0}}
    , decltype(_impl_.sample_rate_){0}
    , decltype(_impl_.channels_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AudioUsage::~AudioUsage() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.AudioUsage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.format_.Destroy();
  if (this != internal_default_instance()) delete _impl_.duration_;
}

void AudioUsage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.AudioUsage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.format_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
  ::memset(&_impl_.bytes_processed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channels_) -
      reinterpret_cast<char*>(&_impl_.bytes_processed_)) + sizeof(_impl_.channels_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioUsage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_processed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bytes_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sample_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string format = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.AudioUsage.format"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioUsage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.AudioUsage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->_internal_has_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  // int64 bytes_processed = 2;
  if (this->_internal_bytes_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_bytes_processed(), target);
  }

  // int32 sample_rate = 3;
  if (this->_internal_sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sample_rate(), target);
  }

  // int32 channels = 4;
  if (this->_internal_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_channels(), target);
  }

  // string format = 5;
  if (!this->_internal_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.AudioUsage.format");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.AudioUsage)
  return target;
}

size_t AudioUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.AudioUsage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string format = 5;
  if (!this->_internal_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // .google.protobuf.Duration duration = 1;
  if (this->_internal_has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration_);
  }

  // int64 bytes_processed = 2;
  if (this->_internal_bytes_processed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_processed());
  }

  // int32 sample_rate = 3;
  if (this->_internal_sample_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sample_rate());
  }

  // int32 channels = 4;
  if (this->_internal_channels() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channels());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioUsage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioUsage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioUsage::GetClassData() const { return &_class_data_; }


void AudioUsage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioUsage*>(&to_msg);
  auto& from = static_cast<const AudioUsage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.AudioUsage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_format().empty()) {
    _this->_internal_set_format(from._internal_format());
  }
  if (from._internal_has_duration()) {
    _this->_internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_duration());
  }
  if (from._internal_bytes_processed() != 0) {
    _this->_internal_set_bytes_processed(from._internal_bytes_processed());
  }
  if (from._internal_sample_rate() != 0) {
    _this->_internal_set_sample_rate(from._internal_sample_rate());
  }
  if (from._internal_channels() != 0) {
    _this->_internal_set_channels(from._internal_channels());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioUsage::CopyFrom(const AudioUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.AudioUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioUsage::IsInitialized() const {
  return true;
}

void AudioUsage::InternalSwap(AudioUsage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_, lhs_arena,
      &other->_impl_.format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioUsage, _impl_.channels_)
      + sizeof(AudioUsage::_impl_.channels_)
      - PROTOBUF_FIELD_OFFSET(AudioUsage, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioUsage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[7]);
}

// ===================================================================

class DataUsage::_Internal {
 public:
};

DataUsage::DataUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.DataUsage)
}
DataUsage::DataUsage(const DataUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataUsage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bytes_read_){}
    , decltype(_impl_.bytes_written_){}
    , decltype(_impl_.records_processed_){}
    , decltype(_impl_.api_calls_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bytes_read_, &from._impl_.bytes_read_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.api_calls_) -
    reinterpret_cast<char*>(&_impl_.bytes_read_)) + sizeof(_impl_.api_calls_));
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.DataUsage)
}

inline void DataUsage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bytes_read_){int64_t{0}}
    , decltype(_impl_.bytes_written_){int64_t{0}}
    , decltype(_impl_.records_processed_){0}
    , decltype(_impl_.api_calls_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DataUsage::~DataUsage() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.DataUsage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataUsage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.DataUsage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bytes_read_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.api_calls_) -
      reinterpret_cast<char*>(&_impl_.bytes_read_)) + sizeof(_impl_.api_calls_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataUsage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 bytes_read = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_written = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bytes_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 records_processed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.records_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 api_calls = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.api_calls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataUsage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.DataUsage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bytes_read = 1;
  if (this->_internal_bytes_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_bytes_read(), target);
  }

  // int64 bytes_written = 2;
  if (this->_internal_bytes_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_bytes_written(), target);
  }

  // int32 records_processed = 3;
  if (this->_internal_records_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_records_processed(), target);
  }

  // int32 api_calls = 4;
  if (this->_internal_api_calls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_api_calls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.DataUsage)
  return target;
}

size_t DataUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.DataUsage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bytes_read = 1;
  if (this->_internal_bytes_read() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_read());
  }

  // int64 bytes_written = 2;
  if (this->_internal_bytes_written() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_written());
  }

  // int32 records_processed = 3;
  if (this->_internal_records_processed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_records_processed());
  }

  // int32 api_calls = 4;
  if (this->_internal_api_calls() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_api_calls());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataUsage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataUsage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataUsage::GetClassData() const { return &_class_data_; }


void DataUsage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataUsage*>(&to_msg);
  auto& from = static_cast<const DataUsage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.DataUsage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bytes_read() != 0) {
    _this->_internal_set_bytes_read(from._internal_bytes_read());
  }
  if (from._internal_bytes_written() != 0) {
    _this->_internal_set_bytes_written(from._internal_bytes_written());
  }
  if (from._internal_records_processed() != 0) {
    _this->_internal_set_records_processed(from._internal_records_processed());
  }
  if (from._internal_api_calls() != 0) {
    _this->_internal_set_api_calls(from._internal_api_calls());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataUsage::CopyFrom(const DataUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.DataUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataUsage::IsInitialized() const {
  return true;
}

void DataUsage::InternalSwap(DataUsage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataUsage, _impl_.api_calls_)
      + sizeof(DataUsage::_impl_.api_calls_)
      - PROTOBUF_FIELD_OFFSET(DataUsage, _impl_.bytes_read_)>(
          reinterpret_cast<char*>(&_impl_.bytes_read_),
          reinterpret_cast<char*>(&other->_impl_.bytes_read_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataUsage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[8]);
}

// ===================================================================

class ComputeUsage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& cpu_time(const ComputeUsage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
ComputeUsage::_Internal::cpu_time(const ComputeUsage* msg) {
  return *msg->_impl_.cpu_time_;
}
void ComputeUsage::clear_cpu_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.cpu_time_ != nullptr) {
    delete _impl_.cpu_time_;
  }
  _impl_.cpu_time_ = nullptr;
}
ComputeUsage::ComputeUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.ComputeUsage)
}
ComputeUsage::ComputeUsage(const ComputeUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComputeUsage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_time_){nullptr}
    , decltype(_impl_.memory_bytes_){}
    , decltype(_impl_.storage_bytes_){}
    , decltype(_impl_.gpu_seconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cpu_time()) {
    _this->_impl_.cpu_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.cpu_time_);
  }
  ::memcpy(&_impl_.memory_bytes_, &from._impl_.memory_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gpu_seconds_) -
    reinterpret_cast<char*>(&_impl_.memory_bytes_)) + sizeof(_impl_.gpu_seconds_));
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.ComputeUsage)
}

inline void ComputeUsage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_time_){nullptr}
    , decltype(_impl_.memory_bytes_){int64_t{0}}
    , decltype(_impl_.storage_bytes_){int64_t{0}}
    , decltype(_impl_.gpu_seconds_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ComputeUsage::~ComputeUsage() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.ComputeUsage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComputeUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cpu_time_;
}

void ComputeUsage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComputeUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.ComputeUsage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cpu_time_ != nullptr) {
    delete _impl_.cpu_time_;
  }
  _impl_.cpu_time_ = nullptr;
  ::memset(&_impl_.memory_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gpu_seconds_) -
      reinterpret_cast<char*>(&_impl_.memory_bytes_)) + sizeof(_impl_.gpu_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComputeUsage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration cpu_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 memory_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.memory_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 storage_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.storage_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gpu_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.gpu_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComputeUsage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.ComputeUsage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration cpu_time = 1;
  if (this->_internal_has_cpu_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cpu_time(this),
        _Internal::cpu_time(this).GetCachedSize(), target, stream);
  }

  // int64 memory_bytes = 2;
  if (this->_internal_memory_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_memory_bytes(), target);
  }

  // int64 storage_bytes = 3;
  if (this->_internal_storage_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_storage_bytes(), target);
  }

  // int32 gpu_seconds = 4;
  if (this->_internal_gpu_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_gpu_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.ComputeUsage)
  return target;
}

size_t ComputeUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.ComputeUsage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration cpu_time = 1;
  if (this->_internal_has_cpu_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cpu_time_);
  }

  // int64 memory_bytes = 2;
  if (this->_internal_memory_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_memory_bytes());
  }

  // int64 storage_bytes = 3;
  if (this->_internal_storage_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_storage_bytes());
  }

  // int32 gpu_seconds = 4;
  if (this->_internal_gpu_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gpu_seconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComputeUsage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComputeUsage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComputeUsage::GetClassData() const { return &_class_data_; }


void ComputeUsage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComputeUsage*>(&to_msg);
  auto& from = static_cast<const ComputeUsage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.ComputeUsage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cpu_time()) {
    _this->_internal_mutable_cpu_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_cpu_time());
  }
  if (from._internal_memory_bytes() != 0) {
    _this->_internal_set_memory_bytes(from._internal_memory_bytes());
  }
  if (from._internal_storage_bytes() != 0) {
    _this->_internal_set_storage_bytes(from._internal_storage_bytes());
  }
  if (from._internal_gpu_seconds() != 0) {
    _this->_internal_set_gpu_seconds(from._internal_gpu_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComputeUsage::CopyFrom(const ComputeUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.ComputeUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputeUsage::IsInitialized() const {
  return true;
}

void ComputeUsage::InternalSwap(ComputeUsage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComputeUsage, _impl_.gpu_seconds_)
      + sizeof(ComputeUsage::_impl_.gpu_seconds_)
      - PROTOBUF_FIELD_OFFSET(ComputeUsage, _impl_.cpu_time_)>(
          reinterpret_cast<char*>(&_impl_.cpu_time_),
          reinterpret_cast<char*>(&other->_impl_.cpu_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComputeUsage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[9]);
}

// ===================================================================

class Attachment::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const Attachment* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& uploaded_at(const Attachment* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
Attachment::_Internal::metadata(const Attachment* msg) {
  return *msg->_impl_.metadata_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Attachment::_Internal::uploaded_at(const Attachment* msg) {
  return *msg->_impl_.uploaded_at_;
}
void Attachment::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
void Attachment::clear_uploaded_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.uploaded_at_ != nullptr) {
    delete _impl_.uploaded_at_;
  }
  _impl_.uploaded_at_ = nullptr;
}
Attachment::Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.Attachment)
}
Attachment::Attachment(const Attachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Attachment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attachment_id_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.uploaded_by_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.uploaded_at_){nullptr}
    , decltype(_impl_.size_bytes_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attachment_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachment_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attachment_id().empty()) {
    _this->_impl_.attachment_id_.Set(from._internal_attachment_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thumbnail_url().empty()) {
    _this->_impl_.thumbnail_url_.Set(from._internal_thumbnail_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uploaded_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uploaded_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uploaded_by().empty()) {
    _this->_impl_.uploaded_by_.Set(from._internal_uploaded_by(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_uploaded_at()) {
    _this->_impl_.uploaded_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.uploaded_at_);
  }
  ::memcpy(&_impl_.size_bytes_, &from._impl_.size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.size_bytes_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.Attachment)
}

inline void Attachment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attachment_id_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.uploaded_by_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.uploaded_at_){nullptr}
    , decltype(_impl_.size_bytes_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.attachment_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachment_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uploaded_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uploaded_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Attachment::~Attachment() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.Attachment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Attachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attachment_id_.Destroy();
  _impl_.url_.Destroy();
  _impl_.filename_.Destroy();
  _impl_.mime_type_.Destroy();
  _impl_.thumbnail_url_.Destroy();
  _impl_.uploaded_by_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.uploaded_at_;
}

void Attachment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Attachment::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.Attachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attachment_id_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _impl_.filename_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  _impl_.thumbnail_url_.ClearToEmpty();
  _impl_.uploaded_by_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.uploaded_at_ != nullptr) {
    delete _impl_.uploaded_at_;
  }
  _impl_.uploaded_at_ = nullptr;
  ::memset(&_impl_.size_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.size_bytes_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attachment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string attachment_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_attachment_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.Attachment.attachment_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.AttachmentType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::unhinged::common::v1::AttachmentType>(val));
        } else
          goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.Attachment.url"));
        } else
          goto handle_unusual;
        continue;
      // string filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.Attachment.filename"));
        } else
          goto handle_unusual;
        continue;
      // int64 size_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.Attachment.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // string thumbnail_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.Attachment.thumbnail_url"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp uploaded_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_uploaded_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uploaded_by = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_uploaded_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.Attachment.uploaded_by"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Attachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.Attachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string attachment_id = 1;
  if (!this->_internal_attachment_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attachment_id().data(), static_cast<int>(this->_internal_attachment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.Attachment.attachment_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_attachment_id(), target);
  }

  // .unhinged.common.v1.AttachmentType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.Attachment.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // string filename = 4;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.Attachment.filename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filename(), target);
  }

  // int64 size_bytes = 5;
  if (this->_internal_size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_size_bytes(), target);
  }

  // string mime_type = 6;
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.Attachment.mime_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mime_type(), target);
  }

  // string thumbnail_url = 7;
  if (!this->_internal_thumbnail_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.Attachment.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_thumbnail_url(), target);
  }

  // .google.protobuf.Struct metadata = 8;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp uploaded_at = 9;
  if (this->_internal_has_uploaded_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::uploaded_at(this),
        _Internal::uploaded_at(this).GetCachedSize(), target, stream);
  }

  // string uploaded_by = 10;
  if (!this->_internal_uploaded_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uploaded_by().data(), static_cast<int>(this->_internal_uploaded_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.Attachment.uploaded_by");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_uploaded_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.Attachment)
  return target;
}

size_t Attachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.Attachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string attachment_id = 1;
  if (!this->_internal_attachment_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attachment_id());
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string filename = 4;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string mime_type = 6;
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // string thumbnail_url = 7;
  if (!this->_internal_thumbnail_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thumbnail_url());
  }

  // string uploaded_by = 10;
  if (!this->_internal_uploaded_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uploaded_by());
  }

  // .google.protobuf.Struct metadata = 8;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .google.protobuf.Timestamp uploaded_at = 9;
  if (this->_internal_has_uploaded_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uploaded_at_);
  }

  // int64 size_bytes = 5;
  if (this->_internal_size_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size_bytes());
  }

  // .unhinged.common.v1.AttachmentType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Attachment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Attachment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Attachment::GetClassData() const { return &_class_data_; }


void Attachment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Attachment*>(&to_msg);
  auto& from = static_cast<const Attachment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.Attachment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attachment_id().empty()) {
    _this->_internal_set_attachment_id(from._internal_attachment_id());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_thumbnail_url().empty()) {
    _this->_internal_set_thumbnail_url(from._internal_thumbnail_url());
  }
  if (!from._internal_uploaded_by().empty()) {
    _this->_internal_set_uploaded_by(from._internal_uploaded_by());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_uploaded_at()) {
    _this->_internal_mutable_uploaded_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_uploaded_at());
  }
  if (from._internal_size_bytes() != 0) {
    _this->_internal_set_size_bytes(from._internal_size_bytes());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Attachment::CopyFrom(const Attachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.Attachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attachment::IsInitialized() const {
  return true;
}

void Attachment::InternalSwap(Attachment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachment_id_, lhs_arena,
      &other->_impl_.attachment_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_url_, lhs_arena,
      &other->_impl_.thumbnail_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uploaded_by_, lhs_arena,
      &other->_impl_.uploaded_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attachment, _impl_.type_)
      + sizeof(Attachment::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Attachment, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Attachment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[10]);
}

// ===================================================================

class Error::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& debug_info(const Error* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
Error::_Internal::debug_info(const Error* msg) {
  return *msg->_impl_.debug_info_;
}
void Error::clear_debug_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.debug_info_ != nullptr) {
    delete _impl_.debug_info_;
  }
  _impl_.debug_info_ = nullptr;
}
Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Error* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_errors_){from._impl_.field_errors_}
    , decltype(_impl_.message_){}
    , decltype(_impl_.details_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.debug_info_){nullptr}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_details().empty()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_debug_info()) {
    _this->_impl_.debug_info_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.debug_info_);
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.Error)
}

inline void Error::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_errors_){arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.details_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.debug_info_){nullptr}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.Error)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_errors_.~RepeatedPtrField();
  _impl_.message_.Destroy();
  _impl_.details_.Destroy();
  _impl_.request_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.debug_info_;
}

void Error::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_errors_.Clear();
  _impl_.message_.ClearToEmpty();
  _impl_.details_.ClearToEmpty();
  _impl_.request_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.debug_info_ != nullptr) {
    delete _impl_.debug_info_;
  }
  _impl_.debug_info_ = nullptr;
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::unhinged::common::v1::ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.Error.message"));
        } else
          goto handle_unusual;
        continue;
      // string details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.Error.details"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.common.v1.ErrorField field_errors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct debug_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string request_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.Error.request_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.ErrorCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.Error.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string details = 3;
  if (!this->_internal_details().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_details().data(), static_cast<int>(this->_internal_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.Error.details");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_details(), target);
  }

  // repeated .unhinged.common.v1.ErrorField field_errors = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_errors_size()); i < n; i++) {
    const auto& repfield = this->_internal_field_errors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct debug_info = 5;
  if (this->_internal_has_debug_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::debug_info(this),
        _Internal::debug_info(this).GetCachedSize(), target, stream);
  }

  // string request_id = 6;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.Error.request_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.Error)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.common.v1.ErrorField field_errors = 4;
  total_size += 1UL * this->_internal_field_errors_size();
  for (const auto& msg : this->_impl_.field_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string details = 3;
  if (!this->_internal_details().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_details());
  }

  // string request_id = 6;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .google.protobuf.Struct debug_info = 5;
  if (this->_internal_has_debug_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.debug_info_);
  }

  // .unhinged.common.v1.ErrorCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Error::GetClassData() const { return &_class_data_; }


void Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Error*>(&to_msg);
  auto& from = static_cast<const Error&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.Error)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.field_errors_.MergeFrom(from._impl_.field_errors_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_details().empty()) {
    _this->_internal_set_details(from._internal_details());
  }
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_has_debug_info()) {
    _this->_internal_mutable_debug_info()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_debug_info());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.field_errors_.InternalSwap(&other->_impl_.field_errors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Error, _impl_.code_)
      + sizeof(Error::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(Error, _impl_.debug_info_)>(
          reinterpret_cast<char*>(&_impl_.debug_info_),
          reinterpret_cast<char*>(&other->_impl_.debug_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[11]);
}

// ===================================================================

class ErrorField::_Internal {
 public:
};

ErrorField::ErrorField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.ErrorField)
}
ErrorField::ErrorField(const ErrorField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ErrorField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.ErrorField)
}

inline void ErrorField::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ErrorField::~ErrorField() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.ErrorField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ErrorField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_.Destroy();
  _impl_.message_.Destroy();
  _impl_.code_.Destroy();
}

void ErrorField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ErrorField::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.ErrorField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.ErrorField.field"));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.ErrorField.message"));
        } else
          goto handle_unusual;
        continue;
      // string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.ErrorField.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrorField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.ErrorField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.ErrorField.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.ErrorField.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.ErrorField.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.ErrorField)
  return target;
}

size_t ErrorField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.ErrorField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ErrorField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorField::GetClassData() const { return &_class_data_; }


void ErrorField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ErrorField*>(&to_msg);
  auto& from = static_cast<const ErrorField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.ErrorField)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorField::CopyFrom(const ErrorField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.ErrorField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorField::IsInitialized() const {
  return true;
}

void ErrorField::InternalSwap(ErrorField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[12]);
}

// ===================================================================

class Filter::_Internal {
 public:
};

Filter::Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.Filter)
}
Filter::Filter(const Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Filter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.field_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.operator__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.operator__ = from._impl_.operator__;
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.Filter)
}

inline void Filter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.field_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.operator__){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.Filter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
  _impl_.field_.Destroy();
  _impl_.value_.Destroy();
}

void Filter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.Filter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.field_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.operator__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Filter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.Filter.field"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.FilterOperator operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::unhinged::common::v1::FilterOperator>(val));
        } else
          goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.Filter.value"));
        } else
          goto handle_unusual;
        continue;
      // repeated string values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.Filter.values"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Filter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.Filter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.Filter.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // .unhinged.common.v1.FilterOperator operator = 2;
  if (this->_internal_operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operator_(), target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.Filter.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // repeated string values = 4;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.Filter.values");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.Filter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.values_.size());
  for (int i = 0, n = _impl_.values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.values_.Get(i));
  }

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .unhinged.common.v1.FilterOperator operator = 2;
  if (this->_internal_operator_() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Filter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Filter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Filter::GetClassData() const { return &_class_data_; }


void Filter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Filter*>(&to_msg);
  auto& from = static_cast<const Filter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.Filter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_operator_() != 0) {
    _this->_internal_set_operator_(from._internal_operator_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  return true;
}

void Filter::InternalSwap(Filter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.operator__, other->_impl_.operator__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Filter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[13]);
}

// ===================================================================

class HealthCheckRequest::_Internal {
 public:
};

HealthCheckRequest::HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.HealthCheckRequest)
}
HealthCheckRequest::HealthCheckRequest(const HealthCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthCheckRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_){}
    , decltype(_impl_.include_dependencies_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service().empty()) {
    _this->_impl_.service_.Set(from._internal_service(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.include_dependencies_ = from._impl_.include_dependencies_;
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.HealthCheckRequest)
}

inline void HealthCheckRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_){}
    , decltype(_impl_.include_dependencies_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthCheckRequest::~HealthCheckRequest() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.HealthCheckRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthCheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_.Destroy();
}

void HealthCheckRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.HealthCheckRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_.ClearToEmpty();
  _impl_.include_dependencies_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.HealthCheckRequest.service"));
        } else
          goto handle_unusual;
        continue;
      // bool include_dependencies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.include_dependencies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheckRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.HealthCheckRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (!this->_internal_service().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.HealthCheckRequest.service");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service(), target);
  }

  // bool include_dependencies = 2;
  if (this->_internal_include_dependencies() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_include_dependencies(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.HealthCheckRequest)
  return target;
}

size_t HealthCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.HealthCheckRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 1;
  if (!this->_internal_service().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  // bool include_dependencies = 2;
  if (this->_internal_include_dependencies() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthCheckRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckRequest::GetClassData() const { return &_class_data_; }


void HealthCheckRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthCheckRequest*>(&to_msg);
  auto& from = static_cast<const HealthCheckRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.HealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service().empty()) {
    _this->_internal_set_service(from._internal_service());
  }
  if (from._internal_include_dependencies() != 0) {
    _this->_internal_set_include_dependencies(from._internal_include_dependencies());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckRequest::CopyFrom(const HealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.HealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckRequest::IsInitialized() const {
  return true;
}

void HealthCheckRequest::InternalSwap(HealthCheckRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_, lhs_arena,
      &other->_impl_.service_, rhs_arena
  );
  swap(_impl_.include_dependencies_, other->_impl_.include_dependencies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[14]);
}

// ===================================================================

HealthCheckResponse_DetailsEntry_DoNotUse::HealthCheckResponse_DetailsEntry_DoNotUse() {}
HealthCheckResponse_DetailsEntry_DoNotUse::HealthCheckResponse_DetailsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HealthCheckResponse_DetailsEntry_DoNotUse::MergeFrom(const HealthCheckResponse_DetailsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse_DetailsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[15]);
}

// ===================================================================

class HealthCheckResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& checked_at(const HealthCheckResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& response_time(const HealthCheckResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HealthCheckResponse::_Internal::checked_at(const HealthCheckResponse* msg) {
  return *msg->_impl_.checked_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
HealthCheckResponse::_Internal::response_time(const HealthCheckResponse* msg) {
  return *msg->_impl_.response_time_;
}
void HealthCheckResponse::clear_checked_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.checked_at_ != nullptr) {
    delete _impl_.checked_at_;
  }
  _impl_.checked_at_ = nullptr;
}
void HealthCheckResponse::clear_response_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_time_ != nullptr) {
    delete _impl_.response_time_;
  }
  _impl_.response_time_ = nullptr;
}
HealthCheckResponse::HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HealthCheckResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.HealthCheckResponse)
}
HealthCheckResponse::HealthCheckResponse(const HealthCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthCheckResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.details_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.checked_at_){nullptr}
    , decltype(_impl_.response_time_){nullptr}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_checked_at()) {
    _this->_impl_.checked_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.checked_at_);
  }
  if (from._internal_has_response_time()) {
    _this->_impl_.response_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.response_time_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.HealthCheckResponse)
}

inline void HealthCheckResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.details_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.checked_at_){nullptr}
    , decltype(_impl_.response_time_){nullptr}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthCheckResponse::~HealthCheckResponse() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.HealthCheckResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HealthCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.Destruct();
  _impl_.details_.~MapField();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.checked_at_;
  if (this != internal_default_instance()) delete _impl_.response_time_;
}

void HealthCheckResponse::ArenaDtor(void* object) {
  HealthCheckResponse* _this = reinterpret_cast< HealthCheckResponse* >(object);
  _this->_impl_.details_.Destruct();
}
void HealthCheckResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.details_.Clear();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.checked_at_ != nullptr) {
    delete _impl_.checked_at_;
  }
  _impl_.checked_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_time_ != nullptr) {
    delete _impl_.response_time_;
  }
  _impl_.response_time_ = nullptr;
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.HealthStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::unhinged::common::v1::HealthStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.HealthCheckResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.details_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp checked_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_checked_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration response_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheckResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.HealthStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.HealthCheckResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // map<string, string> details = 3;
  if (!this->_internal_details().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = HealthCheckResponse_DetailsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_details();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.common.v1.HealthCheckResponse.DetailsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.common.v1.HealthCheckResponse.DetailsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.Timestamp checked_at = 4;
  if (this->_internal_has_checked_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::checked_at(this),
        _Internal::checked_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration response_time = 5;
  if (this->_internal_has_response_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::response_time(this),
        _Internal::response_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.HealthCheckResponse)
  return target;
}

size_t HealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.HealthCheckResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> details = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_details_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_details().begin();
      it != this->_internal_details().end(); ++it) {
    total_size += HealthCheckResponse_DetailsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp checked_at = 4;
  if (this->_internal_has_checked_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.checked_at_);
  }

  // .google.protobuf.Duration response_time = 5;
  if (this->_internal_has_response_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_time_);
  }

  // .unhinged.common.v1.HealthStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthCheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckResponse::GetClassData() const { return &_class_data_; }


void HealthCheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthCheckResponse*>(&to_msg);
  auto& from = static_cast<const HealthCheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_checked_at()) {
    _this->_internal_mutable_checked_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_checked_at());
  }
  if (from._internal_has_response_time()) {
    _this->_internal_mutable_response_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_response_time());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckResponse::CopyFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckResponse::IsInitialized() const {
  return true;
}

void HealthCheckResponse::InternalSwap(HealthCheckResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.details_.InternalSwap(&other->_impl_.details_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthCheckResponse, _impl_.status_)
      + sizeof(HealthCheckResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(HealthCheckResponse, _impl_.checked_at_)>(
          reinterpret_cast<char*>(&_impl_.checked_at_),
          reinterpret_cast<char*>(&other->_impl_.checked_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[16]);
}

// ===================================================================

class StandardResponse::_Internal {
 public:
  static const ::unhinged::common::v1::Error& error(const StandardResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const StandardResponse* msg);
};

const ::unhinged::common::v1::Error&
StandardResponse::_Internal::error(const StandardResponse* msg) {
  return *msg->_impl_.error_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
StandardResponse::_Internal::metadata(const StandardResponse* msg) {
  return *msg->_impl_.metadata_;
}
void StandardResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
StandardResponse::StandardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.StandardResponse)
}
StandardResponse::StandardResponse(const StandardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StandardResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::unhinged::common::v1::Error(*from._impl_.error_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.StandardResponse)
}

inline void StandardResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StandardResponse::~StandardResponse() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.StandardResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StandardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.request_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void StandardResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StandardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.StandardResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.request_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StandardResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.StandardResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.Error error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string request_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.StandardResponse.request_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StandardResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.StandardResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.StandardResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .unhinged.common.v1.Error error = 3;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 4;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // string request_id = 5;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.StandardResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.StandardResponse)
  return target;
}

size_t StandardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.StandardResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string request_id = 5;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .unhinged.common.v1.Error error = 3;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // .google.protobuf.Struct metadata = 4;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StandardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StandardResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StandardResponse::GetClassData() const { return &_class_data_; }


void StandardResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StandardResponse*>(&to_msg);
  auto& from = static_cast<const StandardResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.StandardResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::unhinged::common::v1::Error::MergeFrom(
        from._internal_error());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StandardResponse::CopyFrom(const StandardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.StandardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandardResponse::IsInitialized() const {
  return true;
}

void StandardResponse::InternalSwap(StandardResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StandardResponse, _impl_.success_)
      + sizeof(StandardResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(StandardResponse, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StandardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[17]);
}

// ===================================================================

class AuditInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const AuditInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& context(const AuditInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AuditInfo::_Internal::timestamp(const AuditInfo* msg) {
  return *msg->_impl_.timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
AuditInfo::_Internal::context(const AuditInfo* msg) {
  return *msg->_impl_.context_;
}
void AuditInfo::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void AuditInfo::clear_context() {
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
}
AuditInfo::AuditInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.common.v1.AuditInfo)
}
AuditInfo::AuditInfo(const AuditInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuditInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.ip_address_){}
    , decltype(_impl_.user_agent_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    _this->_impl_.ip_address_.Set(from._internal_ip_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_agent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_agent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_agent().empty()) {
    _this->_impl_.user_agent_.Set(from._internal_user_agent(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.common.v1.AuditInfo)
}

inline void AuditInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.ip_address_){}
    , decltype(_impl_.user_agent_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_agent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_agent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuditInfo::~AuditInfo() {
  // @@protoc_insertion_point(destructor:unhinged.common.v1.AuditInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuditInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.ip_address_.Destroy();
  _impl_.user_agent_.Destroy();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.context_;
}

void AuditInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuditInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.common.v1.AuditInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.ip_address_.ClearToEmpty();
  _impl_.user_agent_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuditInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.AuditInfo.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.AuditInfo.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string ip_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.AuditInfo.ip_address"));
        } else
          goto handle_unusual;
        continue;
      // string user_agent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_agent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.AuditInfo.user_agent"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string action = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.common.v1.AuditInfo.action"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct context = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuditInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.common.v1.AuditInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.AuditInfo.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.AuditInfo.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // string ip_address = 3;
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.AuditInfo.ip_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip_address(), target);
  }

  // string user_agent = 4;
  if (!this->_internal_user_agent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_agent().data(), static_cast<int>(this->_internal_user_agent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.AuditInfo.user_agent");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_agent(), target);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string action = 6;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.common.v1.AuditInfo.action");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_action(), target);
  }

  // .google.protobuf.Struct context = 7;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.common.v1.AuditInfo)
  return target;
}

size_t AuditInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.common.v1.AuditInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string ip_address = 3;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // string user_agent = 4;
  if (!this->_internal_user_agent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_agent());
  }

  // string action = 6;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .google.protobuf.Struct context = 7;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuditInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuditInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuditInfo::GetClassData() const { return &_class_data_; }


void AuditInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuditInfo*>(&to_msg);
  auto& from = static_cast<const AuditInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.common.v1.AuditInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (!from._internal_user_agent().empty()) {
    _this->_internal_set_user_agent(from._internal_user_agent());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuditInfo::CopyFrom(const AuditInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.common.v1.AuditInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuditInfo::IsInitialized() const {
  return true;
}

void AuditInfo::InternalSwap(AuditInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_address_, lhs_arena,
      &other->_impl_.ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_agent_, lhs_arena,
      &other->_impl_.user_agent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuditInfo, _impl_.context_)
      + sizeof(AuditInfo::_impl_.context_)
      - PROTOBUF_FIELD_OFFSET(AuditInfo, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuditInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
}  // namespace unhinged
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::ResourceMetadata*
Arena::CreateMaybeMessage< ::unhinged::common::v1::ResourceMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::ResourceMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::ResourceReference*
Arena::CreateMaybeMessage< ::unhinged::common::v1::ResourceReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::ResourceReference >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::PaginationRequest*
Arena::CreateMaybeMessage< ::unhinged::common::v1::PaginationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::PaginationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::PaginationResponse*
Arena::CreateMaybeMessage< ::unhinged::common::v1::PaginationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::PaginationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::StreamChunk*
Arena::CreateMaybeMessage< ::unhinged::common::v1::StreamChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::StreamChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::UsageMetrics*
Arena::CreateMaybeMessage< ::unhinged::common::v1::UsageMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::UsageMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::TokenUsage*
Arena::CreateMaybeMessage< ::unhinged::common::v1::TokenUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::TokenUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::AudioUsage*
Arena::CreateMaybeMessage< ::unhinged::common::v1::AudioUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::AudioUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::DataUsage*
Arena::CreateMaybeMessage< ::unhinged::common::v1::DataUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::DataUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::ComputeUsage*
Arena::CreateMaybeMessage< ::unhinged::common::v1::ComputeUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::ComputeUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::Attachment*
Arena::CreateMaybeMessage< ::unhinged::common::v1::Attachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::Attachment >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::Error*
Arena::CreateMaybeMessage< ::unhinged::common::v1::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::ErrorField*
Arena::CreateMaybeMessage< ::unhinged::common::v1::ErrorField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::ErrorField >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::Filter*
Arena::CreateMaybeMessage< ::unhinged::common::v1::Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::HealthCheckRequest*
Arena::CreateMaybeMessage< ::unhinged::common::v1::HealthCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::HealthCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::HealthCheckResponse_DetailsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::common::v1::HealthCheckResponse_DetailsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::HealthCheckResponse_DetailsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::HealthCheckResponse*
Arena::CreateMaybeMessage< ::unhinged::common::v1::HealthCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::HealthCheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::StandardResponse*
Arena::CreateMaybeMessage< ::unhinged::common::v1::StandardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::StandardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::common::v1::AuditInfo*
Arena::CreateMaybeMessage< ::unhinged::common::v1::AuditInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::common::v1::AuditInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
