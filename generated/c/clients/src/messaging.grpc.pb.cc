// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messaging.proto

#include "messaging.pb.h"
#include "messaging.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace unhinged {
namespace messaging {

static const char* MessagingService_method_names[] = {
  "/unhinged.messaging.MessagingService/SendMessage",
  "/unhinged.messaging.MessagingService/SendMessages",
  "/unhinged.messaging.MessagingService/ReceiveMessages",
  "/unhinged.messaging.MessagingService/AcknowledgeMessage",
  "/unhinged.messaging.MessagingService/SubscribeToMessages",
};

std::unique_ptr< MessagingService::Stub> MessagingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MessagingService::Stub> stub(new MessagingService::Stub(channel, options));
  return stub;
}

MessagingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendMessage_(MessagingService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMessages_(MessagingService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReceiveMessages_(MessagingService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AcknowledgeMessage_(MessagingService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeToMessages_(MessagingService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MessagingService::Stub::SendMessage(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest& request, ::unhinged::messaging::SendMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::messaging::SendMessageRequest, ::unhinged::messaging::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void MessagingService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest* request, ::unhinged::messaging::SendMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::messaging::SendMessageRequest, ::unhinged::messaging::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest* request, ::unhinged::messaging::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessageResponse>* MessagingService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::messaging::SendMessageResponse, ::unhinged::messaging::SendMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessageResponse>* MessagingService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::SendMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest& request, ::unhinged::messaging::SendMessagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::messaging::SendMessagesRequest, ::unhinged::messaging::SendMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessages_, context, request, response);
}

void MessagingService::Stub::async::SendMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest* request, ::unhinged::messaging::SendMessagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::messaging::SendMessagesRequest, ::unhinged::messaging::SendMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessages_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::SendMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest* request, ::unhinged::messaging::SendMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessagesResponse>* MessagingService::Stub::PrepareAsyncSendMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::messaging::SendMessagesResponse, ::unhinged::messaging::SendMessagesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::messaging::SendMessagesResponse>* MessagingService::Stub::AsyncSendMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SendMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::ReceiveMessages(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest& request, ::unhinged::messaging::ReceiveMessagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::messaging::ReceiveMessagesRequest, ::unhinged::messaging::ReceiveMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReceiveMessages_, context, request, response);
}

void MessagingService::Stub::async::ReceiveMessages(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest* request, ::unhinged::messaging::ReceiveMessagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::messaging::ReceiveMessagesRequest, ::unhinged::messaging::ReceiveMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReceiveMessages_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::ReceiveMessages(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest* request, ::unhinged::messaging::ReceiveMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReceiveMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::messaging::ReceiveMessagesResponse>* MessagingService::Stub::PrepareAsyncReceiveMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::messaging::ReceiveMessagesResponse, ::unhinged::messaging::ReceiveMessagesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReceiveMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::messaging::ReceiveMessagesResponse>* MessagingService::Stub::AsyncReceiveMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::ReceiveMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReceiveMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::AcknowledgeMessage(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest& request, ::unhinged::messaging::AcknowledgeMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::messaging::AcknowledgeMessageRequest, ::unhinged::messaging::AcknowledgeMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AcknowledgeMessage_, context, request, response);
}

void MessagingService::Stub::async::AcknowledgeMessage(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest* request, ::unhinged::messaging::AcknowledgeMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::messaging::AcknowledgeMessageRequest, ::unhinged::messaging::AcknowledgeMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AcknowledgeMessage_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::AcknowledgeMessage(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest* request, ::unhinged::messaging::AcknowledgeMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AcknowledgeMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::messaging::AcknowledgeMessageResponse>* MessagingService::Stub::PrepareAsyncAcknowledgeMessageRaw(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::messaging::AcknowledgeMessageResponse, ::unhinged::messaging::AcknowledgeMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AcknowledgeMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::messaging::AcknowledgeMessageResponse>* MessagingService::Stub::AsyncAcknowledgeMessageRaw(::grpc::ClientContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAcknowledgeMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::unhinged::messaging::MessageStreamResponse>* MessagingService::Stub::SubscribeToMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::unhinged::messaging::MessageStreamResponse>::Create(channel_.get(), rpcmethod_SubscribeToMessages_, context, request);
}

void MessagingService::Stub::async::SubscribeToMessages(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest* request, ::grpc::ClientReadReactor< ::unhinged::messaging::MessageStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::unhinged::messaging::MessageStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeToMessages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::unhinged::messaging::MessageStreamResponse>* MessagingService::Stub::AsyncSubscribeToMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::messaging::MessageStreamResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeToMessages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::unhinged::messaging::MessageStreamResponse>* MessagingService::Stub::PrepareAsyncSubscribeToMessagesRaw(::grpc::ClientContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::messaging::MessageStreamResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeToMessages_, context, request, false, nullptr);
}

MessagingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::unhinged::messaging::SendMessageRequest, ::unhinged::messaging::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::messaging::SendMessageRequest* req,
             ::unhinged::messaging::SendMessageResponse* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::unhinged::messaging::SendMessagesRequest, ::unhinged::messaging::SendMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::messaging::SendMessagesRequest* req,
             ::unhinged::messaging::SendMessagesResponse* resp) {
               return service->SendMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::unhinged::messaging::ReceiveMessagesRequest, ::unhinged::messaging::ReceiveMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::messaging::ReceiveMessagesRequest* req,
             ::unhinged::messaging::ReceiveMessagesResponse* resp) {
               return service->ReceiveMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::unhinged::messaging::AcknowledgeMessageRequest, ::unhinged::messaging::AcknowledgeMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::messaging::AcknowledgeMessageRequest* req,
             ::unhinged::messaging::AcknowledgeMessageResponse* resp) {
               return service->AcknowledgeMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MessagingService::Service, ::unhinged::messaging::SubscribeToMessagesRequest, ::unhinged::messaging::MessageStreamResponse>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::messaging::SubscribeToMessagesRequest* req,
             ::grpc::ServerWriter<::unhinged::messaging::MessageStreamResponse>* writer) {
               return service->SubscribeToMessages(ctx, req, writer);
             }, this)));
}

MessagingService::Service::~Service() {
}

::grpc::Status MessagingService::Service::SendMessage(::grpc::ServerContext* context, const ::unhinged::messaging::SendMessageRequest* request, ::unhinged::messaging::SendMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::SendMessages(::grpc::ServerContext* context, const ::unhinged::messaging::SendMessagesRequest* request, ::unhinged::messaging::SendMessagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::ReceiveMessages(::grpc::ServerContext* context, const ::unhinged::messaging::ReceiveMessagesRequest* request, ::unhinged::messaging::ReceiveMessagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::AcknowledgeMessage(::grpc::ServerContext* context, const ::unhinged::messaging::AcknowledgeMessageRequest* request, ::unhinged::messaging::AcknowledgeMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::SubscribeToMessages(::grpc::ServerContext* context, const ::unhinged::messaging::SubscribeToMessagesRequest* request, ::grpc::ServerWriter< ::unhinged::messaging::MessageStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace unhinged
}  // namespace messaging

