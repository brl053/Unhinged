// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: llm.proto

#include "llm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace unhinged {
namespace llm {
namespace v1 {
PROTOBUF_CONSTEXPR CompletionRequest::CompletionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.context_options_)*/nullptr
  , /*decltype(_impl_.include_context_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompletionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompletionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompletionRequestDefaultTypeInternal() {}
  union {
    CompletionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompletionRequestDefaultTypeInternal _CompletionRequest_default_instance_;
PROTOBUF_CONSTEXPR CompletionOptions::CompletionOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_sequences_)*/{}
  , /*decltype(_impl_.tools_)*/{}
  , /*decltype(_impl_.tool_choice_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_tokens_)*/0
  , /*decltype(_impl_.temperature_)*/0
  , /*decltype(_impl_.top_p_)*/0
  , /*decltype(_impl_.frequency_penalty_)*/0
  , /*decltype(_impl_.presence_penalty_)*/0
  , /*decltype(_impl_.stream_)*/false
  , /*decltype(_impl_.include_usage_)*/false
  , /*decltype(_impl_.enable_tools_)*/false
  , /*decltype(_impl_.n_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompletionOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompletionOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompletionOptionsDefaultTypeInternal() {}
  union {
    CompletionOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompletionOptionsDefaultTypeInternal _CompletionOptions_default_instance_;
PROTOBUF_CONSTEXPR ContextOptions::ContextOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.document_types_)*/{}
  , /*decltype(_impl_.max_context_tokens_)*/0
  , /*decltype(_impl_.relevance_threshold_)*/0
  , /*decltype(_impl_.include_metadata_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContextOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContextOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContextOptionsDefaultTypeInternal() {}
  union {
    ContextOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContextOptionsDefaultTypeInternal _ContextOptions_default_instance_;
PROTOBUF_CONSTEXPR ToolDefinition::ToolDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parameters_schema_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.required_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ToolDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolDefinitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolDefinitionDefaultTypeInternal() {}
  union {
    ToolDefinition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolDefinitionDefaultTypeInternal _ToolDefinition_default_instance_;
PROTOBUF_CONSTEXPR CompletionResponse::CompletionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.choices_)*/{}
  , /*decltype(_impl_.completion_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.usage_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompletionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompletionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompletionResponseDefaultTypeInternal() {}
  union {
    CompletionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompletionResponseDefaultTypeInternal _CompletionResponse_default_instance_;
PROTOBUF_CONSTEXPR CompletionChoice::CompletionChoice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.finish_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.logprobs_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompletionChoiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompletionChoiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompletionChoiceDefaultTypeInternal() {}
  union {
    CompletionChoice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompletionChoiceDefaultTypeInternal _CompletionChoice_default_instance_;
PROTOBUF_CONSTEXPR CompletionMetadata::CompletionMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.context_document_ids_)*/{}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.provider_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.processing_time_ms_)*/0
  , /*decltype(_impl_.context_documents_used_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompletionMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompletionMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompletionMetadataDefaultTypeInternal() {}
  union {
    CompletionMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompletionMetadataDefaultTypeInternal _CompletionMetadata_default_instance_;
PROTOBUF_CONSTEXPR Model::Model(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.provider_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.capabilities_)*/nullptr
  , /*decltype(_impl_.pricing_)*/nullptr
  , /*decltype(_impl_.limits_)*/nullptr
  , /*decltype(_impl_.is_available_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelDefaultTypeInternal() {}
  union {
    Model _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelDefaultTypeInternal _Model_default_instance_;
PROTOBUF_CONSTEXPR ModelCapabilities::ModelCapabilities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.supported_languages_)*/{}
  , /*decltype(_impl_.input_modalities_)*/{}
  , /*decltype(_impl_.output_modalities_)*/{}
  , /*decltype(_impl_.supports_streaming_)*/false
  , /*decltype(_impl_.supports_vision_)*/false
  , /*decltype(_impl_.supports_function_calling_)*/false
  , /*decltype(_impl_.supports_json_mode_)*/false
  , /*decltype(_impl_.supports_system_messages_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelCapabilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelCapabilitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelCapabilitiesDefaultTypeInternal() {}
  union {
    ModelCapabilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelCapabilitiesDefaultTypeInternal _ModelCapabilities_default_instance_;
PROTOBUF_CONSTEXPR ModelPricing::ModelPricing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_cost_per_1k_tokens_)*/0
  , /*decltype(_impl_.output_cost_per_1k_tokens_)*/0
  , /*decltype(_impl_.has_free_tier_)*/false
  , /*decltype(_impl_.free_tier_limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelPricingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelPricingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelPricingDefaultTypeInternal() {}
  union {
    ModelPricing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelPricingDefaultTypeInternal _ModelPricing_default_instance_;
PROTOBUF_CONSTEXPR ModelLimits::ModelLimits(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_context_tokens_)*/0
  , /*decltype(_impl_.max_output_tokens_)*/0
  , /*decltype(_impl_.max_requests_per_minute_)*/0
  , /*decltype(_impl_.max_tokens_per_minute_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelLimitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelLimitsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelLimitsDefaultTypeInternal() {}
  union {
    ModelLimits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelLimitsDefaultTypeInternal _ModelLimits_default_instance_;
PROTOBUF_CONSTEXPR CompletionChunkPayload::CompletionChunkPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tool_calls_)*/{}
  , /*decltype(_impl_.completion_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.finish_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usage_)*/nullptr
  , /*decltype(_impl_.choice_index_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompletionChunkPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompletionChunkPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompletionChunkPayloadDefaultTypeInternal() {}
  union {
    CompletionChunkPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompletionChunkPayloadDefaultTypeInternal _CompletionChunkPayload_default_instance_;
PROTOBUF_CONSTEXPR ListModelsRequest::ListModelsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filters_)*/{}
  , /*decltype(_impl_.provider_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.available_only_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListModelsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListModelsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListModelsRequestDefaultTypeInternal() {}
  union {
    ListModelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListModelsRequestDefaultTypeInternal _ListModelsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListModelsResponse::ListModelsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.models_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListModelsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListModelsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListModelsResponseDefaultTypeInternal() {}
  union {
    ListModelsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListModelsResponseDefaultTypeInternal _ListModelsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetModelRequest::GetModelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.include_pricing_)*/false
  , /*decltype(_impl_.include_capabilities_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetModelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModelRequestDefaultTypeInternal() {}
  union {
    GetModelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModelRequestDefaultTypeInternal _GetModelRequest_default_instance_;
PROTOBUF_CONSTEXPR GetModelResponse::GetModelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.model_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetModelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModelResponseDefaultTypeInternal() {}
  union {
    GetModelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModelResponseDefaultTypeInternal _GetModelResponse_default_instance_;
PROTOBUF_CONSTEXPR TokenEstimationRequest::TokenEstimationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.include_context_)*/false
  , /*decltype(_impl_.input_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TokenEstimationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenEstimationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenEstimationRequestDefaultTypeInternal() {}
  union {
    TokenEstimationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenEstimationRequestDefaultTypeInternal _TokenEstimationRequest_default_instance_;
PROTOBUF_CONSTEXPR ChatMessageList::ChatMessageList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatMessageListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageListDefaultTypeInternal() {}
  union {
    ChatMessageList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageListDefaultTypeInternal _ChatMessageList_default_instance_;
PROTOBUF_CONSTEXPR TokenEstimationResponse::TokenEstimationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.usage_)*/nullptr
  , /*decltype(_impl_.breakdown_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenEstimationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenEstimationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenEstimationResponseDefaultTypeInternal() {}
  union {
    TokenEstimationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenEstimationResponseDefaultTypeInternal _TokenEstimationResponse_default_instance_;
PROTOBUF_CONSTEXPR TokenBreakdown::TokenBreakdown(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.context_documents_)*/{}
  , /*decltype(_impl_.system_tokens_)*/0
  , /*decltype(_impl_.user_tokens_)*/0
  , /*decltype(_impl_.assistant_tokens_)*/0
  , /*decltype(_impl_.context_tokens_)*/0
  , /*decltype(_impl_.tool_tokens_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenBreakdownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenBreakdownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenBreakdownDefaultTypeInternal() {}
  union {
    TokenBreakdown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenBreakdownDefaultTypeInternal _TokenBreakdown_default_instance_;
PROTOBUF_CONSTEXPR DocumentTokens::DocumentTokens(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.document_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.document_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_count_)*/0
  , /*decltype(_impl_.relevance_score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DocumentTokensDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentTokensDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentTokensDefaultTypeInternal() {}
  union {
    DocumentTokens _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentTokensDefaultTypeInternal _DocumentTokens_default_instance_;
PROTOBUF_CONSTEXPR TokenCountRequest::TokenCountRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenCountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenCountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenCountRequestDefaultTypeInternal() {}
  union {
    TokenCountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenCountRequestDefaultTypeInternal _TokenCountRequest_default_instance_;
PROTOBUF_CONSTEXPR TokenCountResponse::TokenCountResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tokens_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.token_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenCountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenCountResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenCountResponseDefaultTypeInternal() {}
  union {
    TokenCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenCountResponseDefaultTypeInternal _TokenCountResponse_default_instance_;
PROTOBUF_CONSTEXPR TokenInfo::TokenInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_id_)*/0
  , /*decltype(_impl_.probability_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenInfoDefaultTypeInternal() {}
  union {
    TokenInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenInfoDefaultTypeInternal _TokenInfo_default_instance_;
}  // namespace v1
}  // namespace llm
}  // namespace unhinged
static ::_pb::Metadata file_level_metadata_llm_2eproto[24];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_llm_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_llm_2eproto = nullptr;

const uint32_t TableStruct_llm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionRequest, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionRequest, _impl_.messages_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionRequest, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionRequest, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionRequest, _impl_.include_context_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionRequest, _impl_.context_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionOptions, _impl_.max_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionOptions, _impl_.temperature_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionOptions, _impl_.top_p_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionOptions, _impl_.frequency_penalty_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionOptions, _impl_.presence_penalty_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionOptions, _impl_.stop_sequences_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionOptions, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionOptions, _impl_.include_usage_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionOptions, _impl_.n_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionOptions, _impl_.enable_tools_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionOptions, _impl_.tools_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionOptions, _impl_.tool_choice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ContextOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ContextOptions, _impl_.max_context_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ContextOptions, _impl_.relevance_threshold_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ContextOptions, _impl_.document_types_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ContextOptions, _impl_.include_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ToolDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ToolDefinition, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ToolDefinition, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ToolDefinition, _impl_.parameters_schema_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ToolDefinition, _impl_.required_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionResponse, _impl_.completion_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionResponse, _impl_.choices_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionResponse, _impl_.usage_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionResponse, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionChoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionChoice, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionChoice, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionChoice, _impl_.finish_reason_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionChoice, _impl_.logprobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionMetadata, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionMetadata, _impl_.provider_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionMetadata, _impl_.processing_time_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionMetadata, _impl_.context_documents_used_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionMetadata, _impl_.context_document_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::Model, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::Model, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::Model, _impl_.provider_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::Model, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::Model, _impl_.capabilities_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::Model, _impl_.pricing_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::Model, _impl_.limits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::Model, _impl_.is_available_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::Model, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelCapabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelCapabilities, _impl_.supports_streaming_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelCapabilities, _impl_.supports_vision_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelCapabilities, _impl_.supports_function_calling_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelCapabilities, _impl_.supports_json_mode_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelCapabilities, _impl_.supports_system_messages_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelCapabilities, _impl_.supported_languages_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelCapabilities, _impl_.input_modalities_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelCapabilities, _impl_.output_modalities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelPricing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelPricing, _impl_.input_cost_per_1k_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelPricing, _impl_.output_cost_per_1k_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelPricing, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelPricing, _impl_.has_free_tier_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelPricing, _impl_.free_tier_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelLimits, _impl_.max_context_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelLimits, _impl_.max_output_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelLimits, _impl_.max_requests_per_minute_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ModelLimits, _impl_.max_tokens_per_minute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionChunkPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionChunkPayload, _impl_.completion_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionChunkPayload, _impl_.choice_index_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionChunkPayload, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionChunkPayload, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionChunkPayload, _impl_.tool_calls_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionChunkPayload, _impl_.finish_reason_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::CompletionChunkPayload, _impl_.usage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ListModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ListModelsRequest, _impl_.provider_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ListModelsRequest, _impl_.available_only_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ListModelsRequest, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ListModelsRequest, _impl_.filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ListModelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ListModelsResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ListModelsResponse, _impl_.models_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ListModelsResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::GetModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::GetModelRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::GetModelRequest, _impl_.include_pricing_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::GetModelRequest, _impl_.include_capabilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::GetModelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::GetModelResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::GetModelResponse, _impl_.model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenEstimationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenEstimationRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenEstimationRequest, _impl_.model_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenEstimationRequest, _impl_.include_context_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenEstimationRequest, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenEstimationRequest, _impl_.input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ChatMessageList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::ChatMessageList, _impl_.messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenEstimationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenEstimationResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenEstimationResponse, _impl_.usage_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenEstimationResponse, _impl_.breakdown_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenBreakdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenBreakdown, _impl_.system_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenBreakdown, _impl_.user_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenBreakdown, _impl_.assistant_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenBreakdown, _impl_.context_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenBreakdown, _impl_.tool_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenBreakdown, _impl_.context_documents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::DocumentTokens, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::DocumentTokens, _impl_.document_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::DocumentTokens, _impl_.document_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::DocumentTokens, _impl_.token_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::DocumentTokens, _impl_.relevance_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenCountRequest, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenCountRequest, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenCountResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenCountResponse, _impl_.token_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenCountResponse, _impl_.tokens_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenInfo, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenInfo, _impl_.token_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::llm::v1::TokenInfo, _impl_.probability_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::unhinged::llm::v1::CompletionRequest)},
  { 12, -1, -1, sizeof(::unhinged::llm::v1::CompletionOptions)},
  { 30, -1, -1, sizeof(::unhinged::llm::v1::ContextOptions)},
  { 40, -1, -1, sizeof(::unhinged::llm::v1::ToolDefinition)},
  { 50, -1, -1, sizeof(::unhinged::llm::v1::CompletionResponse)},
  { 61, -1, -1, sizeof(::unhinged::llm::v1::CompletionChoice)},
  { 71, -1, -1, sizeof(::unhinged::llm::v1::CompletionMetadata)},
  { 82, -1, -1, sizeof(::unhinged::llm::v1::Model)},
  { 97, -1, -1, sizeof(::unhinged::llm::v1::ModelCapabilities)},
  { 111, -1, -1, sizeof(::unhinged::llm::v1::ModelPricing)},
  { 122, -1, -1, sizeof(::unhinged::llm::v1::ModelLimits)},
  { 132, -1, -1, sizeof(::unhinged::llm::v1::CompletionChunkPayload)},
  { 145, -1, -1, sizeof(::unhinged::llm::v1::ListModelsRequest)},
  { 155, -1, -1, sizeof(::unhinged::llm::v1::ListModelsResponse)},
  { 164, -1, -1, sizeof(::unhinged::llm::v1::GetModelRequest)},
  { 173, -1, -1, sizeof(::unhinged::llm::v1::GetModelResponse)},
  { 181, -1, -1, sizeof(::unhinged::llm::v1::TokenEstimationRequest)},
  { 193, -1, -1, sizeof(::unhinged::llm::v1::ChatMessageList)},
  { 200, -1, -1, sizeof(::unhinged::llm::v1::TokenEstimationResponse)},
  { 209, -1, -1, sizeof(::unhinged::llm::v1::TokenBreakdown)},
  { 221, -1, -1, sizeof(::unhinged::llm::v1::DocumentTokens)},
  { 231, -1, -1, sizeof(::unhinged::llm::v1::TokenCountRequest)},
  { 239, -1, -1, sizeof(::unhinged::llm::v1::TokenCountResponse)},
  { 248, -1, -1, sizeof(::unhinged::llm::v1::TokenInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::unhinged::llm::v1::_CompletionRequest_default_instance_._instance,
  &::unhinged::llm::v1::_CompletionOptions_default_instance_._instance,
  &::unhinged::llm::v1::_ContextOptions_default_instance_._instance,
  &::unhinged::llm::v1::_ToolDefinition_default_instance_._instance,
  &::unhinged::llm::v1::_CompletionResponse_default_instance_._instance,
  &::unhinged::llm::v1::_CompletionChoice_default_instance_._instance,
  &::unhinged::llm::v1::_CompletionMetadata_default_instance_._instance,
  &::unhinged::llm::v1::_Model_default_instance_._instance,
  &::unhinged::llm::v1::_ModelCapabilities_default_instance_._instance,
  &::unhinged::llm::v1::_ModelPricing_default_instance_._instance,
  &::unhinged::llm::v1::_ModelLimits_default_instance_._instance,
  &::unhinged::llm::v1::_CompletionChunkPayload_default_instance_._instance,
  &::unhinged::llm::v1::_ListModelsRequest_default_instance_._instance,
  &::unhinged::llm::v1::_ListModelsResponse_default_instance_._instance,
  &::unhinged::llm::v1::_GetModelRequest_default_instance_._instance,
  &::unhinged::llm::v1::_GetModelResponse_default_instance_._instance,
  &::unhinged::llm::v1::_TokenEstimationRequest_default_instance_._instance,
  &::unhinged::llm::v1::_ChatMessageList_default_instance_._instance,
  &::unhinged::llm::v1::_TokenEstimationResponse_default_instance_._instance,
  &::unhinged::llm::v1::_TokenBreakdown_default_instance_._instance,
  &::unhinged::llm::v1::_DocumentTokens_default_instance_._instance,
  &::unhinged::llm::v1::_TokenCountRequest_default_instance_._instance,
  &::unhinged::llm::v1::_TokenCountResponse_default_instance_._instance,
  &::unhinged::llm::v1::_TokenInfo_default_instance_._instance,
};

const char descriptor_table_protodef_llm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tllm.proto\022\017unhinged.llm.v1\032\014common.pro"
  "to\032\nchat.proto\"\357\001\n\021CompletionRequest\022\r\n\005"
  "model\030\001 \001(\t\022/\n\010messages\030\002 \003(\0132\035.unhinged"
  ".chat.v1.ChatMessage\0223\n\007options\030\003 \001(\0132\"."
  "unhinged.llm.v1.CompletionOptions\022\022\n\nses"
  "sion_id\030\004 \001(\t\022\027\n\017include_context\030\005 \001(\010\0228"
  "\n\017context_options\030\006 \001(\0132\037.unhinged.llm.v"
  "1.ContextOptions\"\245\002\n\021CompletionOptions\022\022"
  "\n\nmax_tokens\030\001 \001(\005\022\023\n\013temperature\030\002 \001(\002\022"
  "\r\n\005top_p\030\003 \001(\002\022\031\n\021frequency_penalty\030\004 \001("
  "\002\022\030\n\020presence_penalty\030\005 \001(\002\022\026\n\016stop_sequ"
  "ences\030\006 \003(\t\022\016\n\006stream\030\007 \001(\010\022\025\n\rinclude_u"
  "sage\030\010 \001(\010\022\t\n\001n\030\t \001(\005\022\024\n\014enable_tools\030\n "
  "\001(\010\022.\n\005tools\030\013 \003(\0132\037.unhinged.llm.v1.Too"
  "lDefinition\022\023\n\013tool_choice\030\014 \001(\t\"{\n\016Cont"
  "extOptions\022\032\n\022max_context_tokens\030\001 \001(\005\022\033"
  "\n\023relevance_threshold\030\002 \001(\002\022\026\n\016document_"
  "types\030\003 \003(\t\022\030\n\020include_metadata\030\004 \001(\010\"`\n"
  "\016ToolDefinition\022\014\n\004name\030\001 \001(\t\022\023\n\013descrip"
  "tion\030\002 \001(\t\022\031\n\021parameters_schema\030\003 \001(\t\022\020\n"
  "\010required\030\004 \001(\010\"\377\001\n\022CompletionResponse\0226"
  "\n\010response\030\001 \001(\0132$.unhinged.common.v1.St"
  "andardResponse\022\025\n\rcompletion_id\030\002 \001(\t\0222\n"
  "\007choices\030\003 \003(\0132!.unhinged.llm.v1.Complet"
  "ionChoice\022/\n\005usage\030\004 \001(\0132 .unhinged.comm"
  "on.v1.UsageMetrics\0225\n\010metadata\030\005 \001(\0132#.u"
  "nhinged.llm.v1.CompletionMetadata\"z\n\020Com"
  "pletionChoice\022\r\n\005index\030\001 \001(\005\022.\n\007message\030"
  "\002 \001(\0132\035.unhinged.chat.v1.ChatMessage\022\025\n\r"
  "finish_reason\030\003 \001(\t\022\020\n\010logprobs\030\004 \001(\002\"\217\001"
  "\n\022CompletionMetadata\022\r\n\005model\030\001 \001(\t\022\020\n\010p"
  "rovider\030\002 \001(\t\022\032\n\022processing_time_ms\030\003 \001("
  "\002\022\036\n\026context_documents_used\030\004 \001(\005\022\034\n\024con"
  "text_document_ids\030\005 \003(\t\"\262\002\n\005Model\0226\n\010met"
  "adata\030\001 \001(\0132$.unhinged.common.v1.Resourc"
  "eMetadata\022\014\n\004name\030\002 \001(\t\022\020\n\010provider\030\003 \001("
  "\t\022\023\n\013description\030\004 \001(\t\0228\n\014capabilities\030\005"
  " \001(\0132\".unhinged.llm.v1.ModelCapabilities"
  "\022.\n\007pricing\030\006 \001(\0132\035.unhinged.llm.v1.Mode"
  "lPricing\022,\n\006limits\030\007 \001(\0132\034.unhinged.llm."
  "v1.ModelLimits\022\024\n\014is_available\030\010 \001(\010\022\016\n\006"
  "status\030\t \001(\t\"\373\001\n\021ModelCapabilities\022\032\n\022su"
  "pports_streaming\030\001 \001(\010\022\027\n\017supports_visio"
  "n\030\002 \001(\010\022!\n\031supports_function_calling\030\003 \001"
  "(\010\022\032\n\022supports_json_mode\030\004 \001(\010\022 \n\030suppor"
  "ts_system_messages\030\005 \001(\010\022\033\n\023supported_la"
  "nguages\030\006 \003(\t\022\030\n\020input_modalities\030\007 \003(\t\022"
  "\031\n\021output_modalities\030\010 \003(\t\"\225\001\n\014ModelPric"
  "ing\022 \n\030input_cost_per_1k_tokens\030\001 \001(\002\022!\n"
  "\031output_cost_per_1k_tokens\030\002 \001(\002\022\020\n\010curr"
  "ency\030\003 \001(\t\022\025\n\rhas_free_tier\030\004 \001(\010\022\027\n\017fre"
  "e_tier_limit\030\005 \001(\005\"\204\001\n\013ModelLimits\022\032\n\022ma"
  "x_context_tokens\030\001 \001(\005\022\031\n\021max_output_tok"
  "ens\030\002 \001(\005\022\037\n\027max_requests_per_minute\030\003 \001"
  "(\005\022\035\n\025max_tokens_per_minute\030\004 \001(\005\"\202\002\n\026Co"
  "mpletionChunkPayload\022\025\n\rcompletion_id\030\001 "
  "\001(\t\022\024\n\014choice_index\030\002 \001(\005\0222\n\004type\030\003 \001(\0162"
  "$.unhinged.llm.v1.CompletionChunkType\022\017\n"
  "\007content\030\004 \001(\t\022.\n\ntool_calls\030\005 \003(\0132\032.unh"
  "inged.chat.v1.ToolCall\022\025\n\rfinish_reason\030"
  "\006 \001(\t\022/\n\005usage\030\007 \001(\0132 .unhinged.common.v"
  "1.UsageMetrics\"\245\001\n\021ListModelsRequest\022\020\n\010"
  "provider\030\001 \001(\t\022\026\n\016available_only\030\002 \001(\010\0229"
  "\n\npagination\030\003 \001(\0132%.unhinged.common.v1."
  "PaginationRequest\022+\n\007filters\030\004 \003(\0132\032.unh"
  "inged.common.v1.Filter\"\260\001\n\022ListModelsRes"
  "ponse\0226\n\010response\030\001 \001(\0132$.unhinged.commo"
  "n.v1.StandardResponse\022&\n\006models\030\002 \003(\0132\026."
  "unhinged.llm.v1.Model\022:\n\npagination\030\003 \001("
  "\0132&.unhinged.common.v1.PaginationRespons"
  "e\"Z\n\017GetModelRequest\022\020\n\010model_id\030\001 \001(\t\022\027"
  "\n\017include_pricing\030\002 \001(\010\022\034\n\024include_capab"
  "ilities\030\003 \001(\010\"q\n\020GetModelResponse\0226\n\010res"
  "ponse\030\001 \001(\0132$.unhinged.common.v1.Standar"
  "dResponse\022%\n\005model\030\002 \001(\0132\026.unhinged.llm."
  "v1.Model\"\243\001\n\026TokenEstimationRequest\022\r\n\005m"
  "odel\030\001 \001(\t\022\016\n\004text\030\002 \001(\tH\000\0224\n\010messages\030\003"
  " \001(\0132 .unhinged.llm.v1.ChatMessageListH\000"
  "\022\027\n\017include_context\030\004 \001(\010\022\022\n\nsession_id\030"
  "\005 \001(\tB\007\n\005input\"B\n\017ChatMessageList\022/\n\010mes"
  "sages\030\001 \003(\0132\035.unhinged.chat.v1.ChatMessa"
  "ge\"\264\001\n\027TokenEstimationResponse\0226\n\010respon"
  "se\030\001 \001(\0132$.unhinged.common.v1.StandardRe"
  "sponse\022-\n\005usage\030\002 \001(\0132\036.unhinged.common."
  "v1.TokenUsage\0222\n\tbreakdown\030\003 \001(\0132\037.unhin"
  "ged.llm.v1.TokenBreakdown\"\277\001\n\016TokenBreak"
  "down\022\025\n\rsystem_tokens\030\001 \001(\005\022\023\n\013user_toke"
  "ns\030\002 \001(\005\022\030\n\020assistant_tokens\030\003 \001(\005\022\026\n\016co"
  "ntext_tokens\030\004 \001(\005\022\023\n\013tool_tokens\030\005 \001(\005\022"
  ":\n\021context_documents\030\006 \003(\0132\037.unhinged.ll"
  "m.v1.DocumentTokens\"j\n\016DocumentTokens\022\023\n"
  "\013document_id\030\001 \001(\t\022\025\n\rdocument_type\030\002 \001("
  "\t\022\023\n\013token_count\030\003 \001(\005\022\027\n\017relevance_scor"
  "e\030\004 \001(\002\"0\n\021TokenCountRequest\022\r\n\005model\030\001 "
  "\001(\t\022\014\n\004text\030\002 \001(\t\"\215\001\n\022TokenCountResponse"
  "\0226\n\010response\030\001 \001(\0132$.unhinged.common.v1."
  "StandardResponse\022\023\n\013token_count\030\002 \001(\005\022*\n"
  "\006tokens\030\003 \003(\0132\032.unhinged.llm.v1.TokenInf"
  "o\"A\n\tTokenInfo\022\r\n\005token\030\001 \001(\t\022\020\n\010token_i"
  "d\030\002 \001(\005\022\023\n\013probability\030\003 \001(\002*\363\001\n\023Complet"
  "ionChunkType\022%\n!COMPLETION_CHUNK_TYPE_UN"
  "SPECIFIED\020\000\022!\n\035COMPLETION_CHUNK_TYPE_CON"
  "TENT\020\001\022#\n\037COMPLETION_CHUNK_TYPE_TOOL_CAL"
  "L\020\002\022%\n!COMPLETION_CHUNK_TYPE_TOOL_RESULT"
  "\020\003\022\"\n\036COMPLETION_CHUNK_TYPE_THINKING\020\004\022\""
  "\n\036COMPLETION_CHUNK_TYPE_METADATA\020\0052\213\005\n\nL"
  "LMService\022]\n\022GenerateCompletion\022\".unhing"
  "ed.llm.v1.CompletionRequest\032#.unhinged.l"
  "lm.v1.CompletionResponse\022Y\n\020StreamComple"
  "tion\022\".unhinged.llm.v1.CompletionRequest"
  "\032\037.unhinged.common.v1.StreamChunk0\001\022U\n\nL"
  "istModels\022\".unhinged.llm.v1.ListModelsRe"
  "quest\032#.unhinged.llm.v1.ListModelsRespon"
  "se\022O\n\010GetModel\022 .unhinged.llm.v1.GetMode"
  "lRequest\032!.unhinged.llm.v1.GetModelRespo"
  "nse\022c\n\016EstimateTokens\022\'.unhinged.llm.v1."
  "TokenEstimationRequest\032(.unhinged.llm.v1"
  ".TokenEstimationResponse\022V\n\013CountTokens\022"
  "\".unhinged.llm.v1.TokenCountRequest\032#.un"
  "hinged.llm.v1.TokenCountResponse\022^\n\013Heal"
  "thCheck\022&.unhinged.common.v1.HealthCheck"
  "Request\032\'.unhinged.common.v1.HealthCheck"
  "ResponseB\032\n\014unhinged.llmB\010LLMProtoP\001b\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_llm_2eproto_deps[2] = {
  &::descriptor_table_chat_2eproto,
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_llm_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_llm_2eproto = {
    false, false, 4924, descriptor_table_protodef_llm_2eproto,
    "llm.proto",
    &descriptor_table_llm_2eproto_once, descriptor_table_llm_2eproto_deps, 2, 24,
    schemas, file_default_instances, TableStruct_llm_2eproto::offsets,
    file_level_metadata_llm_2eproto, file_level_enum_descriptors_llm_2eproto,
    file_level_service_descriptors_llm_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_llm_2eproto_getter() {
  return &descriptor_table_llm_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_llm_2eproto(&descriptor_table_llm_2eproto);
namespace unhinged {
namespace llm {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompletionChunkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_llm_2eproto);
  return file_level_enum_descriptors_llm_2eproto[0];
}
bool CompletionChunkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CompletionRequest::_Internal {
 public:
  static const ::unhinged::llm::v1::CompletionOptions& options(const CompletionRequest* msg);
  static const ::unhinged::llm::v1::ContextOptions& context_options(const CompletionRequest* msg);
};

const ::unhinged::llm::v1::CompletionOptions&
CompletionRequest::_Internal::options(const CompletionRequest* msg) {
  return *msg->_impl_.options_;
}
const ::unhinged::llm::v1::ContextOptions&
CompletionRequest::_Internal::context_options(const CompletionRequest* msg) {
  return *msg->_impl_.context_options_;
}
void CompletionRequest::clear_messages() {
  _impl_.messages_.Clear();
}
CompletionRequest::CompletionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.CompletionRequest)
}
CompletionRequest::CompletionRequest(const CompletionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompletionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.model_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.context_options_){nullptr}
    , decltype(_impl_.include_context_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::unhinged::llm::v1::CompletionOptions(*from._impl_.options_);
  }
  if (from._internal_has_context_options()) {
    _this->_impl_.context_options_ = new ::unhinged::llm::v1::ContextOptions(*from._impl_.context_options_);
  }
  _this->_impl_.include_context_ = from._impl_.include_context_;
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.CompletionRequest)
}

inline void CompletionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , decltype(_impl_.model_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.context_options_){nullptr}
    , decltype(_impl_.include_context_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompletionRequest::~CompletionRequest() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.CompletionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompletionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
  _impl_.model_.Destroy();
  _impl_.session_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.options_;
  if (this != internal_default_instance()) delete _impl_.context_options_;
}

void CompletionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompletionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.CompletionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _impl_.model_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_options_ != nullptr) {
    delete _impl_.context_options_;
  }
  _impl_.context_options_ = nullptr;
  _impl_.include_context_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.CompletionRequest.model"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.chat.v1.ChatMessage messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.llm.v1.CompletionOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.CompletionRequest.session_id"));
        } else
          goto handle_unusual;
        continue;
      // bool include_context = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.include_context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.llm.v1.ContextOptions context_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_context_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompletionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.CompletionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.CompletionRequest.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // repeated .unhinged.chat.v1.ChatMessage messages = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .unhinged.llm.v1.CompletionOptions options = 3;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // string session_id = 4;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.CompletionRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_session_id(), target);
  }

  // bool include_context = 5;
  if (this->_internal_include_context() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_include_context(), target);
  }

  // .unhinged.llm.v1.ContextOptions context_options = 6;
  if (this->_internal_has_context_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::context_options(this),
        _Internal::context_options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.CompletionRequest)
  return target;
}

size_t CompletionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.CompletionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.chat.v1.ChatMessage messages = 2;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model = 1;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string session_id = 4;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .unhinged.llm.v1.CompletionOptions options = 3;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // .unhinged.llm.v1.ContextOptions context_options = 6;
  if (this->_internal_has_context_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_options_);
  }

  // bool include_context = 5;
  if (this->_internal_include_context() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompletionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompletionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompletionRequest::GetClassData() const { return &_class_data_; }


void CompletionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompletionRequest*>(&to_msg);
  auto& from = static_cast<const CompletionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.CompletionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::unhinged::llm::v1::CompletionOptions::MergeFrom(
        from._internal_options());
  }
  if (from._internal_has_context_options()) {
    _this->_internal_mutable_context_options()->::unhinged::llm::v1::ContextOptions::MergeFrom(
        from._internal_context_options());
  }
  if (from._internal_include_context() != 0) {
    _this->_internal_set_include_context(from._internal_include_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompletionRequest::CopyFrom(const CompletionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.CompletionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionRequest::IsInitialized() const {
  return true;
}

void CompletionRequest::InternalSwap(CompletionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompletionRequest, _impl_.include_context_)
      + sizeof(CompletionRequest::_impl_.include_context_)
      - PROTOBUF_FIELD_OFFSET(CompletionRequest, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[0]);
}

// ===================================================================

class CompletionOptions::_Internal {
 public:
};

CompletionOptions::CompletionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.CompletionOptions)
}
CompletionOptions::CompletionOptions(const CompletionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompletionOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_sequences_){from._impl_.stop_sequences_}
    , decltype(_impl_.tools_){from._impl_.tools_}
    , decltype(_impl_.tool_choice_){}
    , decltype(_impl_.max_tokens_){}
    , decltype(_impl_.temperature_){}
    , decltype(_impl_.top_p_){}
    , decltype(_impl_.frequency_penalty_){}
    , decltype(_impl_.presence_penalty_){}
    , decltype(_impl_.stream_){}
    , decltype(_impl_.include_usage_){}
    , decltype(_impl_.enable_tools_){}
    , decltype(_impl_.n_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tool_choice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_choice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tool_choice().empty()) {
    _this->_impl_.tool_choice_.Set(from._internal_tool_choice(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.max_tokens_, &from._impl_.max_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.n_) -
    reinterpret_cast<char*>(&_impl_.max_tokens_)) + sizeof(_impl_.n_));
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.CompletionOptions)
}

inline void CompletionOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_sequences_){arena}
    , decltype(_impl_.tools_){arena}
    , decltype(_impl_.tool_choice_){}
    , decltype(_impl_.max_tokens_){0}
    , decltype(_impl_.temperature_){0}
    , decltype(_impl_.top_p_){0}
    , decltype(_impl_.frequency_penalty_){0}
    , decltype(_impl_.presence_penalty_){0}
    , decltype(_impl_.stream_){false}
    , decltype(_impl_.include_usage_){false}
    , decltype(_impl_.enable_tools_){false}
    , decltype(_impl_.n_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tool_choice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_choice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompletionOptions::~CompletionOptions() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.CompletionOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompletionOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stop_sequences_.~RepeatedPtrField();
  _impl_.tools_.~RepeatedPtrField();
  _impl_.tool_choice_.Destroy();
}

void CompletionOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompletionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.CompletionOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_sequences_.Clear();
  _impl_.tools_.Clear();
  _impl_.tool_choice_.ClearToEmpty();
  ::memset(&_impl_.max_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.n_) -
      reinterpret_cast<char*>(&_impl_.max_tokens_)) + sizeof(_impl_.n_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 max_tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.max_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float top_p = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.top_p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float frequency_penalty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.frequency_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float presence_penalty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.presence_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated string stop_sequences = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stop_sequences();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.CompletionOptions.stop_sequences"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool stream = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_usage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.include_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 n = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_tools = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.enable_tools_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.llm.v1.ToolDefinition tools = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tools(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string tool_choice = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_tool_choice();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.CompletionOptions.tool_choice"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompletionOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.CompletionOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_tokens = 1;
  if (this->_internal_max_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_tokens(), target);
  }

  // float temperature = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_temperature(), target);
  }

  // float top_p = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top_p = this->_internal_top_p();
  uint32_t raw_top_p;
  memcpy(&raw_top_p, &tmp_top_p, sizeof(tmp_top_p));
  if (raw_top_p != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_top_p(), target);
  }

  // float frequency_penalty = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frequency_penalty = this->_internal_frequency_penalty();
  uint32_t raw_frequency_penalty;
  memcpy(&raw_frequency_penalty, &tmp_frequency_penalty, sizeof(tmp_frequency_penalty));
  if (raw_frequency_penalty != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_frequency_penalty(), target);
  }

  // float presence_penalty = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_presence_penalty = this->_internal_presence_penalty();
  uint32_t raw_presence_penalty;
  memcpy(&raw_presence_penalty, &tmp_presence_penalty, sizeof(tmp_presence_penalty));
  if (raw_presence_penalty != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_presence_penalty(), target);
  }

  // repeated string stop_sequences = 6;
  for (int i = 0, n = this->_internal_stop_sequences_size(); i < n; i++) {
    const auto& s = this->_internal_stop_sequences(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.CompletionOptions.stop_sequences");
    target = stream->WriteString(6, s, target);
  }

  // bool stream = 7;
  if (this->_internal_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_stream(), target);
  }

  // bool include_usage = 8;
  if (this->_internal_include_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_include_usage(), target);
  }

  // int32 n = 9;
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_n(), target);
  }

  // bool enable_tools = 10;
  if (this->_internal_enable_tools() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_enable_tools(), target);
  }

  // repeated .unhinged.llm.v1.ToolDefinition tools = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tools_size()); i < n; i++) {
    const auto& repfield = this->_internal_tools(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string tool_choice = 12;
  if (!this->_internal_tool_choice().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tool_choice().data(), static_cast<int>(this->_internal_tool_choice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.CompletionOptions.tool_choice");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_tool_choice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.CompletionOptions)
  return target;
}

size_t CompletionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.CompletionOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stop_sequences = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.stop_sequences_.size());
  for (int i = 0, n = _impl_.stop_sequences_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.stop_sequences_.Get(i));
  }

  // repeated .unhinged.llm.v1.ToolDefinition tools = 11;
  total_size += 1UL * this->_internal_tools_size();
  for (const auto& msg : this->_impl_.tools_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tool_choice = 12;
  if (!this->_internal_tool_choice().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tool_choice());
  }

  // int32 max_tokens = 1;
  if (this->_internal_max_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_tokens());
  }

  // float temperature = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 1 + 4;
  }

  // float top_p = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top_p = this->_internal_top_p();
  uint32_t raw_top_p;
  memcpy(&raw_top_p, &tmp_top_p, sizeof(tmp_top_p));
  if (raw_top_p != 0) {
    total_size += 1 + 4;
  }

  // float frequency_penalty = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frequency_penalty = this->_internal_frequency_penalty();
  uint32_t raw_frequency_penalty;
  memcpy(&raw_frequency_penalty, &tmp_frequency_penalty, sizeof(tmp_frequency_penalty));
  if (raw_frequency_penalty != 0) {
    total_size += 1 + 4;
  }

  // float presence_penalty = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_presence_penalty = this->_internal_presence_penalty();
  uint32_t raw_presence_penalty;
  memcpy(&raw_presence_penalty, &tmp_presence_penalty, sizeof(tmp_presence_penalty));
  if (raw_presence_penalty != 0) {
    total_size += 1 + 4;
  }

  // bool stream = 7;
  if (this->_internal_stream() != 0) {
    total_size += 1 + 1;
  }

  // bool include_usage = 8;
  if (this->_internal_include_usage() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_tools = 10;
  if (this->_internal_enable_tools() != 0) {
    total_size += 1 + 1;
  }

  // int32 n = 9;
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompletionOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompletionOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompletionOptions::GetClassData() const { return &_class_data_; }


void CompletionOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompletionOptions*>(&to_msg);
  auto& from = static_cast<const CompletionOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.CompletionOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stop_sequences_.MergeFrom(from._impl_.stop_sequences_);
  _this->_impl_.tools_.MergeFrom(from._impl_.tools_);
  if (!from._internal_tool_choice().empty()) {
    _this->_internal_set_tool_choice(from._internal_tool_choice());
  }
  if (from._internal_max_tokens() != 0) {
    _this->_internal_set_max_tokens(from._internal_max_tokens());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = from._internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top_p = from._internal_top_p();
  uint32_t raw_top_p;
  memcpy(&raw_top_p, &tmp_top_p, sizeof(tmp_top_p));
  if (raw_top_p != 0) {
    _this->_internal_set_top_p(from._internal_top_p());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frequency_penalty = from._internal_frequency_penalty();
  uint32_t raw_frequency_penalty;
  memcpy(&raw_frequency_penalty, &tmp_frequency_penalty, sizeof(tmp_frequency_penalty));
  if (raw_frequency_penalty != 0) {
    _this->_internal_set_frequency_penalty(from._internal_frequency_penalty());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_presence_penalty = from._internal_presence_penalty();
  uint32_t raw_presence_penalty;
  memcpy(&raw_presence_penalty, &tmp_presence_penalty, sizeof(tmp_presence_penalty));
  if (raw_presence_penalty != 0) {
    _this->_internal_set_presence_penalty(from._internal_presence_penalty());
  }
  if (from._internal_stream() != 0) {
    _this->_internal_set_stream(from._internal_stream());
  }
  if (from._internal_include_usage() != 0) {
    _this->_internal_set_include_usage(from._internal_include_usage());
  }
  if (from._internal_enable_tools() != 0) {
    _this->_internal_set_enable_tools(from._internal_enable_tools());
  }
  if (from._internal_n() != 0) {
    _this->_internal_set_n(from._internal_n());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompletionOptions::CopyFrom(const CompletionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.CompletionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionOptions::IsInitialized() const {
  return true;
}

void CompletionOptions::InternalSwap(CompletionOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stop_sequences_.InternalSwap(&other->_impl_.stop_sequences_);
  _impl_.tools_.InternalSwap(&other->_impl_.tools_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tool_choice_, lhs_arena,
      &other->_impl_.tool_choice_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompletionOptions, _impl_.n_)
      + sizeof(CompletionOptions::_impl_.n_)
      - PROTOBUF_FIELD_OFFSET(CompletionOptions, _impl_.max_tokens_)>(
          reinterpret_cast<char*>(&_impl_.max_tokens_),
          reinterpret_cast<char*>(&other->_impl_.max_tokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[1]);
}

// ===================================================================

class ContextOptions::_Internal {
 public:
};

ContextOptions::ContextOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.ContextOptions)
}
ContextOptions::ContextOptions(const ContextOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContextOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.document_types_){from._impl_.document_types_}
    , decltype(_impl_.max_context_tokens_){}
    , decltype(_impl_.relevance_threshold_){}
    , decltype(_impl_.include_metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_context_tokens_, &from._impl_.max_context_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_metadata_) -
    reinterpret_cast<char*>(&_impl_.max_context_tokens_)) + sizeof(_impl_.include_metadata_));
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.ContextOptions)
}

inline void ContextOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.document_types_){arena}
    , decltype(_impl_.max_context_tokens_){0}
    , decltype(_impl_.relevance_threshold_){0}
    , decltype(_impl_.include_metadata_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ContextOptions::~ContextOptions() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.ContextOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContextOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_types_.~RepeatedPtrField();
}

void ContextOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContextOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.ContextOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_types_.Clear();
  ::memset(&_impl_.max_context_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.include_metadata_) -
      reinterpret_cast<char*>(&_impl_.max_context_tokens_)) + sizeof(_impl_.include_metadata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContextOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 max_context_tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.max_context_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float relevance_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.relevance_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated string document_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_document_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.ContextOptions.document_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool include_metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.include_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContextOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.ContextOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_context_tokens = 1;
  if (this->_internal_max_context_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_context_tokens(), target);
  }

  // float relevance_threshold = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_relevance_threshold = this->_internal_relevance_threshold();
  uint32_t raw_relevance_threshold;
  memcpy(&raw_relevance_threshold, &tmp_relevance_threshold, sizeof(tmp_relevance_threshold));
  if (raw_relevance_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_relevance_threshold(), target);
  }

  // repeated string document_types = 3;
  for (int i = 0, n = this->_internal_document_types_size(); i < n; i++) {
    const auto& s = this->_internal_document_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.ContextOptions.document_types");
    target = stream->WriteString(3, s, target);
  }

  // bool include_metadata = 4;
  if (this->_internal_include_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_include_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.ContextOptions)
  return target;
}

size_t ContextOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.ContextOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string document_types = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.document_types_.size());
  for (int i = 0, n = _impl_.document_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.document_types_.Get(i));
  }

  // int32 max_context_tokens = 1;
  if (this->_internal_max_context_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_context_tokens());
  }

  // float relevance_threshold = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_relevance_threshold = this->_internal_relevance_threshold();
  uint32_t raw_relevance_threshold;
  memcpy(&raw_relevance_threshold, &tmp_relevance_threshold, sizeof(tmp_relevance_threshold));
  if (raw_relevance_threshold != 0) {
    total_size += 1 + 4;
  }

  // bool include_metadata = 4;
  if (this->_internal_include_metadata() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContextOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContextOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContextOptions::GetClassData() const { return &_class_data_; }


void ContextOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContextOptions*>(&to_msg);
  auto& from = static_cast<const ContextOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.ContextOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.document_types_.MergeFrom(from._impl_.document_types_);
  if (from._internal_max_context_tokens() != 0) {
    _this->_internal_set_max_context_tokens(from._internal_max_context_tokens());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_relevance_threshold = from._internal_relevance_threshold();
  uint32_t raw_relevance_threshold;
  memcpy(&raw_relevance_threshold, &tmp_relevance_threshold, sizeof(tmp_relevance_threshold));
  if (raw_relevance_threshold != 0) {
    _this->_internal_set_relevance_threshold(from._internal_relevance_threshold());
  }
  if (from._internal_include_metadata() != 0) {
    _this->_internal_set_include_metadata(from._internal_include_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContextOptions::CopyFrom(const ContextOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.ContextOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextOptions::IsInitialized() const {
  return true;
}

void ContextOptions::InternalSwap(ContextOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.document_types_.InternalSwap(&other->_impl_.document_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContextOptions, _impl_.include_metadata_)
      + sizeof(ContextOptions::_impl_.include_metadata_)
      - PROTOBUF_FIELD_OFFSET(ContextOptions, _impl_.max_context_tokens_)>(
          reinterpret_cast<char*>(&_impl_.max_context_tokens_),
          reinterpret_cast<char*>(&other->_impl_.max_context_tokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContextOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[2]);
}

// ===================================================================

class ToolDefinition::_Internal {
 public:
};

ToolDefinition::ToolDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.ToolDefinition)
}
ToolDefinition::ToolDefinition(const ToolDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToolDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.parameters_schema_){}
    , decltype(_impl_.required_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parameters_schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parameters_schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parameters_schema().empty()) {
    _this->_impl_.parameters_schema_.Set(from._internal_parameters_schema(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.required_ = from._impl_.required_;
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.ToolDefinition)
}

inline void ToolDefinition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.parameters_schema_){}
    , decltype(_impl_.required_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parameters_schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parameters_schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ToolDefinition::~ToolDefinition() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.ToolDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToolDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.parameters_schema_.Destroy();
}

void ToolDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToolDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.ToolDefinition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.parameters_schema_.ClearToEmpty();
  _impl_.required_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.ToolDefinition.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.ToolDefinition.description"));
        } else
          goto handle_unusual;
        continue;
      // string parameters_schema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_parameters_schema();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.ToolDefinition.parameters_schema"));
        } else
          goto handle_unusual;
        continue;
      // bool required = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToolDefinition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.ToolDefinition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.ToolDefinition.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.ToolDefinition.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string parameters_schema = 3;
  if (!this->_internal_parameters_schema().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parameters_schema().data(), static_cast<int>(this->_internal_parameters_schema().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.ToolDefinition.parameters_schema");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_parameters_schema(), target);
  }

  // bool required = 4;
  if (this->_internal_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_required(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.ToolDefinition)
  return target;
}

size_t ToolDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.ToolDefinition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string parameters_schema = 3;
  if (!this->_internal_parameters_schema().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parameters_schema());
  }

  // bool required = 4;
  if (this->_internal_required() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToolDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolDefinition::GetClassData() const { return &_class_data_; }


void ToolDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToolDefinition*>(&to_msg);
  auto& from = static_cast<const ToolDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.ToolDefinition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_parameters_schema().empty()) {
    _this->_internal_set_parameters_schema(from._internal_parameters_schema());
  }
  if (from._internal_required() != 0) {
    _this->_internal_set_required(from._internal_required());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolDefinition::CopyFrom(const ToolDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.ToolDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolDefinition::IsInitialized() const {
  return true;
}

void ToolDefinition::InternalSwap(ToolDefinition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parameters_schema_, lhs_arena,
      &other->_impl_.parameters_schema_, rhs_arena
  );
  swap(_impl_.required_, other->_impl_.required_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[3]);
}

// ===================================================================

class CompletionResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const CompletionResponse* msg);
  static const ::unhinged::common::v1::UsageMetrics& usage(const CompletionResponse* msg);
  static const ::unhinged::llm::v1::CompletionMetadata& metadata(const CompletionResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
CompletionResponse::_Internal::response(const CompletionResponse* msg) {
  return *msg->_impl_.response_;
}
const ::unhinged::common::v1::UsageMetrics&
CompletionResponse::_Internal::usage(const CompletionResponse* msg) {
  return *msg->_impl_.usage_;
}
const ::unhinged::llm::v1::CompletionMetadata&
CompletionResponse::_Internal::metadata(const CompletionResponse* msg) {
  return *msg->_impl_.metadata_;
}
void CompletionResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
void CompletionResponse::clear_usage() {
  if (GetArenaForAllocation() == nullptr && _impl_.usage_ != nullptr) {
    delete _impl_.usage_;
  }
  _impl_.usage_ = nullptr;
}
CompletionResponse::CompletionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.CompletionResponse)
}
CompletionResponse::CompletionResponse(const CompletionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompletionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.choices_){from._impl_.choices_}
    , decltype(_impl_.completion_id_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.usage_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.completion_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.completion_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_completion_id().empty()) {
    _this->_impl_.completion_id_.Set(from._internal_completion_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  if (from._internal_has_usage()) {
    _this->_impl_.usage_ = new ::unhinged::common::v1::UsageMetrics(*from._impl_.usage_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::unhinged::llm::v1::CompletionMetadata(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.CompletionResponse)
}

inline void CompletionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.choices_){arena}
    , decltype(_impl_.completion_id_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.usage_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.completion_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.completion_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompletionResponse::~CompletionResponse() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.CompletionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompletionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.choices_.~RepeatedPtrField();
  _impl_.completion_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.usage_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void CompletionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompletionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.CompletionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.choices_.Clear();
  _impl_.completion_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usage_ != nullptr) {
    delete _impl_.usage_;
  }
  _impl_.usage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string completion_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_completion_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.CompletionResponse.completion_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.llm.v1.CompletionChoice choices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_choices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.UsageMetrics usage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_usage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.llm.v1.CompletionMetadata metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompletionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.CompletionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // string completion_id = 2;
  if (!this->_internal_completion_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_completion_id().data(), static_cast<int>(this->_internal_completion_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.CompletionResponse.completion_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_completion_id(), target);
  }

  // repeated .unhinged.llm.v1.CompletionChoice choices = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_choices_size()); i < n; i++) {
    const auto& repfield = this->_internal_choices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .unhinged.common.v1.UsageMetrics usage = 4;
  if (this->_internal_has_usage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::usage(this),
        _Internal::usage(this).GetCachedSize(), target, stream);
  }

  // .unhinged.llm.v1.CompletionMetadata metadata = 5;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.CompletionResponse)
  return target;
}

size_t CompletionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.CompletionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.llm.v1.CompletionChoice choices = 3;
  total_size += 1UL * this->_internal_choices_size();
  for (const auto& msg : this->_impl_.choices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string completion_id = 2;
  if (!this->_internal_completion_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_completion_id());
  }

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .unhinged.common.v1.UsageMetrics usage = 4;
  if (this->_internal_has_usage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usage_);
  }

  // .unhinged.llm.v1.CompletionMetadata metadata = 5;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompletionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompletionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompletionResponse::GetClassData() const { return &_class_data_; }


void CompletionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompletionResponse*>(&to_msg);
  auto& from = static_cast<const CompletionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.CompletionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.choices_.MergeFrom(from._impl_.choices_);
  if (!from._internal_completion_id().empty()) {
    _this->_internal_set_completion_id(from._internal_completion_id());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_usage()) {
    _this->_internal_mutable_usage()->::unhinged::common::v1::UsageMetrics::MergeFrom(
        from._internal_usage());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::unhinged::llm::v1::CompletionMetadata::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompletionResponse::CopyFrom(const CompletionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.CompletionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionResponse::IsInitialized() const {
  return true;
}

void CompletionResponse::InternalSwap(CompletionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.choices_.InternalSwap(&other->_impl_.choices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.completion_id_, lhs_arena,
      &other->_impl_.completion_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompletionResponse, _impl_.metadata_)
      + sizeof(CompletionResponse::_impl_.metadata_)
      - PROTOBUF_FIELD_OFFSET(CompletionResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[4]);
}

// ===================================================================

class CompletionChoice::_Internal {
 public:
  static const ::unhinged::chat::v1::ChatMessage& message(const CompletionChoice* msg);
};

const ::unhinged::chat::v1::ChatMessage&
CompletionChoice::_Internal::message(const CompletionChoice* msg) {
  return *msg->_impl_.message_;
}
void CompletionChoice::clear_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
}
CompletionChoice::CompletionChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.CompletionChoice)
}
CompletionChoice::CompletionChoice(const CompletionChoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompletionChoice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.finish_reason_){}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.logprobs_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.finish_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.finish_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_finish_reason().empty()) {
    _this->_impl_.finish_reason_.Set(from._internal_finish_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::unhinged::chat::v1::ChatMessage(*from._impl_.message_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.logprobs_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.logprobs_));
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.CompletionChoice)
}

inline void CompletionChoice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.finish_reason_){}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.logprobs_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.finish_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.finish_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompletionChoice::~CompletionChoice() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.CompletionChoice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompletionChoice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.finish_reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.message_;
}

void CompletionChoice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompletionChoice::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.CompletionChoice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.finish_reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.logprobs_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.logprobs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionChoice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.ChatMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string finish_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_finish_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.CompletionChoice.finish_reason"));
        } else
          goto handle_unusual;
        continue;
      // float logprobs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.logprobs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompletionChoice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.CompletionChoice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // .unhinged.chat.v1.ChatMessage message = 2;
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // string finish_reason = 3;
  if (!this->_internal_finish_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_finish_reason().data(), static_cast<int>(this->_internal_finish_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.CompletionChoice.finish_reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_finish_reason(), target);
  }

  // float logprobs = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_logprobs = this->_internal_logprobs();
  uint32_t raw_logprobs;
  memcpy(&raw_logprobs, &tmp_logprobs, sizeof(tmp_logprobs));
  if (raw_logprobs != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_logprobs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.CompletionChoice)
  return target;
}

size_t CompletionChoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.CompletionChoice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string finish_reason = 3;
  if (!this->_internal_finish_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_finish_reason());
  }

  // .unhinged.chat.v1.ChatMessage message = 2;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // float logprobs = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_logprobs = this->_internal_logprobs();
  uint32_t raw_logprobs;
  memcpy(&raw_logprobs, &tmp_logprobs, sizeof(tmp_logprobs));
  if (raw_logprobs != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompletionChoice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompletionChoice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompletionChoice::GetClassData() const { return &_class_data_; }


void CompletionChoice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompletionChoice*>(&to_msg);
  auto& from = static_cast<const CompletionChoice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.CompletionChoice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_finish_reason().empty()) {
    _this->_internal_set_finish_reason(from._internal_finish_reason());
  }
  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::unhinged::chat::v1::ChatMessage::MergeFrom(
        from._internal_message());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_logprobs = from._internal_logprobs();
  uint32_t raw_logprobs;
  memcpy(&raw_logprobs, &tmp_logprobs, sizeof(tmp_logprobs));
  if (raw_logprobs != 0) {
    _this->_internal_set_logprobs(from._internal_logprobs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompletionChoice::CopyFrom(const CompletionChoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.CompletionChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionChoice::IsInitialized() const {
  return true;
}

void CompletionChoice::InternalSwap(CompletionChoice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.finish_reason_, lhs_arena,
      &other->_impl_.finish_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompletionChoice, _impl_.logprobs_)
      + sizeof(CompletionChoice::_impl_.logprobs_)
      - PROTOBUF_FIELD_OFFSET(CompletionChoice, _impl_.message_)>(
          reinterpret_cast<char*>(&_impl_.message_),
          reinterpret_cast<char*>(&other->_impl_.message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionChoice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[5]);
}

// ===================================================================

class CompletionMetadata::_Internal {
 public:
};

CompletionMetadata::CompletionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.CompletionMetadata)
}
CompletionMetadata::CompletionMetadata(const CompletionMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompletionMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.context_document_ids_){from._impl_.context_document_ids_}
    , decltype(_impl_.model_){}
    , decltype(_impl_.provider_){}
    , decltype(_impl_.processing_time_ms_){}
    , decltype(_impl_.context_documents_used_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_provider().empty()) {
    _this->_impl_.provider_.Set(from._internal_provider(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.processing_time_ms_, &from._impl_.processing_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.context_documents_used_) -
    reinterpret_cast<char*>(&_impl_.processing_time_ms_)) + sizeof(_impl_.context_documents_used_));
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.CompletionMetadata)
}

inline void CompletionMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.context_document_ids_){arena}
    , decltype(_impl_.model_){}
    , decltype(_impl_.provider_){}
    , decltype(_impl_.processing_time_ms_){0}
    , decltype(_impl_.context_documents_used_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompletionMetadata::~CompletionMetadata() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.CompletionMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompletionMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.context_document_ids_.~RepeatedPtrField();
  _impl_.model_.Destroy();
  _impl_.provider_.Destroy();
}

void CompletionMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompletionMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.CompletionMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.context_document_ids_.Clear();
  _impl_.model_.ClearToEmpty();
  _impl_.provider_.ClearToEmpty();
  ::memset(&_impl_.processing_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.context_documents_used_) -
      reinterpret_cast<char*>(&_impl_.processing_time_ms_)) + sizeof(_impl_.context_documents_used_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.CompletionMetadata.model"));
        } else
          goto handle_unusual;
        continue;
      // string provider = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.CompletionMetadata.provider"));
        } else
          goto handle_unusual;
        continue;
      // float processing_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.processing_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 context_documents_used = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.context_documents_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string context_document_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_context_document_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.CompletionMetadata.context_document_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompletionMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.CompletionMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.CompletionMetadata.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // string provider = 2;
  if (!this->_internal_provider().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.CompletionMetadata.provider");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_provider(), target);
  }

  // float processing_time_ms = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_processing_time_ms = this->_internal_processing_time_ms();
  uint32_t raw_processing_time_ms;
  memcpy(&raw_processing_time_ms, &tmp_processing_time_ms, sizeof(tmp_processing_time_ms));
  if (raw_processing_time_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_processing_time_ms(), target);
  }

  // int32 context_documents_used = 4;
  if (this->_internal_context_documents_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_context_documents_used(), target);
  }

  // repeated string context_document_ids = 5;
  for (int i = 0, n = this->_internal_context_document_ids_size(); i < n; i++) {
    const auto& s = this->_internal_context_document_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.CompletionMetadata.context_document_ids");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.CompletionMetadata)
  return target;
}

size_t CompletionMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.CompletionMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string context_document_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.context_document_ids_.size());
  for (int i = 0, n = _impl_.context_document_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.context_document_ids_.Get(i));
  }

  // string model = 1;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string provider = 2;
  if (!this->_internal_provider().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  // float processing_time_ms = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_processing_time_ms = this->_internal_processing_time_ms();
  uint32_t raw_processing_time_ms;
  memcpy(&raw_processing_time_ms, &tmp_processing_time_ms, sizeof(tmp_processing_time_ms));
  if (raw_processing_time_ms != 0) {
    total_size += 1 + 4;
  }

  // int32 context_documents_used = 4;
  if (this->_internal_context_documents_used() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_context_documents_used());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompletionMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompletionMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompletionMetadata::GetClassData() const { return &_class_data_; }


void CompletionMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompletionMetadata*>(&to_msg);
  auto& from = static_cast<const CompletionMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.CompletionMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.context_document_ids_.MergeFrom(from._impl_.context_document_ids_);
  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (!from._internal_provider().empty()) {
    _this->_internal_set_provider(from._internal_provider());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_processing_time_ms = from._internal_processing_time_ms();
  uint32_t raw_processing_time_ms;
  memcpy(&raw_processing_time_ms, &tmp_processing_time_ms, sizeof(tmp_processing_time_ms));
  if (raw_processing_time_ms != 0) {
    _this->_internal_set_processing_time_ms(from._internal_processing_time_ms());
  }
  if (from._internal_context_documents_used() != 0) {
    _this->_internal_set_context_documents_used(from._internal_context_documents_used());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompletionMetadata::CopyFrom(const CompletionMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.CompletionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionMetadata::IsInitialized() const {
  return true;
}

void CompletionMetadata::InternalSwap(CompletionMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.context_document_ids_.InternalSwap(&other->_impl_.context_document_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.provider_, lhs_arena,
      &other->_impl_.provider_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompletionMetadata, _impl_.context_documents_used_)
      + sizeof(CompletionMetadata::_impl_.context_documents_used_)
      - PROTOBUF_FIELD_OFFSET(CompletionMetadata, _impl_.processing_time_ms_)>(
          reinterpret_cast<char*>(&_impl_.processing_time_ms_),
          reinterpret_cast<char*>(&other->_impl_.processing_time_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[6]);
}

// ===================================================================

class Model::_Internal {
 public:
  static const ::unhinged::common::v1::ResourceMetadata& metadata(const Model* msg);
  static const ::unhinged::llm::v1::ModelCapabilities& capabilities(const Model* msg);
  static const ::unhinged::llm::v1::ModelPricing& pricing(const Model* msg);
  static const ::unhinged::llm::v1::ModelLimits& limits(const Model* msg);
};

const ::unhinged::common::v1::ResourceMetadata&
Model::_Internal::metadata(const Model* msg) {
  return *msg->_impl_.metadata_;
}
const ::unhinged::llm::v1::ModelCapabilities&
Model::_Internal::capabilities(const Model* msg) {
  return *msg->_impl_.capabilities_;
}
const ::unhinged::llm::v1::ModelPricing&
Model::_Internal::pricing(const Model* msg) {
  return *msg->_impl_.pricing_;
}
const ::unhinged::llm::v1::ModelLimits&
Model::_Internal::limits(const Model* msg) {
  return *msg->_impl_.limits_;
}
void Model::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
Model::Model(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Model* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.provider_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.capabilities_){nullptr}
    , decltype(_impl_.pricing_){nullptr}
    , decltype(_impl_.limits_){nullptr}
    , decltype(_impl_.is_available_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_provider().empty()) {
    _this->_impl_.provider_.Set(from._internal_provider(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::unhinged::common::v1::ResourceMetadata(*from._impl_.metadata_);
  }
  if (from._internal_has_capabilities()) {
    _this->_impl_.capabilities_ = new ::unhinged::llm::v1::ModelCapabilities(*from._impl_.capabilities_);
  }
  if (from._internal_has_pricing()) {
    _this->_impl_.pricing_ = new ::unhinged::llm::v1::ModelPricing(*from._impl_.pricing_);
  }
  if (from._internal_has_limits()) {
    _this->_impl_.limits_ = new ::unhinged::llm::v1::ModelLimits(*from._impl_.limits_);
  }
  _this->_impl_.is_available_ = from._impl_.is_available_;
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.Model)
}

inline void Model::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.provider_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.capabilities_){nullptr}
    , decltype(_impl_.pricing_){nullptr}
    , decltype(_impl_.limits_){nullptr}
    , decltype(_impl_.is_available_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.Model)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Model::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.provider_.Destroy();
  _impl_.description_.Destroy();
  _impl_.status_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.capabilities_;
  if (this != internal_default_instance()) delete _impl_.pricing_;
  if (this != internal_default_instance()) delete _impl_.limits_;
}

void Model::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.Model)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.provider_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.capabilities_ != nullptr) {
    delete _impl_.capabilities_;
  }
  _impl_.capabilities_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pricing_ != nullptr) {
    delete _impl_.pricing_;
  }
  _impl_.pricing_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.limits_ != nullptr) {
    delete _impl_.limits_;
  }
  _impl_.limits_ = nullptr;
  _impl_.is_available_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Model::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.ResourceMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.Model.name"));
        } else
          goto handle_unusual;
        continue;
      // string provider = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.Model.provider"));
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.Model.description"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.llm.v1.ModelCapabilities capabilities = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.llm.v1.ModelPricing pricing = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pricing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.llm.v1.ModelLimits limits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_limits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_available = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.is_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.Model.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Model::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.Model)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.ResourceMetadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.Model.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string provider = 3;
  if (!this->_internal_provider().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.Model.provider");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_provider(), target);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.Model.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // .unhinged.llm.v1.ModelCapabilities capabilities = 5;
  if (this->_internal_has_capabilities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::capabilities(this),
        _Internal::capabilities(this).GetCachedSize(), target, stream);
  }

  // .unhinged.llm.v1.ModelPricing pricing = 6;
  if (this->_internal_has_pricing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::pricing(this),
        _Internal::pricing(this).GetCachedSize(), target, stream);
  }

  // .unhinged.llm.v1.ModelLimits limits = 7;
  if (this->_internal_has_limits()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::limits(this),
        _Internal::limits(this).GetCachedSize(), target, stream);
  }

  // bool is_available = 8;
  if (this->_internal_is_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_available(), target);
  }

  // string status = 9;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.Model.status");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.Model)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string provider = 3;
  if (!this->_internal_provider().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string status = 9;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .unhinged.common.v1.ResourceMetadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .unhinged.llm.v1.ModelCapabilities capabilities = 5;
  if (this->_internal_has_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.capabilities_);
  }

  // .unhinged.llm.v1.ModelPricing pricing = 6;
  if (this->_internal_has_pricing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pricing_);
  }

  // .unhinged.llm.v1.ModelLimits limits = 7;
  if (this->_internal_has_limits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.limits_);
  }

  // bool is_available = 8;
  if (this->_internal_is_available() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Model::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Model::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Model::GetClassData() const { return &_class_data_; }


void Model::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Model*>(&to_msg);
  auto& from = static_cast<const Model&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.Model)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_provider().empty()) {
    _this->_internal_set_provider(from._internal_provider());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::unhinged::common::v1::ResourceMetadata::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_capabilities()) {
    _this->_internal_mutable_capabilities()->::unhinged::llm::v1::ModelCapabilities::MergeFrom(
        from._internal_capabilities());
  }
  if (from._internal_has_pricing()) {
    _this->_internal_mutable_pricing()->::unhinged::llm::v1::ModelPricing::MergeFrom(
        from._internal_pricing());
  }
  if (from._internal_has_limits()) {
    _this->_internal_mutable_limits()->::unhinged::llm::v1::ModelLimits::MergeFrom(
        from._internal_limits());
  }
  if (from._internal_is_available() != 0) {
    _this->_internal_set_is_available(from._internal_is_available());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::InternalSwap(Model* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.provider_, lhs_arena,
      &other->_impl_.provider_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Model, _impl_.is_available_)
      + sizeof(Model::_impl_.is_available_)
      - PROTOBUF_FIELD_OFFSET(Model, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Model::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[7]);
}

// ===================================================================

class ModelCapabilities::_Internal {
 public:
};

ModelCapabilities::ModelCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.ModelCapabilities)
}
ModelCapabilities::ModelCapabilities(const ModelCapabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelCapabilities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.supported_languages_){from._impl_.supported_languages_}
    , decltype(_impl_.input_modalities_){from._impl_.input_modalities_}
    , decltype(_impl_.output_modalities_){from._impl_.output_modalities_}
    , decltype(_impl_.supports_streaming_){}
    , decltype(_impl_.supports_vision_){}
    , decltype(_impl_.supports_function_calling_){}
    , decltype(_impl_.supports_json_mode_){}
    , decltype(_impl_.supports_system_messages_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.supports_streaming_, &from._impl_.supports_streaming_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.supports_system_messages_) -
    reinterpret_cast<char*>(&_impl_.supports_streaming_)) + sizeof(_impl_.supports_system_messages_));
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.ModelCapabilities)
}

inline void ModelCapabilities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.supported_languages_){arena}
    , decltype(_impl_.input_modalities_){arena}
    , decltype(_impl_.output_modalities_){arena}
    , decltype(_impl_.supports_streaming_){false}
    , decltype(_impl_.supports_vision_){false}
    , decltype(_impl_.supports_function_calling_){false}
    , decltype(_impl_.supports_json_mode_){false}
    , decltype(_impl_.supports_system_messages_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ModelCapabilities::~ModelCapabilities() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.ModelCapabilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelCapabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.supported_languages_.~RepeatedPtrField();
  _impl_.input_modalities_.~RepeatedPtrField();
  _impl_.output_modalities_.~RepeatedPtrField();
}

void ModelCapabilities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.ModelCapabilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.supported_languages_.Clear();
  _impl_.input_modalities_.Clear();
  _impl_.output_modalities_.Clear();
  ::memset(&_impl_.supports_streaming_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.supports_system_messages_) -
      reinterpret_cast<char*>(&_impl_.supports_streaming_)) + sizeof(_impl_.supports_system_messages_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelCapabilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool supports_streaming = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.supports_streaming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool supports_vision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.supports_vision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool supports_function_calling = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.supports_function_calling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool supports_json_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.supports_json_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool supports_system_messages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.supports_system_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string supported_languages = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_supported_languages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.ModelCapabilities.supported_languages"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string input_modalities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_modalities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.ModelCapabilities.input_modalities"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string output_modalities = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_modalities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.ModelCapabilities.output_modalities"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelCapabilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.ModelCapabilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool supports_streaming = 1;
  if (this->_internal_supports_streaming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_supports_streaming(), target);
  }

  // bool supports_vision = 2;
  if (this->_internal_supports_vision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_supports_vision(), target);
  }

  // bool supports_function_calling = 3;
  if (this->_internal_supports_function_calling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_supports_function_calling(), target);
  }

  // bool supports_json_mode = 4;
  if (this->_internal_supports_json_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_supports_json_mode(), target);
  }

  // bool supports_system_messages = 5;
  if (this->_internal_supports_system_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_supports_system_messages(), target);
  }

  // repeated string supported_languages = 6;
  for (int i = 0, n = this->_internal_supported_languages_size(); i < n; i++) {
    const auto& s = this->_internal_supported_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.ModelCapabilities.supported_languages");
    target = stream->WriteString(6, s, target);
  }

  // repeated string input_modalities = 7;
  for (int i = 0, n = this->_internal_input_modalities_size(); i < n; i++) {
    const auto& s = this->_internal_input_modalities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.ModelCapabilities.input_modalities");
    target = stream->WriteString(7, s, target);
  }

  // repeated string output_modalities = 8;
  for (int i = 0, n = this->_internal_output_modalities_size(); i < n; i++) {
    const auto& s = this->_internal_output_modalities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.ModelCapabilities.output_modalities");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.ModelCapabilities)
  return target;
}

size_t ModelCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.ModelCapabilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string supported_languages = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.supported_languages_.size());
  for (int i = 0, n = _impl_.supported_languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.supported_languages_.Get(i));
  }

  // repeated string input_modalities = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.input_modalities_.size());
  for (int i = 0, n = _impl_.input_modalities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.input_modalities_.Get(i));
  }

  // repeated string output_modalities = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.output_modalities_.size());
  for (int i = 0, n = _impl_.output_modalities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.output_modalities_.Get(i));
  }

  // bool supports_streaming = 1;
  if (this->_internal_supports_streaming() != 0) {
    total_size += 1 + 1;
  }

  // bool supports_vision = 2;
  if (this->_internal_supports_vision() != 0) {
    total_size += 1 + 1;
  }

  // bool supports_function_calling = 3;
  if (this->_internal_supports_function_calling() != 0) {
    total_size += 1 + 1;
  }

  // bool supports_json_mode = 4;
  if (this->_internal_supports_json_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool supports_system_messages = 5;
  if (this->_internal_supports_system_messages() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelCapabilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelCapabilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelCapabilities::GetClassData() const { return &_class_data_; }


void ModelCapabilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelCapabilities*>(&to_msg);
  auto& from = static_cast<const ModelCapabilities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.ModelCapabilities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.supported_languages_.MergeFrom(from._impl_.supported_languages_);
  _this->_impl_.input_modalities_.MergeFrom(from._impl_.input_modalities_);
  _this->_impl_.output_modalities_.MergeFrom(from._impl_.output_modalities_);
  if (from._internal_supports_streaming() != 0) {
    _this->_internal_set_supports_streaming(from._internal_supports_streaming());
  }
  if (from._internal_supports_vision() != 0) {
    _this->_internal_set_supports_vision(from._internal_supports_vision());
  }
  if (from._internal_supports_function_calling() != 0) {
    _this->_internal_set_supports_function_calling(from._internal_supports_function_calling());
  }
  if (from._internal_supports_json_mode() != 0) {
    _this->_internal_set_supports_json_mode(from._internal_supports_json_mode());
  }
  if (from._internal_supports_system_messages() != 0) {
    _this->_internal_set_supports_system_messages(from._internal_supports_system_messages());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelCapabilities::CopyFrom(const ModelCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.ModelCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelCapabilities::IsInitialized() const {
  return true;
}

void ModelCapabilities::InternalSwap(ModelCapabilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.supported_languages_.InternalSwap(&other->_impl_.supported_languages_);
  _impl_.input_modalities_.InternalSwap(&other->_impl_.input_modalities_);
  _impl_.output_modalities_.InternalSwap(&other->_impl_.output_modalities_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelCapabilities, _impl_.supports_system_messages_)
      + sizeof(ModelCapabilities::_impl_.supports_system_messages_)
      - PROTOBUF_FIELD_OFFSET(ModelCapabilities, _impl_.supports_streaming_)>(
          reinterpret_cast<char*>(&_impl_.supports_streaming_),
          reinterpret_cast<char*>(&other->_impl_.supports_streaming_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelCapabilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[8]);
}

// ===================================================================

class ModelPricing::_Internal {
 public:
};

ModelPricing::ModelPricing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.ModelPricing)
}
ModelPricing::ModelPricing(const ModelPricing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelPricing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.currency_){}
    , decltype(_impl_.input_cost_per_1k_tokens_){}
    , decltype(_impl_.output_cost_per_1k_tokens_){}
    , decltype(_impl_.has_free_tier_){}
    , decltype(_impl_.free_tier_limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.input_cost_per_1k_tokens_, &from._impl_.input_cost_per_1k_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.free_tier_limit_) -
    reinterpret_cast<char*>(&_impl_.input_cost_per_1k_tokens_)) + sizeof(_impl_.free_tier_limit_));
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.ModelPricing)
}

inline void ModelPricing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.currency_){}
    , decltype(_impl_.input_cost_per_1k_tokens_){0}
    , decltype(_impl_.output_cost_per_1k_tokens_){0}
    , decltype(_impl_.has_free_tier_){false}
    , decltype(_impl_.free_tier_limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelPricing::~ModelPricing() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.ModelPricing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelPricing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currency_.Destroy();
}

void ModelPricing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelPricing::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.ModelPricing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.currency_.ClearToEmpty();
  ::memset(&_impl_.input_cost_per_1k_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.free_tier_limit_) -
      reinterpret_cast<char*>(&_impl_.input_cost_per_1k_tokens_)) + sizeof(_impl_.free_tier_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelPricing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float input_cost_per_1k_tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.input_cost_per_1k_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float output_cost_per_1k_tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.output_cost_per_1k_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.ModelPricing.currency"));
        } else
          goto handle_unusual;
        continue;
      // bool has_free_tier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.has_free_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 free_tier_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.free_tier_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelPricing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.ModelPricing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float input_cost_per_1k_tokens = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_input_cost_per_1k_tokens = this->_internal_input_cost_per_1k_tokens();
  uint32_t raw_input_cost_per_1k_tokens;
  memcpy(&raw_input_cost_per_1k_tokens, &tmp_input_cost_per_1k_tokens, sizeof(tmp_input_cost_per_1k_tokens));
  if (raw_input_cost_per_1k_tokens != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_input_cost_per_1k_tokens(), target);
  }

  // float output_cost_per_1k_tokens = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_output_cost_per_1k_tokens = this->_internal_output_cost_per_1k_tokens();
  uint32_t raw_output_cost_per_1k_tokens;
  memcpy(&raw_output_cost_per_1k_tokens, &tmp_output_cost_per_1k_tokens, sizeof(tmp_output_cost_per_1k_tokens));
  if (raw_output_cost_per_1k_tokens != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_output_cost_per_1k_tokens(), target);
  }

  // string currency = 3;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.ModelPricing.currency");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currency(), target);
  }

  // bool has_free_tier = 4;
  if (this->_internal_has_free_tier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_has_free_tier(), target);
  }

  // int32 free_tier_limit = 5;
  if (this->_internal_free_tier_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_free_tier_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.ModelPricing)
  return target;
}

size_t ModelPricing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.ModelPricing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 3;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // float input_cost_per_1k_tokens = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_input_cost_per_1k_tokens = this->_internal_input_cost_per_1k_tokens();
  uint32_t raw_input_cost_per_1k_tokens;
  memcpy(&raw_input_cost_per_1k_tokens, &tmp_input_cost_per_1k_tokens, sizeof(tmp_input_cost_per_1k_tokens));
  if (raw_input_cost_per_1k_tokens != 0) {
    total_size += 1 + 4;
  }

  // float output_cost_per_1k_tokens = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_output_cost_per_1k_tokens = this->_internal_output_cost_per_1k_tokens();
  uint32_t raw_output_cost_per_1k_tokens;
  memcpy(&raw_output_cost_per_1k_tokens, &tmp_output_cost_per_1k_tokens, sizeof(tmp_output_cost_per_1k_tokens));
  if (raw_output_cost_per_1k_tokens != 0) {
    total_size += 1 + 4;
  }

  // bool has_free_tier = 4;
  if (this->_internal_has_free_tier() != 0) {
    total_size += 1 + 1;
  }

  // int32 free_tier_limit = 5;
  if (this->_internal_free_tier_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_free_tier_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelPricing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelPricing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelPricing::GetClassData() const { return &_class_data_; }


void ModelPricing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelPricing*>(&to_msg);
  auto& from = static_cast<const ModelPricing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.ModelPricing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_input_cost_per_1k_tokens = from._internal_input_cost_per_1k_tokens();
  uint32_t raw_input_cost_per_1k_tokens;
  memcpy(&raw_input_cost_per_1k_tokens, &tmp_input_cost_per_1k_tokens, sizeof(tmp_input_cost_per_1k_tokens));
  if (raw_input_cost_per_1k_tokens != 0) {
    _this->_internal_set_input_cost_per_1k_tokens(from._internal_input_cost_per_1k_tokens());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_output_cost_per_1k_tokens = from._internal_output_cost_per_1k_tokens();
  uint32_t raw_output_cost_per_1k_tokens;
  memcpy(&raw_output_cost_per_1k_tokens, &tmp_output_cost_per_1k_tokens, sizeof(tmp_output_cost_per_1k_tokens));
  if (raw_output_cost_per_1k_tokens != 0) {
    _this->_internal_set_output_cost_per_1k_tokens(from._internal_output_cost_per_1k_tokens());
  }
  if (from._internal_has_free_tier() != 0) {
    _this->_internal_set_has_free_tier(from._internal_has_free_tier());
  }
  if (from._internal_free_tier_limit() != 0) {
    _this->_internal_set_free_tier_limit(from._internal_free_tier_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelPricing::CopyFrom(const ModelPricing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.ModelPricing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPricing::IsInitialized() const {
  return true;
}

void ModelPricing::InternalSwap(ModelPricing* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelPricing, _impl_.free_tier_limit_)
      + sizeof(ModelPricing::_impl_.free_tier_limit_)
      - PROTOBUF_FIELD_OFFSET(ModelPricing, _impl_.input_cost_per_1k_tokens_)>(
          reinterpret_cast<char*>(&_impl_.input_cost_per_1k_tokens_),
          reinterpret_cast<char*>(&other->_impl_.input_cost_per_1k_tokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelPricing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[9]);
}

// ===================================================================

class ModelLimits::_Internal {
 public:
};

ModelLimits::ModelLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.ModelLimits)
}
ModelLimits::ModelLimits(const ModelLimits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelLimits* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_context_tokens_){}
    , decltype(_impl_.max_output_tokens_){}
    , decltype(_impl_.max_requests_per_minute_){}
    , decltype(_impl_.max_tokens_per_minute_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_context_tokens_, &from._impl_.max_context_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_tokens_per_minute_) -
    reinterpret_cast<char*>(&_impl_.max_context_tokens_)) + sizeof(_impl_.max_tokens_per_minute_));
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.ModelLimits)
}

inline void ModelLimits::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.max_context_tokens_){0}
    , decltype(_impl_.max_output_tokens_){0}
    , decltype(_impl_.max_requests_per_minute_){0}
    , decltype(_impl_.max_tokens_per_minute_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ModelLimits::~ModelLimits() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.ModelLimits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelLimits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModelLimits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.ModelLimits)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_context_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_tokens_per_minute_) -
      reinterpret_cast<char*>(&_impl_.max_context_tokens_)) + sizeof(_impl_.max_tokens_per_minute_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelLimits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 max_context_tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.max_context_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_output_tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_output_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_requests_per_minute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_requests_per_minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_tokens_per_minute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_tokens_per_minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelLimits::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.ModelLimits)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_context_tokens = 1;
  if (this->_internal_max_context_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_context_tokens(), target);
  }

  // int32 max_output_tokens = 2;
  if (this->_internal_max_output_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_output_tokens(), target);
  }

  // int32 max_requests_per_minute = 3;
  if (this->_internal_max_requests_per_minute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_requests_per_minute(), target);
  }

  // int32 max_tokens_per_minute = 4;
  if (this->_internal_max_tokens_per_minute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_tokens_per_minute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.ModelLimits)
  return target;
}

size_t ModelLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.ModelLimits)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_context_tokens = 1;
  if (this->_internal_max_context_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_context_tokens());
  }

  // int32 max_output_tokens = 2;
  if (this->_internal_max_output_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_output_tokens());
  }

  // int32 max_requests_per_minute = 3;
  if (this->_internal_max_requests_per_minute() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_requests_per_minute());
  }

  // int32 max_tokens_per_minute = 4;
  if (this->_internal_max_tokens_per_minute() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_tokens_per_minute());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelLimits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelLimits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelLimits::GetClassData() const { return &_class_data_; }


void ModelLimits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelLimits*>(&to_msg);
  auto& from = static_cast<const ModelLimits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.ModelLimits)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_context_tokens() != 0) {
    _this->_internal_set_max_context_tokens(from._internal_max_context_tokens());
  }
  if (from._internal_max_output_tokens() != 0) {
    _this->_internal_set_max_output_tokens(from._internal_max_output_tokens());
  }
  if (from._internal_max_requests_per_minute() != 0) {
    _this->_internal_set_max_requests_per_minute(from._internal_max_requests_per_minute());
  }
  if (from._internal_max_tokens_per_minute() != 0) {
    _this->_internal_set_max_tokens_per_minute(from._internal_max_tokens_per_minute());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelLimits::CopyFrom(const ModelLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.ModelLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelLimits::IsInitialized() const {
  return true;
}

void ModelLimits::InternalSwap(ModelLimits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelLimits, _impl_.max_tokens_per_minute_)
      + sizeof(ModelLimits::_impl_.max_tokens_per_minute_)
      - PROTOBUF_FIELD_OFFSET(ModelLimits, _impl_.max_context_tokens_)>(
          reinterpret_cast<char*>(&_impl_.max_context_tokens_),
          reinterpret_cast<char*>(&other->_impl_.max_context_tokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelLimits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[10]);
}

// ===================================================================

class CompletionChunkPayload::_Internal {
 public:
  static const ::unhinged::common::v1::UsageMetrics& usage(const CompletionChunkPayload* msg);
};

const ::unhinged::common::v1::UsageMetrics&
CompletionChunkPayload::_Internal::usage(const CompletionChunkPayload* msg) {
  return *msg->_impl_.usage_;
}
void CompletionChunkPayload::clear_tool_calls() {
  _impl_.tool_calls_.Clear();
}
void CompletionChunkPayload::clear_usage() {
  if (GetArenaForAllocation() == nullptr && _impl_.usage_ != nullptr) {
    delete _impl_.usage_;
  }
  _impl_.usage_ = nullptr;
}
CompletionChunkPayload::CompletionChunkPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.CompletionChunkPayload)
}
CompletionChunkPayload::CompletionChunkPayload(const CompletionChunkPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompletionChunkPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_calls_){from._impl_.tool_calls_}
    , decltype(_impl_.completion_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.finish_reason_){}
    , decltype(_impl_.usage_){nullptr}
    , decltype(_impl_.choice_index_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.completion_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.completion_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_completion_id().empty()) {
    _this->_impl_.completion_id_.Set(from._internal_completion_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.finish_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.finish_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_finish_reason().empty()) {
    _this->_impl_.finish_reason_.Set(from._internal_finish_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_usage()) {
    _this->_impl_.usage_ = new ::unhinged::common::v1::UsageMetrics(*from._impl_.usage_);
  }
  ::memcpy(&_impl_.choice_index_, &from._impl_.choice_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.choice_index_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.CompletionChunkPayload)
}

inline void CompletionChunkPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_calls_){arena}
    , decltype(_impl_.completion_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.finish_reason_){}
    , decltype(_impl_.usage_){nullptr}
    , decltype(_impl_.choice_index_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.completion_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.completion_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.finish_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.finish_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompletionChunkPayload::~CompletionChunkPayload() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.CompletionChunkPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompletionChunkPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tool_calls_.~RepeatedPtrField();
  _impl_.completion_id_.Destroy();
  _impl_.content_.Destroy();
  _impl_.finish_reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.usage_;
}

void CompletionChunkPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompletionChunkPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.CompletionChunkPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tool_calls_.Clear();
  _impl_.completion_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.finish_reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.usage_ != nullptr) {
    delete _impl_.usage_;
  }
  _impl_.usage_ = nullptr;
  ::memset(&_impl_.choice_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.choice_index_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionChunkPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string completion_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_completion_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.CompletionChunkPayload.completion_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 choice_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.choice_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.llm.v1.CompletionChunkType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::unhinged::llm::v1::CompletionChunkType>(val));
        } else
          goto handle_unusual;
        continue;
      // string content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.CompletionChunkPayload.content"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.chat.v1.ToolCall tool_calls = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tool_calls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string finish_reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_finish_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.CompletionChunkPayload.finish_reason"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.UsageMetrics usage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_usage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompletionChunkPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.CompletionChunkPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string completion_id = 1;
  if (!this->_internal_completion_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_completion_id().data(), static_cast<int>(this->_internal_completion_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.CompletionChunkPayload.completion_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_completion_id(), target);
  }

  // int32 choice_index = 2;
  if (this->_internal_choice_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_choice_index(), target);
  }

  // .unhinged.llm.v1.CompletionChunkType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.CompletionChunkPayload.content");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_content(), target);
  }

  // repeated .unhinged.chat.v1.ToolCall tool_calls = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tool_calls_size()); i < n; i++) {
    const auto& repfield = this->_internal_tool_calls(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string finish_reason = 6;
  if (!this->_internal_finish_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_finish_reason().data(), static_cast<int>(this->_internal_finish_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.CompletionChunkPayload.finish_reason");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_finish_reason(), target);
  }

  // .unhinged.common.v1.UsageMetrics usage = 7;
  if (this->_internal_has_usage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::usage(this),
        _Internal::usage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.CompletionChunkPayload)
  return target;
}

size_t CompletionChunkPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.CompletionChunkPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.chat.v1.ToolCall tool_calls = 5;
  total_size += 1UL * this->_internal_tool_calls_size();
  for (const auto& msg : this->_impl_.tool_calls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string completion_id = 1;
  if (!this->_internal_completion_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_completion_id());
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string finish_reason = 6;
  if (!this->_internal_finish_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_finish_reason());
  }

  // .unhinged.common.v1.UsageMetrics usage = 7;
  if (this->_internal_has_usage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usage_);
  }

  // int32 choice_index = 2;
  if (this->_internal_choice_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_choice_index());
  }

  // .unhinged.llm.v1.CompletionChunkType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompletionChunkPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompletionChunkPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompletionChunkPayload::GetClassData() const { return &_class_data_; }


void CompletionChunkPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompletionChunkPayload*>(&to_msg);
  auto& from = static_cast<const CompletionChunkPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.CompletionChunkPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tool_calls_.MergeFrom(from._impl_.tool_calls_);
  if (!from._internal_completion_id().empty()) {
    _this->_internal_set_completion_id(from._internal_completion_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_finish_reason().empty()) {
    _this->_internal_set_finish_reason(from._internal_finish_reason());
  }
  if (from._internal_has_usage()) {
    _this->_internal_mutable_usage()->::unhinged::common::v1::UsageMetrics::MergeFrom(
        from._internal_usage());
  }
  if (from._internal_choice_index() != 0) {
    _this->_internal_set_choice_index(from._internal_choice_index());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompletionChunkPayload::CopyFrom(const CompletionChunkPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.CompletionChunkPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionChunkPayload::IsInitialized() const {
  return true;
}

void CompletionChunkPayload::InternalSwap(CompletionChunkPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tool_calls_.InternalSwap(&other->_impl_.tool_calls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.completion_id_, lhs_arena,
      &other->_impl_.completion_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.finish_reason_, lhs_arena,
      &other->_impl_.finish_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompletionChunkPayload, _impl_.type_)
      + sizeof(CompletionChunkPayload::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CompletionChunkPayload, _impl_.usage_)>(
          reinterpret_cast<char*>(&_impl_.usage_),
          reinterpret_cast<char*>(&other->_impl_.usage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionChunkPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[11]);
}

// ===================================================================

class ListModelsRequest::_Internal {
 public:
  static const ::unhinged::common::v1::PaginationRequest& pagination(const ListModelsRequest* msg);
};

const ::unhinged::common::v1::PaginationRequest&
ListModelsRequest::_Internal::pagination(const ListModelsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void ListModelsRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
void ListModelsRequest::clear_filters() {
  _impl_.filters_.Clear();
}
ListModelsRequest::ListModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.ListModelsRequest)
}
ListModelsRequest::ListModelsRequest(const ListModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListModelsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){from._impl_.filters_}
    , decltype(_impl_.provider_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.available_only_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_provider().empty()) {
    _this->_impl_.provider_.Set(from._internal_provider(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::unhinged::common::v1::PaginationRequest(*from._impl_.pagination_);
  }
  _this->_impl_.available_only_ = from._impl_.available_only_;
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.ListModelsRequest)
}

inline void ListModelsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){arena}
    , decltype(_impl_.provider_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.available_only_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListModelsRequest::~ListModelsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.ListModelsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListModelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filters_.~RepeatedPtrField();
  _impl_.provider_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void ListModelsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.ListModelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  _impl_.provider_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.available_only_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string provider = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.ListModelsRequest.provider"));
        } else
          goto handle_unusual;
        continue;
      // bool available_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.available_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.PaginationRequest pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.common.v1.Filter filters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.ListModelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string provider = 1;
  if (!this->_internal_provider().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.ListModelsRequest.provider");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_provider(), target);
  }

  // bool available_only = 2;
  if (this->_internal_available_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_available_only(), target);
  }

  // .unhinged.common.v1.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // repeated .unhinged.common.v1.Filter filters = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.ListModelsRequest)
  return target;
}

size_t ListModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.ListModelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.common.v1.Filter filters = 4;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->_impl_.filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string provider = 1;
  if (!this->_internal_provider().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  // .unhinged.common.v1.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // bool available_only = 2;
  if (this->_internal_available_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListModelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelsRequest::GetClassData() const { return &_class_data_; }


void ListModelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListModelsRequest*>(&to_msg);
  auto& from = static_cast<const ListModelsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.ListModelsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filters_.MergeFrom(from._impl_.filters_);
  if (!from._internal_provider().empty()) {
    _this->_internal_set_provider(from._internal_provider());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::unhinged::common::v1::PaginationRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_available_only() != 0) {
    _this->_internal_set_available_only(from._internal_available_only());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelsRequest::CopyFrom(const ListModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.ListModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelsRequest::IsInitialized() const {
  return true;
}

void ListModelsRequest::InternalSwap(ListModelsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.provider_, lhs_arena,
      &other->_impl_.provider_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelsRequest, _impl_.available_only_)
      + sizeof(ListModelsRequest::_impl_.available_only_)
      - PROTOBUF_FIELD_OFFSET(ListModelsRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[12]);
}

// ===================================================================

class ListModelsResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const ListModelsResponse* msg);
  static const ::unhinged::common::v1::PaginationResponse& pagination(const ListModelsResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
ListModelsResponse::_Internal::response(const ListModelsResponse* msg) {
  return *msg->_impl_.response_;
}
const ::unhinged::common::v1::PaginationResponse&
ListModelsResponse::_Internal::pagination(const ListModelsResponse* msg) {
  return *msg->_impl_.pagination_;
}
void ListModelsResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
void ListModelsResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
ListModelsResponse::ListModelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.ListModelsResponse)
}
ListModelsResponse::ListModelsResponse(const ListModelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListModelsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.models_){from._impl_.models_}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::unhinged::common::v1::PaginationResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.ListModelsResponse)
}

inline void ListModelsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.models_){arena}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListModelsResponse::~ListModelsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.ListModelsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListModelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.models_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void ListModelsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListModelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.ListModelsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.models_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.llm.v1.Model models = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.PaginationResponse pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.ListModelsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // repeated .unhinged.llm.v1.Model models = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .unhinged.common.v1.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.ListModelsResponse)
  return target;
}

size_t ListModelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.ListModelsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.llm.v1.Model models = 2;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->_impl_.models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .unhinged.common.v1.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListModelsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelsResponse::GetClassData() const { return &_class_data_; }


void ListModelsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListModelsResponse*>(&to_msg);
  auto& from = static_cast<const ListModelsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.ListModelsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.models_.MergeFrom(from._impl_.models_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::unhinged::common::v1::PaginationResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelsResponse::CopyFrom(const ListModelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.ListModelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelsResponse::IsInitialized() const {
  return true;
}

void ListModelsResponse::InternalSwap(ListModelsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.models_.InternalSwap(&other->_impl_.models_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelsResponse, _impl_.pagination_)
      + sizeof(ListModelsResponse::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(ListModelsResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[13]);
}

// ===================================================================

class GetModelRequest::_Internal {
 public:
};

GetModelRequest::GetModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.GetModelRequest)
}
GetModelRequest::GetModelRequest(const GetModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetModelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.include_pricing_){}
    , decltype(_impl_.include_capabilities_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.include_pricing_, &from._impl_.include_pricing_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_capabilities_) -
    reinterpret_cast<char*>(&_impl_.include_pricing_)) + sizeof(_impl_.include_capabilities_));
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.GetModelRequest)
}

inline void GetModelRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.include_pricing_){false}
    , decltype(_impl_.include_capabilities_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetModelRequest::~GetModelRequest() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.GetModelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
}

void GetModelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.GetModelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  ::memset(&_impl_.include_pricing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.include_capabilities_) -
      reinterpret_cast<char*>(&_impl_.include_pricing_)) + sizeof(_impl_.include_capabilities_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.GetModelRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // bool include_pricing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.include_pricing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_capabilities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.include_capabilities_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.GetModelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_id = 1;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.GetModelRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_id(), target);
  }

  // bool include_pricing = 2;
  if (this->_internal_include_pricing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_include_pricing(), target);
  }

  // bool include_capabilities = 3;
  if (this->_internal_include_capabilities() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_include_capabilities(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.GetModelRequest)
  return target;
}

size_t GetModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.GetModelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 1;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // bool include_pricing = 2;
  if (this->_internal_include_pricing() != 0) {
    total_size += 1 + 1;
  }

  // bool include_capabilities = 3;
  if (this->_internal_include_capabilities() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetModelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelRequest::GetClassData() const { return &_class_data_; }


void GetModelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetModelRequest*>(&to_msg);
  auto& from = static_cast<const GetModelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.GetModelRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_include_pricing() != 0) {
    _this->_internal_set_include_pricing(from._internal_include_pricing());
  }
  if (from._internal_include_capabilities() != 0) {
    _this->_internal_set_include_capabilities(from._internal_include_capabilities());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelRequest::CopyFrom(const GetModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.GetModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelRequest::IsInitialized() const {
  return true;
}

void GetModelRequest::InternalSwap(GetModelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetModelRequest, _impl_.include_capabilities_)
      + sizeof(GetModelRequest::_impl_.include_capabilities_)
      - PROTOBUF_FIELD_OFFSET(GetModelRequest, _impl_.include_pricing_)>(
          reinterpret_cast<char*>(&_impl_.include_pricing_),
          reinterpret_cast<char*>(&other->_impl_.include_pricing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[14]);
}

// ===================================================================

class GetModelResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const GetModelResponse* msg);
  static const ::unhinged::llm::v1::Model& model(const GetModelResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
GetModelResponse::_Internal::response(const GetModelResponse* msg) {
  return *msg->_impl_.response_;
}
const ::unhinged::llm::v1::Model&
GetModelResponse::_Internal::model(const GetModelResponse* msg) {
  return *msg->_impl_.model_;
}
void GetModelResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
GetModelResponse::GetModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.GetModelResponse)
}
GetModelResponse::GetModelResponse(const GetModelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetModelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  if (from._internal_has_model()) {
    _this->_impl_.model_ = new ::unhinged::llm::v1::Model(*from._impl_.model_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.GetModelResponse)
}

inline void GetModelResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetModelResponse::~GetModelResponse() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.GetModelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.model_;
}

void GetModelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetModelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.GetModelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_ != nullptr) {
    delete _impl_.model_;
  }
  _impl_.model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.llm.v1.Model model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.GetModelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .unhinged.llm.v1.Model model = 2;
  if (this->_internal_has_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::model(this),
        _Internal::model(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.GetModelResponse)
  return target;
}

size_t GetModelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.GetModelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .unhinged.llm.v1.Model model = 2;
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetModelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelResponse::GetClassData() const { return &_class_data_; }


void GetModelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetModelResponse*>(&to_msg);
  auto& from = static_cast<const GetModelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.GetModelResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_model()) {
    _this->_internal_mutable_model()->::unhinged::llm::v1::Model::MergeFrom(
        from._internal_model());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelResponse::CopyFrom(const GetModelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.GetModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelResponse::IsInitialized() const {
  return true;
}

void GetModelResponse::InternalSwap(GetModelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetModelResponse, _impl_.model_)
      + sizeof(GetModelResponse::_impl_.model_)
      - PROTOBUF_FIELD_OFFSET(GetModelResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[15]);
}

// ===================================================================

class TokenEstimationRequest::_Internal {
 public:
  static const ::unhinged::llm::v1::ChatMessageList& messages(const TokenEstimationRequest* msg);
};

const ::unhinged::llm::v1::ChatMessageList&
TokenEstimationRequest::_Internal::messages(const TokenEstimationRequest* msg) {
  return *msg->_impl_.input_.messages_;
}
void TokenEstimationRequest::set_allocated_messages(::unhinged::llm::v1::ChatMessageList* messages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_input();
  if (messages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(messages);
    if (message_arena != submessage_arena) {
      messages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messages, submessage_arena);
    }
    set_has_messages();
    _impl_.input_.messages_ = messages;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.llm.v1.TokenEstimationRequest.messages)
}
TokenEstimationRequest::TokenEstimationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.TokenEstimationRequest)
}
TokenEstimationRequest::TokenEstimationRequest(const TokenEstimationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenEstimationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.include_context_){}
    , decltype(_impl_.input_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.include_context_ = from._impl_.include_context_;
  clear_has_input();
  switch (from.input_case()) {
    case kText: {
      _this->_internal_set_text(from._internal_text());
      break;
    }
    case kMessages: {
      _this->_internal_mutable_messages()->::unhinged::llm::v1::ChatMessageList::MergeFrom(
          from._internal_messages());
      break;
    }
    case INPUT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.TokenEstimationRequest)
}

inline void TokenEstimationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.include_context_){false}
    , decltype(_impl_.input_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_input();
}

TokenEstimationRequest::~TokenEstimationRequest() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.TokenEstimationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenEstimationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_.Destroy();
  _impl_.session_id_.Destroy();
  if (has_input()) {
    clear_input();
  }
}

void TokenEstimationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenEstimationRequest::clear_input() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.llm.v1.TokenEstimationRequest)
  switch (input_case()) {
    case kText: {
      _impl_.input_.text_.Destroy();
      break;
    }
    case kMessages: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.input_.messages_;
      }
      break;
    }
    case INPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INPUT_NOT_SET;
}


void TokenEstimationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.TokenEstimationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.include_context_ = false;
  clear_input();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenEstimationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.TokenEstimationRequest.model"));
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.TokenEstimationRequest.text"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.llm.v1.ChatMessageList messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_messages(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.include_context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.TokenEstimationRequest.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenEstimationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.TokenEstimationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.TokenEstimationRequest.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // string text = 2;
  if (_internal_has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.TokenEstimationRequest.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // .unhinged.llm.v1.ChatMessageList messages = 3;
  if (_internal_has_messages()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::messages(this),
        _Internal::messages(this).GetCachedSize(), target, stream);
  }

  // bool include_context = 4;
  if (this->_internal_include_context() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_include_context(), target);
  }

  // string session_id = 5;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.TokenEstimationRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.TokenEstimationRequest)
  return target;
}

size_t TokenEstimationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.TokenEstimationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model = 1;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string session_id = 5;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // bool include_context = 4;
  if (this->_internal_include_context() != 0) {
    total_size += 1 + 1;
  }

  switch (input_case()) {
    // string text = 2;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
      break;
    }
    // .unhinged.llm.v1.ChatMessageList messages = 3;
    case kMessages: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.input_.messages_);
      break;
    }
    case INPUT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenEstimationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenEstimationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenEstimationRequest::GetClassData() const { return &_class_data_; }


void TokenEstimationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenEstimationRequest*>(&to_msg);
  auto& from = static_cast<const TokenEstimationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.TokenEstimationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_include_context() != 0) {
    _this->_internal_set_include_context(from._internal_include_context());
  }
  switch (from.input_case()) {
    case kText: {
      _this->_internal_set_text(from._internal_text());
      break;
    }
    case kMessages: {
      _this->_internal_mutable_messages()->::unhinged::llm::v1::ChatMessageList::MergeFrom(
          from._internal_messages());
      break;
    }
    case INPUT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenEstimationRequest::CopyFrom(const TokenEstimationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.TokenEstimationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenEstimationRequest::IsInitialized() const {
  return true;
}

void TokenEstimationRequest::InternalSwap(TokenEstimationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  swap(_impl_.include_context_, other->_impl_.include_context_);
  swap(_impl_.input_, other->_impl_.input_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenEstimationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[16]);
}

// ===================================================================

class ChatMessageList::_Internal {
 public:
};

void ChatMessageList::clear_messages() {
  _impl_.messages_.Clear();
}
ChatMessageList::ChatMessageList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.ChatMessageList)
}
ChatMessageList::ChatMessageList(const ChatMessageList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessageList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.ChatMessageList)
}

inline void ChatMessageList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChatMessageList::~ChatMessageList() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.ChatMessageList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessageList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
}

void ChatMessageList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessageList::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.ChatMessageList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessageList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.chat.v1.ChatMessage messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessageList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.ChatMessageList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.chat.v1.ChatMessage messages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.ChatMessageList)
  return target;
}

size_t ChatMessageList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.ChatMessageList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.chat.v1.ChatMessage messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessageList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessageList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessageList::GetClassData() const { return &_class_data_; }


void ChatMessageList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessageList*>(&to_msg);
  auto& from = static_cast<const ChatMessageList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.ChatMessageList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessageList::CopyFrom(const ChatMessageList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.ChatMessageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageList::IsInitialized() const {
  return true;
}

void ChatMessageList::InternalSwap(ChatMessageList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessageList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[17]);
}

// ===================================================================

class TokenEstimationResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const TokenEstimationResponse* msg);
  static const ::unhinged::common::v1::TokenUsage& usage(const TokenEstimationResponse* msg);
  static const ::unhinged::llm::v1::TokenBreakdown& breakdown(const TokenEstimationResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
TokenEstimationResponse::_Internal::response(const TokenEstimationResponse* msg) {
  return *msg->_impl_.response_;
}
const ::unhinged::common::v1::TokenUsage&
TokenEstimationResponse::_Internal::usage(const TokenEstimationResponse* msg) {
  return *msg->_impl_.usage_;
}
const ::unhinged::llm::v1::TokenBreakdown&
TokenEstimationResponse::_Internal::breakdown(const TokenEstimationResponse* msg) {
  return *msg->_impl_.breakdown_;
}
void TokenEstimationResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
void TokenEstimationResponse::clear_usage() {
  if (GetArenaForAllocation() == nullptr && _impl_.usage_ != nullptr) {
    delete _impl_.usage_;
  }
  _impl_.usage_ = nullptr;
}
TokenEstimationResponse::TokenEstimationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.TokenEstimationResponse)
}
TokenEstimationResponse::TokenEstimationResponse(const TokenEstimationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenEstimationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.usage_){nullptr}
    , decltype(_impl_.breakdown_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  if (from._internal_has_usage()) {
    _this->_impl_.usage_ = new ::unhinged::common::v1::TokenUsage(*from._impl_.usage_);
  }
  if (from._internal_has_breakdown()) {
    _this->_impl_.breakdown_ = new ::unhinged::llm::v1::TokenBreakdown(*from._impl_.breakdown_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.TokenEstimationResponse)
}

inline void TokenEstimationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.usage_){nullptr}
    , decltype(_impl_.breakdown_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TokenEstimationResponse::~TokenEstimationResponse() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.TokenEstimationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenEstimationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.usage_;
  if (this != internal_default_instance()) delete _impl_.breakdown_;
}

void TokenEstimationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenEstimationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.TokenEstimationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usage_ != nullptr) {
    delete _impl_.usage_;
  }
  _impl_.usage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.breakdown_ != nullptr) {
    delete _impl_.breakdown_;
  }
  _impl_.breakdown_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenEstimationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.TokenUsage usage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_usage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.llm.v1.TokenBreakdown breakdown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_breakdown(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenEstimationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.TokenEstimationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .unhinged.common.v1.TokenUsage usage = 2;
  if (this->_internal_has_usage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::usage(this),
        _Internal::usage(this).GetCachedSize(), target, stream);
  }

  // .unhinged.llm.v1.TokenBreakdown breakdown = 3;
  if (this->_internal_has_breakdown()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::breakdown(this),
        _Internal::breakdown(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.TokenEstimationResponse)
  return target;
}

size_t TokenEstimationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.TokenEstimationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .unhinged.common.v1.TokenUsage usage = 2;
  if (this->_internal_has_usage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usage_);
  }

  // .unhinged.llm.v1.TokenBreakdown breakdown = 3;
  if (this->_internal_has_breakdown()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.breakdown_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenEstimationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenEstimationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenEstimationResponse::GetClassData() const { return &_class_data_; }


void TokenEstimationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenEstimationResponse*>(&to_msg);
  auto& from = static_cast<const TokenEstimationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.TokenEstimationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_usage()) {
    _this->_internal_mutable_usage()->::unhinged::common::v1::TokenUsage::MergeFrom(
        from._internal_usage());
  }
  if (from._internal_has_breakdown()) {
    _this->_internal_mutable_breakdown()->::unhinged::llm::v1::TokenBreakdown::MergeFrom(
        from._internal_breakdown());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenEstimationResponse::CopyFrom(const TokenEstimationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.TokenEstimationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenEstimationResponse::IsInitialized() const {
  return true;
}

void TokenEstimationResponse::InternalSwap(TokenEstimationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenEstimationResponse, _impl_.breakdown_)
      + sizeof(TokenEstimationResponse::_impl_.breakdown_)
      - PROTOBUF_FIELD_OFFSET(TokenEstimationResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenEstimationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[18]);
}

// ===================================================================

class TokenBreakdown::_Internal {
 public:
};

TokenBreakdown::TokenBreakdown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.TokenBreakdown)
}
TokenBreakdown::TokenBreakdown(const TokenBreakdown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenBreakdown* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.context_documents_){from._impl_.context_documents_}
    , decltype(_impl_.system_tokens_){}
    , decltype(_impl_.user_tokens_){}
    , decltype(_impl_.assistant_tokens_){}
    , decltype(_impl_.context_tokens_){}
    , decltype(_impl_.tool_tokens_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.system_tokens_, &from._impl_.system_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tool_tokens_) -
    reinterpret_cast<char*>(&_impl_.system_tokens_)) + sizeof(_impl_.tool_tokens_));
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.TokenBreakdown)
}

inline void TokenBreakdown::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.context_documents_){arena}
    , decltype(_impl_.system_tokens_){0}
    , decltype(_impl_.user_tokens_){0}
    , decltype(_impl_.assistant_tokens_){0}
    , decltype(_impl_.context_tokens_){0}
    , decltype(_impl_.tool_tokens_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TokenBreakdown::~TokenBreakdown() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.TokenBreakdown)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenBreakdown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.context_documents_.~RepeatedPtrField();
}

void TokenBreakdown::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenBreakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.TokenBreakdown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.context_documents_.Clear();
  ::memset(&_impl_.system_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tool_tokens_) -
      reinterpret_cast<char*>(&_impl_.system_tokens_)) + sizeof(_impl_.tool_tokens_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenBreakdown::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 system_tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.system_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 user_tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 assistant_tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.assistant_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 context_tokens = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.context_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tool_tokens = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.tool_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.llm.v1.DocumentTokens context_documents = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_context_documents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenBreakdown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.TokenBreakdown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 system_tokens = 1;
  if (this->_internal_system_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_system_tokens(), target);
  }

  // int32 user_tokens = 2;
  if (this->_internal_user_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_tokens(), target);
  }

  // int32 assistant_tokens = 3;
  if (this->_internal_assistant_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_assistant_tokens(), target);
  }

  // int32 context_tokens = 4;
  if (this->_internal_context_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_context_tokens(), target);
  }

  // int32 tool_tokens = 5;
  if (this->_internal_tool_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_tool_tokens(), target);
  }

  // repeated .unhinged.llm.v1.DocumentTokens context_documents = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_context_documents_size()); i < n; i++) {
    const auto& repfield = this->_internal_context_documents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.TokenBreakdown)
  return target;
}

size_t TokenBreakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.TokenBreakdown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.llm.v1.DocumentTokens context_documents = 6;
  total_size += 1UL * this->_internal_context_documents_size();
  for (const auto& msg : this->_impl_.context_documents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 system_tokens = 1;
  if (this->_internal_system_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_system_tokens());
  }

  // int32 user_tokens = 2;
  if (this->_internal_user_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_tokens());
  }

  // int32 assistant_tokens = 3;
  if (this->_internal_assistant_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_assistant_tokens());
  }

  // int32 context_tokens = 4;
  if (this->_internal_context_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_context_tokens());
  }

  // int32 tool_tokens = 5;
  if (this->_internal_tool_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tool_tokens());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenBreakdown::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenBreakdown::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenBreakdown::GetClassData() const { return &_class_data_; }


void TokenBreakdown::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenBreakdown*>(&to_msg);
  auto& from = static_cast<const TokenBreakdown&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.TokenBreakdown)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.context_documents_.MergeFrom(from._impl_.context_documents_);
  if (from._internal_system_tokens() != 0) {
    _this->_internal_set_system_tokens(from._internal_system_tokens());
  }
  if (from._internal_user_tokens() != 0) {
    _this->_internal_set_user_tokens(from._internal_user_tokens());
  }
  if (from._internal_assistant_tokens() != 0) {
    _this->_internal_set_assistant_tokens(from._internal_assistant_tokens());
  }
  if (from._internal_context_tokens() != 0) {
    _this->_internal_set_context_tokens(from._internal_context_tokens());
  }
  if (from._internal_tool_tokens() != 0) {
    _this->_internal_set_tool_tokens(from._internal_tool_tokens());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenBreakdown::CopyFrom(const TokenBreakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.TokenBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenBreakdown::IsInitialized() const {
  return true;
}

void TokenBreakdown::InternalSwap(TokenBreakdown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.context_documents_.InternalSwap(&other->_impl_.context_documents_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenBreakdown, _impl_.tool_tokens_)
      + sizeof(TokenBreakdown::_impl_.tool_tokens_)
      - PROTOBUF_FIELD_OFFSET(TokenBreakdown, _impl_.system_tokens_)>(
          reinterpret_cast<char*>(&_impl_.system_tokens_),
          reinterpret_cast<char*>(&other->_impl_.system_tokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenBreakdown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[19]);
}

// ===================================================================

class DocumentTokens::_Internal {
 public:
};

DocumentTokens::DocumentTokens(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.DocumentTokens)
}
DocumentTokens::DocumentTokens(const DocumentTokens& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentTokens* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.document_id_){}
    , decltype(_impl_.document_type_){}
    , decltype(_impl_.token_count_){}
    , decltype(_impl_.relevance_score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_id().empty()) {
    _this->_impl_.document_id_.Set(from._internal_document_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.document_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_type().empty()) {
    _this->_impl_.document_type_.Set(from._internal_document_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.token_count_, &from._impl_.token_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.relevance_score_) -
    reinterpret_cast<char*>(&_impl_.token_count_)) + sizeof(_impl_.relevance_score_));
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.DocumentTokens)
}

inline void DocumentTokens::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.document_id_){}
    , decltype(_impl_.document_type_){}
    , decltype(_impl_.token_count_){0}
    , decltype(_impl_.relevance_score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.document_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.document_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentTokens::~DocumentTokens() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.DocumentTokens)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentTokens::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_id_.Destroy();
  _impl_.document_type_.Destroy();
}

void DocumentTokens::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentTokens::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.DocumentTokens)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_id_.ClearToEmpty();
  _impl_.document_type_.ClearToEmpty();
  ::memset(&_impl_.token_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.relevance_score_) -
      reinterpret_cast<char*>(&_impl_.token_count_)) + sizeof(_impl_.relevance_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentTokens::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.DocumentTokens.document_id"));
        } else
          goto handle_unusual;
        continue;
      // string document_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_document_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.DocumentTokens.document_type"));
        } else
          goto handle_unusual;
        continue;
      // int32 token_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.token_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float relevance_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.relevance_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentTokens::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.DocumentTokens)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_id = 1;
  if (!this->_internal_document_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_id().data(), static_cast<int>(this->_internal_document_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.DocumentTokens.document_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_id(), target);
  }

  // string document_type = 2;
  if (!this->_internal_document_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_type().data(), static_cast<int>(this->_internal_document_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.DocumentTokens.document_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_document_type(), target);
  }

  // int32 token_count = 3;
  if (this->_internal_token_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_token_count(), target);
  }

  // float relevance_score = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_relevance_score = this->_internal_relevance_score();
  uint32_t raw_relevance_score;
  memcpy(&raw_relevance_score, &tmp_relevance_score, sizeof(tmp_relevance_score));
  if (raw_relevance_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_relevance_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.DocumentTokens)
  return target;
}

size_t DocumentTokens::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.DocumentTokens)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document_id = 1;
  if (!this->_internal_document_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_id());
  }

  // string document_type = 2;
  if (!this->_internal_document_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_type());
  }

  // int32 token_count = 3;
  if (this->_internal_token_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_token_count());
  }

  // float relevance_score = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_relevance_score = this->_internal_relevance_score();
  uint32_t raw_relevance_score;
  memcpy(&raw_relevance_score, &tmp_relevance_score, sizeof(tmp_relevance_score));
  if (raw_relevance_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentTokens::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentTokens::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentTokens::GetClassData() const { return &_class_data_; }


void DocumentTokens::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentTokens*>(&to_msg);
  auto& from = static_cast<const DocumentTokens&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.DocumentTokens)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_document_id().empty()) {
    _this->_internal_set_document_id(from._internal_document_id());
  }
  if (!from._internal_document_type().empty()) {
    _this->_internal_set_document_type(from._internal_document_type());
  }
  if (from._internal_token_count() != 0) {
    _this->_internal_set_token_count(from._internal_token_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_relevance_score = from._internal_relevance_score();
  uint32_t raw_relevance_score;
  memcpy(&raw_relevance_score, &tmp_relevance_score, sizeof(tmp_relevance_score));
  if (raw_relevance_score != 0) {
    _this->_internal_set_relevance_score(from._internal_relevance_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentTokens::CopyFrom(const DocumentTokens& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.DocumentTokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentTokens::IsInitialized() const {
  return true;
}

void DocumentTokens::InternalSwap(DocumentTokens* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_id_, lhs_arena,
      &other->_impl_.document_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_type_, lhs_arena,
      &other->_impl_.document_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentTokens, _impl_.relevance_score_)
      + sizeof(DocumentTokens::_impl_.relevance_score_)
      - PROTOBUF_FIELD_OFFSET(DocumentTokens, _impl_.token_count_)>(
          reinterpret_cast<char*>(&_impl_.token_count_),
          reinterpret_cast<char*>(&other->_impl_.token_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentTokens::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[20]);
}

// ===================================================================

class TokenCountRequest::_Internal {
 public:
};

TokenCountRequest::TokenCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.TokenCountRequest)
}
TokenCountRequest::TokenCountRequest(const TokenCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenCountRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){}
    , decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.TokenCountRequest)
}

inline void TokenCountRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){}
    , decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenCountRequest::~TokenCountRequest() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.TokenCountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenCountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_.Destroy();
  _impl_.text_.Destroy();
}

void TokenCountRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.TokenCountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenCountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.TokenCountRequest.model"));
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.TokenCountRequest.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenCountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.TokenCountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.TokenCountRequest.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.TokenCountRequest.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.TokenCountRequest)
  return target;
}

size_t TokenCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.TokenCountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model = 1;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenCountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenCountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenCountRequest::GetClassData() const { return &_class_data_; }


void TokenCountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenCountRequest*>(&to_msg);
  auto& from = static_cast<const TokenCountRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.TokenCountRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenCountRequest::CopyFrom(const TokenCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.TokenCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenCountRequest::IsInitialized() const {
  return true;
}

void TokenCountRequest::InternalSwap(TokenCountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenCountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[21]);
}

// ===================================================================

class TokenCountResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const TokenCountResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
TokenCountResponse::_Internal::response(const TokenCountResponse* msg) {
  return *msg->_impl_.response_;
}
void TokenCountResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
TokenCountResponse::TokenCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.TokenCountResponse)
}
TokenCountResponse::TokenCountResponse(const TokenCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenCountResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tokens_){from._impl_.tokens_}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.token_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  _this->_impl_.token_count_ = from._impl_.token_count_;
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.TokenCountResponse)
}

inline void TokenCountResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tokens_){arena}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.token_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TokenCountResponse::~TokenCountResponse() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.TokenCountResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tokens_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void TokenCountResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.TokenCountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tokens_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _impl_.token_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenCountResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 token_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.token_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.llm.v1.TokenInfo tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenCountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.TokenCountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // int32 token_count = 2;
  if (this->_internal_token_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_token_count(), target);
  }

  // repeated .unhinged.llm.v1.TokenInfo tokens = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tokens_size()); i < n; i++) {
    const auto& repfield = this->_internal_tokens(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.TokenCountResponse)
  return target;
}

size_t TokenCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.TokenCountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.llm.v1.TokenInfo tokens = 3;
  total_size += 1UL * this->_internal_tokens_size();
  for (const auto& msg : this->_impl_.tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // int32 token_count = 2;
  if (this->_internal_token_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_token_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenCountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenCountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenCountResponse::GetClassData() const { return &_class_data_; }


void TokenCountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenCountResponse*>(&to_msg);
  auto& from = static_cast<const TokenCountResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.TokenCountResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tokens_.MergeFrom(from._impl_.tokens_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  if (from._internal_token_count() != 0) {
    _this->_internal_set_token_count(from._internal_token_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenCountResponse::CopyFrom(const TokenCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.TokenCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenCountResponse::IsInitialized() const {
  return true;
}

void TokenCountResponse::InternalSwap(TokenCountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tokens_.InternalSwap(&other->_impl_.tokens_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenCountResponse, _impl_.token_count_)
      + sizeof(TokenCountResponse::_impl_.token_count_)
      - PROTOBUF_FIELD_OFFSET(TokenCountResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenCountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[22]);
}

// ===================================================================

class TokenInfo::_Internal {
 public:
};

TokenInfo::TokenInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.llm.v1.TokenInfo)
}
TokenInfo::TokenInfo(const TokenInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.token_id_){}
    , decltype(_impl_.probability_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.token_id_, &from._impl_.token_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.probability_) -
    reinterpret_cast<char*>(&_impl_.token_id_)) + sizeof(_impl_.probability_));
  // @@protoc_insertion_point(copy_constructor:unhinged.llm.v1.TokenInfo)
}

inline void TokenInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.token_id_){0}
    , decltype(_impl_.probability_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenInfo::~TokenInfo() {
  // @@protoc_insertion_point(destructor:unhinged.llm.v1.TokenInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void TokenInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.llm.v1.TokenInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  ::memset(&_impl_.token_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.probability_) -
      reinterpret_cast<char*>(&_impl_.token_id_)) + sizeof(_impl_.probability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.llm.v1.TokenInfo.token"));
        } else
          goto handle_unusual;
        continue;
      // int32 token_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.token_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float probability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.llm.v1.TokenInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.llm.v1.TokenInfo.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int32 token_id = 2;
  if (this->_internal_token_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_token_id(), target);
  }

  // float probability = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probability = this->_internal_probability();
  uint32_t raw_probability;
  memcpy(&raw_probability, &tmp_probability, sizeof(tmp_probability));
  if (raw_probability != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_probability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.llm.v1.TokenInfo)
  return target;
}

size_t TokenInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.llm.v1.TokenInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int32 token_id = 2;
  if (this->_internal_token_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_token_id());
  }

  // float probability = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probability = this->_internal_probability();
  uint32_t raw_probability;
  memcpy(&raw_probability, &tmp_probability, sizeof(tmp_probability));
  if (raw_probability != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenInfo::GetClassData() const { return &_class_data_; }


void TokenInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenInfo*>(&to_msg);
  auto& from = static_cast<const TokenInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.llm.v1.TokenInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_token_id() != 0) {
    _this->_internal_set_token_id(from._internal_token_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probability = from._internal_probability();
  uint32_t raw_probability;
  memcpy(&raw_probability, &tmp_probability, sizeof(tmp_probability));
  if (raw_probability != 0) {
    _this->_internal_set_probability(from._internal_probability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenInfo::CopyFrom(const TokenInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.llm.v1.TokenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenInfo::IsInitialized() const {
  return true;
}

void TokenInfo::InternalSwap(TokenInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenInfo, _impl_.probability_)
      + sizeof(TokenInfo::_impl_.probability_)
      - PROTOBUF_FIELD_OFFSET(TokenInfo, _impl_.token_id_)>(
          reinterpret_cast<char*>(&_impl_.token_id_),
          reinterpret_cast<char*>(&other->_impl_.token_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_llm_2eproto_getter, &descriptor_table_llm_2eproto_once,
      file_level_metadata_llm_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace llm
}  // namespace unhinged
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::CompletionRequest*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::CompletionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::CompletionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::CompletionOptions*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::CompletionOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::CompletionOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::ContextOptions*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::ContextOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::ContextOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::ToolDefinition*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::ToolDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::ToolDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::CompletionResponse*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::CompletionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::CompletionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::CompletionChoice*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::CompletionChoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::CompletionChoice >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::CompletionMetadata*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::CompletionMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::CompletionMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::Model*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::Model >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::Model >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::ModelCapabilities*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::ModelCapabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::ModelCapabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::ModelPricing*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::ModelPricing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::ModelPricing >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::ModelLimits*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::ModelLimits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::ModelLimits >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::CompletionChunkPayload*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::CompletionChunkPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::CompletionChunkPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::ListModelsRequest*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::ListModelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::ListModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::ListModelsResponse*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::ListModelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::ListModelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::GetModelRequest*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::GetModelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::GetModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::GetModelResponse*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::GetModelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::GetModelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::TokenEstimationRequest*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::TokenEstimationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::TokenEstimationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::ChatMessageList*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::ChatMessageList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::ChatMessageList >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::TokenEstimationResponse*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::TokenEstimationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::TokenEstimationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::TokenBreakdown*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::TokenBreakdown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::TokenBreakdown >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::DocumentTokens*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::DocumentTokens >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::DocumentTokens >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::TokenCountRequest*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::TokenCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::TokenCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::TokenCountResponse*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::TokenCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::TokenCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::llm::v1::TokenInfo*
Arena::CreateMaybeMessage< ::unhinged::llm::v1::TokenInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::llm::v1::TokenInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
