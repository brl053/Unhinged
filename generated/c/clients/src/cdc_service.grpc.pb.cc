// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cdc_service.proto

#include "cdc_service.pb.h"
#include "cdc_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace unhinged {
namespace cdc {

static const char* CDCService_method_names[] = {
  "/unhinged.cdc.CDCService/PublishEvent",
  "/unhinged.cdc.CDCService/PublishEvents",
  "/unhinged.cdc.CDCService/Subscribe",
  "/unhinged.cdc.CDCService/AcknowledgeEvents",
  "/unhinged.cdc.CDCService/ReplayEvents",
  "/unhinged.cdc.CDCService/ListDeadLetterEvents",
  "/unhinged.cdc.CDCService/ReprocessDeadLetterEvents",
  "/unhinged.cdc.CDCService/GetEventStats",
  "/unhinged.cdc.CDCService/ListSubscriptions",
  "/unhinged.cdc.CDCService/UpdateSubscription",
  "/unhinged.cdc.CDCService/DeleteSubscription",
  "/unhinged.cdc.CDCService/GetServiceStatus",
};

std::unique_ptr< CDCService::Stub> CDCService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CDCService::Stub> stub(new CDCService::Stub(channel, options));
  return stub;
}

CDCService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PublishEvent_(CDCService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PublishEvents_(CDCService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subscribe_(CDCService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_AcknowledgeEvents_(CDCService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayEvents_(CDCService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListDeadLetterEvents_(CDCService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReprocessDeadLetterEvents_(CDCService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEventStats_(CDCService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSubscriptions_(CDCService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSubscription_(CDCService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSubscription_(CDCService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServiceStatus_(CDCService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CDCService::Stub::PublishEvent(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest& request, ::unhinged::cdc::PublishEventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::cdc::PublishEventRequest, ::unhinged::cdc::PublishEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PublishEvent_, context, request, response);
}

void CDCService::Stub::async::PublishEvent(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest* request, ::unhinged::cdc::PublishEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::cdc::PublishEventRequest, ::unhinged::cdc::PublishEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishEvent_, context, request, response, std::move(f));
}

void CDCService::Stub::async::PublishEvent(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest* request, ::unhinged::cdc::PublishEventResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventResponse>* CDCService::Stub::PrepareAsyncPublishEventRaw(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::cdc::PublishEventResponse, ::unhinged::cdc::PublishEventRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PublishEvent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventResponse>* CDCService::Stub::AsyncPublishEventRaw(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPublishEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CDCService::Stub::PublishEvents(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest& request, ::unhinged::cdc::PublishEventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::cdc::PublishEventsRequest, ::unhinged::cdc::PublishEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PublishEvents_, context, request, response);
}

void CDCService::Stub::async::PublishEvents(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest* request, ::unhinged::cdc::PublishEventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::cdc::PublishEventsRequest, ::unhinged::cdc::PublishEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishEvents_, context, request, response, std::move(f));
}

void CDCService::Stub::async::PublishEvents(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest* request, ::unhinged::cdc::PublishEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventsResponse>* CDCService::Stub::PrepareAsyncPublishEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::cdc::PublishEventsResponse, ::unhinged::cdc::PublishEventsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PublishEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::PublishEventsResponse>* CDCService::Stub::AsyncPublishEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::PublishEventsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPublishEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::unhinged::cdc::EventStreamResponse>* CDCService::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::unhinged::cdc::EventStreamResponse>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void CDCService::Stub::async::Subscribe(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest* request, ::grpc::ClientReadReactor< ::unhinged::cdc::EventStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::unhinged::cdc::EventStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>* CDCService::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::cdc::EventStreamResponse>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>* CDCService::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::unhinged::cdc::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::cdc::EventStreamResponse>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

::grpc::Status CDCService::Stub::AcknowledgeEvents(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest& request, ::unhinged::cdc::AcknowledgeEventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::cdc::AcknowledgeEventsRequest, ::unhinged::cdc::AcknowledgeEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AcknowledgeEvents_, context, request, response);
}

void CDCService::Stub::async::AcknowledgeEvents(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest* request, ::unhinged::cdc::AcknowledgeEventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::cdc::AcknowledgeEventsRequest, ::unhinged::cdc::AcknowledgeEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AcknowledgeEvents_, context, request, response, std::move(f));
}

void CDCService::Stub::async::AcknowledgeEvents(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest* request, ::unhinged::cdc::AcknowledgeEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AcknowledgeEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::AcknowledgeEventsResponse>* CDCService::Stub::PrepareAsyncAcknowledgeEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::cdc::AcknowledgeEventsResponse, ::unhinged::cdc::AcknowledgeEventsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AcknowledgeEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::AcknowledgeEventsResponse>* CDCService::Stub::AsyncAcknowledgeEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAcknowledgeEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::unhinged::cdc::EventStreamResponse>* CDCService::Stub::ReplayEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::unhinged::cdc::EventStreamResponse>::Create(channel_.get(), rpcmethod_ReplayEvents_, context, request);
}

void CDCService::Stub::async::ReplayEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest* request, ::grpc::ClientReadReactor< ::unhinged::cdc::EventStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::unhinged::cdc::EventStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ReplayEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>* CDCService::Stub::AsyncReplayEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::cdc::EventStreamResponse>::Create(channel_.get(), cq, rpcmethod_ReplayEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::unhinged::cdc::EventStreamResponse>* CDCService::Stub::PrepareAsyncReplayEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReplayEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::cdc::EventStreamResponse>::Create(channel_.get(), cq, rpcmethod_ReplayEvents_, context, request, false, nullptr);
}

::grpc::Status CDCService::Stub::ListDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest& request, ::unhinged::cdc::ListDeadLetterEventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::cdc::ListDeadLetterEventsRequest, ::unhinged::cdc::ListDeadLetterEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListDeadLetterEvents_, context, request, response);
}

void CDCService::Stub::async::ListDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest* request, ::unhinged::cdc::ListDeadLetterEventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::cdc::ListDeadLetterEventsRequest, ::unhinged::cdc::ListDeadLetterEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDeadLetterEvents_, context, request, response, std::move(f));
}

void CDCService::Stub::async::ListDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest* request, ::unhinged::cdc::ListDeadLetterEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDeadLetterEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListDeadLetterEventsResponse>* CDCService::Stub::PrepareAsyncListDeadLetterEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::cdc::ListDeadLetterEventsResponse, ::unhinged::cdc::ListDeadLetterEventsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListDeadLetterEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListDeadLetterEventsResponse>* CDCService::Stub::AsyncListDeadLetterEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListDeadLetterEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CDCService::Stub::ReprocessDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest& request, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::cdc::ReprocessDeadLetterEventsRequest, ::unhinged::cdc::ReprocessDeadLetterEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReprocessDeadLetterEvents_, context, request, response);
}

void CDCService::Stub::async::ReprocessDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* request, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::cdc::ReprocessDeadLetterEventsRequest, ::unhinged::cdc::ReprocessDeadLetterEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReprocessDeadLetterEvents_, context, request, response, std::move(f));
}

void CDCService::Stub::async::ReprocessDeadLetterEvents(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* request, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReprocessDeadLetterEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>* CDCService::Stub::PrepareAsyncReprocessDeadLetterEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::cdc::ReprocessDeadLetterEventsResponse, ::unhinged::cdc::ReprocessDeadLetterEventsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReprocessDeadLetterEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ReprocessDeadLetterEventsResponse>* CDCService::Stub::AsyncReprocessDeadLetterEventsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReprocessDeadLetterEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CDCService::Stub::GetEventStats(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest& request, ::unhinged::cdc::GetEventStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::cdc::GetEventStatsRequest, ::unhinged::cdc::GetEventStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEventStats_, context, request, response);
}

void CDCService::Stub::async::GetEventStats(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest* request, ::unhinged::cdc::GetEventStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::cdc::GetEventStatsRequest, ::unhinged::cdc::GetEventStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventStats_, context, request, response, std::move(f));
}

void CDCService::Stub::async::GetEventStats(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest* request, ::unhinged::cdc::GetEventStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetEventStatsResponse>* CDCService::Stub::PrepareAsyncGetEventStatsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::cdc::GetEventStatsResponse, ::unhinged::cdc::GetEventStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEventStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetEventStatsResponse>* CDCService::Stub::AsyncGetEventStatsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::GetEventStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEventStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CDCService::Stub::ListSubscriptions(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest& request, ::unhinged::cdc::ListSubscriptionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::cdc::ListSubscriptionsRequest, ::unhinged::cdc::ListSubscriptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListSubscriptions_, context, request, response);
}

void CDCService::Stub::async::ListSubscriptions(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest* request, ::unhinged::cdc::ListSubscriptionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::cdc::ListSubscriptionsRequest, ::unhinged::cdc::ListSubscriptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSubscriptions_, context, request, response, std::move(f));
}

void CDCService::Stub::async::ListSubscriptions(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest* request, ::unhinged::cdc::ListSubscriptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSubscriptions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListSubscriptionsResponse>* CDCService::Stub::PrepareAsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::cdc::ListSubscriptionsResponse, ::unhinged::cdc::ListSubscriptionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListSubscriptions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::ListSubscriptionsResponse>* CDCService::Stub::AsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::unhinged::cdc::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListSubscriptionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CDCService::Stub::UpdateSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest& request, ::unhinged::cdc::UpdateSubscriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::cdc::UpdateSubscriptionRequest, ::unhinged::cdc::UpdateSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSubscription_, context, request, response);
}

void CDCService::Stub::async::UpdateSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest* request, ::unhinged::cdc::UpdateSubscriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::cdc::UpdateSubscriptionRequest, ::unhinged::cdc::UpdateSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSubscription_, context, request, response, std::move(f));
}

void CDCService::Stub::async::UpdateSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest* request, ::unhinged::cdc::UpdateSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSubscription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::UpdateSubscriptionResponse>* CDCService::Stub::PrepareAsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::cdc::UpdateSubscriptionResponse, ::unhinged::cdc::UpdateSubscriptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSubscription_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::UpdateSubscriptionResponse>* CDCService::Stub::AsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSubscriptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CDCService::Stub::DeleteSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest& request, ::unhinged::cdc::DeleteSubscriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::cdc::DeleteSubscriptionRequest, ::unhinged::cdc::DeleteSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSubscription_, context, request, response);
}

void CDCService::Stub::async::DeleteSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest* request, ::unhinged::cdc::DeleteSubscriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::cdc::DeleteSubscriptionRequest, ::unhinged::cdc::DeleteSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSubscription_, context, request, response, std::move(f));
}

void CDCService::Stub::async::DeleteSubscription(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest* request, ::unhinged::cdc::DeleteSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSubscription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::DeleteSubscriptionResponse>* CDCService::Stub::PrepareAsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::cdc::DeleteSubscriptionResponse, ::unhinged::cdc::DeleteSubscriptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSubscription_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::DeleteSubscriptionResponse>* CDCService::Stub::AsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSubscriptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CDCService::Stub::GetServiceStatus(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest& request, ::unhinged::cdc::GetServiceStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::cdc::GetServiceStatusRequest, ::unhinged::cdc::GetServiceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServiceStatus_, context, request, response);
}

void CDCService::Stub::async::GetServiceStatus(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest* request, ::unhinged::cdc::GetServiceStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::cdc::GetServiceStatusRequest, ::unhinged::cdc::GetServiceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceStatus_, context, request, response, std::move(f));
}

void CDCService::Stub::async::GetServiceStatus(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest* request, ::unhinged::cdc::GetServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetServiceStatusResponse>* CDCService::Stub::PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::cdc::GetServiceStatusResponse, ::unhinged::cdc::GetServiceStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServiceStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::cdc::GetServiceStatusResponse>* CDCService::Stub::AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::unhinged::cdc::GetServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServiceStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

CDCService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CDCService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CDCService::Service, ::unhinged::cdc::PublishEventRequest, ::unhinged::cdc::PublishEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CDCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::cdc::PublishEventRequest* req,
             ::unhinged::cdc::PublishEventResponse* resp) {
               return service->PublishEvent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CDCService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CDCService::Service, ::unhinged::cdc::PublishEventsRequest, ::unhinged::cdc::PublishEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CDCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::cdc::PublishEventsRequest* req,
             ::unhinged::cdc::PublishEventsResponse* resp) {
               return service->PublishEvents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CDCService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CDCService::Service, ::unhinged::cdc::SubscribeRequest, ::unhinged::cdc::EventStreamResponse>(
          [](CDCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::cdc::SubscribeRequest* req,
             ::grpc::ServerWriter<::unhinged::cdc::EventStreamResponse>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CDCService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CDCService::Service, ::unhinged::cdc::AcknowledgeEventsRequest, ::unhinged::cdc::AcknowledgeEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CDCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::cdc::AcknowledgeEventsRequest* req,
             ::unhinged::cdc::AcknowledgeEventsResponse* resp) {
               return service->AcknowledgeEvents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CDCService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CDCService::Service, ::unhinged::cdc::ReplayEventsRequest, ::unhinged::cdc::EventStreamResponse>(
          [](CDCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::cdc::ReplayEventsRequest* req,
             ::grpc::ServerWriter<::unhinged::cdc::EventStreamResponse>* writer) {
               return service->ReplayEvents(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CDCService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CDCService::Service, ::unhinged::cdc::ListDeadLetterEventsRequest, ::unhinged::cdc::ListDeadLetterEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CDCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::cdc::ListDeadLetterEventsRequest* req,
             ::unhinged::cdc::ListDeadLetterEventsResponse* resp) {
               return service->ListDeadLetterEvents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CDCService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CDCService::Service, ::unhinged::cdc::ReprocessDeadLetterEventsRequest, ::unhinged::cdc::ReprocessDeadLetterEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CDCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* req,
             ::unhinged::cdc::ReprocessDeadLetterEventsResponse* resp) {
               return service->ReprocessDeadLetterEvents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CDCService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CDCService::Service, ::unhinged::cdc::GetEventStatsRequest, ::unhinged::cdc::GetEventStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CDCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::cdc::GetEventStatsRequest* req,
             ::unhinged::cdc::GetEventStatsResponse* resp) {
               return service->GetEventStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CDCService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CDCService::Service, ::unhinged::cdc::ListSubscriptionsRequest, ::unhinged::cdc::ListSubscriptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CDCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::cdc::ListSubscriptionsRequest* req,
             ::unhinged::cdc::ListSubscriptionsResponse* resp) {
               return service->ListSubscriptions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CDCService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CDCService::Service, ::unhinged::cdc::UpdateSubscriptionRequest, ::unhinged::cdc::UpdateSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CDCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::cdc::UpdateSubscriptionRequest* req,
             ::unhinged::cdc::UpdateSubscriptionResponse* resp) {
               return service->UpdateSubscription(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CDCService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CDCService::Service, ::unhinged::cdc::DeleteSubscriptionRequest, ::unhinged::cdc::DeleteSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CDCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::cdc::DeleteSubscriptionRequest* req,
             ::unhinged::cdc::DeleteSubscriptionResponse* resp) {
               return service->DeleteSubscription(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CDCService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CDCService::Service, ::unhinged::cdc::GetServiceStatusRequest, ::unhinged::cdc::GetServiceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CDCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::cdc::GetServiceStatusRequest* req,
             ::unhinged::cdc::GetServiceStatusResponse* resp) {
               return service->GetServiceStatus(ctx, req, resp);
             }, this)));
}

CDCService::Service::~Service() {
}

::grpc::Status CDCService::Service::PublishEvent(::grpc::ServerContext* context, const ::unhinged::cdc::PublishEventRequest* request, ::unhinged::cdc::PublishEventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CDCService::Service::PublishEvents(::grpc::ServerContext* context, const ::unhinged::cdc::PublishEventsRequest* request, ::unhinged::cdc::PublishEventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CDCService::Service::Subscribe(::grpc::ServerContext* context, const ::unhinged::cdc::SubscribeRequest* request, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CDCService::Service::AcknowledgeEvents(::grpc::ServerContext* context, const ::unhinged::cdc::AcknowledgeEventsRequest* request, ::unhinged::cdc::AcknowledgeEventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CDCService::Service::ReplayEvents(::grpc::ServerContext* context, const ::unhinged::cdc::ReplayEventsRequest* request, ::grpc::ServerWriter< ::unhinged::cdc::EventStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CDCService::Service::ListDeadLetterEvents(::grpc::ServerContext* context, const ::unhinged::cdc::ListDeadLetterEventsRequest* request, ::unhinged::cdc::ListDeadLetterEventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CDCService::Service::ReprocessDeadLetterEvents(::grpc::ServerContext* context, const ::unhinged::cdc::ReprocessDeadLetterEventsRequest* request, ::unhinged::cdc::ReprocessDeadLetterEventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CDCService::Service::GetEventStats(::grpc::ServerContext* context, const ::unhinged::cdc::GetEventStatsRequest* request, ::unhinged::cdc::GetEventStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CDCService::Service::ListSubscriptions(::grpc::ServerContext* context, const ::unhinged::cdc::ListSubscriptionsRequest* request, ::unhinged::cdc::ListSubscriptionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CDCService::Service::UpdateSubscription(::grpc::ServerContext* context, const ::unhinged::cdc::UpdateSubscriptionRequest* request, ::unhinged::cdc::UpdateSubscriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CDCService::Service::DeleteSubscription(::grpc::ServerContext* context, const ::unhinged::cdc::DeleteSubscriptionRequest* request, ::unhinged::cdc::DeleteSubscriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CDCService::Service::GetServiceStatus(::grpc::ServerContext* context, const ::unhinged::cdc::GetServiceStatusRequest* request, ::unhinged::cdc::GetServiceStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace unhinged
}  // namespace cdc

