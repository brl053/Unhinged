// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway_annotations.proto

#include "gateway_annotations.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace unhinged {
namespace gateway {
namespace v1 {
PROTOBUF_CONSTEXPR HttpRule::HttpRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.query_params_)*/{}
  , /*decltype(_impl_.required_scopes_)*/{}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_wrapper_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.summary_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rate_limit_)*/nullptr
  , /*decltype(_impl_.cache_)*/nullptr
  , /*decltype(_impl_.cors_)*/nullptr
  , /*decltype(_impl_.stream_response_)*/false
  , /*decltype(_impl_.auth_required_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HttpRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HttpRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HttpRuleDefaultTypeInternal() {}
  union {
    HttpRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HttpRuleDefaultTypeInternal _HttpRule_default_instance_;
PROTOBUF_CONSTEXPR RateLimitRule::RateLimitRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_strategy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_key_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requests_per_minute_)*/0
  , /*decltype(_impl_.requests_per_hour_)*/0
  , /*decltype(_impl_.requests_per_day_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RateLimitRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RateLimitRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RateLimitRuleDefaultTypeInternal() {}
  union {
    RateLimitRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RateLimitRuleDefaultTypeInternal _RateLimitRule_default_instance_;
PROTOBUF_CONSTEXPR CacheRule::CacheRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cache_keys_)*/{}
  , /*decltype(_impl_.vary_headers_)*/{}
  , /*decltype(_impl_.ttl_seconds_)*/0
  , /*decltype(_impl_.private_cache_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CacheRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CacheRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CacheRuleDefaultTypeInternal() {}
  union {
    CacheRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CacheRuleDefaultTypeInternal _CacheRule_default_instance_;
PROTOBUF_CONSTEXPR CorsRule::CorsRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.allowed_origins_)*/{}
  , /*decltype(_impl_.allowed_methods_)*/{}
  , /*decltype(_impl_.allowed_headers_)*/{}
  , /*decltype(_impl_.allow_credentials_)*/false
  , /*decltype(_impl_.max_age_seconds_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CorsRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CorsRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CorsRuleDefaultTypeInternal() {}
  union {
    CorsRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CorsRuleDefaultTypeInternal _CorsRule_default_instance_;
PROTOBUF_CONSTEXPR WebSocketRule::WebSocketRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.required_scopes_)*/{}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.broadcast_filter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.summary_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rate_limit_)*/nullptr
  , /*decltype(_impl_.max_connections_per_user_)*/0
  , /*decltype(_impl_.idle_timeout_seconds_)*/0
  , /*decltype(_impl_.auth_required_)*/false
  , /*decltype(_impl_.broadcast_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WebSocketRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebSocketRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebSocketRuleDefaultTypeInternal() {}
  union {
    WebSocketRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebSocketRuleDefaultTypeInternal _WebSocketRule_default_instance_;
PROTOBUF_CONSTEXPR ServerSentEventsRule::ServerSentEventsRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.required_scopes_)*/{}
  , /*decltype(_impl_.filter_params_)*/{}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.routing_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.summary_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.keepalive_interval_seconds_)*/0
  , /*decltype(_impl_.max_stream_duration_seconds_)*/0
  , /*decltype(_impl_.auth_required_)*/false
  , /*decltype(_impl_.json_encode_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerSentEventsRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerSentEventsRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerSentEventsRuleDefaultTypeInternal() {}
  union {
    ServerSentEventsRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerSentEventsRuleDefaultTypeInternal _ServerSentEventsRule_default_instance_;
PROTOBUF_CONSTEXPR LongPollingRule::LongPollingRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.required_scopes_)*/{}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.events_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cursor_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.summary_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeout_seconds_)*/0
  , /*decltype(_impl_.max_events_)*/0
  , /*decltype(_impl_.auth_required_)*/false
  , /*decltype(_impl_.include_metadata_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LongPollingRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LongPollingRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LongPollingRuleDefaultTypeInternal() {}
  union {
    LongPollingRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LongPollingRuleDefaultTypeInternal _LongPollingRule_default_instance_;
PROTOBUF_CONSTEXPR ServiceRule::ServiceRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.default_scopes_)*/{}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.base_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_provider_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contact_email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.license_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.default_rate_limit_)*/nullptr
  , /*decltype(_impl_.default_cors_)*/nullptr
  , /*decltype(_impl_.default_auth_required_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceRuleDefaultTypeInternal() {}
  union {
    ServiceRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceRuleDefaultTypeInternal _ServiceRule_default_instance_;
}  // namespace v1
}  // namespace gateway
}  // namespace unhinged
static ::_pb::Metadata file_level_metadata_gateway_5fannotations_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_gateway_5fannotations_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gateway_5fannotations_2eproto = nullptr;

const uint32_t TableStruct_gateway_5fannotations_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.query_params_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.stream_response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.response_wrapper_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.auth_required_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.required_scopes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.auth_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.rate_limit_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.cache_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.cors_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.summary_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::HttpRule, _impl_.tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::RateLimitRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::RateLimitRule, _impl_.requests_per_minute_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::RateLimitRule, _impl_.requests_per_hour_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::RateLimitRule, _impl_.requests_per_day_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::RateLimitRule, _impl_.key_strategy_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::RateLimitRule, _impl_.custom_key_field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::CacheRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::CacheRule, _impl_.ttl_seconds_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::CacheRule, _impl_.cache_keys_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::CacheRule, _impl_.private_cache_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::CacheRule, _impl_.vary_headers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::CorsRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::CorsRule, _impl_.allowed_origins_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::CorsRule, _impl_.allowed_methods_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::CorsRule, _impl_.allowed_headers_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::CorsRule, _impl_.allow_credentials_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::CorsRule, _impl_.max_age_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.auth_required_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.required_scopes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.max_connections_per_user_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.idle_timeout_seconds_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.request_field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.response_field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.broadcast_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.broadcast_filter_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.rate_limit_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.summary_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::WebSocketRule, _impl_.tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.auth_required_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.required_scopes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.keepalive_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.max_stream_duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.data_field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.id_field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.json_encode_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.filter_params_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.routing_key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.summary_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServerSentEventsRule, _impl_.tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::LongPollingRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::LongPollingRule, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::LongPollingRule, _impl_.timeout_seconds_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::LongPollingRule, _impl_.max_events_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::LongPollingRule, _impl_.auth_required_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::LongPollingRule, _impl_.required_scopes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::LongPollingRule, _impl_.events_field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::LongPollingRule, _impl_.cursor_field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::LongPollingRule, _impl_.include_metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::LongPollingRule, _impl_.summary_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::LongPollingRule, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::LongPollingRule, _impl_.tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServiceRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServiceRule, _impl_.base_path_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServiceRule, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServiceRule, _impl_.default_auth_required_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServiceRule, _impl_.default_scopes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServiceRule, _impl_.auth_provider_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServiceRule, _impl_.default_rate_limit_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServiceRule, _impl_.default_cors_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServiceRule, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServiceRule, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServiceRule, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServiceRule, _impl_.contact_email_),
  PROTOBUF_FIELD_OFFSET(::unhinged::gateway::v1::ServiceRule, _impl_.license_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::unhinged::gateway::v1::HttpRule)},
  { 21, -1, -1, sizeof(::unhinged::gateway::v1::RateLimitRule)},
  { 32, -1, -1, sizeof(::unhinged::gateway::v1::CacheRule)},
  { 42, -1, -1, sizeof(::unhinged::gateway::v1::CorsRule)},
  { 53, -1, -1, sizeof(::unhinged::gateway::v1::WebSocketRule)},
  { 73, -1, -1, sizeof(::unhinged::gateway::v1::ServerSentEventsRule)},
  { 93, -1, -1, sizeof(::unhinged::gateway::v1::LongPollingRule)},
  { 110, -1, -1, sizeof(::unhinged::gateway::v1::ServiceRule)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::unhinged::gateway::v1::_HttpRule_default_instance_._instance,
  &::unhinged::gateway::v1::_RateLimitRule_default_instance_._instance,
  &::unhinged::gateway::v1::_CacheRule_default_instance_._instance,
  &::unhinged::gateway::v1::_CorsRule_default_instance_._instance,
  &::unhinged::gateway::v1::_WebSocketRule_default_instance_._instance,
  &::unhinged::gateway::v1::_ServerSentEventsRule_default_instance_._instance,
  &::unhinged::gateway::v1::_LongPollingRule_default_instance_._instance,
  &::unhinged::gateway::v1::_ServiceRule_default_instance_._instance,
};

const char descriptor_table_protodef_gateway_5fannotations_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031gateway_annotations.proto\022\023unhinged.ga"
  "teway.v1\032 google/protobuf/descriptor.pro"
  "to\"\212\003\n\010HttpRule\022\016\n\006method\030\001 \001(\t\022\014\n\004path\030"
  "\002 \001(\t\022\014\n\004body\030\003 \001(\t\022\024\n\014query_params\030\004 \003("
  "\t\022\027\n\017stream_response\030\005 \001(\010\022\030\n\020response_w"
  "rapper\030\006 \001(\t\022\025\n\rauth_required\030\n \001(\010\022\027\n\017r"
  "equired_scopes\030\013 \003(\t\022\021\n\tauth_type\030\014 \001(\t\022"
  "6\n\nrate_limit\030\017 \001(\0132\".unhinged.gateway.v"
  "1.RateLimitRule\022-\n\005cache\030\020 \001(\0132\036.unhinge"
  "d.gateway.v1.CacheRule\022+\n\004cors\030\021 \001(\0132\035.u"
  "nhinged.gateway.v1.CorsRule\022\017\n\007summary\030\024"
  " \001(\t\022\023\n\013description\030\025 \001(\t\022\014\n\004tags\030\026 \003(\t\""
  "\221\001\n\rRateLimitRule\022\033\n\023requests_per_minute"
  "\030\001 \001(\005\022\031\n\021requests_per_hour\030\002 \001(\005\022\030\n\020req"
  "uests_per_day\030\003 \001(\005\022\024\n\014key_strategy\030\004 \001("
  "\t\022\030\n\020custom_key_field\030\005 \001(\t\"a\n\tCacheRule"
  "\022\023\n\013ttl_seconds\030\001 \001(\005\022\022\n\ncache_keys\030\002 \003("
  "\t\022\025\n\rprivate_cache\030\003 \001(\010\022\024\n\014vary_headers"
  "\030\004 \003(\t\"\211\001\n\010CorsRule\022\027\n\017allowed_origins\030\001"
  " \003(\t\022\027\n\017allowed_methods\030\002 \003(\t\022\027\n\017allowed"
  "_headers\030\003 \003(\t\022\031\n\021allow_credentials\030\004 \001("
  "\010\022\027\n\017max_age_seconds\030\005 \001(\005\"\351\002\n\rWebSocket"
  "Rule\022\014\n\004path\030\001 \001(\t\022\022\n\nevent_type\030\002 \001(\t\022\025"
  "\n\rauth_required\030\n \001(\010\022\027\n\017required_scopes"
  "\030\013 \003(\t\022 \n\030max_connections_per_user\030\014 \001(\005"
  "\022\034\n\024idle_timeout_seconds\030\r \001(\005\022\025\n\rreques"
  "t_field\030\017 \001(\t\022\026\n\016response_field\030\020 \001(\t\022\021\n"
  "\tbroadcast\030\021 \001(\010\022\030\n\020broadcast_filter\030\022 \001"
  "(\t\0226\n\nrate_limit\030\024 \001(\0132\".unhinged.gatewa"
  "y.v1.RateLimitRule\022\017\n\007summary\030\031 \001(\t\022\023\n\013d"
  "escription\030\032 \001(\t\022\014\n\004tags\030\033 \003(\t\"\314\002\n\024Serve"
  "rSentEventsRule\022\014\n\004path\030\001 \001(\t\022\022\n\nevent_t"
  "ype\030\002 \001(\t\022\025\n\rauth_required\030\n \001(\010\022\027\n\017requ"
  "ired_scopes\030\013 \003(\t\022\"\n\032keepalive_interval_"
  "seconds\030\014 \001(\005\022#\n\033max_stream_duration_sec"
  "onds\030\r \001(\005\022\022\n\ndata_field\030\017 \001(\t\022\020\n\010id_fie"
  "ld\030\020 \001(\t\022\023\n\013json_encode\030\021 \001(\010\022\025\n\rfilter_"
  "params\030\024 \003(\t\022\023\n\013routing_key\030\025 \001(\t\022\017\n\007sum"
  "mary\030\031 \001(\t\022\023\n\013description\030\032 \001(\t\022\014\n\004tags\030"
  "\033 \003(\t\"\366\001\n\017LongPollingRule\022\014\n\004path\030\001 \001(\t\022"
  "\027\n\017timeout_seconds\030\002 \001(\005\022\022\n\nmax_events\030\003"
  " \001(\005\022\025\n\rauth_required\030\n \001(\010\022\027\n\017required_"
  "scopes\030\013 \003(\t\022\024\n\014events_field\030\017 \001(\t\022\024\n\014cu"
  "rsor_field\030\020 \001(\t\022\030\n\020include_metadata\030\021 \001"
  "(\010\022\017\n\007summary\030\024 \001(\t\022\023\n\013description\030\025 \001(\t"
  "\022\014\n\004tags\030\026 \003(\t\"\316\002\n\013ServiceRule\022\021\n\tbase_p"
  "ath\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\035\n\025default_au"
  "th_required\030\n \001(\010\022\026\n\016default_scopes\030\013 \003("
  "\t\022\025\n\rauth_provider\030\014 \001(\t\022>\n\022default_rate"
  "_limit\030\017 \001(\0132\".unhinged.gateway.v1.RateL"
  "imitRule\0223\n\014default_cors\030\020 \001(\0132\035.unhinge"
  "d.gateway.v1.CorsRule\022\r\n\005title\030\024 \001(\t\022\023\n\013"
  "description\030\025 \001(\t\022\014\n\004tags\030\026 \003(\t\022\025\n\rconta"
  "ct_email\030\027 \001(\t\022\017\n\007license\030\030 \001(\t:M\n\004http\022"
  "\036.google.protobuf.MethodOptions\030\321\206\003 \001(\0132"
  "\035.unhinged.gateway.v1.HttpRule:W\n\twebsoc"
  "ket\022\036.google.protobuf.MethodOptions\030\322\206\003 "
  "\001(\0132\".unhinged.gateway.v1.WebSocketRule:"
  "X\n\003sse\022\036.google.protobuf.MethodOptions\030\323"
  "\206\003 \001(\0132).unhinged.gateway.v1.ServerSentE"
  "ventsRule:\\\n\014long_polling\022\036.google.proto"
  "buf.MethodOptions\030\324\206\003 \001(\0132$.unhinged.gat"
  "eway.v1.LongPollingRule:T\n\007service\022\037.goo"
  "gle.protobuf.ServiceOptions\030\332\206\003 \001(\0132 .un"
  "hinged.gateway.v1.ServiceRule::\n\017gateway"
  "_exclude\022\037.google.protobuf.MessageOption"
  "s\030\344\206\003 \001(\010:=\n\022json_name_override\022\037.google"
  ".protobuf.MessageOptions\030\345\206\003 \001(\t:3\n\npath"
  "_param\022\035.google.protobuf.FieldOptions\030\356\206"
  "\003 \001(\010:4\n\013query_param\022\035.google.protobuf.F"
  "ieldOptions\030\357\206\003 \001(\010:5\n\014header_param\022\035.go"
  "ogle.protobuf.FieldOptions\030\360\206\003 \001(\010:3\n\npa"
  "ram_name\022\035.google.protobuf.FieldOptions\030"
  "\361\206\003 \001(\t:7\n\016required_param\022\035.google.proto"
  "buf.FieldOptions\030\362\206\003 \001(\010B-\n\020unhinged.gat"
  "ewayB\027GatewayAnnotationsProtoP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_gateway_5fannotations_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::_pbi::once_flag descriptor_table_gateway_5fannotations_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gateway_5fannotations_2eproto = {
    false, false, 3039, descriptor_table_protodef_gateway_5fannotations_2eproto,
    "gateway_annotations.proto",
    &descriptor_table_gateway_5fannotations_2eproto_once, descriptor_table_gateway_5fannotations_2eproto_deps, 1, 8,
    schemas, file_default_instances, TableStruct_gateway_5fannotations_2eproto::offsets,
    file_level_metadata_gateway_5fannotations_2eproto, file_level_enum_descriptors_gateway_5fannotations_2eproto,
    file_level_service_descriptors_gateway_5fannotations_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gateway_5fannotations_2eproto_getter() {
  return &descriptor_table_gateway_5fannotations_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gateway_5fannotations_2eproto(&descriptor_table_gateway_5fannotations_2eproto);
namespace unhinged {
namespace gateway {
namespace v1 {

// ===================================================================

class HttpRule::_Internal {
 public:
  static const ::unhinged::gateway::v1::RateLimitRule& rate_limit(const HttpRule* msg);
  static const ::unhinged::gateway::v1::CacheRule& cache(const HttpRule* msg);
  static const ::unhinged::gateway::v1::CorsRule& cors(const HttpRule* msg);
};

const ::unhinged::gateway::v1::RateLimitRule&
HttpRule::_Internal::rate_limit(const HttpRule* msg) {
  return *msg->_impl_.rate_limit_;
}
const ::unhinged::gateway::v1::CacheRule&
HttpRule::_Internal::cache(const HttpRule* msg) {
  return *msg->_impl_.cache_;
}
const ::unhinged::gateway::v1::CorsRule&
HttpRule::_Internal::cors(const HttpRule* msg) {
  return *msg->_impl_.cors_;
}
HttpRule::HttpRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.gateway.v1.HttpRule)
}
HttpRule::HttpRule(const HttpRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HttpRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.query_params_){from._impl_.query_params_}
    , decltype(_impl_.required_scopes_){from._impl_.required_scopes_}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.method_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.response_wrapper_){}
    , decltype(_impl_.auth_type_){}
    , decltype(_impl_.summary_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.rate_limit_){nullptr}
    , decltype(_impl_.cache_){nullptr}
    , decltype(_impl_.cors_){nullptr}
    , decltype(_impl_.stream_response_){}
    , decltype(_impl_.auth_required_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _impl_.response_wrapper_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_wrapper_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response_wrapper().empty()) {
    _this->_impl_.response_wrapper_.Set(from._internal_response_wrapper(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auth_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_type().empty()) {
    _this->_impl_.auth_type_.Set(from._internal_auth_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_summary().empty()) {
    _this->_impl_.summary_.Set(from._internal_summary(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_rate_limit()) {
    _this->_impl_.rate_limit_ = new ::unhinged::gateway::v1::RateLimitRule(*from._impl_.rate_limit_);
  }
  if (from._internal_has_cache()) {
    _this->_impl_.cache_ = new ::unhinged::gateway::v1::CacheRule(*from._impl_.cache_);
  }
  if (from._internal_has_cors()) {
    _this->_impl_.cors_ = new ::unhinged::gateway::v1::CorsRule(*from._impl_.cors_);
  }
  ::memcpy(&_impl_.stream_response_, &from._impl_.stream_response_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auth_required_) -
    reinterpret_cast<char*>(&_impl_.stream_response_)) + sizeof(_impl_.auth_required_));
  // @@protoc_insertion_point(copy_constructor:unhinged.gateway.v1.HttpRule)
}

inline void HttpRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.query_params_){arena}
    , decltype(_impl_.required_scopes_){arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.method_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.response_wrapper_){}
    , decltype(_impl_.auth_type_){}
    , decltype(_impl_.summary_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.rate_limit_){nullptr}
    , decltype(_impl_.cache_){nullptr}
    , decltype(_impl_.cors_){nullptr}
    , decltype(_impl_.stream_response_){false}
    , decltype(_impl_.auth_required_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.response_wrapper_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_wrapper_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HttpRule::~HttpRule() {
  // @@protoc_insertion_point(destructor:unhinged.gateway.v1.HttpRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HttpRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.query_params_.~RepeatedPtrField();
  _impl_.required_scopes_.~RepeatedPtrField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.method_.Destroy();
  _impl_.path_.Destroy();
  _impl_.body_.Destroy();
  _impl_.response_wrapper_.Destroy();
  _impl_.auth_type_.Destroy();
  _impl_.summary_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rate_limit_;
  if (this != internal_default_instance()) delete _impl_.cache_;
  if (this != internal_default_instance()) delete _impl_.cors_;
}

void HttpRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HttpRule::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.gateway.v1.HttpRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_params_.Clear();
  _impl_.required_scopes_.Clear();
  _impl_.tags_.Clear();
  _impl_.method_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _impl_.body_.ClearToEmpty();
  _impl_.response_wrapper_.ClearToEmpty();
  _impl_.auth_type_.ClearToEmpty();
  _impl_.summary_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.rate_limit_ != nullptr) {
    delete _impl_.rate_limit_;
  }
  _impl_.rate_limit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cache_ != nullptr) {
    delete _impl_.cache_;
  }
  _impl_.cache_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cors_ != nullptr) {
    delete _impl_.cors_;
  }
  _impl_.cors_ = nullptr;
  ::memset(&_impl_.stream_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.auth_required_) -
      reinterpret_cast<char*>(&_impl_.stream_response_)) + sizeof(_impl_.auth_required_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HttpRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.HttpRule.method"));
        } else
          goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.HttpRule.path"));
        } else
          goto handle_unusual;
        continue;
      // string body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.HttpRule.body"));
        } else
          goto handle_unusual;
        continue;
      // repeated string query_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_query_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.HttpRule.query_params"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool stream_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.stream_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string response_wrapper = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_response_wrapper();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.HttpRule.response_wrapper"));
        } else
          goto handle_unusual;
        continue;
      // bool auth_required = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.auth_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string required_scopes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.HttpRule.required_scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string auth_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_auth_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.HttpRule.auth_type"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.gateway.v1.RateLimitRule rate_limit = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_rate_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.gateway.v1.CacheRule cache = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_cache(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.gateway.v1.CorsRule cors = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_cors(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string summary = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_summary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.HttpRule.summary"));
        } else
          goto handle_unusual;
        continue;
      // string description = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.HttpRule.description"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.HttpRule.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HttpRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.gateway.v1.HttpRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.HttpRule.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.HttpRule.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string body = 3;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.HttpRule.body");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_body(), target);
  }

  // repeated string query_params = 4;
  for (int i = 0, n = this->_internal_query_params_size(); i < n; i++) {
    const auto& s = this->_internal_query_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.HttpRule.query_params");
    target = stream->WriteString(4, s, target);
  }

  // bool stream_response = 5;
  if (this->_internal_stream_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_stream_response(), target);
  }

  // string response_wrapper = 6;
  if (!this->_internal_response_wrapper().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_wrapper().data(), static_cast<int>(this->_internal_response_wrapper().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.HttpRule.response_wrapper");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_response_wrapper(), target);
  }

  // bool auth_required = 10;
  if (this->_internal_auth_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_auth_required(), target);
  }

  // repeated string required_scopes = 11;
  for (int i = 0, n = this->_internal_required_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_required_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.HttpRule.required_scopes");
    target = stream->WriteString(11, s, target);
  }

  // string auth_type = 12;
  if (!this->_internal_auth_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_type().data(), static_cast<int>(this->_internal_auth_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.HttpRule.auth_type");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_auth_type(), target);
  }

  // .unhinged.gateway.v1.RateLimitRule rate_limit = 15;
  if (this->_internal_has_rate_limit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::rate_limit(this),
        _Internal::rate_limit(this).GetCachedSize(), target, stream);
  }

  // .unhinged.gateway.v1.CacheRule cache = 16;
  if (this->_internal_has_cache()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::cache(this),
        _Internal::cache(this).GetCachedSize(), target, stream);
  }

  // .unhinged.gateway.v1.CorsRule cors = 17;
  if (this->_internal_has_cors()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::cors(this),
        _Internal::cors(this).GetCachedSize(), target, stream);
  }

  // string summary = 20;
  if (!this->_internal_summary().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summary().data(), static_cast<int>(this->_internal_summary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.HttpRule.summary");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_summary(), target);
  }

  // string description = 21;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.HttpRule.description");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_description(), target);
  }

  // repeated string tags = 22;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.HttpRule.tags");
    target = stream->WriteString(22, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.gateway.v1.HttpRule)
  return target;
}

size_t HttpRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.gateway.v1.HttpRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string query_params = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.query_params_.size());
  for (int i = 0, n = _impl_.query_params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.query_params_.Get(i));
  }

  // repeated string required_scopes = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.required_scopes_.size());
  for (int i = 0, n = _impl_.required_scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.required_scopes_.Get(i));
  }

  // repeated string tags = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string method = 1;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string body = 3;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // string response_wrapper = 6;
  if (!this->_internal_response_wrapper().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_wrapper());
  }

  // string auth_type = 12;
  if (!this->_internal_auth_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_type());
  }

  // string summary = 20;
  if (!this->_internal_summary().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summary());
  }

  // string description = 21;
  if (!this->_internal_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .unhinged.gateway.v1.RateLimitRule rate_limit = 15;
  if (this->_internal_has_rate_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rate_limit_);
  }

  // .unhinged.gateway.v1.CacheRule cache = 16;
  if (this->_internal_has_cache()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cache_);
  }

  // .unhinged.gateway.v1.CorsRule cors = 17;
  if (this->_internal_has_cors()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cors_);
  }

  // bool stream_response = 5;
  if (this->_internal_stream_response() != 0) {
    total_size += 1 + 1;
  }

  // bool auth_required = 10;
  if (this->_internal_auth_required() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HttpRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HttpRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HttpRule::GetClassData() const { return &_class_data_; }


void HttpRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HttpRule*>(&to_msg);
  auto& from = static_cast<const HttpRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.gateway.v1.HttpRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.query_params_.MergeFrom(from._impl_.query_params_);
  _this->_impl_.required_scopes_.MergeFrom(from._impl_.required_scopes_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (!from._internal_response_wrapper().empty()) {
    _this->_internal_set_response_wrapper(from._internal_response_wrapper());
  }
  if (!from._internal_auth_type().empty()) {
    _this->_internal_set_auth_type(from._internal_auth_type());
  }
  if (!from._internal_summary().empty()) {
    _this->_internal_set_summary(from._internal_summary());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_rate_limit()) {
    _this->_internal_mutable_rate_limit()->::unhinged::gateway::v1::RateLimitRule::MergeFrom(
        from._internal_rate_limit());
  }
  if (from._internal_has_cache()) {
    _this->_internal_mutable_cache()->::unhinged::gateway::v1::CacheRule::MergeFrom(
        from._internal_cache());
  }
  if (from._internal_has_cors()) {
    _this->_internal_mutable_cors()->::unhinged::gateway::v1::CorsRule::MergeFrom(
        from._internal_cors());
  }
  if (from._internal_stream_response() != 0) {
    _this->_internal_set_stream_response(from._internal_stream_response());
  }
  if (from._internal_auth_required() != 0) {
    _this->_internal_set_auth_required(from._internal_auth_required());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HttpRule::CopyFrom(const HttpRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.gateway.v1.HttpRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRule::IsInitialized() const {
  return true;
}

void HttpRule::InternalSwap(HttpRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.query_params_.InternalSwap(&other->_impl_.query_params_);
  _impl_.required_scopes_.InternalSwap(&other->_impl_.required_scopes_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_wrapper_, lhs_arena,
      &other->_impl_.response_wrapper_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_type_, lhs_arena,
      &other->_impl_.auth_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.summary_, lhs_arena,
      &other->_impl_.summary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HttpRule, _impl_.auth_required_)
      + sizeof(HttpRule::_impl_.auth_required_)
      - PROTOBUF_FIELD_OFFSET(HttpRule, _impl_.rate_limit_)>(
          reinterpret_cast<char*>(&_impl_.rate_limit_),
          reinterpret_cast<char*>(&other->_impl_.rate_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gateway_5fannotations_2eproto_getter, &descriptor_table_gateway_5fannotations_2eproto_once,
      file_level_metadata_gateway_5fannotations_2eproto[0]);
}

// ===================================================================

class RateLimitRule::_Internal {
 public:
};

RateLimitRule::RateLimitRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.gateway.v1.RateLimitRule)
}
RateLimitRule::RateLimitRule(const RateLimitRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RateLimitRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_strategy_){}
    , decltype(_impl_.custom_key_field_){}
    , decltype(_impl_.requests_per_minute_){}
    , decltype(_impl_.requests_per_hour_){}
    , decltype(_impl_.requests_per_day_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_strategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_strategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_strategy().empty()) {
    _this->_impl_.key_strategy_.Set(from._internal_key_strategy(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_key_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_key_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_custom_key_field().empty()) {
    _this->_impl_.custom_key_field_.Set(from._internal_custom_key_field(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.requests_per_minute_, &from._impl_.requests_per_minute_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.requests_per_day_) -
    reinterpret_cast<char*>(&_impl_.requests_per_minute_)) + sizeof(_impl_.requests_per_day_));
  // @@protoc_insertion_point(copy_constructor:unhinged.gateway.v1.RateLimitRule)
}

inline void RateLimitRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_strategy_){}
    , decltype(_impl_.custom_key_field_){}
    , decltype(_impl_.requests_per_minute_){0}
    , decltype(_impl_.requests_per_hour_){0}
    , decltype(_impl_.requests_per_day_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_strategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_strategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_key_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_key_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RateLimitRule::~RateLimitRule() {
  // @@protoc_insertion_point(destructor:unhinged.gateway.v1.RateLimitRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RateLimitRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_strategy_.Destroy();
  _impl_.custom_key_field_.Destroy();
}

void RateLimitRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RateLimitRule::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.gateway.v1.RateLimitRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_strategy_.ClearToEmpty();
  _impl_.custom_key_field_.ClearToEmpty();
  ::memset(&_impl_.requests_per_minute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.requests_per_day_) -
      reinterpret_cast<char*>(&_impl_.requests_per_minute_)) + sizeof(_impl_.requests_per_day_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RateLimitRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 requests_per_minute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.requests_per_minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 requests_per_hour = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.requests_per_hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 requests_per_day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.requests_per_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key_strategy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_key_strategy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.RateLimitRule.key_strategy"));
        } else
          goto handle_unusual;
        continue;
      // string custom_key_field = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_custom_key_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.RateLimitRule.custom_key_field"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RateLimitRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.gateway.v1.RateLimitRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requests_per_minute = 1;
  if (this->_internal_requests_per_minute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_requests_per_minute(), target);
  }

  // int32 requests_per_hour = 2;
  if (this->_internal_requests_per_hour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_requests_per_hour(), target);
  }

  // int32 requests_per_day = 3;
  if (this->_internal_requests_per_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_requests_per_day(), target);
  }

  // string key_strategy = 4;
  if (!this->_internal_key_strategy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_strategy().data(), static_cast<int>(this->_internal_key_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.RateLimitRule.key_strategy");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_key_strategy(), target);
  }

  // string custom_key_field = 5;
  if (!this->_internal_custom_key_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_key_field().data(), static_cast<int>(this->_internal_custom_key_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.RateLimitRule.custom_key_field");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_custom_key_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.gateway.v1.RateLimitRule)
  return target;
}

size_t RateLimitRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.gateway.v1.RateLimitRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_strategy = 4;
  if (!this->_internal_key_strategy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_strategy());
  }

  // string custom_key_field = 5;
  if (!this->_internal_custom_key_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_custom_key_field());
  }

  // int32 requests_per_minute = 1;
  if (this->_internal_requests_per_minute() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_requests_per_minute());
  }

  // int32 requests_per_hour = 2;
  if (this->_internal_requests_per_hour() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_requests_per_hour());
  }

  // int32 requests_per_day = 3;
  if (this->_internal_requests_per_day() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_requests_per_day());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RateLimitRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RateLimitRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RateLimitRule::GetClassData() const { return &_class_data_; }


void RateLimitRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RateLimitRule*>(&to_msg);
  auto& from = static_cast<const RateLimitRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.gateway.v1.RateLimitRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key_strategy().empty()) {
    _this->_internal_set_key_strategy(from._internal_key_strategy());
  }
  if (!from._internal_custom_key_field().empty()) {
    _this->_internal_set_custom_key_field(from._internal_custom_key_field());
  }
  if (from._internal_requests_per_minute() != 0) {
    _this->_internal_set_requests_per_minute(from._internal_requests_per_minute());
  }
  if (from._internal_requests_per_hour() != 0) {
    _this->_internal_set_requests_per_hour(from._internal_requests_per_hour());
  }
  if (from._internal_requests_per_day() != 0) {
    _this->_internal_set_requests_per_day(from._internal_requests_per_day());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RateLimitRule::CopyFrom(const RateLimitRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.gateway.v1.RateLimitRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimitRule::IsInitialized() const {
  return true;
}

void RateLimitRule::InternalSwap(RateLimitRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_strategy_, lhs_arena,
      &other->_impl_.key_strategy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_key_field_, lhs_arena,
      &other->_impl_.custom_key_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RateLimitRule, _impl_.requests_per_day_)
      + sizeof(RateLimitRule::_impl_.requests_per_day_)
      - PROTOBUF_FIELD_OFFSET(RateLimitRule, _impl_.requests_per_minute_)>(
          reinterpret_cast<char*>(&_impl_.requests_per_minute_),
          reinterpret_cast<char*>(&other->_impl_.requests_per_minute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RateLimitRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gateway_5fannotations_2eproto_getter, &descriptor_table_gateway_5fannotations_2eproto_once,
      file_level_metadata_gateway_5fannotations_2eproto[1]);
}

// ===================================================================

class CacheRule::_Internal {
 public:
};

CacheRule::CacheRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.gateway.v1.CacheRule)
}
CacheRule::CacheRule(const CacheRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CacheRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cache_keys_){from._impl_.cache_keys_}
    , decltype(_impl_.vary_headers_){from._impl_.vary_headers_}
    , decltype(_impl_.ttl_seconds_){}
    , decltype(_impl_.private_cache_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ttl_seconds_, &from._impl_.ttl_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.private_cache_) -
    reinterpret_cast<char*>(&_impl_.ttl_seconds_)) + sizeof(_impl_.private_cache_));
  // @@protoc_insertion_point(copy_constructor:unhinged.gateway.v1.CacheRule)
}

inline void CacheRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cache_keys_){arena}
    , decltype(_impl_.vary_headers_){arena}
    , decltype(_impl_.ttl_seconds_){0}
    , decltype(_impl_.private_cache_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CacheRule::~CacheRule() {
  // @@protoc_insertion_point(destructor:unhinged.gateway.v1.CacheRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CacheRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cache_keys_.~RepeatedPtrField();
  _impl_.vary_headers_.~RepeatedPtrField();
}

void CacheRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CacheRule::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.gateway.v1.CacheRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cache_keys_.Clear();
  _impl_.vary_headers_.Clear();
  ::memset(&_impl_.ttl_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.private_cache_) -
      reinterpret_cast<char*>(&_impl_.ttl_seconds_)) + sizeof(_impl_.private_cache_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ttl_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ttl_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string cache_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cache_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.CacheRule.cache_keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool private_cache = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.private_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string vary_headers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_vary_headers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.CacheRule.vary_headers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CacheRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.gateway.v1.CacheRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ttl_seconds = 1;
  if (this->_internal_ttl_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ttl_seconds(), target);
  }

  // repeated string cache_keys = 2;
  for (int i = 0, n = this->_internal_cache_keys_size(); i < n; i++) {
    const auto& s = this->_internal_cache_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.CacheRule.cache_keys");
    target = stream->WriteString(2, s, target);
  }

  // bool private_cache = 3;
  if (this->_internal_private_cache() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_private_cache(), target);
  }

  // repeated string vary_headers = 4;
  for (int i = 0, n = this->_internal_vary_headers_size(); i < n; i++) {
    const auto& s = this->_internal_vary_headers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.CacheRule.vary_headers");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.gateway.v1.CacheRule)
  return target;
}

size_t CacheRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.gateway.v1.CacheRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cache_keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.cache_keys_.size());
  for (int i = 0, n = _impl_.cache_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.cache_keys_.Get(i));
  }

  // repeated string vary_headers = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.vary_headers_.size());
  for (int i = 0, n = _impl_.vary_headers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.vary_headers_.Get(i));
  }

  // int32 ttl_seconds = 1;
  if (this->_internal_ttl_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ttl_seconds());
  }

  // bool private_cache = 3;
  if (this->_internal_private_cache() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CacheRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CacheRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CacheRule::GetClassData() const { return &_class_data_; }


void CacheRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CacheRule*>(&to_msg);
  auto& from = static_cast<const CacheRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.gateway.v1.CacheRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cache_keys_.MergeFrom(from._impl_.cache_keys_);
  _this->_impl_.vary_headers_.MergeFrom(from._impl_.vary_headers_);
  if (from._internal_ttl_seconds() != 0) {
    _this->_internal_set_ttl_seconds(from._internal_ttl_seconds());
  }
  if (from._internal_private_cache() != 0) {
    _this->_internal_set_private_cache(from._internal_private_cache());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CacheRule::CopyFrom(const CacheRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.gateway.v1.CacheRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheRule::IsInitialized() const {
  return true;
}

void CacheRule::InternalSwap(CacheRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cache_keys_.InternalSwap(&other->_impl_.cache_keys_);
  _impl_.vary_headers_.InternalSwap(&other->_impl_.vary_headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CacheRule, _impl_.private_cache_)
      + sizeof(CacheRule::_impl_.private_cache_)
      - PROTOBUF_FIELD_OFFSET(CacheRule, _impl_.ttl_seconds_)>(
          reinterpret_cast<char*>(&_impl_.ttl_seconds_),
          reinterpret_cast<char*>(&other->_impl_.ttl_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gateway_5fannotations_2eproto_getter, &descriptor_table_gateway_5fannotations_2eproto_once,
      file_level_metadata_gateway_5fannotations_2eproto[2]);
}

// ===================================================================

class CorsRule::_Internal {
 public:
};

CorsRule::CorsRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.gateway.v1.CorsRule)
}
CorsRule::CorsRule(const CorsRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CorsRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.allowed_origins_){from._impl_.allowed_origins_}
    , decltype(_impl_.allowed_methods_){from._impl_.allowed_methods_}
    , decltype(_impl_.allowed_headers_){from._impl_.allowed_headers_}
    , decltype(_impl_.allow_credentials_){}
    , decltype(_impl_.max_age_seconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.allow_credentials_, &from._impl_.allow_credentials_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_age_seconds_) -
    reinterpret_cast<char*>(&_impl_.allow_credentials_)) + sizeof(_impl_.max_age_seconds_));
  // @@protoc_insertion_point(copy_constructor:unhinged.gateway.v1.CorsRule)
}

inline void CorsRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.allowed_origins_){arena}
    , decltype(_impl_.allowed_methods_){arena}
    , decltype(_impl_.allowed_headers_){arena}
    , decltype(_impl_.allow_credentials_){false}
    , decltype(_impl_.max_age_seconds_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CorsRule::~CorsRule() {
  // @@protoc_insertion_point(destructor:unhinged.gateway.v1.CorsRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CorsRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allowed_origins_.~RepeatedPtrField();
  _impl_.allowed_methods_.~RepeatedPtrField();
  _impl_.allowed_headers_.~RepeatedPtrField();
}

void CorsRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CorsRule::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.gateway.v1.CorsRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allowed_origins_.Clear();
  _impl_.allowed_methods_.Clear();
  _impl_.allowed_headers_.Clear();
  ::memset(&_impl_.allow_credentials_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_age_seconds_) -
      reinterpret_cast<char*>(&_impl_.allow_credentials_)) + sizeof(_impl_.max_age_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CorsRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string allowed_origins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allowed_origins();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.CorsRule.allowed_origins"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string allowed_methods = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allowed_methods();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.CorsRule.allowed_methods"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string allowed_headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allowed_headers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.CorsRule.allowed_headers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool allow_credentials = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.allow_credentials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_age_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.max_age_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CorsRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.gateway.v1.CorsRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string allowed_origins = 1;
  for (int i = 0, n = this->_internal_allowed_origins_size(); i < n; i++) {
    const auto& s = this->_internal_allowed_origins(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.CorsRule.allowed_origins");
    target = stream->WriteString(1, s, target);
  }

  // repeated string allowed_methods = 2;
  for (int i = 0, n = this->_internal_allowed_methods_size(); i < n; i++) {
    const auto& s = this->_internal_allowed_methods(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.CorsRule.allowed_methods");
    target = stream->WriteString(2, s, target);
  }

  // repeated string allowed_headers = 3;
  for (int i = 0, n = this->_internal_allowed_headers_size(); i < n; i++) {
    const auto& s = this->_internal_allowed_headers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.CorsRule.allowed_headers");
    target = stream->WriteString(3, s, target);
  }

  // bool allow_credentials = 4;
  if (this->_internal_allow_credentials() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_credentials(), target);
  }

  // int32 max_age_seconds = 5;
  if (this->_internal_max_age_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_age_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.gateway.v1.CorsRule)
  return target;
}

size_t CorsRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.gateway.v1.CorsRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string allowed_origins = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.allowed_origins_.size());
  for (int i = 0, n = _impl_.allowed_origins_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.allowed_origins_.Get(i));
  }

  // repeated string allowed_methods = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.allowed_methods_.size());
  for (int i = 0, n = _impl_.allowed_methods_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.allowed_methods_.Get(i));
  }

  // repeated string allowed_headers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.allowed_headers_.size());
  for (int i = 0, n = _impl_.allowed_headers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.allowed_headers_.Get(i));
  }

  // bool allow_credentials = 4;
  if (this->_internal_allow_credentials() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_age_seconds = 5;
  if (this->_internal_max_age_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_age_seconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CorsRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CorsRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CorsRule::GetClassData() const { return &_class_data_; }


void CorsRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CorsRule*>(&to_msg);
  auto& from = static_cast<const CorsRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.gateway.v1.CorsRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allowed_origins_.MergeFrom(from._impl_.allowed_origins_);
  _this->_impl_.allowed_methods_.MergeFrom(from._impl_.allowed_methods_);
  _this->_impl_.allowed_headers_.MergeFrom(from._impl_.allowed_headers_);
  if (from._internal_allow_credentials() != 0) {
    _this->_internal_set_allow_credentials(from._internal_allow_credentials());
  }
  if (from._internal_max_age_seconds() != 0) {
    _this->_internal_set_max_age_seconds(from._internal_max_age_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CorsRule::CopyFrom(const CorsRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.gateway.v1.CorsRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorsRule::IsInitialized() const {
  return true;
}

void CorsRule::InternalSwap(CorsRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.allowed_origins_.InternalSwap(&other->_impl_.allowed_origins_);
  _impl_.allowed_methods_.InternalSwap(&other->_impl_.allowed_methods_);
  _impl_.allowed_headers_.InternalSwap(&other->_impl_.allowed_headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CorsRule, _impl_.max_age_seconds_)
      + sizeof(CorsRule::_impl_.max_age_seconds_)
      - PROTOBUF_FIELD_OFFSET(CorsRule, _impl_.allow_credentials_)>(
          reinterpret_cast<char*>(&_impl_.allow_credentials_),
          reinterpret_cast<char*>(&other->_impl_.allow_credentials_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CorsRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gateway_5fannotations_2eproto_getter, &descriptor_table_gateway_5fannotations_2eproto_once,
      file_level_metadata_gateway_5fannotations_2eproto[3]);
}

// ===================================================================

class WebSocketRule::_Internal {
 public:
  static const ::unhinged::gateway::v1::RateLimitRule& rate_limit(const WebSocketRule* msg);
};

const ::unhinged::gateway::v1::RateLimitRule&
WebSocketRule::_Internal::rate_limit(const WebSocketRule* msg) {
  return *msg->_impl_.rate_limit_;
}
WebSocketRule::WebSocketRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.gateway.v1.WebSocketRule)
}
WebSocketRule::WebSocketRule(const WebSocketRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WebSocketRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.required_scopes_){from._impl_.required_scopes_}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.path_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.request_field_){}
    , decltype(_impl_.response_field_){}
    , decltype(_impl_.broadcast_filter_){}
    , decltype(_impl_.summary_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.rate_limit_){nullptr}
    , decltype(_impl_.max_connections_per_user_){}
    , decltype(_impl_.idle_timeout_seconds_){}
    , decltype(_impl_.auth_required_){}
    , decltype(_impl_.broadcast_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_type().empty()) {
    _this->_impl_.event_type_.Set(from._internal_event_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_field().empty()) {
    _this->_impl_.request_field_.Set(from._internal_request_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.response_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response_field().empty()) {
    _this->_impl_.response_field_.Set(from._internal_response_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.broadcast_filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcast_filter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_broadcast_filter().empty()) {
    _this->_impl_.broadcast_filter_.Set(from._internal_broadcast_filter(), 
      _this->GetArenaForAllocation());
  }
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_summary().empty()) {
    _this->_impl_.summary_.Set(from._internal_summary(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_rate_limit()) {
    _this->_impl_.rate_limit_ = new ::unhinged::gateway::v1::RateLimitRule(*from._impl_.rate_limit_);
  }
  ::memcpy(&_impl_.max_connections_per_user_, &from._impl_.max_connections_per_user_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.broadcast_) -
    reinterpret_cast<char*>(&_impl_.max_connections_per_user_)) + sizeof(_impl_.broadcast_));
  // @@protoc_insertion_point(copy_constructor:unhinged.gateway.v1.WebSocketRule)
}

inline void WebSocketRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.required_scopes_){arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.path_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.request_field_){}
    , decltype(_impl_.response_field_){}
    , decltype(_impl_.broadcast_filter_){}
    , decltype(_impl_.summary_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.rate_limit_){nullptr}
    , decltype(_impl_.max_connections_per_user_){0}
    , decltype(_impl_.idle_timeout_seconds_){0}
    , decltype(_impl_.auth_required_){false}
    , decltype(_impl_.broadcast_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.response_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broadcast_filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcast_filter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WebSocketRule::~WebSocketRule() {
  // @@protoc_insertion_point(destructor:unhinged.gateway.v1.WebSocketRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebSocketRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.required_scopes_.~RepeatedPtrField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.path_.Destroy();
  _impl_.event_type_.Destroy();
  _impl_.request_field_.Destroy();
  _impl_.response_field_.Destroy();
  _impl_.broadcast_filter_.Destroy();
  _impl_.summary_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rate_limit_;
}

void WebSocketRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WebSocketRule::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.gateway.v1.WebSocketRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.required_scopes_.Clear();
  _impl_.tags_.Clear();
  _impl_.path_.ClearToEmpty();
  _impl_.event_type_.ClearToEmpty();
  _impl_.request_field_.ClearToEmpty();
  _impl_.response_field_.ClearToEmpty();
  _impl_.broadcast_filter_.ClearToEmpty();
  _impl_.summary_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.rate_limit_ != nullptr) {
    delete _impl_.rate_limit_;
  }
  _impl_.rate_limit_ = nullptr;
  ::memset(&_impl_.max_connections_per_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.broadcast_) -
      reinterpret_cast<char*>(&_impl_.max_connections_per_user_)) + sizeof(_impl_.broadcast_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebSocketRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.WebSocketRule.path"));
        } else
          goto handle_unusual;
        continue;
      // string event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_event_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.WebSocketRule.event_type"));
        } else
          goto handle_unusual;
        continue;
      // bool auth_required = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.auth_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string required_scopes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.WebSocketRule.required_scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 max_connections_per_user = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.max_connections_per_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 idle_timeout_seconds = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.idle_timeout_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string request_field = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_request_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.WebSocketRule.request_field"));
        } else
          goto handle_unusual;
        continue;
      // string response_field = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_response_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.WebSocketRule.response_field"));
        } else
          goto handle_unusual;
        continue;
      // bool broadcast = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string broadcast_filter = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_broadcast_filter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.WebSocketRule.broadcast_filter"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.gateway.v1.RateLimitRule rate_limit = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_rate_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string summary = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_summary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.WebSocketRule.summary"));
        } else
          goto handle_unusual;
        continue;
      // string description = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.WebSocketRule.description"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.WebSocketRule.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebSocketRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.gateway.v1.WebSocketRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.WebSocketRule.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_type().data(), static_cast<int>(this->_internal_event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.WebSocketRule.event_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event_type(), target);
  }

  // bool auth_required = 10;
  if (this->_internal_auth_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_auth_required(), target);
  }

  // repeated string required_scopes = 11;
  for (int i = 0, n = this->_internal_required_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_required_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.WebSocketRule.required_scopes");
    target = stream->WriteString(11, s, target);
  }

  // int32 max_connections_per_user = 12;
  if (this->_internal_max_connections_per_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_max_connections_per_user(), target);
  }

  // int32 idle_timeout_seconds = 13;
  if (this->_internal_idle_timeout_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_idle_timeout_seconds(), target);
  }

  // string request_field = 15;
  if (!this->_internal_request_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_field().data(), static_cast<int>(this->_internal_request_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.WebSocketRule.request_field");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_request_field(), target);
  }

  // string response_field = 16;
  if (!this->_internal_response_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_field().data(), static_cast<int>(this->_internal_response_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.WebSocketRule.response_field");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_response_field(), target);
  }

  // bool broadcast = 17;
  if (this->_internal_broadcast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_broadcast(), target);
  }

  // string broadcast_filter = 18;
  if (!this->_internal_broadcast_filter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_broadcast_filter().data(), static_cast<int>(this->_internal_broadcast_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.WebSocketRule.broadcast_filter");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_broadcast_filter(), target);
  }

  // .unhinged.gateway.v1.RateLimitRule rate_limit = 20;
  if (this->_internal_has_rate_limit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::rate_limit(this),
        _Internal::rate_limit(this).GetCachedSize(), target, stream);
  }

  // string summary = 25;
  if (!this->_internal_summary().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summary().data(), static_cast<int>(this->_internal_summary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.WebSocketRule.summary");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_summary(), target);
  }

  // string description = 26;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.WebSocketRule.description");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_description(), target);
  }

  // repeated string tags = 27;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.WebSocketRule.tags");
    target = stream->WriteString(27, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.gateway.v1.WebSocketRule)
  return target;
}

size_t WebSocketRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.gateway.v1.WebSocketRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string required_scopes = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.required_scopes_.size());
  for (int i = 0, n = _impl_.required_scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.required_scopes_.Get(i));
  }

  // repeated string tags = 27;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_type());
  }

  // string request_field = 15;
  if (!this->_internal_request_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_field());
  }

  // string response_field = 16;
  if (!this->_internal_response_field().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_field());
  }

  // string broadcast_filter = 18;
  if (!this->_internal_broadcast_filter().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broadcast_filter());
  }

  // string summary = 25;
  if (!this->_internal_summary().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summary());
  }

  // string description = 26;
  if (!this->_internal_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .unhinged.gateway.v1.RateLimitRule rate_limit = 20;
  if (this->_internal_has_rate_limit()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rate_limit_);
  }

  // int32 max_connections_per_user = 12;
  if (this->_internal_max_connections_per_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_connections_per_user());
  }

  // int32 idle_timeout_seconds = 13;
  if (this->_internal_idle_timeout_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_idle_timeout_seconds());
  }

  // bool auth_required = 10;
  if (this->_internal_auth_required() != 0) {
    total_size += 1 + 1;
  }

  // bool broadcast = 17;
  if (this->_internal_broadcast() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WebSocketRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WebSocketRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WebSocketRule::GetClassData() const { return &_class_data_; }


void WebSocketRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WebSocketRule*>(&to_msg);
  auto& from = static_cast<const WebSocketRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.gateway.v1.WebSocketRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.required_scopes_.MergeFrom(from._impl_.required_scopes_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_event_type().empty()) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (!from._internal_request_field().empty()) {
    _this->_internal_set_request_field(from._internal_request_field());
  }
  if (!from._internal_response_field().empty()) {
    _this->_internal_set_response_field(from._internal_response_field());
  }
  if (!from._internal_broadcast_filter().empty()) {
    _this->_internal_set_broadcast_filter(from._internal_broadcast_filter());
  }
  if (!from._internal_summary().empty()) {
    _this->_internal_set_summary(from._internal_summary());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_rate_limit()) {
    _this->_internal_mutable_rate_limit()->::unhinged::gateway::v1::RateLimitRule::MergeFrom(
        from._internal_rate_limit());
  }
  if (from._internal_max_connections_per_user() != 0) {
    _this->_internal_set_max_connections_per_user(from._internal_max_connections_per_user());
  }
  if (from._internal_idle_timeout_seconds() != 0) {
    _this->_internal_set_idle_timeout_seconds(from._internal_idle_timeout_seconds());
  }
  if (from._internal_auth_required() != 0) {
    _this->_internal_set_auth_required(from._internal_auth_required());
  }
  if (from._internal_broadcast() != 0) {
    _this->_internal_set_broadcast(from._internal_broadcast());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WebSocketRule::CopyFrom(const WebSocketRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.gateway.v1.WebSocketRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebSocketRule::IsInitialized() const {
  return true;
}

void WebSocketRule::InternalSwap(WebSocketRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.required_scopes_.InternalSwap(&other->_impl_.required_scopes_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_type_, lhs_arena,
      &other->_impl_.event_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_field_, lhs_arena,
      &other->_impl_.request_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_field_, lhs_arena,
      &other->_impl_.response_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.broadcast_filter_, lhs_arena,
      &other->_impl_.broadcast_filter_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.summary_, lhs_arena,
      &other->_impl_.summary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebSocketRule, _impl_.broadcast_)
      + sizeof(WebSocketRule::_impl_.broadcast_)
      - PROTOBUF_FIELD_OFFSET(WebSocketRule, _impl_.rate_limit_)>(
          reinterpret_cast<char*>(&_impl_.rate_limit_),
          reinterpret_cast<char*>(&other->_impl_.rate_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WebSocketRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gateway_5fannotations_2eproto_getter, &descriptor_table_gateway_5fannotations_2eproto_once,
      file_level_metadata_gateway_5fannotations_2eproto[4]);
}

// ===================================================================

class ServerSentEventsRule::_Internal {
 public:
};

ServerSentEventsRule::ServerSentEventsRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.gateway.v1.ServerSentEventsRule)
}
ServerSentEventsRule::ServerSentEventsRule(const ServerSentEventsRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerSentEventsRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.required_scopes_){from._impl_.required_scopes_}
    , decltype(_impl_.filter_params_){from._impl_.filter_params_}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.path_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.data_field_){}
    , decltype(_impl_.id_field_){}
    , decltype(_impl_.routing_key_){}
    , decltype(_impl_.summary_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.keepalive_interval_seconds_){}
    , decltype(_impl_.max_stream_duration_seconds_){}
    , decltype(_impl_.auth_required_){}
    , decltype(_impl_.json_encode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_type().empty()) {
    _this->_impl_.event_type_.Set(from._internal_event_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_field().empty()) {
    _this->_impl_.data_field_.Set(from._internal_data_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id_field().empty()) {
    _this->_impl_.id_field_.Set(from._internal_id_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.routing_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routing_key().empty()) {
    _this->_impl_.routing_key_.Set(from._internal_routing_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_summary().empty()) {
    _this->_impl_.summary_.Set(from._internal_summary(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.keepalive_interval_seconds_, &from._impl_.keepalive_interval_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.json_encode_) -
    reinterpret_cast<char*>(&_impl_.keepalive_interval_seconds_)) + sizeof(_impl_.json_encode_));
  // @@protoc_insertion_point(copy_constructor:unhinged.gateway.v1.ServerSentEventsRule)
}

inline void ServerSentEventsRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.required_scopes_){arena}
    , decltype(_impl_.filter_params_){arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.path_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.data_field_){}
    , decltype(_impl_.id_field_){}
    , decltype(_impl_.routing_key_){}
    , decltype(_impl_.summary_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.keepalive_interval_seconds_){0}
    , decltype(_impl_.max_stream_duration_seconds_){0}
    , decltype(_impl_.auth_required_){false}
    , decltype(_impl_.json_encode_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.routing_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerSentEventsRule::~ServerSentEventsRule() {
  // @@protoc_insertion_point(destructor:unhinged.gateway.v1.ServerSentEventsRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerSentEventsRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.required_scopes_.~RepeatedPtrField();
  _impl_.filter_params_.~RepeatedPtrField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.path_.Destroy();
  _impl_.event_type_.Destroy();
  _impl_.data_field_.Destroy();
  _impl_.id_field_.Destroy();
  _impl_.routing_key_.Destroy();
  _impl_.summary_.Destroy();
  _impl_.description_.Destroy();
}

void ServerSentEventsRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerSentEventsRule::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.gateway.v1.ServerSentEventsRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.required_scopes_.Clear();
  _impl_.filter_params_.Clear();
  _impl_.tags_.Clear();
  _impl_.path_.ClearToEmpty();
  _impl_.event_type_.ClearToEmpty();
  _impl_.data_field_.ClearToEmpty();
  _impl_.id_field_.ClearToEmpty();
  _impl_.routing_key_.ClearToEmpty();
  _impl_.summary_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.keepalive_interval_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.json_encode_) -
      reinterpret_cast<char*>(&_impl_.keepalive_interval_seconds_)) + sizeof(_impl_.json_encode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerSentEventsRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServerSentEventsRule.path"));
        } else
          goto handle_unusual;
        continue;
      // string event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_event_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServerSentEventsRule.event_type"));
        } else
          goto handle_unusual;
        continue;
      // bool auth_required = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.auth_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string required_scopes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServerSentEventsRule.required_scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 keepalive_interval_seconds = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.keepalive_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_stream_duration_seconds = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.max_stream_duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data_field = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_data_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServerSentEventsRule.data_field"));
        } else
          goto handle_unusual;
        continue;
      // string id_field = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_id_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServerSentEventsRule.id_field"));
        } else
          goto handle_unusual;
        continue;
      // bool json_encode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.json_encode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string filter_params = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_filter_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServerSentEventsRule.filter_params"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string routing_key = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_routing_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServerSentEventsRule.routing_key"));
        } else
          goto handle_unusual;
        continue;
      // string summary = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_summary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServerSentEventsRule.summary"));
        } else
          goto handle_unusual;
        continue;
      // string description = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServerSentEventsRule.description"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServerSentEventsRule.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerSentEventsRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.gateway.v1.ServerSentEventsRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServerSentEventsRule.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_type().data(), static_cast<int>(this->_internal_event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServerSentEventsRule.event_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event_type(), target);
  }

  // bool auth_required = 10;
  if (this->_internal_auth_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_auth_required(), target);
  }

  // repeated string required_scopes = 11;
  for (int i = 0, n = this->_internal_required_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_required_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServerSentEventsRule.required_scopes");
    target = stream->WriteString(11, s, target);
  }

  // int32 keepalive_interval_seconds = 12;
  if (this->_internal_keepalive_interval_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_keepalive_interval_seconds(), target);
  }

  // int32 max_stream_duration_seconds = 13;
  if (this->_internal_max_stream_duration_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_max_stream_duration_seconds(), target);
  }

  // string data_field = 15;
  if (!this->_internal_data_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_field().data(), static_cast<int>(this->_internal_data_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServerSentEventsRule.data_field");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_data_field(), target);
  }

  // string id_field = 16;
  if (!this->_internal_id_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id_field().data(), static_cast<int>(this->_internal_id_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServerSentEventsRule.id_field");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_id_field(), target);
  }

  // bool json_encode = 17;
  if (this->_internal_json_encode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_json_encode(), target);
  }

  // repeated string filter_params = 20;
  for (int i = 0, n = this->_internal_filter_params_size(); i < n; i++) {
    const auto& s = this->_internal_filter_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServerSentEventsRule.filter_params");
    target = stream->WriteString(20, s, target);
  }

  // string routing_key = 21;
  if (!this->_internal_routing_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_routing_key().data(), static_cast<int>(this->_internal_routing_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServerSentEventsRule.routing_key");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_routing_key(), target);
  }

  // string summary = 25;
  if (!this->_internal_summary().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summary().data(), static_cast<int>(this->_internal_summary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServerSentEventsRule.summary");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_summary(), target);
  }

  // string description = 26;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServerSentEventsRule.description");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_description(), target);
  }

  // repeated string tags = 27;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServerSentEventsRule.tags");
    target = stream->WriteString(27, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.gateway.v1.ServerSentEventsRule)
  return target;
}

size_t ServerSentEventsRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.gateway.v1.ServerSentEventsRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string required_scopes = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.required_scopes_.size());
  for (int i = 0, n = _impl_.required_scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.required_scopes_.Get(i));
  }

  // repeated string filter_params = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.filter_params_.size());
  for (int i = 0, n = _impl_.filter_params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.filter_params_.Get(i));
  }

  // repeated string tags = 27;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_type());
  }

  // string data_field = 15;
  if (!this->_internal_data_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_field());
  }

  // string id_field = 16;
  if (!this->_internal_id_field().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id_field());
  }

  // string routing_key = 21;
  if (!this->_internal_routing_key().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_routing_key());
  }

  // string summary = 25;
  if (!this->_internal_summary().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summary());
  }

  // string description = 26;
  if (!this->_internal_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // int32 keepalive_interval_seconds = 12;
  if (this->_internal_keepalive_interval_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_keepalive_interval_seconds());
  }

  // int32 max_stream_duration_seconds = 13;
  if (this->_internal_max_stream_duration_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_stream_duration_seconds());
  }

  // bool auth_required = 10;
  if (this->_internal_auth_required() != 0) {
    total_size += 1 + 1;
  }

  // bool json_encode = 17;
  if (this->_internal_json_encode() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerSentEventsRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerSentEventsRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerSentEventsRule::GetClassData() const { return &_class_data_; }


void ServerSentEventsRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerSentEventsRule*>(&to_msg);
  auto& from = static_cast<const ServerSentEventsRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.gateway.v1.ServerSentEventsRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.required_scopes_.MergeFrom(from._impl_.required_scopes_);
  _this->_impl_.filter_params_.MergeFrom(from._impl_.filter_params_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_event_type().empty()) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (!from._internal_data_field().empty()) {
    _this->_internal_set_data_field(from._internal_data_field());
  }
  if (!from._internal_id_field().empty()) {
    _this->_internal_set_id_field(from._internal_id_field());
  }
  if (!from._internal_routing_key().empty()) {
    _this->_internal_set_routing_key(from._internal_routing_key());
  }
  if (!from._internal_summary().empty()) {
    _this->_internal_set_summary(from._internal_summary());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_keepalive_interval_seconds() != 0) {
    _this->_internal_set_keepalive_interval_seconds(from._internal_keepalive_interval_seconds());
  }
  if (from._internal_max_stream_duration_seconds() != 0) {
    _this->_internal_set_max_stream_duration_seconds(from._internal_max_stream_duration_seconds());
  }
  if (from._internal_auth_required() != 0) {
    _this->_internal_set_auth_required(from._internal_auth_required());
  }
  if (from._internal_json_encode() != 0) {
    _this->_internal_set_json_encode(from._internal_json_encode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerSentEventsRule::CopyFrom(const ServerSentEventsRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.gateway.v1.ServerSentEventsRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSentEventsRule::IsInitialized() const {
  return true;
}

void ServerSentEventsRule::InternalSwap(ServerSentEventsRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.required_scopes_.InternalSwap(&other->_impl_.required_scopes_);
  _impl_.filter_params_.InternalSwap(&other->_impl_.filter_params_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_type_, lhs_arena,
      &other->_impl_.event_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_field_, lhs_arena,
      &other->_impl_.data_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_field_, lhs_arena,
      &other->_impl_.id_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.routing_key_, lhs_arena,
      &other->_impl_.routing_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.summary_, lhs_arena,
      &other->_impl_.summary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerSentEventsRule, _impl_.json_encode_)
      + sizeof(ServerSentEventsRule::_impl_.json_encode_)
      - PROTOBUF_FIELD_OFFSET(ServerSentEventsRule, _impl_.keepalive_interval_seconds_)>(
          reinterpret_cast<char*>(&_impl_.keepalive_interval_seconds_),
          reinterpret_cast<char*>(&other->_impl_.keepalive_interval_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerSentEventsRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gateway_5fannotations_2eproto_getter, &descriptor_table_gateway_5fannotations_2eproto_once,
      file_level_metadata_gateway_5fannotations_2eproto[5]);
}

// ===================================================================

class LongPollingRule::_Internal {
 public:
};

LongPollingRule::LongPollingRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.gateway.v1.LongPollingRule)
}
LongPollingRule::LongPollingRule(const LongPollingRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LongPollingRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.required_scopes_){from._impl_.required_scopes_}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.path_){}
    , decltype(_impl_.events_field_){}
    , decltype(_impl_.cursor_field_){}
    , decltype(_impl_.summary_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.timeout_seconds_){}
    , decltype(_impl_.max_events_){}
    , decltype(_impl_.auth_required_){}
    , decltype(_impl_.include_metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.events_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.events_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_events_field().empty()) {
    _this->_impl_.events_field_.Set(from._internal_events_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cursor_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cursor_field().empty()) {
    _this->_impl_.cursor_field_.Set(from._internal_cursor_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_summary().empty()) {
    _this->_impl_.summary_.Set(from._internal_summary(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timeout_seconds_, &from._impl_.timeout_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_metadata_) -
    reinterpret_cast<char*>(&_impl_.timeout_seconds_)) + sizeof(_impl_.include_metadata_));
  // @@protoc_insertion_point(copy_constructor:unhinged.gateway.v1.LongPollingRule)
}

inline void LongPollingRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.required_scopes_){arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.path_){}
    , decltype(_impl_.events_field_){}
    , decltype(_impl_.cursor_field_){}
    , decltype(_impl_.summary_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.timeout_seconds_){0}
    , decltype(_impl_.max_events_){0}
    , decltype(_impl_.auth_required_){false}
    , decltype(_impl_.include_metadata_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.events_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.events_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cursor_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LongPollingRule::~LongPollingRule() {
  // @@protoc_insertion_point(destructor:unhinged.gateway.v1.LongPollingRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LongPollingRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.required_scopes_.~RepeatedPtrField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.path_.Destroy();
  _impl_.events_field_.Destroy();
  _impl_.cursor_field_.Destroy();
  _impl_.summary_.Destroy();
  _impl_.description_.Destroy();
}

void LongPollingRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LongPollingRule::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.gateway.v1.LongPollingRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.required_scopes_.Clear();
  _impl_.tags_.Clear();
  _impl_.path_.ClearToEmpty();
  _impl_.events_field_.ClearToEmpty();
  _impl_.cursor_field_.ClearToEmpty();
  _impl_.summary_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.timeout_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.include_metadata_) -
      reinterpret_cast<char*>(&_impl_.timeout_seconds_)) + sizeof(_impl_.include_metadata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongPollingRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.LongPollingRule.path"));
        } else
          goto handle_unusual;
        continue;
      // int32 timeout_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timeout_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auth_required = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.auth_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string required_scopes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.LongPollingRule.required_scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string events_field = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_events_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.LongPollingRule.events_field"));
        } else
          goto handle_unusual;
        continue;
      // string cursor_field = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_cursor_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.LongPollingRule.cursor_field"));
        } else
          goto handle_unusual;
        continue;
      // bool include_metadata = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.include_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string summary = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_summary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.LongPollingRule.summary"));
        } else
          goto handle_unusual;
        continue;
      // string description = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.LongPollingRule.description"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.LongPollingRule.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LongPollingRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.gateway.v1.LongPollingRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.LongPollingRule.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // int32 timeout_seconds = 2;
  if (this->_internal_timeout_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_timeout_seconds(), target);
  }

  // int32 max_events = 3;
  if (this->_internal_max_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_events(), target);
  }

  // bool auth_required = 10;
  if (this->_internal_auth_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_auth_required(), target);
  }

  // repeated string required_scopes = 11;
  for (int i = 0, n = this->_internal_required_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_required_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.LongPollingRule.required_scopes");
    target = stream->WriteString(11, s, target);
  }

  // string events_field = 15;
  if (!this->_internal_events_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_events_field().data(), static_cast<int>(this->_internal_events_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.LongPollingRule.events_field");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_events_field(), target);
  }

  // string cursor_field = 16;
  if (!this->_internal_cursor_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor_field().data(), static_cast<int>(this->_internal_cursor_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.LongPollingRule.cursor_field");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_cursor_field(), target);
  }

  // bool include_metadata = 17;
  if (this->_internal_include_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_include_metadata(), target);
  }

  // string summary = 20;
  if (!this->_internal_summary().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summary().data(), static_cast<int>(this->_internal_summary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.LongPollingRule.summary");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_summary(), target);
  }

  // string description = 21;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.LongPollingRule.description");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_description(), target);
  }

  // repeated string tags = 22;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.LongPollingRule.tags");
    target = stream->WriteString(22, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.gateway.v1.LongPollingRule)
  return target;
}

size_t LongPollingRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.gateway.v1.LongPollingRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string required_scopes = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.required_scopes_.size());
  for (int i = 0, n = _impl_.required_scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.required_scopes_.Get(i));
  }

  // repeated string tags = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string events_field = 15;
  if (!this->_internal_events_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_events_field());
  }

  // string cursor_field = 16;
  if (!this->_internal_cursor_field().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor_field());
  }

  // string summary = 20;
  if (!this->_internal_summary().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summary());
  }

  // string description = 21;
  if (!this->_internal_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // int32 timeout_seconds = 2;
  if (this->_internal_timeout_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeout_seconds());
  }

  // int32 max_events = 3;
  if (this->_internal_max_events() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_events());
  }

  // bool auth_required = 10;
  if (this->_internal_auth_required() != 0) {
    total_size += 1 + 1;
  }

  // bool include_metadata = 17;
  if (this->_internal_include_metadata() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LongPollingRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LongPollingRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LongPollingRule::GetClassData() const { return &_class_data_; }


void LongPollingRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LongPollingRule*>(&to_msg);
  auto& from = static_cast<const LongPollingRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.gateway.v1.LongPollingRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.required_scopes_.MergeFrom(from._impl_.required_scopes_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_events_field().empty()) {
    _this->_internal_set_events_field(from._internal_events_field());
  }
  if (!from._internal_cursor_field().empty()) {
    _this->_internal_set_cursor_field(from._internal_cursor_field());
  }
  if (!from._internal_summary().empty()) {
    _this->_internal_set_summary(from._internal_summary());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_timeout_seconds() != 0) {
    _this->_internal_set_timeout_seconds(from._internal_timeout_seconds());
  }
  if (from._internal_max_events() != 0) {
    _this->_internal_set_max_events(from._internal_max_events());
  }
  if (from._internal_auth_required() != 0) {
    _this->_internal_set_auth_required(from._internal_auth_required());
  }
  if (from._internal_include_metadata() != 0) {
    _this->_internal_set_include_metadata(from._internal_include_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LongPollingRule::CopyFrom(const LongPollingRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.gateway.v1.LongPollingRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongPollingRule::IsInitialized() const {
  return true;
}

void LongPollingRule::InternalSwap(LongPollingRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.required_scopes_.InternalSwap(&other->_impl_.required_scopes_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.events_field_, lhs_arena,
      &other->_impl_.events_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cursor_field_, lhs_arena,
      &other->_impl_.cursor_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.summary_, lhs_arena,
      &other->_impl_.summary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LongPollingRule, _impl_.include_metadata_)
      + sizeof(LongPollingRule::_impl_.include_metadata_)
      - PROTOBUF_FIELD_OFFSET(LongPollingRule, _impl_.timeout_seconds_)>(
          reinterpret_cast<char*>(&_impl_.timeout_seconds_),
          reinterpret_cast<char*>(&other->_impl_.timeout_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LongPollingRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gateway_5fannotations_2eproto_getter, &descriptor_table_gateway_5fannotations_2eproto_once,
      file_level_metadata_gateway_5fannotations_2eproto[6]);
}

// ===================================================================

class ServiceRule::_Internal {
 public:
  static const ::unhinged::gateway::v1::RateLimitRule& default_rate_limit(const ServiceRule* msg);
  static const ::unhinged::gateway::v1::CorsRule& default_cors(const ServiceRule* msg);
};

const ::unhinged::gateway::v1::RateLimitRule&
ServiceRule::_Internal::default_rate_limit(const ServiceRule* msg) {
  return *msg->_impl_.default_rate_limit_;
}
const ::unhinged::gateway::v1::CorsRule&
ServiceRule::_Internal::default_cors(const ServiceRule* msg) {
  return *msg->_impl_.default_cors_;
}
ServiceRule::ServiceRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.gateway.v1.ServiceRule)
}
ServiceRule::ServiceRule(const ServiceRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.default_scopes_){from._impl_.default_scopes_}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.base_path_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.auth_provider_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.contact_email_){}
    , decltype(_impl_.license_){}
    , decltype(_impl_.default_rate_limit_){nullptr}
    , decltype(_impl_.default_cors_){nullptr}
    , decltype(_impl_.default_auth_required_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.base_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_path().empty()) {
    _this->_impl_.base_path_.Set(from._internal_base_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auth_provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_provider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_provider().empty()) {
    _this->_impl_.auth_provider_.Set(from._internal_auth_provider(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contact_email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contact_email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contact_email().empty()) {
    _this->_impl_.contact_email_.Set(from._internal_contact_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license().empty()) {
    _this->_impl_.license_.Set(from._internal_license(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_default_rate_limit()) {
    _this->_impl_.default_rate_limit_ = new ::unhinged::gateway::v1::RateLimitRule(*from._impl_.default_rate_limit_);
  }
  if (from._internal_has_default_cors()) {
    _this->_impl_.default_cors_ = new ::unhinged::gateway::v1::CorsRule(*from._impl_.default_cors_);
  }
  _this->_impl_.default_auth_required_ = from._impl_.default_auth_required_;
  // @@protoc_insertion_point(copy_constructor:unhinged.gateway.v1.ServiceRule)
}

inline void ServiceRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.default_scopes_){arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.base_path_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.auth_provider_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.contact_email_){}
    , decltype(_impl_.license_){}
    , decltype(_impl_.default_rate_limit_){nullptr}
    , decltype(_impl_.default_cors_){nullptr}
    , decltype(_impl_.default_auth_required_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.base_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_provider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contact_email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contact_email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceRule::~ServiceRule() {
  // @@protoc_insertion_point(destructor:unhinged.gateway.v1.ServiceRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.default_scopes_.~RepeatedPtrField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.base_path_.Destroy();
  _impl_.version_.Destroy();
  _impl_.auth_provider_.Destroy();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.contact_email_.Destroy();
  _impl_.license_.Destroy();
  if (this != internal_default_instance()) delete _impl_.default_rate_limit_;
  if (this != internal_default_instance()) delete _impl_.default_cors_;
}

void ServiceRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceRule::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.gateway.v1.ServiceRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.default_scopes_.Clear();
  _impl_.tags_.Clear();
  _impl_.base_path_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.auth_provider_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.contact_email_.ClearToEmpty();
  _impl_.license_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.default_rate_limit_ != nullptr) {
    delete _impl_.default_rate_limit_;
  }
  _impl_.default_rate_limit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.default_cors_ != nullptr) {
    delete _impl_.default_cors_;
  }
  _impl_.default_cors_ = nullptr;
  _impl_.default_auth_required_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string base_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_base_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServiceRule.base_path"));
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServiceRule.version"));
        } else
          goto handle_unusual;
        continue;
      // bool default_auth_required = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.default_auth_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string default_scopes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_default_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServiceRule.default_scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string auth_provider = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_auth_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServiceRule.auth_provider"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.gateway.v1.RateLimitRule default_rate_limit = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_rate_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.gateway.v1.CorsRule default_cors = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_cors(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServiceRule.title"));
        } else
          goto handle_unusual;
        continue;
      // string description = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServiceRule.description"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServiceRule.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string contact_email = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_contact_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServiceRule.contact_email"));
        } else
          goto handle_unusual;
        continue;
      // string license = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_license();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.gateway.v1.ServiceRule.license"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.gateway.v1.ServiceRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string base_path = 1;
  if (!this->_internal_base_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_path().data(), static_cast<int>(this->_internal_base_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServiceRule.base_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_base_path(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServiceRule.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // bool default_auth_required = 10;
  if (this->_internal_default_auth_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_default_auth_required(), target);
  }

  // repeated string default_scopes = 11;
  for (int i = 0, n = this->_internal_default_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_default_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServiceRule.default_scopes");
    target = stream->WriteString(11, s, target);
  }

  // string auth_provider = 12;
  if (!this->_internal_auth_provider().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_provider().data(), static_cast<int>(this->_internal_auth_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServiceRule.auth_provider");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_auth_provider(), target);
  }

  // .unhinged.gateway.v1.RateLimitRule default_rate_limit = 15;
  if (this->_internal_has_default_rate_limit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::default_rate_limit(this),
        _Internal::default_rate_limit(this).GetCachedSize(), target, stream);
  }

  // .unhinged.gateway.v1.CorsRule default_cors = 16;
  if (this->_internal_has_default_cors()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::default_cors(this),
        _Internal::default_cors(this).GetCachedSize(), target, stream);
  }

  // string title = 20;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServiceRule.title");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_title(), target);
  }

  // string description = 21;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServiceRule.description");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_description(), target);
  }

  // repeated string tags = 22;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServiceRule.tags");
    target = stream->WriteString(22, s, target);
  }

  // string contact_email = 23;
  if (!this->_internal_contact_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contact_email().data(), static_cast<int>(this->_internal_contact_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServiceRule.contact_email");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_contact_email(), target);
  }

  // string license = 24;
  if (!this->_internal_license().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.gateway.v1.ServiceRule.license");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_license(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.gateway.v1.ServiceRule)
  return target;
}

size_t ServiceRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.gateway.v1.ServiceRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string default_scopes = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.default_scopes_.size());
  for (int i = 0, n = _impl_.default_scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.default_scopes_.Get(i));
  }

  // repeated string tags = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string base_path = 1;
  if (!this->_internal_base_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_path());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string auth_provider = 12;
  if (!this->_internal_auth_provider().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_provider());
  }

  // string title = 20;
  if (!this->_internal_title().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 21;
  if (!this->_internal_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string contact_email = 23;
  if (!this->_internal_contact_email().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contact_email());
  }

  // string license = 24;
  if (!this->_internal_license().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  // .unhinged.gateway.v1.RateLimitRule default_rate_limit = 15;
  if (this->_internal_has_default_rate_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.default_rate_limit_);
  }

  // .unhinged.gateway.v1.CorsRule default_cors = 16;
  if (this->_internal_has_default_cors()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.default_cors_);
  }

  // bool default_auth_required = 10;
  if (this->_internal_default_auth_required() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceRule::GetClassData() const { return &_class_data_; }


void ServiceRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceRule*>(&to_msg);
  auto& from = static_cast<const ServiceRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.gateway.v1.ServiceRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.default_scopes_.MergeFrom(from._impl_.default_scopes_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_base_path().empty()) {
    _this->_internal_set_base_path(from._internal_base_path());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_auth_provider().empty()) {
    _this->_internal_set_auth_provider(from._internal_auth_provider());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_contact_email().empty()) {
    _this->_internal_set_contact_email(from._internal_contact_email());
  }
  if (!from._internal_license().empty()) {
    _this->_internal_set_license(from._internal_license());
  }
  if (from._internal_has_default_rate_limit()) {
    _this->_internal_mutable_default_rate_limit()->::unhinged::gateway::v1::RateLimitRule::MergeFrom(
        from._internal_default_rate_limit());
  }
  if (from._internal_has_default_cors()) {
    _this->_internal_mutable_default_cors()->::unhinged::gateway::v1::CorsRule::MergeFrom(
        from._internal_default_cors());
  }
  if (from._internal_default_auth_required() != 0) {
    _this->_internal_set_default_auth_required(from._internal_default_auth_required());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceRule::CopyFrom(const ServiceRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.gateway.v1.ServiceRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRule::IsInitialized() const {
  return true;
}

void ServiceRule::InternalSwap(ServiceRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.default_scopes_.InternalSwap(&other->_impl_.default_scopes_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.base_path_, lhs_arena,
      &other->_impl_.base_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_provider_, lhs_arena,
      &other->_impl_.auth_provider_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contact_email_, lhs_arena,
      &other->_impl_.contact_email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.license_, lhs_arena,
      &other->_impl_.license_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceRule, _impl_.default_auth_required_)
      + sizeof(ServiceRule::_impl_.default_auth_required_)
      - PROTOBUF_FIELD_OFFSET(ServiceRule, _impl_.default_rate_limit_)>(
          reinterpret_cast<char*>(&_impl_.default_rate_limit_),
          reinterpret_cast<char*>(&other->_impl_.default_rate_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gateway_5fannotations_2eproto_getter, &descriptor_table_gateway_5fannotations_2eproto_once,
      file_level_metadata_gateway_5fannotations_2eproto[7]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::unhinged::gateway::v1::HttpRule >, 11, false>
  http(kHttpFieldNumber, ::unhinged::gateway::v1::HttpRule::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::unhinged::gateway::v1::WebSocketRule >, 11, false>
  websocket(kWebsocketFieldNumber, ::unhinged::gateway::v1::WebSocketRule::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::unhinged::gateway::v1::ServerSentEventsRule >, 11, false>
  sse(kSseFieldNumber, ::unhinged::gateway::v1::ServerSentEventsRule::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::unhinged::gateway::v1::LongPollingRule >, 11, false>
  long_polling(kLongPollingFieldNumber, ::unhinged::gateway::v1::LongPollingRule::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::ServiceOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::unhinged::gateway::v1::ServiceRule >, 11, false>
  service(kServiceFieldNumber, ::unhinged::gateway::v1::ServiceRule::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  gateway_exclude(kGatewayExcludeFieldNumber, false, nullptr);
const std::string json_name_override_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  json_name_override(kJsonNameOverrideFieldNumber, json_name_override_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  path_param(kPathParamFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  query_param(kQueryParamFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  header_param(kHeaderParamFieldNumber, false, nullptr);
const std::string param_name_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  param_name(kParamNameFieldNumber, param_name_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  required_param(kRequiredParamFieldNumber, false, nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace gateway
}  // namespace unhinged
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::unhinged::gateway::v1::HttpRule*
Arena::CreateMaybeMessage< ::unhinged::gateway::v1::HttpRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::gateway::v1::HttpRule >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::gateway::v1::RateLimitRule*
Arena::CreateMaybeMessage< ::unhinged::gateway::v1::RateLimitRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::gateway::v1::RateLimitRule >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::gateway::v1::CacheRule*
Arena::CreateMaybeMessage< ::unhinged::gateway::v1::CacheRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::gateway::v1::CacheRule >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::gateway::v1::CorsRule*
Arena::CreateMaybeMessage< ::unhinged::gateway::v1::CorsRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::gateway::v1::CorsRule >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::gateway::v1::WebSocketRule*
Arena::CreateMaybeMessage< ::unhinged::gateway::v1::WebSocketRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::gateway::v1::WebSocketRule >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::gateway::v1::ServerSentEventsRule*
Arena::CreateMaybeMessage< ::unhinged::gateway::v1::ServerSentEventsRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::gateway::v1::ServerSentEventsRule >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::gateway::v1::LongPollingRule*
Arena::CreateMaybeMessage< ::unhinged::gateway::v1::LongPollingRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::gateway::v1::LongPollingRule >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::gateway::v1::ServiceRule*
Arena::CreateMaybeMessage< ::unhinged::gateway::v1::ServiceRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::gateway::v1::ServiceRule >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
