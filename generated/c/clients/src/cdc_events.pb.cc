// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cdc_events.proto

#include "cdc_events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace unhinged {
namespace cdc {
PROTOBUF_CONSTEXPR UniversalEvent::UniversalEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_service_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.correlation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tenant_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.routing_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_time_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.expires_at_)*/nullptr
  , /*decltype(_impl_.sequence_number_)*/int64_t{0}
  , /*decltype(_impl_.retry_count_)*/0
  , /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UniversalEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UniversalEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UniversalEventDefaultTypeInternal() {}
  union {
    UniversalEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UniversalEventDefaultTypeInternal _UniversalEvent_default_instance_;
PROTOBUF_CONSTEXPR DocumentEvent::DocumentEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.document_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.namespace__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.event_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DocumentEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentEventDefaultTypeInternal() {}
  union {
    DocumentEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentEventDefaultTypeInternal _DocumentEvent_default_instance_;
PROTOBUF_CONSTEXPR DocumentCreated::DocumentCreated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.document_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_by_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.document_metadata_)*/nullptr
  , /*decltype(_impl_.document_size_bytes_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DocumentCreatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentCreatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentCreatedDefaultTypeInternal() {}
  union {
    DocumentCreated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentCreatedDefaultTypeInternal _DocumentCreated_default_instance_;
PROTOBUF_CONSTEXPR DocumentUpdated::DocumentUpdated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.changed_fields_)*/{}
  , /*decltype(_impl_.updated_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_by_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.changes_)*/nullptr
  , /*decltype(_impl_.previous_version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DocumentUpdatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentUpdatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentUpdatedDefaultTypeInternal() {}
  union {
    DocumentUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentUpdatedDefaultTypeInternal _DocumentUpdated_default_instance_;
PROTOBUF_CONSTEXPR DocumentDeleted::DocumentDeleted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deleted_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deleted_by_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deletion_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.versions_deleted_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DocumentDeletedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentDeletedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentDeletedDefaultTypeInternal() {}
  union {
    DocumentDeleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentDeletedDefaultTypeInternal _DocumentDeleted_default_instance_;
PROTOBUF_CONSTEXPR DocumentAccessed::DocumentAccessed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accessed_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accessed_by_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.access_method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_included_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DocumentAccessedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentAccessedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentAccessedDefaultTypeInternal() {}
  union {
    DocumentAccessed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentAccessedDefaultTypeInternal _DocumentAccessed_default_instance_;
PROTOBUF_CONSTEXPR DocumentTagged::DocumentTagged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tagged_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tagged_by_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_operation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DocumentTaggedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentTaggedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentTaggedDefaultTypeInternal() {}
  union {
    DocumentTagged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentTaggedDefaultTypeInternal _DocumentTagged_default_instance_;
PROTOBUF_CONSTEXPR DocumentVersioned::DocumentVersioned(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_version_)*/0
  , /*decltype(_impl_.previous_version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DocumentVersionedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentVersionedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentVersionedDefaultTypeInternal() {}
  union {
    DocumentVersioned _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentVersionedDefaultTypeInternal _DocumentVersioned_default_instance_;
PROTOBUF_CONSTEXPR LLMEvent::LLMEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interaction_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.provider_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.event_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LLMEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LLMEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LLMEventDefaultTypeInternal() {}
  union {
    LLMEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LLMEventDefaultTypeInternal _LLMEvent_default_instance_;
PROTOBUF_CONSTEXPR LLMPromptSent::LLMPromptSent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.context_document_ids_)*/{}
  , /*decltype(_impl_.prompt_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prompt_parameters_)*/nullptr
  , /*decltype(_impl_.max_tokens_)*/0
  , /*decltype(_impl_.temperature_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LLMPromptSentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LLMPromptSentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LLMPromptSentDefaultTypeInternal() {}
  union {
    LLMPromptSent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LLMPromptSentDefaultTypeInternal _LLMPromptSent_default_instance_;
PROTOBUF_CONSTEXPR LLMResponseReceived::LLMResponseReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.finish_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_metadata_)*/nullptr
  , /*decltype(_impl_.response_tokens_)*/0
  , /*decltype(_impl_.response_time_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LLMResponseReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LLMResponseReceivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LLMResponseReceivedDefaultTypeInternal() {}
  union {
    LLMResponseReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LLMResponseReceivedDefaultTypeInternal _LLMResponseReceived_default_instance_;
PROTOBUF_CONSTEXPR LLMError::LLMError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_retryable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LLMErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LLMErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LLMErrorDefaultTypeInternal() {}
  union {
    LLMError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LLMErrorDefaultTypeInternal _LLMError_default_instance_;
PROTOBUF_CONSTEXPR LLMFeedback::LLMFeedback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feedback_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.feedback_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.feedback_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.provided_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LLMFeedbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LLMFeedbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LLMFeedbackDefaultTypeInternal() {}
  union {
    LLMFeedback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LLMFeedbackDefaultTypeInternal _LLMFeedback_default_instance_;
PROTOBUF_CONSTEXPR LLMTokenUsage::LLMTokenUsage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prompt_tokens_)*/0
  , /*decltype(_impl_.completion_tokens_)*/0
  , /*decltype(_impl_.total_tokens_)*/0
  , /*decltype(_impl_.cost_usd_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LLMTokenUsageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LLMTokenUsageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LLMTokenUsageDefaultTypeInternal() {}
  union {
    LLMTokenUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LLMTokenUsageDefaultTypeInternal _LLMTokenUsage_default_instance_;
PROTOBUF_CONSTEXPR AgentEvent::AgentEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.agent_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.agent_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.agent_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.execution_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.event_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AgentEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentEventDefaultTypeInternal() {}
  union {
    AgentEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentEventDefaultTypeInternal _AgentEvent_default_instance_;
PROTOBUF_CONSTEXPR AgentStarted::AgentStarted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.available_tools_)*/{}
  , /*decltype(_impl_.task_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.initial_context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AgentStartedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentStartedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentStartedDefaultTypeInternal() {}
  union {
    AgentStarted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentStartedDefaultTypeInternal _AgentStarted_default_instance_;
PROTOBUF_CONSTEXPR AgentStepCompleted::AgentStepCompleted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.step_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.step_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.step_result_)*/nullptr
  , /*decltype(_impl_.step_number_)*/0
  , /*decltype(_impl_.step_duration_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AgentStepCompletedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentStepCompletedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentStepCompletedDefaultTypeInternal() {}
  union {
    AgentStepCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentStepCompletedDefaultTypeInternal _AgentStepCompleted_default_instance_;
PROTOBUF_CONSTEXPR AgentCompleted::AgentCompleted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.completion_status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.final_result_)*/nullptr
  , /*decltype(_impl_.total_steps_)*/0
  , /*decltype(_impl_.total_duration_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AgentCompletedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentCompletedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentCompletedDefaultTypeInternal() {}
  union {
    AgentCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentCompletedDefaultTypeInternal _AgentCompleted_default_instance_;
PROTOBUF_CONSTEXPR AgentFailed::AgentFailed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.failure_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.failed_at_step_)*/0
  , /*decltype(_impl_.is_recoverable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AgentFailedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentFailedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentFailedDefaultTypeInternal() {}
  union {
    AgentFailed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentFailedDefaultTypeInternal _AgentFailed_default_instance_;
PROTOBUF_CONSTEXPR AgentToolUsed::AgentToolUsed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tool_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tool_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tool_input_)*/nullptr
  , /*decltype(_impl_.tool_output_)*/nullptr
  , /*decltype(_impl_.tool_duration_ms_)*/0
  , /*decltype(_impl_.tool_success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AgentToolUsedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentToolUsedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentToolUsedDefaultTypeInternal() {}
  union {
    AgentToolUsed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentToolUsedDefaultTypeInternal _AgentToolUsed_default_instance_;
PROTOBUF_CONSTEXPR SessionEvent::SessionEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.event_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SessionEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionEventDefaultTypeInternal() {}
  union {
    SessionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionEventDefaultTypeInternal _SessionEvent_default_instance_;
PROTOBUF_CONSTEXPR SessionStarted::SessionStarted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_agent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionStartedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionStartedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionStartedDefaultTypeInternal() {}
  union {
    SessionStarted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionStartedDefaultTypeInternal _SessionStarted_default_instance_;
PROTOBUF_CONSTEXPR SessionEnded::SessionEnded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.end_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_duration_ms_)*/0
  , /*decltype(_impl_.interactions_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionEndedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionEndedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionEndedDefaultTypeInternal() {}
  union {
    SessionEnded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionEndedDefaultTypeInternal _SessionEnded_default_instance_;
PROTOBUF_CONSTEXPR SessionContextAccessed::SessionContextAccessed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.document_types_)*/{}
  , /*decltype(_impl_.access_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.documents_returned_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionContextAccessedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionContextAccessedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionContextAccessedDefaultTypeInternal() {}
  union {
    SessionContextAccessed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionContextAccessedDefaultTypeInternal _SessionContextAccessed_default_instance_;
PROTOBUF_CONSTEXPR SessionHeartbeat::SessionHeartbeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.last_activity_)*/nullptr
  , /*decltype(_impl_.is_active_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionHeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionHeartbeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionHeartbeatDefaultTypeInternal() {}
  union {
    SessionHeartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionHeartbeatDefaultTypeInternal _SessionHeartbeat_default_instance_;
PROTOBUF_CONSTEXPR SystemEvent::SystemEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.component_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.event_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SystemEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemEventDefaultTypeInternal() {}
  union {
    SystemEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemEventDefaultTypeInternal _SystemEvent_default_instance_;
PROTOBUF_CONSTEXPR HealthCheck::HealthCheck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.health_details_)*/nullptr
  , /*decltype(_impl_.is_healthy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthCheckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckDefaultTypeInternal() {}
  union {
    HealthCheck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckDefaultTypeInternal _HealthCheck_default_instance_;
PROTOBUF_CONSTEXPR MetricReported::MetricReported(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metric_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metric_unit_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metric_tags_)*/nullptr
  , /*decltype(_impl_.metric_value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricReportedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricReportedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricReportedDefaultTypeInternal() {}
  union {
    MetricReported _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricReportedDefaultTypeInternal _MetricReported_default_instance_;
PROTOBUF_CONSTEXPR AlertTriggered::AlertTriggered(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.alert_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.severity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alert_context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlertTriggeredDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlertTriggeredDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlertTriggeredDefaultTypeInternal() {}
  union {
    AlertTriggered _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlertTriggeredDefaultTypeInternal _AlertTriggered_default_instance_;
PROTOBUF_CONSTEXPR ServiceStarted::ServiceStarted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.build_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceStartedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceStartedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceStartedDefaultTypeInternal() {}
  union {
    ServiceStarted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceStartedDefaultTypeInternal _ServiceStarted_default_instance_;
PROTOBUF_CONSTEXPR ServiceStopped::ServiceStopped(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stop_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uptime_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceStoppedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceStoppedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceStoppedDefaultTypeInternal() {}
  union {
    ServiceStopped _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceStoppedDefaultTypeInternal _ServiceStopped_default_instance_;
PROTOBUF_CONSTEXPR WorkflowEvent::WorkflowEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.workflow_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.execution_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.event_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct WorkflowEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkflowEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkflowEventDefaultTypeInternal() {}
  union {
    WorkflowEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkflowEventDefaultTypeInternal _WorkflowEvent_default_instance_;
PROTOBUF_CONSTEXPR WorkflowTriggered::WorkflowTriggered(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trigger_event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trigger_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trigger_context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkflowTriggeredDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkflowTriggeredDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkflowTriggeredDefaultTypeInternal() {}
  union {
    WorkflowTriggered _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkflowTriggeredDefaultTypeInternal _WorkflowTriggered_default_instance_;
PROTOBUF_CONSTEXPR WorkflowStepExecuted::WorkflowStepExecuted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.step_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.step_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.step_input_)*/nullptr
  , /*decltype(_impl_.step_output_)*/nullptr
  , /*decltype(_impl_.step_duration_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkflowStepExecutedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkflowStepExecutedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkflowStepExecutedDefaultTypeInternal() {}
  union {
    WorkflowStepExecuted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkflowStepExecutedDefaultTypeInternal _WorkflowStepExecuted_default_instance_;
PROTOBUF_CONSTEXPR WorkflowCompleted::WorkflowCompleted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.final_output_)*/nullptr
  , /*decltype(_impl_.total_steps_)*/0
  , /*decltype(_impl_.total_duration_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkflowCompletedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkflowCompletedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkflowCompletedDefaultTypeInternal() {}
  union {
    WorkflowCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkflowCompletedDefaultTypeInternal _WorkflowCompleted_default_instance_;
PROTOBUF_CONSTEXPR WorkflowFailed::WorkflowFailed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.failure_step_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.failure_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkflowFailedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkflowFailedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkflowFailedDefaultTypeInternal() {}
  union {
    WorkflowFailed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkflowFailedDefaultTypeInternal _WorkflowFailed_default_instance_;
PROTOBUF_CONSTEXPR ChatEvent::ChatEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.event_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ChatEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatEventDefaultTypeInternal() {}
  union {
    ChatEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatEventDefaultTypeInternal _ChatEvent_default_instance_;
PROTOBUF_CONSTEXPR ConversationCreated::ConversationCreated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.participant_ids_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConversationCreatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConversationCreatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConversationCreatedDefaultTypeInternal() {}
  union {
    ConversationCreated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConversationCreatedDefaultTypeInternal _ConversationCreated_default_instance_;
PROTOBUF_CONSTEXPR MessageSent::MessageSent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sent_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageSentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageSentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageSentDefaultTypeInternal() {}
  union {
    MessageSent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageSentDefaultTypeInternal _MessageSent_default_instance_;
PROTOBUF_CONSTEXPR MessageUpdated::MessageUpdated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageUpdatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageUpdatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageUpdatedDefaultTypeInternal() {}
  union {
    MessageUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageUpdatedDefaultTypeInternal _MessageUpdated_default_instance_;
PROTOBUF_CONSTEXPR TypingStarted::TypingStarted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TypingStartedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypingStartedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypingStartedDefaultTypeInternal() {}
  union {
    TypingStarted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypingStartedDefaultTypeInternal _TypingStarted_default_instance_;
PROTOBUF_CONSTEXPR ParticipantJoined::ParticipantJoined(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.invited_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParticipantJoinedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantJoinedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantJoinedDefaultTypeInternal() {}
  union {
    ParticipantJoined _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantJoinedDefaultTypeInternal _ParticipantJoined_default_instance_;
PROTOBUF_CONSTEXPR AudioEvent::AudioEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.audio_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.event_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AudioEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioEventDefaultTypeInternal() {}
  union {
    AudioEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioEventDefaultTypeInternal _AudioEvent_default_instance_;
PROTOBUF_CONSTEXPR TTSStarted::TTSStarted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.voice_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TTSStartedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TTSStartedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TTSStartedDefaultTypeInternal() {}
  union {
    TTSStarted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TTSStartedDefaultTypeInternal _TTSStarted_default_instance_;
PROTOBUF_CONSTEXPR TTSCompleted::TTSCompleted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.audio_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_seconds_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TTSCompletedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TTSCompletedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TTSCompletedDefaultTypeInternal() {}
  union {
    TTSCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TTSCompletedDefaultTypeInternal _TTSCompleted_default_instance_;
PROTOBUF_CONSTEXPR STTCompleted::STTCompleted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transcript_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.confidence_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct STTCompletedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR STTCompletedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~STTCompletedDefaultTypeInternal() {}
  union {
    STTCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 STTCompletedDefaultTypeInternal _STTCompleted_default_instance_;
PROTOBUF_CONSTEXPR UserEvent::UserEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.event_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UserEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserEventDefaultTypeInternal() {}
  union {
    UserEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserEventDefaultTypeInternal _UserEvent_default_instance_;
PROTOBUF_CONSTEXPR UserCreated::UserCreated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserCreatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserCreatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserCreatedDefaultTypeInternal() {}
  union {
    UserCreated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserCreatedDefaultTypeInternal _UserCreated_default_instance_;
PROTOBUF_CONSTEXPR UserLoggedIn::UserLoggedIn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_agent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserLoggedInDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLoggedInDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLoggedInDefaultTypeInternal() {}
  union {
    UserLoggedIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLoggedInDefaultTypeInternal _UserLoggedIn_default_instance_;
PROTOBUF_CONSTEXPR TeamMemberAdded::TeamMemberAdded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.team_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.added_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeamMemberAddedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamMemberAddedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamMemberAddedDefaultTypeInternal() {}
  union {
    TeamMemberAdded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamMemberAddedDefaultTypeInternal _TeamMemberAdded_default_instance_;
}  // namespace cdc
}  // namespace unhinged
static ::_pb::Metadata file_level_metadata_cdc_5fevents_2eproto[50];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cdc_5fevents_2eproto[9];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cdc_5fevents_2eproto = nullptr;

const uint32_t TableStruct_cdc_5fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.event_version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.event_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.source_service_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.source_version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.correlation_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.tenant_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.routing_key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.retry_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.expires_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UniversalEvent, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentEvent, _impl_.document_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentEvent, _impl_.document_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentEvent, _impl_.namespace__),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentEvent, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentEvent, _impl_.event_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentEvent, _impl_.event_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentCreated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentCreated, _impl_.document_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentCreated, _impl_.created_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentCreated, _impl_.created_by_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentCreated, _impl_.document_metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentCreated, _impl_.document_size_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentUpdated, _impl_.previous_version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentUpdated, _impl_.updated_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentUpdated, _impl_.updated_by_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentUpdated, _impl_.changed_fields_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentUpdated, _impl_.changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentDeleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentDeleted, _impl_.deleted_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentDeleted, _impl_.deleted_by_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentDeleted, _impl_.versions_deleted_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentDeleted, _impl_.deletion_reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentAccessed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentAccessed, _impl_.accessed_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentAccessed, _impl_.accessed_by_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentAccessed, _impl_.access_method_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentAccessed, _impl_.body_included_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentTagged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentTagged, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentTagged, _impl_.tagged_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentTagged, _impl_.tagged_by_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentTagged, _impl_.tag_operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentVersioned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentVersioned, _impl_.new_version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentVersioned, _impl_.previous_version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DocumentVersioned, _impl_.version_reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMEvent, _impl_.interaction_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMEvent, _impl_.model_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMEvent, _impl_.provider_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMEvent, _impl_.event_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMEvent, _impl_.event_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMPromptSent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMPromptSent, _impl_.prompt_text_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMPromptSent, _impl_.prompt_parameters_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMPromptSent, _impl_.context_document_ids_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMPromptSent, _impl_.max_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMPromptSent, _impl_.temperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMResponseReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMResponseReceived, _impl_.response_text_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMResponseReceived, _impl_.finish_reason_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMResponseReceived, _impl_.response_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMResponseReceived, _impl_.response_time_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMResponseReceived, _impl_.response_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMError, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMError, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMError, _impl_.error_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMError, _impl_.is_retryable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMFeedback, _impl_.feedback_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMFeedback, _impl_.feedback_value_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMFeedback, _impl_.feedback_text_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMFeedback, _impl_.provided_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMTokenUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMTokenUsage, _impl_.prompt_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMTokenUsage, _impl_.completion_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMTokenUsage, _impl_.total_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::LLMTokenUsage, _impl_.cost_usd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentEvent, _impl_.agent_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentEvent, _impl_.agent_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentEvent, _impl_.agent_version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentEvent, _impl_.execution_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentEvent, _impl_.event_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentEvent, _impl_.event_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentStarted, _impl_.task_description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentStarted, _impl_.initial_context_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentStarted, _impl_.available_tools_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentStepCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentStepCompleted, _impl_.step_number_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentStepCompleted, _impl_.step_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentStepCompleted, _impl_.step_description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentStepCompleted, _impl_.step_result_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentStepCompleted, _impl_.step_duration_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentCompleted, _impl_.completion_status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentCompleted, _impl_.final_result_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentCompleted, _impl_.total_steps_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentCompleted, _impl_.total_duration_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentFailed, _impl_.failure_reason_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentFailed, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentFailed, _impl_.failed_at_step_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentFailed, _impl_.is_recoverable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentToolUsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentToolUsed, _impl_.tool_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentToolUsed, _impl_.tool_version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentToolUsed, _impl_.tool_input_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentToolUsed, _impl_.tool_output_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentToolUsed, _impl_.tool_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AgentToolUsed, _impl_.tool_success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionEvent, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionEvent, _impl_.event_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionEvent, _impl_.event_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionStarted, _impl_.user_agent_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionStarted, _impl_.ip_address_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionStarted, _impl_.session_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionEnded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionEnded, _impl_.end_reason_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionEnded, _impl_.session_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionEnded, _impl_.interactions_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionContextAccessed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionContextAccessed, _impl_.document_types_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionContextAccessed, _impl_.documents_returned_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionContextAccessed, _impl_.access_reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionHeartbeat, _impl_.last_activity_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SessionHeartbeat, _impl_.is_active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SystemEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SystemEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SystemEvent, _impl_.component_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SystemEvent, _impl_.event_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SystemEvent, _impl_.event_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::HealthCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::HealthCheck, _impl_.is_healthy_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::HealthCheck, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::HealthCheck, _impl_.health_details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::MetricReported, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::MetricReported, _impl_.metric_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::MetricReported, _impl_.metric_value_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::MetricReported, _impl_.metric_unit_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::MetricReported, _impl_.metric_tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AlertTriggered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AlertTriggered, _impl_.alert_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AlertTriggered, _impl_.severity_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AlertTriggered, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AlertTriggered, _impl_.alert_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceStarted, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceStarted, _impl_.service_version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceStarted, _impl_.build_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceStopped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceStopped, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceStopped, _impl_.stop_reason_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceStopped, _impl_.uptime_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowEvent, _impl_.workflow_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowEvent, _impl_.workflow_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowEvent, _impl_.execution_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowEvent, _impl_.event_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowEvent, _impl_.event_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowTriggered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowTriggered, _impl_.trigger_event_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowTriggered, _impl_.trigger_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowTriggered, _impl_.trigger_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowStepExecuted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowStepExecuted, _impl_.step_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowStepExecuted, _impl_.step_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowStepExecuted, _impl_.step_input_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowStepExecuted, _impl_.step_output_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowStepExecuted, _impl_.step_duration_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowCompleted, _impl_.final_output_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowCompleted, _impl_.total_steps_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowCompleted, _impl_.total_duration_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowFailed, _impl_.failure_step_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowFailed, _impl_.failure_reason_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::WorkflowFailed, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ChatEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ChatEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ChatEvent, _impl_.conversation_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ChatEvent, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ChatEvent, _impl_.event_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ChatEvent, _impl_.event_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ConversationCreated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ConversationCreated, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ConversationCreated, _impl_.created_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ConversationCreated, _impl_.participant_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::MessageSent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::MessageSent, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::MessageSent, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::MessageSent, _impl_.sent_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::MessageUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::MessageUpdated, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::MessageUpdated, _impl_.updated_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TypingStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TypingStarted, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ParticipantJoined, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ParticipantJoined, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ParticipantJoined, _impl_.invited_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AudioEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AudioEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AudioEvent, _impl_.audio_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AudioEvent, _impl_.event_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AudioEvent, _impl_.event_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TTSStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TTSStarted, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TTSStarted, _impl_.voice_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TTSCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TTSCompleted, _impl_.audio_url_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TTSCompleted, _impl_.duration_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::STTCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::STTCompleted, _impl_.transcript_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::STTCompleted, _impl_.confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UserEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UserEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UserEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UserEvent, _impl_.event_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UserEvent, _impl_.event_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UserCreated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UserCreated, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UserCreated, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UserLoggedIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UserLoggedIn, _impl_.ip_address_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UserLoggedIn, _impl_.user_agent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TeamMemberAdded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TeamMemberAdded, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TeamMemberAdded, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TeamMemberAdded, _impl_.added_by_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::unhinged::cdc::UniversalEvent)},
  { 33, -1, -1, sizeof(::unhinged::cdc::DocumentEvent)},
  { 51, -1, -1, sizeof(::unhinged::cdc::DocumentCreated)},
  { 62, -1, -1, sizeof(::unhinged::cdc::DocumentUpdated)},
  { 73, -1, -1, sizeof(::unhinged::cdc::DocumentDeleted)},
  { 83, -1, -1, sizeof(::unhinged::cdc::DocumentAccessed)},
  { 93, -1, -1, sizeof(::unhinged::cdc::DocumentTagged)},
  { 103, -1, -1, sizeof(::unhinged::cdc::DocumentVersioned)},
  { 112, -1, -1, sizeof(::unhinged::cdc::LLMEvent)},
  { 128, -1, -1, sizeof(::unhinged::cdc::LLMPromptSent)},
  { 139, -1, -1, sizeof(::unhinged::cdc::LLMResponseReceived)},
  { 150, -1, -1, sizeof(::unhinged::cdc::LLMError)},
  { 160, -1, -1, sizeof(::unhinged::cdc::LLMFeedback)},
  { 170, -1, -1, sizeof(::unhinged::cdc::LLMTokenUsage)},
  { 180, -1, -1, sizeof(::unhinged::cdc::AgentEvent)},
  { 197, -1, -1, sizeof(::unhinged::cdc::AgentStarted)},
  { 206, -1, -1, sizeof(::unhinged::cdc::AgentStepCompleted)},
  { 217, -1, -1, sizeof(::unhinged::cdc::AgentCompleted)},
  { 227, -1, -1, sizeof(::unhinged::cdc::AgentFailed)},
  { 237, -1, -1, sizeof(::unhinged::cdc::AgentToolUsed)},
  { 249, -1, -1, sizeof(::unhinged::cdc::SessionEvent)},
  { 262, -1, -1, sizeof(::unhinged::cdc::SessionStarted)},
  { 271, -1, -1, sizeof(::unhinged::cdc::SessionEnded)},
  { 280, -1, -1, sizeof(::unhinged::cdc::SessionContextAccessed)},
  { 289, -1, -1, sizeof(::unhinged::cdc::SessionHeartbeat)},
  { 297, -1, -1, sizeof(::unhinged::cdc::SystemEvent)},
  { 311, -1, -1, sizeof(::unhinged::cdc::HealthCheck)},
  { 320, -1, -1, sizeof(::unhinged::cdc::MetricReported)},
  { 330, -1, -1, sizeof(::unhinged::cdc::AlertTriggered)},
  { 340, -1, -1, sizeof(::unhinged::cdc::ServiceStarted)},
  { 349, -1, -1, sizeof(::unhinged::cdc::ServiceStopped)},
  { 358, -1, -1, sizeof(::unhinged::cdc::WorkflowEvent)},
  { 373, -1, -1, sizeof(::unhinged::cdc::WorkflowTriggered)},
  { 382, -1, -1, sizeof(::unhinged::cdc::WorkflowStepExecuted)},
  { 393, -1, -1, sizeof(::unhinged::cdc::WorkflowCompleted)},
  { 402, -1, -1, sizeof(::unhinged::cdc::WorkflowFailed)},
  { 411, -1, -1, sizeof(::unhinged::cdc::ChatEvent)},
  { 426, -1, -1, sizeof(::unhinged::cdc::ConversationCreated)},
  { 435, -1, -1, sizeof(::unhinged::cdc::MessageSent)},
  { 444, -1, -1, sizeof(::unhinged::cdc::MessageUpdated)},
  { 452, -1, -1, sizeof(::unhinged::cdc::TypingStarted)},
  { 459, -1, -1, sizeof(::unhinged::cdc::ParticipantJoined)},
  { 467, -1, -1, sizeof(::unhinged::cdc::AudioEvent)},
  { 479, -1, -1, sizeof(::unhinged::cdc::TTSStarted)},
  { 487, -1, -1, sizeof(::unhinged::cdc::TTSCompleted)},
  { 495, -1, -1, sizeof(::unhinged::cdc::STTCompleted)},
  { 503, -1, -1, sizeof(::unhinged::cdc::UserEvent)},
  { 515, -1, -1, sizeof(::unhinged::cdc::UserCreated)},
  { 523, -1, -1, sizeof(::unhinged::cdc::UserLoggedIn)},
  { 531, -1, -1, sizeof(::unhinged::cdc::TeamMemberAdded)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::unhinged::cdc::_UniversalEvent_default_instance_._instance,
  &::unhinged::cdc::_DocumentEvent_default_instance_._instance,
  &::unhinged::cdc::_DocumentCreated_default_instance_._instance,
  &::unhinged::cdc::_DocumentUpdated_default_instance_._instance,
  &::unhinged::cdc::_DocumentDeleted_default_instance_._instance,
  &::unhinged::cdc::_DocumentAccessed_default_instance_._instance,
  &::unhinged::cdc::_DocumentTagged_default_instance_._instance,
  &::unhinged::cdc::_DocumentVersioned_default_instance_._instance,
  &::unhinged::cdc::_LLMEvent_default_instance_._instance,
  &::unhinged::cdc::_LLMPromptSent_default_instance_._instance,
  &::unhinged::cdc::_LLMResponseReceived_default_instance_._instance,
  &::unhinged::cdc::_LLMError_default_instance_._instance,
  &::unhinged::cdc::_LLMFeedback_default_instance_._instance,
  &::unhinged::cdc::_LLMTokenUsage_default_instance_._instance,
  &::unhinged::cdc::_AgentEvent_default_instance_._instance,
  &::unhinged::cdc::_AgentStarted_default_instance_._instance,
  &::unhinged::cdc::_AgentStepCompleted_default_instance_._instance,
  &::unhinged::cdc::_AgentCompleted_default_instance_._instance,
  &::unhinged::cdc::_AgentFailed_default_instance_._instance,
  &::unhinged::cdc::_AgentToolUsed_default_instance_._instance,
  &::unhinged::cdc::_SessionEvent_default_instance_._instance,
  &::unhinged::cdc::_SessionStarted_default_instance_._instance,
  &::unhinged::cdc::_SessionEnded_default_instance_._instance,
  &::unhinged::cdc::_SessionContextAccessed_default_instance_._instance,
  &::unhinged::cdc::_SessionHeartbeat_default_instance_._instance,
  &::unhinged::cdc::_SystemEvent_default_instance_._instance,
  &::unhinged::cdc::_HealthCheck_default_instance_._instance,
  &::unhinged::cdc::_MetricReported_default_instance_._instance,
  &::unhinged::cdc::_AlertTriggered_default_instance_._instance,
  &::unhinged::cdc::_ServiceStarted_default_instance_._instance,
  &::unhinged::cdc::_ServiceStopped_default_instance_._instance,
  &::unhinged::cdc::_WorkflowEvent_default_instance_._instance,
  &::unhinged::cdc::_WorkflowTriggered_default_instance_._instance,
  &::unhinged::cdc::_WorkflowStepExecuted_default_instance_._instance,
  &::unhinged::cdc::_WorkflowCompleted_default_instance_._instance,
  &::unhinged::cdc::_WorkflowFailed_default_instance_._instance,
  &::unhinged::cdc::_ChatEvent_default_instance_._instance,
  &::unhinged::cdc::_ConversationCreated_default_instance_._instance,
  &::unhinged::cdc::_MessageSent_default_instance_._instance,
  &::unhinged::cdc::_MessageUpdated_default_instance_._instance,
  &::unhinged::cdc::_TypingStarted_default_instance_._instance,
  &::unhinged::cdc::_ParticipantJoined_default_instance_._instance,
  &::unhinged::cdc::_AudioEvent_default_instance_._instance,
  &::unhinged::cdc::_TTSStarted_default_instance_._instance,
  &::unhinged::cdc::_TTSCompleted_default_instance_._instance,
  &::unhinged::cdc::_STTCompleted_default_instance_._instance,
  &::unhinged::cdc::_UserEvent_default_instance_._instance,
  &::unhinged::cdc::_UserCreated_default_instance_._instance,
  &::unhinged::cdc::_UserLoggedIn_default_instance_._instance,
  &::unhinged::cdc::_TeamMemberAdded_default_instance_._instance,
};

const char descriptor_table_protodef_cdc_5fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020cdc_events.proto\022\014unhinged.cdc\032\037google"
  "/protobuf/timestamp.proto\032\034google/protob"
  "uf/struct.proto\"\211\007\n\016UniversalEvent\022\020\n\010ev"
  "ent_id\030\001 \001(\t\022\022\n\nevent_type\030\002 \001(\t\022\025\n\reven"
  "t_version\030\003 \001(\t\022.\n\nevent_time\030\004 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022\027\n\017sequence_numb"
  "er\030\005 \001(\003\022\026\n\016source_service\030\006 \001(\t\022\026\n\016sour"
  "ce_version\030\007 \001(\t\022\020\n\010trace_id\030\010 \001(\t\022\026\n\016co"
  "rrelation_id\030\t \001(\t\022\017\n\007user_id\030\n \001(\t\022\022\n\ns"
  "ession_id\030\013 \001(\t\022\021\n\ttenant_id\030\014 \001(\t\0225\n\016do"
  "cument_event\030\024 \001(\0132\033.unhinged.cdc.Docume"
  "ntEventH\000\022+\n\tllm_event\030\025 \001(\0132\026.unhinged."
  "cdc.LLMEventH\000\022/\n\013agent_event\030\026 \001(\0132\030.un"
  "hinged.cdc.AgentEventH\000\0223\n\rsession_event"
  "\030\027 \001(\0132\032.unhinged.cdc.SessionEventH\000\0221\n\014"
  "system_event\030\030 \001(\0132\031.unhinged.cdc.System"
  "EventH\000\0225\n\016workflow_event\030\031 \001(\0132\033.unhing"
  "ed.cdc.WorkflowEventH\000\022-\n\nchat_event\030\032 \001"
  "(\0132\027.unhinged.cdc.ChatEventH\000\022/\n\013audio_e"
  "vent\030\033 \001(\0132\030.unhinged.cdc.AudioEventH\000\022-"
  "\n\nuser_event\030\034 \001(\0132\027.unhinged.cdc.UserEv"
  "entH\000\022)\n\010metadata\030\036 \001(\0132\027.google.protobu"
  "f.Struct\022\014\n\004tags\030\037 \003(\t\022\023\n\013routing_key\030  "
  "\001(\t\022\023\n\013retry_count\030! \001(\005\022.\n\nexpires_at\030\""
  " \001(\0132\032.google.protobuf.TimestampB\t\n\007payl"
  "oad\"\324\003\n\rDocumentEvent\022\025\n\rdocument_uuid\030\001"
  " \001(\t\022\025\n\rdocument_type\030\002 \001(\t\022\021\n\tnamespace"
  "\030\003 \001(\t\022\017\n\007version\030\004 \001(\005\0223\n\nevent_type\030\005 "
  "\001(\0162\037.unhinged.cdc.DocumentEventType\0220\n\007"
  "created\030\n \001(\0132\035.unhinged.cdc.DocumentCre"
  "atedH\000\0220\n\007updated\030\013 \001(\0132\035.unhinged.cdc.D"
  "ocumentUpdatedH\000\0220\n\007deleted\030\014 \001(\0132\035.unhi"
  "nged.cdc.DocumentDeletedH\000\0222\n\010accessed\030\r"
  " \001(\0132\036.unhinged.cdc.DocumentAccessedH\000\022."
  "\n\006tagged\030\016 \001(\0132\034.unhinged.cdc.DocumentTa"
  "ggedH\000\0224\n\tversioned\030\017 \001(\0132\037.unhinged.cdc"
  ".DocumentVersionedH\000B\014\n\nevent_data\"\246\001\n\017D"
  "ocumentCreated\022\025\n\rdocument_name\030\001 \001(\t\022\022\n"
  "\ncreated_by\030\002 \001(\t\022\027\n\017created_by_type\030\003 \001"
  "(\t\0222\n\021document_metadata\030\004 \001(\0132\027.google.p"
  "rotobuf.Struct\022\033\n\023document_size_bytes\030\005 "
  "\001(\003\"\232\001\n\017DocumentUpdated\022\030\n\020previous_vers"
  "ion\030\001 \001(\005\022\022\n\nupdated_by\030\002 \001(\t\022\027\n\017updated"
  "_by_type\030\003 \001(\t\022\026\n\016changed_fields\030\004 \003(\t\022("
  "\n\007changes\030\005 \001(\0132\027.google.protobuf.Struct"
  "\"q\n\017DocumentDeleted\022\022\n\ndeleted_by\030\001 \001(\t\022"
  "\027\n\017deleted_by_type\030\002 \001(\t\022\030\n\020versions_del"
  "eted\030\003 \001(\005\022\027\n\017deletion_reason\030\004 \001(\t\"o\n\020D"
  "ocumentAccessed\022\023\n\013accessed_by\030\001 \001(\t\022\030\n\020"
  "accessed_by_type\030\002 \001(\t\022\025\n\raccess_method\030"
  "\003 \001(\t\022\025\n\rbody_included\030\004 \001(\010\"_\n\016Document"
  "Tagged\022\013\n\003tag\030\001 \001(\t\022\021\n\ttagged_by\030\002 \001(\t\022\026"
  "\n\016tagged_by_type\030\003 \001(\t\022\025\n\rtag_operation\030"
  "\004 \001(\t\"Z\n\021DocumentVersioned\022\023\n\013new_versio"
  "n\030\001 \001(\005\022\030\n\020previous_version\030\002 \001(\005\022\026\n\016ver"
  "sion_reason\030\003 \001(\t\"\212\003\n\010LLMEvent\022\026\n\016intera"
  "ction_id\030\001 \001(\t\022\022\n\nmodel_name\030\002 \001(\t\022\020\n\010pr"
  "ovider\030\003 \001(\t\022.\n\nevent_type\030\004 \001(\0162\032.unhin"
  "ged.cdc.LLMEventType\0222\n\013prompt_sent\030\n \001("
  "\0132\033.unhinged.cdc.LLMPromptSentH\000\022>\n\021resp"
  "onse_received\030\013 \001(\0132!.unhinged.cdc.LLMRe"
  "sponseReceivedH\000\022+\n\tllm_error\030\014 \001(\0132\026.un"
  "hinged.cdc.LLMErrorH\000\022-\n\010feedback\030\r \001(\0132"
  "\031.unhinged.cdc.LLMFeedbackH\000\0222\n\013token_us"
  "age\030\016 \001(\0132\033.unhinged.cdc.LLMTokenUsageH\000"
  "B\014\n\nevent_data\"\237\001\n\rLLMPromptSent\022\023\n\013prom"
  "pt_text\030\001 \001(\t\0222\n\021prompt_parameters\030\002 \001(\013"
  "2\027.google.protobuf.Struct\022\034\n\024context_doc"
  "ument_ids\030\003 \003(\t\022\022\n\nmax_tokens\030\004 \001(\005\022\023\n\013t"
  "emperature\030\005 \001(\002\"\252\001\n\023LLMResponseReceived"
  "\022\025\n\rresponse_text\030\001 \001(\t\022\025\n\rfinish_reason"
  "\030\002 \001(\t\022\027\n\017response_tokens\030\003 \001(\005\022\030\n\020respo"
  "nse_time_ms\030\004 \001(\002\0222\n\021response_metadata\030\005"
  " \001(\0132\027.google.protobuf.Struct\"_\n\010LLMErro"
  "r\022\022\n\nerror_code\030\001 \001(\t\022\025\n\rerror_message\030\002"
  " \001(\t\022\022\n\nerror_type\030\003 \001(\t\022\024\n\014is_retryable"
  "\030\004 \001(\010\"h\n\013LLMFeedback\022\025\n\rfeedback_type\030\001"
  " \001(\t\022\026\n\016feedback_value\030\002 \001(\t\022\025\n\rfeedback"
  "_text\030\003 \001(\t\022\023\n\013provided_by\030\004 \001(\t\"i\n\rLLMT"
  "okenUsage\022\025\n\rprompt_tokens\030\001 \001(\005\022\031\n\021comp"
  "letion_tokens\030\002 \001(\005\022\024\n\014total_tokens\030\003 \001("
  "\005\022\020\n\010cost_usd\030\004 \001(\002\"\234\003\n\nAgentEvent\022\020\n\010ag"
  "ent_id\030\001 \001(\t\022\022\n\nagent_type\030\002 \001(\t\022\025\n\ragen"
  "t_version\030\003 \001(\t\022\024\n\014execution_id\030\004 \001(\t\0220\n"
  "\nevent_type\030\005 \001(\0162\034.unhinged.cdc.AgentEv"
  "entType\022-\n\007started\030\n \001(\0132\032.unhinged.cdc."
  "AgentStartedH\000\022:\n\016step_completed\030\013 \001(\0132 "
  ".unhinged.cdc.AgentStepCompletedH\000\0221\n\tco"
  "mpleted\030\014 \001(\0132\034.unhinged.cdc.AgentComple"
  "tedH\000\022+\n\006failed\030\r \001(\0132\031.unhinged.cdc.Age"
  "ntFailedH\000\0220\n\ttool_used\030\016 \001(\0132\033.unhinged"
  ".cdc.AgentToolUsedH\000B\014\n\nevent_data\"s\n\014Ag"
  "entStarted\022\030\n\020task_description\030\001 \001(\t\0220\n\017"
  "initial_context\030\002 \001(\0132\027.google.protobuf."
  "Struct\022\027\n\017available_tools\030\003 \003(\t\"\236\001\n\022Agen"
  "tStepCompleted\022\023\n\013step_number\030\001 \001(\005\022\021\n\ts"
  "tep_type\030\002 \001(\t\022\030\n\020step_description\030\003 \001(\t"
  "\022,\n\013step_result\030\004 \001(\0132\027.google.protobuf."
  "Struct\022\030\n\020step_duration_ms\030\005 \001(\002\"\212\001\n\016Age"
  "ntCompleted\022\031\n\021completion_status\030\001 \001(\t\022-"
  "\n\014final_result\030\002 \001(\0132\027.google.protobuf.S"
  "truct\022\023\n\013total_steps\030\003 \001(\005\022\031\n\021total_dura"
  "tion_ms\030\004 \001(\002\"l\n\013AgentFailed\022\026\n\016failure_"
  "reason\030\001 \001(\t\022\025\n\rerror_message\030\002 \001(\t\022\026\n\016f"
  "ailed_at_step\030\003 \001(\005\022\026\n\016is_recoverable\030\004 "
  "\001(\010\"\303\001\n\rAgentToolUsed\022\021\n\ttool_name\030\001 \001(\t"
  "\022\024\n\014tool_version\030\002 \001(\t\022+\n\ntool_input\030\003 \001"
  "(\0132\027.google.protobuf.Struct\022,\n\013tool_outp"
  "ut\030\004 \001(\0132\027.google.protobuf.Struct\022\030\n\020too"
  "l_duration_ms\030\005 \001(\002\022\024\n\014tool_success\030\006 \001("
  "\010\"\271\002\n\014SessionEvent\022\022\n\nsession_id\030\001 \001(\t\0222"
  "\n\nevent_type\030\002 \001(\0162\036.unhinged.cdc.Sessio"
  "nEventType\022/\n\007started\030\n \001(\0132\034.unhinged.c"
  "dc.SessionStartedH\000\022+\n\005ended\030\013 \001(\0132\032.unh"
  "inged.cdc.SessionEndedH\000\022@\n\020context_acce"
  "ssed\030\014 \001(\0132$.unhinged.cdc.SessionContext"
  "AccessedH\000\0223\n\theartbeat\030\r \001(\0132\036.unhinged"
  ".cdc.SessionHeartbeatH\000B\014\n\nevent_data\"k\n"
  "\016SessionStarted\022\022\n\nuser_agent\030\001 \001(\t\022\022\n\ni"
  "p_address\030\002 \001(\t\0221\n\020session_metadata\030\003 \001("
  "\0132\027.google.protobuf.Struct\"[\n\014SessionEnd"
  "ed\022\022\n\nend_reason\030\001 \001(\t\022\033\n\023session_durati"
  "on_ms\030\002 \001(\002\022\032\n\022interactions_count\030\003 \001(\005\""
  "c\n\026SessionContextAccessed\022\026\n\016document_ty"
  "pes\030\001 \003(\t\022\032\n\022documents_returned\030\002 \001(\005\022\025\n"
  "\raccess_reason\030\003 \001(\t\"X\n\020SessionHeartbeat"
  "\0221\n\rlast_activity\030\001 \001(\0132\032.google.protobu"
  "f.Timestamp\022\021\n\tis_active\030\002 \001(\010\"\345\002\n\013Syste"
  "mEvent\022\021\n\tcomponent\030\001 \001(\t\0221\n\nevent_type\030"
  "\002 \001(\0162\035.unhinged.cdc.SystemEventType\0221\n\014"
  "health_check\030\n \001(\0132\031.unhinged.cdc.Health"
  "CheckH\000\022.\n\006metric\030\013 \001(\0132\034.unhinged.cdc.M"
  "etricReportedH\000\022-\n\005alert\030\014 \001(\0132\034.unhinge"
  "d.cdc.AlertTriggeredH\000\0227\n\017service_starte"
  "d\030\r \001(\0132\034.unhinged.cdc.ServiceStartedH\000\022"
  "7\n\017service_stopped\030\016 \001(\0132\034.unhinged.cdc."
  "ServiceStoppedH\000B\014\n\nevent_data\"b\n\013Health"
  "Check\022\022\n\nis_healthy\030\001 \001(\010\022\016\n\006status\030\002 \001("
  "\t\022/\n\016health_details\030\003 \001(\0132\027.google.proto"
  "buf.Struct\"~\n\016MetricReported\022\023\n\013metric_n"
  "ame\030\001 \001(\t\022\024\n\014metric_value\030\002 \001(\001\022\023\n\013metri"
  "c_unit\030\003 \001(\t\022,\n\013metric_tags\030\004 \001(\0132\027.goog"
  "le.protobuf.Struct\"{\n\016AlertTriggered\022\022\n\n"
  "alert_name\030\001 \001(\t\022\020\n\010severity\030\002 \001(\t\022\023\n\013de"
  "scription\030\003 \001(\t\022.\n\ralert_context\030\004 \001(\0132\027"
  ".google.protobuf.Struct\"S\n\016ServiceStarte"
  "d\022\024\n\014service_name\030\001 \001(\t\022\027\n\017service_versi"
  "on\030\002 \001(\t\022\022\n\nbuild_info\030\003 \001(\t\"N\n\016ServiceS"
  "topped\022\024\n\014service_name\030\001 \001(\t\022\023\n\013stop_rea"
  "son\030\002 \001(\t\022\021\n\tuptime_ms\030\003 \001(\002\"\355\002\n\rWorkflo"
  "wEvent\022\023\n\013workflow_id\030\001 \001(\t\022\025\n\rworkflow_"
  "type\030\002 \001(\t\022\024\n\014execution_id\030\003 \001(\t\0223\n\neven"
  "t_type\030\004 \001(\0162\037.unhinged.cdc.WorkflowEven"
  "tType\0224\n\ttriggered\030\n \001(\0132\037.unhinged.cdc."
  "WorkflowTriggeredH\000\022;\n\rstep_executed\030\013 \001"
  "(\0132\".unhinged.cdc.WorkflowStepExecutedH\000"
  "\0224\n\tcompleted\030\014 \001(\0132\037.unhinged.cdc.Workf"
  "lowCompletedH\000\022.\n\006failed\030\r \001(\0132\034.unhinge"
  "d.cdc.WorkflowFailedH\000B\014\n\nevent_data\"u\n\021"
  "WorkflowTriggered\022\030\n\020trigger_event_id\030\001 "
  "\001(\t\022\024\n\014trigger_type\030\002 \001(\t\0220\n\017trigger_con"
  "text\030\003 \001(\0132\027.google.protobuf.Struct\"\257\001\n\024"
  "WorkflowStepExecuted\022\017\n\007step_id\030\001 \001(\t\022\021\n"
  "\tstep_type\030\002 \001(\t\022+\n\nstep_input\030\003 \001(\0132\027.g"
  "oogle.protobuf.Struct\022,\n\013step_output\030\004 \001"
  "(\0132\027.google.protobuf.Struct\022\030\n\020step_dura"
  "tion_ms\030\005 \001(\002\"r\n\021WorkflowCompleted\022-\n\014fi"
  "nal_output\030\001 \001(\0132\027.google.protobuf.Struc"
  "t\022\023\n\013total_steps\030\002 \001(\005\022\031\n\021total_duration"
  "_ms\030\003 \001(\002\"X\n\016WorkflowFailed\022\027\n\017failure_s"
  "tep_id\030\001 \001(\t\022\026\n\016failure_reason\030\002 \001(\t\022\025\n\r"
  "error_message\030\003 \001(\t\"\234\003\n\tChatEvent\022\027\n\017con"
  "versation_id\030\001 \001(\t\022\022\n\nmessage_id\030\002 \001(\t\022/"
  "\n\nevent_type\030\003 \001(\0162\033.unhinged.cdc.ChatEv"
  "entType\022A\n\024conversation_created\030\n \001(\0132!."
  "unhinged.cdc.ConversationCreatedH\000\0221\n\014me"
  "ssage_sent\030\013 \001(\0132\031.unhinged.cdc.MessageS"
  "entH\000\0227\n\017message_updated\030\014 \001(\0132\034.unhinge"
  "d.cdc.MessageUpdatedH\000\0225\n\016typing_started"
  "\030\r \001(\0132\033.unhinged.cdc.TypingStartedH\000\022=\n"
  "\022participant_joined\030\016 \001(\0132\037.unhinged.cdc"
  ".ParticipantJoinedH\000B\014\n\nevent_data\"Q\n\023Co"
  "nversationCreated\022\r\n\005title\030\001 \001(\t\022\022\n\ncrea"
  "ted_by\030\002 \001(\t\022\027\n\017participant_ids\030\003 \003(\t\"=\n"
  "\013MessageSent\022\017\n\007content\030\001 \001(\t\022\014\n\004role\030\002 "
  "\001(\t\022\017\n\007sent_by\030\003 \001(\t\"5\n\016MessageUpdated\022\017"
  "\n\007content\030\001 \001(\t\022\022\n\nupdated_by\030\002 \001(\t\" \n\rT"
  "ypingStarted\022\017\n\007user_id\030\001 \001(\t\"8\n\021Partici"
  "pantJoined\022\017\n\007user_id\030\001 \001(\t\022\022\n\ninvited_b"
  "y\030\002 \001(\t\"\371\001\n\nAudioEvent\022\020\n\010audio_id\030\001 \001(\t"
  "\0220\n\nevent_type\030\002 \001(\0162\034.unhinged.cdc.Audi"
  "oEventType\022/\n\013tts_started\030\n \001(\0132\030.unhing"
  "ed.cdc.TTSStartedH\000\0223\n\rtts_completed\030\013 \001"
  "(\0132\032.unhinged.cdc.TTSCompletedH\000\0223\n\rstt_"
  "completed\030\014 \001(\0132\032.unhinged.cdc.STTComple"
  "tedH\000B\014\n\nevent_data\",\n\nTTSStarted\022\014\n\004tex"
  "t\030\001 \001(\t\022\020\n\010voice_id\030\002 \001(\t\";\n\014TTSComplete"
  "d\022\021\n\taudio_url\030\001 \001(\t\022\030\n\020duration_seconds"
  "\030\002 \001(\002\"6\n\014STTCompleted\022\022\n\ntranscript\030\001 \001"
  "(\t\022\022\n\nconfidence\030\002 \001(\002\"\200\002\n\tUserEvent\022\017\n\007"
  "user_id\030\001 \001(\t\022/\n\nevent_type\030\002 \001(\0162\033.unhi"
  "nged.cdc.UserEventType\0221\n\014user_created\030\n"
  " \001(\0132\031.unhinged.cdc.UserCreatedH\000\0224\n\016use"
  "r_logged_in\030\013 \001(\0132\032.unhinged.cdc.UserLog"
  "gedInH\000\022:\n\021team_member_added\030\014 \001(\0132\035.unh"
  "inged.cdc.TeamMemberAddedH\000B\014\n\nevent_dat"
  "a\"*\n\013UserCreated\022\r\n\005email\030\001 \001(\t\022\014\n\004name\030"
  "\002 \001(\t\"6\n\014UserLoggedIn\022\022\n\nip_address\030\001 \001("
  "\t\022\022\n\nuser_agent\030\002 \001(\t\"B\n\017TeamMemberAdded"
  "\022\017\n\007team_id\030\001 \001(\t\022\014\n\004role\030\002 \001(\t\022\020\n\010added"
  "_by\030\003 \001(\t*\231\001\n\021DocumentEventType\022\024\n\020DOCUM"
  "ENT_CREATED\020\000\022\024\n\020DOCUMENT_UPDATED\020\001\022\024\n\020D"
  "OCUMENT_DELETED\020\002\022\025\n\021DOCUMENT_ACCESSED\020\003"
  "\022\023\n\017DOCUMENT_TAGGED\020\004\022\026\n\022DOCUMENT_VERSIO"
  "NED\020\005*t\n\014LLMEventType\022\023\n\017LLM_PROMPT_SENT"
  "\020\000\022\031\n\025LLM_RESPONSE_RECEIVED\020\001\022\r\n\tLLM_ERR"
  "OR\020\002\022\020\n\014LLM_FEEDBACK\020\003\022\023\n\017LLM_TOKEN_USAG"
  "E\020\004*y\n\016AgentEventType\022\021\n\rAGENT_STARTED\020\000"
  "\022\030\n\024AGENT_STEP_COMPLETED\020\001\022\023\n\017AGENT_COMP"
  "LETED\020\002\022\020\n\014AGENT_FAILED\020\003\022\023\n\017AGENT_TOOL_"
  "USED\020\004*o\n\020SessionEventType\022\023\n\017SESSION_ST"
  "ARTED\020\000\022\021\n\rSESSION_ENDED\020\001\022\034\n\030SESSION_CO"
  "NTEXT_ACCESSED\020\002\022\025\n\021SESSION_HEARTBEAT\020\003*"
  "w\n\017SystemEventType\022\020\n\014HEALTH_CHECK\020\000\022\023\n\017"
  "METRIC_REPORTED\020\001\022\023\n\017ALERT_TRIGGERED\020\002\022\023"
  "\n\017SERVICE_STARTED\020\003\022\023\n\017SERVICE_STOPPED\020\004"
  "*t\n\021WorkflowEventType\022\026\n\022WORKFLOW_TRIGGE"
  "RED\020\000\022\032\n\026WORKFLOW_STEP_EXECUTED\020\001\022\026\n\022WOR"
  "KFLOW_COMPLETED\020\002\022\023\n\017WORKFLOW_FAILED\020\003*\355"
  "\001\n\rChatEventType\022\037\n\033CHAT_EVENT_TYPE_UNSP"
  "ECIFIED\020\000\022(\n$CHAT_EVENT_TYPE_CONVERSATIO"
  "N_CREATED\020\001\022 \n\034CHAT_EVENT_TYPE_MESSAGE_S"
  "ENT\020\002\022#\n\037CHAT_EVENT_TYPE_MESSAGE_UPDATED"
  "\020\003\022\"\n\036CHAT_EVENT_TYPE_TYPING_STARTED\020\004\022&"
  "\n\"CHAT_EVENT_TYPE_PARTICIPANT_JOINED\020\005*\234"
  "\001\n\016AudioEventType\022 \n\034AUDIO_EVENT_TYPE_UN"
  "SPECIFIED\020\000\022 \n\034AUDIO_EVENT_TYPE_TTS_STAR"
  "TED\020\001\022\"\n\036AUDIO_EVENT_TYPE_TTS_COMPLETED\020"
  "\002\022\"\n\036AUDIO_EVENT_TYPE_STT_COMPLETED\020\003*\223\001"
  "\n\rUserEventType\022\037\n\033USER_EVENT_TYPE_UNSPE"
  "CIFIED\020\000\022\033\n\027USER_EVENT_TYPE_CREATED\020\001\022\035\n"
  "\031USER_EVENT_TYPE_LOGGED_IN\020\002\022%\n!USER_EVE"
  "NT_TYPE_TEAM_MEMBER_ADDED\020\003b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cdc_5fevents_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_cdc_5fevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cdc_5fevents_2eproto = {
    false, false, 9715, descriptor_table_protodef_cdc_5fevents_2eproto,
    "cdc_events.proto",
    &descriptor_table_cdc_5fevents_2eproto_once, descriptor_table_cdc_5fevents_2eproto_deps, 2, 50,
    schemas, file_default_instances, TableStruct_cdc_5fevents_2eproto::offsets,
    file_level_metadata_cdc_5fevents_2eproto, file_level_enum_descriptors_cdc_5fevents_2eproto,
    file_level_service_descriptors_cdc_5fevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cdc_5fevents_2eproto_getter() {
  return &descriptor_table_cdc_5fevents_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cdc_5fevents_2eproto(&descriptor_table_cdc_5fevents_2eproto);
namespace unhinged {
namespace cdc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DocumentEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cdc_5fevents_2eproto);
  return file_level_enum_descriptors_cdc_5fevents_2eproto[0];
}
bool DocumentEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LLMEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cdc_5fevents_2eproto);
  return file_level_enum_descriptors_cdc_5fevents_2eproto[1];
}
bool LLMEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cdc_5fevents_2eproto);
  return file_level_enum_descriptors_cdc_5fevents_2eproto[2];
}
bool AgentEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cdc_5fevents_2eproto);
  return file_level_enum_descriptors_cdc_5fevents_2eproto[3];
}
bool SessionEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cdc_5fevents_2eproto);
  return file_level_enum_descriptors_cdc_5fevents_2eproto[4];
}
bool SystemEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkflowEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cdc_5fevents_2eproto);
  return file_level_enum_descriptors_cdc_5fevents_2eproto[5];
}
bool WorkflowEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cdc_5fevents_2eproto);
  return file_level_enum_descriptors_cdc_5fevents_2eproto[6];
}
bool ChatEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cdc_5fevents_2eproto);
  return file_level_enum_descriptors_cdc_5fevents_2eproto[7];
}
bool AudioEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cdc_5fevents_2eproto);
  return file_level_enum_descriptors_cdc_5fevents_2eproto[8];
}
bool UserEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UniversalEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& event_time(const UniversalEvent* msg);
  static const ::unhinged::cdc::DocumentEvent& document_event(const UniversalEvent* msg);
  static const ::unhinged::cdc::LLMEvent& llm_event(const UniversalEvent* msg);
  static const ::unhinged::cdc::AgentEvent& agent_event(const UniversalEvent* msg);
  static const ::unhinged::cdc::SessionEvent& session_event(const UniversalEvent* msg);
  static const ::unhinged::cdc::SystemEvent& system_event(const UniversalEvent* msg);
  static const ::unhinged::cdc::WorkflowEvent& workflow_event(const UniversalEvent* msg);
  static const ::unhinged::cdc::ChatEvent& chat_event(const UniversalEvent* msg);
  static const ::unhinged::cdc::AudioEvent& audio_event(const UniversalEvent* msg);
  static const ::unhinged::cdc::UserEvent& user_event(const UniversalEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const UniversalEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const UniversalEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UniversalEvent::_Internal::event_time(const UniversalEvent* msg) {
  return *msg->_impl_.event_time_;
}
const ::unhinged::cdc::DocumentEvent&
UniversalEvent::_Internal::document_event(const UniversalEvent* msg) {
  return *msg->_impl_.payload_.document_event_;
}
const ::unhinged::cdc::LLMEvent&
UniversalEvent::_Internal::llm_event(const UniversalEvent* msg) {
  return *msg->_impl_.payload_.llm_event_;
}
const ::unhinged::cdc::AgentEvent&
UniversalEvent::_Internal::agent_event(const UniversalEvent* msg) {
  return *msg->_impl_.payload_.agent_event_;
}
const ::unhinged::cdc::SessionEvent&
UniversalEvent::_Internal::session_event(const UniversalEvent* msg) {
  return *msg->_impl_.payload_.session_event_;
}
const ::unhinged::cdc::SystemEvent&
UniversalEvent::_Internal::system_event(const UniversalEvent* msg) {
  return *msg->_impl_.payload_.system_event_;
}
const ::unhinged::cdc::WorkflowEvent&
UniversalEvent::_Internal::workflow_event(const UniversalEvent* msg) {
  return *msg->_impl_.payload_.workflow_event_;
}
const ::unhinged::cdc::ChatEvent&
UniversalEvent::_Internal::chat_event(const UniversalEvent* msg) {
  return *msg->_impl_.payload_.chat_event_;
}
const ::unhinged::cdc::AudioEvent&
UniversalEvent::_Internal::audio_event(const UniversalEvent* msg) {
  return *msg->_impl_.payload_.audio_event_;
}
const ::unhinged::cdc::UserEvent&
UniversalEvent::_Internal::user_event(const UniversalEvent* msg) {
  return *msg->_impl_.payload_.user_event_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
UniversalEvent::_Internal::metadata(const UniversalEvent* msg) {
  return *msg->_impl_.metadata_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UniversalEvent::_Internal::expires_at(const UniversalEvent* msg) {
  return *msg->_impl_.expires_at_;
}
void UniversalEvent::clear_event_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.event_time_ != nullptr) {
    delete _impl_.event_time_;
  }
  _impl_.event_time_ = nullptr;
}
void UniversalEvent::set_allocated_document_event(::unhinged::cdc::DocumentEvent* document_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (document_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(document_event);
    if (message_arena != submessage_arena) {
      document_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_event, submessage_arena);
    }
    set_has_document_event();
    _impl_.payload_.document_event_ = document_event;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.UniversalEvent.document_event)
}
void UniversalEvent::set_allocated_llm_event(::unhinged::cdc::LLMEvent* llm_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (llm_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(llm_event);
    if (message_arena != submessage_arena) {
      llm_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, llm_event, submessage_arena);
    }
    set_has_llm_event();
    _impl_.payload_.llm_event_ = llm_event;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.UniversalEvent.llm_event)
}
void UniversalEvent::set_allocated_agent_event(::unhinged::cdc::AgentEvent* agent_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (agent_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(agent_event);
    if (message_arena != submessage_arena) {
      agent_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_event, submessage_arena);
    }
    set_has_agent_event();
    _impl_.payload_.agent_event_ = agent_event;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.UniversalEvent.agent_event)
}
void UniversalEvent::set_allocated_session_event(::unhinged::cdc::SessionEvent* session_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (session_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(session_event);
    if (message_arena != submessage_arena) {
      session_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_event, submessage_arena);
    }
    set_has_session_event();
    _impl_.payload_.session_event_ = session_event;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.UniversalEvent.session_event)
}
void UniversalEvent::set_allocated_system_event(::unhinged::cdc::SystemEvent* system_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (system_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(system_event);
    if (message_arena != submessage_arena) {
      system_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_event, submessage_arena);
    }
    set_has_system_event();
    _impl_.payload_.system_event_ = system_event;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.UniversalEvent.system_event)
}
void UniversalEvent::set_allocated_workflow_event(::unhinged::cdc::WorkflowEvent* workflow_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (workflow_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(workflow_event);
    if (message_arena != submessage_arena) {
      workflow_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow_event, submessage_arena);
    }
    set_has_workflow_event();
    _impl_.payload_.workflow_event_ = workflow_event;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.UniversalEvent.workflow_event)
}
void UniversalEvent::set_allocated_chat_event(::unhinged::cdc::ChatEvent* chat_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (chat_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chat_event);
    if (message_arena != submessage_arena) {
      chat_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_event, submessage_arena);
    }
    set_has_chat_event();
    _impl_.payload_.chat_event_ = chat_event;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.UniversalEvent.chat_event)
}
void UniversalEvent::set_allocated_audio_event(::unhinged::cdc::AudioEvent* audio_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (audio_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(audio_event);
    if (message_arena != submessage_arena) {
      audio_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_event, submessage_arena);
    }
    set_has_audio_event();
    _impl_.payload_.audio_event_ = audio_event;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.UniversalEvent.audio_event)
}
void UniversalEvent::set_allocated_user_event(::unhinged::cdc::UserEvent* user_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (user_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_event);
    if (message_arena != submessage_arena) {
      user_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_event, submessage_arena);
    }
    set_has_user_event();
    _impl_.payload_.user_event_ = user_event;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.UniversalEvent.user_event)
}
void UniversalEvent::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
void UniversalEvent::clear_expires_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
}
UniversalEvent::UniversalEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.UniversalEvent)
}
UniversalEvent::UniversalEvent(const UniversalEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UniversalEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.event_version_){}
    , decltype(_impl_.source_service_){}
    , decltype(_impl_.source_version_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.correlation_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.tenant_id_){}
    , decltype(_impl_.routing_key_){}
    , decltype(_impl_.event_time_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.expires_at_){nullptr}
    , decltype(_impl_.sequence_number_){}
    , decltype(_impl_.retry_count_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_type().empty()) {
    _this->_impl_.event_type_.Set(from._internal_event_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_version().empty()) {
    _this->_impl_.event_version_.Set(from._internal_event_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_service().empty()) {
    _this->_impl_.source_service_.Set(from._internal_source_service(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_version().empty()) {
    _this->_impl_.source_version_.Set(from._internal_source_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_id().empty()) {
    _this->_impl_.trace_id_.Set(from._internal_trace_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.correlation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.correlation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_correlation_id().empty()) {
    _this->_impl_.correlation_id_.Set(from._internal_correlation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tenant_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenant_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tenant_id().empty()) {
    _this->_impl_.tenant_id_.Set(from._internal_tenant_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.routing_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routing_key().empty()) {
    _this->_impl_.routing_key_.Set(from._internal_routing_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_event_time()) {
    _this->_impl_.event_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.event_time_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_expires_at()) {
    _this->_impl_.expires_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expires_at_);
  }
  ::memcpy(&_impl_.sequence_number_, &from._impl_.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retry_count_) -
    reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.retry_count_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kDocumentEvent: {
      _this->_internal_mutable_document_event()->::unhinged::cdc::DocumentEvent::MergeFrom(
          from._internal_document_event());
      break;
    }
    case kLlmEvent: {
      _this->_internal_mutable_llm_event()->::unhinged::cdc::LLMEvent::MergeFrom(
          from._internal_llm_event());
      break;
    }
    case kAgentEvent: {
      _this->_internal_mutable_agent_event()->::unhinged::cdc::AgentEvent::MergeFrom(
          from._internal_agent_event());
      break;
    }
    case kSessionEvent: {
      _this->_internal_mutable_session_event()->::unhinged::cdc::SessionEvent::MergeFrom(
          from._internal_session_event());
      break;
    }
    case kSystemEvent: {
      _this->_internal_mutable_system_event()->::unhinged::cdc::SystemEvent::MergeFrom(
          from._internal_system_event());
      break;
    }
    case kWorkflowEvent: {
      _this->_internal_mutable_workflow_event()->::unhinged::cdc::WorkflowEvent::MergeFrom(
          from._internal_workflow_event());
      break;
    }
    case kChatEvent: {
      _this->_internal_mutable_chat_event()->::unhinged::cdc::ChatEvent::MergeFrom(
          from._internal_chat_event());
      break;
    }
    case kAudioEvent: {
      _this->_internal_mutable_audio_event()->::unhinged::cdc::AudioEvent::MergeFrom(
          from._internal_audio_event());
      break;
    }
    case kUserEvent: {
      _this->_internal_mutable_user_event()->::unhinged::cdc::UserEvent::MergeFrom(
          from._internal_user_event());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.UniversalEvent)
}

inline void UniversalEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.event_version_){}
    , decltype(_impl_.source_service_){}
    , decltype(_impl_.source_version_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.correlation_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.tenant_id_){}
    , decltype(_impl_.routing_key_){}
    , decltype(_impl_.event_time_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.expires_at_){nullptr}
    , decltype(_impl_.sequence_number_){int64_t{0}}
    , decltype(_impl_.retry_count_){0}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.correlation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.correlation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tenant_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenant_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.routing_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_payload();
}

UniversalEvent::~UniversalEvent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.UniversalEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UniversalEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  _impl_.event_id_.Destroy();
  _impl_.event_type_.Destroy();
  _impl_.event_version_.Destroy();
  _impl_.source_service_.Destroy();
  _impl_.source_version_.Destroy();
  _impl_.trace_id_.Destroy();
  _impl_.correlation_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.tenant_id_.Destroy();
  _impl_.routing_key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.event_time_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.expires_at_;
  if (has_payload()) {
    clear_payload();
  }
}

void UniversalEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UniversalEvent::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.cdc.UniversalEvent)
  switch (payload_case()) {
    case kDocumentEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.document_event_;
      }
      break;
    }
    case kLlmEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.llm_event_;
      }
      break;
    }
    case kAgentEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.agent_event_;
      }
      break;
    }
    case kSessionEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.session_event_;
      }
      break;
    }
    case kSystemEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.system_event_;
      }
      break;
    }
    case kWorkflowEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.workflow_event_;
      }
      break;
    }
    case kChatEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.chat_event_;
      }
      break;
    }
    case kAudioEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.audio_event_;
      }
      break;
    }
    case kUserEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.user_event_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void UniversalEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.UniversalEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.event_id_.ClearToEmpty();
  _impl_.event_type_.ClearToEmpty();
  _impl_.event_version_.ClearToEmpty();
  _impl_.source_service_.ClearToEmpty();
  _impl_.source_version_.ClearToEmpty();
  _impl_.trace_id_.ClearToEmpty();
  _impl_.correlation_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.tenant_id_.ClearToEmpty();
  _impl_.routing_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.event_time_ != nullptr) {
    delete _impl_.event_time_;
  }
  _impl_.event_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
  ::memset(&_impl_.sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.retry_count_) -
      reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.retry_count_));
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UniversalEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UniversalEvent.event_id"));
        } else
          goto handle_unusual;
        continue;
      // string event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_event_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UniversalEvent.event_type"));
        } else
          goto handle_unusual;
        continue;
      // string event_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_event_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UniversalEvent.event_version"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp event_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sequence_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string source_service = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_source_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UniversalEvent.source_service"));
        } else
          goto handle_unusual;
        continue;
      // string source_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_source_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UniversalEvent.source_version"));
        } else
          goto handle_unusual;
        continue;
      // string trace_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UniversalEvent.trace_id"));
        } else
          goto handle_unusual;
        continue;
      // string correlation_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_correlation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UniversalEvent.correlation_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UniversalEvent.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UniversalEvent.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string tenant_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_tenant_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UniversalEvent.tenant_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.DocumentEvent document_event = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.LLMEvent llm_event = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_llm_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.AgentEvent agent_event = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SessionEvent session_event = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SystemEvent system_event = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.WorkflowEvent workflow_event = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.ChatEvent chat_event = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.AudioEvent audio_event = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.UserEvent user_event = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UniversalEvent.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string routing_key = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_routing_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UniversalEvent.routing_key"));
        } else
          goto handle_unusual;
        continue;
      // int32 retry_count = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_at = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UniversalEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.UniversalEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UniversalEvent.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_type().data(), static_cast<int>(this->_internal_event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UniversalEvent.event_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event_type(), target);
  }

  // string event_version = 3;
  if (!this->_internal_event_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_version().data(), static_cast<int>(this->_internal_event_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UniversalEvent.event_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_event_version(), target);
  }

  // .google.protobuf.Timestamp event_time = 4;
  if (this->_internal_has_event_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::event_time(this),
        _Internal::event_time(this).GetCachedSize(), target, stream);
  }

  // int64 sequence_number = 5;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_sequence_number(), target);
  }

  // string source_service = 6;
  if (!this->_internal_source_service().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_service().data(), static_cast<int>(this->_internal_source_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UniversalEvent.source_service");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_source_service(), target);
  }

  // string source_version = 7;
  if (!this->_internal_source_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_version().data(), static_cast<int>(this->_internal_source_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UniversalEvent.source_version");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_source_version(), target);
  }

  // string trace_id = 8;
  if (!this->_internal_trace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_id().data(), static_cast<int>(this->_internal_trace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UniversalEvent.trace_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_trace_id(), target);
  }

  // string correlation_id = 9;
  if (!this->_internal_correlation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_correlation_id().data(), static_cast<int>(this->_internal_correlation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UniversalEvent.correlation_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_correlation_id(), target);
  }

  // string user_id = 10;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UniversalEvent.user_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_user_id(), target);
  }

  // string session_id = 11;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UniversalEvent.session_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_session_id(), target);
  }

  // string tenant_id = 12;
  if (!this->_internal_tenant_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tenant_id().data(), static_cast<int>(this->_internal_tenant_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UniversalEvent.tenant_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_tenant_id(), target);
  }

  // .unhinged.cdc.DocumentEvent document_event = 20;
  if (_internal_has_document_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::document_event(this),
        _Internal::document_event(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.LLMEvent llm_event = 21;
  if (_internal_has_llm_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::llm_event(this),
        _Internal::llm_event(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.AgentEvent agent_event = 22;
  if (_internal_has_agent_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::agent_event(this),
        _Internal::agent_event(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.SessionEvent session_event = 23;
  if (_internal_has_session_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::session_event(this),
        _Internal::session_event(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.SystemEvent system_event = 24;
  if (_internal_has_system_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::system_event(this),
        _Internal::system_event(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.WorkflowEvent workflow_event = 25;
  if (_internal_has_workflow_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::workflow_event(this),
        _Internal::workflow_event(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.ChatEvent chat_event = 26;
  if (_internal_has_chat_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::chat_event(this),
        _Internal::chat_event(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.AudioEvent audio_event = 27;
  if (_internal_has_audio_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::audio_event(this),
        _Internal::audio_event(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.UserEvent user_event = 28;
  if (_internal_has_user_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::user_event(this),
        _Internal::user_event(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 30;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // repeated string tags = 31;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UniversalEvent.tags");
    target = stream->WriteString(31, s, target);
  }

  // string routing_key = 32;
  if (!this->_internal_routing_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_routing_key().data(), static_cast<int>(this->_internal_routing_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UniversalEvent.routing_key");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_routing_key(), target);
  }

  // int32 retry_count = 33;
  if (this->_internal_retry_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_retry_count(), target);
  }

  // .google.protobuf.Timestamp expires_at = 34;
  if (this->_internal_has_expires_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::expires_at(this),
        _Internal::expires_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.UniversalEvent)
  return target;
}

size_t UniversalEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.UniversalEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 31;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_type());
  }

  // string event_version = 3;
  if (!this->_internal_event_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_version());
  }

  // string source_service = 6;
  if (!this->_internal_source_service().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_service());
  }

  // string source_version = 7;
  if (!this->_internal_source_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_version());
  }

  // string trace_id = 8;
  if (!this->_internal_trace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_id());
  }

  // string correlation_id = 9;
  if (!this->_internal_correlation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_correlation_id());
  }

  // string user_id = 10;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string session_id = 11;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string tenant_id = 12;
  if (!this->_internal_tenant_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tenant_id());
  }

  // string routing_key = 32;
  if (!this->_internal_routing_key().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_routing_key());
  }

  // .google.protobuf.Timestamp event_time = 4;
  if (this->_internal_has_event_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_time_);
  }

  // .google.protobuf.Struct metadata = 30;
  if (this->_internal_has_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .google.protobuf.Timestamp expires_at = 34;
  if (this->_internal_has_expires_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expires_at_);
  }

  // int64 sequence_number = 5;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequence_number());
  }

  // int32 retry_count = 33;
  if (this->_internal_retry_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_retry_count());
  }

  switch (payload_case()) {
    // .unhinged.cdc.DocumentEvent document_event = 20;
    case kDocumentEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.document_event_);
      break;
    }
    // .unhinged.cdc.LLMEvent llm_event = 21;
    case kLlmEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.llm_event_);
      break;
    }
    // .unhinged.cdc.AgentEvent agent_event = 22;
    case kAgentEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.agent_event_);
      break;
    }
    // .unhinged.cdc.SessionEvent session_event = 23;
    case kSessionEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.session_event_);
      break;
    }
    // .unhinged.cdc.SystemEvent system_event = 24;
    case kSystemEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.system_event_);
      break;
    }
    // .unhinged.cdc.WorkflowEvent workflow_event = 25;
    case kWorkflowEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.workflow_event_);
      break;
    }
    // .unhinged.cdc.ChatEvent chat_event = 26;
    case kChatEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.chat_event_);
      break;
    }
    // .unhinged.cdc.AudioEvent audio_event = 27;
    case kAudioEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.audio_event_);
      break;
    }
    // .unhinged.cdc.UserEvent user_event = 28;
    case kUserEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.user_event_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UniversalEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UniversalEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UniversalEvent::GetClassData() const { return &_class_data_; }


void UniversalEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UniversalEvent*>(&to_msg);
  auto& from = static_cast<const UniversalEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.UniversalEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (!from._internal_event_type().empty()) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (!from._internal_event_version().empty()) {
    _this->_internal_set_event_version(from._internal_event_version());
  }
  if (!from._internal_source_service().empty()) {
    _this->_internal_set_source_service(from._internal_source_service());
  }
  if (!from._internal_source_version().empty()) {
    _this->_internal_set_source_version(from._internal_source_version());
  }
  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  if (!from._internal_correlation_id().empty()) {
    _this->_internal_set_correlation_id(from._internal_correlation_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_tenant_id().empty()) {
    _this->_internal_set_tenant_id(from._internal_tenant_id());
  }
  if (!from._internal_routing_key().empty()) {
    _this->_internal_set_routing_key(from._internal_routing_key());
  }
  if (from._internal_has_event_time()) {
    _this->_internal_mutable_event_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_event_time());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_expires_at()) {
    _this->_internal_mutable_expires_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expires_at());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from._internal_retry_count() != 0) {
    _this->_internal_set_retry_count(from._internal_retry_count());
  }
  switch (from.payload_case()) {
    case kDocumentEvent: {
      _this->_internal_mutable_document_event()->::unhinged::cdc::DocumentEvent::MergeFrom(
          from._internal_document_event());
      break;
    }
    case kLlmEvent: {
      _this->_internal_mutable_llm_event()->::unhinged::cdc::LLMEvent::MergeFrom(
          from._internal_llm_event());
      break;
    }
    case kAgentEvent: {
      _this->_internal_mutable_agent_event()->::unhinged::cdc::AgentEvent::MergeFrom(
          from._internal_agent_event());
      break;
    }
    case kSessionEvent: {
      _this->_internal_mutable_session_event()->::unhinged::cdc::SessionEvent::MergeFrom(
          from._internal_session_event());
      break;
    }
    case kSystemEvent: {
      _this->_internal_mutable_system_event()->::unhinged::cdc::SystemEvent::MergeFrom(
          from._internal_system_event());
      break;
    }
    case kWorkflowEvent: {
      _this->_internal_mutable_workflow_event()->::unhinged::cdc::WorkflowEvent::MergeFrom(
          from._internal_workflow_event());
      break;
    }
    case kChatEvent: {
      _this->_internal_mutable_chat_event()->::unhinged::cdc::ChatEvent::MergeFrom(
          from._internal_chat_event());
      break;
    }
    case kAudioEvent: {
      _this->_internal_mutable_audio_event()->::unhinged::cdc::AudioEvent::MergeFrom(
          from._internal_audio_event());
      break;
    }
    case kUserEvent: {
      _this->_internal_mutable_user_event()->::unhinged::cdc::UserEvent::MergeFrom(
          from._internal_user_event());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UniversalEvent::CopyFrom(const UniversalEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.UniversalEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniversalEvent::IsInitialized() const {
  return true;
}

void UniversalEvent::InternalSwap(UniversalEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_type_, lhs_arena,
      &other->_impl_.event_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_version_, lhs_arena,
      &other->_impl_.event_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_service_, lhs_arena,
      &other->_impl_.source_service_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_version_, lhs_arena,
      &other->_impl_.source_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trace_id_, lhs_arena,
      &other->_impl_.trace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.correlation_id_, lhs_arena,
      &other->_impl_.correlation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tenant_id_, lhs_arena,
      &other->_impl_.tenant_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.routing_key_, lhs_arena,
      &other->_impl_.routing_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UniversalEvent, _impl_.retry_count_)
      + sizeof(UniversalEvent::_impl_.retry_count_)
      - PROTOBUF_FIELD_OFFSET(UniversalEvent, _impl_.event_time_)>(
          reinterpret_cast<char*>(&_impl_.event_time_),
          reinterpret_cast<char*>(&other->_impl_.event_time_));
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniversalEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[0]);
}

// ===================================================================

class DocumentEvent::_Internal {
 public:
  static const ::unhinged::cdc::DocumentCreated& created(const DocumentEvent* msg);
  static const ::unhinged::cdc::DocumentUpdated& updated(const DocumentEvent* msg);
  static const ::unhinged::cdc::DocumentDeleted& deleted(const DocumentEvent* msg);
  static const ::unhinged::cdc::DocumentAccessed& accessed(const DocumentEvent* msg);
  static const ::unhinged::cdc::DocumentTagged& tagged(const DocumentEvent* msg);
  static const ::unhinged::cdc::DocumentVersioned& versioned(const DocumentEvent* msg);
};

const ::unhinged::cdc::DocumentCreated&
DocumentEvent::_Internal::created(const DocumentEvent* msg) {
  return *msg->_impl_.event_data_.created_;
}
const ::unhinged::cdc::DocumentUpdated&
DocumentEvent::_Internal::updated(const DocumentEvent* msg) {
  return *msg->_impl_.event_data_.updated_;
}
const ::unhinged::cdc::DocumentDeleted&
DocumentEvent::_Internal::deleted(const DocumentEvent* msg) {
  return *msg->_impl_.event_data_.deleted_;
}
const ::unhinged::cdc::DocumentAccessed&
DocumentEvent::_Internal::accessed(const DocumentEvent* msg) {
  return *msg->_impl_.event_data_.accessed_;
}
const ::unhinged::cdc::DocumentTagged&
DocumentEvent::_Internal::tagged(const DocumentEvent* msg) {
  return *msg->_impl_.event_data_.tagged_;
}
const ::unhinged::cdc::DocumentVersioned&
DocumentEvent::_Internal::versioned(const DocumentEvent* msg) {
  return *msg->_impl_.event_data_.versioned_;
}
void DocumentEvent::set_allocated_created(::unhinged::cdc::DocumentCreated* created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(created);
    if (message_arena != submessage_arena) {
      created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    set_has_created();
    _impl_.event_data_.created_ = created;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.DocumentEvent.created)
}
void DocumentEvent::set_allocated_updated(::unhinged::cdc::DocumentUpdated* updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(updated);
    if (message_arena != submessage_arena) {
      updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated, submessage_arena);
    }
    set_has_updated();
    _impl_.event_data_.updated_ = updated;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.DocumentEvent.updated)
}
void DocumentEvent::set_allocated_deleted(::unhinged::cdc::DocumentDeleted* deleted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (deleted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(deleted);
    if (message_arena != submessage_arena) {
      deleted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deleted, submessage_arena);
    }
    set_has_deleted();
    _impl_.event_data_.deleted_ = deleted;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.DocumentEvent.deleted)
}
void DocumentEvent::set_allocated_accessed(::unhinged::cdc::DocumentAccessed* accessed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (accessed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(accessed);
    if (message_arena != submessage_arena) {
      accessed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessed, submessage_arena);
    }
    set_has_accessed();
    _impl_.event_data_.accessed_ = accessed;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.DocumentEvent.accessed)
}
void DocumentEvent::set_allocated_tagged(::unhinged::cdc::DocumentTagged* tagged) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (tagged) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tagged);
    if (message_arena != submessage_arena) {
      tagged = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tagged, submessage_arena);
    }
    set_has_tagged();
    _impl_.event_data_.tagged_ = tagged;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.DocumentEvent.tagged)
}
void DocumentEvent::set_allocated_versioned(::unhinged::cdc::DocumentVersioned* versioned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (versioned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(versioned);
    if (message_arena != submessage_arena) {
      versioned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, versioned, submessage_arena);
    }
    set_has_versioned();
    _impl_.event_data_.versioned_ = versioned;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.DocumentEvent.versioned)
}
DocumentEvent::DocumentEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.DocumentEvent)
}
DocumentEvent::DocumentEvent(const DocumentEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.document_uuid_){}
    , decltype(_impl_.document_type_){}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_uuid().empty()) {
    _this->_impl_.document_uuid_.Set(from._internal_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.document_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_type().empty()) {
    _this->_impl_.document_type_.Set(from._internal_document_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_().empty()) {
    _this->_impl_.namespace__.Set(from._internal_namespace_(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_type_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.event_type_));
  clear_has_event_data();
  switch (from.event_data_case()) {
    case kCreated: {
      _this->_internal_mutable_created()->::unhinged::cdc::DocumentCreated::MergeFrom(
          from._internal_created());
      break;
    }
    case kUpdated: {
      _this->_internal_mutable_updated()->::unhinged::cdc::DocumentUpdated::MergeFrom(
          from._internal_updated());
      break;
    }
    case kDeleted: {
      _this->_internal_mutable_deleted()->::unhinged::cdc::DocumentDeleted::MergeFrom(
          from._internal_deleted());
      break;
    }
    case kAccessed: {
      _this->_internal_mutable_accessed()->::unhinged::cdc::DocumentAccessed::MergeFrom(
          from._internal_accessed());
      break;
    }
    case kTagged: {
      _this->_internal_mutable_tagged()->::unhinged::cdc::DocumentTagged::MergeFrom(
          from._internal_tagged());
      break;
    }
    case kVersioned: {
      _this->_internal_mutable_versioned()->::unhinged::cdc::DocumentVersioned::MergeFrom(
          from._internal_versioned());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.DocumentEvent)
}

inline void DocumentEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.document_uuid_){}
    , decltype(_impl_.document_type_){}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.document_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_event_data();
}

DocumentEvent::~DocumentEvent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.DocumentEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_uuid_.Destroy();
  _impl_.document_type_.Destroy();
  _impl_.namespace__.Destroy();
  if (has_event_data()) {
    clear_event_data();
  }
}

void DocumentEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentEvent::clear_event_data() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.cdc.DocumentEvent)
  switch (event_data_case()) {
    case kCreated: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.created_;
      }
      break;
    }
    case kUpdated: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.updated_;
      }
      break;
    }
    case kDeleted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.deleted_;
      }
      break;
    }
    case kAccessed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.accessed_;
      }
      break;
    }
    case kTagged: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.tagged_;
      }
      break;
    }
    case kVersioned: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.versioned_;
      }
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_DATA_NOT_SET;
}


void DocumentEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.DocumentEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_uuid_.ClearToEmpty();
  _impl_.document_type_.ClearToEmpty();
  _impl_.namespace__.ClearToEmpty();
  ::memset(&_impl_.version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.event_type_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.event_type_));
  clear_event_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentEvent.document_uuid"));
        } else
          goto handle_unusual;
        continue;
      // string document_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_document_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentEvent.document_type"));
        } else
          goto handle_unusual;
        continue;
      // string namespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentEvent.namespace"));
        } else
          goto handle_unusual;
        continue;
      // int32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.DocumentEventType event_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::unhinged::cdc::DocumentEventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.DocumentCreated created = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_created(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.DocumentUpdated updated = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.DocumentDeleted deleted = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.DocumentAccessed accessed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_accessed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.DocumentTagged tagged = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tagged(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.DocumentVersioned versioned = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_versioned(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.DocumentEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_uuid().data(), static_cast<int>(this->_internal_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentEvent.document_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_uuid(), target);
  }

  // string document_type = 2;
  if (!this->_internal_document_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_type().data(), static_cast<int>(this->_internal_document_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentEvent.document_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_document_type(), target);
  }

  // string namespace = 3;
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentEvent.namespace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_namespace_(), target);
  }

  // int32 version = 4;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_version(), target);
  }

  // .unhinged.cdc.DocumentEventType event_type = 5;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_event_type(), target);
  }

  // .unhinged.cdc.DocumentCreated created = 10;
  if (_internal_has_created()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::created(this),
        _Internal::created(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.DocumentUpdated updated = 11;
  if (_internal_has_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::updated(this),
        _Internal::updated(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.DocumentDeleted deleted = 12;
  if (_internal_has_deleted()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::deleted(this),
        _Internal::deleted(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.DocumentAccessed accessed = 13;
  if (_internal_has_accessed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::accessed(this),
        _Internal::accessed(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.DocumentTagged tagged = 14;
  if (_internal_has_tagged()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tagged(this),
        _Internal::tagged(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.DocumentVersioned versioned = 15;
  if (_internal_has_versioned()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::versioned(this),
        _Internal::versioned(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.DocumentEvent)
  return target;
}

size_t DocumentEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.DocumentEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_uuid());
  }

  // string document_type = 2;
  if (!this->_internal_document_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_type());
  }

  // string namespace = 3;
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // int32 version = 4;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // .unhinged.cdc.DocumentEventType event_type = 5;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  switch (event_data_case()) {
    // .unhinged.cdc.DocumentCreated created = 10;
    case kCreated: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.created_);
      break;
    }
    // .unhinged.cdc.DocumentUpdated updated = 11;
    case kUpdated: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.updated_);
      break;
    }
    // .unhinged.cdc.DocumentDeleted deleted = 12;
    case kDeleted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.deleted_);
      break;
    }
    // .unhinged.cdc.DocumentAccessed accessed = 13;
    case kAccessed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.accessed_);
      break;
    }
    // .unhinged.cdc.DocumentTagged tagged = 14;
    case kTagged: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.tagged_);
      break;
    }
    // .unhinged.cdc.DocumentVersioned versioned = 15;
    case kVersioned: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.versioned_);
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentEvent::GetClassData() const { return &_class_data_; }


void DocumentEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentEvent*>(&to_msg);
  auto& from = static_cast<const DocumentEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.DocumentEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_document_uuid().empty()) {
    _this->_internal_set_document_uuid(from._internal_document_uuid());
  }
  if (!from._internal_document_type().empty()) {
    _this->_internal_set_document_type(from._internal_document_type());
  }
  if (!from._internal_namespace_().empty()) {
    _this->_internal_set_namespace_(from._internal_namespace_());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_event_type() != 0) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  switch (from.event_data_case()) {
    case kCreated: {
      _this->_internal_mutable_created()->::unhinged::cdc::DocumentCreated::MergeFrom(
          from._internal_created());
      break;
    }
    case kUpdated: {
      _this->_internal_mutable_updated()->::unhinged::cdc::DocumentUpdated::MergeFrom(
          from._internal_updated());
      break;
    }
    case kDeleted: {
      _this->_internal_mutable_deleted()->::unhinged::cdc::DocumentDeleted::MergeFrom(
          from._internal_deleted());
      break;
    }
    case kAccessed: {
      _this->_internal_mutable_accessed()->::unhinged::cdc::DocumentAccessed::MergeFrom(
          from._internal_accessed());
      break;
    }
    case kTagged: {
      _this->_internal_mutable_tagged()->::unhinged::cdc::DocumentTagged::MergeFrom(
          from._internal_tagged());
      break;
    }
    case kVersioned: {
      _this->_internal_mutable_versioned()->::unhinged::cdc::DocumentVersioned::MergeFrom(
          from._internal_versioned());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentEvent::CopyFrom(const DocumentEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.DocumentEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentEvent::IsInitialized() const {
  return true;
}

void DocumentEvent::InternalSwap(DocumentEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_uuid_, lhs_arena,
      &other->_impl_.document_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_type_, lhs_arena,
      &other->_impl_.document_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace__, lhs_arena,
      &other->_impl_.namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentEvent, _impl_.event_type_)
      + sizeof(DocumentEvent::_impl_.event_type_)
      - PROTOBUF_FIELD_OFFSET(DocumentEvent, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
  swap(_impl_.event_data_, other->_impl_.event_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[1]);
}

// ===================================================================

class DocumentCreated::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& document_metadata(const DocumentCreated* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
DocumentCreated::_Internal::document_metadata(const DocumentCreated* msg) {
  return *msg->_impl_.document_metadata_;
}
void DocumentCreated::clear_document_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.document_metadata_ != nullptr) {
    delete _impl_.document_metadata_;
  }
  _impl_.document_metadata_ = nullptr;
}
DocumentCreated::DocumentCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.DocumentCreated)
}
DocumentCreated::DocumentCreated(const DocumentCreated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentCreated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.document_name_){}
    , decltype(_impl_.created_by_){}
    , decltype(_impl_.created_by_type_){}
    , decltype(_impl_.document_metadata_){nullptr}
    , decltype(_impl_.document_size_bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_name().empty()) {
    _this->_impl_.document_name_.Set(from._internal_document_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_by().empty()) {
    _this->_impl_.created_by_.Set(from._internal_created_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.created_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_by_type().empty()) {
    _this->_impl_.created_by_type_.Set(from._internal_created_by_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_document_metadata()) {
    _this->_impl_.document_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.document_metadata_);
  }
  _this->_impl_.document_size_bytes_ = from._impl_.document_size_bytes_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.DocumentCreated)
}

inline void DocumentCreated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.document_name_){}
    , decltype(_impl_.created_by_){}
    , decltype(_impl_.created_by_type_){}
    , decltype(_impl_.document_metadata_){nullptr}
    , decltype(_impl_.document_size_bytes_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.document_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentCreated::~DocumentCreated() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.DocumentCreated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentCreated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_name_.Destroy();
  _impl_.created_by_.Destroy();
  _impl_.created_by_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.document_metadata_;
}

void DocumentCreated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentCreated::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.DocumentCreated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_name_.ClearToEmpty();
  _impl_.created_by_.ClearToEmpty();
  _impl_.created_by_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.document_metadata_ != nullptr) {
    delete _impl_.document_metadata_;
  }
  _impl_.document_metadata_ = nullptr;
  _impl_.document_size_bytes_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentCreated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentCreated.document_name"));
        } else
          goto handle_unusual;
        continue;
      // string created_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_created_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentCreated.created_by"));
        } else
          goto handle_unusual;
        continue;
      // string created_by_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_created_by_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentCreated.created_by_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct document_metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 document_size_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.document_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentCreated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.DocumentCreated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_name = 1;
  if (!this->_internal_document_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_name().data(), static_cast<int>(this->_internal_document_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentCreated.document_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_name(), target);
  }

  // string created_by = 2;
  if (!this->_internal_created_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_by().data(), static_cast<int>(this->_internal_created_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentCreated.created_by");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_created_by(), target);
  }

  // string created_by_type = 3;
  if (!this->_internal_created_by_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_by_type().data(), static_cast<int>(this->_internal_created_by_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentCreated.created_by_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_created_by_type(), target);
  }

  // .google.protobuf.Struct document_metadata = 4;
  if (this->_internal_has_document_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::document_metadata(this),
        _Internal::document_metadata(this).GetCachedSize(), target, stream);
  }

  // int64 document_size_bytes = 5;
  if (this->_internal_document_size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_document_size_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.DocumentCreated)
  return target;
}

size_t DocumentCreated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.DocumentCreated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document_name = 1;
  if (!this->_internal_document_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_name());
  }

  // string created_by = 2;
  if (!this->_internal_created_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_by());
  }

  // string created_by_type = 3;
  if (!this->_internal_created_by_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_by_type());
  }

  // .google.protobuf.Struct document_metadata = 4;
  if (this->_internal_has_document_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_metadata_);
  }

  // int64 document_size_bytes = 5;
  if (this->_internal_document_size_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_document_size_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentCreated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentCreated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentCreated::GetClassData() const { return &_class_data_; }


void DocumentCreated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentCreated*>(&to_msg);
  auto& from = static_cast<const DocumentCreated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.DocumentCreated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_document_name().empty()) {
    _this->_internal_set_document_name(from._internal_document_name());
  }
  if (!from._internal_created_by().empty()) {
    _this->_internal_set_created_by(from._internal_created_by());
  }
  if (!from._internal_created_by_type().empty()) {
    _this->_internal_set_created_by_type(from._internal_created_by_type());
  }
  if (from._internal_has_document_metadata()) {
    _this->_internal_mutable_document_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_document_metadata());
  }
  if (from._internal_document_size_bytes() != 0) {
    _this->_internal_set_document_size_bytes(from._internal_document_size_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentCreated::CopyFrom(const DocumentCreated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.DocumentCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentCreated::IsInitialized() const {
  return true;
}

void DocumentCreated::InternalSwap(DocumentCreated* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_name_, lhs_arena,
      &other->_impl_.document_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.created_by_, lhs_arena,
      &other->_impl_.created_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.created_by_type_, lhs_arena,
      &other->_impl_.created_by_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentCreated, _impl_.document_size_bytes_)
      + sizeof(DocumentCreated::_impl_.document_size_bytes_)
      - PROTOBUF_FIELD_OFFSET(DocumentCreated, _impl_.document_metadata_)>(
          reinterpret_cast<char*>(&_impl_.document_metadata_),
          reinterpret_cast<char*>(&other->_impl_.document_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentCreated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[2]);
}

// ===================================================================

class DocumentUpdated::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& changes(const DocumentUpdated* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
DocumentUpdated::_Internal::changes(const DocumentUpdated* msg) {
  return *msg->_impl_.changes_;
}
void DocumentUpdated::clear_changes() {
  if (GetArenaForAllocation() == nullptr && _impl_.changes_ != nullptr) {
    delete _impl_.changes_;
  }
  _impl_.changes_ = nullptr;
}
DocumentUpdated::DocumentUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.DocumentUpdated)
}
DocumentUpdated::DocumentUpdated(const DocumentUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentUpdated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.changed_fields_){from._impl_.changed_fields_}
    , decltype(_impl_.updated_by_){}
    , decltype(_impl_.updated_by_type_){}
    , decltype(_impl_.changes_){nullptr}
    , decltype(_impl_.previous_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.updated_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updated_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updated_by().empty()) {
    _this->_impl_.updated_by_.Set(from._internal_updated_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.updated_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updated_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updated_by_type().empty()) {
    _this->_impl_.updated_by_type_.Set(from._internal_updated_by_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_changes()) {
    _this->_impl_.changes_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.changes_);
  }
  _this->_impl_.previous_version_ = from._impl_.previous_version_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.DocumentUpdated)
}

inline void DocumentUpdated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.changed_fields_){arena}
    , decltype(_impl_.updated_by_){}
    , decltype(_impl_.updated_by_type_){}
    , decltype(_impl_.changes_){nullptr}
    , decltype(_impl_.previous_version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.updated_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updated_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updated_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updated_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentUpdated::~DocumentUpdated() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.DocumentUpdated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.changed_fields_.~RepeatedPtrField();
  _impl_.updated_by_.Destroy();
  _impl_.updated_by_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.changes_;
}

void DocumentUpdated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.DocumentUpdated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.changed_fields_.Clear();
  _impl_.updated_by_.ClearToEmpty();
  _impl_.updated_by_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.changes_ != nullptr) {
    delete _impl_.changes_;
  }
  _impl_.changes_ = nullptr;
  _impl_.previous_version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentUpdated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 previous_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.previous_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string updated_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_updated_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentUpdated.updated_by"));
        } else
          goto handle_unusual;
        continue;
      // string updated_by_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_updated_by_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentUpdated.updated_by_type"));
        } else
          goto handle_unusual;
        continue;
      // repeated string changed_fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_changed_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentUpdated.changed_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct changes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_changes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentUpdated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.DocumentUpdated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 previous_version = 1;
  if (this->_internal_previous_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_previous_version(), target);
  }

  // string updated_by = 2;
  if (!this->_internal_updated_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_by().data(), static_cast<int>(this->_internal_updated_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentUpdated.updated_by");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_updated_by(), target);
  }

  // string updated_by_type = 3;
  if (!this->_internal_updated_by_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_by_type().data(), static_cast<int>(this->_internal_updated_by_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentUpdated.updated_by_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_updated_by_type(), target);
  }

  // repeated string changed_fields = 4;
  for (int i = 0, n = this->_internal_changed_fields_size(); i < n; i++) {
    const auto& s = this->_internal_changed_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentUpdated.changed_fields");
    target = stream->WriteString(4, s, target);
  }

  // .google.protobuf.Struct changes = 5;
  if (this->_internal_has_changes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::changes(this),
        _Internal::changes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.DocumentUpdated)
  return target;
}

size_t DocumentUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.DocumentUpdated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string changed_fields = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.changed_fields_.size());
  for (int i = 0, n = _impl_.changed_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.changed_fields_.Get(i));
  }

  // string updated_by = 2;
  if (!this->_internal_updated_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_by());
  }

  // string updated_by_type = 3;
  if (!this->_internal_updated_by_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_by_type());
  }

  // .google.protobuf.Struct changes = 5;
  if (this->_internal_has_changes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changes_);
  }

  // int32 previous_version = 1;
  if (this->_internal_previous_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_previous_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentUpdated::GetClassData() const { return &_class_data_; }


void DocumentUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentUpdated*>(&to_msg);
  auto& from = static_cast<const DocumentUpdated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.DocumentUpdated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.changed_fields_.MergeFrom(from._impl_.changed_fields_);
  if (!from._internal_updated_by().empty()) {
    _this->_internal_set_updated_by(from._internal_updated_by());
  }
  if (!from._internal_updated_by_type().empty()) {
    _this->_internal_set_updated_by_type(from._internal_updated_by_type());
  }
  if (from._internal_has_changes()) {
    _this->_internal_mutable_changes()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_changes());
  }
  if (from._internal_previous_version() != 0) {
    _this->_internal_set_previous_version(from._internal_previous_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentUpdated::CopyFrom(const DocumentUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.DocumentUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentUpdated::IsInitialized() const {
  return true;
}

void DocumentUpdated::InternalSwap(DocumentUpdated* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.changed_fields_.InternalSwap(&other->_impl_.changed_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.updated_by_, lhs_arena,
      &other->_impl_.updated_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.updated_by_type_, lhs_arena,
      &other->_impl_.updated_by_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentUpdated, _impl_.previous_version_)
      + sizeof(DocumentUpdated::_impl_.previous_version_)
      - PROTOBUF_FIELD_OFFSET(DocumentUpdated, _impl_.changes_)>(
          reinterpret_cast<char*>(&_impl_.changes_),
          reinterpret_cast<char*>(&other->_impl_.changes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentUpdated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[3]);
}

// ===================================================================

class DocumentDeleted::_Internal {
 public:
};

DocumentDeleted::DocumentDeleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.DocumentDeleted)
}
DocumentDeleted::DocumentDeleted(const DocumentDeleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentDeleted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deleted_by_){}
    , decltype(_impl_.deleted_by_type_){}
    , decltype(_impl_.deletion_reason_){}
    , decltype(_impl_.versions_deleted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deleted_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deleted_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deleted_by().empty()) {
    _this->_impl_.deleted_by_.Set(from._internal_deleted_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deleted_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deleted_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deleted_by_type().empty()) {
    _this->_impl_.deleted_by_type_.Set(from._internal_deleted_by_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deletion_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deletion_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deletion_reason().empty()) {
    _this->_impl_.deletion_reason_.Set(from._internal_deletion_reason(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.versions_deleted_ = from._impl_.versions_deleted_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.DocumentDeleted)
}

inline void DocumentDeleted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deleted_by_){}
    , decltype(_impl_.deleted_by_type_){}
    , decltype(_impl_.deletion_reason_){}
    , decltype(_impl_.versions_deleted_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deleted_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deleted_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deleted_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deleted_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deletion_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deletion_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentDeleted::~DocumentDeleted() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.DocumentDeleted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentDeleted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deleted_by_.Destroy();
  _impl_.deleted_by_type_.Destroy();
  _impl_.deletion_reason_.Destroy();
}

void DocumentDeleted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentDeleted::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.DocumentDeleted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deleted_by_.ClearToEmpty();
  _impl_.deleted_by_type_.ClearToEmpty();
  _impl_.deletion_reason_.ClearToEmpty();
  _impl_.versions_deleted_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentDeleted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deleted_by = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deleted_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentDeleted.deleted_by"));
        } else
          goto handle_unusual;
        continue;
      // string deleted_by_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deleted_by_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentDeleted.deleted_by_type"));
        } else
          goto handle_unusual;
        continue;
      // int32 versions_deleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.versions_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deletion_reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_deletion_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentDeleted.deletion_reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentDeleted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.DocumentDeleted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string deleted_by = 1;
  if (!this->_internal_deleted_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deleted_by().data(), static_cast<int>(this->_internal_deleted_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentDeleted.deleted_by");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deleted_by(), target);
  }

  // string deleted_by_type = 2;
  if (!this->_internal_deleted_by_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deleted_by_type().data(), static_cast<int>(this->_internal_deleted_by_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentDeleted.deleted_by_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deleted_by_type(), target);
  }

  // int32 versions_deleted = 3;
  if (this->_internal_versions_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_versions_deleted(), target);
  }

  // string deletion_reason = 4;
  if (!this->_internal_deletion_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deletion_reason().data(), static_cast<int>(this->_internal_deletion_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentDeleted.deletion_reason");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_deletion_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.DocumentDeleted)
  return target;
}

size_t DocumentDeleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.DocumentDeleted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deleted_by = 1;
  if (!this->_internal_deleted_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deleted_by());
  }

  // string deleted_by_type = 2;
  if (!this->_internal_deleted_by_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deleted_by_type());
  }

  // string deletion_reason = 4;
  if (!this->_internal_deletion_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deletion_reason());
  }

  // int32 versions_deleted = 3;
  if (this->_internal_versions_deleted() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_versions_deleted());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentDeleted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentDeleted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentDeleted::GetClassData() const { return &_class_data_; }


void DocumentDeleted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentDeleted*>(&to_msg);
  auto& from = static_cast<const DocumentDeleted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.DocumentDeleted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deleted_by().empty()) {
    _this->_internal_set_deleted_by(from._internal_deleted_by());
  }
  if (!from._internal_deleted_by_type().empty()) {
    _this->_internal_set_deleted_by_type(from._internal_deleted_by_type());
  }
  if (!from._internal_deletion_reason().empty()) {
    _this->_internal_set_deletion_reason(from._internal_deletion_reason());
  }
  if (from._internal_versions_deleted() != 0) {
    _this->_internal_set_versions_deleted(from._internal_versions_deleted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentDeleted::CopyFrom(const DocumentDeleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.DocumentDeleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentDeleted::IsInitialized() const {
  return true;
}

void DocumentDeleted::InternalSwap(DocumentDeleted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deleted_by_, lhs_arena,
      &other->_impl_.deleted_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deleted_by_type_, lhs_arena,
      &other->_impl_.deleted_by_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deletion_reason_, lhs_arena,
      &other->_impl_.deletion_reason_, rhs_arena
  );
  swap(_impl_.versions_deleted_, other->_impl_.versions_deleted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentDeleted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[4]);
}

// ===================================================================

class DocumentAccessed::_Internal {
 public:
};

DocumentAccessed::DocumentAccessed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.DocumentAccessed)
}
DocumentAccessed::DocumentAccessed(const DocumentAccessed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentAccessed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accessed_by_){}
    , decltype(_impl_.accessed_by_type_){}
    , decltype(_impl_.access_method_){}
    , decltype(_impl_.body_included_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accessed_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accessed_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accessed_by().empty()) {
    _this->_impl_.accessed_by_.Set(from._internal_accessed_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.accessed_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accessed_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accessed_by_type().empty()) {
    _this->_impl_.accessed_by_type_.Set(from._internal_accessed_by_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.access_method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_access_method().empty()) {
    _this->_impl_.access_method_.Set(from._internal_access_method(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.body_included_ = from._impl_.body_included_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.DocumentAccessed)
}

inline void DocumentAccessed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accessed_by_){}
    , decltype(_impl_.accessed_by_type_){}
    , decltype(_impl_.access_method_){}
    , decltype(_impl_.body_included_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accessed_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accessed_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.accessed_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accessed_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.access_method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentAccessed::~DocumentAccessed() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.DocumentAccessed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentAccessed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accessed_by_.Destroy();
  _impl_.accessed_by_type_.Destroy();
  _impl_.access_method_.Destroy();
}

void DocumentAccessed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentAccessed::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.DocumentAccessed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accessed_by_.ClearToEmpty();
  _impl_.accessed_by_type_.ClearToEmpty();
  _impl_.access_method_.ClearToEmpty();
  _impl_.body_included_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentAccessed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string accessed_by = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_accessed_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentAccessed.accessed_by"));
        } else
          goto handle_unusual;
        continue;
      // string accessed_by_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accessed_by_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentAccessed.accessed_by_type"));
        } else
          goto handle_unusual;
        continue;
      // string access_method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_access_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentAccessed.access_method"));
        } else
          goto handle_unusual;
        continue;
      // bool body_included = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.body_included_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentAccessed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.DocumentAccessed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string accessed_by = 1;
  if (!this->_internal_accessed_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accessed_by().data(), static_cast<int>(this->_internal_accessed_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentAccessed.accessed_by");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_accessed_by(), target);
  }

  // string accessed_by_type = 2;
  if (!this->_internal_accessed_by_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accessed_by_type().data(), static_cast<int>(this->_internal_accessed_by_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentAccessed.accessed_by_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accessed_by_type(), target);
  }

  // string access_method = 3;
  if (!this->_internal_access_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_method().data(), static_cast<int>(this->_internal_access_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentAccessed.access_method");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_method(), target);
  }

  // bool body_included = 4;
  if (this->_internal_body_included() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_body_included(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.DocumentAccessed)
  return target;
}

size_t DocumentAccessed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.DocumentAccessed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessed_by = 1;
  if (!this->_internal_accessed_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accessed_by());
  }

  // string accessed_by_type = 2;
  if (!this->_internal_accessed_by_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accessed_by_type());
  }

  // string access_method = 3;
  if (!this->_internal_access_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_method());
  }

  // bool body_included = 4;
  if (this->_internal_body_included() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentAccessed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentAccessed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentAccessed::GetClassData() const { return &_class_data_; }


void DocumentAccessed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentAccessed*>(&to_msg);
  auto& from = static_cast<const DocumentAccessed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.DocumentAccessed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accessed_by().empty()) {
    _this->_internal_set_accessed_by(from._internal_accessed_by());
  }
  if (!from._internal_accessed_by_type().empty()) {
    _this->_internal_set_accessed_by_type(from._internal_accessed_by_type());
  }
  if (!from._internal_access_method().empty()) {
    _this->_internal_set_access_method(from._internal_access_method());
  }
  if (from._internal_body_included() != 0) {
    _this->_internal_set_body_included(from._internal_body_included());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentAccessed::CopyFrom(const DocumentAccessed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.DocumentAccessed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentAccessed::IsInitialized() const {
  return true;
}

void DocumentAccessed::InternalSwap(DocumentAccessed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accessed_by_, lhs_arena,
      &other->_impl_.accessed_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accessed_by_type_, lhs_arena,
      &other->_impl_.accessed_by_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.access_method_, lhs_arena,
      &other->_impl_.access_method_, rhs_arena
  );
  swap(_impl_.body_included_, other->_impl_.body_included_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentAccessed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[5]);
}

// ===================================================================

class DocumentTagged::_Internal {
 public:
};

DocumentTagged::DocumentTagged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.DocumentTagged)
}
DocumentTagged::DocumentTagged(const DocumentTagged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentTagged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.tagged_by_){}
    , decltype(_impl_.tagged_by_type_){}
    , decltype(_impl_.tag_operation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tagged_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tagged_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tagged_by().empty()) {
    _this->_impl_.tagged_by_.Set(from._internal_tagged_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tagged_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tagged_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tagged_by_type().empty()) {
    _this->_impl_.tagged_by_type_.Set(from._internal_tagged_by_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag_operation().empty()) {
    _this->_impl_.tag_operation_.Set(from._internal_tag_operation(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.DocumentTagged)
}

inline void DocumentTagged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.tagged_by_){}
    , decltype(_impl_.tagged_by_type_){}
    , decltype(_impl_.tag_operation_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tagged_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tagged_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tagged_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tagged_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentTagged::~DocumentTagged() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.DocumentTagged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentTagged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
  _impl_.tagged_by_.Destroy();
  _impl_.tagged_by_type_.Destroy();
  _impl_.tag_operation_.Destroy();
}

void DocumentTagged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentTagged::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.DocumentTagged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_.ClearToEmpty();
  _impl_.tagged_by_.ClearToEmpty();
  _impl_.tagged_by_type_.ClearToEmpty();
  _impl_.tag_operation_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentTagged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentTagged.tag"));
        } else
          goto handle_unusual;
        continue;
      // string tagged_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tagged_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentTagged.tagged_by"));
        } else
          goto handle_unusual;
        continue;
      // string tagged_by_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tagged_by_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentTagged.tagged_by_type"));
        } else
          goto handle_unusual;
        continue;
      // string tag_operation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tag_operation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentTagged.tag_operation"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentTagged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.DocumentTagged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentTagged.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // string tagged_by = 2;
  if (!this->_internal_tagged_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagged_by().data(), static_cast<int>(this->_internal_tagged_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentTagged.tagged_by");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tagged_by(), target);
  }

  // string tagged_by_type = 3;
  if (!this->_internal_tagged_by_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagged_by_type().data(), static_cast<int>(this->_internal_tagged_by_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentTagged.tagged_by_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tagged_by_type(), target);
  }

  // string tag_operation = 4;
  if (!this->_internal_tag_operation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag_operation().data(), static_cast<int>(this->_internal_tag_operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentTagged.tag_operation");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tag_operation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.DocumentTagged)
  return target;
}

size_t DocumentTagged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.DocumentTagged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string tagged_by = 2;
  if (!this->_internal_tagged_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagged_by());
  }

  // string tagged_by_type = 3;
  if (!this->_internal_tagged_by_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagged_by_type());
  }

  // string tag_operation = 4;
  if (!this->_internal_tag_operation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag_operation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentTagged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentTagged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentTagged::GetClassData() const { return &_class_data_; }


void DocumentTagged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentTagged*>(&to_msg);
  auto& from = static_cast<const DocumentTagged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.DocumentTagged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (!from._internal_tagged_by().empty()) {
    _this->_internal_set_tagged_by(from._internal_tagged_by());
  }
  if (!from._internal_tagged_by_type().empty()) {
    _this->_internal_set_tagged_by_type(from._internal_tagged_by_type());
  }
  if (!from._internal_tag_operation().empty()) {
    _this->_internal_set_tag_operation(from._internal_tag_operation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentTagged::CopyFrom(const DocumentTagged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.DocumentTagged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentTagged::IsInitialized() const {
  return true;
}

void DocumentTagged::InternalSwap(DocumentTagged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tagged_by_, lhs_arena,
      &other->_impl_.tagged_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tagged_by_type_, lhs_arena,
      &other->_impl_.tagged_by_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_operation_, lhs_arena,
      &other->_impl_.tag_operation_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentTagged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[6]);
}

// ===================================================================

class DocumentVersioned::_Internal {
 public:
};

DocumentVersioned::DocumentVersioned(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.DocumentVersioned)
}
DocumentVersioned::DocumentVersioned(const DocumentVersioned& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentVersioned* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_reason_){}
    , decltype(_impl_.new_version_){}
    , decltype(_impl_.previous_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_reason().empty()) {
    _this->_impl_.version_reason_.Set(from._internal_version_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.new_version_, &from._impl_.new_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.previous_version_) -
    reinterpret_cast<char*>(&_impl_.new_version_)) + sizeof(_impl_.previous_version_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.DocumentVersioned)
}

inline void DocumentVersioned::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_reason_){}
    , decltype(_impl_.new_version_){0}
    , decltype(_impl_.previous_version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentVersioned::~DocumentVersioned() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.DocumentVersioned)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentVersioned::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_reason_.Destroy();
}

void DocumentVersioned::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentVersioned::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.DocumentVersioned)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_reason_.ClearToEmpty();
  ::memset(&_impl_.new_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.previous_version_) -
      reinterpret_cast<char*>(&_impl_.new_version_)) + sizeof(_impl_.previous_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentVersioned::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 new_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.new_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 previous_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.previous_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DocumentVersioned.version_reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentVersioned::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.DocumentVersioned)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 new_version = 1;
  if (this->_internal_new_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_new_version(), target);
  }

  // int32 previous_version = 2;
  if (this->_internal_previous_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_previous_version(), target);
  }

  // string version_reason = 3;
  if (!this->_internal_version_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_reason().data(), static_cast<int>(this->_internal_version_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DocumentVersioned.version_reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.DocumentVersioned)
  return target;
}

size_t DocumentVersioned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.DocumentVersioned)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version_reason = 3;
  if (!this->_internal_version_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_reason());
  }

  // int32 new_version = 1;
  if (this->_internal_new_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_version());
  }

  // int32 previous_version = 2;
  if (this->_internal_previous_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_previous_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentVersioned::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentVersioned::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentVersioned::GetClassData() const { return &_class_data_; }


void DocumentVersioned::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentVersioned*>(&to_msg);
  auto& from = static_cast<const DocumentVersioned&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.DocumentVersioned)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version_reason().empty()) {
    _this->_internal_set_version_reason(from._internal_version_reason());
  }
  if (from._internal_new_version() != 0) {
    _this->_internal_set_new_version(from._internal_new_version());
  }
  if (from._internal_previous_version() != 0) {
    _this->_internal_set_previous_version(from._internal_previous_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentVersioned::CopyFrom(const DocumentVersioned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.DocumentVersioned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentVersioned::IsInitialized() const {
  return true;
}

void DocumentVersioned::InternalSwap(DocumentVersioned* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_reason_, lhs_arena,
      &other->_impl_.version_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentVersioned, _impl_.previous_version_)
      + sizeof(DocumentVersioned::_impl_.previous_version_)
      - PROTOBUF_FIELD_OFFSET(DocumentVersioned, _impl_.new_version_)>(
          reinterpret_cast<char*>(&_impl_.new_version_),
          reinterpret_cast<char*>(&other->_impl_.new_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentVersioned::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[7]);
}

// ===================================================================

class LLMEvent::_Internal {
 public:
  static const ::unhinged::cdc::LLMPromptSent& prompt_sent(const LLMEvent* msg);
  static const ::unhinged::cdc::LLMResponseReceived& response_received(const LLMEvent* msg);
  static const ::unhinged::cdc::LLMError& llm_error(const LLMEvent* msg);
  static const ::unhinged::cdc::LLMFeedback& feedback(const LLMEvent* msg);
  static const ::unhinged::cdc::LLMTokenUsage& token_usage(const LLMEvent* msg);
};

const ::unhinged::cdc::LLMPromptSent&
LLMEvent::_Internal::prompt_sent(const LLMEvent* msg) {
  return *msg->_impl_.event_data_.prompt_sent_;
}
const ::unhinged::cdc::LLMResponseReceived&
LLMEvent::_Internal::response_received(const LLMEvent* msg) {
  return *msg->_impl_.event_data_.response_received_;
}
const ::unhinged::cdc::LLMError&
LLMEvent::_Internal::llm_error(const LLMEvent* msg) {
  return *msg->_impl_.event_data_.llm_error_;
}
const ::unhinged::cdc::LLMFeedback&
LLMEvent::_Internal::feedback(const LLMEvent* msg) {
  return *msg->_impl_.event_data_.feedback_;
}
const ::unhinged::cdc::LLMTokenUsage&
LLMEvent::_Internal::token_usage(const LLMEvent* msg) {
  return *msg->_impl_.event_data_.token_usage_;
}
void LLMEvent::set_allocated_prompt_sent(::unhinged::cdc::LLMPromptSent* prompt_sent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (prompt_sent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prompt_sent);
    if (message_arena != submessage_arena) {
      prompt_sent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prompt_sent, submessage_arena);
    }
    set_has_prompt_sent();
    _impl_.event_data_.prompt_sent_ = prompt_sent;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.LLMEvent.prompt_sent)
}
void LLMEvent::set_allocated_response_received(::unhinged::cdc::LLMResponseReceived* response_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (response_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response_received);
    if (message_arena != submessage_arena) {
      response_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_received, submessage_arena);
    }
    set_has_response_received();
    _impl_.event_data_.response_received_ = response_received;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.LLMEvent.response_received)
}
void LLMEvent::set_allocated_llm_error(::unhinged::cdc::LLMError* llm_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (llm_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(llm_error);
    if (message_arena != submessage_arena) {
      llm_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, llm_error, submessage_arena);
    }
    set_has_llm_error();
    _impl_.event_data_.llm_error_ = llm_error;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.LLMEvent.llm_error)
}
void LLMEvent::set_allocated_feedback(::unhinged::cdc::LLMFeedback* feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(feedback);
    if (message_arena != submessage_arena) {
      feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feedback, submessage_arena);
    }
    set_has_feedback();
    _impl_.event_data_.feedback_ = feedback;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.LLMEvent.feedback)
}
void LLMEvent::set_allocated_token_usage(::unhinged::cdc::LLMTokenUsage* token_usage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (token_usage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(token_usage);
    if (message_arena != submessage_arena) {
      token_usage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_usage, submessage_arena);
    }
    set_has_token_usage();
    _impl_.event_data_.token_usage_ = token_usage;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.LLMEvent.token_usage)
}
LLMEvent::LLMEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.LLMEvent)
}
LLMEvent::LLMEvent(const LLMEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LLMEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interaction_id_){}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.provider_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interaction_id().empty()) {
    _this->_impl_.interaction_id_.Set(from._internal_interaction_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_name().empty()) {
    _this->_impl_.model_name_.Set(from._internal_model_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_provider().empty()) {
    _this->_impl_.provider_.Set(from._internal_provider(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.event_type_ = from._impl_.event_type_;
  clear_has_event_data();
  switch (from.event_data_case()) {
    case kPromptSent: {
      _this->_internal_mutable_prompt_sent()->::unhinged::cdc::LLMPromptSent::MergeFrom(
          from._internal_prompt_sent());
      break;
    }
    case kResponseReceived: {
      _this->_internal_mutable_response_received()->::unhinged::cdc::LLMResponseReceived::MergeFrom(
          from._internal_response_received());
      break;
    }
    case kLlmError: {
      _this->_internal_mutable_llm_error()->::unhinged::cdc::LLMError::MergeFrom(
          from._internal_llm_error());
      break;
    }
    case kFeedback: {
      _this->_internal_mutable_feedback()->::unhinged::cdc::LLMFeedback::MergeFrom(
          from._internal_feedback());
      break;
    }
    case kTokenUsage: {
      _this->_internal_mutable_token_usage()->::unhinged::cdc::LLMTokenUsage::MergeFrom(
          from._internal_token_usage());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.LLMEvent)
}

inline void LLMEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interaction_id_){}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.provider_){}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_event_data();
}

LLMEvent::~LLMEvent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.LLMEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LLMEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interaction_id_.Destroy();
  _impl_.model_name_.Destroy();
  _impl_.provider_.Destroy();
  if (has_event_data()) {
    clear_event_data();
  }
}

void LLMEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LLMEvent::clear_event_data() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.cdc.LLMEvent)
  switch (event_data_case()) {
    case kPromptSent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.prompt_sent_;
      }
      break;
    }
    case kResponseReceived: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.response_received_;
      }
      break;
    }
    case kLlmError: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.llm_error_;
      }
      break;
    }
    case kFeedback: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.feedback_;
      }
      break;
    }
    case kTokenUsage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.token_usage_;
      }
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_DATA_NOT_SET;
}


void LLMEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.LLMEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interaction_id_.ClearToEmpty();
  _impl_.model_name_.ClearToEmpty();
  _impl_.provider_.ClearToEmpty();
  _impl_.event_type_ = 0;
  clear_event_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LLMEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMEvent.interaction_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMEvent.model_name"));
        } else
          goto handle_unusual;
        continue;
      // string provider = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMEvent.provider"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.LLMEventType event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::unhinged::cdc::LLMEventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.LLMPromptSent prompt_sent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_prompt_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.LLMResponseReceived response_received = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.LLMError llm_error = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_llm_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.LLMFeedback feedback = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_feedback(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.LLMTokenUsage token_usage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_usage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LLMEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.LLMEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (!this->_internal_interaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMEvent.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  // string model_name = 2;
  if (!this->_internal_model_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMEvent.model_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_name(), target);
  }

  // string provider = 3;
  if (!this->_internal_provider().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMEvent.provider");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_provider(), target);
  }

  // .unhinged.cdc.LLMEventType event_type = 4;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event_type(), target);
  }

  // .unhinged.cdc.LLMPromptSent prompt_sent = 10;
  if (_internal_has_prompt_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::prompt_sent(this),
        _Internal::prompt_sent(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.LLMResponseReceived response_received = 11;
  if (_internal_has_response_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::response_received(this),
        _Internal::response_received(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.LLMError llm_error = 12;
  if (_internal_has_llm_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::llm_error(this),
        _Internal::llm_error(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.LLMFeedback feedback = 13;
  if (_internal_has_feedback()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::feedback(this),
        _Internal::feedback(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.LLMTokenUsage token_usage = 14;
  if (_internal_has_token_usage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::token_usage(this),
        _Internal::token_usage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.LLMEvent)
  return target;
}

size_t LLMEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.LLMEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (!this->_internal_interaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  // string model_name = 2;
  if (!this->_internal_model_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  // string provider = 3;
  if (!this->_internal_provider().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  // .unhinged.cdc.LLMEventType event_type = 4;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  switch (event_data_case()) {
    // .unhinged.cdc.LLMPromptSent prompt_sent = 10;
    case kPromptSent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.prompt_sent_);
      break;
    }
    // .unhinged.cdc.LLMResponseReceived response_received = 11;
    case kResponseReceived: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.response_received_);
      break;
    }
    // .unhinged.cdc.LLMError llm_error = 12;
    case kLlmError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.llm_error_);
      break;
    }
    // .unhinged.cdc.LLMFeedback feedback = 13;
    case kFeedback: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.feedback_);
      break;
    }
    // .unhinged.cdc.LLMTokenUsage token_usage = 14;
    case kTokenUsage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.token_usage_);
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LLMEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LLMEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LLMEvent::GetClassData() const { return &_class_data_; }


void LLMEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LLMEvent*>(&to_msg);
  auto& from = static_cast<const LLMEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.LLMEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_interaction_id().empty()) {
    _this->_internal_set_interaction_id(from._internal_interaction_id());
  }
  if (!from._internal_model_name().empty()) {
    _this->_internal_set_model_name(from._internal_model_name());
  }
  if (!from._internal_provider().empty()) {
    _this->_internal_set_provider(from._internal_provider());
  }
  if (from._internal_event_type() != 0) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  switch (from.event_data_case()) {
    case kPromptSent: {
      _this->_internal_mutable_prompt_sent()->::unhinged::cdc::LLMPromptSent::MergeFrom(
          from._internal_prompt_sent());
      break;
    }
    case kResponseReceived: {
      _this->_internal_mutable_response_received()->::unhinged::cdc::LLMResponseReceived::MergeFrom(
          from._internal_response_received());
      break;
    }
    case kLlmError: {
      _this->_internal_mutable_llm_error()->::unhinged::cdc::LLMError::MergeFrom(
          from._internal_llm_error());
      break;
    }
    case kFeedback: {
      _this->_internal_mutable_feedback()->::unhinged::cdc::LLMFeedback::MergeFrom(
          from._internal_feedback());
      break;
    }
    case kTokenUsage: {
      _this->_internal_mutable_token_usage()->::unhinged::cdc::LLMTokenUsage::MergeFrom(
          from._internal_token_usage());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LLMEvent::CopyFrom(const LLMEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.LLMEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LLMEvent::IsInitialized() const {
  return true;
}

void LLMEvent::InternalSwap(LLMEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interaction_id_, lhs_arena,
      &other->_impl_.interaction_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_name_, lhs_arena,
      &other->_impl_.model_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.provider_, lhs_arena,
      &other->_impl_.provider_, rhs_arena
  );
  swap(_impl_.event_type_, other->_impl_.event_type_);
  swap(_impl_.event_data_, other->_impl_.event_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LLMEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[8]);
}

// ===================================================================

class LLMPromptSent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& prompt_parameters(const LLMPromptSent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
LLMPromptSent::_Internal::prompt_parameters(const LLMPromptSent* msg) {
  return *msg->_impl_.prompt_parameters_;
}
void LLMPromptSent::clear_prompt_parameters() {
  if (GetArenaForAllocation() == nullptr && _impl_.prompt_parameters_ != nullptr) {
    delete _impl_.prompt_parameters_;
  }
  _impl_.prompt_parameters_ = nullptr;
}
LLMPromptSent::LLMPromptSent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.LLMPromptSent)
}
LLMPromptSent::LLMPromptSent(const LLMPromptSent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LLMPromptSent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.context_document_ids_){from._impl_.context_document_ids_}
    , decltype(_impl_.prompt_text_){}
    , decltype(_impl_.prompt_parameters_){nullptr}
    , decltype(_impl_.max_tokens_){}
    , decltype(_impl_.temperature_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prompt_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prompt_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prompt_text().empty()) {
    _this->_impl_.prompt_text_.Set(from._internal_prompt_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_prompt_parameters()) {
    _this->_impl_.prompt_parameters_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.prompt_parameters_);
  }
  ::memcpy(&_impl_.max_tokens_, &from._impl_.max_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.temperature_) -
    reinterpret_cast<char*>(&_impl_.max_tokens_)) + sizeof(_impl_.temperature_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.LLMPromptSent)
}

inline void LLMPromptSent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.context_document_ids_){arena}
    , decltype(_impl_.prompt_text_){}
    , decltype(_impl_.prompt_parameters_){nullptr}
    , decltype(_impl_.max_tokens_){0}
    , decltype(_impl_.temperature_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prompt_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prompt_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LLMPromptSent::~LLMPromptSent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.LLMPromptSent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LLMPromptSent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.context_document_ids_.~RepeatedPtrField();
  _impl_.prompt_text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.prompt_parameters_;
}

void LLMPromptSent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LLMPromptSent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.LLMPromptSent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.context_document_ids_.Clear();
  _impl_.prompt_text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.prompt_parameters_ != nullptr) {
    delete _impl_.prompt_parameters_;
  }
  _impl_.prompt_parameters_ = nullptr;
  ::memset(&_impl_.max_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.temperature_) -
      reinterpret_cast<char*>(&_impl_.max_tokens_)) + sizeof(_impl_.temperature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LLMPromptSent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string prompt_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prompt_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMPromptSent.prompt_text"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct prompt_parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prompt_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string context_document_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_context_document_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMPromptSent.context_document_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 max_tokens = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float temperature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LLMPromptSent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.LLMPromptSent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string prompt_text = 1;
  if (!this->_internal_prompt_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prompt_text().data(), static_cast<int>(this->_internal_prompt_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMPromptSent.prompt_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prompt_text(), target);
  }

  // .google.protobuf.Struct prompt_parameters = 2;
  if (this->_internal_has_prompt_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::prompt_parameters(this),
        _Internal::prompt_parameters(this).GetCachedSize(), target, stream);
  }

  // repeated string context_document_ids = 3;
  for (int i = 0, n = this->_internal_context_document_ids_size(); i < n; i++) {
    const auto& s = this->_internal_context_document_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMPromptSent.context_document_ids");
    target = stream->WriteString(3, s, target);
  }

  // int32 max_tokens = 4;
  if (this->_internal_max_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_tokens(), target);
  }

  // float temperature = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.LLMPromptSent)
  return target;
}

size_t LLMPromptSent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.LLMPromptSent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string context_document_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.context_document_ids_.size());
  for (int i = 0, n = _impl_.context_document_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.context_document_ids_.Get(i));
  }

  // string prompt_text = 1;
  if (!this->_internal_prompt_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prompt_text());
  }

  // .google.protobuf.Struct prompt_parameters = 2;
  if (this->_internal_has_prompt_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prompt_parameters_);
  }

  // int32 max_tokens = 4;
  if (this->_internal_max_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_tokens());
  }

  // float temperature = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LLMPromptSent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LLMPromptSent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LLMPromptSent::GetClassData() const { return &_class_data_; }


void LLMPromptSent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LLMPromptSent*>(&to_msg);
  auto& from = static_cast<const LLMPromptSent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.LLMPromptSent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.context_document_ids_.MergeFrom(from._impl_.context_document_ids_);
  if (!from._internal_prompt_text().empty()) {
    _this->_internal_set_prompt_text(from._internal_prompt_text());
  }
  if (from._internal_has_prompt_parameters()) {
    _this->_internal_mutable_prompt_parameters()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_prompt_parameters());
  }
  if (from._internal_max_tokens() != 0) {
    _this->_internal_set_max_tokens(from._internal_max_tokens());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = from._internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LLMPromptSent::CopyFrom(const LLMPromptSent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.LLMPromptSent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LLMPromptSent::IsInitialized() const {
  return true;
}

void LLMPromptSent::InternalSwap(LLMPromptSent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.context_document_ids_.InternalSwap(&other->_impl_.context_document_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prompt_text_, lhs_arena,
      &other->_impl_.prompt_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LLMPromptSent, _impl_.temperature_)
      + sizeof(LLMPromptSent::_impl_.temperature_)
      - PROTOBUF_FIELD_OFFSET(LLMPromptSent, _impl_.prompt_parameters_)>(
          reinterpret_cast<char*>(&_impl_.prompt_parameters_),
          reinterpret_cast<char*>(&other->_impl_.prompt_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LLMPromptSent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[9]);
}

// ===================================================================

class LLMResponseReceived::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& response_metadata(const LLMResponseReceived* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
LLMResponseReceived::_Internal::response_metadata(const LLMResponseReceived* msg) {
  return *msg->_impl_.response_metadata_;
}
void LLMResponseReceived::clear_response_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_metadata_ != nullptr) {
    delete _impl_.response_metadata_;
  }
  _impl_.response_metadata_ = nullptr;
}
LLMResponseReceived::LLMResponseReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.LLMResponseReceived)
}
LLMResponseReceived::LLMResponseReceived(const LLMResponseReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LLMResponseReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_text_){}
    , decltype(_impl_.finish_reason_){}
    , decltype(_impl_.response_metadata_){nullptr}
    , decltype(_impl_.response_tokens_){}
    , decltype(_impl_.response_time_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.response_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response_text().empty()) {
    _this->_impl_.response_text_.Set(from._internal_response_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.finish_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.finish_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_finish_reason().empty()) {
    _this->_impl_.finish_reason_.Set(from._internal_finish_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response_metadata()) {
    _this->_impl_.response_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.response_metadata_);
  }
  ::memcpy(&_impl_.response_tokens_, &from._impl_.response_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_time_ms_) -
    reinterpret_cast<char*>(&_impl_.response_tokens_)) + sizeof(_impl_.response_time_ms_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.LLMResponseReceived)
}

inline void LLMResponseReceived::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_text_){}
    , decltype(_impl_.finish_reason_){}
    , decltype(_impl_.response_metadata_){nullptr}
    , decltype(_impl_.response_tokens_){0}
    , decltype(_impl_.response_time_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.response_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.finish_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.finish_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LLMResponseReceived::~LLMResponseReceived() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.LLMResponseReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LLMResponseReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.response_text_.Destroy();
  _impl_.finish_reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_metadata_;
}

void LLMResponseReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LLMResponseReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.LLMResponseReceived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_text_.ClearToEmpty();
  _impl_.finish_reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_metadata_ != nullptr) {
    delete _impl_.response_metadata_;
  }
  _impl_.response_metadata_ = nullptr;
  ::memset(&_impl_.response_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.response_time_ms_) -
      reinterpret_cast<char*>(&_impl_.response_tokens_)) + sizeof(_impl_.response_time_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LLMResponseReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string response_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_response_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMResponseReceived.response_text"));
        } else
          goto handle_unusual;
        continue;
      // string finish_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_finish_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMResponseReceived.finish_reason"));
        } else
          goto handle_unusual;
        continue;
      // int32 response_tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.response_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float response_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.response_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct response_metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LLMResponseReceived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.LLMResponseReceived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string response_text = 1;
  if (!this->_internal_response_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_text().data(), static_cast<int>(this->_internal_response_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMResponseReceived.response_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response_text(), target);
  }

  // string finish_reason = 2;
  if (!this->_internal_finish_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_finish_reason().data(), static_cast<int>(this->_internal_finish_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMResponseReceived.finish_reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_finish_reason(), target);
  }

  // int32 response_tokens = 3;
  if (this->_internal_response_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_response_tokens(), target);
  }

  // float response_time_ms = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_response_time_ms = this->_internal_response_time_ms();
  uint32_t raw_response_time_ms;
  memcpy(&raw_response_time_ms, &tmp_response_time_ms, sizeof(tmp_response_time_ms));
  if (raw_response_time_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_response_time_ms(), target);
  }

  // .google.protobuf.Struct response_metadata = 5;
  if (this->_internal_has_response_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::response_metadata(this),
        _Internal::response_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.LLMResponseReceived)
  return target;
}

size_t LLMResponseReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.LLMResponseReceived)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response_text = 1;
  if (!this->_internal_response_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_text());
  }

  // string finish_reason = 2;
  if (!this->_internal_finish_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_finish_reason());
  }

  // .google.protobuf.Struct response_metadata = 5;
  if (this->_internal_has_response_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_metadata_);
  }

  // int32 response_tokens = 3;
  if (this->_internal_response_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response_tokens());
  }

  // float response_time_ms = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_response_time_ms = this->_internal_response_time_ms();
  uint32_t raw_response_time_ms;
  memcpy(&raw_response_time_ms, &tmp_response_time_ms, sizeof(tmp_response_time_ms));
  if (raw_response_time_ms != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LLMResponseReceived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LLMResponseReceived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LLMResponseReceived::GetClassData() const { return &_class_data_; }


void LLMResponseReceived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LLMResponseReceived*>(&to_msg);
  auto& from = static_cast<const LLMResponseReceived&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.LLMResponseReceived)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_response_text().empty()) {
    _this->_internal_set_response_text(from._internal_response_text());
  }
  if (!from._internal_finish_reason().empty()) {
    _this->_internal_set_finish_reason(from._internal_finish_reason());
  }
  if (from._internal_has_response_metadata()) {
    _this->_internal_mutable_response_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_response_metadata());
  }
  if (from._internal_response_tokens() != 0) {
    _this->_internal_set_response_tokens(from._internal_response_tokens());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_response_time_ms = from._internal_response_time_ms();
  uint32_t raw_response_time_ms;
  memcpy(&raw_response_time_ms, &tmp_response_time_ms, sizeof(tmp_response_time_ms));
  if (raw_response_time_ms != 0) {
    _this->_internal_set_response_time_ms(from._internal_response_time_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LLMResponseReceived::CopyFrom(const LLMResponseReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.LLMResponseReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LLMResponseReceived::IsInitialized() const {
  return true;
}

void LLMResponseReceived::InternalSwap(LLMResponseReceived* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_text_, lhs_arena,
      &other->_impl_.response_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.finish_reason_, lhs_arena,
      &other->_impl_.finish_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LLMResponseReceived, _impl_.response_time_ms_)
      + sizeof(LLMResponseReceived::_impl_.response_time_ms_)
      - PROTOBUF_FIELD_OFFSET(LLMResponseReceived, _impl_.response_metadata_)>(
          reinterpret_cast<char*>(&_impl_.response_metadata_),
          reinterpret_cast<char*>(&other->_impl_.response_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LLMResponseReceived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[10]);
}

// ===================================================================

class LLMError::_Internal {
 public:
};

LLMError::LLMError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.LLMError)
}
LLMError::LLMError(const LLMError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LLMError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_code_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.error_type_){}
    , decltype(_impl_.is_retryable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_code().empty()) {
    _this->_impl_.error_code_.Set(from._internal_error_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_type().empty()) {
    _this->_impl_.error_type_.Set(from._internal_error_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_retryable_ = from._impl_.is_retryable_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.LLMError)
}

inline void LLMError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_code_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.error_type_){}
    , decltype(_impl_.is_retryable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LLMError::~LLMError() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.LLMError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LLMError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_code_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.error_type_.Destroy();
}

void LLMError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LLMError::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.LLMError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_code_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  _impl_.error_type_.ClearToEmpty();
  _impl_.is_retryable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LLMError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMError.error_code"));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMError.error_message"));
        } else
          goto handle_unusual;
        continue;
      // string error_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMError.error_type"));
        } else
          goto handle_unusual;
        continue;
      // bool is_retryable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_retryable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LLMError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.LLMError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_code = 1;
  if (!this->_internal_error_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_code().data(), static_cast<int>(this->_internal_error_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMError.error_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_code(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMError.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  // string error_type = 3;
  if (!this->_internal_error_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_type().data(), static_cast<int>(this->_internal_error_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMError.error_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_type(), target);
  }

  // bool is_retryable = 4;
  if (this->_internal_is_retryable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_retryable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.LLMError)
  return target;
}

size_t LLMError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.LLMError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_code = 1;
  if (!this->_internal_error_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_code());
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // string error_type = 3;
  if (!this->_internal_error_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_type());
  }

  // bool is_retryable = 4;
  if (this->_internal_is_retryable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LLMError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LLMError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LLMError::GetClassData() const { return &_class_data_; }


void LLMError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LLMError*>(&to_msg);
  auto& from = static_cast<const LLMError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.LLMError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_code().empty()) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_error_type().empty()) {
    _this->_internal_set_error_type(from._internal_error_type());
  }
  if (from._internal_is_retryable() != 0) {
    _this->_internal_set_is_retryable(from._internal_is_retryable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LLMError::CopyFrom(const LLMError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.LLMError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LLMError::IsInitialized() const {
  return true;
}

void LLMError::InternalSwap(LLMError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_code_, lhs_arena,
      &other->_impl_.error_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_type_, lhs_arena,
      &other->_impl_.error_type_, rhs_arena
  );
  swap(_impl_.is_retryable_, other->_impl_.is_retryable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LLMError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[11]);
}

// ===================================================================

class LLMFeedback::_Internal {
 public:
};

LLMFeedback::LLMFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.LLMFeedback)
}
LLMFeedback::LLMFeedback(const LLMFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LLMFeedback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feedback_type_){}
    , decltype(_impl_.feedback_value_){}
    , decltype(_impl_.feedback_text_){}
    , decltype(_impl_.provided_by_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feedback_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.feedback_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feedback_type().empty()) {
    _this->_impl_.feedback_type_.Set(from._internal_feedback_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.feedback_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.feedback_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feedback_value().empty()) {
    _this->_impl_.feedback_value_.Set(from._internal_feedback_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.feedback_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.feedback_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feedback_text().empty()) {
    _this->_impl_.feedback_text_.Set(from._internal_feedback_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.provided_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provided_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_provided_by().empty()) {
    _this->_impl_.provided_by_.Set(from._internal_provided_by(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.LLMFeedback)
}

inline void LLMFeedback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feedback_type_){}
    , decltype(_impl_.feedback_value_){}
    , decltype(_impl_.feedback_text_){}
    , decltype(_impl_.provided_by_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.feedback_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.feedback_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.feedback_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.feedback_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.feedback_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.feedback_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.provided_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provided_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LLMFeedback::~LLMFeedback() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.LLMFeedback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LLMFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feedback_type_.Destroy();
  _impl_.feedback_value_.Destroy();
  _impl_.feedback_text_.Destroy();
  _impl_.provided_by_.Destroy();
}

void LLMFeedback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LLMFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.LLMFeedback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feedback_type_.ClearToEmpty();
  _impl_.feedback_value_.ClearToEmpty();
  _impl_.feedback_text_.ClearToEmpty();
  _impl_.provided_by_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LLMFeedback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feedback_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feedback_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMFeedback.feedback_type"));
        } else
          goto handle_unusual;
        continue;
      // string feedback_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_feedback_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMFeedback.feedback_value"));
        } else
          goto handle_unusual;
        continue;
      // string feedback_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_feedback_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMFeedback.feedback_text"));
        } else
          goto handle_unusual;
        continue;
      // string provided_by = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_provided_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.LLMFeedback.provided_by"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LLMFeedback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.LLMFeedback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feedback_type = 1;
  if (!this->_internal_feedback_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_feedback_type().data(), static_cast<int>(this->_internal_feedback_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMFeedback.feedback_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_feedback_type(), target);
  }

  // string feedback_value = 2;
  if (!this->_internal_feedback_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_feedback_value().data(), static_cast<int>(this->_internal_feedback_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMFeedback.feedback_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_feedback_value(), target);
  }

  // string feedback_text = 3;
  if (!this->_internal_feedback_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_feedback_text().data(), static_cast<int>(this->_internal_feedback_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMFeedback.feedback_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_feedback_text(), target);
  }

  // string provided_by = 4;
  if (!this->_internal_provided_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provided_by().data(), static_cast<int>(this->_internal_provided_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.LLMFeedback.provided_by");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_provided_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.LLMFeedback)
  return target;
}

size_t LLMFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.LLMFeedback)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feedback_type = 1;
  if (!this->_internal_feedback_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_feedback_type());
  }

  // string feedback_value = 2;
  if (!this->_internal_feedback_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_feedback_value());
  }

  // string feedback_text = 3;
  if (!this->_internal_feedback_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_feedback_text());
  }

  // string provided_by = 4;
  if (!this->_internal_provided_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provided_by());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LLMFeedback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LLMFeedback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LLMFeedback::GetClassData() const { return &_class_data_; }


void LLMFeedback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LLMFeedback*>(&to_msg);
  auto& from = static_cast<const LLMFeedback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.LLMFeedback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_feedback_type().empty()) {
    _this->_internal_set_feedback_type(from._internal_feedback_type());
  }
  if (!from._internal_feedback_value().empty()) {
    _this->_internal_set_feedback_value(from._internal_feedback_value());
  }
  if (!from._internal_feedback_text().empty()) {
    _this->_internal_set_feedback_text(from._internal_feedback_text());
  }
  if (!from._internal_provided_by().empty()) {
    _this->_internal_set_provided_by(from._internal_provided_by());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LLMFeedback::CopyFrom(const LLMFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.LLMFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LLMFeedback::IsInitialized() const {
  return true;
}

void LLMFeedback::InternalSwap(LLMFeedback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.feedback_type_, lhs_arena,
      &other->_impl_.feedback_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.feedback_value_, lhs_arena,
      &other->_impl_.feedback_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.feedback_text_, lhs_arena,
      &other->_impl_.feedback_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.provided_by_, lhs_arena,
      &other->_impl_.provided_by_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LLMFeedback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[12]);
}

// ===================================================================

class LLMTokenUsage::_Internal {
 public:
};

LLMTokenUsage::LLMTokenUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.LLMTokenUsage)
}
LLMTokenUsage::LLMTokenUsage(const LLMTokenUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LLMTokenUsage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prompt_tokens_){}
    , decltype(_impl_.completion_tokens_){}
    , decltype(_impl_.total_tokens_){}
    , decltype(_impl_.cost_usd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.prompt_tokens_, &from._impl_.prompt_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cost_usd_) -
    reinterpret_cast<char*>(&_impl_.prompt_tokens_)) + sizeof(_impl_.cost_usd_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.LLMTokenUsage)
}

inline void LLMTokenUsage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prompt_tokens_){0}
    , decltype(_impl_.completion_tokens_){0}
    , decltype(_impl_.total_tokens_){0}
    , decltype(_impl_.cost_usd_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LLMTokenUsage::~LLMTokenUsage() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.LLMTokenUsage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LLMTokenUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LLMTokenUsage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LLMTokenUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.LLMTokenUsage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.prompt_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cost_usd_) -
      reinterpret_cast<char*>(&_impl_.prompt_tokens_)) + sizeof(_impl_.cost_usd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LLMTokenUsage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 prompt_tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.prompt_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 completion_tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.completion_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cost_usd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.cost_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LLMTokenUsage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.LLMTokenUsage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 prompt_tokens = 1;
  if (this->_internal_prompt_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_prompt_tokens(), target);
  }

  // int32 completion_tokens = 2;
  if (this->_internal_completion_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_completion_tokens(), target);
  }

  // int32 total_tokens = 3;
  if (this->_internal_total_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_tokens(), target);
  }

  // float cost_usd = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost_usd = this->_internal_cost_usd();
  uint32_t raw_cost_usd;
  memcpy(&raw_cost_usd, &tmp_cost_usd, sizeof(tmp_cost_usd));
  if (raw_cost_usd != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_cost_usd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.LLMTokenUsage)
  return target;
}

size_t LLMTokenUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.LLMTokenUsage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 prompt_tokens = 1;
  if (this->_internal_prompt_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prompt_tokens());
  }

  // int32 completion_tokens = 2;
  if (this->_internal_completion_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_completion_tokens());
  }

  // int32 total_tokens = 3;
  if (this->_internal_total_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_tokens());
  }

  // float cost_usd = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost_usd = this->_internal_cost_usd();
  uint32_t raw_cost_usd;
  memcpy(&raw_cost_usd, &tmp_cost_usd, sizeof(tmp_cost_usd));
  if (raw_cost_usd != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LLMTokenUsage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LLMTokenUsage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LLMTokenUsage::GetClassData() const { return &_class_data_; }


void LLMTokenUsage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LLMTokenUsage*>(&to_msg);
  auto& from = static_cast<const LLMTokenUsage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.LLMTokenUsage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_prompt_tokens() != 0) {
    _this->_internal_set_prompt_tokens(from._internal_prompt_tokens());
  }
  if (from._internal_completion_tokens() != 0) {
    _this->_internal_set_completion_tokens(from._internal_completion_tokens());
  }
  if (from._internal_total_tokens() != 0) {
    _this->_internal_set_total_tokens(from._internal_total_tokens());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost_usd = from._internal_cost_usd();
  uint32_t raw_cost_usd;
  memcpy(&raw_cost_usd, &tmp_cost_usd, sizeof(tmp_cost_usd));
  if (raw_cost_usd != 0) {
    _this->_internal_set_cost_usd(from._internal_cost_usd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LLMTokenUsage::CopyFrom(const LLMTokenUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.LLMTokenUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LLMTokenUsage::IsInitialized() const {
  return true;
}

void LLMTokenUsage::InternalSwap(LLMTokenUsage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LLMTokenUsage, _impl_.cost_usd_)
      + sizeof(LLMTokenUsage::_impl_.cost_usd_)
      - PROTOBUF_FIELD_OFFSET(LLMTokenUsage, _impl_.prompt_tokens_)>(
          reinterpret_cast<char*>(&_impl_.prompt_tokens_),
          reinterpret_cast<char*>(&other->_impl_.prompt_tokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LLMTokenUsage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[13]);
}

// ===================================================================

class AgentEvent::_Internal {
 public:
  static const ::unhinged::cdc::AgentStarted& started(const AgentEvent* msg);
  static const ::unhinged::cdc::AgentStepCompleted& step_completed(const AgentEvent* msg);
  static const ::unhinged::cdc::AgentCompleted& completed(const AgentEvent* msg);
  static const ::unhinged::cdc::AgentFailed& failed(const AgentEvent* msg);
  static const ::unhinged::cdc::AgentToolUsed& tool_used(const AgentEvent* msg);
};

const ::unhinged::cdc::AgentStarted&
AgentEvent::_Internal::started(const AgentEvent* msg) {
  return *msg->_impl_.event_data_.started_;
}
const ::unhinged::cdc::AgentStepCompleted&
AgentEvent::_Internal::step_completed(const AgentEvent* msg) {
  return *msg->_impl_.event_data_.step_completed_;
}
const ::unhinged::cdc::AgentCompleted&
AgentEvent::_Internal::completed(const AgentEvent* msg) {
  return *msg->_impl_.event_data_.completed_;
}
const ::unhinged::cdc::AgentFailed&
AgentEvent::_Internal::failed(const AgentEvent* msg) {
  return *msg->_impl_.event_data_.failed_;
}
const ::unhinged::cdc::AgentToolUsed&
AgentEvent::_Internal::tool_used(const AgentEvent* msg) {
  return *msg->_impl_.event_data_.tool_used_;
}
void AgentEvent::set_allocated_started(::unhinged::cdc::AgentStarted* started) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (started) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(started);
    if (message_arena != submessage_arena) {
      started = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started, submessage_arena);
    }
    set_has_started();
    _impl_.event_data_.started_ = started;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.AgentEvent.started)
}
void AgentEvent::set_allocated_step_completed(::unhinged::cdc::AgentStepCompleted* step_completed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (step_completed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(step_completed);
    if (message_arena != submessage_arena) {
      step_completed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, step_completed, submessage_arena);
    }
    set_has_step_completed();
    _impl_.event_data_.step_completed_ = step_completed;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.AgentEvent.step_completed)
}
void AgentEvent::set_allocated_completed(::unhinged::cdc::AgentCompleted* completed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (completed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(completed);
    if (message_arena != submessage_arena) {
      completed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, completed, submessage_arena);
    }
    set_has_completed();
    _impl_.event_data_.completed_ = completed;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.AgentEvent.completed)
}
void AgentEvent::set_allocated_failed(::unhinged::cdc::AgentFailed* failed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (failed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(failed);
    if (message_arena != submessage_arena) {
      failed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failed, submessage_arena);
    }
    set_has_failed();
    _impl_.event_data_.failed_ = failed;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.AgentEvent.failed)
}
void AgentEvent::set_allocated_tool_used(::unhinged::cdc::AgentToolUsed* tool_used) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (tool_used) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tool_used);
    if (message_arena != submessage_arena) {
      tool_used = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tool_used, submessage_arena);
    }
    set_has_tool_used();
    _impl_.event_data_.tool_used_ = tool_used;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.AgentEvent.tool_used)
}
AgentEvent::AgentEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.AgentEvent)
}
AgentEvent::AgentEvent(const AgentEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgentEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.agent_id_){}
    , decltype(_impl_.agent_type_){}
    , decltype(_impl_.agent_version_){}
    , decltype(_impl_.execution_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.agent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agent_id().empty()) {
    _this->_impl_.agent_id_.Set(from._internal_agent_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.agent_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agent_type().empty()) {
    _this->_impl_.agent_type_.Set(from._internal_agent_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.agent_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agent_version().empty()) {
    _this->_impl_.agent_version_.Set(from._internal_agent_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.execution_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_id().empty()) {
    _this->_impl_.execution_id_.Set(from._internal_execution_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.event_type_ = from._impl_.event_type_;
  clear_has_event_data();
  switch (from.event_data_case()) {
    case kStarted: {
      _this->_internal_mutable_started()->::unhinged::cdc::AgentStarted::MergeFrom(
          from._internal_started());
      break;
    }
    case kStepCompleted: {
      _this->_internal_mutable_step_completed()->::unhinged::cdc::AgentStepCompleted::MergeFrom(
          from._internal_step_completed());
      break;
    }
    case kCompleted: {
      _this->_internal_mutable_completed()->::unhinged::cdc::AgentCompleted::MergeFrom(
          from._internal_completed());
      break;
    }
    case kFailed: {
      _this->_internal_mutable_failed()->::unhinged::cdc::AgentFailed::MergeFrom(
          from._internal_failed());
      break;
    }
    case kToolUsed: {
      _this->_internal_mutable_tool_used()->::unhinged::cdc::AgentToolUsed::MergeFrom(
          from._internal_tool_used());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.AgentEvent)
}

inline void AgentEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.agent_id_){}
    , decltype(_impl_.agent_type_){}
    , decltype(_impl_.agent_version_){}
    , decltype(_impl_.execution_id_){}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.agent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.agent_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.agent_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_event_data();
}

AgentEvent::~AgentEvent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.AgentEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agent_id_.Destroy();
  _impl_.agent_type_.Destroy();
  _impl_.agent_version_.Destroy();
  _impl_.execution_id_.Destroy();
  if (has_event_data()) {
    clear_event_data();
  }
}

void AgentEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgentEvent::clear_event_data() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.cdc.AgentEvent)
  switch (event_data_case()) {
    case kStarted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.started_;
      }
      break;
    }
    case kStepCompleted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.step_completed_;
      }
      break;
    }
    case kCompleted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.completed_;
      }
      break;
    }
    case kFailed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.failed_;
      }
      break;
    }
    case kToolUsed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.tool_used_;
      }
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_DATA_NOT_SET;
}


void AgentEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.AgentEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agent_id_.ClearToEmpty();
  _impl_.agent_type_.ClearToEmpty();
  _impl_.agent_version_.ClearToEmpty();
  _impl_.execution_id_.ClearToEmpty();
  _impl_.event_type_ = 0;
  clear_event_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_agent_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AgentEvent.agent_id"));
        } else
          goto handle_unusual;
        continue;
      // string agent_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_agent_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AgentEvent.agent_type"));
        } else
          goto handle_unusual;
        continue;
      // string agent_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_agent_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AgentEvent.agent_version"));
        } else
          goto handle_unusual;
        continue;
      // string execution_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_execution_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AgentEvent.execution_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.AgentEventType event_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::unhinged::cdc::AgentEventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.AgentStarted started = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_started(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.AgentStepCompleted step_completed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_step_completed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.AgentCompleted completed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_completed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.AgentFailed failed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_failed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.AgentToolUsed tool_used = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tool_used(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.AgentEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent_id = 1;
  if (!this->_internal_agent_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_id().data(), static_cast<int>(this->_internal_agent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AgentEvent.agent_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent_id(), target);
  }

  // string agent_type = 2;
  if (!this->_internal_agent_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_type().data(), static_cast<int>(this->_internal_agent_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AgentEvent.agent_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_agent_type(), target);
  }

  // string agent_version = 3;
  if (!this->_internal_agent_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_version().data(), static_cast<int>(this->_internal_agent_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AgentEvent.agent_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_agent_version(), target);
  }

  // string execution_id = 4;
  if (!this->_internal_execution_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execution_id().data(), static_cast<int>(this->_internal_execution_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AgentEvent.execution_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_execution_id(), target);
  }

  // .unhinged.cdc.AgentEventType event_type = 5;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_event_type(), target);
  }

  // .unhinged.cdc.AgentStarted started = 10;
  if (_internal_has_started()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::started(this),
        _Internal::started(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.AgentStepCompleted step_completed = 11;
  if (_internal_has_step_completed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::step_completed(this),
        _Internal::step_completed(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.AgentCompleted completed = 12;
  if (_internal_has_completed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::completed(this),
        _Internal::completed(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.AgentFailed failed = 13;
  if (_internal_has_failed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::failed(this),
        _Internal::failed(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.AgentToolUsed tool_used = 14;
  if (_internal_has_tool_used()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tool_used(this),
        _Internal::tool_used(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.AgentEvent)
  return target;
}

size_t AgentEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.AgentEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agent_id = 1;
  if (!this->_internal_agent_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_id());
  }

  // string agent_type = 2;
  if (!this->_internal_agent_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_type());
  }

  // string agent_version = 3;
  if (!this->_internal_agent_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_version());
  }

  // string execution_id = 4;
  if (!this->_internal_execution_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execution_id());
  }

  // .unhinged.cdc.AgentEventType event_type = 5;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  switch (event_data_case()) {
    // .unhinged.cdc.AgentStarted started = 10;
    case kStarted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.started_);
      break;
    }
    // .unhinged.cdc.AgentStepCompleted step_completed = 11;
    case kStepCompleted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.step_completed_);
      break;
    }
    // .unhinged.cdc.AgentCompleted completed = 12;
    case kCompleted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.completed_);
      break;
    }
    // .unhinged.cdc.AgentFailed failed = 13;
    case kFailed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.failed_);
      break;
    }
    // .unhinged.cdc.AgentToolUsed tool_used = 14;
    case kToolUsed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.tool_used_);
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgentEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentEvent::GetClassData() const { return &_class_data_; }


void AgentEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgentEvent*>(&to_msg);
  auto& from = static_cast<const AgentEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.AgentEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_agent_id().empty()) {
    _this->_internal_set_agent_id(from._internal_agent_id());
  }
  if (!from._internal_agent_type().empty()) {
    _this->_internal_set_agent_type(from._internal_agent_type());
  }
  if (!from._internal_agent_version().empty()) {
    _this->_internal_set_agent_version(from._internal_agent_version());
  }
  if (!from._internal_execution_id().empty()) {
    _this->_internal_set_execution_id(from._internal_execution_id());
  }
  if (from._internal_event_type() != 0) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  switch (from.event_data_case()) {
    case kStarted: {
      _this->_internal_mutable_started()->::unhinged::cdc::AgentStarted::MergeFrom(
          from._internal_started());
      break;
    }
    case kStepCompleted: {
      _this->_internal_mutable_step_completed()->::unhinged::cdc::AgentStepCompleted::MergeFrom(
          from._internal_step_completed());
      break;
    }
    case kCompleted: {
      _this->_internal_mutable_completed()->::unhinged::cdc::AgentCompleted::MergeFrom(
          from._internal_completed());
      break;
    }
    case kFailed: {
      _this->_internal_mutable_failed()->::unhinged::cdc::AgentFailed::MergeFrom(
          from._internal_failed());
      break;
    }
    case kToolUsed: {
      _this->_internal_mutable_tool_used()->::unhinged::cdc::AgentToolUsed::MergeFrom(
          from._internal_tool_used());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentEvent::CopyFrom(const AgentEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.AgentEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentEvent::IsInitialized() const {
  return true;
}

void AgentEvent::InternalSwap(AgentEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agent_id_, lhs_arena,
      &other->_impl_.agent_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agent_type_, lhs_arena,
      &other->_impl_.agent_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agent_version_, lhs_arena,
      &other->_impl_.agent_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.execution_id_, lhs_arena,
      &other->_impl_.execution_id_, rhs_arena
  );
  swap(_impl_.event_type_, other->_impl_.event_type_);
  swap(_impl_.event_data_, other->_impl_.event_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[14]);
}

// ===================================================================

class AgentStarted::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& initial_context(const AgentStarted* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
AgentStarted::_Internal::initial_context(const AgentStarted* msg) {
  return *msg->_impl_.initial_context_;
}
void AgentStarted::clear_initial_context() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_context_ != nullptr) {
    delete _impl_.initial_context_;
  }
  _impl_.initial_context_ = nullptr;
}
AgentStarted::AgentStarted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.AgentStarted)
}
AgentStarted::AgentStarted(const AgentStarted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgentStarted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.available_tools_){from._impl_.available_tools_}
    , decltype(_impl_.task_description_){}
    , decltype(_impl_.initial_context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_description().empty()) {
    _this->_impl_.task_description_.Set(from._internal_task_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_initial_context()) {
    _this->_impl_.initial_context_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.initial_context_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.AgentStarted)
}

inline void AgentStarted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.available_tools_){arena}
    , decltype(_impl_.task_description_){}
    , decltype(_impl_.initial_context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AgentStarted::~AgentStarted() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.AgentStarted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentStarted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.available_tools_.~RepeatedPtrField();
  _impl_.task_description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.initial_context_;
}

void AgentStarted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgentStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.AgentStarted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.available_tools_.Clear();
  _impl_.task_description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.initial_context_ != nullptr) {
    delete _impl_.initial_context_;
  }
  _impl_.initial_context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentStarted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_task_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AgentStarted.task_description"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct initial_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string available_tools = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_available_tools();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AgentStarted.available_tools"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentStarted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.AgentStarted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_description = 1;
  if (!this->_internal_task_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_description().data(), static_cast<int>(this->_internal_task_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AgentStarted.task_description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_description(), target);
  }

  // .google.protobuf.Struct initial_context = 2;
  if (this->_internal_has_initial_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::initial_context(this),
        _Internal::initial_context(this).GetCachedSize(), target, stream);
  }

  // repeated string available_tools = 3;
  for (int i = 0, n = this->_internal_available_tools_size(); i < n; i++) {
    const auto& s = this->_internal_available_tools(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AgentStarted.available_tools");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.AgentStarted)
  return target;
}

size_t AgentStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.AgentStarted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string available_tools = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.available_tools_.size());
  for (int i = 0, n = _impl_.available_tools_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.available_tools_.Get(i));
  }

  // string task_description = 1;
  if (!this->_internal_task_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_description());
  }

  // .google.protobuf.Struct initial_context = 2;
  if (this->_internal_has_initial_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentStarted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgentStarted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentStarted::GetClassData() const { return &_class_data_; }


void AgentStarted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgentStarted*>(&to_msg);
  auto& from = static_cast<const AgentStarted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.AgentStarted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.available_tools_.MergeFrom(from._impl_.available_tools_);
  if (!from._internal_task_description().empty()) {
    _this->_internal_set_task_description(from._internal_task_description());
  }
  if (from._internal_has_initial_context()) {
    _this->_internal_mutable_initial_context()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_initial_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentStarted::CopyFrom(const AgentStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.AgentStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentStarted::IsInitialized() const {
  return true;
}

void AgentStarted::InternalSwap(AgentStarted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.available_tools_.InternalSwap(&other->_impl_.available_tools_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_description_, lhs_arena,
      &other->_impl_.task_description_, rhs_arena
  );
  swap(_impl_.initial_context_, other->_impl_.initial_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentStarted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[15]);
}

// ===================================================================

class AgentStepCompleted::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& step_result(const AgentStepCompleted* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
AgentStepCompleted::_Internal::step_result(const AgentStepCompleted* msg) {
  return *msg->_impl_.step_result_;
}
void AgentStepCompleted::clear_step_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.step_result_ != nullptr) {
    delete _impl_.step_result_;
  }
  _impl_.step_result_ = nullptr;
}
AgentStepCompleted::AgentStepCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.AgentStepCompleted)
}
AgentStepCompleted::AgentStepCompleted(const AgentStepCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgentStepCompleted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.step_type_){}
    , decltype(_impl_.step_description_){}
    , decltype(_impl_.step_result_){nullptr}
    , decltype(_impl_.step_number_){}
    , decltype(_impl_.step_duration_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.step_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.step_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_step_type().empty()) {
    _this->_impl_.step_type_.Set(from._internal_step_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.step_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.step_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_step_description().empty()) {
    _this->_impl_.step_description_.Set(from._internal_step_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_step_result()) {
    _this->_impl_.step_result_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.step_result_);
  }
  ::memcpy(&_impl_.step_number_, &from._impl_.step_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.step_duration_ms_) -
    reinterpret_cast<char*>(&_impl_.step_number_)) + sizeof(_impl_.step_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.AgentStepCompleted)
}

inline void AgentStepCompleted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.step_type_){}
    , decltype(_impl_.step_description_){}
    , decltype(_impl_.step_result_){nullptr}
    , decltype(_impl_.step_number_){0}
    , decltype(_impl_.step_duration_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.step_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.step_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.step_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.step_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AgentStepCompleted::~AgentStepCompleted() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.AgentStepCompleted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentStepCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.step_type_.Destroy();
  _impl_.step_description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.step_result_;
}

void AgentStepCompleted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgentStepCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.AgentStepCompleted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.step_type_.ClearToEmpty();
  _impl_.step_description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.step_result_ != nullptr) {
    delete _impl_.step_result_;
  }
  _impl_.step_result_ = nullptr;
  ::memset(&_impl_.step_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.step_duration_ms_) -
      reinterpret_cast<char*>(&_impl_.step_number_)) + sizeof(_impl_.step_duration_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentStepCompleted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 step_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.step_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string step_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_step_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AgentStepCompleted.step_type"));
        } else
          goto handle_unusual;
        continue;
      // string step_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_step_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AgentStepCompleted.step_description"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct step_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_step_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float step_duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.step_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentStepCompleted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.AgentStepCompleted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 step_number = 1;
  if (this->_internal_step_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_step_number(), target);
  }

  // string step_type = 2;
  if (!this->_internal_step_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_step_type().data(), static_cast<int>(this->_internal_step_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AgentStepCompleted.step_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_step_type(), target);
  }

  // string step_description = 3;
  if (!this->_internal_step_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_step_description().data(), static_cast<int>(this->_internal_step_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AgentStepCompleted.step_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_step_description(), target);
  }

  // .google.protobuf.Struct step_result = 4;
  if (this->_internal_has_step_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::step_result(this),
        _Internal::step_result(this).GetCachedSize(), target, stream);
  }

  // float step_duration_ms = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_step_duration_ms = this->_internal_step_duration_ms();
  uint32_t raw_step_duration_ms;
  memcpy(&raw_step_duration_ms, &tmp_step_duration_ms, sizeof(tmp_step_duration_ms));
  if (raw_step_duration_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_step_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.AgentStepCompleted)
  return target;
}

size_t AgentStepCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.AgentStepCompleted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string step_type = 2;
  if (!this->_internal_step_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_step_type());
  }

  // string step_description = 3;
  if (!this->_internal_step_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_step_description());
  }

  // .google.protobuf.Struct step_result = 4;
  if (this->_internal_has_step_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.step_result_);
  }

  // int32 step_number = 1;
  if (this->_internal_step_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_step_number());
  }

  // float step_duration_ms = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_step_duration_ms = this->_internal_step_duration_ms();
  uint32_t raw_step_duration_ms;
  memcpy(&raw_step_duration_ms, &tmp_step_duration_ms, sizeof(tmp_step_duration_ms));
  if (raw_step_duration_ms != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentStepCompleted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgentStepCompleted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentStepCompleted::GetClassData() const { return &_class_data_; }


void AgentStepCompleted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgentStepCompleted*>(&to_msg);
  auto& from = static_cast<const AgentStepCompleted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.AgentStepCompleted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_step_type().empty()) {
    _this->_internal_set_step_type(from._internal_step_type());
  }
  if (!from._internal_step_description().empty()) {
    _this->_internal_set_step_description(from._internal_step_description());
  }
  if (from._internal_has_step_result()) {
    _this->_internal_mutable_step_result()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_step_result());
  }
  if (from._internal_step_number() != 0) {
    _this->_internal_set_step_number(from._internal_step_number());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_step_duration_ms = from._internal_step_duration_ms();
  uint32_t raw_step_duration_ms;
  memcpy(&raw_step_duration_ms, &tmp_step_duration_ms, sizeof(tmp_step_duration_ms));
  if (raw_step_duration_ms != 0) {
    _this->_internal_set_step_duration_ms(from._internal_step_duration_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentStepCompleted::CopyFrom(const AgentStepCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.AgentStepCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentStepCompleted::IsInitialized() const {
  return true;
}

void AgentStepCompleted::InternalSwap(AgentStepCompleted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.step_type_, lhs_arena,
      &other->_impl_.step_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.step_description_, lhs_arena,
      &other->_impl_.step_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentStepCompleted, _impl_.step_duration_ms_)
      + sizeof(AgentStepCompleted::_impl_.step_duration_ms_)
      - PROTOBUF_FIELD_OFFSET(AgentStepCompleted, _impl_.step_result_)>(
          reinterpret_cast<char*>(&_impl_.step_result_),
          reinterpret_cast<char*>(&other->_impl_.step_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentStepCompleted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[16]);
}

// ===================================================================

class AgentCompleted::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& final_result(const AgentCompleted* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
AgentCompleted::_Internal::final_result(const AgentCompleted* msg) {
  return *msg->_impl_.final_result_;
}
void AgentCompleted::clear_final_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.final_result_ != nullptr) {
    delete _impl_.final_result_;
  }
  _impl_.final_result_ = nullptr;
}
AgentCompleted::AgentCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.AgentCompleted)
}
AgentCompleted::AgentCompleted(const AgentCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgentCompleted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.completion_status_){}
    , decltype(_impl_.final_result_){nullptr}
    , decltype(_impl_.total_steps_){}
    , decltype(_impl_.total_duration_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.completion_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.completion_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_completion_status().empty()) {
    _this->_impl_.completion_status_.Set(from._internal_completion_status(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_final_result()) {
    _this->_impl_.final_result_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.final_result_);
  }
  ::memcpy(&_impl_.total_steps_, &from._impl_.total_steps_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_duration_ms_) -
    reinterpret_cast<char*>(&_impl_.total_steps_)) + sizeof(_impl_.total_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.AgentCompleted)
}

inline void AgentCompleted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.completion_status_){}
    , decltype(_impl_.final_result_){nullptr}
    , decltype(_impl_.total_steps_){0}
    , decltype(_impl_.total_duration_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.completion_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.completion_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AgentCompleted::~AgentCompleted() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.AgentCompleted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.completion_status_.Destroy();
  if (this != internal_default_instance()) delete _impl_.final_result_;
}

void AgentCompleted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgentCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.AgentCompleted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.completion_status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.final_result_ != nullptr) {
    delete _impl_.final_result_;
  }
  _impl_.final_result_ = nullptr;
  ::memset(&_impl_.total_steps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_duration_ms_) -
      reinterpret_cast<char*>(&_impl_.total_steps_)) + sizeof(_impl_.total_duration_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentCompleted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string completion_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_completion_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AgentCompleted.completion_status"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct final_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_steps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float total_duration_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.total_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentCompleted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.AgentCompleted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string completion_status = 1;
  if (!this->_internal_completion_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_completion_status().data(), static_cast<int>(this->_internal_completion_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AgentCompleted.completion_status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_completion_status(), target);
  }

  // .google.protobuf.Struct final_result = 2;
  if (this->_internal_has_final_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::final_result(this),
        _Internal::final_result(this).GetCachedSize(), target, stream);
  }

  // int32 total_steps = 3;
  if (this->_internal_total_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_steps(), target);
  }

  // float total_duration_ms = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_total_duration_ms = this->_internal_total_duration_ms();
  uint32_t raw_total_duration_ms;
  memcpy(&raw_total_duration_ms, &tmp_total_duration_ms, sizeof(tmp_total_duration_ms));
  if (raw_total_duration_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_total_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.AgentCompleted)
  return target;
}

size_t AgentCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.AgentCompleted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string completion_status = 1;
  if (!this->_internal_completion_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_completion_status());
  }

  // .google.protobuf.Struct final_result = 2;
  if (this->_internal_has_final_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.final_result_);
  }

  // int32 total_steps = 3;
  if (this->_internal_total_steps() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_steps());
  }

  // float total_duration_ms = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_total_duration_ms = this->_internal_total_duration_ms();
  uint32_t raw_total_duration_ms;
  memcpy(&raw_total_duration_ms, &tmp_total_duration_ms, sizeof(tmp_total_duration_ms));
  if (raw_total_duration_ms != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentCompleted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgentCompleted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentCompleted::GetClassData() const { return &_class_data_; }


void AgentCompleted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgentCompleted*>(&to_msg);
  auto& from = static_cast<const AgentCompleted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.AgentCompleted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_completion_status().empty()) {
    _this->_internal_set_completion_status(from._internal_completion_status());
  }
  if (from._internal_has_final_result()) {
    _this->_internal_mutable_final_result()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_final_result());
  }
  if (from._internal_total_steps() != 0) {
    _this->_internal_set_total_steps(from._internal_total_steps());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_total_duration_ms = from._internal_total_duration_ms();
  uint32_t raw_total_duration_ms;
  memcpy(&raw_total_duration_ms, &tmp_total_duration_ms, sizeof(tmp_total_duration_ms));
  if (raw_total_duration_ms != 0) {
    _this->_internal_set_total_duration_ms(from._internal_total_duration_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentCompleted::CopyFrom(const AgentCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.AgentCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentCompleted::IsInitialized() const {
  return true;
}

void AgentCompleted::InternalSwap(AgentCompleted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.completion_status_, lhs_arena,
      &other->_impl_.completion_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentCompleted, _impl_.total_duration_ms_)
      + sizeof(AgentCompleted::_impl_.total_duration_ms_)
      - PROTOBUF_FIELD_OFFSET(AgentCompleted, _impl_.final_result_)>(
          reinterpret_cast<char*>(&_impl_.final_result_),
          reinterpret_cast<char*>(&other->_impl_.final_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentCompleted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[17]);
}

// ===================================================================

class AgentFailed::_Internal {
 public:
};

AgentFailed::AgentFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.AgentFailed)
}
AgentFailed::AgentFailed(const AgentFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgentFailed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.failure_reason_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.failed_at_step_){}
    , decltype(_impl_.is_recoverable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.failure_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.failure_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_failure_reason().empty()) {
    _this->_impl_.failure_reason_.Set(from._internal_failure_reason(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.failed_at_step_, &from._impl_.failed_at_step_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_recoverable_) -
    reinterpret_cast<char*>(&_impl_.failed_at_step_)) + sizeof(_impl_.is_recoverable_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.AgentFailed)
}

inline void AgentFailed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.failure_reason_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.failed_at_step_){0}
    , decltype(_impl_.is_recoverable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.failure_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.failure_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AgentFailed::~AgentFailed() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.AgentFailed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentFailed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.failure_reason_.Destroy();
  _impl_.error_message_.Destroy();
}

void AgentFailed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgentFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.AgentFailed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.failure_reason_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.failed_at_step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_recoverable_) -
      reinterpret_cast<char*>(&_impl_.failed_at_step_)) + sizeof(_impl_.is_recoverable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentFailed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string failure_reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_failure_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AgentFailed.failure_reason"));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AgentFailed.error_message"));
        } else
          goto handle_unusual;
        continue;
      // int32 failed_at_step = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.failed_at_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_recoverable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_recoverable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentFailed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.AgentFailed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string failure_reason = 1;
  if (!this->_internal_failure_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failure_reason().data(), static_cast<int>(this->_internal_failure_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AgentFailed.failure_reason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_failure_reason(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AgentFailed.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  // int32 failed_at_step = 3;
  if (this->_internal_failed_at_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_failed_at_step(), target);
  }

  // bool is_recoverable = 4;
  if (this->_internal_is_recoverable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_recoverable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.AgentFailed)
  return target;
}

size_t AgentFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.AgentFailed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string failure_reason = 1;
  if (!this->_internal_failure_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failure_reason());
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int32 failed_at_step = 3;
  if (this->_internal_failed_at_step() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_failed_at_step());
  }

  // bool is_recoverable = 4;
  if (this->_internal_is_recoverable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentFailed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgentFailed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentFailed::GetClassData() const { return &_class_data_; }


void AgentFailed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgentFailed*>(&to_msg);
  auto& from = static_cast<const AgentFailed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.AgentFailed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_failure_reason().empty()) {
    _this->_internal_set_failure_reason(from._internal_failure_reason());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_failed_at_step() != 0) {
    _this->_internal_set_failed_at_step(from._internal_failed_at_step());
  }
  if (from._internal_is_recoverable() != 0) {
    _this->_internal_set_is_recoverable(from._internal_is_recoverable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentFailed::CopyFrom(const AgentFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.AgentFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentFailed::IsInitialized() const {
  return true;
}

void AgentFailed::InternalSwap(AgentFailed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.failure_reason_, lhs_arena,
      &other->_impl_.failure_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentFailed, _impl_.is_recoverable_)
      + sizeof(AgentFailed::_impl_.is_recoverable_)
      - PROTOBUF_FIELD_OFFSET(AgentFailed, _impl_.failed_at_step_)>(
          reinterpret_cast<char*>(&_impl_.failed_at_step_),
          reinterpret_cast<char*>(&other->_impl_.failed_at_step_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentFailed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[18]);
}

// ===================================================================

class AgentToolUsed::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& tool_input(const AgentToolUsed* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& tool_output(const AgentToolUsed* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
AgentToolUsed::_Internal::tool_input(const AgentToolUsed* msg) {
  return *msg->_impl_.tool_input_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
AgentToolUsed::_Internal::tool_output(const AgentToolUsed* msg) {
  return *msg->_impl_.tool_output_;
}
void AgentToolUsed::clear_tool_input() {
  if (GetArenaForAllocation() == nullptr && _impl_.tool_input_ != nullptr) {
    delete _impl_.tool_input_;
  }
  _impl_.tool_input_ = nullptr;
}
void AgentToolUsed::clear_tool_output() {
  if (GetArenaForAllocation() == nullptr && _impl_.tool_output_ != nullptr) {
    delete _impl_.tool_output_;
  }
  _impl_.tool_output_ = nullptr;
}
AgentToolUsed::AgentToolUsed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.AgentToolUsed)
}
AgentToolUsed::AgentToolUsed(const AgentToolUsed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgentToolUsed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_name_){}
    , decltype(_impl_.tool_version_){}
    , decltype(_impl_.tool_input_){nullptr}
    , decltype(_impl_.tool_output_){nullptr}
    , decltype(_impl_.tool_duration_ms_){}
    , decltype(_impl_.tool_success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tool_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tool_name().empty()) {
    _this->_impl_.tool_name_.Set(from._internal_tool_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tool_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tool_version().empty()) {
    _this->_impl_.tool_version_.Set(from._internal_tool_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tool_input()) {
    _this->_impl_.tool_input_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.tool_input_);
  }
  if (from._internal_has_tool_output()) {
    _this->_impl_.tool_output_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.tool_output_);
  }
  ::memcpy(&_impl_.tool_duration_ms_, &from._impl_.tool_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tool_success_) -
    reinterpret_cast<char*>(&_impl_.tool_duration_ms_)) + sizeof(_impl_.tool_success_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.AgentToolUsed)
}

inline void AgentToolUsed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_name_){}
    , decltype(_impl_.tool_version_){}
    , decltype(_impl_.tool_input_){nullptr}
    , decltype(_impl_.tool_output_){nullptr}
    , decltype(_impl_.tool_duration_ms_){0}
    , decltype(_impl_.tool_success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tool_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tool_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AgentToolUsed::~AgentToolUsed() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.AgentToolUsed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentToolUsed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tool_name_.Destroy();
  _impl_.tool_version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tool_input_;
  if (this != internal_default_instance()) delete _impl_.tool_output_;
}

void AgentToolUsed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgentToolUsed::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.AgentToolUsed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tool_name_.ClearToEmpty();
  _impl_.tool_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.tool_input_ != nullptr) {
    delete _impl_.tool_input_;
  }
  _impl_.tool_input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tool_output_ != nullptr) {
    delete _impl_.tool_output_;
  }
  _impl_.tool_output_ = nullptr;
  ::memset(&_impl_.tool_duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tool_success_) -
      reinterpret_cast<char*>(&_impl_.tool_duration_ms_)) + sizeof(_impl_.tool_success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentToolUsed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tool_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tool_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AgentToolUsed.tool_name"));
        } else
          goto handle_unusual;
        continue;
      // string tool_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tool_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AgentToolUsed.tool_version"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct tool_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tool_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct tool_output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tool_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float tool_duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.tool_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool tool_success = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.tool_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentToolUsed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.AgentToolUsed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tool_name = 1;
  if (!this->_internal_tool_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tool_name().data(), static_cast<int>(this->_internal_tool_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AgentToolUsed.tool_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tool_name(), target);
  }

  // string tool_version = 2;
  if (!this->_internal_tool_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tool_version().data(), static_cast<int>(this->_internal_tool_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AgentToolUsed.tool_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tool_version(), target);
  }

  // .google.protobuf.Struct tool_input = 3;
  if (this->_internal_has_tool_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tool_input(this),
        _Internal::tool_input(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct tool_output = 4;
  if (this->_internal_has_tool_output()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tool_output(this),
        _Internal::tool_output(this).GetCachedSize(), target, stream);
  }

  // float tool_duration_ms = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tool_duration_ms = this->_internal_tool_duration_ms();
  uint32_t raw_tool_duration_ms;
  memcpy(&raw_tool_duration_ms, &tmp_tool_duration_ms, sizeof(tmp_tool_duration_ms));
  if (raw_tool_duration_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_tool_duration_ms(), target);
  }

  // bool tool_success = 6;
  if (this->_internal_tool_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_tool_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.AgentToolUsed)
  return target;
}

size_t AgentToolUsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.AgentToolUsed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tool_name = 1;
  if (!this->_internal_tool_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tool_name());
  }

  // string tool_version = 2;
  if (!this->_internal_tool_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tool_version());
  }

  // .google.protobuf.Struct tool_input = 3;
  if (this->_internal_has_tool_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tool_input_);
  }

  // .google.protobuf.Struct tool_output = 4;
  if (this->_internal_has_tool_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tool_output_);
  }

  // float tool_duration_ms = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tool_duration_ms = this->_internal_tool_duration_ms();
  uint32_t raw_tool_duration_ms;
  memcpy(&raw_tool_duration_ms, &tmp_tool_duration_ms, sizeof(tmp_tool_duration_ms));
  if (raw_tool_duration_ms != 0) {
    total_size += 1 + 4;
  }

  // bool tool_success = 6;
  if (this->_internal_tool_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentToolUsed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgentToolUsed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentToolUsed::GetClassData() const { return &_class_data_; }


void AgentToolUsed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgentToolUsed*>(&to_msg);
  auto& from = static_cast<const AgentToolUsed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.AgentToolUsed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tool_name().empty()) {
    _this->_internal_set_tool_name(from._internal_tool_name());
  }
  if (!from._internal_tool_version().empty()) {
    _this->_internal_set_tool_version(from._internal_tool_version());
  }
  if (from._internal_has_tool_input()) {
    _this->_internal_mutable_tool_input()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_tool_input());
  }
  if (from._internal_has_tool_output()) {
    _this->_internal_mutable_tool_output()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_tool_output());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tool_duration_ms = from._internal_tool_duration_ms();
  uint32_t raw_tool_duration_ms;
  memcpy(&raw_tool_duration_ms, &tmp_tool_duration_ms, sizeof(tmp_tool_duration_ms));
  if (raw_tool_duration_ms != 0) {
    _this->_internal_set_tool_duration_ms(from._internal_tool_duration_ms());
  }
  if (from._internal_tool_success() != 0) {
    _this->_internal_set_tool_success(from._internal_tool_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentToolUsed::CopyFrom(const AgentToolUsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.AgentToolUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentToolUsed::IsInitialized() const {
  return true;
}

void AgentToolUsed::InternalSwap(AgentToolUsed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tool_name_, lhs_arena,
      &other->_impl_.tool_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tool_version_, lhs_arena,
      &other->_impl_.tool_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentToolUsed, _impl_.tool_success_)
      + sizeof(AgentToolUsed::_impl_.tool_success_)
      - PROTOBUF_FIELD_OFFSET(AgentToolUsed, _impl_.tool_input_)>(
          reinterpret_cast<char*>(&_impl_.tool_input_),
          reinterpret_cast<char*>(&other->_impl_.tool_input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentToolUsed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[19]);
}

// ===================================================================

class SessionEvent::_Internal {
 public:
  static const ::unhinged::cdc::SessionStarted& started(const SessionEvent* msg);
  static const ::unhinged::cdc::SessionEnded& ended(const SessionEvent* msg);
  static const ::unhinged::cdc::SessionContextAccessed& context_accessed(const SessionEvent* msg);
  static const ::unhinged::cdc::SessionHeartbeat& heartbeat(const SessionEvent* msg);
};

const ::unhinged::cdc::SessionStarted&
SessionEvent::_Internal::started(const SessionEvent* msg) {
  return *msg->_impl_.event_data_.started_;
}
const ::unhinged::cdc::SessionEnded&
SessionEvent::_Internal::ended(const SessionEvent* msg) {
  return *msg->_impl_.event_data_.ended_;
}
const ::unhinged::cdc::SessionContextAccessed&
SessionEvent::_Internal::context_accessed(const SessionEvent* msg) {
  return *msg->_impl_.event_data_.context_accessed_;
}
const ::unhinged::cdc::SessionHeartbeat&
SessionEvent::_Internal::heartbeat(const SessionEvent* msg) {
  return *msg->_impl_.event_data_.heartbeat_;
}
void SessionEvent::set_allocated_started(::unhinged::cdc::SessionStarted* started) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (started) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(started);
    if (message_arena != submessage_arena) {
      started = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started, submessage_arena);
    }
    set_has_started();
    _impl_.event_data_.started_ = started;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.SessionEvent.started)
}
void SessionEvent::set_allocated_ended(::unhinged::cdc::SessionEnded* ended) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (ended) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ended);
    if (message_arena != submessage_arena) {
      ended = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ended, submessage_arena);
    }
    set_has_ended();
    _impl_.event_data_.ended_ = ended;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.SessionEvent.ended)
}
void SessionEvent::set_allocated_context_accessed(::unhinged::cdc::SessionContextAccessed* context_accessed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (context_accessed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(context_accessed);
    if (message_arena != submessage_arena) {
      context_accessed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context_accessed, submessage_arena);
    }
    set_has_context_accessed();
    _impl_.event_data_.context_accessed_ = context_accessed;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.SessionEvent.context_accessed)
}
void SessionEvent::set_allocated_heartbeat(::unhinged::cdc::SessionHeartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    _impl_.event_data_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.SessionEvent.heartbeat)
}
SessionEvent::SessionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.SessionEvent)
}
SessionEvent::SessionEvent(const SessionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.event_type_ = from._impl_.event_type_;
  clear_has_event_data();
  switch (from.event_data_case()) {
    case kStarted: {
      _this->_internal_mutable_started()->::unhinged::cdc::SessionStarted::MergeFrom(
          from._internal_started());
      break;
    }
    case kEnded: {
      _this->_internal_mutable_ended()->::unhinged::cdc::SessionEnded::MergeFrom(
          from._internal_ended());
      break;
    }
    case kContextAccessed: {
      _this->_internal_mutable_context_accessed()->::unhinged::cdc::SessionContextAccessed::MergeFrom(
          from._internal_context_accessed());
      break;
    }
    case kHeartbeat: {
      _this->_internal_mutable_heartbeat()->::unhinged::cdc::SessionHeartbeat::MergeFrom(
          from._internal_heartbeat());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.SessionEvent)
}

inline void SessionEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_event_data();
}

SessionEvent::~SessionEvent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.SessionEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_id_.Destroy();
  if (has_event_data()) {
    clear_event_data();
  }
}

void SessionEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionEvent::clear_event_data() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.cdc.SessionEvent)
  switch (event_data_case()) {
    case kStarted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.started_;
      }
      break;
    }
    case kEnded: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.ended_;
      }
      break;
    }
    case kContextAccessed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.context_accessed_;
      }
      break;
    }
    case kHeartbeat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.heartbeat_;
      }
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_DATA_NOT_SET;
}


void SessionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.SessionEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_id_.ClearToEmpty();
  _impl_.event_type_ = 0;
  clear_event_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SessionEvent.session_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SessionEventType event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::unhinged::cdc::SessionEventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SessionStarted started = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_started(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SessionEnded ended = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ended(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SessionContextAccessed context_accessed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_context_accessed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SessionHeartbeat heartbeat = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.SessionEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SessionEvent.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // .unhinged.cdc.SessionEventType event_type = 2;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_type(), target);
  }

  // .unhinged.cdc.SessionStarted started = 10;
  if (_internal_has_started()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::started(this),
        _Internal::started(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.SessionEnded ended = 11;
  if (_internal_has_ended()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ended(this),
        _Internal::ended(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.SessionContextAccessed context_accessed = 12;
  if (_internal_has_context_accessed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::context_accessed(this),
        _Internal::context_accessed(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.SessionHeartbeat heartbeat = 13;
  if (_internal_has_heartbeat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::heartbeat(this),
        _Internal::heartbeat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.SessionEvent)
  return target;
}

size_t SessionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.SessionEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .unhinged.cdc.SessionEventType event_type = 2;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  switch (event_data_case()) {
    // .unhinged.cdc.SessionStarted started = 10;
    case kStarted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.started_);
      break;
    }
    // .unhinged.cdc.SessionEnded ended = 11;
    case kEnded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.ended_);
      break;
    }
    // .unhinged.cdc.SessionContextAccessed context_accessed = 12;
    case kContextAccessed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.context_accessed_);
      break;
    }
    // .unhinged.cdc.SessionHeartbeat heartbeat = 13;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.heartbeat_);
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionEvent::GetClassData() const { return &_class_data_; }


void SessionEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionEvent*>(&to_msg);
  auto& from = static_cast<const SessionEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.SessionEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_event_type() != 0) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  switch (from.event_data_case()) {
    case kStarted: {
      _this->_internal_mutable_started()->::unhinged::cdc::SessionStarted::MergeFrom(
          from._internal_started());
      break;
    }
    case kEnded: {
      _this->_internal_mutable_ended()->::unhinged::cdc::SessionEnded::MergeFrom(
          from._internal_ended());
      break;
    }
    case kContextAccessed: {
      _this->_internal_mutable_context_accessed()->::unhinged::cdc::SessionContextAccessed::MergeFrom(
          from._internal_context_accessed());
      break;
    }
    case kHeartbeat: {
      _this->_internal_mutable_heartbeat()->::unhinged::cdc::SessionHeartbeat::MergeFrom(
          from._internal_heartbeat());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionEvent::CopyFrom(const SessionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.SessionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionEvent::IsInitialized() const {
  return true;
}

void SessionEvent::InternalSwap(SessionEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  swap(_impl_.event_type_, other->_impl_.event_type_);
  swap(_impl_.event_data_, other->_impl_.event_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[20]);
}

// ===================================================================

class SessionStarted::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& session_metadata(const SessionStarted* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
SessionStarted::_Internal::session_metadata(const SessionStarted* msg) {
  return *msg->_impl_.session_metadata_;
}
void SessionStarted::clear_session_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.session_metadata_ != nullptr) {
    delete _impl_.session_metadata_;
  }
  _impl_.session_metadata_ = nullptr;
}
SessionStarted::SessionStarted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.SessionStarted)
}
SessionStarted::SessionStarted(const SessionStarted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionStarted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_agent_){}
    , decltype(_impl_.ip_address_){}
    , decltype(_impl_.session_metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_agent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_agent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_agent().empty()) {
    _this->_impl_.user_agent_.Set(from._internal_user_agent(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    _this->_impl_.ip_address_.Set(from._internal_ip_address(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_session_metadata()) {
    _this->_impl_.session_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.session_metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.SessionStarted)
}

inline void SessionStarted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_agent_){}
    , decltype(_impl_.ip_address_){}
    , decltype(_impl_.session_metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_agent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_agent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionStarted::~SessionStarted() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.SessionStarted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionStarted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_agent_.Destroy();
  _impl_.ip_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.session_metadata_;
}

void SessionStarted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.SessionStarted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_agent_.ClearToEmpty();
  _impl_.ip_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.session_metadata_ != nullptr) {
    delete _impl_.session_metadata_;
  }
  _impl_.session_metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionStarted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_agent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_agent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SessionStarted.user_agent"));
        } else
          goto handle_unusual;
        continue;
      // string ip_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SessionStarted.ip_address"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct session_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionStarted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.SessionStarted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_agent = 1;
  if (!this->_internal_user_agent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_agent().data(), static_cast<int>(this->_internal_user_agent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SessionStarted.user_agent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_agent(), target);
  }

  // string ip_address = 2;
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SessionStarted.ip_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip_address(), target);
  }

  // .google.protobuf.Struct session_metadata = 3;
  if (this->_internal_has_session_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::session_metadata(this),
        _Internal::session_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.SessionStarted)
  return target;
}

size_t SessionStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.SessionStarted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_agent = 1;
  if (!this->_internal_user_agent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_agent());
  }

  // string ip_address = 2;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // .google.protobuf.Struct session_metadata = 3;
  if (this->_internal_has_session_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.session_metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionStarted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionStarted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionStarted::GetClassData() const { return &_class_data_; }


void SessionStarted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionStarted*>(&to_msg);
  auto& from = static_cast<const SessionStarted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.SessionStarted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_agent().empty()) {
    _this->_internal_set_user_agent(from._internal_user_agent());
  }
  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (from._internal_has_session_metadata()) {
    _this->_internal_mutable_session_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_session_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionStarted::CopyFrom(const SessionStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.SessionStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStarted::IsInitialized() const {
  return true;
}

void SessionStarted::InternalSwap(SessionStarted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_agent_, lhs_arena,
      &other->_impl_.user_agent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_address_, lhs_arena,
      &other->_impl_.ip_address_, rhs_arena
  );
  swap(_impl_.session_metadata_, other->_impl_.session_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionStarted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[21]);
}

// ===================================================================

class SessionEnded::_Internal {
 public:
};

SessionEnded::SessionEnded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.SessionEnded)
}
SessionEnded::SessionEnded(const SessionEnded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionEnded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.end_reason_){}
    , decltype(_impl_.session_duration_ms_){}
    , decltype(_impl_.interactions_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.end_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_end_reason().empty()) {
    _this->_impl_.end_reason_.Set(from._internal_end_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.session_duration_ms_, &from._impl_.session_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.interactions_count_) -
    reinterpret_cast<char*>(&_impl_.session_duration_ms_)) + sizeof(_impl_.interactions_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.SessionEnded)
}

inline void SessionEnded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.end_reason_){}
    , decltype(_impl_.session_duration_ms_){0}
    , decltype(_impl_.interactions_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.end_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionEnded::~SessionEnded() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.SessionEnded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionEnded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.end_reason_.Destroy();
}

void SessionEnded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionEnded::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.SessionEnded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.end_reason_.ClearToEmpty();
  ::memset(&_impl_.session_duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.interactions_count_) -
      reinterpret_cast<char*>(&_impl_.session_duration_ms_)) + sizeof(_impl_.interactions_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionEnded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string end_reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_end_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SessionEnded.end_reason"));
        } else
          goto handle_unusual;
        continue;
      // float session_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.session_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 interactions_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.interactions_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionEnded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.SessionEnded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string end_reason = 1;
  if (!this->_internal_end_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_reason().data(), static_cast<int>(this->_internal_end_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SessionEnded.end_reason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_end_reason(), target);
  }

  // float session_duration_ms = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_session_duration_ms = this->_internal_session_duration_ms();
  uint32_t raw_session_duration_ms;
  memcpy(&raw_session_duration_ms, &tmp_session_duration_ms, sizeof(tmp_session_duration_ms));
  if (raw_session_duration_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_session_duration_ms(), target);
  }

  // int32 interactions_count = 3;
  if (this->_internal_interactions_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_interactions_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.SessionEnded)
  return target;
}

size_t SessionEnded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.SessionEnded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string end_reason = 1;
  if (!this->_internal_end_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_reason());
  }

  // float session_duration_ms = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_session_duration_ms = this->_internal_session_duration_ms();
  uint32_t raw_session_duration_ms;
  memcpy(&raw_session_duration_ms, &tmp_session_duration_ms, sizeof(tmp_session_duration_ms));
  if (raw_session_duration_ms != 0) {
    total_size += 1 + 4;
  }

  // int32 interactions_count = 3;
  if (this->_internal_interactions_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_interactions_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionEnded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionEnded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionEnded::GetClassData() const { return &_class_data_; }


void SessionEnded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionEnded*>(&to_msg);
  auto& from = static_cast<const SessionEnded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.SessionEnded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_end_reason().empty()) {
    _this->_internal_set_end_reason(from._internal_end_reason());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_session_duration_ms = from._internal_session_duration_ms();
  uint32_t raw_session_duration_ms;
  memcpy(&raw_session_duration_ms, &tmp_session_duration_ms, sizeof(tmp_session_duration_ms));
  if (raw_session_duration_ms != 0) {
    _this->_internal_set_session_duration_ms(from._internal_session_duration_ms());
  }
  if (from._internal_interactions_count() != 0) {
    _this->_internal_set_interactions_count(from._internal_interactions_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionEnded::CopyFrom(const SessionEnded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.SessionEnded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionEnded::IsInitialized() const {
  return true;
}

void SessionEnded::InternalSwap(SessionEnded* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.end_reason_, lhs_arena,
      &other->_impl_.end_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionEnded, _impl_.interactions_count_)
      + sizeof(SessionEnded::_impl_.interactions_count_)
      - PROTOBUF_FIELD_OFFSET(SessionEnded, _impl_.session_duration_ms_)>(
          reinterpret_cast<char*>(&_impl_.session_duration_ms_),
          reinterpret_cast<char*>(&other->_impl_.session_duration_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionEnded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[22]);
}

// ===================================================================

class SessionContextAccessed::_Internal {
 public:
};

SessionContextAccessed::SessionContextAccessed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.SessionContextAccessed)
}
SessionContextAccessed::SessionContextAccessed(const SessionContextAccessed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionContextAccessed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.document_types_){from._impl_.document_types_}
    , decltype(_impl_.access_reason_){}
    , decltype(_impl_.documents_returned_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.access_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_access_reason().empty()) {
    _this->_impl_.access_reason_.Set(from._internal_access_reason(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.documents_returned_ = from._impl_.documents_returned_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.SessionContextAccessed)
}

inline void SessionContextAccessed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.document_types_){arena}
    , decltype(_impl_.access_reason_){}
    , decltype(_impl_.documents_returned_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.access_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionContextAccessed::~SessionContextAccessed() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.SessionContextAccessed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionContextAccessed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_types_.~RepeatedPtrField();
  _impl_.access_reason_.Destroy();
}

void SessionContextAccessed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionContextAccessed::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.SessionContextAccessed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_types_.Clear();
  _impl_.access_reason_.ClearToEmpty();
  _impl_.documents_returned_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionContextAccessed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string document_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_document_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SessionContextAccessed.document_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 documents_returned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.documents_returned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string access_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_access_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SessionContextAccessed.access_reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionContextAccessed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.SessionContextAccessed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string document_types = 1;
  for (int i = 0, n = this->_internal_document_types_size(); i < n; i++) {
    const auto& s = this->_internal_document_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SessionContextAccessed.document_types");
    target = stream->WriteString(1, s, target);
  }

  // int32 documents_returned = 2;
  if (this->_internal_documents_returned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_documents_returned(), target);
  }

  // string access_reason = 3;
  if (!this->_internal_access_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_reason().data(), static_cast<int>(this->_internal_access_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SessionContextAccessed.access_reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.SessionContextAccessed)
  return target;
}

size_t SessionContextAccessed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.SessionContextAccessed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string document_types = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.document_types_.size());
  for (int i = 0, n = _impl_.document_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.document_types_.Get(i));
  }

  // string access_reason = 3;
  if (!this->_internal_access_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_reason());
  }

  // int32 documents_returned = 2;
  if (this->_internal_documents_returned() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_documents_returned());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionContextAccessed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionContextAccessed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionContextAccessed::GetClassData() const { return &_class_data_; }


void SessionContextAccessed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionContextAccessed*>(&to_msg);
  auto& from = static_cast<const SessionContextAccessed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.SessionContextAccessed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.document_types_.MergeFrom(from._impl_.document_types_);
  if (!from._internal_access_reason().empty()) {
    _this->_internal_set_access_reason(from._internal_access_reason());
  }
  if (from._internal_documents_returned() != 0) {
    _this->_internal_set_documents_returned(from._internal_documents_returned());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionContextAccessed::CopyFrom(const SessionContextAccessed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.SessionContextAccessed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionContextAccessed::IsInitialized() const {
  return true;
}

void SessionContextAccessed::InternalSwap(SessionContextAccessed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.document_types_.InternalSwap(&other->_impl_.document_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.access_reason_, lhs_arena,
      &other->_impl_.access_reason_, rhs_arena
  );
  swap(_impl_.documents_returned_, other->_impl_.documents_returned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionContextAccessed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[23]);
}

// ===================================================================

class SessionHeartbeat::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_activity(const SessionHeartbeat* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SessionHeartbeat::_Internal::last_activity(const SessionHeartbeat* msg) {
  return *msg->_impl_.last_activity_;
}
void SessionHeartbeat::clear_last_activity() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_activity_ != nullptr) {
    delete _impl_.last_activity_;
  }
  _impl_.last_activity_ = nullptr;
}
SessionHeartbeat::SessionHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.SessionHeartbeat)
}
SessionHeartbeat::SessionHeartbeat(const SessionHeartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionHeartbeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.last_activity_){nullptr}
    , decltype(_impl_.is_active_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_activity()) {
    _this->_impl_.last_activity_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_activity_);
  }
  _this->_impl_.is_active_ = from._impl_.is_active_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.SessionHeartbeat)
}

inline void SessionHeartbeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.last_activity_){nullptr}
    , decltype(_impl_.is_active_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SessionHeartbeat::~SessionHeartbeat() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.SessionHeartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionHeartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.last_activity_;
}

void SessionHeartbeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.SessionHeartbeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.last_activity_ != nullptr) {
    delete _impl_.last_activity_;
  }
  _impl_.last_activity_ = nullptr;
  _impl_.is_active_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionHeartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp last_activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_activity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionHeartbeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.SessionHeartbeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp last_activity = 1;
  if (this->_internal_has_last_activity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::last_activity(this),
        _Internal::last_activity(this).GetCachedSize(), target, stream);
  }

  // bool is_active = 2;
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.SessionHeartbeat)
  return target;
}

size_t SessionHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.SessionHeartbeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp last_activity = 1;
  if (this->_internal_has_last_activity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_activity_);
  }

  // bool is_active = 2;
  if (this->_internal_is_active() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionHeartbeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionHeartbeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionHeartbeat::GetClassData() const { return &_class_data_; }


void SessionHeartbeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionHeartbeat*>(&to_msg);
  auto& from = static_cast<const SessionHeartbeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.SessionHeartbeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_last_activity()) {
    _this->_internal_mutable_last_activity()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_activity());
  }
  if (from._internal_is_active() != 0) {
    _this->_internal_set_is_active(from._internal_is_active());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionHeartbeat::CopyFrom(const SessionHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.SessionHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionHeartbeat::IsInitialized() const {
  return true;
}

void SessionHeartbeat::InternalSwap(SessionHeartbeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionHeartbeat, _impl_.is_active_)
      + sizeof(SessionHeartbeat::_impl_.is_active_)
      - PROTOBUF_FIELD_OFFSET(SessionHeartbeat, _impl_.last_activity_)>(
          reinterpret_cast<char*>(&_impl_.last_activity_),
          reinterpret_cast<char*>(&other->_impl_.last_activity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionHeartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[24]);
}

// ===================================================================

class SystemEvent::_Internal {
 public:
  static const ::unhinged::cdc::HealthCheck& health_check(const SystemEvent* msg);
  static const ::unhinged::cdc::MetricReported& metric(const SystemEvent* msg);
  static const ::unhinged::cdc::AlertTriggered& alert(const SystemEvent* msg);
  static const ::unhinged::cdc::ServiceStarted& service_started(const SystemEvent* msg);
  static const ::unhinged::cdc::ServiceStopped& service_stopped(const SystemEvent* msg);
};

const ::unhinged::cdc::HealthCheck&
SystemEvent::_Internal::health_check(const SystemEvent* msg) {
  return *msg->_impl_.event_data_.health_check_;
}
const ::unhinged::cdc::MetricReported&
SystemEvent::_Internal::metric(const SystemEvent* msg) {
  return *msg->_impl_.event_data_.metric_;
}
const ::unhinged::cdc::AlertTriggered&
SystemEvent::_Internal::alert(const SystemEvent* msg) {
  return *msg->_impl_.event_data_.alert_;
}
const ::unhinged::cdc::ServiceStarted&
SystemEvent::_Internal::service_started(const SystemEvent* msg) {
  return *msg->_impl_.event_data_.service_started_;
}
const ::unhinged::cdc::ServiceStopped&
SystemEvent::_Internal::service_stopped(const SystemEvent* msg) {
  return *msg->_impl_.event_data_.service_stopped_;
}
void SystemEvent::set_allocated_health_check(::unhinged::cdc::HealthCheck* health_check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (health_check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(health_check);
    if (message_arena != submessage_arena) {
      health_check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, health_check, submessage_arena);
    }
    set_has_health_check();
    _impl_.event_data_.health_check_ = health_check;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.SystemEvent.health_check)
}
void SystemEvent::set_allocated_metric(::unhinged::cdc::MetricReported* metric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (metric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metric);
    if (message_arena != submessage_arena) {
      metric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }
    set_has_metric();
    _impl_.event_data_.metric_ = metric;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.SystemEvent.metric)
}
void SystemEvent::set_allocated_alert(::unhinged::cdc::AlertTriggered* alert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (alert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alert);
    if (message_arena != submessage_arena) {
      alert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alert, submessage_arena);
    }
    set_has_alert();
    _impl_.event_data_.alert_ = alert;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.SystemEvent.alert)
}
void SystemEvent::set_allocated_service_started(::unhinged::cdc::ServiceStarted* service_started) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (service_started) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(service_started);
    if (message_arena != submessage_arena) {
      service_started = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_started, submessage_arena);
    }
    set_has_service_started();
    _impl_.event_data_.service_started_ = service_started;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.SystemEvent.service_started)
}
void SystemEvent::set_allocated_service_stopped(::unhinged::cdc::ServiceStopped* service_stopped) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (service_stopped) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(service_stopped);
    if (message_arena != submessage_arena) {
      service_stopped = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_stopped, submessage_arena);
    }
    set_has_service_stopped();
    _impl_.event_data_.service_stopped_ = service_stopped;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.SystemEvent.service_stopped)
}
SystemEvent::SystemEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.SystemEvent)
}
SystemEvent::SystemEvent(const SystemEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.component_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.component_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component().empty()) {
    _this->_impl_.component_.Set(from._internal_component(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.event_type_ = from._impl_.event_type_;
  clear_has_event_data();
  switch (from.event_data_case()) {
    case kHealthCheck: {
      _this->_internal_mutable_health_check()->::unhinged::cdc::HealthCheck::MergeFrom(
          from._internal_health_check());
      break;
    }
    case kMetric: {
      _this->_internal_mutable_metric()->::unhinged::cdc::MetricReported::MergeFrom(
          from._internal_metric());
      break;
    }
    case kAlert: {
      _this->_internal_mutable_alert()->::unhinged::cdc::AlertTriggered::MergeFrom(
          from._internal_alert());
      break;
    }
    case kServiceStarted: {
      _this->_internal_mutable_service_started()->::unhinged::cdc::ServiceStarted::MergeFrom(
          from._internal_service_started());
      break;
    }
    case kServiceStopped: {
      _this->_internal_mutable_service_stopped()->::unhinged::cdc::ServiceStopped::MergeFrom(
          from._internal_service_stopped());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.SystemEvent)
}

inline void SystemEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.component_){}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.component_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_event_data();
}

SystemEvent::~SystemEvent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.SystemEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.component_.Destroy();
  if (has_event_data()) {
    clear_event_data();
  }
}

void SystemEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemEvent::clear_event_data() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.cdc.SystemEvent)
  switch (event_data_case()) {
    case kHealthCheck: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.health_check_;
      }
      break;
    }
    case kMetric: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.metric_;
      }
      break;
    }
    case kAlert: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.alert_;
      }
      break;
    }
    case kServiceStarted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.service_started_;
      }
      break;
    }
    case kServiceStopped: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.service_stopped_;
      }
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_DATA_NOT_SET;
}


void SystemEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.SystemEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.component_.ClearToEmpty();
  _impl_.event_type_ = 0;
  clear_event_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_component();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SystemEvent.component"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SystemEventType event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::unhinged::cdc::SystemEventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.HealthCheck health_check = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_health_check(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.MetricReported metric = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_metric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.AlertTriggered alert = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_alert(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.ServiceStarted service_started = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_started(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.ServiceStopped service_stopped = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_stopped(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.SystemEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string component = 1;
  if (!this->_internal_component().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component().data(), static_cast<int>(this->_internal_component().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SystemEvent.component");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_component(), target);
  }

  // .unhinged.cdc.SystemEventType event_type = 2;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_type(), target);
  }

  // .unhinged.cdc.HealthCheck health_check = 10;
  if (_internal_has_health_check()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::health_check(this),
        _Internal::health_check(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.MetricReported metric = 11;
  if (_internal_has_metric()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::metric(this),
        _Internal::metric(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.AlertTriggered alert = 12;
  if (_internal_has_alert()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::alert(this),
        _Internal::alert(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.ServiceStarted service_started = 13;
  if (_internal_has_service_started()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::service_started(this),
        _Internal::service_started(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.ServiceStopped service_stopped = 14;
  if (_internal_has_service_stopped()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::service_stopped(this),
        _Internal::service_stopped(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.SystemEvent)
  return target;
}

size_t SystemEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.SystemEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string component = 1;
  if (!this->_internal_component().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component());
  }

  // .unhinged.cdc.SystemEventType event_type = 2;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  switch (event_data_case()) {
    // .unhinged.cdc.HealthCheck health_check = 10;
    case kHealthCheck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.health_check_);
      break;
    }
    // .unhinged.cdc.MetricReported metric = 11;
    case kMetric: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.metric_);
      break;
    }
    // .unhinged.cdc.AlertTriggered alert = 12;
    case kAlert: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.alert_);
      break;
    }
    // .unhinged.cdc.ServiceStarted service_started = 13;
    case kServiceStarted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.service_started_);
      break;
    }
    // .unhinged.cdc.ServiceStopped service_stopped = 14;
    case kServiceStopped: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.service_stopped_);
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemEvent::GetClassData() const { return &_class_data_; }


void SystemEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemEvent*>(&to_msg);
  auto& from = static_cast<const SystemEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.SystemEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_component().empty()) {
    _this->_internal_set_component(from._internal_component());
  }
  if (from._internal_event_type() != 0) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  switch (from.event_data_case()) {
    case kHealthCheck: {
      _this->_internal_mutable_health_check()->::unhinged::cdc::HealthCheck::MergeFrom(
          from._internal_health_check());
      break;
    }
    case kMetric: {
      _this->_internal_mutable_metric()->::unhinged::cdc::MetricReported::MergeFrom(
          from._internal_metric());
      break;
    }
    case kAlert: {
      _this->_internal_mutable_alert()->::unhinged::cdc::AlertTriggered::MergeFrom(
          from._internal_alert());
      break;
    }
    case kServiceStarted: {
      _this->_internal_mutable_service_started()->::unhinged::cdc::ServiceStarted::MergeFrom(
          from._internal_service_started());
      break;
    }
    case kServiceStopped: {
      _this->_internal_mutable_service_stopped()->::unhinged::cdc::ServiceStopped::MergeFrom(
          from._internal_service_stopped());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemEvent::CopyFrom(const SystemEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.SystemEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemEvent::IsInitialized() const {
  return true;
}

void SystemEvent::InternalSwap(SystemEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_, lhs_arena,
      &other->_impl_.component_, rhs_arena
  );
  swap(_impl_.event_type_, other->_impl_.event_type_);
  swap(_impl_.event_data_, other->_impl_.event_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[25]);
}

// ===================================================================

class HealthCheck::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& health_details(const HealthCheck* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
HealthCheck::_Internal::health_details(const HealthCheck* msg) {
  return *msg->_impl_.health_details_;
}
void HealthCheck::clear_health_details() {
  if (GetArenaForAllocation() == nullptr && _impl_.health_details_ != nullptr) {
    delete _impl_.health_details_;
  }
  _impl_.health_details_ = nullptr;
}
HealthCheck::HealthCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.HealthCheck)
}
HealthCheck::HealthCheck(const HealthCheck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthCheck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.health_details_){nullptr}
    , decltype(_impl_.is_healthy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_health_details()) {
    _this->_impl_.health_details_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.health_details_);
  }
  _this->_impl_.is_healthy_ = from._impl_.is_healthy_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.HealthCheck)
}

inline void HealthCheck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.health_details_){nullptr}
    , decltype(_impl_.is_healthy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthCheck::~HealthCheck() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.HealthCheck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthCheck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
  if (this != internal_default_instance()) delete _impl_.health_details_;
}

void HealthCheck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.HealthCheck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.health_details_ != nullptr) {
    delete _impl_.health_details_;
  }
  _impl_.health_details_ = nullptr;
  _impl_.is_healthy_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_healthy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_healthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.HealthCheck.status"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct health_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_health_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.HealthCheck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_healthy = 1;
  if (this->_internal_is_healthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_healthy(), target);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.HealthCheck.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // .google.protobuf.Struct health_details = 3;
  if (this->_internal_has_health_details()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::health_details(this),
        _Internal::health_details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.HealthCheck)
  return target;
}

size_t HealthCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.HealthCheck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .google.protobuf.Struct health_details = 3;
  if (this->_internal_has_health_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.health_details_);
  }

  // bool is_healthy = 1;
  if (this->_internal_is_healthy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthCheck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheck::GetClassData() const { return &_class_data_; }


void HealthCheck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthCheck*>(&to_msg);
  auto& from = static_cast<const HealthCheck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.HealthCheck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_has_health_details()) {
    _this->_internal_mutable_health_details()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_health_details());
  }
  if (from._internal_is_healthy() != 0) {
    _this->_internal_set_is_healthy(from._internal_is_healthy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheck::CopyFrom(const HealthCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.HealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck::IsInitialized() const {
  return true;
}

void HealthCheck::InternalSwap(HealthCheck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthCheck, _impl_.is_healthy_)
      + sizeof(HealthCheck::_impl_.is_healthy_)
      - PROTOBUF_FIELD_OFFSET(HealthCheck, _impl_.health_details_)>(
          reinterpret_cast<char*>(&_impl_.health_details_),
          reinterpret_cast<char*>(&other->_impl_.health_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[26]);
}

// ===================================================================

class MetricReported::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metric_tags(const MetricReported* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
MetricReported::_Internal::metric_tags(const MetricReported* msg) {
  return *msg->_impl_.metric_tags_;
}
void MetricReported::clear_metric_tags() {
  if (GetArenaForAllocation() == nullptr && _impl_.metric_tags_ != nullptr) {
    delete _impl_.metric_tags_;
  }
  _impl_.metric_tags_ = nullptr;
}
MetricReported::MetricReported(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.MetricReported)
}
MetricReported::MetricReported(const MetricReported& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricReported* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metric_name_){}
    , decltype(_impl_.metric_unit_){}
    , decltype(_impl_.metric_tags_){nullptr}
    , decltype(_impl_.metric_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metric_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metric_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metric_name().empty()) {
    _this->_impl_.metric_name_.Set(from._internal_metric_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metric_unit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metric_unit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metric_unit().empty()) {
    _this->_impl_.metric_unit_.Set(from._internal_metric_unit(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metric_tags()) {
    _this->_impl_.metric_tags_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metric_tags_);
  }
  _this->_impl_.metric_value_ = from._impl_.metric_value_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.MetricReported)
}

inline void MetricReported::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metric_name_){}
    , decltype(_impl_.metric_unit_){}
    , decltype(_impl_.metric_tags_){nullptr}
    , decltype(_impl_.metric_value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.metric_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metric_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metric_unit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metric_unit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetricReported::~MetricReported() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.MetricReported)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricReported::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metric_name_.Destroy();
  _impl_.metric_unit_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metric_tags_;
}

void MetricReported::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricReported::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.MetricReported)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metric_name_.ClearToEmpty();
  _impl_.metric_unit_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metric_tags_ != nullptr) {
    delete _impl_.metric_tags_;
  }
  _impl_.metric_tags_ = nullptr;
  _impl_.metric_value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricReported::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string metric_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_metric_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.MetricReported.metric_name"));
        } else
          goto handle_unusual;
        continue;
      // double metric_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.metric_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string metric_unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metric_unit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.MetricReported.metric_unit"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metric_tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metric_tags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricReported::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.MetricReported)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string metric_name = 1;
  if (!this->_internal_metric_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metric_name().data(), static_cast<int>(this->_internal_metric_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.MetricReported.metric_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_metric_name(), target);
  }

  // double metric_value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_metric_value = this->_internal_metric_value();
  uint64_t raw_metric_value;
  memcpy(&raw_metric_value, &tmp_metric_value, sizeof(tmp_metric_value));
  if (raw_metric_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_metric_value(), target);
  }

  // string metric_unit = 3;
  if (!this->_internal_metric_unit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metric_unit().data(), static_cast<int>(this->_internal_metric_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.MetricReported.metric_unit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metric_unit(), target);
  }

  // .google.protobuf.Struct metric_tags = 4;
  if (this->_internal_has_metric_tags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::metric_tags(this),
        _Internal::metric_tags(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.MetricReported)
  return target;
}

size_t MetricReported::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.MetricReported)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metric_name = 1;
  if (!this->_internal_metric_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metric_name());
  }

  // string metric_unit = 3;
  if (!this->_internal_metric_unit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metric_unit());
  }

  // .google.protobuf.Struct metric_tags = 4;
  if (this->_internal_has_metric_tags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metric_tags_);
  }

  // double metric_value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_metric_value = this->_internal_metric_value();
  uint64_t raw_metric_value;
  memcpy(&raw_metric_value, &tmp_metric_value, sizeof(tmp_metric_value));
  if (raw_metric_value != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricReported::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricReported::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricReported::GetClassData() const { return &_class_data_; }


void MetricReported::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricReported*>(&to_msg);
  auto& from = static_cast<const MetricReported&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.MetricReported)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_metric_name().empty()) {
    _this->_internal_set_metric_name(from._internal_metric_name());
  }
  if (!from._internal_metric_unit().empty()) {
    _this->_internal_set_metric_unit(from._internal_metric_unit());
  }
  if (from._internal_has_metric_tags()) {
    _this->_internal_mutable_metric_tags()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metric_tags());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_metric_value = from._internal_metric_value();
  uint64_t raw_metric_value;
  memcpy(&raw_metric_value, &tmp_metric_value, sizeof(tmp_metric_value));
  if (raw_metric_value != 0) {
    _this->_internal_set_metric_value(from._internal_metric_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricReported::CopyFrom(const MetricReported& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.MetricReported)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricReported::IsInitialized() const {
  return true;
}

void MetricReported::InternalSwap(MetricReported* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metric_name_, lhs_arena,
      &other->_impl_.metric_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metric_unit_, lhs_arena,
      &other->_impl_.metric_unit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricReported, _impl_.metric_value_)
      + sizeof(MetricReported::_impl_.metric_value_)
      - PROTOBUF_FIELD_OFFSET(MetricReported, _impl_.metric_tags_)>(
          reinterpret_cast<char*>(&_impl_.metric_tags_),
          reinterpret_cast<char*>(&other->_impl_.metric_tags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricReported::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[27]);
}

// ===================================================================

class AlertTriggered::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& alert_context(const AlertTriggered* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
AlertTriggered::_Internal::alert_context(const AlertTriggered* msg) {
  return *msg->_impl_.alert_context_;
}
void AlertTriggered::clear_alert_context() {
  if (GetArenaForAllocation() == nullptr && _impl_.alert_context_ != nullptr) {
    delete _impl_.alert_context_;
  }
  _impl_.alert_context_ = nullptr;
}
AlertTriggered::AlertTriggered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.AlertTriggered)
}
AlertTriggered::AlertTriggered(const AlertTriggered& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlertTriggered* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.alert_name_){}
    , decltype(_impl_.severity_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.alert_context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.alert_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alert_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alert_name().empty()) {
    _this->_impl_.alert_name_.Set(from._internal_alert_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.severity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.severity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_severity().empty()) {
    _this->_impl_.severity_.Set(from._internal_severity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_alert_context()) {
    _this->_impl_.alert_context_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.alert_context_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.AlertTriggered)
}

inline void AlertTriggered::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.alert_name_){}
    , decltype(_impl_.severity_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.alert_context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.alert_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alert_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.severity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.severity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AlertTriggered::~AlertTriggered() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.AlertTriggered)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlertTriggered::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.alert_name_.Destroy();
  _impl_.severity_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.alert_context_;
}

void AlertTriggered::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlertTriggered::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.AlertTriggered)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.alert_name_.ClearToEmpty();
  _impl_.severity_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.alert_context_ != nullptr) {
    delete _impl_.alert_context_;
  }
  _impl_.alert_context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlertTriggered::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string alert_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_alert_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AlertTriggered.alert_name"));
        } else
          goto handle_unusual;
        continue;
      // string severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_severity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AlertTriggered.severity"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AlertTriggered.description"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct alert_context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_alert_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlertTriggered::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.AlertTriggered)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string alert_name = 1;
  if (!this->_internal_alert_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alert_name().data(), static_cast<int>(this->_internal_alert_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AlertTriggered.alert_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_alert_name(), target);
  }

  // string severity = 2;
  if (!this->_internal_severity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_severity().data(), static_cast<int>(this->_internal_severity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AlertTriggered.severity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_severity(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AlertTriggered.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .google.protobuf.Struct alert_context = 4;
  if (this->_internal_has_alert_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::alert_context(this),
        _Internal::alert_context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.AlertTriggered)
  return target;
}

size_t AlertTriggered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.AlertTriggered)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string alert_name = 1;
  if (!this->_internal_alert_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alert_name());
  }

  // string severity = 2;
  if (!this->_internal_severity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_severity());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Struct alert_context = 4;
  if (this->_internal_has_alert_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.alert_context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlertTriggered::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlertTriggered::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlertTriggered::GetClassData() const { return &_class_data_; }


void AlertTriggered::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlertTriggered*>(&to_msg);
  auto& from = static_cast<const AlertTriggered&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.AlertTriggered)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_alert_name().empty()) {
    _this->_internal_set_alert_name(from._internal_alert_name());
  }
  if (!from._internal_severity().empty()) {
    _this->_internal_set_severity(from._internal_severity());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_alert_context()) {
    _this->_internal_mutable_alert_context()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_alert_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlertTriggered::CopyFrom(const AlertTriggered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.AlertTriggered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlertTriggered::IsInitialized() const {
  return true;
}

void AlertTriggered::InternalSwap(AlertTriggered* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alert_name_, lhs_arena,
      &other->_impl_.alert_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.severity_, lhs_arena,
      &other->_impl_.severity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.alert_context_, other->_impl_.alert_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlertTriggered::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[28]);
}

// ===================================================================

class ServiceStarted::_Internal {
 public:
};

ServiceStarted::ServiceStarted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.ServiceStarted)
}
ServiceStarted::ServiceStarted(const ServiceStarted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceStarted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.service_version_){}
    , decltype(_impl_.build_info_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_version().empty()) {
    _this->_impl_.service_version_.Set(from._internal_service_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.build_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.build_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_build_info().empty()) {
    _this->_impl_.build_info_.Set(from._internal_build_info(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.ServiceStarted)
}

inline void ServiceStarted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.service_version_){}
    , decltype(_impl_.build_info_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.build_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.build_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceStarted::~ServiceStarted() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.ServiceStarted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceStarted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_name_.Destroy();
  _impl_.service_version_.Destroy();
  _impl_.build_info_.Destroy();
}

void ServiceStarted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.ServiceStarted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_name_.ClearToEmpty();
  _impl_.service_version_.ClearToEmpty();
  _impl_.build_info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceStarted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ServiceStarted.service_name"));
        } else
          goto handle_unusual;
        continue;
      // string service_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ServiceStarted.service_version"));
        } else
          goto handle_unusual;
        continue;
      // string build_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_build_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ServiceStarted.build_info"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceStarted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.ServiceStarted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ServiceStarted.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string service_version = 2;
  if (!this->_internal_service_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_version().data(), static_cast<int>(this->_internal_service_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ServiceStarted.service_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_version(), target);
  }

  // string build_info = 3;
  if (!this->_internal_build_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_build_info().data(), static_cast<int>(this->_internal_build_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ServiceStarted.build_info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_build_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.ServiceStarted)
  return target;
}

size_t ServiceStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.ServiceStarted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string service_version = 2;
  if (!this->_internal_service_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_version());
  }

  // string build_info = 3;
  if (!this->_internal_build_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_build_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceStarted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceStarted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceStarted::GetClassData() const { return &_class_data_; }


void ServiceStarted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceStarted*>(&to_msg);
  auto& from = static_cast<const ServiceStarted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.ServiceStarted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_service_version().empty()) {
    _this->_internal_set_service_version(from._internal_service_version());
  }
  if (!from._internal_build_info().empty()) {
    _this->_internal_set_build_info(from._internal_build_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceStarted::CopyFrom(const ServiceStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.ServiceStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStarted::IsInitialized() const {
  return true;
}

void ServiceStarted::InternalSwap(ServiceStarted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_version_, lhs_arena,
      &other->_impl_.service_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.build_info_, lhs_arena,
      &other->_impl_.build_info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceStarted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[29]);
}

// ===================================================================

class ServiceStopped::_Internal {
 public:
};

ServiceStopped::ServiceStopped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.ServiceStopped)
}
ServiceStopped::ServiceStopped(const ServiceStopped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceStopped* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.stop_reason_){}
    , decltype(_impl_.uptime_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stop_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_reason().empty()) {
    _this->_impl_.stop_reason_.Set(from._internal_stop_reason(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.uptime_ms_ = from._impl_.uptime_ms_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.ServiceStopped)
}

inline void ServiceStopped::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.stop_reason_){}
    , decltype(_impl_.uptime_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stop_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceStopped::~ServiceStopped() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.ServiceStopped)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceStopped::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_name_.Destroy();
  _impl_.stop_reason_.Destroy();
}

void ServiceStopped::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceStopped::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.ServiceStopped)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_name_.ClearToEmpty();
  _impl_.stop_reason_.ClearToEmpty();
  _impl_.uptime_ms_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceStopped::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ServiceStopped.service_name"));
        } else
          goto handle_unusual;
        continue;
      // string stop_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stop_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ServiceStopped.stop_reason"));
        } else
          goto handle_unusual;
        continue;
      // float uptime_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.uptime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceStopped::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.ServiceStopped)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ServiceStopped.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string stop_reason = 2;
  if (!this->_internal_stop_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_reason().data(), static_cast<int>(this->_internal_stop_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ServiceStopped.stop_reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stop_reason(), target);
  }

  // float uptime_ms = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_uptime_ms = this->_internal_uptime_ms();
  uint32_t raw_uptime_ms;
  memcpy(&raw_uptime_ms, &tmp_uptime_ms, sizeof(tmp_uptime_ms));
  if (raw_uptime_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_uptime_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.ServiceStopped)
  return target;
}

size_t ServiceStopped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.ServiceStopped)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string stop_reason = 2;
  if (!this->_internal_stop_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_reason());
  }

  // float uptime_ms = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_uptime_ms = this->_internal_uptime_ms();
  uint32_t raw_uptime_ms;
  memcpy(&raw_uptime_ms, &tmp_uptime_ms, sizeof(tmp_uptime_ms));
  if (raw_uptime_ms != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceStopped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceStopped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceStopped::GetClassData() const { return &_class_data_; }


void ServiceStopped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceStopped*>(&to_msg);
  auto& from = static_cast<const ServiceStopped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.ServiceStopped)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_stop_reason().empty()) {
    _this->_internal_set_stop_reason(from._internal_stop_reason());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_uptime_ms = from._internal_uptime_ms();
  uint32_t raw_uptime_ms;
  memcpy(&raw_uptime_ms, &tmp_uptime_ms, sizeof(tmp_uptime_ms));
  if (raw_uptime_ms != 0) {
    _this->_internal_set_uptime_ms(from._internal_uptime_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceStopped::CopyFrom(const ServiceStopped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.ServiceStopped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStopped::IsInitialized() const {
  return true;
}

void ServiceStopped::InternalSwap(ServiceStopped* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stop_reason_, lhs_arena,
      &other->_impl_.stop_reason_, rhs_arena
  );
  swap(_impl_.uptime_ms_, other->_impl_.uptime_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceStopped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[30]);
}

// ===================================================================

class WorkflowEvent::_Internal {
 public:
  static const ::unhinged::cdc::WorkflowTriggered& triggered(const WorkflowEvent* msg);
  static const ::unhinged::cdc::WorkflowStepExecuted& step_executed(const WorkflowEvent* msg);
  static const ::unhinged::cdc::WorkflowCompleted& completed(const WorkflowEvent* msg);
  static const ::unhinged::cdc::WorkflowFailed& failed(const WorkflowEvent* msg);
};

const ::unhinged::cdc::WorkflowTriggered&
WorkflowEvent::_Internal::triggered(const WorkflowEvent* msg) {
  return *msg->_impl_.event_data_.triggered_;
}
const ::unhinged::cdc::WorkflowStepExecuted&
WorkflowEvent::_Internal::step_executed(const WorkflowEvent* msg) {
  return *msg->_impl_.event_data_.step_executed_;
}
const ::unhinged::cdc::WorkflowCompleted&
WorkflowEvent::_Internal::completed(const WorkflowEvent* msg) {
  return *msg->_impl_.event_data_.completed_;
}
const ::unhinged::cdc::WorkflowFailed&
WorkflowEvent::_Internal::failed(const WorkflowEvent* msg) {
  return *msg->_impl_.event_data_.failed_;
}
void WorkflowEvent::set_allocated_triggered(::unhinged::cdc::WorkflowTriggered* triggered) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (triggered) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(triggered);
    if (message_arena != submessage_arena) {
      triggered = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, triggered, submessage_arena);
    }
    set_has_triggered();
    _impl_.event_data_.triggered_ = triggered;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.WorkflowEvent.triggered)
}
void WorkflowEvent::set_allocated_step_executed(::unhinged::cdc::WorkflowStepExecuted* step_executed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (step_executed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(step_executed);
    if (message_arena != submessage_arena) {
      step_executed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, step_executed, submessage_arena);
    }
    set_has_step_executed();
    _impl_.event_data_.step_executed_ = step_executed;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.WorkflowEvent.step_executed)
}
void WorkflowEvent::set_allocated_completed(::unhinged::cdc::WorkflowCompleted* completed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (completed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(completed);
    if (message_arena != submessage_arena) {
      completed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, completed, submessage_arena);
    }
    set_has_completed();
    _impl_.event_data_.completed_ = completed;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.WorkflowEvent.completed)
}
void WorkflowEvent::set_allocated_failed(::unhinged::cdc::WorkflowFailed* failed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (failed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(failed);
    if (message_arena != submessage_arena) {
      failed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failed, submessage_arena);
    }
    set_has_failed();
    _impl_.event_data_.failed_ = failed;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.WorkflowEvent.failed)
}
WorkflowEvent::WorkflowEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.WorkflowEvent)
}
WorkflowEvent::WorkflowEvent(const WorkflowEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkflowEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_id_){}
    , decltype(_impl_.workflow_type_){}
    , decltype(_impl_.execution_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.workflow_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_type().empty()) {
    _this->_impl_.workflow_type_.Set(from._internal_workflow_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.execution_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_id().empty()) {
    _this->_impl_.execution_id_.Set(from._internal_execution_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.event_type_ = from._impl_.event_type_;
  clear_has_event_data();
  switch (from.event_data_case()) {
    case kTriggered: {
      _this->_internal_mutable_triggered()->::unhinged::cdc::WorkflowTriggered::MergeFrom(
          from._internal_triggered());
      break;
    }
    case kStepExecuted: {
      _this->_internal_mutable_step_executed()->::unhinged::cdc::WorkflowStepExecuted::MergeFrom(
          from._internal_step_executed());
      break;
    }
    case kCompleted: {
      _this->_internal_mutable_completed()->::unhinged::cdc::WorkflowCompleted::MergeFrom(
          from._internal_completed());
      break;
    }
    case kFailed: {
      _this->_internal_mutable_failed()->::unhinged::cdc::WorkflowFailed::MergeFrom(
          from._internal_failed());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.WorkflowEvent)
}

inline void WorkflowEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_id_){}
    , decltype(_impl_.workflow_type_){}
    , decltype(_impl_.execution_id_){}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.workflow_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_event_data();
}

WorkflowEvent::~WorkflowEvent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.WorkflowEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkflowEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workflow_id_.Destroy();
  _impl_.workflow_type_.Destroy();
  _impl_.execution_id_.Destroy();
  if (has_event_data()) {
    clear_event_data();
  }
}

void WorkflowEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkflowEvent::clear_event_data() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.cdc.WorkflowEvent)
  switch (event_data_case()) {
    case kTriggered: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.triggered_;
      }
      break;
    }
    case kStepExecuted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.step_executed_;
      }
      break;
    }
    case kCompleted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.completed_;
      }
      break;
    }
    case kFailed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.failed_;
      }
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_DATA_NOT_SET;
}


void WorkflowEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.WorkflowEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workflow_id_.ClearToEmpty();
  _impl_.workflow_type_.ClearToEmpty();
  _impl_.execution_id_.ClearToEmpty();
  _impl_.event_type_ = 0;
  clear_event_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string workflow_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.WorkflowEvent.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // string workflow_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.WorkflowEvent.workflow_type"));
        } else
          goto handle_unusual;
        continue;
      // string execution_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_execution_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.WorkflowEvent.execution_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.WorkflowEventType event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::unhinged::cdc::WorkflowEventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.WorkflowTriggered triggered = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_triggered(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.WorkflowStepExecuted step_executed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_step_executed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.WorkflowCompleted completed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_completed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.WorkflowFailed failed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_failed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.WorkflowEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string workflow_id = 1;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.WorkflowEvent.workflow_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_workflow_id(), target);
  }

  // string workflow_type = 2;
  if (!this->_internal_workflow_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_type().data(), static_cast<int>(this->_internal_workflow_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.WorkflowEvent.workflow_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_type(), target);
  }

  // string execution_id = 3;
  if (!this->_internal_execution_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execution_id().data(), static_cast<int>(this->_internal_execution_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.WorkflowEvent.execution_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_execution_id(), target);
  }

  // .unhinged.cdc.WorkflowEventType event_type = 4;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event_type(), target);
  }

  // .unhinged.cdc.WorkflowTriggered triggered = 10;
  if (_internal_has_triggered()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::triggered(this),
        _Internal::triggered(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.WorkflowStepExecuted step_executed = 11;
  if (_internal_has_step_executed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::step_executed(this),
        _Internal::step_executed(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.WorkflowCompleted completed = 12;
  if (_internal_has_completed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::completed(this),
        _Internal::completed(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.WorkflowFailed failed = 13;
  if (_internal_has_failed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::failed(this),
        _Internal::failed(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.WorkflowEvent)
  return target;
}

size_t WorkflowEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.WorkflowEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 1;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string workflow_type = 2;
  if (!this->_internal_workflow_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_type());
  }

  // string execution_id = 3;
  if (!this->_internal_execution_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execution_id());
  }

  // .unhinged.cdc.WorkflowEventType event_type = 4;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  switch (event_data_case()) {
    // .unhinged.cdc.WorkflowTriggered triggered = 10;
    case kTriggered: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.triggered_);
      break;
    }
    // .unhinged.cdc.WorkflowStepExecuted step_executed = 11;
    case kStepExecuted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.step_executed_);
      break;
    }
    // .unhinged.cdc.WorkflowCompleted completed = 12;
    case kCompleted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.completed_);
      break;
    }
    // .unhinged.cdc.WorkflowFailed failed = 13;
    case kFailed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.failed_);
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkflowEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowEvent::GetClassData() const { return &_class_data_; }


void WorkflowEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkflowEvent*>(&to_msg);
  auto& from = static_cast<const WorkflowEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.WorkflowEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  if (!from._internal_workflow_type().empty()) {
    _this->_internal_set_workflow_type(from._internal_workflow_type());
  }
  if (!from._internal_execution_id().empty()) {
    _this->_internal_set_execution_id(from._internal_execution_id());
  }
  if (from._internal_event_type() != 0) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  switch (from.event_data_case()) {
    case kTriggered: {
      _this->_internal_mutable_triggered()->::unhinged::cdc::WorkflowTriggered::MergeFrom(
          from._internal_triggered());
      break;
    }
    case kStepExecuted: {
      _this->_internal_mutable_step_executed()->::unhinged::cdc::WorkflowStepExecuted::MergeFrom(
          from._internal_step_executed());
      break;
    }
    case kCompleted: {
      _this->_internal_mutable_completed()->::unhinged::cdc::WorkflowCompleted::MergeFrom(
          from._internal_completed());
      break;
    }
    case kFailed: {
      _this->_internal_mutable_failed()->::unhinged::cdc::WorkflowFailed::MergeFrom(
          from._internal_failed());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowEvent::CopyFrom(const WorkflowEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.WorkflowEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowEvent::IsInitialized() const {
  return true;
}

void WorkflowEvent::InternalSwap(WorkflowEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_type_, lhs_arena,
      &other->_impl_.workflow_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.execution_id_, lhs_arena,
      &other->_impl_.execution_id_, rhs_arena
  );
  swap(_impl_.event_type_, other->_impl_.event_type_);
  swap(_impl_.event_data_, other->_impl_.event_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[31]);
}

// ===================================================================

class WorkflowTriggered::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& trigger_context(const WorkflowTriggered* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
WorkflowTriggered::_Internal::trigger_context(const WorkflowTriggered* msg) {
  return *msg->_impl_.trigger_context_;
}
void WorkflowTriggered::clear_trigger_context() {
  if (GetArenaForAllocation() == nullptr && _impl_.trigger_context_ != nullptr) {
    delete _impl_.trigger_context_;
  }
  _impl_.trigger_context_ = nullptr;
}
WorkflowTriggered::WorkflowTriggered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.WorkflowTriggered)
}
WorkflowTriggered::WorkflowTriggered(const WorkflowTriggered& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkflowTriggered* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trigger_event_id_){}
    , decltype(_impl_.trigger_type_){}
    , decltype(_impl_.trigger_context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trigger_event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trigger_event_id().empty()) {
    _this->_impl_.trigger_event_id_.Set(from._internal_trigger_event_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.trigger_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trigger_type().empty()) {
    _this->_impl_.trigger_type_.Set(from._internal_trigger_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trigger_context()) {
    _this->_impl_.trigger_context_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.trigger_context_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.WorkflowTriggered)
}

inline void WorkflowTriggered::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trigger_event_id_){}
    , decltype(_impl_.trigger_type_){}
    , decltype(_impl_.trigger_context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trigger_event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trigger_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowTriggered::~WorkflowTriggered() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.WorkflowTriggered)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkflowTriggered::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trigger_event_id_.Destroy();
  _impl_.trigger_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trigger_context_;
}

void WorkflowTriggered::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkflowTriggered::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.WorkflowTriggered)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trigger_event_id_.ClearToEmpty();
  _impl_.trigger_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.trigger_context_ != nullptr) {
    delete _impl_.trigger_context_;
  }
  _impl_.trigger_context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowTriggered::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string trigger_event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trigger_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.WorkflowTriggered.trigger_event_id"));
        } else
          goto handle_unusual;
        continue;
      // string trigger_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trigger_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.WorkflowTriggered.trigger_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct trigger_context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowTriggered::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.WorkflowTriggered)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string trigger_event_id = 1;
  if (!this->_internal_trigger_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trigger_event_id().data(), static_cast<int>(this->_internal_trigger_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.WorkflowTriggered.trigger_event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trigger_event_id(), target);
  }

  // string trigger_type = 2;
  if (!this->_internal_trigger_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trigger_type().data(), static_cast<int>(this->_internal_trigger_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.WorkflowTriggered.trigger_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trigger_type(), target);
  }

  // .google.protobuf.Struct trigger_context = 3;
  if (this->_internal_has_trigger_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::trigger_context(this),
        _Internal::trigger_context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.WorkflowTriggered)
  return target;
}

size_t WorkflowTriggered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.WorkflowTriggered)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trigger_event_id = 1;
  if (!this->_internal_trigger_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trigger_event_id());
  }

  // string trigger_type = 2;
  if (!this->_internal_trigger_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trigger_type());
  }

  // .google.protobuf.Struct trigger_context = 3;
  if (this->_internal_has_trigger_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trigger_context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowTriggered::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkflowTriggered::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowTriggered::GetClassData() const { return &_class_data_; }


void WorkflowTriggered::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkflowTriggered*>(&to_msg);
  auto& from = static_cast<const WorkflowTriggered&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.WorkflowTriggered)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trigger_event_id().empty()) {
    _this->_internal_set_trigger_event_id(from._internal_trigger_event_id());
  }
  if (!from._internal_trigger_type().empty()) {
    _this->_internal_set_trigger_type(from._internal_trigger_type());
  }
  if (from._internal_has_trigger_context()) {
    _this->_internal_mutable_trigger_context()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_trigger_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowTriggered::CopyFrom(const WorkflowTriggered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.WorkflowTriggered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowTriggered::IsInitialized() const {
  return true;
}

void WorkflowTriggered::InternalSwap(WorkflowTriggered* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trigger_event_id_, lhs_arena,
      &other->_impl_.trigger_event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trigger_type_, lhs_arena,
      &other->_impl_.trigger_type_, rhs_arena
  );
  swap(_impl_.trigger_context_, other->_impl_.trigger_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowTriggered::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[32]);
}

// ===================================================================

class WorkflowStepExecuted::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& step_input(const WorkflowStepExecuted* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& step_output(const WorkflowStepExecuted* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
WorkflowStepExecuted::_Internal::step_input(const WorkflowStepExecuted* msg) {
  return *msg->_impl_.step_input_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
WorkflowStepExecuted::_Internal::step_output(const WorkflowStepExecuted* msg) {
  return *msg->_impl_.step_output_;
}
void WorkflowStepExecuted::clear_step_input() {
  if (GetArenaForAllocation() == nullptr && _impl_.step_input_ != nullptr) {
    delete _impl_.step_input_;
  }
  _impl_.step_input_ = nullptr;
}
void WorkflowStepExecuted::clear_step_output() {
  if (GetArenaForAllocation() == nullptr && _impl_.step_output_ != nullptr) {
    delete _impl_.step_output_;
  }
  _impl_.step_output_ = nullptr;
}
WorkflowStepExecuted::WorkflowStepExecuted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.WorkflowStepExecuted)
}
WorkflowStepExecuted::WorkflowStepExecuted(const WorkflowStepExecuted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkflowStepExecuted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.step_id_){}
    , decltype(_impl_.step_type_){}
    , decltype(_impl_.step_input_){nullptr}
    , decltype(_impl_.step_output_){nullptr}
    , decltype(_impl_.step_duration_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.step_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.step_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_step_id().empty()) {
    _this->_impl_.step_id_.Set(from._internal_step_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.step_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.step_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_step_type().empty()) {
    _this->_impl_.step_type_.Set(from._internal_step_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_step_input()) {
    _this->_impl_.step_input_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.step_input_);
  }
  if (from._internal_has_step_output()) {
    _this->_impl_.step_output_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.step_output_);
  }
  _this->_impl_.step_duration_ms_ = from._impl_.step_duration_ms_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.WorkflowStepExecuted)
}

inline void WorkflowStepExecuted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.step_id_){}
    , decltype(_impl_.step_type_){}
    , decltype(_impl_.step_input_){nullptr}
    , decltype(_impl_.step_output_){nullptr}
    , decltype(_impl_.step_duration_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.step_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.step_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.step_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.step_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowStepExecuted::~WorkflowStepExecuted() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.WorkflowStepExecuted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkflowStepExecuted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.step_id_.Destroy();
  _impl_.step_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.step_input_;
  if (this != internal_default_instance()) delete _impl_.step_output_;
}

void WorkflowStepExecuted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkflowStepExecuted::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.WorkflowStepExecuted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.step_id_.ClearToEmpty();
  _impl_.step_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.step_input_ != nullptr) {
    delete _impl_.step_input_;
  }
  _impl_.step_input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.step_output_ != nullptr) {
    delete _impl_.step_output_;
  }
  _impl_.step_output_ = nullptr;
  _impl_.step_duration_ms_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowStepExecuted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_step_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.WorkflowStepExecuted.step_id"));
        } else
          goto handle_unusual;
        continue;
      // string step_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_step_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.WorkflowStepExecuted.step_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct step_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_step_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct step_output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_step_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float step_duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.step_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowStepExecuted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.WorkflowStepExecuted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string step_id = 1;
  if (!this->_internal_step_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_step_id().data(), static_cast<int>(this->_internal_step_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.WorkflowStepExecuted.step_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_step_id(), target);
  }

  // string step_type = 2;
  if (!this->_internal_step_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_step_type().data(), static_cast<int>(this->_internal_step_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.WorkflowStepExecuted.step_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_step_type(), target);
  }

  // .google.protobuf.Struct step_input = 3;
  if (this->_internal_has_step_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::step_input(this),
        _Internal::step_input(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct step_output = 4;
  if (this->_internal_has_step_output()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::step_output(this),
        _Internal::step_output(this).GetCachedSize(), target, stream);
  }

  // float step_duration_ms = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_step_duration_ms = this->_internal_step_duration_ms();
  uint32_t raw_step_duration_ms;
  memcpy(&raw_step_duration_ms, &tmp_step_duration_ms, sizeof(tmp_step_duration_ms));
  if (raw_step_duration_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_step_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.WorkflowStepExecuted)
  return target;
}

size_t WorkflowStepExecuted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.WorkflowStepExecuted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string step_id = 1;
  if (!this->_internal_step_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_step_id());
  }

  // string step_type = 2;
  if (!this->_internal_step_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_step_type());
  }

  // .google.protobuf.Struct step_input = 3;
  if (this->_internal_has_step_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.step_input_);
  }

  // .google.protobuf.Struct step_output = 4;
  if (this->_internal_has_step_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.step_output_);
  }

  // float step_duration_ms = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_step_duration_ms = this->_internal_step_duration_ms();
  uint32_t raw_step_duration_ms;
  memcpy(&raw_step_duration_ms, &tmp_step_duration_ms, sizeof(tmp_step_duration_ms));
  if (raw_step_duration_ms != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowStepExecuted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkflowStepExecuted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowStepExecuted::GetClassData() const { return &_class_data_; }


void WorkflowStepExecuted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkflowStepExecuted*>(&to_msg);
  auto& from = static_cast<const WorkflowStepExecuted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.WorkflowStepExecuted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_step_id().empty()) {
    _this->_internal_set_step_id(from._internal_step_id());
  }
  if (!from._internal_step_type().empty()) {
    _this->_internal_set_step_type(from._internal_step_type());
  }
  if (from._internal_has_step_input()) {
    _this->_internal_mutable_step_input()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_step_input());
  }
  if (from._internal_has_step_output()) {
    _this->_internal_mutable_step_output()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_step_output());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_step_duration_ms = from._internal_step_duration_ms();
  uint32_t raw_step_duration_ms;
  memcpy(&raw_step_duration_ms, &tmp_step_duration_ms, sizeof(tmp_step_duration_ms));
  if (raw_step_duration_ms != 0) {
    _this->_internal_set_step_duration_ms(from._internal_step_duration_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowStepExecuted::CopyFrom(const WorkflowStepExecuted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.WorkflowStepExecuted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowStepExecuted::IsInitialized() const {
  return true;
}

void WorkflowStepExecuted::InternalSwap(WorkflowStepExecuted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.step_id_, lhs_arena,
      &other->_impl_.step_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.step_type_, lhs_arena,
      &other->_impl_.step_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkflowStepExecuted, _impl_.step_duration_ms_)
      + sizeof(WorkflowStepExecuted::_impl_.step_duration_ms_)
      - PROTOBUF_FIELD_OFFSET(WorkflowStepExecuted, _impl_.step_input_)>(
          reinterpret_cast<char*>(&_impl_.step_input_),
          reinterpret_cast<char*>(&other->_impl_.step_input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowStepExecuted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[33]);
}

// ===================================================================

class WorkflowCompleted::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& final_output(const WorkflowCompleted* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
WorkflowCompleted::_Internal::final_output(const WorkflowCompleted* msg) {
  return *msg->_impl_.final_output_;
}
void WorkflowCompleted::clear_final_output() {
  if (GetArenaForAllocation() == nullptr && _impl_.final_output_ != nullptr) {
    delete _impl_.final_output_;
  }
  _impl_.final_output_ = nullptr;
}
WorkflowCompleted::WorkflowCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.WorkflowCompleted)
}
WorkflowCompleted::WorkflowCompleted(const WorkflowCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkflowCompleted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.final_output_){nullptr}
    , decltype(_impl_.total_steps_){}
    , decltype(_impl_.total_duration_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_final_output()) {
    _this->_impl_.final_output_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.final_output_);
  }
  ::memcpy(&_impl_.total_steps_, &from._impl_.total_steps_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_duration_ms_) -
    reinterpret_cast<char*>(&_impl_.total_steps_)) + sizeof(_impl_.total_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.WorkflowCompleted)
}

inline void WorkflowCompleted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.final_output_){nullptr}
    , decltype(_impl_.total_steps_){0}
    , decltype(_impl_.total_duration_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkflowCompleted::~WorkflowCompleted() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.WorkflowCompleted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkflowCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.final_output_;
}

void WorkflowCompleted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkflowCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.WorkflowCompleted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.final_output_ != nullptr) {
    delete _impl_.final_output_;
  }
  _impl_.final_output_ = nullptr;
  ::memset(&_impl_.total_steps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_duration_ms_) -
      reinterpret_cast<char*>(&_impl_.total_steps_)) + sizeof(_impl_.total_duration_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowCompleted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct final_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float total_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.total_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowCompleted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.WorkflowCompleted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct final_output = 1;
  if (this->_internal_has_final_output()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::final_output(this),
        _Internal::final_output(this).GetCachedSize(), target, stream);
  }

  // int32 total_steps = 2;
  if (this->_internal_total_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_steps(), target);
  }

  // float total_duration_ms = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_total_duration_ms = this->_internal_total_duration_ms();
  uint32_t raw_total_duration_ms;
  memcpy(&raw_total_duration_ms, &tmp_total_duration_ms, sizeof(tmp_total_duration_ms));
  if (raw_total_duration_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_total_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.WorkflowCompleted)
  return target;
}

size_t WorkflowCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.WorkflowCompleted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct final_output = 1;
  if (this->_internal_has_final_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.final_output_);
  }

  // int32 total_steps = 2;
  if (this->_internal_total_steps() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_steps());
  }

  // float total_duration_ms = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_total_duration_ms = this->_internal_total_duration_ms();
  uint32_t raw_total_duration_ms;
  memcpy(&raw_total_duration_ms, &tmp_total_duration_ms, sizeof(tmp_total_duration_ms));
  if (raw_total_duration_ms != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowCompleted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkflowCompleted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowCompleted::GetClassData() const { return &_class_data_; }


void WorkflowCompleted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkflowCompleted*>(&to_msg);
  auto& from = static_cast<const WorkflowCompleted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.WorkflowCompleted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_final_output()) {
    _this->_internal_mutable_final_output()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_final_output());
  }
  if (from._internal_total_steps() != 0) {
    _this->_internal_set_total_steps(from._internal_total_steps());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_total_duration_ms = from._internal_total_duration_ms();
  uint32_t raw_total_duration_ms;
  memcpy(&raw_total_duration_ms, &tmp_total_duration_ms, sizeof(tmp_total_duration_ms));
  if (raw_total_duration_ms != 0) {
    _this->_internal_set_total_duration_ms(from._internal_total_duration_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowCompleted::CopyFrom(const WorkflowCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.WorkflowCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowCompleted::IsInitialized() const {
  return true;
}

void WorkflowCompleted::InternalSwap(WorkflowCompleted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkflowCompleted, _impl_.total_duration_ms_)
      + sizeof(WorkflowCompleted::_impl_.total_duration_ms_)
      - PROTOBUF_FIELD_OFFSET(WorkflowCompleted, _impl_.final_output_)>(
          reinterpret_cast<char*>(&_impl_.final_output_),
          reinterpret_cast<char*>(&other->_impl_.final_output_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowCompleted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[34]);
}

// ===================================================================

class WorkflowFailed::_Internal {
 public:
};

WorkflowFailed::WorkflowFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.WorkflowFailed)
}
WorkflowFailed::WorkflowFailed(const WorkflowFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkflowFailed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.failure_step_id_){}
    , decltype(_impl_.failure_reason_){}
    , decltype(_impl_.error_message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.failure_step_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.failure_step_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_failure_step_id().empty()) {
    _this->_impl_.failure_step_id_.Set(from._internal_failure_step_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.failure_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.failure_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_failure_reason().empty()) {
    _this->_impl_.failure_reason_.Set(from._internal_failure_reason(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.WorkflowFailed)
}

inline void WorkflowFailed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.failure_step_id_){}
    , decltype(_impl_.failure_reason_){}
    , decltype(_impl_.error_message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.failure_step_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.failure_step_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.failure_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.failure_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowFailed::~WorkflowFailed() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.WorkflowFailed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkflowFailed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.failure_step_id_.Destroy();
  _impl_.failure_reason_.Destroy();
  _impl_.error_message_.Destroy();
}

void WorkflowFailed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkflowFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.WorkflowFailed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.failure_step_id_.ClearToEmpty();
  _impl_.failure_reason_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowFailed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string failure_step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_failure_step_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.WorkflowFailed.failure_step_id"));
        } else
          goto handle_unusual;
        continue;
      // string failure_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_failure_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.WorkflowFailed.failure_reason"));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.WorkflowFailed.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowFailed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.WorkflowFailed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string failure_step_id = 1;
  if (!this->_internal_failure_step_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failure_step_id().data(), static_cast<int>(this->_internal_failure_step_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.WorkflowFailed.failure_step_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_failure_step_id(), target);
  }

  // string failure_reason = 2;
  if (!this->_internal_failure_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failure_reason().data(), static_cast<int>(this->_internal_failure_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.WorkflowFailed.failure_reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_failure_reason(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.WorkflowFailed.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.WorkflowFailed)
  return target;
}

size_t WorkflowFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.WorkflowFailed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string failure_step_id = 1;
  if (!this->_internal_failure_step_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failure_step_id());
  }

  // string failure_reason = 2;
  if (!this->_internal_failure_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failure_reason());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowFailed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkflowFailed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowFailed::GetClassData() const { return &_class_data_; }


void WorkflowFailed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkflowFailed*>(&to_msg);
  auto& from = static_cast<const WorkflowFailed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.WorkflowFailed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_failure_step_id().empty()) {
    _this->_internal_set_failure_step_id(from._internal_failure_step_id());
  }
  if (!from._internal_failure_reason().empty()) {
    _this->_internal_set_failure_reason(from._internal_failure_reason());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowFailed::CopyFrom(const WorkflowFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.WorkflowFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowFailed::IsInitialized() const {
  return true;
}

void WorkflowFailed::InternalSwap(WorkflowFailed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.failure_step_id_, lhs_arena,
      &other->_impl_.failure_step_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.failure_reason_, lhs_arena,
      &other->_impl_.failure_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowFailed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[35]);
}

// ===================================================================

class ChatEvent::_Internal {
 public:
  static const ::unhinged::cdc::ConversationCreated& conversation_created(const ChatEvent* msg);
  static const ::unhinged::cdc::MessageSent& message_sent(const ChatEvent* msg);
  static const ::unhinged::cdc::MessageUpdated& message_updated(const ChatEvent* msg);
  static const ::unhinged::cdc::TypingStarted& typing_started(const ChatEvent* msg);
  static const ::unhinged::cdc::ParticipantJoined& participant_joined(const ChatEvent* msg);
};

const ::unhinged::cdc::ConversationCreated&
ChatEvent::_Internal::conversation_created(const ChatEvent* msg) {
  return *msg->_impl_.event_data_.conversation_created_;
}
const ::unhinged::cdc::MessageSent&
ChatEvent::_Internal::message_sent(const ChatEvent* msg) {
  return *msg->_impl_.event_data_.message_sent_;
}
const ::unhinged::cdc::MessageUpdated&
ChatEvent::_Internal::message_updated(const ChatEvent* msg) {
  return *msg->_impl_.event_data_.message_updated_;
}
const ::unhinged::cdc::TypingStarted&
ChatEvent::_Internal::typing_started(const ChatEvent* msg) {
  return *msg->_impl_.event_data_.typing_started_;
}
const ::unhinged::cdc::ParticipantJoined&
ChatEvent::_Internal::participant_joined(const ChatEvent* msg) {
  return *msg->_impl_.event_data_.participant_joined_;
}
void ChatEvent::set_allocated_conversation_created(::unhinged::cdc::ConversationCreated* conversation_created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (conversation_created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(conversation_created);
    if (message_arena != submessage_arena) {
      conversation_created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conversation_created, submessage_arena);
    }
    set_has_conversation_created();
    _impl_.event_data_.conversation_created_ = conversation_created;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.ChatEvent.conversation_created)
}
void ChatEvent::set_allocated_message_sent(::unhinged::cdc::MessageSent* message_sent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (message_sent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message_sent);
    if (message_arena != submessage_arena) {
      message_sent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_sent, submessage_arena);
    }
    set_has_message_sent();
    _impl_.event_data_.message_sent_ = message_sent;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.ChatEvent.message_sent)
}
void ChatEvent::set_allocated_message_updated(::unhinged::cdc::MessageUpdated* message_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (message_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message_updated);
    if (message_arena != submessage_arena) {
      message_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_updated, submessage_arena);
    }
    set_has_message_updated();
    _impl_.event_data_.message_updated_ = message_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.ChatEvent.message_updated)
}
void ChatEvent::set_allocated_typing_started(::unhinged::cdc::TypingStarted* typing_started) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (typing_started) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(typing_started);
    if (message_arena != submessage_arena) {
      typing_started = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, typing_started, submessage_arena);
    }
    set_has_typing_started();
    _impl_.event_data_.typing_started_ = typing_started;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.ChatEvent.typing_started)
}
void ChatEvent::set_allocated_participant_joined(::unhinged::cdc::ParticipantJoined* participant_joined) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (participant_joined) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(participant_joined);
    if (message_arena != submessage_arena) {
      participant_joined = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, participant_joined, submessage_arena);
    }
    set_has_participant_joined();
    _impl_.event_data_.participant_joined_ = participant_joined;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.ChatEvent.participant_joined)
}
ChatEvent::ChatEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.ChatEvent)
}
ChatEvent::ChatEvent(const ChatEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_){}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    _this->_impl_.message_id_.Set(from._internal_message_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.event_type_ = from._impl_.event_type_;
  clear_has_event_data();
  switch (from.event_data_case()) {
    case kConversationCreated: {
      _this->_internal_mutable_conversation_created()->::unhinged::cdc::ConversationCreated::MergeFrom(
          from._internal_conversation_created());
      break;
    }
    case kMessageSent: {
      _this->_internal_mutable_message_sent()->::unhinged::cdc::MessageSent::MergeFrom(
          from._internal_message_sent());
      break;
    }
    case kMessageUpdated: {
      _this->_internal_mutable_message_updated()->::unhinged::cdc::MessageUpdated::MergeFrom(
          from._internal_message_updated());
      break;
    }
    case kTypingStarted: {
      _this->_internal_mutable_typing_started()->::unhinged::cdc::TypingStarted::MergeFrom(
          from._internal_typing_started());
      break;
    }
    case kParticipantJoined: {
      _this->_internal_mutable_participant_joined()->::unhinged::cdc::ParticipantJoined::MergeFrom(
          from._internal_participant_joined());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.ChatEvent)
}

inline void ChatEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_){}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_event_data();
}

ChatEvent::~ChatEvent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.ChatEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversation_id_.Destroy();
  _impl_.message_id_.Destroy();
  if (has_event_data()) {
    clear_event_data();
  }
}

void ChatEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatEvent::clear_event_data() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.cdc.ChatEvent)
  switch (event_data_case()) {
    case kConversationCreated: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.conversation_created_;
      }
      break;
    }
    case kMessageSent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.message_sent_;
      }
      break;
    }
    case kMessageUpdated: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.message_updated_;
      }
      break;
    }
    case kTypingStarted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.typing_started_;
      }
      break;
    }
    case kParticipantJoined: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.participant_joined_;
      }
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_DATA_NOT_SET;
}


void ChatEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.ChatEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conversation_id_.ClearToEmpty();
  _impl_.message_id_.ClearToEmpty();
  _impl_.event_type_ = 0;
  clear_event_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ChatEvent.conversation_id"));
        } else
          goto handle_unusual;
        continue;
      // string message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ChatEvent.message_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.ChatEventType event_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::unhinged::cdc::ChatEventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.ConversationCreated conversation_created = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_conversation_created(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.MessageSent message_sent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.MessageUpdated message_updated = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.TypingStarted typing_started = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_typing_started(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.ParticipantJoined participant_joined = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant_joined(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.ChatEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ChatEvent.conversation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // string message_id = 2;
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ChatEvent.message_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_id(), target);
  }

  // .unhinged.cdc.ChatEventType event_type = 3;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_event_type(), target);
  }

  // .unhinged.cdc.ConversationCreated conversation_created = 10;
  if (_internal_has_conversation_created()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::conversation_created(this),
        _Internal::conversation_created(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.MessageSent message_sent = 11;
  if (_internal_has_message_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::message_sent(this),
        _Internal::message_sent(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.MessageUpdated message_updated = 12;
  if (_internal_has_message_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::message_updated(this),
        _Internal::message_updated(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.TypingStarted typing_started = 13;
  if (_internal_has_typing_started()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::typing_started(this),
        _Internal::typing_started(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.ParticipantJoined participant_joined = 14;
  if (_internal_has_participant_joined()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::participant_joined(this),
        _Internal::participant_joined(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.ChatEvent)
  return target;
}

size_t ChatEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.ChatEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  // string message_id = 2;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // .unhinged.cdc.ChatEventType event_type = 3;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  switch (event_data_case()) {
    // .unhinged.cdc.ConversationCreated conversation_created = 10;
    case kConversationCreated: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.conversation_created_);
      break;
    }
    // .unhinged.cdc.MessageSent message_sent = 11;
    case kMessageSent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.message_sent_);
      break;
    }
    // .unhinged.cdc.MessageUpdated message_updated = 12;
    case kMessageUpdated: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.message_updated_);
      break;
    }
    // .unhinged.cdc.TypingStarted typing_started = 13;
    case kTypingStarted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.typing_started_);
      break;
    }
    // .unhinged.cdc.ParticipantJoined participant_joined = 14;
    case kParticipantJoined: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.participant_joined_);
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatEvent::GetClassData() const { return &_class_data_; }


void ChatEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatEvent*>(&to_msg);
  auto& from = static_cast<const ChatEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.ChatEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (from._internal_event_type() != 0) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  switch (from.event_data_case()) {
    case kConversationCreated: {
      _this->_internal_mutable_conversation_created()->::unhinged::cdc::ConversationCreated::MergeFrom(
          from._internal_conversation_created());
      break;
    }
    case kMessageSent: {
      _this->_internal_mutable_message_sent()->::unhinged::cdc::MessageSent::MergeFrom(
          from._internal_message_sent());
      break;
    }
    case kMessageUpdated: {
      _this->_internal_mutable_message_updated()->::unhinged::cdc::MessageUpdated::MergeFrom(
          from._internal_message_updated());
      break;
    }
    case kTypingStarted: {
      _this->_internal_mutable_typing_started()->::unhinged::cdc::TypingStarted::MergeFrom(
          from._internal_typing_started());
      break;
    }
    case kParticipantJoined: {
      _this->_internal_mutable_participant_joined()->::unhinged::cdc::ParticipantJoined::MergeFrom(
          from._internal_participant_joined());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatEvent::CopyFrom(const ChatEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.ChatEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatEvent::IsInitialized() const {
  return true;
}

void ChatEvent::InternalSwap(ChatEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_id_, lhs_arena,
      &other->_impl_.conversation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_id_, lhs_arena,
      &other->_impl_.message_id_, rhs_arena
  );
  swap(_impl_.event_type_, other->_impl_.event_type_);
  swap(_impl_.event_data_, other->_impl_.event_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[36]);
}

// ===================================================================

class ConversationCreated::_Internal {
 public:
};

ConversationCreated::ConversationCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.ConversationCreated)
}
ConversationCreated::ConversationCreated(const ConversationCreated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConversationCreated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_ids_){from._impl_.participant_ids_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.created_by_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_by().empty()) {
    _this->_impl_.created_by_.Set(from._internal_created_by(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.ConversationCreated)
}

inline void ConversationCreated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_ids_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.created_by_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConversationCreated::~ConversationCreated() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.ConversationCreated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConversationCreated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_ids_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.created_by_.Destroy();
}

void ConversationCreated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConversationCreated::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.ConversationCreated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participant_ids_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.created_by_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConversationCreated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ConversationCreated.title"));
        } else
          goto handle_unusual;
        continue;
      // string created_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_created_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ConversationCreated.created_by"));
        } else
          goto handle_unusual;
        continue;
      // repeated string participant_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_participant_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ConversationCreated.participant_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConversationCreated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.ConversationCreated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ConversationCreated.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string created_by = 2;
  if (!this->_internal_created_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_by().data(), static_cast<int>(this->_internal_created_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ConversationCreated.created_by");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_created_by(), target);
  }

  // repeated string participant_ids = 3;
  for (int i = 0, n = this->_internal_participant_ids_size(); i < n; i++) {
    const auto& s = this->_internal_participant_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ConversationCreated.participant_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.ConversationCreated)
  return target;
}

size_t ConversationCreated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.ConversationCreated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string participant_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.participant_ids_.size());
  for (int i = 0, n = _impl_.participant_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.participant_ids_.Get(i));
  }

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string created_by = 2;
  if (!this->_internal_created_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_by());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConversationCreated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConversationCreated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConversationCreated::GetClassData() const { return &_class_data_; }


void ConversationCreated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConversationCreated*>(&to_msg);
  auto& from = static_cast<const ConversationCreated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.ConversationCreated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.participant_ids_.MergeFrom(from._impl_.participant_ids_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_created_by().empty()) {
    _this->_internal_set_created_by(from._internal_created_by());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConversationCreated::CopyFrom(const ConversationCreated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.ConversationCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConversationCreated::IsInitialized() const {
  return true;
}

void ConversationCreated::InternalSwap(ConversationCreated* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.participant_ids_.InternalSwap(&other->_impl_.participant_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.created_by_, lhs_arena,
      &other->_impl_.created_by_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConversationCreated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[37]);
}

// ===================================================================

class MessageSent::_Internal {
 public:
};

MessageSent::MessageSent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.MessageSent)
}
MessageSent::MessageSent(const MessageSent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageSent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.sent_by_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    _this->_impl_.role_.Set(from._internal_role(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sent_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sent_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sent_by().empty()) {
    _this->_impl_.sent_by_.Set(from._internal_sent_by(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.MessageSent)
}

inline void MessageSent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.sent_by_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sent_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sent_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageSent::~MessageSent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.MessageSent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageSent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
  _impl_.role_.Destroy();
  _impl_.sent_by_.Destroy();
}

void MessageSent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageSent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.MessageSent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _impl_.role_.ClearToEmpty();
  _impl_.sent_by_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageSent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.MessageSent.content"));
        } else
          goto handle_unusual;
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.MessageSent.role"));
        } else
          goto handle_unusual;
        continue;
      // string sent_by = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sent_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.MessageSent.sent_by"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageSent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.MessageSent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.MessageSent.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.MessageSent.role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role(), target);
  }

  // string sent_by = 3;
  if (!this->_internal_sent_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sent_by().data(), static_cast<int>(this->_internal_sent_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.MessageSent.sent_by");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sent_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.MessageSent)
  return target;
}

size_t MessageSent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.MessageSent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // string sent_by = 3;
  if (!this->_internal_sent_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sent_by());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageSent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageSent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageSent::GetClassData() const { return &_class_data_; }


void MessageSent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageSent*>(&to_msg);
  auto& from = static_cast<const MessageSent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.MessageSent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_role().empty()) {
    _this->_internal_set_role(from._internal_role());
  }
  if (!from._internal_sent_by().empty()) {
    _this->_internal_set_sent_by(from._internal_sent_by());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageSent::CopyFrom(const MessageSent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.MessageSent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageSent::IsInitialized() const {
  return true;
}

void MessageSent::InternalSwap(MessageSent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_, lhs_arena,
      &other->_impl_.role_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sent_by_, lhs_arena,
      &other->_impl_.sent_by_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageSent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[38]);
}

// ===================================================================

class MessageUpdated::_Internal {
 public:
};

MessageUpdated::MessageUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.MessageUpdated)
}
MessageUpdated::MessageUpdated(const MessageUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageUpdated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.updated_by_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.updated_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updated_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updated_by().empty()) {
    _this->_impl_.updated_by_.Set(from._internal_updated_by(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.MessageUpdated)
}

inline void MessageUpdated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.updated_by_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updated_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updated_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageUpdated::~MessageUpdated() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.MessageUpdated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
  _impl_.updated_by_.Destroy();
}

void MessageUpdated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.MessageUpdated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _impl_.updated_by_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageUpdated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.MessageUpdated.content"));
        } else
          goto handle_unusual;
        continue;
      // string updated_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_updated_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.MessageUpdated.updated_by"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageUpdated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.MessageUpdated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.MessageUpdated.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  // string updated_by = 2;
  if (!this->_internal_updated_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_by().data(), static_cast<int>(this->_internal_updated_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.MessageUpdated.updated_by");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_updated_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.MessageUpdated)
  return target;
}

size_t MessageUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.MessageUpdated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string updated_by = 2;
  if (!this->_internal_updated_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_by());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageUpdated::GetClassData() const { return &_class_data_; }


void MessageUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageUpdated*>(&to_msg);
  auto& from = static_cast<const MessageUpdated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.MessageUpdated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_updated_by().empty()) {
    _this->_internal_set_updated_by(from._internal_updated_by());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageUpdated::CopyFrom(const MessageUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.MessageUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageUpdated::IsInitialized() const {
  return true;
}

void MessageUpdated::InternalSwap(MessageUpdated* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.updated_by_, lhs_arena,
      &other->_impl_.updated_by_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageUpdated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[39]);
}

// ===================================================================

class TypingStarted::_Internal {
 public:
};

TypingStarted::TypingStarted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.TypingStarted)
}
TypingStarted::TypingStarted(const TypingStarted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypingStarted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.TypingStarted)
}

inline void TypingStarted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TypingStarted::~TypingStarted() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.TypingStarted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypingStarted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
}

void TypingStarted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypingStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.TypingStarted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypingStarted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.TypingStarted.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypingStarted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.TypingStarted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.TypingStarted.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.TypingStarted)
  return target;
}

size_t TypingStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.TypingStarted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypingStarted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypingStarted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypingStarted::GetClassData() const { return &_class_data_; }


void TypingStarted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypingStarted*>(&to_msg);
  auto& from = static_cast<const TypingStarted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.TypingStarted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypingStarted::CopyFrom(const TypingStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.TypingStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypingStarted::IsInitialized() const {
  return true;
}

void TypingStarted::InternalSwap(TypingStarted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TypingStarted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[40]);
}

// ===================================================================

class ParticipantJoined::_Internal {
 public:
};

ParticipantJoined::ParticipantJoined(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.ParticipantJoined)
}
ParticipantJoined::ParticipantJoined(const ParticipantJoined& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantJoined* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.invited_by_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.invited_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invited_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_invited_by().empty()) {
    _this->_impl_.invited_by_.Set(from._internal_invited_by(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.ParticipantJoined)
}

inline void ParticipantJoined::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.invited_by_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.invited_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invited_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParticipantJoined::~ParticipantJoined() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.ParticipantJoined)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantJoined::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.invited_by_.Destroy();
}

void ParticipantJoined::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantJoined::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.ParticipantJoined)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.invited_by_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantJoined::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ParticipantJoined.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string invited_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_invited_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ParticipantJoined.invited_by"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantJoined::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.ParticipantJoined)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ParticipantJoined.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string invited_by = 2;
  if (!this->_internal_invited_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invited_by().data(), static_cast<int>(this->_internal_invited_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ParticipantJoined.invited_by");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invited_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.ParticipantJoined)
  return target;
}

size_t ParticipantJoined::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.ParticipantJoined)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string invited_by = 2;
  if (!this->_internal_invited_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invited_by());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantJoined::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantJoined::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantJoined::GetClassData() const { return &_class_data_; }


void ParticipantJoined::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantJoined*>(&to_msg);
  auto& from = static_cast<const ParticipantJoined&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.ParticipantJoined)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_invited_by().empty()) {
    _this->_internal_set_invited_by(from._internal_invited_by());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantJoined::CopyFrom(const ParticipantJoined& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.ParticipantJoined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantJoined::IsInitialized() const {
  return true;
}

void ParticipantJoined::InternalSwap(ParticipantJoined* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.invited_by_, lhs_arena,
      &other->_impl_.invited_by_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantJoined::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[41]);
}

// ===================================================================

class AudioEvent::_Internal {
 public:
  static const ::unhinged::cdc::TTSStarted& tts_started(const AudioEvent* msg);
  static const ::unhinged::cdc::TTSCompleted& tts_completed(const AudioEvent* msg);
  static const ::unhinged::cdc::STTCompleted& stt_completed(const AudioEvent* msg);
};

const ::unhinged::cdc::TTSStarted&
AudioEvent::_Internal::tts_started(const AudioEvent* msg) {
  return *msg->_impl_.event_data_.tts_started_;
}
const ::unhinged::cdc::TTSCompleted&
AudioEvent::_Internal::tts_completed(const AudioEvent* msg) {
  return *msg->_impl_.event_data_.tts_completed_;
}
const ::unhinged::cdc::STTCompleted&
AudioEvent::_Internal::stt_completed(const AudioEvent* msg) {
  return *msg->_impl_.event_data_.stt_completed_;
}
void AudioEvent::set_allocated_tts_started(::unhinged::cdc::TTSStarted* tts_started) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (tts_started) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tts_started);
    if (message_arena != submessage_arena) {
      tts_started = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tts_started, submessage_arena);
    }
    set_has_tts_started();
    _impl_.event_data_.tts_started_ = tts_started;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.AudioEvent.tts_started)
}
void AudioEvent::set_allocated_tts_completed(::unhinged::cdc::TTSCompleted* tts_completed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (tts_completed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tts_completed);
    if (message_arena != submessage_arena) {
      tts_completed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tts_completed, submessage_arena);
    }
    set_has_tts_completed();
    _impl_.event_data_.tts_completed_ = tts_completed;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.AudioEvent.tts_completed)
}
void AudioEvent::set_allocated_stt_completed(::unhinged::cdc::STTCompleted* stt_completed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (stt_completed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stt_completed);
    if (message_arena != submessage_arena) {
      stt_completed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stt_completed, submessage_arena);
    }
    set_has_stt_completed();
    _impl_.event_data_.stt_completed_ = stt_completed;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.AudioEvent.stt_completed)
}
AudioEvent::AudioEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.AudioEvent)
}
AudioEvent::AudioEvent(const AudioEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.audio_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.audio_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_id().empty()) {
    _this->_impl_.audio_id_.Set(from._internal_audio_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.event_type_ = from._impl_.event_type_;
  clear_has_event_data();
  switch (from.event_data_case()) {
    case kTtsStarted: {
      _this->_internal_mutable_tts_started()->::unhinged::cdc::TTSStarted::MergeFrom(
          from._internal_tts_started());
      break;
    }
    case kTtsCompleted: {
      _this->_internal_mutable_tts_completed()->::unhinged::cdc::TTSCompleted::MergeFrom(
          from._internal_tts_completed());
      break;
    }
    case kSttCompleted: {
      _this->_internal_mutable_stt_completed()->::unhinged::cdc::STTCompleted::MergeFrom(
          from._internal_stt_completed());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.AudioEvent)
}

inline void AudioEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.audio_id_){}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.audio_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_event_data();
}

AudioEvent::~AudioEvent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.AudioEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audio_id_.Destroy();
  if (has_event_data()) {
    clear_event_data();
  }
}

void AudioEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioEvent::clear_event_data() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.cdc.AudioEvent)
  switch (event_data_case()) {
    case kTtsStarted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.tts_started_;
      }
      break;
    }
    case kTtsCompleted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.tts_completed_;
      }
      break;
    }
    case kSttCompleted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.stt_completed_;
      }
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_DATA_NOT_SET;
}


void AudioEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.AudioEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audio_id_.ClearToEmpty();
  _impl_.event_type_ = 0;
  clear_event_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string audio_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_audio_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AudioEvent.audio_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.AudioEventType event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::unhinged::cdc::AudioEventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.TTSStarted tts_started = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tts_started(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.TTSCompleted tts_completed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tts_completed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.STTCompleted stt_completed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_stt_completed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.AudioEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string audio_id = 1;
  if (!this->_internal_audio_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_id().data(), static_cast<int>(this->_internal_audio_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AudioEvent.audio_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_audio_id(), target);
  }

  // .unhinged.cdc.AudioEventType event_type = 2;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_type(), target);
  }

  // .unhinged.cdc.TTSStarted tts_started = 10;
  if (_internal_has_tts_started()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tts_started(this),
        _Internal::tts_started(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.TTSCompleted tts_completed = 11;
  if (_internal_has_tts_completed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tts_completed(this),
        _Internal::tts_completed(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.STTCompleted stt_completed = 12;
  if (_internal_has_stt_completed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::stt_completed(this),
        _Internal::stt_completed(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.AudioEvent)
  return target;
}

size_t AudioEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.AudioEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string audio_id = 1;
  if (!this->_internal_audio_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_id());
  }

  // .unhinged.cdc.AudioEventType event_type = 2;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  switch (event_data_case()) {
    // .unhinged.cdc.TTSStarted tts_started = 10;
    case kTtsStarted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.tts_started_);
      break;
    }
    // .unhinged.cdc.TTSCompleted tts_completed = 11;
    case kTtsCompleted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.tts_completed_);
      break;
    }
    // .unhinged.cdc.STTCompleted stt_completed = 12;
    case kSttCompleted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.stt_completed_);
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioEvent::GetClassData() const { return &_class_data_; }


void AudioEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioEvent*>(&to_msg);
  auto& from = static_cast<const AudioEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.AudioEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_audio_id().empty()) {
    _this->_internal_set_audio_id(from._internal_audio_id());
  }
  if (from._internal_event_type() != 0) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  switch (from.event_data_case()) {
    case kTtsStarted: {
      _this->_internal_mutable_tts_started()->::unhinged::cdc::TTSStarted::MergeFrom(
          from._internal_tts_started());
      break;
    }
    case kTtsCompleted: {
      _this->_internal_mutable_tts_completed()->::unhinged::cdc::TTSCompleted::MergeFrom(
          from._internal_tts_completed());
      break;
    }
    case kSttCompleted: {
      _this->_internal_mutable_stt_completed()->::unhinged::cdc::STTCompleted::MergeFrom(
          from._internal_stt_completed());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioEvent::CopyFrom(const AudioEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.AudioEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioEvent::IsInitialized() const {
  return true;
}

void AudioEvent::InternalSwap(AudioEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.audio_id_, lhs_arena,
      &other->_impl_.audio_id_, rhs_arena
  );
  swap(_impl_.event_type_, other->_impl_.event_type_);
  swap(_impl_.event_data_, other->_impl_.event_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[42]);
}

// ===================================================================

class TTSStarted::_Internal {
 public:
};

TTSStarted::TTSStarted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.TTSStarted)
}
TTSStarted::TTSStarted(const TTSStarted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TTSStarted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.voice_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.voice_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voice_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_voice_id().empty()) {
    _this->_impl_.voice_id_.Set(from._internal_voice_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.TTSStarted)
}

inline void TTSStarted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.voice_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.voice_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voice_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TTSStarted::~TTSStarted() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.TTSStarted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TTSStarted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.voice_id_.Destroy();
}

void TTSStarted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TTSStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.TTSStarted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.voice_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TTSStarted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.TTSStarted.text"));
        } else
          goto handle_unusual;
        continue;
      // string voice_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_voice_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.TTSStarted.voice_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TTSStarted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.TTSStarted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.TTSStarted.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // string voice_id = 2;
  if (!this->_internal_voice_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_voice_id().data(), static_cast<int>(this->_internal_voice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.TTSStarted.voice_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_voice_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.TTSStarted)
  return target;
}

size_t TTSStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.TTSStarted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string voice_id = 2;
  if (!this->_internal_voice_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_voice_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TTSStarted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TTSStarted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TTSStarted::GetClassData() const { return &_class_data_; }


void TTSStarted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TTSStarted*>(&to_msg);
  auto& from = static_cast<const TTSStarted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.TTSStarted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_voice_id().empty()) {
    _this->_internal_set_voice_id(from._internal_voice_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TTSStarted::CopyFrom(const TTSStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.TTSStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTSStarted::IsInitialized() const {
  return true;
}

void TTSStarted::InternalSwap(TTSStarted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.voice_id_, lhs_arena,
      &other->_impl_.voice_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TTSStarted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[43]);
}

// ===================================================================

class TTSCompleted::_Internal {
 public:
};

TTSCompleted::TTSCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.TTSCompleted)
}
TTSCompleted::TTSCompleted(const TTSCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TTSCompleted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.audio_url_){}
    , decltype(_impl_.duration_seconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.audio_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_url().empty()) {
    _this->_impl_.audio_url_.Set(from._internal_audio_url(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.duration_seconds_ = from._impl_.duration_seconds_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.TTSCompleted)
}

inline void TTSCompleted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.audio_url_){}
    , decltype(_impl_.duration_seconds_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.audio_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TTSCompleted::~TTSCompleted() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.TTSCompleted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TTSCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audio_url_.Destroy();
}

void TTSCompleted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TTSCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.TTSCompleted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audio_url_.ClearToEmpty();
  _impl_.duration_seconds_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TTSCompleted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string audio_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_audio_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.TTSCompleted.audio_url"));
        } else
          goto handle_unusual;
        continue;
      // float duration_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TTSCompleted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.TTSCompleted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string audio_url = 1;
  if (!this->_internal_audio_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_url().data(), static_cast<int>(this->_internal_audio_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.TTSCompleted.audio_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_audio_url(), target);
  }

  // float duration_seconds = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = this->_internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_duration_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.TTSCompleted)
  return target;
}

size_t TTSCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.TTSCompleted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string audio_url = 1;
  if (!this->_internal_audio_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_url());
  }

  // float duration_seconds = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = this->_internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TTSCompleted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TTSCompleted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TTSCompleted::GetClassData() const { return &_class_data_; }


void TTSCompleted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TTSCompleted*>(&to_msg);
  auto& from = static_cast<const TTSCompleted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.TTSCompleted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_audio_url().empty()) {
    _this->_internal_set_audio_url(from._internal_audio_url());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = from._internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    _this->_internal_set_duration_seconds(from._internal_duration_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TTSCompleted::CopyFrom(const TTSCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.TTSCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTSCompleted::IsInitialized() const {
  return true;
}

void TTSCompleted::InternalSwap(TTSCompleted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.audio_url_, lhs_arena,
      &other->_impl_.audio_url_, rhs_arena
  );
  swap(_impl_.duration_seconds_, other->_impl_.duration_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TTSCompleted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[44]);
}

// ===================================================================

class STTCompleted::_Internal {
 public:
};

STTCompleted::STTCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.STTCompleted)
}
STTCompleted::STTCompleted(const STTCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  STTCompleted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transcript_){}
    , decltype(_impl_.confidence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.transcript_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transcript_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transcript().empty()) {
    _this->_impl_.transcript_.Set(from._internal_transcript(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.confidence_ = from._impl_.confidence_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.STTCompleted)
}

inline void STTCompleted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transcript_){}
    , decltype(_impl_.confidence_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.transcript_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transcript_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

STTCompleted::~STTCompleted() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.STTCompleted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void STTCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transcript_.Destroy();
}

void STTCompleted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void STTCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.STTCompleted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transcript_.ClearToEmpty();
  _impl_.confidence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STTCompleted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string transcript = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transcript();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.STTCompleted.transcript"));
        } else
          goto handle_unusual;
        continue;
      // float confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STTCompleted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.STTCompleted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (!this->_internal_transcript().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transcript().data(), static_cast<int>(this->_internal_transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.STTCompleted.transcript");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transcript(), target);
  }

  // float confidence = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.STTCompleted)
  return target;
}

size_t STTCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.STTCompleted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transcript = 1;
  if (!this->_internal_transcript().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transcript());
  }

  // float confidence = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STTCompleted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    STTCompleted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STTCompleted::GetClassData() const { return &_class_data_; }


void STTCompleted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<STTCompleted*>(&to_msg);
  auto& from = static_cast<const STTCompleted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.STTCompleted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transcript().empty()) {
    _this->_internal_set_transcript(from._internal_transcript());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = from._internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STTCompleted::CopyFrom(const STTCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.STTCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STTCompleted::IsInitialized() const {
  return true;
}

void STTCompleted::InternalSwap(STTCompleted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transcript_, lhs_arena,
      &other->_impl_.transcript_, rhs_arena
  );
  swap(_impl_.confidence_, other->_impl_.confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STTCompleted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[45]);
}

// ===================================================================

class UserEvent::_Internal {
 public:
  static const ::unhinged::cdc::UserCreated& user_created(const UserEvent* msg);
  static const ::unhinged::cdc::UserLoggedIn& user_logged_in(const UserEvent* msg);
  static const ::unhinged::cdc::TeamMemberAdded& team_member_added(const UserEvent* msg);
};

const ::unhinged::cdc::UserCreated&
UserEvent::_Internal::user_created(const UserEvent* msg) {
  return *msg->_impl_.event_data_.user_created_;
}
const ::unhinged::cdc::UserLoggedIn&
UserEvent::_Internal::user_logged_in(const UserEvent* msg) {
  return *msg->_impl_.event_data_.user_logged_in_;
}
const ::unhinged::cdc::TeamMemberAdded&
UserEvent::_Internal::team_member_added(const UserEvent* msg) {
  return *msg->_impl_.event_data_.team_member_added_;
}
void UserEvent::set_allocated_user_created(::unhinged::cdc::UserCreated* user_created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (user_created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_created);
    if (message_arena != submessage_arena) {
      user_created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_created, submessage_arena);
    }
    set_has_user_created();
    _impl_.event_data_.user_created_ = user_created;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.UserEvent.user_created)
}
void UserEvent::set_allocated_user_logged_in(::unhinged::cdc::UserLoggedIn* user_logged_in) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (user_logged_in) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_logged_in);
    if (message_arena != submessage_arena) {
      user_logged_in = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_logged_in, submessage_arena);
    }
    set_has_user_logged_in();
    _impl_.event_data_.user_logged_in_ = user_logged_in;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.UserEvent.user_logged_in)
}
void UserEvent::set_allocated_team_member_added(::unhinged::cdc::TeamMemberAdded* team_member_added) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event_data();
  if (team_member_added) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team_member_added);
    if (message_arena != submessage_arena) {
      team_member_added = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team_member_added, submessage_arena);
    }
    set_has_team_member_added();
    _impl_.event_data_.team_member_added_ = team_member_added;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.UserEvent.team_member_added)
}
UserEvent::UserEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.UserEvent)
}
UserEvent::UserEvent(const UserEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.event_type_ = from._impl_.event_type_;
  clear_has_event_data();
  switch (from.event_data_case()) {
    case kUserCreated: {
      _this->_internal_mutable_user_created()->::unhinged::cdc::UserCreated::MergeFrom(
          from._internal_user_created());
      break;
    }
    case kUserLoggedIn: {
      _this->_internal_mutable_user_logged_in()->::unhinged::cdc::UserLoggedIn::MergeFrom(
          from._internal_user_logged_in());
      break;
    }
    case kTeamMemberAdded: {
      _this->_internal_mutable_team_member_added()->::unhinged::cdc::TeamMemberAdded::MergeFrom(
          from._internal_team_member_added());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.UserEvent)
}

inline void UserEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.event_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_event_data();
}

UserEvent::~UserEvent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.UserEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  if (has_event_data()) {
    clear_event_data();
  }
}

void UserEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserEvent::clear_event_data() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.cdc.UserEvent)
  switch (event_data_case()) {
    case kUserCreated: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.user_created_;
      }
      break;
    }
    case kUserLoggedIn: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.user_logged_in_;
      }
      break;
    }
    case kTeamMemberAdded: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_data_.team_member_added_;
      }
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_DATA_NOT_SET;
}


void UserEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.UserEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.event_type_ = 0;
  clear_event_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UserEvent.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.UserEventType event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::unhinged::cdc::UserEventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.UserCreated user_created = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_created(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.UserLoggedIn user_logged_in = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_logged_in(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.TeamMemberAdded team_member_added = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_member_added(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.UserEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UserEvent.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .unhinged.cdc.UserEventType event_type = 2;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_type(), target);
  }

  // .unhinged.cdc.UserCreated user_created = 10;
  if (_internal_has_user_created()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::user_created(this),
        _Internal::user_created(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.UserLoggedIn user_logged_in = 11;
  if (_internal_has_user_logged_in()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::user_logged_in(this),
        _Internal::user_logged_in(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.TeamMemberAdded team_member_added = 12;
  if (_internal_has_team_member_added()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::team_member_added(this),
        _Internal::team_member_added(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.UserEvent)
  return target;
}

size_t UserEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.UserEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .unhinged.cdc.UserEventType event_type = 2;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  switch (event_data_case()) {
    // .unhinged.cdc.UserCreated user_created = 10;
    case kUserCreated: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.user_created_);
      break;
    }
    // .unhinged.cdc.UserLoggedIn user_logged_in = 11;
    case kUserLoggedIn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.user_logged_in_);
      break;
    }
    // .unhinged.cdc.TeamMemberAdded team_member_added = 12;
    case kTeamMemberAdded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_.team_member_added_);
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserEvent::GetClassData() const { return &_class_data_; }


void UserEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserEvent*>(&to_msg);
  auto& from = static_cast<const UserEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.UserEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_event_type() != 0) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  switch (from.event_data_case()) {
    case kUserCreated: {
      _this->_internal_mutable_user_created()->::unhinged::cdc::UserCreated::MergeFrom(
          from._internal_user_created());
      break;
    }
    case kUserLoggedIn: {
      _this->_internal_mutable_user_logged_in()->::unhinged::cdc::UserLoggedIn::MergeFrom(
          from._internal_user_logged_in());
      break;
    }
    case kTeamMemberAdded: {
      _this->_internal_mutable_team_member_added()->::unhinged::cdc::TeamMemberAdded::MergeFrom(
          from._internal_team_member_added());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserEvent::CopyFrom(const UserEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.UserEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEvent::IsInitialized() const {
  return true;
}

void UserEvent::InternalSwap(UserEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  swap(_impl_.event_type_, other->_impl_.event_type_);
  swap(_impl_.event_data_, other->_impl_.event_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[46]);
}

// ===================================================================

class UserCreated::_Internal {
 public:
};

UserCreated::UserCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.UserCreated)
}
UserCreated::UserCreated(const UserCreated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserCreated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.UserCreated)
}

inline void UserCreated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserCreated::~UserCreated() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.UserCreated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserCreated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
  _impl_.name_.Destroy();
}

void UserCreated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserCreated::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.UserCreated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserCreated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UserCreated.email"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UserCreated.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserCreated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.UserCreated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UserCreated.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UserCreated.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.UserCreated)
  return target;
}

size_t UserCreated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.UserCreated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserCreated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserCreated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserCreated::GetClassData() const { return &_class_data_; }


void UserCreated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserCreated*>(&to_msg);
  auto& from = static_cast<const UserCreated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.UserCreated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserCreated::CopyFrom(const UserCreated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.UserCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCreated::IsInitialized() const {
  return true;
}

void UserCreated::InternalSwap(UserCreated* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserCreated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[47]);
}

// ===================================================================

class UserLoggedIn::_Internal {
 public:
};

UserLoggedIn::UserLoggedIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.UserLoggedIn)
}
UserLoggedIn::UserLoggedIn(const UserLoggedIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLoggedIn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_address_){}
    , decltype(_impl_.user_agent_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    _this->_impl_.ip_address_.Set(from._internal_ip_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_agent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_agent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_agent().empty()) {
    _this->_impl_.user_agent_.Set(from._internal_user_agent(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.UserLoggedIn)
}

inline void UserLoggedIn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_address_){}
    , decltype(_impl_.user_agent_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_agent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_agent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserLoggedIn::~UserLoggedIn() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.UserLoggedIn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLoggedIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_address_.Destroy();
  _impl_.user_agent_.Destroy();
}

void UserLoggedIn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLoggedIn::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.UserLoggedIn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_address_.ClearToEmpty();
  _impl_.user_agent_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLoggedIn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UserLoggedIn.ip_address"));
        } else
          goto handle_unusual;
        continue;
      // string user_agent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_agent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UserLoggedIn.user_agent"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLoggedIn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.UserLoggedIn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UserLoggedIn.ip_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  // string user_agent = 2;
  if (!this->_internal_user_agent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_agent().data(), static_cast<int>(this->_internal_user_agent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UserLoggedIn.user_agent");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_agent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.UserLoggedIn)
  return target;
}

size_t UserLoggedIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.UserLoggedIn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // string user_agent = 2;
  if (!this->_internal_user_agent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_agent());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLoggedIn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLoggedIn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLoggedIn::GetClassData() const { return &_class_data_; }


void UserLoggedIn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLoggedIn*>(&to_msg);
  auto& from = static_cast<const UserLoggedIn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.UserLoggedIn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (!from._internal_user_agent().empty()) {
    _this->_internal_set_user_agent(from._internal_user_agent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLoggedIn::CopyFrom(const UserLoggedIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.UserLoggedIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoggedIn::IsInitialized() const {
  return true;
}

void UserLoggedIn::InternalSwap(UserLoggedIn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_address_, lhs_arena,
      &other->_impl_.ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_agent_, lhs_arena,
      &other->_impl_.user_agent_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLoggedIn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[48]);
}

// ===================================================================

class TeamMemberAdded::_Internal {
 public:
};

TeamMemberAdded::TeamMemberAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.TeamMemberAdded)
}
TeamMemberAdded::TeamMemberAdded(const TeamMemberAdded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamMemberAdded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.team_id_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.added_by_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_team_id().empty()) {
    _this->_impl_.team_id_.Set(from._internal_team_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    _this->_impl_.role_.Set(from._internal_role(), 
      _this->GetArenaForAllocation());
  }
  _impl_.added_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.added_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_added_by().empty()) {
    _this->_impl_.added_by_.Set(from._internal_added_by(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.TeamMemberAdded)
}

inline void TeamMemberAdded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.team_id_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.added_by_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.team_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.added_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.added_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TeamMemberAdded::~TeamMemberAdded() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.TeamMemberAdded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamMemberAdded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.team_id_.Destroy();
  _impl_.role_.Destroy();
  _impl_.added_by_.Destroy();
}

void TeamMemberAdded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamMemberAdded::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.TeamMemberAdded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.team_id_.ClearToEmpty();
  _impl_.role_.ClearToEmpty();
  _impl_.added_by_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamMemberAdded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_team_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.TeamMemberAdded.team_id"));
        } else
          goto handle_unusual;
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.TeamMemberAdded.role"));
        } else
          goto handle_unusual;
        continue;
      // string added_by = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_added_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.TeamMemberAdded.added_by"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamMemberAdded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.TeamMemberAdded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string team_id = 1;
  if (!this->_internal_team_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_team_id().data(), static_cast<int>(this->_internal_team_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.TeamMemberAdded.team_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_team_id(), target);
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.TeamMemberAdded.role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role(), target);
  }

  // string added_by = 3;
  if (!this->_internal_added_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_added_by().data(), static_cast<int>(this->_internal_added_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.TeamMemberAdded.added_by");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_added_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.TeamMemberAdded)
  return target;
}

size_t TeamMemberAdded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.TeamMemberAdded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string team_id = 1;
  if (!this->_internal_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_team_id());
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // string added_by = 3;
  if (!this->_internal_added_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_added_by());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamMemberAdded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamMemberAdded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamMemberAdded::GetClassData() const { return &_class_data_; }


void TeamMemberAdded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamMemberAdded*>(&to_msg);
  auto& from = static_cast<const TeamMemberAdded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.TeamMemberAdded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_team_id().empty()) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  if (!from._internal_role().empty()) {
    _this->_internal_set_role(from._internal_role());
  }
  if (!from._internal_added_by().empty()) {
    _this->_internal_set_added_by(from._internal_added_by());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamMemberAdded::CopyFrom(const TeamMemberAdded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.TeamMemberAdded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberAdded::IsInitialized() const {
  return true;
}

void TeamMemberAdded::InternalSwap(TeamMemberAdded* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_id_, lhs_arena,
      &other->_impl_.team_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_, lhs_arena,
      &other->_impl_.role_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.added_by_, lhs_arena,
      &other->_impl_.added_by_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamMemberAdded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fevents_2eproto_getter, &descriptor_table_cdc_5fevents_2eproto_once,
      file_level_metadata_cdc_5fevents_2eproto[49]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cdc
}  // namespace unhinged
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::unhinged::cdc::UniversalEvent*
Arena::CreateMaybeMessage< ::unhinged::cdc::UniversalEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::UniversalEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::DocumentEvent*
Arena::CreateMaybeMessage< ::unhinged::cdc::DocumentEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::DocumentEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::DocumentCreated*
Arena::CreateMaybeMessage< ::unhinged::cdc::DocumentCreated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::DocumentCreated >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::DocumentUpdated*
Arena::CreateMaybeMessage< ::unhinged::cdc::DocumentUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::DocumentUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::DocumentDeleted*
Arena::CreateMaybeMessage< ::unhinged::cdc::DocumentDeleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::DocumentDeleted >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::DocumentAccessed*
Arena::CreateMaybeMessage< ::unhinged::cdc::DocumentAccessed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::DocumentAccessed >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::DocumentTagged*
Arena::CreateMaybeMessage< ::unhinged::cdc::DocumentTagged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::DocumentTagged >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::DocumentVersioned*
Arena::CreateMaybeMessage< ::unhinged::cdc::DocumentVersioned >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::DocumentVersioned >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::LLMEvent*
Arena::CreateMaybeMessage< ::unhinged::cdc::LLMEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::LLMEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::LLMPromptSent*
Arena::CreateMaybeMessage< ::unhinged::cdc::LLMPromptSent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::LLMPromptSent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::LLMResponseReceived*
Arena::CreateMaybeMessage< ::unhinged::cdc::LLMResponseReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::LLMResponseReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::LLMError*
Arena::CreateMaybeMessage< ::unhinged::cdc::LLMError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::LLMError >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::LLMFeedback*
Arena::CreateMaybeMessage< ::unhinged::cdc::LLMFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::LLMFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::LLMTokenUsage*
Arena::CreateMaybeMessage< ::unhinged::cdc::LLMTokenUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::LLMTokenUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::AgentEvent*
Arena::CreateMaybeMessage< ::unhinged::cdc::AgentEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::AgentEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::AgentStarted*
Arena::CreateMaybeMessage< ::unhinged::cdc::AgentStarted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::AgentStarted >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::AgentStepCompleted*
Arena::CreateMaybeMessage< ::unhinged::cdc::AgentStepCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::AgentStepCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::AgentCompleted*
Arena::CreateMaybeMessage< ::unhinged::cdc::AgentCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::AgentCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::AgentFailed*
Arena::CreateMaybeMessage< ::unhinged::cdc::AgentFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::AgentFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::AgentToolUsed*
Arena::CreateMaybeMessage< ::unhinged::cdc::AgentToolUsed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::AgentToolUsed >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::SessionEvent*
Arena::CreateMaybeMessage< ::unhinged::cdc::SessionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::SessionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::SessionStarted*
Arena::CreateMaybeMessage< ::unhinged::cdc::SessionStarted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::SessionStarted >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::SessionEnded*
Arena::CreateMaybeMessage< ::unhinged::cdc::SessionEnded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::SessionEnded >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::SessionContextAccessed*
Arena::CreateMaybeMessage< ::unhinged::cdc::SessionContextAccessed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::SessionContextAccessed >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::SessionHeartbeat*
Arena::CreateMaybeMessage< ::unhinged::cdc::SessionHeartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::SessionHeartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::SystemEvent*
Arena::CreateMaybeMessage< ::unhinged::cdc::SystemEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::SystemEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::HealthCheck*
Arena::CreateMaybeMessage< ::unhinged::cdc::HealthCheck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::HealthCheck >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::MetricReported*
Arena::CreateMaybeMessage< ::unhinged::cdc::MetricReported >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::MetricReported >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::AlertTriggered*
Arena::CreateMaybeMessage< ::unhinged::cdc::AlertTriggered >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::AlertTriggered >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::ServiceStarted*
Arena::CreateMaybeMessage< ::unhinged::cdc::ServiceStarted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::ServiceStarted >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::ServiceStopped*
Arena::CreateMaybeMessage< ::unhinged::cdc::ServiceStopped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::ServiceStopped >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::WorkflowEvent*
Arena::CreateMaybeMessage< ::unhinged::cdc::WorkflowEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::WorkflowEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::WorkflowTriggered*
Arena::CreateMaybeMessage< ::unhinged::cdc::WorkflowTriggered >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::WorkflowTriggered >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::WorkflowStepExecuted*
Arena::CreateMaybeMessage< ::unhinged::cdc::WorkflowStepExecuted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::WorkflowStepExecuted >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::WorkflowCompleted*
Arena::CreateMaybeMessage< ::unhinged::cdc::WorkflowCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::WorkflowCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::WorkflowFailed*
Arena::CreateMaybeMessage< ::unhinged::cdc::WorkflowFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::WorkflowFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::ChatEvent*
Arena::CreateMaybeMessage< ::unhinged::cdc::ChatEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::ChatEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::ConversationCreated*
Arena::CreateMaybeMessage< ::unhinged::cdc::ConversationCreated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::ConversationCreated >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::MessageSent*
Arena::CreateMaybeMessage< ::unhinged::cdc::MessageSent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::MessageSent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::MessageUpdated*
Arena::CreateMaybeMessage< ::unhinged::cdc::MessageUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::MessageUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::TypingStarted*
Arena::CreateMaybeMessage< ::unhinged::cdc::TypingStarted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::TypingStarted >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::ParticipantJoined*
Arena::CreateMaybeMessage< ::unhinged::cdc::ParticipantJoined >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::ParticipantJoined >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::AudioEvent*
Arena::CreateMaybeMessage< ::unhinged::cdc::AudioEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::AudioEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::TTSStarted*
Arena::CreateMaybeMessage< ::unhinged::cdc::TTSStarted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::TTSStarted >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::TTSCompleted*
Arena::CreateMaybeMessage< ::unhinged::cdc::TTSCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::TTSCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::STTCompleted*
Arena::CreateMaybeMessage< ::unhinged::cdc::STTCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::STTCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::UserEvent*
Arena::CreateMaybeMessage< ::unhinged::cdc::UserEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::UserEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::UserCreated*
Arena::CreateMaybeMessage< ::unhinged::cdc::UserCreated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::UserCreated >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::UserLoggedIn*
Arena::CreateMaybeMessage< ::unhinged::cdc::UserLoggedIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::UserLoggedIn >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::TeamMemberAdded*
Arena::CreateMaybeMessage< ::unhinged::cdc::TeamMemberAdded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::TeamMemberAdded >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
