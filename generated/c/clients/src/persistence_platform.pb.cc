// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: persistence_platform.proto

#include "persistence_platform.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace unhinged {
namespace persistence {
PROTOBUF_CONSTEXPR ExecutionContext::ExecutionContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.span_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecutionContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionContextDefaultTypeInternal() {}
  union {
    ExecutionContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionContextDefaultTypeInternal _ExecutionContext_default_instance_;
PROTOBUF_CONSTEXPR Record::Record(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordDefaultTypeInternal() {}
  union {
    Record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordDefaultTypeInternal _Record_default_instance_;
PROTOBUF_CONSTEXPR QueryCriteria::QueryCriteria(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.criteria_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct QueryCriteriaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryCriteriaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryCriteriaDefaultTypeInternal() {}
  union {
    QueryCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryCriteriaDefaultTypeInternal _QueryCriteria_default_instance_;
PROTOBUF_CONSTEXPR EqualsFilter::EqualsFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EqualsFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EqualsFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EqualsFilterDefaultTypeInternal() {}
  union {
    EqualsFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EqualsFilterDefaultTypeInternal _EqualsFilter_default_instance_;
PROTOBUF_CONSTEXPR GreaterThanFilter::GreaterThanFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GreaterThanFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GreaterThanFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GreaterThanFilterDefaultTypeInternal() {}
  union {
    GreaterThanFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GreaterThanFilterDefaultTypeInternal _GreaterThanFilter_default_instance_;
PROTOBUF_CONSTEXPR LessThanFilter::LessThanFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LessThanFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LessThanFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LessThanFilterDefaultTypeInternal() {}
  union {
    LessThanFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LessThanFilterDefaultTypeInternal _LessThanFilter_default_instance_;
PROTOBUF_CONSTEXPR InFilter::InFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InFilterDefaultTypeInternal() {}
  union {
    InFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InFilterDefaultTypeInternal _InFilter_default_instance_;
PROTOBUF_CONSTEXPR RangeFilter::RangeFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.min_value_)*/nullptr
  , /*decltype(_impl_.max_value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangeFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeFilterDefaultTypeInternal() {}
  union {
    RangeFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeFilterDefaultTypeInternal _RangeFilter_default_instance_;
PROTOBUF_CONSTEXPR TextSearchFilter::TextSearchFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_.query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.analyzer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextSearchFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextSearchFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextSearchFilterDefaultTypeInternal() {}
  union {
    TextSearchFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextSearchFilterDefaultTypeInternal _TextSearchFilter_default_instance_;
PROTOBUF_CONSTEXPR VectorSearchFilter::VectorSearchFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.query_vector_)*/{}
  , /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.distance_metric_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.threshold_)*/0
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorSearchFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorSearchFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorSearchFilterDefaultTypeInternal() {}
  union {
    VectorSearchFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorSearchFilterDefaultTypeInternal _VectorSearchFilter_default_instance_;
PROTOBUF_CONSTEXPR AndFilter::AndFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AndFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndFilterDefaultTypeInternal() {}
  union {
    AndFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndFilterDefaultTypeInternal _AndFilter_default_instance_;
PROTOBUF_CONSTEXPR OrFilter::OrFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrFilterDefaultTypeInternal() {}
  union {
    OrFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrFilterDefaultTypeInternal _OrFilter_default_instance_;
PROTOBUF_CONSTEXPR OrderBy::OrderBy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ascending_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderByDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderByDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderByDefaultTypeInternal() {}
  union {
    OrderBy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderByDefaultTypeInternal _OrderBy_default_instance_;
PROTOBUF_CONSTEXPR QuerySpec::QuerySpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.projections_)*/{}
  , /*decltype(_impl_.order_by_)*/{}
  , /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.criteria_)*/nullptr
  , /*decltype(_impl_.query_type_)*/0
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.offset_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpecDefaultTypeInternal() {}
  union {
    QuerySpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpecDefaultTypeInternal _QuerySpec_default_instance_;
PROTOBUF_CONSTEXPR InsertRequest::InsertRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.record_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertRequestDefaultTypeInternal() {}
  union {
    InsertRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
PROTOBUF_CONSTEXPR InsertResponse::InsertResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.record_)*/nullptr
  , /*decltype(_impl_.execution_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertResponseDefaultTypeInternal() {}
  union {
    InsertResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertResponseDefaultTypeInternal _InsertResponse_default_instance_;
PROTOBUF_CONSTEXPR InsertBatchRequest::InsertBatchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.records_)*/{}
  , /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertBatchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertBatchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertBatchRequestDefaultTypeInternal() {}
  union {
    InsertBatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertBatchRequestDefaultTypeInternal _InsertBatchRequest_default_instance_;
PROTOBUF_CONSTEXPR InsertBatchResponse::InsertBatchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.records_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.inserted_count_)*/0
  , /*decltype(_impl_.execution_time_ms_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertBatchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertBatchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertBatchResponseDefaultTypeInternal() {}
  union {
    InsertBatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertBatchResponseDefaultTypeInternal _InsertBatchResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateRequest::UpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updates_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateRequestDefaultTypeInternal() {}
  union {
    UpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateResponse::UpdateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.record_)*/nullptr
  , /*decltype(_impl_.execution_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateResponseDefaultTypeInternal() {}
  union {
    UpdateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateResponseDefaultTypeInternal _UpdateResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteRequest::DeleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.criteria_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRequestDefaultTypeInternal() {}
  union {
    DeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteResponse::DeleteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deleted_count_)*/int64_t{0}
  , /*decltype(_impl_.execution_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteResponseDefaultTypeInternal() {}
  union {
    DeleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
PROTOBUF_CONSTEXPR ExecuteQueryRequest::ExecuteQueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.query_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parameters_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteQueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteQueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteQueryRequestDefaultTypeInternal() {}
  union {
    ExecuteQueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteQueryRequestDefaultTypeInternal _ExecuteQueryRequest_default_instance_;
PROTOBUF_CONSTEXPR ExecuteQueryResponse::ExecuteQueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.from_cache_)*/false
  , /*decltype(_impl_.execution_time_ms_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteQueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteQueryResponseDefaultTypeInternal() {}
  union {
    ExecuteQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteQueryResponseDefaultTypeInternal _ExecuteQueryResponse_default_instance_;
PROTOBUF_CONSTEXPR ExecuteRawQueryRequest::ExecuteRawQueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.query_spec_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteRawQueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteRawQueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteRawQueryRequestDefaultTypeInternal() {}
  union {
    ExecuteRawQueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteRawQueryRequestDefaultTypeInternal _ExecuteRawQueryRequest_default_instance_;
PROTOBUF_CONSTEXPR ExecuteRawQueryResponse::ExecuteRawQueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.execution_time_ms_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteRawQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteRawQueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteRawQueryResponseDefaultTypeInternal() {}
  union {
    ExecuteRawQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteRawQueryResponseDefaultTypeInternal _ExecuteRawQueryResponse_default_instance_;
PROTOBUF_CONSTEXPR VectorSearchRequest::VectorSearchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.query_vector_)*/{}
  , /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.distance_metric_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_.threshold_)*/0
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorSearchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorSearchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorSearchRequestDefaultTypeInternal() {}
  union {
    VectorSearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorSearchRequestDefaultTypeInternal _VectorSearchRequest_default_instance_;
PROTOBUF_CONSTEXPR VectorSearchResponse::VectorSearchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.execution_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorSearchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorSearchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorSearchResponseDefaultTypeInternal() {}
  union {
    VectorSearchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorSearchResponseDefaultTypeInternal _VectorSearchResponse_default_instance_;
PROTOBUF_CONSTEXPR VectorSearchResult::VectorSearchResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.record_)*/nullptr
  , /*decltype(_impl_.similarity_score_)*/0
  , /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorSearchResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorSearchResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorSearchResultDefaultTypeInternal() {}
  union {
    VectorSearchResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorSearchResultDefaultTypeInternal _VectorSearchResult_default_instance_;
PROTOBUF_CONSTEXPR GraphTraverseRequest::GraphTraverseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_node_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.traversal_spec_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphTraverseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphTraverseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphTraverseRequestDefaultTypeInternal() {}
  union {
    GraphTraverseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphTraverseRequestDefaultTypeInternal _GraphTraverseRequest_default_instance_;
PROTOBUF_CONSTEXPR GraphTraverseResponse::GraphTraverseResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.edges_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.execution_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphTraverseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphTraverseResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphTraverseResponseDefaultTypeInternal() {}
  union {
    GraphTraverseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphTraverseResponseDefaultTypeInternal _GraphTraverseResponse_default_instance_;
PROTOBUF_CONSTEXPR GraphTraversalSpec::GraphTraversalSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relationship_types_)*/{}
  , /*decltype(_impl_.node_filter_)*/nullptr
  , /*decltype(_impl_.edge_filter_)*/nullptr
  , /*decltype(_impl_.traversal_type_)*/0
  , /*decltype(_impl_.max_depth_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphTraversalSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphTraversalSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphTraversalSpecDefaultTypeInternal() {}
  union {
    GraphTraversalSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphTraversalSpecDefaultTypeInternal _GraphTraversalSpec_default_instance_;
PROTOBUF_CONSTEXPR GraphNode::GraphNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.properties_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphNodeDefaultTypeInternal() {}
  union {
    GraphNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphNodeDefaultTypeInternal _GraphNode_default_instance_;
PROTOBUF_CONSTEXPR GraphEdge::GraphEdge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.relationship_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.properties_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphEdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphEdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphEdgeDefaultTypeInternal() {}
  union {
    GraphEdge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphEdgeDefaultTypeInternal _GraphEdge_default_instance_;
PROTOBUF_CONSTEXPR ExecuteOperationRequest::ExecuteOperationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operation_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parameters_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteOperationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteOperationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteOperationRequestDefaultTypeInternal() {}
  union {
    ExecuteOperationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteOperationRequestDefaultTypeInternal _ExecuteOperationRequest_default_instance_;
PROTOBUF_CONSTEXPR ExecuteOperationResponse::ExecuteOperationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.affected_tables_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.execution_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteOperationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteOperationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteOperationResponseDefaultTypeInternal() {}
  union {
    ExecuteOperationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteOperationResponseDefaultTypeInternal _ExecuteOperationResponse_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckRequest::HealthCheckRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.include_details_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckRequestDefaultTypeInternal() {}
  union {
    HealthCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckResponse::HealthCheckResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.technology_health_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uptime_seconds_)*/int64_t{0}
  , /*decltype(_impl_.healthy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthCheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckResponseDefaultTypeInternal() {}
  union {
    HealthCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
PROTOBUF_CONSTEXPR TechnologyHealth::TechnologyHealth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.technology_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.healthy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TechnologyHealthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TechnologyHealthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TechnologyHealthDefaultTypeInternal() {}
  union {
    TechnologyHealth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TechnologyHealthDefaultTypeInternal _TechnologyHealth_default_instance_;
PROTOBUF_CONSTEXPR GetPlatformInfoRequest::GetPlatformInfoRequest(
    ::_pbi::ConstantInitialized) {}
struct GetPlatformInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPlatformInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPlatformInfoRequestDefaultTypeInternal() {}
  union {
    GetPlatformInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPlatformInfoRequestDefaultTypeInternal _GetPlatformInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPlatformInfoResponse::GetPlatformInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.supported_technologies_)*/{}
  , /*decltype(_impl_.supported_features_)*/{}
  , /*decltype(_impl_.platform_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.configuration_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPlatformInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPlatformInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPlatformInfoResponseDefaultTypeInternal() {}
  union {
    GetPlatformInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPlatformInfoResponseDefaultTypeInternal _GetPlatformInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR GetMetricsRequest::GetMetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMetricsRequestDefaultTypeInternal() {}
  union {
    GetMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMetricsRequestDefaultTypeInternal _GetMetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetMetricsResponse::GetMetricsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metrics_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collected_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMetricsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMetricsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMetricsResponseDefaultTypeInternal() {}
  union {
    GetMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMetricsResponseDefaultTypeInternal _GetMetricsResponse_default_instance_;
}  // namespace persistence
}  // namespace unhinged
static ::_pb::Metadata file_level_metadata_persistence_5fplatform_2eproto[43];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_persistence_5fplatform_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_persistence_5fplatform_2eproto = nullptr;

const uint32_t TableStruct_persistence_5fplatform_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecutionContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecutionContext, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecutionContext, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecutionContext, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecutionContext, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecutionContext, _impl_.span_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecutionContext, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecutionContext, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::Record, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::Record, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::Record, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::Record, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::Record, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::QueryCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::QueryCriteria, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::QueryCriteria, _impl_.criteria_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::EqualsFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::EqualsFilter, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::EqualsFilter, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GreaterThanFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GreaterThanFilter, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GreaterThanFilter, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::LessThanFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::LessThanFilter, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::LessThanFilter, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InFilter, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InFilter, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::RangeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::RangeFilter, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::RangeFilter, _impl_.min_value_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::RangeFilter, _impl_.max_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::TextSearchFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::TextSearchFilter, _impl_.fields_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::TextSearchFilter, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::TextSearchFilter, _impl_.analyzer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchFilter, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchFilter, _impl_.query_vector_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchFilter, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchFilter, _impl_.threshold_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchFilter, _impl_.distance_metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::AndFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::AndFilter, _impl_.filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::OrFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::OrFilter, _impl_.filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::OrderBy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::OrderBy, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::OrderBy, _impl_.ascending_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::QuerySpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::QuerySpec, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::QuerySpec, _impl_.query_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::QuerySpec, _impl_.criteria_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::QuerySpec, _impl_.projections_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::QuerySpec, _impl_.order_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::QuerySpec, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::QuerySpec, _impl_.offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertRequest, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertRequest, _impl_.record_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertRequest, _impl_.context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertResponse, _impl_.record_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertResponse, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertResponse, _impl_.execution_time_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertBatchRequest, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertBatchRequest, _impl_.records_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertBatchRequest, _impl_.context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertBatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertBatchResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertBatchResponse, _impl_.records_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertBatchResponse, _impl_.inserted_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertBatchResponse, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::InsertBatchResponse, _impl_.execution_time_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::UpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::UpdateRequest, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::UpdateRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::UpdateRequest, _impl_.updates_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::UpdateRequest, _impl_.context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::UpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::UpdateResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::UpdateResponse, _impl_.record_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::UpdateResponse, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::UpdateResponse, _impl_.execution_time_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::DeleteRequest, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::DeleteRequest, _impl_.criteria_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::DeleteRequest, _impl_.context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::DeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::DeleteResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::DeleteResponse, _impl_.deleted_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::DeleteResponse, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::DeleteResponse, _impl_.execution_time_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteQueryRequest, _impl_.query_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteQueryRequest, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteQueryRequest, _impl_.context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteQueryResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteQueryResponse, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteQueryResponse, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteQueryResponse, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteQueryResponse, _impl_.execution_time_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteQueryResponse, _impl_.from_cache_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteRawQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteRawQueryRequest, _impl_.query_spec_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteRawQueryRequest, _impl_.context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteRawQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteRawQueryResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteRawQueryResponse, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteRawQueryResponse, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteRawQueryResponse, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteRawQueryResponse, _impl_.execution_time_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchRequest, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchRequest, _impl_.query_vector_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchRequest, _impl_.threshold_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchRequest, _impl_.distance_metric_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchRequest, _impl_.context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchResponse, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchResponse, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchResponse, _impl_.execution_time_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchResult, _impl_.record_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchResult, _impl_.similarity_score_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::VectorSearchResult, _impl_.distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraverseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraverseRequest, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraverseRequest, _impl_.start_node_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraverseRequest, _impl_.traversal_spec_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraverseRequest, _impl_.context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraverseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraverseResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraverseResponse, _impl_.nodes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraverseResponse, _impl_.edges_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraverseResponse, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraverseResponse, _impl_.execution_time_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraversalSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraversalSpec, _impl_.traversal_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraversalSpec, _impl_.max_depth_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraversalSpec, _impl_.relationship_types_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraversalSpec, _impl_.node_filter_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphTraversalSpec, _impl_.edge_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphNode, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphNode, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphNode, _impl_.properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphEdge, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphEdge, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphEdge, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphEdge, _impl_.relationship_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GraphEdge, _impl_.properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteOperationRequest, _impl_.operation_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteOperationRequest, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteOperationRequest, _impl_.context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteOperationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteOperationResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteOperationResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteOperationResponse, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteOperationResponse, _impl_.execution_time_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::ExecuteOperationResponse, _impl_.affected_tables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::HealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::HealthCheckRequest, _impl_.include_details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::HealthCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::HealthCheckResponse, _impl_.healthy_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::HealthCheckResponse, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::HealthCheckResponse, _impl_.uptime_seconds_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::HealthCheckResponse, _impl_.technology_health_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::TechnologyHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::TechnologyHealth, _impl_.technology_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::TechnologyHealth, _impl_.healthy_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::TechnologyHealth, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::TechnologyHealth, _impl_.response_time_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::TechnologyHealth, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GetPlatformInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GetPlatformInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GetPlatformInfoResponse, _impl_.platform_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GetPlatformInfoResponse, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GetPlatformInfoResponse, _impl_.supported_technologies_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GetPlatformInfoResponse, _impl_.supported_features_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GetPlatformInfoResponse, _impl_.configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GetMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GetMetricsRequest, _impl_.format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GetMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GetMetricsResponse, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GetMetricsResponse, _impl_.metrics_data_),
  PROTOBUF_FIELD_OFFSET(::unhinged::persistence::GetMetricsResponse, _impl_.collected_at_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::unhinged::persistence::ExecutionContext)},
  { 13, -1, -1, sizeof(::unhinged::persistence::Record)},
  { 24, -1, -1, sizeof(::unhinged::persistence::QueryCriteria)},
  { 40, -1, -1, sizeof(::unhinged::persistence::EqualsFilter)},
  { 48, -1, -1, sizeof(::unhinged::persistence::GreaterThanFilter)},
  { 56, -1, -1, sizeof(::unhinged::persistence::LessThanFilter)},
  { 64, -1, -1, sizeof(::unhinged::persistence::InFilter)},
  { 72, -1, -1, sizeof(::unhinged::persistence::RangeFilter)},
  { 81, -1, -1, sizeof(::unhinged::persistence::TextSearchFilter)},
  { 90, -1, -1, sizeof(::unhinged::persistence::VectorSearchFilter)},
  { 101, -1, -1, sizeof(::unhinged::persistence::AndFilter)},
  { 108, -1, -1, sizeof(::unhinged::persistence::OrFilter)},
  { 115, -1, -1, sizeof(::unhinged::persistence::OrderBy)},
  { 123, -1, -1, sizeof(::unhinged::persistence::QuerySpec)},
  { 136, -1, -1, sizeof(::unhinged::persistence::InsertRequest)},
  { 145, -1, -1, sizeof(::unhinged::persistence::InsertResponse)},
  { 155, -1, -1, sizeof(::unhinged::persistence::InsertBatchRequest)},
  { 164, -1, -1, sizeof(::unhinged::persistence::InsertBatchResponse)},
  { 175, -1, -1, sizeof(::unhinged::persistence::UpdateRequest)},
  { 185, -1, -1, sizeof(::unhinged::persistence::UpdateResponse)},
  { 195, -1, -1, sizeof(::unhinged::persistence::DeleteRequest)},
  { 204, -1, -1, sizeof(::unhinged::persistence::DeleteResponse)},
  { 214, -1, -1, sizeof(::unhinged::persistence::ExecuteQueryRequest)},
  { 223, -1, -1, sizeof(::unhinged::persistence::ExecuteQueryResponse)},
  { 235, -1, -1, sizeof(::unhinged::persistence::ExecuteRawQueryRequest)},
  { 243, -1, -1, sizeof(::unhinged::persistence::ExecuteRawQueryResponse)},
  { 254, -1, -1, sizeof(::unhinged::persistence::VectorSearchRequest)},
  { 266, -1, -1, sizeof(::unhinged::persistence::VectorSearchResponse)},
  { 276, -1, -1, sizeof(::unhinged::persistence::VectorSearchResult)},
  { 285, -1, -1, sizeof(::unhinged::persistence::GraphTraverseRequest)},
  { 295, -1, -1, sizeof(::unhinged::persistence::GraphTraverseResponse)},
  { 306, -1, -1, sizeof(::unhinged::persistence::GraphTraversalSpec)},
  { 317, -1, -1, sizeof(::unhinged::persistence::GraphNode)},
  { 326, -1, -1, sizeof(::unhinged::persistence::GraphEdge)},
  { 337, -1, -1, sizeof(::unhinged::persistence::ExecuteOperationRequest)},
  { 346, -1, -1, sizeof(::unhinged::persistence::ExecuteOperationResponse)},
  { 357, -1, -1, sizeof(::unhinged::persistence::HealthCheckRequest)},
  { 364, -1, -1, sizeof(::unhinged::persistence::HealthCheckResponse)},
  { 374, -1, -1, sizeof(::unhinged::persistence::TechnologyHealth)},
  { 385, -1, -1, sizeof(::unhinged::persistence::GetPlatformInfoRequest)},
  { 391, -1, -1, sizeof(::unhinged::persistence::GetPlatformInfoResponse)},
  { 402, -1, -1, sizeof(::unhinged::persistence::GetMetricsRequest)},
  { 409, -1, -1, sizeof(::unhinged::persistence::GetMetricsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::unhinged::persistence::_ExecutionContext_default_instance_._instance,
  &::unhinged::persistence::_Record_default_instance_._instance,
  &::unhinged::persistence::_QueryCriteria_default_instance_._instance,
  &::unhinged::persistence::_EqualsFilter_default_instance_._instance,
  &::unhinged::persistence::_GreaterThanFilter_default_instance_._instance,
  &::unhinged::persistence::_LessThanFilter_default_instance_._instance,
  &::unhinged::persistence::_InFilter_default_instance_._instance,
  &::unhinged::persistence::_RangeFilter_default_instance_._instance,
  &::unhinged::persistence::_TextSearchFilter_default_instance_._instance,
  &::unhinged::persistence::_VectorSearchFilter_default_instance_._instance,
  &::unhinged::persistence::_AndFilter_default_instance_._instance,
  &::unhinged::persistence::_OrFilter_default_instance_._instance,
  &::unhinged::persistence::_OrderBy_default_instance_._instance,
  &::unhinged::persistence::_QuerySpec_default_instance_._instance,
  &::unhinged::persistence::_InsertRequest_default_instance_._instance,
  &::unhinged::persistence::_InsertResponse_default_instance_._instance,
  &::unhinged::persistence::_InsertBatchRequest_default_instance_._instance,
  &::unhinged::persistence::_InsertBatchResponse_default_instance_._instance,
  &::unhinged::persistence::_UpdateRequest_default_instance_._instance,
  &::unhinged::persistence::_UpdateResponse_default_instance_._instance,
  &::unhinged::persistence::_DeleteRequest_default_instance_._instance,
  &::unhinged::persistence::_DeleteResponse_default_instance_._instance,
  &::unhinged::persistence::_ExecuteQueryRequest_default_instance_._instance,
  &::unhinged::persistence::_ExecuteQueryResponse_default_instance_._instance,
  &::unhinged::persistence::_ExecuteRawQueryRequest_default_instance_._instance,
  &::unhinged::persistence::_ExecuteRawQueryResponse_default_instance_._instance,
  &::unhinged::persistence::_VectorSearchRequest_default_instance_._instance,
  &::unhinged::persistence::_VectorSearchResponse_default_instance_._instance,
  &::unhinged::persistence::_VectorSearchResult_default_instance_._instance,
  &::unhinged::persistence::_GraphTraverseRequest_default_instance_._instance,
  &::unhinged::persistence::_GraphTraverseResponse_default_instance_._instance,
  &::unhinged::persistence::_GraphTraversalSpec_default_instance_._instance,
  &::unhinged::persistence::_GraphNode_default_instance_._instance,
  &::unhinged::persistence::_GraphEdge_default_instance_._instance,
  &::unhinged::persistence::_ExecuteOperationRequest_default_instance_._instance,
  &::unhinged::persistence::_ExecuteOperationResponse_default_instance_._instance,
  &::unhinged::persistence::_HealthCheckRequest_default_instance_._instance,
  &::unhinged::persistence::_HealthCheckResponse_default_instance_._instance,
  &::unhinged::persistence::_TechnologyHealth_default_instance_._instance,
  &::unhinged::persistence::_GetPlatformInfoRequest_default_instance_._instance,
  &::unhinged::persistence::_GetPlatformInfoResponse_default_instance_._instance,
  &::unhinged::persistence::_GetMetricsRequest_default_instance_._instance,
  &::unhinged::persistence::_GetMetricsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_persistence_5fplatform_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032persistence_platform.proto\022\024unhinged.p"
  "ersistence\032\037google/protobuf/timestamp.pr"
  "oto\032\034google/protobuf/struct.proto\032\031googl"
  "e/protobuf/any.proto\"\310\001\n\020ExecutionContex"
  "t\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022\022"
  "\n\nsession_id\030\003 \001(\t\022\020\n\010trace_id\030\004 \001(\t\022\017\n\007"
  "span_id\030\005 \001(\t\022-\n\ttimestamp\030\006 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022)\n\010metadata\030\007 \001(\0132\027"
  ".google.protobuf.Struct\"\254\001\n\006Record\022\n\n\002id"
  "\030\001 \001(\t\022%\n\004data\030\002 \001(\0132\027.google.protobuf.S"
  "truct\022.\n\ncreated_at\030\003 \001(\0132\032.google.proto"
  "buf.Timestamp\022.\n\nupdated_at\030\004 \001(\0132\032.goog"
  "le.protobuf.Timestamp\022\017\n\007version\030\005 \001(\t\"\244"
  "\004\n\rQueryCriteria\0224\n\006equals\030\001 \001(\0132\".unhin"
  "ged.persistence.EqualsFilterH\000\022\?\n\014greate"
  "r_than\030\002 \001(\0132\'.unhinged.persistence.Grea"
  "terThanFilterH\000\0229\n\tless_than\030\003 \001(\0132$.unh"
  "inged.persistence.LessThanFilterH\000\0223\n\tin"
  "_filter\030\004 \001(\0132\036.unhinged.persistence.InF"
  "ilterH\000\0222\n\005range\030\005 \001(\0132!.unhinged.persis"
  "tence.RangeFilterH\000\022=\n\013text_search\030\006 \001(\013"
  "2&.unhinged.persistence.TextSearchFilter"
  "H\000\022A\n\rvector_search\030\007 \001(\0132(.unhinged.per"
  "sistence.VectorSearchFilterH\000\0225\n\nand_fil"
  "ter\030\010 \001(\0132\037.unhinged.persistence.AndFilt"
  "erH\000\0223\n\tor_filter\030\t \001(\0132\036.unhinged.persi"
  "stence.OrFilterH\000B\n\n\010criteria\"B\n\014EqualsF"
  "ilter\022\r\n\005field\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.go"
  "ogle.protobuf.Any\"G\n\021GreaterThanFilter\022\r"
  "\n\005field\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.google.pr"
  "otobuf.Any\"D\n\016LessThanFilter\022\r\n\005field\030\001 "
  "\001(\t\022#\n\005value\030\002 \001(\0132\024.google.protobuf.Any"
  "\"\?\n\010InFilter\022\r\n\005field\030\001 \001(\t\022$\n\006values\030\002 "
  "\003(\0132\024.google.protobuf.Any\"n\n\013RangeFilter"
  "\022\r\n\005field\030\001 \001(\t\022\'\n\tmin_value\030\002 \001(\0132\024.goo"
  "gle.protobuf.Any\022\'\n\tmax_value\030\003 \001(\0132\024.go"
  "ogle.protobuf.Any\"C\n\020TextSearchFilter\022\016\n"
  "\006fields\030\001 \003(\t\022\r\n\005query\030\002 \001(\t\022\020\n\010analyzer"
  "\030\003 \001(\t\"t\n\022VectorSearchFilter\022\r\n\005field\030\001 "
  "\001(\t\022\024\n\014query_vector\030\002 \003(\002\022\r\n\005limit\030\003 \001(\005"
  "\022\021\n\tthreshold\030\004 \001(\001\022\027\n\017distance_metric\030\005"
  " \001(\t\"A\n\tAndFilter\0224\n\007filters\030\001 \003(\0132#.unh"
  "inged.persistence.QueryCriteria\"@\n\010OrFil"
  "ter\0224\n\007filters\030\001 \003(\0132#.unhinged.persiste"
  "nce.QueryCriteria\"+\n\007OrderBy\022\r\n\005field\030\001 "
  "\001(\t\022\021\n\tascending\030\002 \001(\010\"\360\001\n\tQuerySpec\022\022\n\n"
  "table_name\030\001 \001(\t\0223\n\nquery_type\030\002 \001(\0162\037.u"
  "nhinged.persistence.QueryType\0225\n\010criteri"
  "a\030\003 \001(\0132#.unhinged.persistence.QueryCrit"
  "eria\022\023\n\013projections\030\004 \003(\t\022/\n\010order_by\030\005 "
  "\003(\0132\035.unhinged.persistence.OrderBy\022\r\n\005li"
  "mit\030\006 \001(\005\022\016\n\006offset\030\007 \001(\005\"\212\001\n\rInsertRequ"
  "est\022\022\n\ntable_name\030\001 \001(\t\022,\n\006record\030\002 \001(\0132"
  "\034.unhinged.persistence.Record\0227\n\007context"
  "\030\003 \001(\0132&.unhinged.persistence.ExecutionC"
  "ontext\"\201\001\n\016InsertResponse\022\017\n\007success\030\001 \001"
  "(\010\022,\n\006record\030\002 \001(\0132\034.unhinged.persistenc"
  "e.Record\022\025\n\rerror_message\030\003 \001(\t\022\031\n\021execu"
  "tion_time_ms\030\004 \001(\003\"\220\001\n\022InsertBatchReques"
  "t\022\022\n\ntable_name\030\001 \001(\t\022-\n\007records\030\002 \003(\0132\034"
  ".unhinged.persistence.Record\0227\n\007context\030"
  "\003 \001(\0132&.unhinged.persistence.ExecutionCo"
  "ntext\"\237\001\n\023InsertBatchResponse\022\017\n\007success"
  "\030\001 \001(\010\022-\n\007records\030\002 \003(\0132\034.unhinged.persi"
  "stence.Record\022\026\n\016inserted_count\030\003 \001(\005\022\025\n"
  "\rerror_message\030\004 \001(\t\022\031\n\021execution_time_m"
  "s\030\005 \001(\003\"\222\001\n\rUpdateRequest\022\022\n\ntable_name\030"
  "\001 \001(\t\022\n\n\002id\030\002 \001(\t\022(\n\007updates\030\003 \001(\0132\027.goo"
  "gle.protobuf.Struct\0227\n\007context\030\004 \001(\0132&.u"
  "nhinged.persistence.ExecutionContext\"\201\001\n"
  "\016UpdateResponse\022\017\n\007success\030\001 \001(\010\022,\n\006reco"
  "rd\030\002 \001(\0132\034.unhinged.persistence.Record\022\025"
  "\n\rerror_message\030\003 \001(\t\022\031\n\021execution_time_"
  "ms\030\004 \001(\003\"\223\001\n\rDeleteRequest\022\022\n\ntable_name"
  "\030\001 \001(\t\0225\n\010criteria\030\002 \001(\0132#.unhinged.pers"
  "istence.QueryCriteria\0227\n\007context\030\003 \001(\0132&"
  ".unhinged.persistence.ExecutionContext\"j"
  "\n\016DeleteResponse\022\017\n\007success\030\001 \001(\010\022\025\n\rdel"
  "eted_count\030\002 \001(\003\022\025\n\rerror_message\030\003 \001(\t\022"
  "\031\n\021execution_time_ms\030\004 \001(\003\"\217\001\n\023ExecuteQu"
  "eryRequest\022\022\n\nquery_name\030\001 \001(\t\022+\n\nparame"
  "ters\030\002 \001(\0132\027.google.protobuf.Struct\0227\n\007c"
  "ontext\030\003 \001(\0132&.unhinged.persistence.Exec"
  "utionContext\"\253\001\n\024ExecuteQueryResponse\022\017\n"
  "\007success\030\001 \001(\010\022-\n\007results\030\002 \003(\0132\034.unhing"
  "ed.persistence.Record\022\r\n\005count\030\003 \001(\005\022\025\n\r"
  "error_message\030\004 \001(\t\022\031\n\021execution_time_ms"
  "\030\005 \001(\003\022\022\n\nfrom_cache\030\006 \001(\010\"\206\001\n\026ExecuteRa"
  "wQueryRequest\0223\n\nquery_spec\030\001 \001(\0132\037.unhi"
  "nged.persistence.QuerySpec\0227\n\007context\030\002 "
  "\001(\0132&.unhinged.persistence.ExecutionCont"
  "ext\"\232\001\n\027ExecuteRawQueryResponse\022\017\n\007succe"
  "ss\030\001 \001(\010\022-\n\007results\030\002 \003(\0132\034.unhinged.per"
  "sistence.Record\022\r\n\005count\030\003 \001(\005\022\025\n\rerror_"
  "message\030\004 \001(\t\022\031\n\021execution_time_ms\030\005 \001(\003"
  "\"\263\001\n\023VectorSearchRequest\022\022\n\ntable_name\030\001"
  " \001(\t\022\024\n\014query_vector\030\002 \003(\002\022\r\n\005limit\030\003 \001("
  "\005\022\021\n\tthreshold\030\004 \001(\001\022\027\n\017distance_metric\030"
  "\005 \001(\t\0227\n\007context\030\006 \001(\0132&.unhinged.persis"
  "tence.ExecutionContext\"\224\001\n\024VectorSearchR"
  "esponse\022\017\n\007success\030\001 \001(\010\0229\n\007results\030\002 \003("
  "\0132(.unhinged.persistence.VectorSearchRes"
  "ult\022\025\n\rerror_message\030\003 \001(\t\022\031\n\021execution_"
  "time_ms\030\004 \001(\003\"n\n\022VectorSearchResult\022,\n\006r"
  "ecord\030\001 \001(\0132\034.unhinged.persistence.Recor"
  "d\022\030\n\020similarity_score\030\002 \001(\001\022\020\n\010distance\030"
  "\003 \001(\001\"\271\001\n\024GraphTraverseRequest\022\022\n\ntable_"
  "name\030\001 \001(\t\022\022\n\nstart_node\030\002 \001(\t\022@\n\016traver"
  "sal_spec\030\003 \001(\0132(.unhinged.persistence.Gr"
  "aphTraversalSpec\0227\n\007context\030\004 \001(\0132&.unhi"
  "nged.persistence.ExecutionContext\"\272\001\n\025Gr"
  "aphTraverseResponse\022\017\n\007success\030\001 \001(\010\022.\n\005"
  "nodes\030\002 \003(\0132\037.unhinged.persistence.Graph"
  "Node\022.\n\005edges\030\003 \003(\0132\037.unhinged.persisten"
  "ce.GraphEdge\022\025\n\rerror_message\030\004 \001(\t\022\031\n\021e"
  "xecution_time_ms\030\005 \001(\003\"\371\001\n\022GraphTraversa"
  "lSpec\022@\n\016traversal_type\030\001 \001(\0162(.unhinged"
  ".persistence.GraphTraversalType\022\021\n\tmax_d"
  "epth\030\002 \001(\005\022\032\n\022relationship_types\030\003 \003(\t\0228"
  "\n\013node_filter\030\004 \001(\0132#.unhinged.persisten"
  "ce.QueryCriteria\0228\n\013edge_filter\030\005 \001(\0132#."
  "unhinged.persistence.QueryCriteria\"S\n\tGr"
  "aphNode\022\n\n\002id\030\001 \001(\t\022\r\n\005label\030\002 \001(\t\022+\n\npr"
  "operties\030\003 \001(\0132\027.google.protobuf.Struct\""
  "\205\001\n\tGraphEdge\022\n\n\002id\030\001 \001(\t\022\021\n\tsource_id\030\002"
  " \001(\t\022\021\n\ttarget_id\030\003 \001(\t\022\031\n\021relationship_"
  "type\030\004 \001(\t\022+\n\nproperties\030\005 \001(\0132\027.google."
  "protobuf.Struct\"\227\001\n\027ExecuteOperationRequ"
  "est\022\026\n\016operation_name\030\001 \001(\t\022+\n\nparameter"
  "s\030\002 \001(\0132\027.google.protobuf.Struct\0227\n\007cont"
  "ext\030\003 \001(\0132&.unhinged.persistence.Executi"
  "onContext\"\234\001\n\030ExecuteOperationResponse\022\017"
  "\n\007success\030\001 \001(\010\022$\n\006result\030\002 \001(\0132\024.google"
  ".protobuf.Any\022\025\n\rerror_message\030\003 \001(\t\022\031\n\021"
  "execution_time_ms\030\004 \001(\003\022\027\n\017affected_tabl"
  "es\030\005 \003(\t\"-\n\022HealthCheckRequest\022\027\n\017includ"
  "e_details\030\001 \001(\010\"\222\001\n\023HealthCheckResponse\022"
  "\017\n\007healthy\030\001 \001(\010\022\017\n\007version\030\002 \001(\t\022\026\n\016upt"
  "ime_seconds\030\003 \001(\003\022A\n\021technology_health\030\004"
  " \003(\0132&.unhinged.persistence.TechnologyHe"
  "alth\"x\n\020TechnologyHealth\022\022\n\ntechnology\030\001"
  " \001(\t\022\017\n\007healthy\030\002 \001(\010\022\016\n\006status\030\003 \001(\t\022\030\n"
  "\020response_time_ms\030\004 \001(\003\022\025\n\rerror_message"
  "\030\005 \001(\t\"\030\n\026GetPlatformInfoRequest\"\255\001\n\027Get"
  "PlatformInfoResponse\022\025\n\rplatform_name\030\001 "
  "\001(\t\022\017\n\007version\030\002 \001(\t\022\036\n\026supported_techno"
  "logies\030\003 \003(\t\022\032\n\022supported_features\030\004 \003(\t"
  "\022.\n\rconfiguration\030\005 \001(\0132\027.google.protobu"
  "f.Struct\"#\n\021GetMetricsRequest\022\016\n\006format\030"
  "\001 \001(\t\"l\n\022GetMetricsResponse\022\016\n\006format\030\001 "
  "\001(\t\022\024\n\014metrics_data\030\002 \001(\t\0220\n\014collected_a"
  "t\030\003 \001(\0132\032.google.protobuf.Timestamp*\265\001\n\t"
  "QueryType\022\020\n\014POINT_LOOKUP\020\000\022\016\n\nRANGE_SCA"
  "N\020\001\022\024\n\020FULL_TEXT_SEARCH\020\002\022\025\n\021VECTOR_SIMI"
  "LARITY\020\003\022\023\n\017GRAPH_TRAVERSAL\020\004\022\017\n\013AGGREGA"
  "TION\020\005\022\017\n\013TIME_SERIES\020\006\022\016\n\nGEOSPATIAL\020\007\022"
  "\022\n\016DOCUMENT_QUERY\020\010*Z\n\022GraphTraversalTyp"
  "e\022\021\n\rBREADTH_FIRST\020\000\022\017\n\013DEPTH_FIRST\020\001\022\021\n"
  "\rSHORTEST_PATH\020\002\022\r\n\tALL_PATHS\020\0032\317\t\n\032Pers"
  "istencePlatformService\022S\n\006Insert\022#.unhin"
  "ged.persistence.InsertRequest\032$.unhinged"
  ".persistence.InsertResponse\022b\n\013InsertBat"
  "ch\022(.unhinged.persistence.InsertBatchReq"
  "uest\032).unhinged.persistence.InsertBatchR"
  "esponse\022S\n\006Update\022#.unhinged.persistence"
  ".UpdateRequest\032$.unhinged.persistence.Up"
  "dateResponse\022S\n\006Delete\022#.unhinged.persis"
  "tence.DeleteRequest\032$.unhinged.persisten"
  "ce.DeleteResponse\022e\n\014ExecuteQuery\022).unhi"
  "nged.persistence.ExecuteQueryRequest\032*.u"
  "nhinged.persistence.ExecuteQueryResponse"
  "\022n\n\017ExecuteRawQuery\022,.unhinged.persisten"
  "ce.ExecuteRawQueryRequest\032-.unhinged.per"
  "sistence.ExecuteRawQueryResponse\022e\n\014Vect"
  "orSearch\022).unhinged.persistence.VectorSe"
  "archRequest\032*.unhinged.persistence.Vecto"
  "rSearchResponse\022h\n\rGraphTraverse\022*.unhin"
  "ged.persistence.GraphTraverseRequest\032+.u"
  "nhinged.persistence.GraphTraverseRespons"
  "e\022q\n\020ExecuteOperation\022-.unhinged.persist"
  "ence.ExecuteOperationRequest\032..unhinged."
  "persistence.ExecuteOperationResponse\022b\n\013"
  "HealthCheck\022(.unhinged.persistence.Healt"
  "hCheckRequest\032).unhinged.persistence.Hea"
  "lthCheckResponse\022n\n\017GetPlatformInfo\022,.un"
  "hinged.persistence.GetPlatformInfoReques"
  "t\032-.unhinged.persistence.GetPlatformInfo"
  "Response\022_\n\nGetMetrics\022\'.unhinged.persis"
  "tence.GetMetricsRequest\032(.unhinged.persi"
  "stence.GetMetricsResponseb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_persistence_5fplatform_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_persistence_5fplatform_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_persistence_5fplatform_2eproto = {
    false, false, 7593, descriptor_table_protodef_persistence_5fplatform_2eproto,
    "persistence_platform.proto",
    &descriptor_table_persistence_5fplatform_2eproto_once, descriptor_table_persistence_5fplatform_2eproto_deps, 3, 43,
    schemas, file_default_instances, TableStruct_persistence_5fplatform_2eproto::offsets,
    file_level_metadata_persistence_5fplatform_2eproto, file_level_enum_descriptors_persistence_5fplatform_2eproto,
    file_level_service_descriptors_persistence_5fplatform_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_persistence_5fplatform_2eproto_getter() {
  return &descriptor_table_persistence_5fplatform_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_persistence_5fplatform_2eproto(&descriptor_table_persistence_5fplatform_2eproto);
namespace unhinged {
namespace persistence {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_persistence_5fplatform_2eproto);
  return file_level_enum_descriptors_persistence_5fplatform_2eproto[0];
}
bool QueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GraphTraversalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_persistence_5fplatform_2eproto);
  return file_level_enum_descriptors_persistence_5fplatform_2eproto[1];
}
bool GraphTraversalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ExecutionContext::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ExecutionContext* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const ExecutionContext* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ExecutionContext::_Internal::timestamp(const ExecutionContext* msg) {
  return *msg->_impl_.timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
ExecutionContext::_Internal::metadata(const ExecutionContext* msg) {
  return *msg->_impl_.metadata_;
}
void ExecutionContext::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void ExecutionContext::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
ExecutionContext::ExecutionContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.ExecutionContext)
}
ExecutionContext::ExecutionContext(const ExecutionContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecutionContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_id().empty()) {
    _this->_impl_.trace_id_.Set(from._internal_trace_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_span_id().empty()) {
    _this->_impl_.span_id_.Set(from._internal_span_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.ExecutionContext)
}

inline void ExecutionContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecutionContext::~ExecutionContext() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.ExecutionContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecutionContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.trace_id_.Destroy();
  _impl_.span_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void ExecutionContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecutionContext::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.ExecutionContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.trace_id_.ClearToEmpty();
  _impl_.span_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.ExecutionContext.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.ExecutionContext.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.ExecutionContext.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string trace_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.ExecutionContext.trace_id"));
        } else
          goto handle_unusual;
        continue;
      // string span_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_span_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.ExecutionContext.span_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecutionContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.ExecutionContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.ExecutionContext.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.ExecutionContext.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string session_id = 3;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.ExecutionContext.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // string trace_id = 4;
  if (!this->_internal_trace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_id().data(), static_cast<int>(this->_internal_trace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.ExecutionContext.trace_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_trace_id(), target);
  }

  // string span_id = 5;
  if (!this->_internal_span_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_span_id().data(), static_cast<int>(this->_internal_span_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.ExecutionContext.span_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_span_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 7;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.ExecutionContext)
  return target;
}

size_t ExecutionContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.ExecutionContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string session_id = 3;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string trace_id = 4;
  if (!this->_internal_trace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_id());
  }

  // string span_id = 5;
  if (!this->_internal_span_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_span_id());
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .google.protobuf.Struct metadata = 7;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecutionContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecutionContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecutionContext::GetClassData() const { return &_class_data_; }


void ExecutionContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecutionContext*>(&to_msg);
  auto& from = static_cast<const ExecutionContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.ExecutionContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  if (!from._internal_span_id().empty()) {
    _this->_internal_set_span_id(from._internal_span_id());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionContext::CopyFrom(const ExecutionContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.ExecutionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionContext::IsInitialized() const {
  return true;
}

void ExecutionContext::InternalSwap(ExecutionContext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trace_id_, lhs_arena,
      &other->_impl_.trace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.span_id_, lhs_arena,
      &other->_impl_.span_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionContext, _impl_.metadata_)
      + sizeof(ExecutionContext::_impl_.metadata_)
      - PROTOBUF_FIELD_OFFSET(ExecutionContext, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[0]);
}

// ===================================================================

class Record::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& data(const Record* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Record* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const Record* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
Record::_Internal::data(const Record* msg) {
  return *msg->_impl_.data_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Record::_Internal::created_at(const Record* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Record::_Internal::updated_at(const Record* msg) {
  return *msg->_impl_.updated_at_;
}
void Record::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
void Record::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Record::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
Record::Record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.Record)
}
Record::Record(const Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Record* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.data_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.Record)
}

inline void Record::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.Record)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void Record::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.Record)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Record::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.Record.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.Record.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Record::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.Record)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.Record.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Struct data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 4;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // string version = 5;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.Record.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.Record)
  return target;
}

size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.Record)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string version = 5;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .google.protobuf.Struct data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 4;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Record::GetClassData() const { return &_class_data_; }


void Record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Record*>(&to_msg);
  auto& from = static_cast<const Record&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.Record)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_data());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  return true;
}

void Record::InternalSwap(Record* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Record, _impl_.updated_at_)
      + sizeof(Record::_impl_.updated_at_)
      - PROTOBUF_FIELD_OFFSET(Record, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Record::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[1]);
}

// ===================================================================

class QueryCriteria::_Internal {
 public:
  static const ::unhinged::persistence::EqualsFilter& equals(const QueryCriteria* msg);
  static const ::unhinged::persistence::GreaterThanFilter& greater_than(const QueryCriteria* msg);
  static const ::unhinged::persistence::LessThanFilter& less_than(const QueryCriteria* msg);
  static const ::unhinged::persistence::InFilter& in_filter(const QueryCriteria* msg);
  static const ::unhinged::persistence::RangeFilter& range(const QueryCriteria* msg);
  static const ::unhinged::persistence::TextSearchFilter& text_search(const QueryCriteria* msg);
  static const ::unhinged::persistence::VectorSearchFilter& vector_search(const QueryCriteria* msg);
  static const ::unhinged::persistence::AndFilter& and_filter(const QueryCriteria* msg);
  static const ::unhinged::persistence::OrFilter& or_filter(const QueryCriteria* msg);
};

const ::unhinged::persistence::EqualsFilter&
QueryCriteria::_Internal::equals(const QueryCriteria* msg) {
  return *msg->_impl_.criteria_.equals_;
}
const ::unhinged::persistence::GreaterThanFilter&
QueryCriteria::_Internal::greater_than(const QueryCriteria* msg) {
  return *msg->_impl_.criteria_.greater_than_;
}
const ::unhinged::persistence::LessThanFilter&
QueryCriteria::_Internal::less_than(const QueryCriteria* msg) {
  return *msg->_impl_.criteria_.less_than_;
}
const ::unhinged::persistence::InFilter&
QueryCriteria::_Internal::in_filter(const QueryCriteria* msg) {
  return *msg->_impl_.criteria_.in_filter_;
}
const ::unhinged::persistence::RangeFilter&
QueryCriteria::_Internal::range(const QueryCriteria* msg) {
  return *msg->_impl_.criteria_.range_;
}
const ::unhinged::persistence::TextSearchFilter&
QueryCriteria::_Internal::text_search(const QueryCriteria* msg) {
  return *msg->_impl_.criteria_.text_search_;
}
const ::unhinged::persistence::VectorSearchFilter&
QueryCriteria::_Internal::vector_search(const QueryCriteria* msg) {
  return *msg->_impl_.criteria_.vector_search_;
}
const ::unhinged::persistence::AndFilter&
QueryCriteria::_Internal::and_filter(const QueryCriteria* msg) {
  return *msg->_impl_.criteria_.and_filter_;
}
const ::unhinged::persistence::OrFilter&
QueryCriteria::_Internal::or_filter(const QueryCriteria* msg) {
  return *msg->_impl_.criteria_.or_filter_;
}
void QueryCriteria::set_allocated_equals(::unhinged::persistence::EqualsFilter* equals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_criteria();
  if (equals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(equals);
    if (message_arena != submessage_arena) {
      equals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equals, submessage_arena);
    }
    set_has_equals();
    _impl_.criteria_.equals_ = equals;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.persistence.QueryCriteria.equals)
}
void QueryCriteria::set_allocated_greater_than(::unhinged::persistence::GreaterThanFilter* greater_than) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_criteria();
  if (greater_than) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(greater_than);
    if (message_arena != submessage_arena) {
      greater_than = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, greater_than, submessage_arena);
    }
    set_has_greater_than();
    _impl_.criteria_.greater_than_ = greater_than;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.persistence.QueryCriteria.greater_than)
}
void QueryCriteria::set_allocated_less_than(::unhinged::persistence::LessThanFilter* less_than) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_criteria();
  if (less_than) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(less_than);
    if (message_arena != submessage_arena) {
      less_than = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, less_than, submessage_arena);
    }
    set_has_less_than();
    _impl_.criteria_.less_than_ = less_than;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.persistence.QueryCriteria.less_than)
}
void QueryCriteria::set_allocated_in_filter(::unhinged::persistence::InFilter* in_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_criteria();
  if (in_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(in_filter);
    if (message_arena != submessage_arena) {
      in_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_filter, submessage_arena);
    }
    set_has_in_filter();
    _impl_.criteria_.in_filter_ = in_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.persistence.QueryCriteria.in_filter)
}
void QueryCriteria::set_allocated_range(::unhinged::persistence::RangeFilter* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_criteria();
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    set_has_range();
    _impl_.criteria_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.persistence.QueryCriteria.range)
}
void QueryCriteria::set_allocated_text_search(::unhinged::persistence::TextSearchFilter* text_search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_criteria();
  if (text_search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(text_search);
    if (message_arena != submessage_arena) {
      text_search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_search, submessage_arena);
    }
    set_has_text_search();
    _impl_.criteria_.text_search_ = text_search;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.persistence.QueryCriteria.text_search)
}
void QueryCriteria::set_allocated_vector_search(::unhinged::persistence::VectorSearchFilter* vector_search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_criteria();
  if (vector_search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vector_search);
    if (message_arena != submessage_arena) {
      vector_search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector_search, submessage_arena);
    }
    set_has_vector_search();
    _impl_.criteria_.vector_search_ = vector_search;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.persistence.QueryCriteria.vector_search)
}
void QueryCriteria::set_allocated_and_filter(::unhinged::persistence::AndFilter* and_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_criteria();
  if (and_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(and_filter);
    if (message_arena != submessage_arena) {
      and_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, and_filter, submessage_arena);
    }
    set_has_and_filter();
    _impl_.criteria_.and_filter_ = and_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.persistence.QueryCriteria.and_filter)
}
void QueryCriteria::set_allocated_or_filter(::unhinged::persistence::OrFilter* or_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_criteria();
  if (or_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(or_filter);
    if (message_arena != submessage_arena) {
      or_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, or_filter, submessage_arena);
    }
    set_has_or_filter();
    _impl_.criteria_.or_filter_ = or_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.persistence.QueryCriteria.or_filter)
}
QueryCriteria::QueryCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.QueryCriteria)
}
QueryCriteria::QueryCriteria(const QueryCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryCriteria* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.criteria_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_criteria();
  switch (from.criteria_case()) {
    case kEquals: {
      _this->_internal_mutable_equals()->::unhinged::persistence::EqualsFilter::MergeFrom(
          from._internal_equals());
      break;
    }
    case kGreaterThan: {
      _this->_internal_mutable_greater_than()->::unhinged::persistence::GreaterThanFilter::MergeFrom(
          from._internal_greater_than());
      break;
    }
    case kLessThan: {
      _this->_internal_mutable_less_than()->::unhinged::persistence::LessThanFilter::MergeFrom(
          from._internal_less_than());
      break;
    }
    case kInFilter: {
      _this->_internal_mutable_in_filter()->::unhinged::persistence::InFilter::MergeFrom(
          from._internal_in_filter());
      break;
    }
    case kRange: {
      _this->_internal_mutable_range()->::unhinged::persistence::RangeFilter::MergeFrom(
          from._internal_range());
      break;
    }
    case kTextSearch: {
      _this->_internal_mutable_text_search()->::unhinged::persistence::TextSearchFilter::MergeFrom(
          from._internal_text_search());
      break;
    }
    case kVectorSearch: {
      _this->_internal_mutable_vector_search()->::unhinged::persistence::VectorSearchFilter::MergeFrom(
          from._internal_vector_search());
      break;
    }
    case kAndFilter: {
      _this->_internal_mutable_and_filter()->::unhinged::persistence::AndFilter::MergeFrom(
          from._internal_and_filter());
      break;
    }
    case kOrFilter: {
      _this->_internal_mutable_or_filter()->::unhinged::persistence::OrFilter::MergeFrom(
          from._internal_or_filter());
      break;
    }
    case CRITERIA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.QueryCriteria)
}

inline void QueryCriteria::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.criteria_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_criteria();
}

QueryCriteria::~QueryCriteria() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.QueryCriteria)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_criteria()) {
    clear_criteria();
  }
}

void QueryCriteria::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryCriteria::clear_criteria() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.persistence.QueryCriteria)
  switch (criteria_case()) {
    case kEquals: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.criteria_.equals_;
      }
      break;
    }
    case kGreaterThan: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.criteria_.greater_than_;
      }
      break;
    }
    case kLessThan: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.criteria_.less_than_;
      }
      break;
    }
    case kInFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.criteria_.in_filter_;
      }
      break;
    }
    case kRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.criteria_.range_;
      }
      break;
    }
    case kTextSearch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.criteria_.text_search_;
      }
      break;
    }
    case kVectorSearch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.criteria_.vector_search_;
      }
      break;
    }
    case kAndFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.criteria_.and_filter_;
      }
      break;
    }
    case kOrFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.criteria_.or_filter_;
      }
      break;
    }
    case CRITERIA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CRITERIA_NOT_SET;
}


void QueryCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.QueryCriteria)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_criteria();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryCriteria::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.persistence.EqualsFilter equals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_equals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.GreaterThanFilter greater_than = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_greater_than(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.LessThanFilter less_than = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_less_than(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.InFilter in_filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.RangeFilter range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.TextSearchFilter text_search = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.VectorSearchFilter vector_search = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.AndFilter and_filter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_and_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.OrFilter or_filter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_or_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryCriteria::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.QueryCriteria)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.persistence.EqualsFilter equals = 1;
  if (_internal_has_equals()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::equals(this),
        _Internal::equals(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.GreaterThanFilter greater_than = 2;
  if (_internal_has_greater_than()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::greater_than(this),
        _Internal::greater_than(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.LessThanFilter less_than = 3;
  if (_internal_has_less_than()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::less_than(this),
        _Internal::less_than(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.InFilter in_filter = 4;
  if (_internal_has_in_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::in_filter(this),
        _Internal::in_filter(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.RangeFilter range = 5;
  if (_internal_has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.TextSearchFilter text_search = 6;
  if (_internal_has_text_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::text_search(this),
        _Internal::text_search(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.VectorSearchFilter vector_search = 7;
  if (_internal_has_vector_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::vector_search(this),
        _Internal::vector_search(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.AndFilter and_filter = 8;
  if (_internal_has_and_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::and_filter(this),
        _Internal::and_filter(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.OrFilter or_filter = 9;
  if (_internal_has_or_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::or_filter(this),
        _Internal::or_filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.QueryCriteria)
  return target;
}

size_t QueryCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.QueryCriteria)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (criteria_case()) {
    // .unhinged.persistence.EqualsFilter equals = 1;
    case kEquals: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.criteria_.equals_);
      break;
    }
    // .unhinged.persistence.GreaterThanFilter greater_than = 2;
    case kGreaterThan: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.criteria_.greater_than_);
      break;
    }
    // .unhinged.persistence.LessThanFilter less_than = 3;
    case kLessThan: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.criteria_.less_than_);
      break;
    }
    // .unhinged.persistence.InFilter in_filter = 4;
    case kInFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.criteria_.in_filter_);
      break;
    }
    // .unhinged.persistence.RangeFilter range = 5;
    case kRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.criteria_.range_);
      break;
    }
    // .unhinged.persistence.TextSearchFilter text_search = 6;
    case kTextSearch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.criteria_.text_search_);
      break;
    }
    // .unhinged.persistence.VectorSearchFilter vector_search = 7;
    case kVectorSearch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.criteria_.vector_search_);
      break;
    }
    // .unhinged.persistence.AndFilter and_filter = 8;
    case kAndFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.criteria_.and_filter_);
      break;
    }
    // .unhinged.persistence.OrFilter or_filter = 9;
    case kOrFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.criteria_.or_filter_);
      break;
    }
    case CRITERIA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryCriteria::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryCriteria::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryCriteria::GetClassData() const { return &_class_data_; }


void QueryCriteria::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryCriteria*>(&to_msg);
  auto& from = static_cast<const QueryCriteria&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.QueryCriteria)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.criteria_case()) {
    case kEquals: {
      _this->_internal_mutable_equals()->::unhinged::persistence::EqualsFilter::MergeFrom(
          from._internal_equals());
      break;
    }
    case kGreaterThan: {
      _this->_internal_mutable_greater_than()->::unhinged::persistence::GreaterThanFilter::MergeFrom(
          from._internal_greater_than());
      break;
    }
    case kLessThan: {
      _this->_internal_mutable_less_than()->::unhinged::persistence::LessThanFilter::MergeFrom(
          from._internal_less_than());
      break;
    }
    case kInFilter: {
      _this->_internal_mutable_in_filter()->::unhinged::persistence::InFilter::MergeFrom(
          from._internal_in_filter());
      break;
    }
    case kRange: {
      _this->_internal_mutable_range()->::unhinged::persistence::RangeFilter::MergeFrom(
          from._internal_range());
      break;
    }
    case kTextSearch: {
      _this->_internal_mutable_text_search()->::unhinged::persistence::TextSearchFilter::MergeFrom(
          from._internal_text_search());
      break;
    }
    case kVectorSearch: {
      _this->_internal_mutable_vector_search()->::unhinged::persistence::VectorSearchFilter::MergeFrom(
          from._internal_vector_search());
      break;
    }
    case kAndFilter: {
      _this->_internal_mutable_and_filter()->::unhinged::persistence::AndFilter::MergeFrom(
          from._internal_and_filter());
      break;
    }
    case kOrFilter: {
      _this->_internal_mutable_or_filter()->::unhinged::persistence::OrFilter::MergeFrom(
          from._internal_or_filter());
      break;
    }
    case CRITERIA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryCriteria::CopyFrom(const QueryCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.QueryCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCriteria::IsInitialized() const {
  return true;
}

void QueryCriteria::InternalSwap(QueryCriteria* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.criteria_, other->_impl_.criteria_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryCriteria::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[2]);
}

// ===================================================================

class EqualsFilter::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& value(const EqualsFilter* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
EqualsFilter::_Internal::value(const EqualsFilter* msg) {
  return *msg->_impl_.value_;
}
void EqualsFilter::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
EqualsFilter::EqualsFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.EqualsFilter)
}
EqualsFilter::EqualsFilter(const EqualsFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EqualsFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.EqualsFilter)
}

inline void EqualsFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EqualsFilter::~EqualsFilter() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.EqualsFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EqualsFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void EqualsFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EqualsFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.EqualsFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EqualsFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.EqualsFilter.field"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EqualsFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.EqualsFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.EqualsFilter.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.EqualsFilter)
  return target;
}

size_t EqualsFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.EqualsFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EqualsFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EqualsFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EqualsFilter::GetClassData() const { return &_class_data_; }


void EqualsFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EqualsFilter*>(&to_msg);
  auto& from = static_cast<const EqualsFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.EqualsFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EqualsFilter::CopyFrom(const EqualsFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.EqualsFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EqualsFilter::IsInitialized() const {
  return true;
}

void EqualsFilter::InternalSwap(EqualsFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EqualsFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[3]);
}

// ===================================================================

class GreaterThanFilter::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& value(const GreaterThanFilter* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
GreaterThanFilter::_Internal::value(const GreaterThanFilter* msg) {
  return *msg->_impl_.value_;
}
void GreaterThanFilter::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
GreaterThanFilter::GreaterThanFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.GreaterThanFilter)
}
GreaterThanFilter::GreaterThanFilter(const GreaterThanFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GreaterThanFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.GreaterThanFilter)
}

inline void GreaterThanFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GreaterThanFilter::~GreaterThanFilter() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.GreaterThanFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GreaterThanFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void GreaterThanFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GreaterThanFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.GreaterThanFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GreaterThanFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GreaterThanFilter.field"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GreaterThanFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.GreaterThanFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GreaterThanFilter.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.GreaterThanFilter)
  return target;
}

size_t GreaterThanFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.GreaterThanFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GreaterThanFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GreaterThanFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GreaterThanFilter::GetClassData() const { return &_class_data_; }


void GreaterThanFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GreaterThanFilter*>(&to_msg);
  auto& from = static_cast<const GreaterThanFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.GreaterThanFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GreaterThanFilter::CopyFrom(const GreaterThanFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.GreaterThanFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GreaterThanFilter::IsInitialized() const {
  return true;
}

void GreaterThanFilter::InternalSwap(GreaterThanFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GreaterThanFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[4]);
}

// ===================================================================

class LessThanFilter::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& value(const LessThanFilter* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
LessThanFilter::_Internal::value(const LessThanFilter* msg) {
  return *msg->_impl_.value_;
}
void LessThanFilter::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
LessThanFilter::LessThanFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.LessThanFilter)
}
LessThanFilter::LessThanFilter(const LessThanFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LessThanFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.LessThanFilter)
}

inline void LessThanFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LessThanFilter::~LessThanFilter() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.LessThanFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LessThanFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void LessThanFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LessThanFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.LessThanFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LessThanFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.LessThanFilter.field"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LessThanFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.LessThanFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.LessThanFilter.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.LessThanFilter)
  return target;
}

size_t LessThanFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.LessThanFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LessThanFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LessThanFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LessThanFilter::GetClassData() const { return &_class_data_; }


void LessThanFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LessThanFilter*>(&to_msg);
  auto& from = static_cast<const LessThanFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.LessThanFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LessThanFilter::CopyFrom(const LessThanFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.LessThanFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LessThanFilter::IsInitialized() const {
  return true;
}

void LessThanFilter::InternalSwap(LessThanFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LessThanFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[5]);
}

// ===================================================================

class InFilter::_Internal {
 public:
};

void InFilter::clear_values() {
  _impl_.values_.Clear();
}
InFilter::InFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.InFilter)
}
InFilter::InFilter(const InFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.field_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.InFilter)
}

inline void InFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.field_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InFilter::~InFilter() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.InFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
  _impl_.field_.Destroy();
}

void InFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.InFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.field_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.InFilter.field"));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.InFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.InFilter.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // repeated .google.protobuf.Any values = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.InFilter)
  return target;
}

size_t InFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.InFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InFilter::GetClassData() const { return &_class_data_; }


void InFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InFilter*>(&to_msg);
  auto& from = static_cast<const InFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.InFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InFilter::CopyFrom(const InFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.InFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InFilter::IsInitialized() const {
  return true;
}

void InFilter::InternalSwap(InFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[6]);
}

// ===================================================================

class RangeFilter::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& min_value(const RangeFilter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& max_value(const RangeFilter* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
RangeFilter::_Internal::min_value(const RangeFilter* msg) {
  return *msg->_impl_.min_value_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
RangeFilter::_Internal::max_value(const RangeFilter* msg) {
  return *msg->_impl_.max_value_;
}
void RangeFilter::clear_min_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_value_ != nullptr) {
    delete _impl_.min_value_;
  }
  _impl_.min_value_ = nullptr;
}
void RangeFilter::clear_max_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_value_ != nullptr) {
    delete _impl_.max_value_;
  }
  _impl_.max_value_ = nullptr;
}
RangeFilter::RangeFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.RangeFilter)
}
RangeFilter::RangeFilter(const RangeFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.min_value_){nullptr}
    , decltype(_impl_.max_value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_min_value()) {
    _this->_impl_.min_value_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.min_value_);
  }
  if (from._internal_has_max_value()) {
    _this->_impl_.max_value_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.max_value_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.RangeFilter)
}

inline void RangeFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.min_value_){nullptr}
    , decltype(_impl_.max_value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RangeFilter::~RangeFilter() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.RangeFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_.Destroy();
  if (this != internal_default_instance()) delete _impl_.min_value_;
  if (this != internal_default_instance()) delete _impl_.max_value_;
}

void RangeFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.RangeFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.min_value_ != nullptr) {
    delete _impl_.min_value_;
  }
  _impl_.min_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.max_value_ != nullptr) {
    delete _impl_.max_value_;
  }
  _impl_.max_value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.RangeFilter.field"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any min_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any max_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.RangeFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.RangeFilter.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // .google.protobuf.Any min_value = 2;
  if (this->_internal_has_min_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::min_value(this),
        _Internal::min_value(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any max_value = 3;
  if (this->_internal_has_max_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::max_value(this),
        _Internal::max_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.RangeFilter)
  return target;
}

size_t RangeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.RangeFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // .google.protobuf.Any min_value = 2;
  if (this->_internal_has_min_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_value_);
  }

  // .google.protobuf.Any max_value = 3;
  if (this->_internal_has_max_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeFilter::GetClassData() const { return &_class_data_; }


void RangeFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeFilter*>(&to_msg);
  auto& from = static_cast<const RangeFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.RangeFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  if (from._internal_has_min_value()) {
    _this->_internal_mutable_min_value()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_min_value());
  }
  if (from._internal_has_max_value()) {
    _this->_internal_mutable_max_value()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_max_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeFilter::CopyFrom(const RangeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.RangeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeFilter::IsInitialized() const {
  return true;
}

void RangeFilter::InternalSwap(RangeFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeFilter, _impl_.max_value_)
      + sizeof(RangeFilter::_impl_.max_value_)
      - PROTOBUF_FIELD_OFFSET(RangeFilter, _impl_.min_value_)>(
          reinterpret_cast<char*>(&_impl_.min_value_),
          reinterpret_cast<char*>(&other->_impl_.min_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[7]);
}

// ===================================================================

class TextSearchFilter::_Internal {
 public:
};

TextSearchFilter::TextSearchFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.TextSearchFilter)
}
TextSearchFilter::TextSearchFilter(const TextSearchFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextSearchFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , decltype(_impl_.query_){}
    , decltype(_impl_.analyzer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    _this->_impl_.query_.Set(from._internal_query(), 
      _this->GetArenaForAllocation());
  }
  _impl_.analyzer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.analyzer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_analyzer().empty()) {
    _this->_impl_.analyzer_.Set(from._internal_analyzer(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.TextSearchFilter)
}

inline void TextSearchFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , decltype(_impl_.query_){}
    , decltype(_impl_.analyzer_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.analyzer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.analyzer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextSearchFilter::~TextSearchFilter() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.TextSearchFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextSearchFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.~RepeatedPtrField();
  _impl_.query_.Destroy();
  _impl_.analyzer_.Destroy();
}

void TextSearchFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextSearchFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.TextSearchFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _impl_.query_.ClearToEmpty();
  _impl_.analyzer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextSearchFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.TextSearchFilter.fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.TextSearchFilter.query"));
        } else
          goto handle_unusual;
        continue;
      // string analyzer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_analyzer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.TextSearchFilter.analyzer"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextSearchFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.TextSearchFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string fields = 1;
  for (int i = 0, n = this->_internal_fields_size(); i < n; i++) {
    const auto& s = this->_internal_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.TextSearchFilter.fields");
    target = stream->WriteString(1, s, target);
  }

  // string query = 2;
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.TextSearchFilter.query");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_query(), target);
  }

  // string analyzer = 3;
  if (!this->_internal_analyzer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analyzer().data(), static_cast<int>(this->_internal_analyzer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.TextSearchFilter.analyzer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_analyzer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.TextSearchFilter)
  return target;
}

size_t TextSearchFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.TextSearchFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.fields_.size());
  for (int i = 0, n = _impl_.fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.fields_.Get(i));
  }

  // string query = 2;
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string analyzer = 3;
  if (!this->_internal_analyzer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analyzer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextSearchFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextSearchFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextSearchFilter::GetClassData() const { return &_class_data_; }


void TextSearchFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextSearchFilter*>(&to_msg);
  auto& from = static_cast<const TextSearchFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.TextSearchFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  if (!from._internal_analyzer().empty()) {
    _this->_internal_set_analyzer(from._internal_analyzer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextSearchFilter::CopyFrom(const TextSearchFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.TextSearchFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextSearchFilter::IsInitialized() const {
  return true;
}

void TextSearchFilter::InternalSwap(TextSearchFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_, lhs_arena,
      &other->_impl_.query_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.analyzer_, lhs_arena,
      &other->_impl_.analyzer_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TextSearchFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[8]);
}

// ===================================================================

class VectorSearchFilter::_Internal {
 public:
};

VectorSearchFilter::VectorSearchFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.VectorSearchFilter)
}
VectorSearchFilter::VectorSearchFilter(const VectorSearchFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorSearchFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.query_vector_){from._impl_.query_vector_}
    , decltype(_impl_.field_){}
    , decltype(_impl_.distance_metric_){}
    , decltype(_impl_.threshold_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.distance_metric_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.distance_metric_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_distance_metric().empty()) {
    _this->_impl_.distance_metric_.Set(from._internal_distance_metric(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.threshold_, &from._impl_.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.threshold_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.VectorSearchFilter)
}

inline void VectorSearchFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.query_vector_){arena}
    , decltype(_impl_.field_){}
    , decltype(_impl_.distance_metric_){}
    , decltype(_impl_.threshold_){0}
    , decltype(_impl_.limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.distance_metric_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.distance_metric_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VectorSearchFilter::~VectorSearchFilter() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.VectorSearchFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorSearchFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.query_vector_.~RepeatedField();
  _impl_.field_.Destroy();
  _impl_.distance_metric_.Destroy();
}

void VectorSearchFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorSearchFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.VectorSearchFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_vector_.Clear();
  _impl_.field_.ClearToEmpty();
  _impl_.distance_metric_.ClearToEmpty();
  ::memset(&_impl_.threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.threshold_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorSearchFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.VectorSearchFilter.field"));
        } else
          goto handle_unusual;
        continue;
      // repeated float query_vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_query_vector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_query_vector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string distance_metric = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_distance_metric();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.VectorSearchFilter.distance_metric"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorSearchFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.VectorSearchFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.VectorSearchFilter.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // repeated float query_vector = 2;
  if (this->_internal_query_vector_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_query_vector(), target);
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_limit(), target);
  }

  // double threshold = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_threshold = this->_internal_threshold();
  uint64_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_threshold(), target);
  }

  // string distance_metric = 5;
  if (!this->_internal_distance_metric().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_distance_metric().data(), static_cast<int>(this->_internal_distance_metric().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.VectorSearchFilter.distance_metric");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_distance_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.VectorSearchFilter)
  return target;
}

size_t VectorSearchFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.VectorSearchFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float query_vector = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_query_vector_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // string distance_metric = 5;
  if (!this->_internal_distance_metric().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_distance_metric());
  }

  // double threshold = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_threshold = this->_internal_threshold();
  uint64_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    total_size += 1 + 8;
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorSearchFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorSearchFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorSearchFilter::GetClassData() const { return &_class_data_; }


void VectorSearchFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorSearchFilter*>(&to_msg);
  auto& from = static_cast<const VectorSearchFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.VectorSearchFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.query_vector_.MergeFrom(from._impl_.query_vector_);
  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  if (!from._internal_distance_metric().empty()) {
    _this->_internal_set_distance_metric(from._internal_distance_metric());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_threshold = from._internal_threshold();
  uint64_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    _this->_internal_set_threshold(from._internal_threshold());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorSearchFilter::CopyFrom(const VectorSearchFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.VectorSearchFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorSearchFilter::IsInitialized() const {
  return true;
}

void VectorSearchFilter::InternalSwap(VectorSearchFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.query_vector_.InternalSwap(&other->_impl_.query_vector_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.distance_metric_, lhs_arena,
      &other->_impl_.distance_metric_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorSearchFilter, _impl_.limit_)
      + sizeof(VectorSearchFilter::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(VectorSearchFilter, _impl_.threshold_)>(
          reinterpret_cast<char*>(&_impl_.threshold_),
          reinterpret_cast<char*>(&other->_impl_.threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorSearchFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[9]);
}

// ===================================================================

class AndFilter::_Internal {
 public:
};

AndFilter::AndFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.AndFilter)
}
AndFilter::AndFilter(const AndFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){from._impl_.filters_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.AndFilter)
}

inline void AndFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AndFilter::~AndFilter() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.AndFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filters_.~RepeatedPtrField();
}

void AndFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.AndFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.persistence.QueryCriteria filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.AndFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.persistence.QueryCriteria filters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.AndFilter)
  return target;
}

size_t AndFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.AndFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.persistence.QueryCriteria filters = 1;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->_impl_.filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndFilter::GetClassData() const { return &_class_data_; }


void AndFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndFilter*>(&to_msg);
  auto& from = static_cast<const AndFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.AndFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filters_.MergeFrom(from._impl_.filters_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndFilter::CopyFrom(const AndFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.AndFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndFilter::IsInitialized() const {
  return true;
}

void AndFilter::InternalSwap(AndFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AndFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[10]);
}

// ===================================================================

class OrFilter::_Internal {
 public:
};

OrFilter::OrFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.OrFilter)
}
OrFilter::OrFilter(const OrFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){from._impl_.filters_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.OrFilter)
}

inline void OrFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrFilter::~OrFilter() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.OrFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filters_.~RepeatedPtrField();
}

void OrFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.OrFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.persistence.QueryCriteria filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.OrFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.persistence.QueryCriteria filters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.OrFilter)
  return target;
}

size_t OrFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.OrFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.persistence.QueryCriteria filters = 1;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->_impl_.filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrFilter::GetClassData() const { return &_class_data_; }


void OrFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrFilter*>(&to_msg);
  auto& from = static_cast<const OrFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.OrFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filters_.MergeFrom(from._impl_.filters_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrFilter::CopyFrom(const OrFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.OrFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrFilter::IsInitialized() const {
  return true;
}

void OrFilter::InternalSwap(OrFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[11]);
}

// ===================================================================

class OrderBy::_Internal {
 public:
};

OrderBy::OrderBy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.OrderBy)
}
OrderBy::OrderBy(const OrderBy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderBy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.ascending_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ascending_ = from._impl_.ascending_;
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.OrderBy)
}

inline void OrderBy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.ascending_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderBy::~OrderBy() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.OrderBy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderBy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_.Destroy();
}

void OrderBy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderBy::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.OrderBy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_.ClearToEmpty();
  _impl_.ascending_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderBy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.OrderBy.field"));
        } else
          goto handle_unusual;
        continue;
      // bool ascending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ascending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderBy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.OrderBy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.OrderBy.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // bool ascending = 2;
  if (this->_internal_ascending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ascending(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.OrderBy)
  return target;
}

size_t OrderBy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.OrderBy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // bool ascending = 2;
  if (this->_internal_ascending() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderBy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderBy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderBy::GetClassData() const { return &_class_data_; }


void OrderBy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderBy*>(&to_msg);
  auto& from = static_cast<const OrderBy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.OrderBy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  if (from._internal_ascending() != 0) {
    _this->_internal_set_ascending(from._internal_ascending());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderBy::CopyFrom(const OrderBy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.OrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBy::IsInitialized() const {
  return true;
}

void OrderBy::InternalSwap(OrderBy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
  swap(_impl_.ascending_, other->_impl_.ascending_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderBy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[12]);
}

// ===================================================================

class QuerySpec::_Internal {
 public:
  static const ::unhinged::persistence::QueryCriteria& criteria(const QuerySpec* msg);
};

const ::unhinged::persistence::QueryCriteria&
QuerySpec::_Internal::criteria(const QuerySpec* msg) {
  return *msg->_impl_.criteria_;
}
QuerySpec::QuerySpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.QuerySpec)
}
QuerySpec::QuerySpec(const QuerySpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.projections_){from._impl_.projections_}
    , decltype(_impl_.order_by_){from._impl_.order_by_}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.criteria_){nullptr}
    , decltype(_impl_.query_type_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_criteria()) {
    _this->_impl_.criteria_ = new ::unhinged::persistence::QueryCriteria(*from._impl_.criteria_);
  }
  ::memcpy(&_impl_.query_type_, &from._impl_.query_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.query_type_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.QuerySpec)
}

inline void QuerySpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.projections_){arena}
    , decltype(_impl_.order_by_){arena}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.criteria_){nullptr}
    , decltype(_impl_.query_type_){0}
    , decltype(_impl_.limit_){0}
    , decltype(_impl_.offset_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySpec::~QuerySpec() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.QuerySpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.projections_.~RepeatedPtrField();
  _impl_.order_by_.~RepeatedPtrField();
  _impl_.table_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.criteria_;
}

void QuerySpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpec::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.QuerySpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.projections_.Clear();
  _impl_.order_by_.Clear();
  _impl_.table_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.criteria_ != nullptr) {
    delete _impl_.criteria_;
  }
  _impl_.criteria_ = nullptr;
  ::memset(&_impl_.query_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.offset_) -
      reinterpret_cast<char*>(&_impl_.query_type_)) + sizeof(_impl_.offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.QuerySpec.table_name"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.QueryType query_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_query_type(static_cast<::unhinged::persistence::QueryType>(val));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.QueryCriteria criteria = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_criteria(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string projections = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_projections();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.QuerySpec.projections"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.persistence.OrderBy order_by = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_order_by(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuerySpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.QuerySpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.QuerySpec.table_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // .unhinged.persistence.QueryType query_type = 2;
  if (this->_internal_query_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_query_type(), target);
  }

  // .unhinged.persistence.QueryCriteria criteria = 3;
  if (this->_internal_has_criteria()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::criteria(this),
        _Internal::criteria(this).GetCachedSize(), target, stream);
  }

  // repeated string projections = 4;
  for (int i = 0, n = this->_internal_projections_size(); i < n; i++) {
    const auto& s = this->_internal_projections(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.QuerySpec.projections");
    target = stream->WriteString(4, s, target);
  }

  // repeated .unhinged.persistence.OrderBy order_by = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_order_by_size()); i < n; i++) {
    const auto& repfield = this->_internal_order_by(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 limit = 6;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_limit(), target);
  }

  // int32 offset = 7;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.QuerySpec)
  return target;
}

size_t QuerySpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.QuerySpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string projections = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.projections_.size());
  for (int i = 0, n = _impl_.projections_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.projections_.Get(i));
  }

  // repeated .unhinged.persistence.OrderBy order_by = 5;
  total_size += 1UL * this->_internal_order_by_size();
  for (const auto& msg : this->_impl_.order_by_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // .unhinged.persistence.QueryCriteria criteria = 3;
  if (this->_internal_has_criteria()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.criteria_);
  }

  // .unhinged.persistence.QueryType query_type = 2;
  if (this->_internal_query_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_query_type());
  }

  // int32 limit = 6;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  // int32 offset = 7;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpec::GetClassData() const { return &_class_data_; }


void QuerySpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpec*>(&to_msg);
  auto& from = static_cast<const QuerySpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.QuerySpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.projections_.MergeFrom(from._impl_.projections_);
  _this->_impl_.order_by_.MergeFrom(from._impl_.order_by_);
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  if (from._internal_has_criteria()) {
    _this->_internal_mutable_criteria()->::unhinged::persistence::QueryCriteria::MergeFrom(
        from._internal_criteria());
  }
  if (from._internal_query_type() != 0) {
    _this->_internal_set_query_type(from._internal_query_type());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpec::CopyFrom(const QuerySpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.QuerySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpec::IsInitialized() const {
  return true;
}

void QuerySpec::InternalSwap(QuerySpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.projections_.InternalSwap(&other->_impl_.projections_);
  _impl_.order_by_.InternalSwap(&other->_impl_.order_by_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuerySpec, _impl_.offset_)
      + sizeof(QuerySpec::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(QuerySpec, _impl_.criteria_)>(
          reinterpret_cast<char*>(&_impl_.criteria_),
          reinterpret_cast<char*>(&other->_impl_.criteria_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[13]);
}

// ===================================================================

class InsertRequest::_Internal {
 public:
  static const ::unhinged::persistence::Record& record(const InsertRequest* msg);
  static const ::unhinged::persistence::ExecutionContext& context(const InsertRequest* msg);
};

const ::unhinged::persistence::Record&
InsertRequest::_Internal::record(const InsertRequest* msg) {
  return *msg->_impl_.record_;
}
const ::unhinged::persistence::ExecutionContext&
InsertRequest::_Internal::context(const InsertRequest* msg) {
  return *msg->_impl_.context_;
}
InsertRequest::InsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.InsertRequest)
}
InsertRequest::InsertRequest(const InsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_record()) {
    _this->_impl_.record_ = new ::unhinged::persistence::Record(*from._impl_.record_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::unhinged::persistence::ExecutionContext(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.InsertRequest)
}

inline void InsertRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertRequest::~InsertRequest() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.InsertRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.record_;
  if (this != internal_default_instance()) delete _impl_.context_;
}

void InsertRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.InsertRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.record_ != nullptr) {
    delete _impl_.record_;
  }
  _impl_.record_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.InsertRequest.table_name"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.Record record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.ExecutionContext context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.InsertRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.InsertRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // .unhinged.persistence.Record record = 2;
  if (this->_internal_has_record()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::record(this),
        _Internal::record(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.ExecutionContext context = 3;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.InsertRequest)
  return target;
}

size_t InsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.InsertRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // .unhinged.persistence.Record record = 2;
  if (this->_internal_has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.record_);
  }

  // .unhinged.persistence.ExecutionContext context = 3;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertRequest::GetClassData() const { return &_class_data_; }


void InsertRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertRequest*>(&to_msg);
  auto& from = static_cast<const InsertRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.InsertRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  if (from._internal_has_record()) {
    _this->_internal_mutable_record()->::unhinged::persistence::Record::MergeFrom(
        from._internal_record());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::unhinged::persistence::ExecutionContext::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertRequest::CopyFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRequest::IsInitialized() const {
  return true;
}

void InsertRequest::InternalSwap(InsertRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertRequest, _impl_.context_)
      + sizeof(InsertRequest::_impl_.context_)
      - PROTOBUF_FIELD_OFFSET(InsertRequest, _impl_.record_)>(
          reinterpret_cast<char*>(&_impl_.record_),
          reinterpret_cast<char*>(&other->_impl_.record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[14]);
}

// ===================================================================

class InsertResponse::_Internal {
 public:
  static const ::unhinged::persistence::Record& record(const InsertResponse* msg);
};

const ::unhinged::persistence::Record&
InsertResponse::_Internal::record(const InsertResponse* msg) {
  return *msg->_impl_.record_;
}
InsertResponse::InsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.InsertResponse)
}
InsertResponse::InsertResponse(const InsertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.execution_time_ms_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_record()) {
    _this->_impl_.record_ = new ::unhinged::persistence::Record(*from._impl_.record_);
  }
  ::memcpy(&_impl_.execution_time_ms_, &from._impl_.execution_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.execution_time_ms_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.InsertResponse)
}

inline void InsertResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.execution_time_ms_){int64_t{0}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertResponse::~InsertResponse() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.InsertResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.record_;
}

void InsertResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.InsertResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.record_ != nullptr) {
    delete _impl_.record_;
  }
  _impl_.record_ = nullptr;
  ::memset(&_impl_.execution_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.execution_time_ms_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.Record record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.InsertResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      // int64 execution_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.execution_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.InsertResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .unhinged.persistence.Record record = 2;
  if (this->_internal_has_record()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::record(this),
        _Internal::record(this).GetCachedSize(), target, stream);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.InsertResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // int64 execution_time_ms = 4;
  if (this->_internal_execution_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_execution_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.InsertResponse)
  return target;
}

size_t InsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.InsertResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .unhinged.persistence.Record record = 2;
  if (this->_internal_has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.record_);
  }

  // int64 execution_time_ms = 4;
  if (this->_internal_execution_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_execution_time_ms());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertResponse::GetClassData() const { return &_class_data_; }


void InsertResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertResponse*>(&to_msg);
  auto& from = static_cast<const InsertResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.InsertResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_record()) {
    _this->_internal_mutable_record()->::unhinged::persistence::Record::MergeFrom(
        from._internal_record());
  }
  if (from._internal_execution_time_ms() != 0) {
    _this->_internal_set_execution_time_ms(from._internal_execution_time_ms());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertResponse::CopyFrom(const InsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.InsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertResponse::IsInitialized() const {
  return true;
}

void InsertResponse::InternalSwap(InsertResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertResponse, _impl_.success_)
      + sizeof(InsertResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(InsertResponse, _impl_.record_)>(
          reinterpret_cast<char*>(&_impl_.record_),
          reinterpret_cast<char*>(&other->_impl_.record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[15]);
}

// ===================================================================

class InsertBatchRequest::_Internal {
 public:
  static const ::unhinged::persistence::ExecutionContext& context(const InsertBatchRequest* msg);
};

const ::unhinged::persistence::ExecutionContext&
InsertBatchRequest::_Internal::context(const InsertBatchRequest* msg) {
  return *msg->_impl_.context_;
}
InsertBatchRequest::InsertBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.InsertBatchRequest)
}
InsertBatchRequest::InsertBatchRequest(const InsertBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertBatchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){from._impl_.records_}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::unhinged::persistence::ExecutionContext(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.InsertBatchRequest)
}

inline void InsertBatchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){arena}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertBatchRequest::~InsertBatchRequest() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.InsertBatchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertBatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.records_.~RepeatedPtrField();
  _impl_.table_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.context_;
}

void InsertBatchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.InsertBatchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.records_.Clear();
  _impl_.table_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertBatchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.InsertBatchRequest.table_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.persistence.Record records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.ExecutionContext context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertBatchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.InsertBatchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.InsertBatchRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // repeated .unhinged.persistence.Record records = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.ExecutionContext context = 3;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.InsertBatchRequest)
  return target;
}

size_t InsertBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.InsertBatchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.persistence.Record records = 2;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->_impl_.records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // .unhinged.persistence.ExecutionContext context = 3;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertBatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertBatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertBatchRequest::GetClassData() const { return &_class_data_; }


void InsertBatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertBatchRequest*>(&to_msg);
  auto& from = static_cast<const InsertBatchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.InsertBatchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.records_.MergeFrom(from._impl_.records_);
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::unhinged::persistence::ExecutionContext::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertBatchRequest::CopyFrom(const InsertBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.InsertBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertBatchRequest::IsInitialized() const {
  return true;
}

void InsertBatchRequest::InternalSwap(InsertBatchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.records_.InternalSwap(&other->_impl_.records_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
  swap(_impl_.context_, other->_impl_.context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertBatchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[16]);
}

// ===================================================================

class InsertBatchResponse::_Internal {
 public:
};

InsertBatchResponse::InsertBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.InsertBatchResponse)
}
InsertBatchResponse::InsertBatchResponse(const InsertBatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertBatchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){from._impl_.records_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.inserted_count_){}
    , decltype(_impl_.execution_time_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.execution_time_ms_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.execution_time_ms_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.InsertBatchResponse)
}

inline void InsertBatchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.inserted_count_){0}
    , decltype(_impl_.execution_time_ms_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertBatchResponse::~InsertBatchResponse() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.InsertBatchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertBatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.records_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
}

void InsertBatchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertBatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.InsertBatchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.records_.Clear();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.execution_time_ms_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.execution_time_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertBatchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.persistence.Record records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 inserted_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.inserted_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.InsertBatchResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      // int64 execution_time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.execution_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertBatchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.InsertBatchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .unhinged.persistence.Record records = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 inserted_count = 3;
  if (this->_internal_inserted_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_inserted_count(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.InsertBatchResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  // int64 execution_time_ms = 5;
  if (this->_internal_execution_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_execution_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.InsertBatchResponse)
  return target;
}

size_t InsertBatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.InsertBatchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.persistence.Record records = 2;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->_impl_.records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 inserted_count = 3;
  if (this->_internal_inserted_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_inserted_count());
  }

  // int64 execution_time_ms = 5;
  if (this->_internal_execution_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_execution_time_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertBatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertBatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertBatchResponse::GetClassData() const { return &_class_data_; }


void InsertBatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertBatchResponse*>(&to_msg);
  auto& from = static_cast<const InsertBatchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.InsertBatchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.records_.MergeFrom(from._impl_.records_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_inserted_count() != 0) {
    _this->_internal_set_inserted_count(from._internal_inserted_count());
  }
  if (from._internal_execution_time_ms() != 0) {
    _this->_internal_set_execution_time_ms(from._internal_execution_time_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertBatchResponse::CopyFrom(const InsertBatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.InsertBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertBatchResponse::IsInitialized() const {
  return true;
}

void InsertBatchResponse::InternalSwap(InsertBatchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.records_.InternalSwap(&other->_impl_.records_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertBatchResponse, _impl_.execution_time_ms_)
      + sizeof(InsertBatchResponse::_impl_.execution_time_ms_)
      - PROTOBUF_FIELD_OFFSET(InsertBatchResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertBatchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[17]);
}

// ===================================================================

class UpdateRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& updates(const UpdateRequest* msg);
  static const ::unhinged::persistence::ExecutionContext& context(const UpdateRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
UpdateRequest::_Internal::updates(const UpdateRequest* msg) {
  return *msg->_impl_.updates_;
}
const ::unhinged::persistence::ExecutionContext&
UpdateRequest::_Internal::context(const UpdateRequest* msg) {
  return *msg->_impl_.context_;
}
void UpdateRequest::clear_updates() {
  if (GetArenaForAllocation() == nullptr && _impl_.updates_ != nullptr) {
    delete _impl_.updates_;
  }
  _impl_.updates_ = nullptr;
}
UpdateRequest::UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.UpdateRequest)
}
UpdateRequest::UpdateRequest(const UpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.updates_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updates()) {
    _this->_impl_.updates_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.updates_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::unhinged::persistence::ExecutionContext(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.UpdateRequest)
}

inline void UpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.updates_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateRequest::~UpdateRequest() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.UpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_name_.Destroy();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updates_;
  if (this != internal_default_instance()) delete _impl_.context_;
}

void UpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.UpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_name_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updates_ != nullptr) {
    delete _impl_.updates_;
  }
  _impl_.updates_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.UpdateRequest.table_name"));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.UpdateRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct updates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.ExecutionContext context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.UpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.UpdateRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.UpdateRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // .google.protobuf.Struct updates = 3;
  if (this->_internal_has_updates()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::updates(this),
        _Internal::updates(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.ExecutionContext context = 4;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.UpdateRequest)
  return target;
}

size_t UpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.UpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.protobuf.Struct updates = 3;
  if (this->_internal_has_updates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updates_);
  }

  // .unhinged.persistence.ExecutionContext context = 4;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRequest::GetClassData() const { return &_class_data_; }


void UpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateRequest*>(&to_msg);
  auto& from = static_cast<const UpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.UpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_updates()) {
    _this->_internal_mutable_updates()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_updates());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::unhinged::persistence::ExecutionContext::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRequest::CopyFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequest::IsInitialized() const {
  return true;
}

void UpdateRequest::InternalSwap(UpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateRequest, _impl_.context_)
      + sizeof(UpdateRequest::_impl_.context_)
      - PROTOBUF_FIELD_OFFSET(UpdateRequest, _impl_.updates_)>(
          reinterpret_cast<char*>(&_impl_.updates_),
          reinterpret_cast<char*>(&other->_impl_.updates_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[18]);
}

// ===================================================================

class UpdateResponse::_Internal {
 public:
  static const ::unhinged::persistence::Record& record(const UpdateResponse* msg);
};

const ::unhinged::persistence::Record&
UpdateResponse::_Internal::record(const UpdateResponse* msg) {
  return *msg->_impl_.record_;
}
UpdateResponse::UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.UpdateResponse)
}
UpdateResponse::UpdateResponse(const UpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.execution_time_ms_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_record()) {
    _this->_impl_.record_ = new ::unhinged::persistence::Record(*from._impl_.record_);
  }
  ::memcpy(&_impl_.execution_time_ms_, &from._impl_.execution_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.execution_time_ms_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.UpdateResponse)
}

inline void UpdateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.execution_time_ms_){int64_t{0}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateResponse::~UpdateResponse() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.UpdateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.record_;
}

void UpdateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.UpdateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.record_ != nullptr) {
    delete _impl_.record_;
  }
  _impl_.record_ = nullptr;
  ::memset(&_impl_.execution_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.execution_time_ms_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.Record record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.UpdateResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      // int64 execution_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.execution_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.UpdateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .unhinged.persistence.Record record = 2;
  if (this->_internal_has_record()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::record(this),
        _Internal::record(this).GetCachedSize(), target, stream);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.UpdateResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // int64 execution_time_ms = 4;
  if (this->_internal_execution_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_execution_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.UpdateResponse)
  return target;
}

size_t UpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.UpdateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .unhinged.persistence.Record record = 2;
  if (this->_internal_has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.record_);
  }

  // int64 execution_time_ms = 4;
  if (this->_internal_execution_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_execution_time_ms());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateResponse::GetClassData() const { return &_class_data_; }


void UpdateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateResponse*>(&to_msg);
  auto& from = static_cast<const UpdateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.UpdateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_record()) {
    _this->_internal_mutable_record()->::unhinged::persistence::Record::MergeFrom(
        from._internal_record());
  }
  if (from._internal_execution_time_ms() != 0) {
    _this->_internal_set_execution_time_ms(from._internal_execution_time_ms());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateResponse::CopyFrom(const UpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.UpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateResponse::IsInitialized() const {
  return true;
}

void UpdateResponse::InternalSwap(UpdateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateResponse, _impl_.success_)
      + sizeof(UpdateResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(UpdateResponse, _impl_.record_)>(
          reinterpret_cast<char*>(&_impl_.record_),
          reinterpret_cast<char*>(&other->_impl_.record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[19]);
}

// ===================================================================

class DeleteRequest::_Internal {
 public:
  static const ::unhinged::persistence::QueryCriteria& criteria(const DeleteRequest* msg);
  static const ::unhinged::persistence::ExecutionContext& context(const DeleteRequest* msg);
};

const ::unhinged::persistence::QueryCriteria&
DeleteRequest::_Internal::criteria(const DeleteRequest* msg) {
  return *msg->_impl_.criteria_;
}
const ::unhinged::persistence::ExecutionContext&
DeleteRequest::_Internal::context(const DeleteRequest* msg) {
  return *msg->_impl_.context_;
}
DeleteRequest::DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){}
    , decltype(_impl_.criteria_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_criteria()) {
    _this->_impl_.criteria_ = new ::unhinged::persistence::QueryCriteria(*from._impl_.criteria_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::unhinged::persistence::ExecutionContext(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.DeleteRequest)
}

inline void DeleteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){}
    , decltype(_impl_.criteria_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.DeleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.criteria_;
  if (this != internal_default_instance()) delete _impl_.context_;
}

void DeleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.DeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.criteria_ != nullptr) {
    delete _impl_.criteria_;
  }
  _impl_.criteria_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.DeleteRequest.table_name"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.QueryCriteria criteria = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_criteria(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.ExecutionContext context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.DeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.DeleteRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // .unhinged.persistence.QueryCriteria criteria = 2;
  if (this->_internal_has_criteria()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::criteria(this),
        _Internal::criteria(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.ExecutionContext context = 3;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.DeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // .unhinged.persistence.QueryCriteria criteria = 2;
  if (this->_internal_has_criteria()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.criteria_);
  }

  // .unhinged.persistence.ExecutionContext context = 3;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRequest::GetClassData() const { return &_class_data_; }


void DeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteRequest*>(&to_msg);
  auto& from = static_cast<const DeleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  if (from._internal_has_criteria()) {
    _this->_internal_mutable_criteria()->::unhinged::persistence::QueryCriteria::MergeFrom(
        from._internal_criteria());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::unhinged::persistence::ExecutionContext::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteRequest, _impl_.context_)
      + sizeof(DeleteRequest::_impl_.context_)
      - PROTOBUF_FIELD_OFFSET(DeleteRequest, _impl_.criteria_)>(
          reinterpret_cast<char*>(&_impl_.criteria_),
          reinterpret_cast<char*>(&other->_impl_.criteria_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[20]);
}

// ===================================================================

class DeleteResponse::_Internal {
 public:
};

DeleteResponse::DeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.DeleteResponse)
}
DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.deleted_count_){}
    , decltype(_impl_.execution_time_ms_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.deleted_count_, &from._impl_.deleted_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.deleted_count_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.DeleteResponse)
}

inline void DeleteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.deleted_count_){int64_t{0}}
    , decltype(_impl_.execution_time_ms_){int64_t{0}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.DeleteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void DeleteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.DeleteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.deleted_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.deleted_count_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 deleted_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.deleted_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.DeleteResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      // int64 execution_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.execution_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.DeleteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int64 deleted_count = 2;
  if (this->_internal_deleted_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_deleted_count(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.DeleteResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // int64 execution_time_ms = 4;
  if (this->_internal_execution_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_execution_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.DeleteResponse)
  return target;
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.DeleteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int64 deleted_count = 2;
  if (this->_internal_deleted_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_deleted_count());
  }

  // int64 execution_time_ms = 4;
  if (this->_internal_execution_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_execution_time_ms());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteResponse::GetClassData() const { return &_class_data_; }


void DeleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteResponse*>(&to_msg);
  auto& from = static_cast<const DeleteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_deleted_count() != 0) {
    _this->_internal_set_deleted_count(from._internal_deleted_count());
  }
  if (from._internal_execution_time_ms() != 0) {
    _this->_internal_set_execution_time_ms(from._internal_execution_time_ms());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  return true;
}

void DeleteResponse::InternalSwap(DeleteResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteResponse, _impl_.success_)
      + sizeof(DeleteResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(DeleteResponse, _impl_.deleted_count_)>(
          reinterpret_cast<char*>(&_impl_.deleted_count_),
          reinterpret_cast<char*>(&other->_impl_.deleted_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[21]);
}

// ===================================================================

class ExecuteQueryRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& parameters(const ExecuteQueryRequest* msg);
  static const ::unhinged::persistence::ExecutionContext& context(const ExecuteQueryRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
ExecuteQueryRequest::_Internal::parameters(const ExecuteQueryRequest* msg) {
  return *msg->_impl_.parameters_;
}
const ::unhinged::persistence::ExecutionContext&
ExecuteQueryRequest::_Internal::context(const ExecuteQueryRequest* msg) {
  return *msg->_impl_.context_;
}
void ExecuteQueryRequest::clear_parameters() {
  if (GetArenaForAllocation() == nullptr && _impl_.parameters_ != nullptr) {
    delete _impl_.parameters_;
  }
  _impl_.parameters_ = nullptr;
}
ExecuteQueryRequest::ExecuteQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.ExecuteQueryRequest)
}
ExecuteQueryRequest::ExecuteQueryRequest(const ExecuteQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteQueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.query_name_){}
    , decltype(_impl_.parameters_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.query_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query_name().empty()) {
    _this->_impl_.query_name_.Set(from._internal_query_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parameters()) {
    _this->_impl_.parameters_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.parameters_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::unhinged::persistence::ExecutionContext(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.ExecuteQueryRequest)
}

inline void ExecuteQueryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.query_name_){}
    , decltype(_impl_.parameters_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.query_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteQueryRequest::~ExecuteQueryRequest() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.ExecuteQueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.query_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parameters_;
  if (this != internal_default_instance()) delete _impl_.context_;
}

void ExecuteQueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.ExecuteQueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.parameters_ != nullptr) {
    delete _impl_.parameters_;
  }
  _impl_.parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteQueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string query_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_query_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.ExecuteQueryRequest.query_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.ExecutionContext context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteQueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.ExecuteQueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string query_name = 1;
  if (!this->_internal_query_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_name().data(), static_cast<int>(this->_internal_query_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.ExecuteQueryRequest.query_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query_name(), target);
  }

  // .google.protobuf.Struct parameters = 2;
  if (this->_internal_has_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::parameters(this),
        _Internal::parameters(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.ExecutionContext context = 3;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.ExecuteQueryRequest)
  return target;
}

size_t ExecuteQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.ExecuteQueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query_name = 1;
  if (!this->_internal_query_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_name());
  }

  // .google.protobuf.Struct parameters = 2;
  if (this->_internal_has_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parameters_);
  }

  // .unhinged.persistence.ExecutionContext context = 3;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteQueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteQueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteQueryRequest::GetClassData() const { return &_class_data_; }


void ExecuteQueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteQueryRequest*>(&to_msg);
  auto& from = static_cast<const ExecuteQueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.ExecuteQueryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query_name().empty()) {
    _this->_internal_set_query_name(from._internal_query_name());
  }
  if (from._internal_has_parameters()) {
    _this->_internal_mutable_parameters()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_parameters());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::unhinged::persistence::ExecutionContext::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteQueryRequest::CopyFrom(const ExecuteQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.ExecuteQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteQueryRequest::IsInitialized() const {
  return true;
}

void ExecuteQueryRequest::InternalSwap(ExecuteQueryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_name_, lhs_arena,
      &other->_impl_.query_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteQueryRequest, _impl_.context_)
      + sizeof(ExecuteQueryRequest::_impl_.context_)
      - PROTOBUF_FIELD_OFFSET(ExecuteQueryRequest, _impl_.parameters_)>(
          reinterpret_cast<char*>(&_impl_.parameters_),
          reinterpret_cast<char*>(&other->_impl_.parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteQueryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[22]);
}

// ===================================================================

class ExecuteQueryResponse::_Internal {
 public:
};

ExecuteQueryResponse::ExecuteQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.ExecuteQueryResponse)
}
ExecuteQueryResponse::ExecuteQueryResponse(const ExecuteQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteQueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.from_cache_){}
    , decltype(_impl_.execution_time_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.count_, &from._impl_.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.execution_time_ms_) -
    reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.execution_time_ms_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.ExecuteQueryResponse)
}

inline void ExecuteQueryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.count_){0}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.from_cache_){false}
    , decltype(_impl_.execution_time_ms_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteQueryResponse::~ExecuteQueryResponse() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.ExecuteQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
}

void ExecuteQueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.ExecuteQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.execution_time_ms_) -
      reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.execution_time_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.persistence.Record results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.ExecuteQueryResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      // int64 execution_time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.execution_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool from_cache = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.from_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.ExecuteQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .unhinged.persistence.Record results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.ExecuteQueryResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  // int64 execution_time_ms = 5;
  if (this->_internal_execution_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_execution_time_ms(), target);
  }

  // bool from_cache = 6;
  if (this->_internal_from_cache() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_from_cache(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.ExecuteQueryResponse)
  return target;
}

size_t ExecuteQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.ExecuteQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.persistence.Record results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool from_cache = 6;
  if (this->_internal_from_cache() != 0) {
    total_size += 1 + 1;
  }

  // int64 execution_time_ms = 5;
  if (this->_internal_execution_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_execution_time_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteQueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteQueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteQueryResponse::GetClassData() const { return &_class_data_; }


void ExecuteQueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteQueryResponse*>(&to_msg);
  auto& from = static_cast<const ExecuteQueryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.ExecuteQueryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_from_cache() != 0) {
    _this->_internal_set_from_cache(from._internal_from_cache());
  }
  if (from._internal_execution_time_ms() != 0) {
    _this->_internal_set_execution_time_ms(from._internal_execution_time_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteQueryResponse::CopyFrom(const ExecuteQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.ExecuteQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteQueryResponse::IsInitialized() const {
  return true;
}

void ExecuteQueryResponse::InternalSwap(ExecuteQueryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteQueryResponse, _impl_.execution_time_ms_)
      + sizeof(ExecuteQueryResponse::_impl_.execution_time_ms_)
      - PROTOBUF_FIELD_OFFSET(ExecuteQueryResponse, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteQueryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[23]);
}

// ===================================================================

class ExecuteRawQueryRequest::_Internal {
 public:
  static const ::unhinged::persistence::QuerySpec& query_spec(const ExecuteRawQueryRequest* msg);
  static const ::unhinged::persistence::ExecutionContext& context(const ExecuteRawQueryRequest* msg);
};

const ::unhinged::persistence::QuerySpec&
ExecuteRawQueryRequest::_Internal::query_spec(const ExecuteRawQueryRequest* msg) {
  return *msg->_impl_.query_spec_;
}
const ::unhinged::persistence::ExecutionContext&
ExecuteRawQueryRequest::_Internal::context(const ExecuteRawQueryRequest* msg) {
  return *msg->_impl_.context_;
}
ExecuteRawQueryRequest::ExecuteRawQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.ExecuteRawQueryRequest)
}
ExecuteRawQueryRequest::ExecuteRawQueryRequest(const ExecuteRawQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteRawQueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.query_spec_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_query_spec()) {
    _this->_impl_.query_spec_ = new ::unhinged::persistence::QuerySpec(*from._impl_.query_spec_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::unhinged::persistence::ExecutionContext(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.ExecuteRawQueryRequest)
}

inline void ExecuteRawQueryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.query_spec_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExecuteRawQueryRequest::~ExecuteRawQueryRequest() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.ExecuteRawQueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteRawQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.query_spec_;
  if (this != internal_default_instance()) delete _impl_.context_;
}

void ExecuteRawQueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteRawQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.ExecuteRawQueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.query_spec_ != nullptr) {
    delete _impl_.query_spec_;
  }
  _impl_.query_spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteRawQueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.persistence.QuerySpec query_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.ExecutionContext context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteRawQueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.ExecuteRawQueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.persistence.QuerySpec query_spec = 1;
  if (this->_internal_has_query_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::query_spec(this),
        _Internal::query_spec(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.ExecutionContext context = 2;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.ExecuteRawQueryRequest)
  return target;
}

size_t ExecuteRawQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.ExecuteRawQueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unhinged.persistence.QuerySpec query_spec = 1;
  if (this->_internal_has_query_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_spec_);
  }

  // .unhinged.persistence.ExecutionContext context = 2;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteRawQueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteRawQueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteRawQueryRequest::GetClassData() const { return &_class_data_; }


void ExecuteRawQueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteRawQueryRequest*>(&to_msg);
  auto& from = static_cast<const ExecuteRawQueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.ExecuteRawQueryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_query_spec()) {
    _this->_internal_mutable_query_spec()->::unhinged::persistence::QuerySpec::MergeFrom(
        from._internal_query_spec());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::unhinged::persistence::ExecutionContext::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteRawQueryRequest::CopyFrom(const ExecuteRawQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.ExecuteRawQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteRawQueryRequest::IsInitialized() const {
  return true;
}

void ExecuteRawQueryRequest::InternalSwap(ExecuteRawQueryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteRawQueryRequest, _impl_.context_)
      + sizeof(ExecuteRawQueryRequest::_impl_.context_)
      - PROTOBUF_FIELD_OFFSET(ExecuteRawQueryRequest, _impl_.query_spec_)>(
          reinterpret_cast<char*>(&_impl_.query_spec_),
          reinterpret_cast<char*>(&other->_impl_.query_spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteRawQueryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[24]);
}

// ===================================================================

class ExecuteRawQueryResponse::_Internal {
 public:
};

ExecuteRawQueryResponse::ExecuteRawQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.ExecuteRawQueryResponse)
}
ExecuteRawQueryResponse::ExecuteRawQueryResponse(const ExecuteRawQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteRawQueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.execution_time_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.execution_time_ms_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.execution_time_ms_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.ExecuteRawQueryResponse)
}

inline void ExecuteRawQueryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.count_){0}
    , decltype(_impl_.execution_time_ms_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteRawQueryResponse::~ExecuteRawQueryResponse() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.ExecuteRawQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteRawQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
}

void ExecuteRawQueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteRawQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.ExecuteRawQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.execution_time_ms_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.execution_time_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteRawQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.persistence.Record results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.ExecuteRawQueryResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      // int64 execution_time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.execution_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteRawQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.ExecuteRawQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .unhinged.persistence.Record results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.ExecuteRawQueryResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  // int64 execution_time_ms = 5;
  if (this->_internal_execution_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_execution_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.ExecuteRawQueryResponse)
  return target;
}

size_t ExecuteRawQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.ExecuteRawQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.persistence.Record results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  // int64 execution_time_ms = 5;
  if (this->_internal_execution_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_execution_time_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteRawQueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteRawQueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteRawQueryResponse::GetClassData() const { return &_class_data_; }


void ExecuteRawQueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteRawQueryResponse*>(&to_msg);
  auto& from = static_cast<const ExecuteRawQueryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.ExecuteRawQueryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_execution_time_ms() != 0) {
    _this->_internal_set_execution_time_ms(from._internal_execution_time_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteRawQueryResponse::CopyFrom(const ExecuteRawQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.ExecuteRawQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteRawQueryResponse::IsInitialized() const {
  return true;
}

void ExecuteRawQueryResponse::InternalSwap(ExecuteRawQueryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteRawQueryResponse, _impl_.execution_time_ms_)
      + sizeof(ExecuteRawQueryResponse::_impl_.execution_time_ms_)
      - PROTOBUF_FIELD_OFFSET(ExecuteRawQueryResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteRawQueryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[25]);
}

// ===================================================================

class VectorSearchRequest::_Internal {
 public:
  static const ::unhinged::persistence::ExecutionContext& context(const VectorSearchRequest* msg);
};

const ::unhinged::persistence::ExecutionContext&
VectorSearchRequest::_Internal::context(const VectorSearchRequest* msg) {
  return *msg->_impl_.context_;
}
VectorSearchRequest::VectorSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.VectorSearchRequest)
}
VectorSearchRequest::VectorSearchRequest(const VectorSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorSearchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.query_vector_){from._impl_.query_vector_}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.distance_metric_){}
    , decltype(_impl_.context_){nullptr}
    , decltype(_impl_.threshold_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.distance_metric_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.distance_metric_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_distance_metric().empty()) {
    _this->_impl_.distance_metric_.Set(from._internal_distance_metric(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::unhinged::persistence::ExecutionContext(*from._impl_.context_);
  }
  ::memcpy(&_impl_.threshold_, &from._impl_.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.threshold_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.VectorSearchRequest)
}

inline void VectorSearchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.query_vector_){arena}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.distance_metric_){}
    , decltype(_impl_.context_){nullptr}
    , decltype(_impl_.threshold_){0}
    , decltype(_impl_.limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.distance_metric_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.distance_metric_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VectorSearchRequest::~VectorSearchRequest() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.VectorSearchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorSearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.query_vector_.~RepeatedField();
  _impl_.table_name_.Destroy();
  _impl_.distance_metric_.Destroy();
  if (this != internal_default_instance()) delete _impl_.context_;
}

void VectorSearchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.VectorSearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_vector_.Clear();
  _impl_.table_name_.ClearToEmpty();
  _impl_.distance_metric_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  ::memset(&_impl_.threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.threshold_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorSearchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.VectorSearchRequest.table_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated float query_vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_query_vector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_query_vector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string distance_metric = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_distance_metric();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.VectorSearchRequest.distance_metric"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.ExecutionContext context = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorSearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.VectorSearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.VectorSearchRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // repeated float query_vector = 2;
  if (this->_internal_query_vector_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_query_vector(), target);
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_limit(), target);
  }

  // double threshold = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_threshold = this->_internal_threshold();
  uint64_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_threshold(), target);
  }

  // string distance_metric = 5;
  if (!this->_internal_distance_metric().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_distance_metric().data(), static_cast<int>(this->_internal_distance_metric().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.VectorSearchRequest.distance_metric");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_distance_metric(), target);
  }

  // .unhinged.persistence.ExecutionContext context = 6;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.VectorSearchRequest)
  return target;
}

size_t VectorSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.VectorSearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float query_vector = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_query_vector_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // string distance_metric = 5;
  if (!this->_internal_distance_metric().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_distance_metric());
  }

  // .unhinged.persistence.ExecutionContext context = 6;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  // double threshold = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_threshold = this->_internal_threshold();
  uint64_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    total_size += 1 + 8;
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorSearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorSearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorSearchRequest::GetClassData() const { return &_class_data_; }


void VectorSearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorSearchRequest*>(&to_msg);
  auto& from = static_cast<const VectorSearchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.VectorSearchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.query_vector_.MergeFrom(from._impl_.query_vector_);
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  if (!from._internal_distance_metric().empty()) {
    _this->_internal_set_distance_metric(from._internal_distance_metric());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::unhinged::persistence::ExecutionContext::MergeFrom(
        from._internal_context());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_threshold = from._internal_threshold();
  uint64_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    _this->_internal_set_threshold(from._internal_threshold());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorSearchRequest::CopyFrom(const VectorSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.VectorSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorSearchRequest::IsInitialized() const {
  return true;
}

void VectorSearchRequest::InternalSwap(VectorSearchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.query_vector_.InternalSwap(&other->_impl_.query_vector_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.distance_metric_, lhs_arena,
      &other->_impl_.distance_metric_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorSearchRequest, _impl_.limit_)
      + sizeof(VectorSearchRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(VectorSearchRequest, _impl_.context_)>(
          reinterpret_cast<char*>(&_impl_.context_),
          reinterpret_cast<char*>(&other->_impl_.context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorSearchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[26]);
}

// ===================================================================

class VectorSearchResponse::_Internal {
 public:
};

VectorSearchResponse::VectorSearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.VectorSearchResponse)
}
VectorSearchResponse::VectorSearchResponse(const VectorSearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorSearchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.execution_time_ms_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.execution_time_ms_, &from._impl_.execution_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.execution_time_ms_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.VectorSearchResponse)
}

inline void VectorSearchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.execution_time_ms_){int64_t{0}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VectorSearchResponse::~VectorSearchResponse() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.VectorSearchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorSearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
}

void VectorSearchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.VectorSearchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.execution_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.execution_time_ms_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorSearchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.persistence.VectorSearchResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.VectorSearchResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      // int64 execution_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.execution_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorSearchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.VectorSearchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .unhinged.persistence.VectorSearchResult results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.VectorSearchResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // int64 execution_time_ms = 4;
  if (this->_internal_execution_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_execution_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.VectorSearchResponse)
  return target;
}

size_t VectorSearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.VectorSearchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.persistence.VectorSearchResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int64 execution_time_ms = 4;
  if (this->_internal_execution_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_execution_time_ms());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorSearchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorSearchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorSearchResponse::GetClassData() const { return &_class_data_; }


void VectorSearchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorSearchResponse*>(&to_msg);
  auto& from = static_cast<const VectorSearchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.VectorSearchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_execution_time_ms() != 0) {
    _this->_internal_set_execution_time_ms(from._internal_execution_time_ms());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorSearchResponse::CopyFrom(const VectorSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.VectorSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorSearchResponse::IsInitialized() const {
  return true;
}

void VectorSearchResponse::InternalSwap(VectorSearchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorSearchResponse, _impl_.success_)
      + sizeof(VectorSearchResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(VectorSearchResponse, _impl_.execution_time_ms_)>(
          reinterpret_cast<char*>(&_impl_.execution_time_ms_),
          reinterpret_cast<char*>(&other->_impl_.execution_time_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorSearchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[27]);
}

// ===================================================================

class VectorSearchResult::_Internal {
 public:
  static const ::unhinged::persistence::Record& record(const VectorSearchResult* msg);
};

const ::unhinged::persistence::Record&
VectorSearchResult::_Internal::record(const VectorSearchResult* msg) {
  return *msg->_impl_.record_;
}
VectorSearchResult::VectorSearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.VectorSearchResult)
}
VectorSearchResult::VectorSearchResult(const VectorSearchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorSearchResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.record_){nullptr}
    , decltype(_impl_.similarity_score_){}
    , decltype(_impl_.distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_record()) {
    _this->_impl_.record_ = new ::unhinged::persistence::Record(*from._impl_.record_);
  }
  ::memcpy(&_impl_.similarity_score_, &from._impl_.similarity_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.similarity_score_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.VectorSearchResult)
}

inline void VectorSearchResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.record_){nullptr}
    , decltype(_impl_.similarity_score_){0}
    , decltype(_impl_.distance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VectorSearchResult::~VectorSearchResult() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.VectorSearchResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorSearchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.record_;
}

void VectorSearchResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorSearchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.VectorSearchResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.record_ != nullptr) {
    delete _impl_.record_;
  }
  _impl_.record_ = nullptr;
  ::memset(&_impl_.similarity_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.distance_) -
      reinterpret_cast<char*>(&_impl_.similarity_score_)) + sizeof(_impl_.distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorSearchResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.persistence.Record record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double similarity_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.similarity_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorSearchResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.VectorSearchResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.persistence.Record record = 1;
  if (this->_internal_has_record()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::record(this),
        _Internal::record(this).GetCachedSize(), target, stream);
  }

  // double similarity_score = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_similarity_score = this->_internal_similarity_score();
  uint64_t raw_similarity_score;
  memcpy(&raw_similarity_score, &tmp_similarity_score, sizeof(tmp_similarity_score));
  if (raw_similarity_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_similarity_score(), target);
  }

  // double distance = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.VectorSearchResult)
  return target;
}

size_t VectorSearchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.VectorSearchResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unhinged.persistence.Record record = 1;
  if (this->_internal_has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.record_);
  }

  // double similarity_score = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_similarity_score = this->_internal_similarity_score();
  uint64_t raw_similarity_score;
  memcpy(&raw_similarity_score, &tmp_similarity_score, sizeof(tmp_similarity_score));
  if (raw_similarity_score != 0) {
    total_size += 1 + 8;
  }

  // double distance = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorSearchResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorSearchResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorSearchResult::GetClassData() const { return &_class_data_; }


void VectorSearchResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorSearchResult*>(&to_msg);
  auto& from = static_cast<const VectorSearchResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.VectorSearchResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_record()) {
    _this->_internal_mutable_record()->::unhinged::persistence::Record::MergeFrom(
        from._internal_record());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_similarity_score = from._internal_similarity_score();
  uint64_t raw_similarity_score;
  memcpy(&raw_similarity_score, &tmp_similarity_score, sizeof(tmp_similarity_score));
  if (raw_similarity_score != 0) {
    _this->_internal_set_similarity_score(from._internal_similarity_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = from._internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorSearchResult::CopyFrom(const VectorSearchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.VectorSearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorSearchResult::IsInitialized() const {
  return true;
}

void VectorSearchResult::InternalSwap(VectorSearchResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorSearchResult, _impl_.distance_)
      + sizeof(VectorSearchResult::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(VectorSearchResult, _impl_.record_)>(
          reinterpret_cast<char*>(&_impl_.record_),
          reinterpret_cast<char*>(&other->_impl_.record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorSearchResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[28]);
}

// ===================================================================

class GraphTraverseRequest::_Internal {
 public:
  static const ::unhinged::persistence::GraphTraversalSpec& traversal_spec(const GraphTraverseRequest* msg);
  static const ::unhinged::persistence::ExecutionContext& context(const GraphTraverseRequest* msg);
};

const ::unhinged::persistence::GraphTraversalSpec&
GraphTraverseRequest::_Internal::traversal_spec(const GraphTraverseRequest* msg) {
  return *msg->_impl_.traversal_spec_;
}
const ::unhinged::persistence::ExecutionContext&
GraphTraverseRequest::_Internal::context(const GraphTraverseRequest* msg) {
  return *msg->_impl_.context_;
}
GraphTraverseRequest::GraphTraverseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.GraphTraverseRequest)
}
GraphTraverseRequest::GraphTraverseRequest(const GraphTraverseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphTraverseRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){}
    , decltype(_impl_.start_node_){}
    , decltype(_impl_.traversal_spec_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.start_node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_node_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_node().empty()) {
    _this->_impl_.start_node_.Set(from._internal_start_node(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_traversal_spec()) {
    _this->_impl_.traversal_spec_ = new ::unhinged::persistence::GraphTraversalSpec(*from._impl_.traversal_spec_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::unhinged::persistence::ExecutionContext(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.GraphTraverseRequest)
}

inline void GraphTraverseRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){}
    , decltype(_impl_.start_node_){}
    , decltype(_impl_.traversal_spec_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.start_node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_node_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GraphTraverseRequest::~GraphTraverseRequest() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.GraphTraverseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphTraverseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_name_.Destroy();
  _impl_.start_node_.Destroy();
  if (this != internal_default_instance()) delete _impl_.traversal_spec_;
  if (this != internal_default_instance()) delete _impl_.context_;
}

void GraphTraverseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphTraverseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.GraphTraverseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_name_.ClearToEmpty();
  _impl_.start_node_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.traversal_spec_ != nullptr) {
    delete _impl_.traversal_spec_;
  }
  _impl_.traversal_spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphTraverseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GraphTraverseRequest.table_name"));
        } else
          goto handle_unusual;
        continue;
      // string start_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_start_node();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GraphTraverseRequest.start_node"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.GraphTraversalSpec traversal_spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_traversal_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.ExecutionContext context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphTraverseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.GraphTraverseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GraphTraverseRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // string start_node = 2;
  if (!this->_internal_start_node().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_node().data(), static_cast<int>(this->_internal_start_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GraphTraverseRequest.start_node");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_start_node(), target);
  }

  // .unhinged.persistence.GraphTraversalSpec traversal_spec = 3;
  if (this->_internal_has_traversal_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::traversal_spec(this),
        _Internal::traversal_spec(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.ExecutionContext context = 4;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.GraphTraverseRequest)
  return target;
}

size_t GraphTraverseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.GraphTraverseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // string start_node = 2;
  if (!this->_internal_start_node().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_node());
  }

  // .unhinged.persistence.GraphTraversalSpec traversal_spec = 3;
  if (this->_internal_has_traversal_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.traversal_spec_);
  }

  // .unhinged.persistence.ExecutionContext context = 4;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphTraverseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphTraverseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphTraverseRequest::GetClassData() const { return &_class_data_; }


void GraphTraverseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphTraverseRequest*>(&to_msg);
  auto& from = static_cast<const GraphTraverseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.GraphTraverseRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  if (!from._internal_start_node().empty()) {
    _this->_internal_set_start_node(from._internal_start_node());
  }
  if (from._internal_has_traversal_spec()) {
    _this->_internal_mutable_traversal_spec()->::unhinged::persistence::GraphTraversalSpec::MergeFrom(
        from._internal_traversal_spec());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::unhinged::persistence::ExecutionContext::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphTraverseRequest::CopyFrom(const GraphTraverseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.GraphTraverseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTraverseRequest::IsInitialized() const {
  return true;
}

void GraphTraverseRequest::InternalSwap(GraphTraverseRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_node_, lhs_arena,
      &other->_impl_.start_node_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphTraverseRequest, _impl_.context_)
      + sizeof(GraphTraverseRequest::_impl_.context_)
      - PROTOBUF_FIELD_OFFSET(GraphTraverseRequest, _impl_.traversal_spec_)>(
          reinterpret_cast<char*>(&_impl_.traversal_spec_),
          reinterpret_cast<char*>(&other->_impl_.traversal_spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTraverseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[29]);
}

// ===================================================================

class GraphTraverseResponse::_Internal {
 public:
};

GraphTraverseResponse::GraphTraverseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.GraphTraverseResponse)
}
GraphTraverseResponse::GraphTraverseResponse(const GraphTraverseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphTraverseResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.edges_){from._impl_.edges_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.execution_time_ms_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.execution_time_ms_, &from._impl_.execution_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.execution_time_ms_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.GraphTraverseResponse)
}

inline void GraphTraverseResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){arena}
    , decltype(_impl_.edges_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.execution_time_ms_){int64_t{0}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GraphTraverseResponse::~GraphTraverseResponse() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.GraphTraverseResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphTraverseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
  _impl_.edges_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
}

void GraphTraverseResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphTraverseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.GraphTraverseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _impl_.edges_.Clear();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.execution_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.execution_time_ms_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphTraverseResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.persistence.GraphNode nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.persistence.GraphEdge edges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GraphTraverseResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      // int64 execution_time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.execution_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphTraverseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.GraphTraverseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .unhinged.persistence.GraphNode nodes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .unhinged.persistence.GraphEdge edges = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GraphTraverseResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  // int64 execution_time_ms = 5;
  if (this->_internal_execution_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_execution_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.GraphTraverseResponse)
  return target;
}

size_t GraphTraverseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.GraphTraverseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.persistence.GraphNode nodes = 2;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .unhinged.persistence.GraphEdge edges = 3;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->_impl_.edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int64 execution_time_ms = 5;
  if (this->_internal_execution_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_execution_time_ms());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphTraverseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphTraverseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphTraverseResponse::GetClassData() const { return &_class_data_; }


void GraphTraverseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphTraverseResponse*>(&to_msg);
  auto& from = static_cast<const GraphTraverseResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.GraphTraverseResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_impl_.edges_.MergeFrom(from._impl_.edges_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_execution_time_ms() != 0) {
    _this->_internal_set_execution_time_ms(from._internal_execution_time_ms());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphTraverseResponse::CopyFrom(const GraphTraverseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.GraphTraverseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTraverseResponse::IsInitialized() const {
  return true;
}

void GraphTraverseResponse::InternalSwap(GraphTraverseResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  _impl_.edges_.InternalSwap(&other->_impl_.edges_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphTraverseResponse, _impl_.success_)
      + sizeof(GraphTraverseResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GraphTraverseResponse, _impl_.execution_time_ms_)>(
          reinterpret_cast<char*>(&_impl_.execution_time_ms_),
          reinterpret_cast<char*>(&other->_impl_.execution_time_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTraverseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[30]);
}

// ===================================================================

class GraphTraversalSpec::_Internal {
 public:
  static const ::unhinged::persistence::QueryCriteria& node_filter(const GraphTraversalSpec* msg);
  static const ::unhinged::persistence::QueryCriteria& edge_filter(const GraphTraversalSpec* msg);
};

const ::unhinged::persistence::QueryCriteria&
GraphTraversalSpec::_Internal::node_filter(const GraphTraversalSpec* msg) {
  return *msg->_impl_.node_filter_;
}
const ::unhinged::persistence::QueryCriteria&
GraphTraversalSpec::_Internal::edge_filter(const GraphTraversalSpec* msg) {
  return *msg->_impl_.edge_filter_;
}
GraphTraversalSpec::GraphTraversalSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.GraphTraversalSpec)
}
GraphTraversalSpec::GraphTraversalSpec(const GraphTraversalSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphTraversalSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relationship_types_){from._impl_.relationship_types_}
    , decltype(_impl_.node_filter_){nullptr}
    , decltype(_impl_.edge_filter_){nullptr}
    , decltype(_impl_.traversal_type_){}
    , decltype(_impl_.max_depth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node_filter()) {
    _this->_impl_.node_filter_ = new ::unhinged::persistence::QueryCriteria(*from._impl_.node_filter_);
  }
  if (from._internal_has_edge_filter()) {
    _this->_impl_.edge_filter_ = new ::unhinged::persistence::QueryCriteria(*from._impl_.edge_filter_);
  }
  ::memcpy(&_impl_.traversal_type_, &from._impl_.traversal_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_depth_) -
    reinterpret_cast<char*>(&_impl_.traversal_type_)) + sizeof(_impl_.max_depth_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.GraphTraversalSpec)
}

inline void GraphTraversalSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.relationship_types_){arena}
    , decltype(_impl_.node_filter_){nullptr}
    , decltype(_impl_.edge_filter_){nullptr}
    , decltype(_impl_.traversal_type_){0}
    , decltype(_impl_.max_depth_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GraphTraversalSpec::~GraphTraversalSpec() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.GraphTraversalSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphTraversalSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relationship_types_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.node_filter_;
  if (this != internal_default_instance()) delete _impl_.edge_filter_;
}

void GraphTraversalSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphTraversalSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.GraphTraversalSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relationship_types_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.node_filter_ != nullptr) {
    delete _impl_.node_filter_;
  }
  _impl_.node_filter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.edge_filter_ != nullptr) {
    delete _impl_.edge_filter_;
  }
  _impl_.edge_filter_ = nullptr;
  ::memset(&_impl_.traversal_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_depth_) -
      reinterpret_cast<char*>(&_impl_.traversal_type_)) + sizeof(_impl_.max_depth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphTraversalSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.persistence.GraphTraversalType traversal_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_traversal_type(static_cast<::unhinged::persistence::GraphTraversalType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 max_depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string relationship_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_relationship_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GraphTraversalSpec.relationship_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.QueryCriteria node_filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.QueryCriteria edge_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphTraversalSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.GraphTraversalSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.persistence.GraphTraversalType traversal_type = 1;
  if (this->_internal_traversal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_traversal_type(), target);
  }

  // int32 max_depth = 2;
  if (this->_internal_max_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_depth(), target);
  }

  // repeated string relationship_types = 3;
  for (int i = 0, n = this->_internal_relationship_types_size(); i < n; i++) {
    const auto& s = this->_internal_relationship_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GraphTraversalSpec.relationship_types");
    target = stream->WriteString(3, s, target);
  }

  // .unhinged.persistence.QueryCriteria node_filter = 4;
  if (this->_internal_has_node_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::node_filter(this),
        _Internal::node_filter(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.QueryCriteria edge_filter = 5;
  if (this->_internal_has_edge_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::edge_filter(this),
        _Internal::edge_filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.GraphTraversalSpec)
  return target;
}

size_t GraphTraversalSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.GraphTraversalSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string relationship_types = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.relationship_types_.size());
  for (int i = 0, n = _impl_.relationship_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.relationship_types_.Get(i));
  }

  // .unhinged.persistence.QueryCriteria node_filter = 4;
  if (this->_internal_has_node_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.node_filter_);
  }

  // .unhinged.persistence.QueryCriteria edge_filter = 5;
  if (this->_internal_has_edge_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.edge_filter_);
  }

  // .unhinged.persistence.GraphTraversalType traversal_type = 1;
  if (this->_internal_traversal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_traversal_type());
  }

  // int32 max_depth = 2;
  if (this->_internal_max_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphTraversalSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphTraversalSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphTraversalSpec::GetClassData() const { return &_class_data_; }


void GraphTraversalSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphTraversalSpec*>(&to_msg);
  auto& from = static_cast<const GraphTraversalSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.GraphTraversalSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.relationship_types_.MergeFrom(from._impl_.relationship_types_);
  if (from._internal_has_node_filter()) {
    _this->_internal_mutable_node_filter()->::unhinged::persistence::QueryCriteria::MergeFrom(
        from._internal_node_filter());
  }
  if (from._internal_has_edge_filter()) {
    _this->_internal_mutable_edge_filter()->::unhinged::persistence::QueryCriteria::MergeFrom(
        from._internal_edge_filter());
  }
  if (from._internal_traversal_type() != 0) {
    _this->_internal_set_traversal_type(from._internal_traversal_type());
  }
  if (from._internal_max_depth() != 0) {
    _this->_internal_set_max_depth(from._internal_max_depth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphTraversalSpec::CopyFrom(const GraphTraversalSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.GraphTraversalSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTraversalSpec::IsInitialized() const {
  return true;
}

void GraphTraversalSpec::InternalSwap(GraphTraversalSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.relationship_types_.InternalSwap(&other->_impl_.relationship_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphTraversalSpec, _impl_.max_depth_)
      + sizeof(GraphTraversalSpec::_impl_.max_depth_)
      - PROTOBUF_FIELD_OFFSET(GraphTraversalSpec, _impl_.node_filter_)>(
          reinterpret_cast<char*>(&_impl_.node_filter_),
          reinterpret_cast<char*>(&other->_impl_.node_filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTraversalSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[31]);
}

// ===================================================================

class GraphNode::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& properties(const GraphNode* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GraphNode::_Internal::properties(const GraphNode* msg) {
  return *msg->_impl_.properties_;
}
void GraphNode::clear_properties() {
  if (GetArenaForAllocation() == nullptr && _impl_.properties_ != nullptr) {
    delete _impl_.properties_;
  }
  _impl_.properties_ = nullptr;
}
GraphNode::GraphNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.GraphNode)
}
GraphNode::GraphNode(const GraphNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.properties_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_properties()) {
    _this->_impl_.properties_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.properties_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.GraphNode)
}

inline void GraphNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.properties_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GraphNode::~GraphNode() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.GraphNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.label_.Destroy();
  if (this != internal_default_instance()) delete _impl_.properties_;
}

void GraphNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphNode::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.GraphNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.properties_ != nullptr) {
    delete _impl_.properties_;
  }
  _impl_.properties_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GraphNode.id"));
        } else
          goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GraphNode.label"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.GraphNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GraphNode.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GraphNode.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // .google.protobuf.Struct properties = 3;
  if (this->_internal_has_properties()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::properties(this),
        _Internal::properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.GraphNode)
  return target;
}

size_t GraphNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.GraphNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // .google.protobuf.Struct properties = 3;
  if (this->_internal_has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.properties_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphNode::GetClassData() const { return &_class_data_; }


void GraphNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphNode*>(&to_msg);
  auto& from = static_cast<const GraphNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.GraphNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (from._internal_has_properties()) {
    _this->_internal_mutable_properties()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_properties());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphNode::CopyFrom(const GraphNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.GraphNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphNode::IsInitialized() const {
  return true;
}

void GraphNode::InternalSwap(GraphNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  swap(_impl_.properties_, other->_impl_.properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[32]);
}

// ===================================================================

class GraphEdge::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& properties(const GraphEdge* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GraphEdge::_Internal::properties(const GraphEdge* msg) {
  return *msg->_impl_.properties_;
}
void GraphEdge::clear_properties() {
  if (GetArenaForAllocation() == nullptr && _impl_.properties_ != nullptr) {
    delete _impl_.properties_;
  }
  _impl_.properties_ = nullptr;
}
GraphEdge::GraphEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.GraphEdge)
}
GraphEdge::GraphEdge(const GraphEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphEdge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.source_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.relationship_type_){}
    , decltype(_impl_.properties_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_id().empty()) {
    _this->_impl_.source_id_.Set(from._internal_source_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_id().empty()) {
    _this->_impl_.target_id_.Set(from._internal_target_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.relationship_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relationship_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relationship_type().empty()) {
    _this->_impl_.relationship_type_.Set(from._internal_relationship_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_properties()) {
    _this->_impl_.properties_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.properties_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.GraphEdge)
}

inline void GraphEdge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.source_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.relationship_type_){}
    , decltype(_impl_.properties_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relationship_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relationship_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GraphEdge::~GraphEdge() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.GraphEdge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.source_id_.Destroy();
  _impl_.target_id_.Destroy();
  _impl_.relationship_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.properties_;
}

void GraphEdge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.GraphEdge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.source_id_.ClearToEmpty();
  _impl_.target_id_.ClearToEmpty();
  _impl_.relationship_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.properties_ != nullptr) {
    delete _impl_.properties_;
  }
  _impl_.properties_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphEdge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GraphEdge.id"));
        } else
          goto handle_unusual;
        continue;
      // string source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GraphEdge.source_id"));
        } else
          goto handle_unusual;
        continue;
      // string target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GraphEdge.target_id"));
        } else
          goto handle_unusual;
        continue;
      // string relationship_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_relationship_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GraphEdge.relationship_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphEdge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.GraphEdge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GraphEdge.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string source_id = 2;
  if (!this->_internal_source_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_id().data(), static_cast<int>(this->_internal_source_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GraphEdge.source_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_id(), target);
  }

  // string target_id = 3;
  if (!this->_internal_target_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_id().data(), static_cast<int>(this->_internal_target_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GraphEdge.target_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_id(), target);
  }

  // string relationship_type = 4;
  if (!this->_internal_relationship_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_relationship_type().data(), static_cast<int>(this->_internal_relationship_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GraphEdge.relationship_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_relationship_type(), target);
  }

  // .google.protobuf.Struct properties = 5;
  if (this->_internal_has_properties()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::properties(this),
        _Internal::properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.GraphEdge)
  return target;
}

size_t GraphEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.GraphEdge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string source_id = 2;
  if (!this->_internal_source_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_id());
  }

  // string target_id = 3;
  if (!this->_internal_target_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_id());
  }

  // string relationship_type = 4;
  if (!this->_internal_relationship_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_relationship_type());
  }

  // .google.protobuf.Struct properties = 5;
  if (this->_internal_has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.properties_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphEdge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphEdge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphEdge::GetClassData() const { return &_class_data_; }


void GraphEdge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphEdge*>(&to_msg);
  auto& from = static_cast<const GraphEdge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.GraphEdge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_source_id().empty()) {
    _this->_internal_set_source_id(from._internal_source_id());
  }
  if (!from._internal_target_id().empty()) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (!from._internal_relationship_type().empty()) {
    _this->_internal_set_relationship_type(from._internal_relationship_type());
  }
  if (from._internal_has_properties()) {
    _this->_internal_mutable_properties()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_properties());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphEdge::CopyFrom(const GraphEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.GraphEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphEdge::IsInitialized() const {
  return true;
}

void GraphEdge::InternalSwap(GraphEdge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_id_, lhs_arena,
      &other->_impl_.source_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_id_, lhs_arena,
      &other->_impl_.target_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.relationship_type_, lhs_arena,
      &other->_impl_.relationship_type_, rhs_arena
  );
  swap(_impl_.properties_, other->_impl_.properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphEdge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[33]);
}

// ===================================================================

class ExecuteOperationRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& parameters(const ExecuteOperationRequest* msg);
  static const ::unhinged::persistence::ExecutionContext& context(const ExecuteOperationRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
ExecuteOperationRequest::_Internal::parameters(const ExecuteOperationRequest* msg) {
  return *msg->_impl_.parameters_;
}
const ::unhinged::persistence::ExecutionContext&
ExecuteOperationRequest::_Internal::context(const ExecuteOperationRequest* msg) {
  return *msg->_impl_.context_;
}
void ExecuteOperationRequest::clear_parameters() {
  if (GetArenaForAllocation() == nullptr && _impl_.parameters_ != nullptr) {
    delete _impl_.parameters_;
  }
  _impl_.parameters_ = nullptr;
}
ExecuteOperationRequest::ExecuteOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.ExecuteOperationRequest)
}
ExecuteOperationRequest::ExecuteOperationRequest(const ExecuteOperationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteOperationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_name_){}
    , decltype(_impl_.parameters_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation_name().empty()) {
    _this->_impl_.operation_name_.Set(from._internal_operation_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parameters()) {
    _this->_impl_.parameters_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.parameters_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::unhinged::persistence::ExecutionContext(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.ExecuteOperationRequest)
}

inline void ExecuteOperationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_name_){}
    , decltype(_impl_.parameters_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.operation_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteOperationRequest::~ExecuteOperationRequest() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.ExecuteOperationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteOperationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parameters_;
  if (this != internal_default_instance()) delete _impl_.context_;
}

void ExecuteOperationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.ExecuteOperationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.parameters_ != nullptr) {
    delete _impl_.parameters_;
  }
  _impl_.parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteOperationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string operation_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_operation_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.ExecuteOperationRequest.operation_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.persistence.ExecutionContext context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteOperationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.ExecuteOperationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation_name = 1;
  if (!this->_internal_operation_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_name().data(), static_cast<int>(this->_internal_operation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.ExecuteOperationRequest.operation_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_operation_name(), target);
  }

  // .google.protobuf.Struct parameters = 2;
  if (this->_internal_has_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::parameters(this),
        _Internal::parameters(this).GetCachedSize(), target, stream);
  }

  // .unhinged.persistence.ExecutionContext context = 3;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.ExecuteOperationRequest)
  return target;
}

size_t ExecuteOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.ExecuteOperationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation_name = 1;
  if (!this->_internal_operation_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_name());
  }

  // .google.protobuf.Struct parameters = 2;
  if (this->_internal_has_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parameters_);
  }

  // .unhinged.persistence.ExecutionContext context = 3;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteOperationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteOperationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteOperationRequest::GetClassData() const { return &_class_data_; }


void ExecuteOperationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteOperationRequest*>(&to_msg);
  auto& from = static_cast<const ExecuteOperationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.ExecuteOperationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation_name().empty()) {
    _this->_internal_set_operation_name(from._internal_operation_name());
  }
  if (from._internal_has_parameters()) {
    _this->_internal_mutable_parameters()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_parameters());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::unhinged::persistence::ExecutionContext::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteOperationRequest::CopyFrom(const ExecuteOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.ExecuteOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteOperationRequest::IsInitialized() const {
  return true;
}

void ExecuteOperationRequest::InternalSwap(ExecuteOperationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operation_name_, lhs_arena,
      &other->_impl_.operation_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteOperationRequest, _impl_.context_)
      + sizeof(ExecuteOperationRequest::_impl_.context_)
      - PROTOBUF_FIELD_OFFSET(ExecuteOperationRequest, _impl_.parameters_)>(
          reinterpret_cast<char*>(&_impl_.parameters_),
          reinterpret_cast<char*>(&other->_impl_.parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteOperationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[34]);
}

// ===================================================================

class ExecuteOperationResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& result(const ExecuteOperationResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
ExecuteOperationResponse::_Internal::result(const ExecuteOperationResponse* msg) {
  return *msg->_impl_.result_;
}
void ExecuteOperationResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
ExecuteOperationResponse::ExecuteOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.ExecuteOperationResponse)
}
ExecuteOperationResponse::ExecuteOperationResponse(const ExecuteOperationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteOperationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.affected_tables_){from._impl_.affected_tables_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.execution_time_ms_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.result_);
  }
  ::memcpy(&_impl_.execution_time_ms_, &from._impl_.execution_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.execution_time_ms_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.ExecuteOperationResponse)
}

inline void ExecuteOperationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.affected_tables_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.execution_time_ms_){int64_t{0}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteOperationResponse::~ExecuteOperationResponse() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.ExecuteOperationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteOperationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.affected_tables_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_;
}

void ExecuteOperationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteOperationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.ExecuteOperationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.affected_tables_.Clear();
  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  ::memset(&_impl_.execution_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.execution_time_ms_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteOperationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.ExecuteOperationResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      // int64 execution_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.execution_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string affected_tables = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_affected_tables();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.ExecuteOperationResponse.affected_tables"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteOperationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.ExecuteOperationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .google.protobuf.Any result = 2;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.ExecuteOperationResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // int64 execution_time_ms = 4;
  if (this->_internal_execution_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_execution_time_ms(), target);
  }

  // repeated string affected_tables = 5;
  for (int i = 0, n = this->_internal_affected_tables_size(); i < n; i++) {
    const auto& s = this->_internal_affected_tables(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.ExecuteOperationResponse.affected_tables");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.ExecuteOperationResponse)
  return target;
}

size_t ExecuteOperationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.ExecuteOperationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string affected_tables = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.affected_tables_.size());
  for (int i = 0, n = _impl_.affected_tables_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.affected_tables_.Get(i));
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .google.protobuf.Any result = 2;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  // int64 execution_time_ms = 4;
  if (this->_internal_execution_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_execution_time_ms());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteOperationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteOperationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteOperationResponse::GetClassData() const { return &_class_data_; }


void ExecuteOperationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteOperationResponse*>(&to_msg);
  auto& from = static_cast<const ExecuteOperationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.ExecuteOperationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.affected_tables_.MergeFrom(from._impl_.affected_tables_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_result());
  }
  if (from._internal_execution_time_ms() != 0) {
    _this->_internal_set_execution_time_ms(from._internal_execution_time_ms());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteOperationResponse::CopyFrom(const ExecuteOperationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.ExecuteOperationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteOperationResponse::IsInitialized() const {
  return true;
}

void ExecuteOperationResponse::InternalSwap(ExecuteOperationResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.affected_tables_.InternalSwap(&other->_impl_.affected_tables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteOperationResponse, _impl_.success_)
      + sizeof(ExecuteOperationResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(ExecuteOperationResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteOperationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[35]);
}

// ===================================================================

class HealthCheckRequest::_Internal {
 public:
};

HealthCheckRequest::HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.HealthCheckRequest)
}
HealthCheckRequest::HealthCheckRequest(const HealthCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthCheckRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.include_details_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.include_details_ = from._impl_.include_details_;
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.HealthCheckRequest)
}

inline void HealthCheckRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.include_details_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HealthCheckRequest::~HealthCheckRequest() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.HealthCheckRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthCheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HealthCheckRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.HealthCheckRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.include_details_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool include_details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.include_details_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheckRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.HealthCheckRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_details = 1;
  if (this->_internal_include_details() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_include_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.HealthCheckRequest)
  return target;
}

size_t HealthCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.HealthCheckRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool include_details = 1;
  if (this->_internal_include_details() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthCheckRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckRequest::GetClassData() const { return &_class_data_; }


void HealthCheckRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthCheckRequest*>(&to_msg);
  auto& from = static_cast<const HealthCheckRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.HealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_include_details() != 0) {
    _this->_internal_set_include_details(from._internal_include_details());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckRequest::CopyFrom(const HealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.HealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckRequest::IsInitialized() const {
  return true;
}

void HealthCheckRequest::InternalSwap(HealthCheckRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.include_details_, other->_impl_.include_details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[36]);
}

// ===================================================================

class HealthCheckResponse::_Internal {
 public:
};

HealthCheckResponse::HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.HealthCheckResponse)
}
HealthCheckResponse::HealthCheckResponse(const HealthCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthCheckResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.technology_health_){from._impl_.technology_health_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.uptime_seconds_){}
    , decltype(_impl_.healthy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uptime_seconds_, &from._impl_.uptime_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.healthy_) -
    reinterpret_cast<char*>(&_impl_.uptime_seconds_)) + sizeof(_impl_.healthy_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.HealthCheckResponse)
}

inline void HealthCheckResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.technology_health_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.uptime_seconds_){int64_t{0}}
    , decltype(_impl_.healthy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthCheckResponse::~HealthCheckResponse() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.HealthCheckResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.technology_health_.~RepeatedPtrField();
  _impl_.version_.Destroy();
}

void HealthCheckResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.technology_health_.Clear();
  _impl_.version_.ClearToEmpty();
  ::memset(&_impl_.uptime_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.healthy_) -
      reinterpret_cast<char*>(&_impl_.uptime_seconds_)) + sizeof(_impl_.healthy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool healthy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.healthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.HealthCheckResponse.version"));
        } else
          goto handle_unusual;
        continue;
      // int64 uptime_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.uptime_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.persistence.TechnologyHealth technology_health = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_technology_health(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheckResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool healthy = 1;
  if (this->_internal_healthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_healthy(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.HealthCheckResponse.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // int64 uptime_seconds = 3;
  if (this->_internal_uptime_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_uptime_seconds(), target);
  }

  // repeated .unhinged.persistence.TechnologyHealth technology_health = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_technology_health_size()); i < n; i++) {
    const auto& repfield = this->_internal_technology_health(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.HealthCheckResponse)
  return target;
}

size_t HealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.HealthCheckResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.persistence.TechnologyHealth technology_health = 4;
  total_size += 1UL * this->_internal_technology_health_size();
  for (const auto& msg : this->_impl_.technology_health_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // int64 uptime_seconds = 3;
  if (this->_internal_uptime_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uptime_seconds());
  }

  // bool healthy = 1;
  if (this->_internal_healthy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthCheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckResponse::GetClassData() const { return &_class_data_; }


void HealthCheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthCheckResponse*>(&to_msg);
  auto& from = static_cast<const HealthCheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.technology_health_.MergeFrom(from._impl_.technology_health_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_uptime_seconds() != 0) {
    _this->_internal_set_uptime_seconds(from._internal_uptime_seconds());
  }
  if (from._internal_healthy() != 0) {
    _this->_internal_set_healthy(from._internal_healthy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckResponse::CopyFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckResponse::IsInitialized() const {
  return true;
}

void HealthCheckResponse::InternalSwap(HealthCheckResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.technology_health_.InternalSwap(&other->_impl_.technology_health_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthCheckResponse, _impl_.healthy_)
      + sizeof(HealthCheckResponse::_impl_.healthy_)
      - PROTOBUF_FIELD_OFFSET(HealthCheckResponse, _impl_.uptime_seconds_)>(
          reinterpret_cast<char*>(&_impl_.uptime_seconds_),
          reinterpret_cast<char*>(&other->_impl_.uptime_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[37]);
}

// ===================================================================

class TechnologyHealth::_Internal {
 public:
};

TechnologyHealth::TechnologyHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.TechnologyHealth)
}
TechnologyHealth::TechnologyHealth(const TechnologyHealth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TechnologyHealth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.technology_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.response_time_ms_){}
    , decltype(_impl_.healthy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.technology_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.technology_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_technology().empty()) {
    _this->_impl_.technology_.Set(from._internal_technology(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.response_time_ms_, &from._impl_.response_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.healthy_) -
    reinterpret_cast<char*>(&_impl_.response_time_ms_)) + sizeof(_impl_.healthy_));
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.TechnologyHealth)
}

inline void TechnologyHealth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.technology_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.response_time_ms_){int64_t{0}}
    , decltype(_impl_.healthy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.technology_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.technology_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TechnologyHealth::~TechnologyHealth() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.TechnologyHealth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TechnologyHealth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.technology_.Destroy();
  _impl_.status_.Destroy();
  _impl_.error_message_.Destroy();
}

void TechnologyHealth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TechnologyHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.TechnologyHealth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.technology_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.response_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.healthy_) -
      reinterpret_cast<char*>(&_impl_.response_time_ms_)) + sizeof(_impl_.healthy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TechnologyHealth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string technology = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_technology();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.TechnologyHealth.technology"));
        } else
          goto handle_unusual;
        continue;
      // bool healthy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.healthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.TechnologyHealth.status"));
        } else
          goto handle_unusual;
        continue;
      // int64 response_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.response_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.TechnologyHealth.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TechnologyHealth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.TechnologyHealth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string technology = 1;
  if (!this->_internal_technology().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_technology().data(), static_cast<int>(this->_internal_technology().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.TechnologyHealth.technology");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_technology(), target);
  }

  // bool healthy = 2;
  if (this->_internal_healthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_healthy(), target);
  }

  // string status = 3;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.TechnologyHealth.status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status(), target);
  }

  // int64 response_time_ms = 4;
  if (this->_internal_response_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_response_time_ms(), target);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.TechnologyHealth.error_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.TechnologyHealth)
  return target;
}

size_t TechnologyHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.TechnologyHealth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string technology = 1;
  if (!this->_internal_technology().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_technology());
  }

  // string status = 3;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int64 response_time_ms = 4;
  if (this->_internal_response_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_response_time_ms());
  }

  // bool healthy = 2;
  if (this->_internal_healthy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TechnologyHealth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TechnologyHealth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TechnologyHealth::GetClassData() const { return &_class_data_; }


void TechnologyHealth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TechnologyHealth*>(&to_msg);
  auto& from = static_cast<const TechnologyHealth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.TechnologyHealth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_technology().empty()) {
    _this->_internal_set_technology(from._internal_technology());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_response_time_ms() != 0) {
    _this->_internal_set_response_time_ms(from._internal_response_time_ms());
  }
  if (from._internal_healthy() != 0) {
    _this->_internal_set_healthy(from._internal_healthy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TechnologyHealth::CopyFrom(const TechnologyHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.TechnologyHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechnologyHealth::IsInitialized() const {
  return true;
}

void TechnologyHealth::InternalSwap(TechnologyHealth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.technology_, lhs_arena,
      &other->_impl_.technology_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TechnologyHealth, _impl_.healthy_)
      + sizeof(TechnologyHealth::_impl_.healthy_)
      - PROTOBUF_FIELD_OFFSET(TechnologyHealth, _impl_.response_time_ms_)>(
          reinterpret_cast<char*>(&_impl_.response_time_ms_),
          reinterpret_cast<char*>(&other->_impl_.response_time_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TechnologyHealth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[38]);
}

// ===================================================================

class GetPlatformInfoRequest::_Internal {
 public:
};

GetPlatformInfoRequest::GetPlatformInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.GetPlatformInfoRequest)
}
GetPlatformInfoRequest::GetPlatformInfoRequest(const GetPlatformInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetPlatformInfoRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.GetPlatformInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPlatformInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPlatformInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetPlatformInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[39]);
}

// ===================================================================

class GetPlatformInfoResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& configuration(const GetPlatformInfoResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetPlatformInfoResponse::_Internal::configuration(const GetPlatformInfoResponse* msg) {
  return *msg->_impl_.configuration_;
}
void GetPlatformInfoResponse::clear_configuration() {
  if (GetArenaForAllocation() == nullptr && _impl_.configuration_ != nullptr) {
    delete _impl_.configuration_;
  }
  _impl_.configuration_ = nullptr;
}
GetPlatformInfoResponse::GetPlatformInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.GetPlatformInfoResponse)
}
GetPlatformInfoResponse::GetPlatformInfoResponse(const GetPlatformInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPlatformInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.supported_technologies_){from._impl_.supported_technologies_}
    , decltype(_impl_.supported_features_){from._impl_.supported_features_}
    , decltype(_impl_.platform_name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.configuration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.platform_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platform_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_platform_name().empty()) {
    _this->_impl_.platform_name_.Set(from._internal_platform_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_configuration()) {
    _this->_impl_.configuration_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.configuration_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.GetPlatformInfoResponse)
}

inline void GetPlatformInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.supported_technologies_){arena}
    , decltype(_impl_.supported_features_){arena}
    , decltype(_impl_.platform_name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.configuration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.platform_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platform_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPlatformInfoResponse::~GetPlatformInfoResponse() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.GetPlatformInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPlatformInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.supported_technologies_.~RepeatedPtrField();
  _impl_.supported_features_.~RepeatedPtrField();
  _impl_.platform_name_.Destroy();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.configuration_;
}

void GetPlatformInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPlatformInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.GetPlatformInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.supported_technologies_.Clear();
  _impl_.supported_features_.Clear();
  _impl_.platform_name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.configuration_ != nullptr) {
    delete _impl_.configuration_;
  }
  _impl_.configuration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlatformInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string platform_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_platform_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GetPlatformInfoResponse.platform_name"));
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GetPlatformInfoResponse.version"));
        } else
          goto handle_unusual;
        continue;
      // repeated string supported_technologies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_supported_technologies();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GetPlatformInfoResponse.supported_technologies"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string supported_features = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_supported_features();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GetPlatformInfoResponse.supported_features"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct configuration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPlatformInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.GetPlatformInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string platform_name = 1;
  if (!this->_internal_platform_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform_name().data(), static_cast<int>(this->_internal_platform_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GetPlatformInfoResponse.platform_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_platform_name(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GetPlatformInfoResponse.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // repeated string supported_technologies = 3;
  for (int i = 0, n = this->_internal_supported_technologies_size(); i < n; i++) {
    const auto& s = this->_internal_supported_technologies(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GetPlatformInfoResponse.supported_technologies");
    target = stream->WriteString(3, s, target);
  }

  // repeated string supported_features = 4;
  for (int i = 0, n = this->_internal_supported_features_size(); i < n; i++) {
    const auto& s = this->_internal_supported_features(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GetPlatformInfoResponse.supported_features");
    target = stream->WriteString(4, s, target);
  }

  // .google.protobuf.Struct configuration = 5;
  if (this->_internal_has_configuration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::configuration(this),
        _Internal::configuration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.GetPlatformInfoResponse)
  return target;
}

size_t GetPlatformInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.GetPlatformInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string supported_technologies = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.supported_technologies_.size());
  for (int i = 0, n = _impl_.supported_technologies_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.supported_technologies_.Get(i));
  }

  // repeated string supported_features = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.supported_features_.size());
  for (int i = 0, n = _impl_.supported_features_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.supported_features_.Get(i));
  }

  // string platform_name = 1;
  if (!this->_internal_platform_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform_name());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .google.protobuf.Struct configuration = 5;
  if (this->_internal_has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.configuration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPlatformInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPlatformInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPlatformInfoResponse::GetClassData() const { return &_class_data_; }


void GetPlatformInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPlatformInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetPlatformInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.GetPlatformInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.supported_technologies_.MergeFrom(from._impl_.supported_technologies_);
  _this->_impl_.supported_features_.MergeFrom(from._impl_.supported_features_);
  if (!from._internal_platform_name().empty()) {
    _this->_internal_set_platform_name(from._internal_platform_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_configuration()) {
    _this->_internal_mutable_configuration()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_configuration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPlatformInfoResponse::CopyFrom(const GetPlatformInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.GetPlatformInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlatformInfoResponse::IsInitialized() const {
  return true;
}

void GetPlatformInfoResponse::InternalSwap(GetPlatformInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.supported_technologies_.InternalSwap(&other->_impl_.supported_technologies_);
  _impl_.supported_features_.InternalSwap(&other->_impl_.supported_features_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.platform_name_, lhs_arena,
      &other->_impl_.platform_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.configuration_, other->_impl_.configuration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlatformInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[40]);
}

// ===================================================================

class GetMetricsRequest::_Internal {
 public:
};

GetMetricsRequest::GetMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.GetMetricsRequest)
}
GetMetricsRequest::GetMetricsRequest(const GetMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.format_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    _this->_impl_.format_.Set(from._internal_format(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.GetMetricsRequest)
}

inline void GetMetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.format_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMetricsRequest::~GetMetricsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.GetMetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.format_.Destroy();
}

void GetMetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.GetMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.format_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GetMetricsRequest.format"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.GetMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string format = 1;
  if (!this->_internal_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GetMetricsRequest.format");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.GetMetricsRequest)
  return target;
}

size_t GetMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.GetMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string format = 1;
  if (!this->_internal_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMetricsRequest::GetClassData() const { return &_class_data_; }


void GetMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMetricsRequest*>(&to_msg);
  auto& from = static_cast<const GetMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.GetMetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_format().empty()) {
    _this->_internal_set_format(from._internal_format());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMetricsRequest::CopyFrom(const GetMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.GetMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetricsRequest::IsInitialized() const {
  return true;
}

void GetMetricsRequest::InternalSwap(GetMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_, lhs_arena,
      &other->_impl_.format_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[41]);
}

// ===================================================================

class GetMetricsResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& collected_at(const GetMetricsResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetMetricsResponse::_Internal::collected_at(const GetMetricsResponse* msg) {
  return *msg->_impl_.collected_at_;
}
void GetMetricsResponse::clear_collected_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.collected_at_ != nullptr) {
    delete _impl_.collected_at_;
  }
  _impl_.collected_at_ = nullptr;
}
GetMetricsResponse::GetMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.persistence.GetMetricsResponse)
}
GetMetricsResponse::GetMetricsResponse(const GetMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMetricsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.format_){}
    , decltype(_impl_.metrics_data_){}
    , decltype(_impl_.collected_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    _this->_impl_.format_.Set(from._internal_format(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metrics_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metrics_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metrics_data().empty()) {
    _this->_impl_.metrics_data_.Set(from._internal_metrics_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_collected_at()) {
    _this->_impl_.collected_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.collected_at_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.persistence.GetMetricsResponse)
}

inline void GetMetricsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.format_){}
    , decltype(_impl_.metrics_data_){}
    , decltype(_impl_.collected_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metrics_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metrics_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMetricsResponse::~GetMetricsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.persistence.GetMetricsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.format_.Destroy();
  _impl_.metrics_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.collected_at_;
}

void GetMetricsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.persistence.GetMetricsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.format_.ClearToEmpty();
  _impl_.metrics_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.collected_at_ != nullptr) {
    delete _impl_.collected_at_;
  }
  _impl_.collected_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMetricsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GetMetricsResponse.format"));
        } else
          goto handle_unusual;
        continue;
      // string metrics_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_metrics_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.persistence.GetMetricsResponse.metrics_data"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp collected_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_collected_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMetricsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.persistence.GetMetricsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string format = 1;
  if (!this->_internal_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GetMetricsResponse.format");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_format(), target);
  }

  // string metrics_data = 2;
  if (!this->_internal_metrics_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metrics_data().data(), static_cast<int>(this->_internal_metrics_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.persistence.GetMetricsResponse.metrics_data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_metrics_data(), target);
  }

  // .google.protobuf.Timestamp collected_at = 3;
  if (this->_internal_has_collected_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::collected_at(this),
        _Internal::collected_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.persistence.GetMetricsResponse)
  return target;
}

size_t GetMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.persistence.GetMetricsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string format = 1;
  if (!this->_internal_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // string metrics_data = 2;
  if (!this->_internal_metrics_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metrics_data());
  }

  // .google.protobuf.Timestamp collected_at = 3;
  if (this->_internal_has_collected_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collected_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMetricsResponse::GetClassData() const { return &_class_data_; }


void GetMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMetricsResponse*>(&to_msg);
  auto& from = static_cast<const GetMetricsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.persistence.GetMetricsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_format().empty()) {
    _this->_internal_set_format(from._internal_format());
  }
  if (!from._internal_metrics_data().empty()) {
    _this->_internal_set_metrics_data(from._internal_metrics_data());
  }
  if (from._internal_has_collected_at()) {
    _this->_internal_mutable_collected_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_collected_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMetricsResponse::CopyFrom(const GetMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.persistence.GetMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetricsResponse::IsInitialized() const {
  return true;
}

void GetMetricsResponse::InternalSwap(GetMetricsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_, lhs_arena,
      &other->_impl_.format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metrics_data_, lhs_arena,
      &other->_impl_.metrics_data_, rhs_arena
  );
  swap(_impl_.collected_at_, other->_impl_.collected_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMetricsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_persistence_5fplatform_2eproto_getter, &descriptor_table_persistence_5fplatform_2eproto_once,
      file_level_metadata_persistence_5fplatform_2eproto[42]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace persistence
}  // namespace unhinged
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::unhinged::persistence::ExecutionContext*
Arena::CreateMaybeMessage< ::unhinged::persistence::ExecutionContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::ExecutionContext >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::Record*
Arena::CreateMaybeMessage< ::unhinged::persistence::Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::Record >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::QueryCriteria*
Arena::CreateMaybeMessage< ::unhinged::persistence::QueryCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::QueryCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::EqualsFilter*
Arena::CreateMaybeMessage< ::unhinged::persistence::EqualsFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::EqualsFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::GreaterThanFilter*
Arena::CreateMaybeMessage< ::unhinged::persistence::GreaterThanFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::GreaterThanFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::LessThanFilter*
Arena::CreateMaybeMessage< ::unhinged::persistence::LessThanFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::LessThanFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::InFilter*
Arena::CreateMaybeMessage< ::unhinged::persistence::InFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::InFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::RangeFilter*
Arena::CreateMaybeMessage< ::unhinged::persistence::RangeFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::RangeFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::TextSearchFilter*
Arena::CreateMaybeMessage< ::unhinged::persistence::TextSearchFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::TextSearchFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::VectorSearchFilter*
Arena::CreateMaybeMessage< ::unhinged::persistence::VectorSearchFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::VectorSearchFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::AndFilter*
Arena::CreateMaybeMessage< ::unhinged::persistence::AndFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::AndFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::OrFilter*
Arena::CreateMaybeMessage< ::unhinged::persistence::OrFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::OrFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::OrderBy*
Arena::CreateMaybeMessage< ::unhinged::persistence::OrderBy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::OrderBy >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::QuerySpec*
Arena::CreateMaybeMessage< ::unhinged::persistence::QuerySpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::QuerySpec >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::InsertRequest*
Arena::CreateMaybeMessage< ::unhinged::persistence::InsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::InsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::InsertResponse*
Arena::CreateMaybeMessage< ::unhinged::persistence::InsertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::InsertResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::InsertBatchRequest*
Arena::CreateMaybeMessage< ::unhinged::persistence::InsertBatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::InsertBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::InsertBatchResponse*
Arena::CreateMaybeMessage< ::unhinged::persistence::InsertBatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::InsertBatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::UpdateRequest*
Arena::CreateMaybeMessage< ::unhinged::persistence::UpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::UpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::UpdateResponse*
Arena::CreateMaybeMessage< ::unhinged::persistence::UpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::UpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::DeleteRequest*
Arena::CreateMaybeMessage< ::unhinged::persistence::DeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::DeleteResponse*
Arena::CreateMaybeMessage< ::unhinged::persistence::DeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::DeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::ExecuteQueryRequest*
Arena::CreateMaybeMessage< ::unhinged::persistence::ExecuteQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::ExecuteQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::ExecuteQueryResponse*
Arena::CreateMaybeMessage< ::unhinged::persistence::ExecuteQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::ExecuteQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::ExecuteRawQueryRequest*
Arena::CreateMaybeMessage< ::unhinged::persistence::ExecuteRawQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::ExecuteRawQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::ExecuteRawQueryResponse*
Arena::CreateMaybeMessage< ::unhinged::persistence::ExecuteRawQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::ExecuteRawQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::VectorSearchRequest*
Arena::CreateMaybeMessage< ::unhinged::persistence::VectorSearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::VectorSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::VectorSearchResponse*
Arena::CreateMaybeMessage< ::unhinged::persistence::VectorSearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::VectorSearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::VectorSearchResult*
Arena::CreateMaybeMessage< ::unhinged::persistence::VectorSearchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::VectorSearchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::GraphTraverseRequest*
Arena::CreateMaybeMessage< ::unhinged::persistence::GraphTraverseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::GraphTraverseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::GraphTraverseResponse*
Arena::CreateMaybeMessage< ::unhinged::persistence::GraphTraverseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::GraphTraverseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::GraphTraversalSpec*
Arena::CreateMaybeMessage< ::unhinged::persistence::GraphTraversalSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::GraphTraversalSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::GraphNode*
Arena::CreateMaybeMessage< ::unhinged::persistence::GraphNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::GraphNode >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::GraphEdge*
Arena::CreateMaybeMessage< ::unhinged::persistence::GraphEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::GraphEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::ExecuteOperationRequest*
Arena::CreateMaybeMessage< ::unhinged::persistence::ExecuteOperationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::ExecuteOperationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::ExecuteOperationResponse*
Arena::CreateMaybeMessage< ::unhinged::persistence::ExecuteOperationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::ExecuteOperationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::HealthCheckRequest*
Arena::CreateMaybeMessage< ::unhinged::persistence::HealthCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::HealthCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::HealthCheckResponse*
Arena::CreateMaybeMessage< ::unhinged::persistence::HealthCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::HealthCheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::TechnologyHealth*
Arena::CreateMaybeMessage< ::unhinged::persistence::TechnologyHealth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::TechnologyHealth >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::GetPlatformInfoRequest*
Arena::CreateMaybeMessage< ::unhinged::persistence::GetPlatformInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::GetPlatformInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::GetPlatformInfoResponse*
Arena::CreateMaybeMessage< ::unhinged::persistence::GetPlatformInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::GetPlatformInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::GetMetricsRequest*
Arena::CreateMaybeMessage< ::unhinged::persistence::GetMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::GetMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::persistence::GetMetricsResponse*
Arena::CreateMaybeMessage< ::unhinged::persistence::GetMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::persistence::GetMetricsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
