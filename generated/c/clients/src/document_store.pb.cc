// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: document_store.proto

#include "document_store.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace unhinged {
namespace document_store {
PROTOBUF_CONSTEXPR Document::Document(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.namespace__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_json_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_by_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DocumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentDefaultTypeInternal() {}
  union {
    Document _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentDefaultTypeInternal _Document_default_instance_;
PROTOBUF_CONSTEXPR DocumentStub::DocumentStub(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.namespace__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_by_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DocumentStubDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentStubDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentStubDefaultTypeInternal() {}
  union {
    DocumentStub _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentStubDefaultTypeInternal _DocumentStub_default_instance_;
PROTOBUF_CONSTEXPR ActiveTag::ActiveTag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_by_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.document_version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActiveTagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActiveTagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActiveTagDefaultTypeInternal() {}
  union {
    ActiveTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActiveTagDefaultTypeInternal _ActiveTag_default_instance_;
PROTOBUF_CONSTEXPR TagEvent::TagEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tag_event_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_by_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.document_version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TagEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagEventDefaultTypeInternal() {}
  union {
    TagEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagEventDefaultTypeInternal _TagEvent_default_instance_;
PROTOBUF_CONSTEXPR PutDocumentRequest::PutDocumentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.document_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutDocumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutDocumentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutDocumentRequestDefaultTypeInternal() {}
  union {
    PutDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutDocumentRequestDefaultTypeInternal _PutDocumentRequest_default_instance_;
PROTOBUF_CONSTEXPR PutDocumentResponse::PutDocumentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutDocumentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutDocumentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutDocumentResponseDefaultTypeInternal() {}
  union {
    PutDocumentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutDocumentResponseDefaultTypeInternal _PutDocumentResponse_default_instance_;
PROTOBUF_CONSTEXPR PutDocumentsRequest::PutDocumentsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.documents_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutDocumentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutDocumentsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutDocumentsRequestDefaultTypeInternal() {}
  union {
    PutDocumentsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutDocumentsRequestDefaultTypeInternal _PutDocumentsRequest_default_instance_;
PROTOBUF_CONSTEXPR PutDocumentReceipt::PutDocumentReceipt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutDocumentReceiptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutDocumentReceiptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutDocumentReceiptDefaultTypeInternal() {}
  union {
    PutDocumentReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutDocumentReceiptDefaultTypeInternal _PutDocumentReceipt_default_instance_;
PROTOBUF_CONSTEXPR PutDocumentsResponse::PutDocumentsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.receipts_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutDocumentsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutDocumentsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutDocumentsResponseDefaultTypeInternal() {}
  union {
    PutDocumentsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutDocumentsResponseDefaultTypeInternal _PutDocumentsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetDocumentRequest::GetDocumentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.include_body_)*/false} {}
struct GetDocumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDocumentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDocumentRequestDefaultTypeInternal() {}
  union {
    GetDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDocumentRequestDefaultTypeInternal _GetDocumentRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDocumentResponse::GetDocumentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.document_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDocumentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDocumentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDocumentResponseDefaultTypeInternal() {}
  union {
    GetDocumentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDocumentResponseDefaultTypeInternal _GetDocumentResponse_default_instance_;
PROTOBUF_CONSTEXPR ListDocumentsRequest::ListDocumentsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.namespace__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_token_)*/nullptr
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_.include_body_)*/false
  , /*decltype(_impl_.latest_versions_only_)*/false} {}
struct ListDocumentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDocumentsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDocumentsRequestDefaultTypeInternal() {}
  union {
    ListDocumentsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDocumentsRequestDefaultTypeInternal _ListDocumentsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListDocumentsResponse::ListDocumentsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.documents_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.next_pagination_token_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.total_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDocumentsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDocumentsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDocumentsResponseDefaultTypeInternal() {}
  union {
    ListDocumentsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDocumentsResponseDefaultTypeInternal _ListDocumentsResponse_default_instance_;
PROTOBUF_CONSTEXPR ListDocumentVersionsRequest::ListDocumentVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_token_)*/nullptr
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_.include_body_)*/false} {}
struct ListDocumentVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDocumentVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDocumentVersionsRequestDefaultTypeInternal() {}
  union {
    ListDocumentVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDocumentVersionsRequestDefaultTypeInternal _ListDocumentVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListDocumentVersionsResponse::ListDocumentVersionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.documents_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.next_pagination_token_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.total_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDocumentVersionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDocumentVersionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDocumentVersionsResponseDefaultTypeInternal() {}
  union {
    ListDocumentVersionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDocumentVersionsResponseDefaultTypeInternal _ListDocumentVersionsResponse_default_instance_;
PROTOBUF_CONSTEXPR TagDocumentRequest::TagDocumentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tagged_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tagged_by_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TagDocumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagDocumentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagDocumentRequestDefaultTypeInternal() {}
  union {
    TagDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagDocumentRequestDefaultTypeInternal _TagDocumentRequest_default_instance_;
PROTOBUF_CONSTEXPR TagDocumentResponse::TagDocumentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TagDocumentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagDocumentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagDocumentResponseDefaultTypeInternal() {}
  union {
    TagDocumentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagDocumentResponseDefaultTypeInternal _TagDocumentResponse_default_instance_;
PROTOBUF_CONSTEXPR ListActiveTagsRequest::ListActiveTagsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_token_)*/nullptr
  , /*decltype(_impl_.document_version_)*/0
  , /*decltype(_impl_.page_size_)*/0} {}
struct ListActiveTagsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListActiveTagsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListActiveTagsRequestDefaultTypeInternal() {}
  union {
    ListActiveTagsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListActiveTagsRequestDefaultTypeInternal _ListActiveTagsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListActiveTagsResponse::ListActiveTagsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.next_pagination_token_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.total_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListActiveTagsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListActiveTagsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListActiveTagsResponseDefaultTypeInternal() {}
  union {
    ListActiveTagsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListActiveTagsResponseDefaultTypeInternal _ListActiveTagsResponse_default_instance_;
PROTOBUF_CONSTEXPR ListTagEventsRequest::ListTagEventsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_token_)*/nullptr
  , /*decltype(_impl_.page_size_)*/0} {}
struct ListTagEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListTagEventsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListTagEventsRequestDefaultTypeInternal() {}
  union {
    ListTagEventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListTagEventsRequestDefaultTypeInternal _ListTagEventsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListTagEventsResponse::ListTagEventsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.next_pagination_token_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.total_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListTagEventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListTagEventsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListTagEventsResponseDefaultTypeInternal() {}
  union {
    ListTagEventsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListTagEventsResponseDefaultTypeInternal _ListTagEventsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSessionContextRequest::GetSessionContextRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_types_)*/{}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.since_)*/nullptr
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.include_body_)*/false} {}
struct GetSessionContextRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSessionContextRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSessionContextRequestDefaultTypeInternal() {}
  union {
    GetSessionContextRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSessionContextRequestDefaultTypeInternal _GetSessionContextRequest_default_instance_;
PROTOBUF_CONSTEXPR GetSessionContextResponse::GetSessionContextResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.documents_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.total_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSessionContextResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSessionContextResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSessionContextResponseDefaultTypeInternal() {}
  union {
    GetSessionContextResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSessionContextResponseDefaultTypeInternal _GetSessionContextResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteDocumentRequest::DeleteDocumentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deleted_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deleted_by_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0} {}
struct DeleteDocumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteDocumentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteDocumentRequestDefaultTypeInternal() {}
  union {
    DeleteDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteDocumentRequestDefaultTypeInternal _DeleteDocumentRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteDocumentResponse::DeleteDocumentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.versions_deleted_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteDocumentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteDocumentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteDocumentResponseDefaultTypeInternal() {}
  union {
    DeleteDocumentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteDocumentResponseDefaultTypeInternal _DeleteDocumentResponse_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckRequest::HealthCheckRequest(
    ::_pbi::ConstantInitialized) {}
struct HealthCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckRequestDefaultTypeInternal() {}
  union {
    HealthCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckResponse::HealthCheckResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.healthy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthCheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckResponseDefaultTypeInternal() {}
  union {
    HealthCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
}  // namespace document_store
}  // namespace unhinged
static ::_pb::Metadata file_level_metadata_document_5fstore_2eproto[27];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_document_5fstore_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_document_5fstore_2eproto = nullptr;

const uint32_t TableStruct_document_5fstore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::Document, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::Document, _impl_.document_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::Document, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::Document, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::Document, _impl_.namespace__),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::Document, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::Document, _impl_.body_json_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::Document, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::Document, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::Document, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::Document, _impl_.created_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::Document, _impl_.created_by_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::Document, _impl_.session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DocumentStub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DocumentStub, _impl_.document_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DocumentStub, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DocumentStub, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DocumentStub, _impl_.namespace__),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DocumentStub, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DocumentStub, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DocumentStub, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DocumentStub, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DocumentStub, _impl_.created_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DocumentStub, _impl_.created_by_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DocumentStub, _impl_.session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ActiveTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ActiveTag, _impl_.document_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ActiveTag, _impl_.document_version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ActiveTag, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ActiveTag, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ActiveTag, _impl_.updated_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ActiveTag, _impl_.updated_by_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ActiveTag, _impl_.session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagEvent, _impl_.tag_event_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagEvent, _impl_.document_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagEvent, _impl_.document_version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagEvent, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagEvent, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagEvent, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagEvent, _impl_.created_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagEvent, _impl_.created_by_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagEvent, _impl_.session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentRequest, _impl_.document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentResponse, _impl_.document_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentResponse, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentsRequest, _impl_.documents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentReceipt, _impl_.document_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentReceipt, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentReceipt, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentReceipt, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentsResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentsResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::PutDocumentsResponse, _impl_.receipts_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetDocumentRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetDocumentRequest, _impl_.document_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetDocumentRequest, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetDocumentRequest, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetDocumentRequest, _impl_.include_body_),
  ~0u,
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetDocumentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetDocumentResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetDocumentResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetDocumentResponse, _impl_.document_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsRequest, _impl_.namespace__),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsRequest, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsRequest, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsRequest, _impl_.pagination_token_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsRequest, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsRequest, _impl_.include_body_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsRequest, _impl_.latest_versions_only_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsResponse, _impl_.documents_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsResponse, _impl_.next_pagination_token_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentsResponse, _impl_.total_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentVersionsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentVersionsRequest, _impl_.document_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentVersionsRequest, _impl_.pagination_token_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentVersionsRequest, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentVersionsRequest, _impl_.include_body_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentVersionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentVersionsResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentVersionsResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentVersionsResponse, _impl_.documents_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentVersionsResponse, _impl_.next_pagination_token_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListDocumentVersionsResponse, _impl_.total_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagDocumentRequest, _impl_.document_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagDocumentRequest, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagDocumentRequest, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagDocumentRequest, _impl_.tagged_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagDocumentRequest, _impl_.tagged_by_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagDocumentRequest, _impl_.session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagDocumentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagDocumentResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::TagDocumentResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListActiveTagsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListActiveTagsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListActiveTagsRequest, _impl_.document_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListActiveTagsRequest, _impl_.document_version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListActiveTagsRequest, _impl_.pagination_token_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListActiveTagsRequest, _impl_.page_size_),
  ~0u,
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListActiveTagsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListActiveTagsResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListActiveTagsResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListActiveTagsResponse, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListActiveTagsResponse, _impl_.next_pagination_token_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListActiveTagsResponse, _impl_.total_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListTagEventsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListTagEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListTagEventsRequest, _impl_.document_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListTagEventsRequest, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListTagEventsRequest, _impl_.pagination_token_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListTagEventsRequest, _impl_.page_size_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListTagEventsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListTagEventsResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListTagEventsResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListTagEventsResponse, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListTagEventsResponse, _impl_.next_pagination_token_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::ListTagEventsResponse, _impl_.total_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetSessionContextRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetSessionContextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetSessionContextRequest, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetSessionContextRequest, _impl_.document_types_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetSessionContextRequest, _impl_.since_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetSessionContextRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetSessionContextRequest, _impl_.include_body_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetSessionContextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetSessionContextResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetSessionContextResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetSessionContextResponse, _impl_.documents_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::GetSessionContextResponse, _impl_.total_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DeleteDocumentRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DeleteDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DeleteDocumentRequest, _impl_.document_uuid_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DeleteDocumentRequest, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DeleteDocumentRequest, _impl_.deleted_by_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DeleteDocumentRequest, _impl_.deleted_by_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DeleteDocumentRequest, _impl_.session_id_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DeleteDocumentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DeleteDocumentResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DeleteDocumentResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::DeleteDocumentResponse, _impl_.versions_deleted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::HealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::HealthCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::HealthCheckResponse, _impl_.healthy_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::HealthCheckResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::document_store::HealthCheckResponse, _impl_.timestamp_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::unhinged::document_store::Document)},
  { 18, -1, -1, sizeof(::unhinged::document_store::DocumentStub)},
  { 35, -1, -1, sizeof(::unhinged::document_store::ActiveTag)},
  { 48, -1, -1, sizeof(::unhinged::document_store::TagEvent)},
  { 63, -1, -1, sizeof(::unhinged::document_store::PutDocumentRequest)},
  { 70, -1, -1, sizeof(::unhinged::document_store::PutDocumentResponse)},
  { 80, -1, -1, sizeof(::unhinged::document_store::PutDocumentsRequest)},
  { 87, -1, -1, sizeof(::unhinged::document_store::PutDocumentReceipt)},
  { 97, -1, -1, sizeof(::unhinged::document_store::PutDocumentsResponse)},
  { 106, 116, -1, sizeof(::unhinged::document_store::GetDocumentRequest)},
  { 120, -1, -1, sizeof(::unhinged::document_store::GetDocumentResponse)},
  { 129, 143, -1, sizeof(::unhinged::document_store::ListDocumentsRequest)},
  { 151, -1, -1, sizeof(::unhinged::document_store::ListDocumentsResponse)},
  { 162, 172, -1, sizeof(::unhinged::document_store::ListDocumentVersionsRequest)},
  { 176, -1, -1, sizeof(::unhinged::document_store::ListDocumentVersionsResponse)},
  { 187, -1, -1, sizeof(::unhinged::document_store::TagDocumentRequest)},
  { 199, -1, -1, sizeof(::unhinged::document_store::TagDocumentResponse)},
  { 207, 217, -1, sizeof(::unhinged::document_store::ListActiveTagsRequest)},
  { 221, -1, -1, sizeof(::unhinged::document_store::ListActiveTagsResponse)},
  { 232, 242, -1, sizeof(::unhinged::document_store::ListTagEventsRequest)},
  { 246, -1, -1, sizeof(::unhinged::document_store::ListTagEventsResponse)},
  { 257, 268, -1, sizeof(::unhinged::document_store::GetSessionContextRequest)},
  { 273, -1, -1, sizeof(::unhinged::document_store::GetSessionContextResponse)},
  { 283, 294, -1, sizeof(::unhinged::document_store::DeleteDocumentRequest)},
  { 299, -1, -1, sizeof(::unhinged::document_store::DeleteDocumentResponse)},
  { 308, -1, -1, sizeof(::unhinged::document_store::HealthCheckRequest)},
  { 314, -1, -1, sizeof(::unhinged::document_store::HealthCheckResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::unhinged::document_store::_Document_default_instance_._instance,
  &::unhinged::document_store::_DocumentStub_default_instance_._instance,
  &::unhinged::document_store::_ActiveTag_default_instance_._instance,
  &::unhinged::document_store::_TagEvent_default_instance_._instance,
  &::unhinged::document_store::_PutDocumentRequest_default_instance_._instance,
  &::unhinged::document_store::_PutDocumentResponse_default_instance_._instance,
  &::unhinged::document_store::_PutDocumentsRequest_default_instance_._instance,
  &::unhinged::document_store::_PutDocumentReceipt_default_instance_._instance,
  &::unhinged::document_store::_PutDocumentsResponse_default_instance_._instance,
  &::unhinged::document_store::_GetDocumentRequest_default_instance_._instance,
  &::unhinged::document_store::_GetDocumentResponse_default_instance_._instance,
  &::unhinged::document_store::_ListDocumentsRequest_default_instance_._instance,
  &::unhinged::document_store::_ListDocumentsResponse_default_instance_._instance,
  &::unhinged::document_store::_ListDocumentVersionsRequest_default_instance_._instance,
  &::unhinged::document_store::_ListDocumentVersionsResponse_default_instance_._instance,
  &::unhinged::document_store::_TagDocumentRequest_default_instance_._instance,
  &::unhinged::document_store::_TagDocumentResponse_default_instance_._instance,
  &::unhinged::document_store::_ListActiveTagsRequest_default_instance_._instance,
  &::unhinged::document_store::_ListActiveTagsResponse_default_instance_._instance,
  &::unhinged::document_store::_ListTagEventsRequest_default_instance_._instance,
  &::unhinged::document_store::_ListTagEventsResponse_default_instance_._instance,
  &::unhinged::document_store::_GetSessionContextRequest_default_instance_._instance,
  &::unhinged::document_store::_GetSessionContextResponse_default_instance_._instance,
  &::unhinged::document_store::_DeleteDocumentRequest_default_instance_._instance,
  &::unhinged::document_store::_DeleteDocumentResponse_default_instance_._instance,
  &::unhinged::document_store::_HealthCheckRequest_default_instance_._instance,
  &::unhinged::document_store::_HealthCheckResponse_default_instance_._instance,
};

const char descriptor_table_protodef_document_5fstore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024document_store.proto\022\027unhinged.documen"
  "t_store\032\037google/protobuf/timestamp.proto"
  "\032\034google/protobuf/struct.proto\"\236\002\n\010Docum"
  "ent\022\025\n\rdocument_uuid\030\001 \001(\t\022\014\n\004type\030\002 \001(\t"
  "\022\014\n\004name\030\003 \001(\t\022\021\n\tnamespace\030\004 \001(\t\022\017\n\007ver"
  "sion\030\005 \001(\005\022\021\n\tbody_json\030\006 \001(\t\022)\n\010metadat"
  "a\030\007 \001(\0132\027.google.protobuf.Struct\022\014\n\004tags"
  "\030\010 \003(\t\022.\n\ncreated_at\030\t \001(\0132\032.google.prot"
  "obuf.Timestamp\022\022\n\ncreated_by\030\n \001(\t\022\027\n\017cr"
  "eated_by_type\030\013 \001(\t\022\022\n\nsession_id\030\014 \001(\t\""
  "\217\002\n\014DocumentStub\022\025\n\rdocument_uuid\030\001 \001(\t\022"
  "\014\n\004type\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\021\n\tnamespace"
  "\030\004 \001(\t\022\017\n\007version\030\005 \001(\005\022)\n\010metadata\030\006 \001("
  "\0132\027.google.protobuf.Struct\022\014\n\004tags\030\007 \003(\t"
  "\022.\n\ncreated_at\030\010 \001(\0132\032.google.protobuf.T"
  "imestamp\022\022\n\ncreated_by\030\t \001(\t\022\027\n\017created_"
  "by_type\030\n \001(\t\022\022\n\nsession_id\030\013 \001(\t\"\272\001\n\tAc"
  "tiveTag\022\025\n\rdocument_uuid\030\001 \001(\t\022\030\n\020docume"
  "nt_version\030\002 \001(\005\022\013\n\003tag\030\003 \001(\t\022.\n\nupdated"
  "_at\030\004 \001(\0132\032.google.protobuf.Timestamp\022\022\n"
  "\nupdated_by\030\005 \001(\t\022\027\n\017updated_by_type\030\006 \001"
  "(\t\022\022\n\nsession_id\030\007 \001(\t\"\344\001\n\010TagEvent\022\026\n\016t"
  "ag_event_uuid\030\001 \001(\t\022\025\n\rdocument_uuid\030\002 \001"
  "(\t\022\030\n\020document_version\030\003 \001(\005\022\013\n\003tag\030\004 \001("
  "\t\022\021\n\toperation\030\005 \001(\t\022.\n\ncreated_at\030\006 \001(\013"
  "2\032.google.protobuf.Timestamp\022\022\n\ncreated_"
  "by\030\007 \001(\t\022\027\n\017created_by_type\030\010 \001(\t\022\022\n\nses"
  "sion_id\030\t \001(\t\"I\n\022PutDocumentRequest\0223\n\010d"
  "ocument\030\001 \001(\0132!.unhinged.document_store."
  "Document\"_\n\023PutDocumentResponse\022\017\n\007succe"
  "ss\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\022\025\n\rdocument_uu"
  "id\030\003 \001(\t\022\017\n\007version\030\004 \001(\005\"K\n\023PutDocument"
  "sRequest\0224\n\tdocuments\030\001 \003(\0132!.unhinged.d"
  "ocument_store.Document\"d\n\022PutDocumentRec"
  "eipt\022\025\n\rdocument_uuid\030\001 \001(\t\022\017\n\007version\030\002"
  " \001(\005\022\017\n\007success\030\003 \001(\010\022\025\n\rerror_message\030\004"
  " \001(\t\"w\n\024PutDocumentsResponse\022\017\n\007success\030"
  "\001 \001(\010\022\017\n\007message\030\002 \001(\t\022=\n\010receipts\030\003 \003(\013"
  "2+.unhinged.document_store.PutDocumentRe"
  "ceipt\"}\n\022GetDocumentRequest\022\025\n\rdocument_"
  "uuid\030\001 \001(\t\022\024\n\007version\030\002 \001(\005H\000\210\001\001\022\020\n\003tag\030"
  "\003 \001(\tH\001\210\001\001\022\024\n\014include_body\030\004 \001(\010B\n\n\010_ver"
  "sionB\006\n\004_tag\"l\n\023GetDocumentResponse\022\017\n\007s"
  "uccess\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\0223\n\010documen"
  "t\030\003 \001(\0132!.unhinged.document_store.Docume"
  "nt\"\261\002\n\024ListDocumentsRequest\022\026\n\tnamespace"
  "\030\001 \001(\tH\000\210\001\001\022\021\n\004type\030\002 \001(\tH\001\210\001\001\022\020\n\003tag\030\003 "
  "\001(\tH\002\210\001\001\022\027\n\nsession_id\030\004 \001(\tH\003\210\001\001\0229\n\020pag"
  "ination_token\030\005 \001(\0132\032.google.protobuf.Ti"
  "mestampH\004\210\001\001\022\021\n\tpage_size\030\006 \001(\005\022\024\n\014inclu"
  "de_body\030\007 \001(\010\022\034\n\024latest_versions_only\030\010 "
  "\001(\010B\014\n\n_namespaceB\007\n\005_typeB\006\n\004_tagB\r\n\013_s"
  "ession_idB\023\n\021_pagination_token\"\277\001\n\025ListD"
  "ocumentsResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007mes"
  "sage\030\002 \001(\t\0224\n\tdocuments\030\003 \003(\0132!.unhinged"
  ".document_store.Document\0229\n\025next_paginat"
  "ion_token\030\004 \001(\0132\032.google.protobuf.Timest"
  "amp\022\023\n\013total_count\030\005 \001(\005\"\255\001\n\033ListDocumen"
  "tVersionsRequest\022\025\n\rdocument_uuid\030\001 \001(\t\022"
  "9\n\020pagination_token\030\002 \001(\0132\032.google.proto"
  "buf.TimestampH\000\210\001\001\022\021\n\tpage_size\030\003 \001(\005\022\024\n"
  "\014include_body\030\004 \001(\010B\023\n\021_pagination_token"
  "\"\306\001\n\034ListDocumentVersionsResponse\022\017\n\007suc"
  "cess\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\0224\n\tdocuments"
  "\030\003 \003(\0132!.unhinged.document_store.Documen"
  "t\0229\n\025next_pagination_token\030\004 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022\023\n\013total_count\030\005 \001("
  "\005\"\210\001\n\022TagDocumentRequest\022\025\n\rdocument_uui"
  "d\030\001 \001(\t\022\017\n\007version\030\002 \001(\005\022\013\n\003tag\030\003 \001(\t\022\021\n"
  "\ttagged_by\030\004 \001(\t\022\026\n\016tagged_by_type\030\005 \001(\t"
  "\022\022\n\nsession_id\030\006 \001(\t\"7\n\023TagDocumentRespo"
  "nse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"\305\001"
  "\n\025ListActiveTagsRequest\022\025\n\rdocument_uuid"
  "\030\001 \001(\t\022\035\n\020document_version\030\002 \001(\005H\000\210\001\001\0229\n"
  "\020pagination_token\030\003 \001(\0132\032.google.protobu"
  "f.TimestampH\001\210\001\001\022\021\n\tpage_size\030\004 \001(\005B\023\n\021_"
  "document_versionB\023\n\021_pagination_token\"\274\001"
  "\n\026ListActiveTagsResponse\022\017\n\007success\030\001 \001("
  "\010\022\017\n\007message\030\002 \001(\t\0220\n\004tags\030\003 \003(\0132\".unhin"
  "ged.document_store.ActiveTag\0229\n\025next_pag"
  "ination_token\030\004 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022\023\n\013total_count\030\005 \001(\005\"\235\001\n\024ListTag"
  "EventsRequest\022\025\n\rdocument_uuid\030\001 \001(\t\022\013\n\003"
  "tag\030\002 \001(\t\0229\n\020pagination_token\030\003 \001(\0132\032.go"
  "ogle.protobuf.TimestampH\000\210\001\001\022\021\n\tpage_siz"
  "e\030\004 \001(\005B\023\n\021_pagination_token\"\274\001\n\025ListTag"
  "EventsResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007messa"
  "ge\030\002 \001(\t\0221\n\006events\030\003 \003(\0132!.unhinged.docu"
  "ment_store.TagEvent\0229\n\025next_pagination_t"
  "oken\030\004 \001(\0132\032.google.protobuf.Timestamp\022\023"
  "\n\013total_count\030\005 \001(\005\"\245\001\n\030GetSessionContex"
  "tRequest\022\022\n\nsession_id\030\001 \001(\t\022\026\n\016document"
  "_types\030\002 \003(\t\022.\n\005since\030\003 \001(\0132\032.google.pro"
  "tobuf.TimestampH\000\210\001\001\022\r\n\005limit\030\004 \001(\005\022\024\n\014i"
  "nclude_body\030\005 \001(\010B\010\n\006_since\"\210\001\n\031GetSessi"
  "onContextResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007me"
  "ssage\030\002 \001(\t\0224\n\tdocuments\030\003 \003(\0132!.unhinge"
  "d.document_store.Document\022\023\n\013total_count"
  "\030\004 \001(\005\"\221\001\n\025DeleteDocumentRequest\022\025\n\rdocu"
  "ment_uuid\030\001 \001(\t\022\024\n\007version\030\002 \001(\005H\000\210\001\001\022\022\n"
  "\ndeleted_by\030\003 \001(\t\022\027\n\017deleted_by_type\030\004 \001"
  "(\t\022\022\n\nsession_id\030\005 \001(\tB\n\n\010_version\"T\n\026De"
  "leteDocumentResponse\022\017\n\007success\030\001 \001(\010\022\017\n"
  "\007message\030\002 \001(\t\022\030\n\020versions_deleted\030\003 \001(\005"
  "\"\024\n\022HealthCheckRequest\"e\n\023HealthCheckRes"
  "ponse\022\017\n\007healthy\030\001 \001(\010\022\016\n\006status\030\002 \001(\t\022-"
  "\n\ttimestamp\030\003 \001(\0132\032.google.protobuf.Time"
  "stamp2\363\t\n\024DocumentStoreService\022h\n\013PutDoc"
  "ument\022+.unhinged.document_store.PutDocum"
  "entRequest\032,.unhinged.document_store.Put"
  "DocumentResponse\022k\n\014PutDocuments\022,.unhin"
  "ged.document_store.PutDocumentsRequest\032-"
  ".unhinged.document_store.PutDocumentsRes"
  "ponse\022h\n\013GetDocument\022+.unhinged.document"
  "_store.GetDocumentRequest\032,.unhinged.doc"
  "ument_store.GetDocumentResponse\022n\n\rListD"
  "ocuments\022-.unhinged.document_store.ListD"
  "ocumentsRequest\032..unhinged.document_stor"
  "e.ListDocumentsResponse\022\203\001\n\024ListDocument"
  "Versions\0224.unhinged.document_store.ListD"
  "ocumentVersionsRequest\0325.unhinged.docume"
  "nt_store.ListDocumentVersionsResponse\022q\n"
  "\016DeleteDocument\022..unhinged.document_stor"
  "e.DeleteDocumentRequest\032/.unhinged.docum"
  "ent_store.DeleteDocumentResponse\022h\n\013TagD"
  "ocument\022+.unhinged.document_store.TagDoc"
  "umentRequest\032,.unhinged.document_store.T"
  "agDocumentResponse\022q\n\016ListActiveTags\022..u"
  "nhinged.document_store.ListActiveTagsReq"
  "uest\032/.unhinged.document_store.ListActiv"
  "eTagsResponse\022n\n\rListTagEvents\022-.unhinge"
  "d.document_store.ListTagEventsRequest\032.."
  "unhinged.document_store.ListTagEventsRes"
  "ponse\022z\n\021GetSessionContext\0221.unhinged.do"
  "cument_store.GetSessionContextRequest\0322."
  "unhinged.document_store.GetSessionContex"
  "tResponse\022h\n\013HealthCheck\022+.unhinged.docu"
  "ment_store.HealthCheckRequest\032,.unhinged"
  ".document_store.HealthCheckResponseb\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_document_5fstore_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_document_5fstore_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_document_5fstore_2eproto = {
    false, false, 5563, descriptor_table_protodef_document_5fstore_2eproto,
    "document_store.proto",
    &descriptor_table_document_5fstore_2eproto_once, descriptor_table_document_5fstore_2eproto_deps, 2, 27,
    schemas, file_default_instances, TableStruct_document_5fstore_2eproto::offsets,
    file_level_metadata_document_5fstore_2eproto, file_level_enum_descriptors_document_5fstore_2eproto,
    file_level_service_descriptors_document_5fstore_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_document_5fstore_2eproto_getter() {
  return &descriptor_table_document_5fstore_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_document_5fstore_2eproto(&descriptor_table_document_5fstore_2eproto);
namespace unhinged {
namespace document_store {

// ===================================================================

class Document::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const Document* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Document* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
Document::_Internal::metadata(const Document* msg) {
  return *msg->_impl_.metadata_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Document::_Internal::created_at(const Document* msg) {
  return *msg->_impl_.created_at_;
}
void Document::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
void Document::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
Document::Document(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.Document)
}
Document::Document(const Document& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Document* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.body_json_){}
    , decltype(_impl_.created_by_){}
    , decltype(_impl_.created_by_type_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_uuid().empty()) {
    _this->_impl_.document_uuid_.Set(from._internal_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_().empty()) {
    _this->_impl_.namespace__.Set(from._internal_namespace_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body_json().empty()) {
    _this->_impl_.body_json_.Set(from._internal_body_json(), 
      _this->GetArenaForAllocation());
  }
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_by().empty()) {
    _this->_impl_.created_by_.Set(from._internal_created_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.created_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_by_type().empty()) {
    _this->_impl_.created_by_type_.Set(from._internal_created_by_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.Document)
}

inline void Document::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.body_json_){}
    , decltype(_impl_.created_by_){}
    , decltype(_impl_.created_by_type_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.Document)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Document::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  _impl_.document_uuid_.Destroy();
  _impl_.type_.Destroy();
  _impl_.name_.Destroy();
  _impl_.namespace__.Destroy();
  _impl_.body_json_.Destroy();
  _impl_.created_by_.Destroy();
  _impl_.created_by_type_.Destroy();
  _impl_.session_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void Document::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.Document)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.document_uuid_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.namespace__.ClearToEmpty();
  _impl_.body_json_.ClearToEmpty();
  _impl_.created_by_.ClearToEmpty();
  _impl_.created_by_type_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _impl_.version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Document::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.Document.document_uuid"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.Document.type"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.Document.name"));
        } else
          goto handle_unusual;
        continue;
      // string namespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.Document.namespace"));
        } else
          goto handle_unusual;
        continue;
      // int32 version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string body_json = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_body_json();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.Document.body_json"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.Document.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string created_by = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_created_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.Document.created_by"));
        } else
          goto handle_unusual;
        continue;
      // string created_by_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_created_by_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.Document.created_by_type"));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.Document.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Document::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.Document)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_uuid().data(), static_cast<int>(this->_internal_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.Document.document_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_uuid(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.Document.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.Document.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string namespace = 4;
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.Document.namespace");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_namespace_(), target);
  }

  // int32 version = 5;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_version(), target);
  }

  // string body_json = 6;
  if (!this->_internal_body_json().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body_json().data(), static_cast<int>(this->_internal_body_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.Document.body_json");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_body_json(), target);
  }

  // .google.protobuf.Struct metadata = 7;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // repeated string tags = 8;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.Document.tags");
    target = stream->WriteString(8, s, target);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // string created_by = 10;
  if (!this->_internal_created_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_by().data(), static_cast<int>(this->_internal_created_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.Document.created_by");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_created_by(), target);
  }

  // string created_by_type = 11;
  if (!this->_internal_created_by_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_by_type().data(), static_cast<int>(this->_internal_created_by_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.Document.created_by_type");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_created_by_type(), target);
  }

  // string session_id = 12;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.Document.session_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.Document)
  return target;
}

size_t Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.Document)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_uuid());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string namespace = 4;
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string body_json = 6;
  if (!this->_internal_body_json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body_json());
  }

  // string created_by = 10;
  if (!this->_internal_created_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_by());
  }

  // string created_by_type = 11;
  if (!this->_internal_created_by_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_by_type());
  }

  // string session_id = 12;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .google.protobuf.Struct metadata = 7;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // int32 version = 5;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Document::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Document::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Document::GetClassData() const { return &_class_data_; }


void Document::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Document*>(&to_msg);
  auto& from = static_cast<const Document&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.Document)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_document_uuid().empty()) {
    _this->_internal_set_document_uuid(from._internal_document_uuid());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_namespace_().empty()) {
    _this->_internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_body_json().empty()) {
    _this->_internal_set_body_json(from._internal_body_json());
  }
  if (!from._internal_created_by().empty()) {
    _this->_internal_set_created_by(from._internal_created_by());
  }
  if (!from._internal_created_by_type().empty()) {
    _this->_internal_set_created_by_type(from._internal_created_by_type());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  return true;
}

void Document::InternalSwap(Document* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_uuid_, lhs_arena,
      &other->_impl_.document_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace__, lhs_arena,
      &other->_impl_.namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_json_, lhs_arena,
      &other->_impl_.body_json_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.created_by_, lhs_arena,
      &other->_impl_.created_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.created_by_type_, lhs_arena,
      &other->_impl_.created_by_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Document, _impl_.version_)
      + sizeof(Document::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(Document, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Document::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[0]);
}

// ===================================================================

class DocumentStub::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const DocumentStub* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const DocumentStub* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
DocumentStub::_Internal::metadata(const DocumentStub* msg) {
  return *msg->_impl_.metadata_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DocumentStub::_Internal::created_at(const DocumentStub* msg) {
  return *msg->_impl_.created_at_;
}
void DocumentStub::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
void DocumentStub::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
DocumentStub::DocumentStub(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.DocumentStub)
}
DocumentStub::DocumentStub(const DocumentStub& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentStub* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.created_by_){}
    , decltype(_impl_.created_by_type_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_uuid().empty()) {
    _this->_impl_.document_uuid_.Set(from._internal_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_().empty()) {
    _this->_impl_.namespace__.Set(from._internal_namespace_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_by().empty()) {
    _this->_impl_.created_by_.Set(from._internal_created_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.created_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_by_type().empty()) {
    _this->_impl_.created_by_type_.Set(from._internal_created_by_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.DocumentStub)
}

inline void DocumentStub::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.created_by_){}
    , decltype(_impl_.created_by_type_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentStub::~DocumentStub() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.DocumentStub)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentStub::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  _impl_.document_uuid_.Destroy();
  _impl_.type_.Destroy();
  _impl_.name_.Destroy();
  _impl_.namespace__.Destroy();
  _impl_.created_by_.Destroy();
  _impl_.created_by_type_.Destroy();
  _impl_.session_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void DocumentStub::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentStub::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.DocumentStub)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.document_uuid_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.namespace__.ClearToEmpty();
  _impl_.created_by_.ClearToEmpty();
  _impl_.created_by_type_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _impl_.version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentStub::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.DocumentStub.document_uuid"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.DocumentStub.type"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.DocumentStub.name"));
        } else
          goto handle_unusual;
        continue;
      // string namespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.DocumentStub.namespace"));
        } else
          goto handle_unusual;
        continue;
      // int32 version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.DocumentStub.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string created_by = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_created_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.DocumentStub.created_by"));
        } else
          goto handle_unusual;
        continue;
      // string created_by_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_created_by_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.DocumentStub.created_by_type"));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.DocumentStub.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentStub::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.DocumentStub)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_uuid().data(), static_cast<int>(this->_internal_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.DocumentStub.document_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_uuid(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.DocumentStub.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.DocumentStub.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string namespace = 4;
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.DocumentStub.namespace");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_namespace_(), target);
  }

  // int32 version = 5;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_version(), target);
  }

  // .google.protobuf.Struct metadata = 6;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // repeated string tags = 7;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.DocumentStub.tags");
    target = stream->WriteString(7, s, target);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // string created_by = 9;
  if (!this->_internal_created_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_by().data(), static_cast<int>(this->_internal_created_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.DocumentStub.created_by");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_created_by(), target);
  }

  // string created_by_type = 10;
  if (!this->_internal_created_by_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_by_type().data(), static_cast<int>(this->_internal_created_by_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.DocumentStub.created_by_type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_created_by_type(), target);
  }

  // string session_id = 11;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.DocumentStub.session_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.DocumentStub)
  return target;
}

size_t DocumentStub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.DocumentStub)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_uuid());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string namespace = 4;
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string created_by = 9;
  if (!this->_internal_created_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_by());
  }

  // string created_by_type = 10;
  if (!this->_internal_created_by_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_by_type());
  }

  // string session_id = 11;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .google.protobuf.Struct metadata = 6;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // int32 version = 5;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentStub::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentStub::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentStub::GetClassData() const { return &_class_data_; }


void DocumentStub::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentStub*>(&to_msg);
  auto& from = static_cast<const DocumentStub&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.DocumentStub)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_document_uuid().empty()) {
    _this->_internal_set_document_uuid(from._internal_document_uuid());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_namespace_().empty()) {
    _this->_internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_created_by().empty()) {
    _this->_internal_set_created_by(from._internal_created_by());
  }
  if (!from._internal_created_by_type().empty()) {
    _this->_internal_set_created_by_type(from._internal_created_by_type());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentStub::CopyFrom(const DocumentStub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.DocumentStub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentStub::IsInitialized() const {
  return true;
}

void DocumentStub::InternalSwap(DocumentStub* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_uuid_, lhs_arena,
      &other->_impl_.document_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace__, lhs_arena,
      &other->_impl_.namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.created_by_, lhs_arena,
      &other->_impl_.created_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.created_by_type_, lhs_arena,
      &other->_impl_.created_by_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentStub, _impl_.version_)
      + sizeof(DocumentStub::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(DocumentStub, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentStub::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[1]);
}

// ===================================================================

class ActiveTag::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const ActiveTag* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ActiveTag::_Internal::updated_at(const ActiveTag* msg) {
  return *msg->_impl_.updated_at_;
}
void ActiveTag::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
ActiveTag::ActiveTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.ActiveTag)
}
ActiveTag::ActiveTag(const ActiveTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActiveTag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.document_uuid_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.updated_by_){}
    , decltype(_impl_.updated_by_type_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.document_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_uuid().empty()) {
    _this->_impl_.document_uuid_.Set(from._internal_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.updated_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updated_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updated_by().empty()) {
    _this->_impl_.updated_by_.Set(from._internal_updated_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.updated_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updated_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updated_by_type().empty()) {
    _this->_impl_.updated_by_type_.Set(from._internal_updated_by_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  _this->_impl_.document_version_ = from._impl_.document_version_;
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.ActiveTag)
}

inline void ActiveTag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.document_uuid_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.updated_by_){}
    , decltype(_impl_.updated_by_type_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.document_version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updated_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updated_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updated_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updated_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActiveTag::~ActiveTag() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.ActiveTag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActiveTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_uuid_.Destroy();
  _impl_.tag_.Destroy();
  _impl_.updated_by_.Destroy();
  _impl_.updated_by_type_.Destroy();
  _impl_.session_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void ActiveTag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActiveTag::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.ActiveTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_uuid_.ClearToEmpty();
  _impl_.tag_.ClearToEmpty();
  _impl_.updated_by_.ClearToEmpty();
  _impl_.updated_by_type_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  _impl_.document_version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActiveTag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ActiveTag.document_uuid"));
        } else
          goto handle_unusual;
        continue;
      // int32 document_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.document_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ActiveTag.tag"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string updated_by = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_updated_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ActiveTag.updated_by"));
        } else
          goto handle_unusual;
        continue;
      // string updated_by_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_updated_by_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ActiveTag.updated_by_type"));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ActiveTag.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActiveTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.ActiveTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_uuid().data(), static_cast<int>(this->_internal_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ActiveTag.document_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_uuid(), target);
  }

  // int32 document_version = 2;
  if (this->_internal_document_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_document_version(), target);
  }

  // string tag = 3;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ActiveTag.tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // .google.protobuf.Timestamp updated_at = 4;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // string updated_by = 5;
  if (!this->_internal_updated_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_by().data(), static_cast<int>(this->_internal_updated_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ActiveTag.updated_by");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_updated_by(), target);
  }

  // string updated_by_type = 6;
  if (!this->_internal_updated_by_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_by_type().data(), static_cast<int>(this->_internal_updated_by_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ActiveTag.updated_by_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_updated_by_type(), target);
  }

  // string session_id = 7;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ActiveTag.session_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.ActiveTag)
  return target;
}

size_t ActiveTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.ActiveTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_uuid());
  }

  // string tag = 3;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string updated_by = 5;
  if (!this->_internal_updated_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_by());
  }

  // string updated_by_type = 6;
  if (!this->_internal_updated_by_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_by_type());
  }

  // string session_id = 7;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .google.protobuf.Timestamp updated_at = 4;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 document_version = 2;
  if (this->_internal_document_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_document_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActiveTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActiveTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActiveTag::GetClassData() const { return &_class_data_; }


void ActiveTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActiveTag*>(&to_msg);
  auto& from = static_cast<const ActiveTag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.ActiveTag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_document_uuid().empty()) {
    _this->_internal_set_document_uuid(from._internal_document_uuid());
  }
  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (!from._internal_updated_by().empty()) {
    _this->_internal_set_updated_by(from._internal_updated_by());
  }
  if (!from._internal_updated_by_type().empty()) {
    _this->_internal_set_updated_by_type(from._internal_updated_by_type());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_document_version() != 0) {
    _this->_internal_set_document_version(from._internal_document_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActiveTag::CopyFrom(const ActiveTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.ActiveTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveTag::IsInitialized() const {
  return true;
}

void ActiveTag::InternalSwap(ActiveTag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_uuid_, lhs_arena,
      &other->_impl_.document_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.updated_by_, lhs_arena,
      &other->_impl_.updated_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.updated_by_type_, lhs_arena,
      &other->_impl_.updated_by_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActiveTag, _impl_.document_version_)
      + sizeof(ActiveTag::_impl_.document_version_)
      - PROTOBUF_FIELD_OFFSET(ActiveTag, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveTag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[2]);
}

// ===================================================================

class TagEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const TagEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TagEvent::_Internal::created_at(const TagEvent* msg) {
  return *msg->_impl_.created_at_;
}
void TagEvent::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
TagEvent::TagEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.TagEvent)
}
TagEvent::TagEvent(const TagEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TagEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_event_uuid_){}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.created_by_){}
    , decltype(_impl_.created_by_type_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.document_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_event_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_event_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag_event_uuid().empty()) {
    _this->_impl_.tag_event_uuid_.Set(from._internal_tag_event_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_uuid().empty()) {
    _this->_impl_.document_uuid_.Set(from._internal_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation().empty()) {
    _this->_impl_.operation_.Set(from._internal_operation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_by().empty()) {
    _this->_impl_.created_by_.Set(from._internal_created_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.created_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_by_type().empty()) {
    _this->_impl_.created_by_type_.Set(from._internal_created_by_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  _this->_impl_.document_version_ = from._impl_.document_version_;
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.TagEvent)
}

inline void TagEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_event_uuid_){}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.created_by_){}
    , decltype(_impl_.created_by_type_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.document_version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tag_event_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_event_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TagEvent::~TagEvent() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.TagEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TagEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_event_uuid_.Destroy();
  _impl_.document_uuid_.Destroy();
  _impl_.tag_.Destroy();
  _impl_.operation_.Destroy();
  _impl_.created_by_.Destroy();
  _impl_.created_by_type_.Destroy();
  _impl_.session_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void TagEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TagEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.TagEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_event_uuid_.ClearToEmpty();
  _impl_.document_uuid_.ClearToEmpty();
  _impl_.tag_.ClearToEmpty();
  _impl_.operation_.ClearToEmpty();
  _impl_.created_by_.ClearToEmpty();
  _impl_.created_by_type_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _impl_.document_version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tag_event_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag_event_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.TagEvent.tag_event_uuid"));
        } else
          goto handle_unusual;
        continue;
      // string document_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.TagEvent.document_uuid"));
        } else
          goto handle_unusual;
        continue;
      // int32 document_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.document_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.TagEvent.tag"));
        } else
          goto handle_unusual;
        continue;
      // string operation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_operation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.TagEvent.operation"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string created_by = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_created_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.TagEvent.created_by"));
        } else
          goto handle_unusual;
        continue;
      // string created_by_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_created_by_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.TagEvent.created_by_type"));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.TagEvent.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TagEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.TagEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag_event_uuid = 1;
  if (!this->_internal_tag_event_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag_event_uuid().data(), static_cast<int>(this->_internal_tag_event_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.TagEvent.tag_event_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag_event_uuid(), target);
  }

  // string document_uuid = 2;
  if (!this->_internal_document_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_uuid().data(), static_cast<int>(this->_internal_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.TagEvent.document_uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_document_uuid(), target);
  }

  // int32 document_version = 3;
  if (this->_internal_document_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_document_version(), target);
  }

  // string tag = 4;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.TagEvent.tag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tag(), target);
  }

  // string operation = 5;
  if (!this->_internal_operation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation().data(), static_cast<int>(this->_internal_operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.TagEvent.operation");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_operation(), target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // string created_by = 7;
  if (!this->_internal_created_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_by().data(), static_cast<int>(this->_internal_created_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.TagEvent.created_by");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_created_by(), target);
  }

  // string created_by_type = 8;
  if (!this->_internal_created_by_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_by_type().data(), static_cast<int>(this->_internal_created_by_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.TagEvent.created_by_type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_created_by_type(), target);
  }

  // string session_id = 9;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.TagEvent.session_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.TagEvent)
  return target;
}

size_t TagEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.TagEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag_event_uuid = 1;
  if (!this->_internal_tag_event_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag_event_uuid());
  }

  // string document_uuid = 2;
  if (!this->_internal_document_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_uuid());
  }

  // string tag = 4;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string operation = 5;
  if (!this->_internal_operation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation());
  }

  // string created_by = 7;
  if (!this->_internal_created_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_by());
  }

  // string created_by_type = 8;
  if (!this->_internal_created_by_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_by_type());
  }

  // string session_id = 9;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // int32 document_version = 3;
  if (this->_internal_document_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_document_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TagEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagEvent::GetClassData() const { return &_class_data_; }


void TagEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TagEvent*>(&to_msg);
  auto& from = static_cast<const TagEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.TagEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag_event_uuid().empty()) {
    _this->_internal_set_tag_event_uuid(from._internal_tag_event_uuid());
  }
  if (!from._internal_document_uuid().empty()) {
    _this->_internal_set_document_uuid(from._internal_document_uuid());
  }
  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (!from._internal_operation().empty()) {
    _this->_internal_set_operation(from._internal_operation());
  }
  if (!from._internal_created_by().empty()) {
    _this->_internal_set_created_by(from._internal_created_by());
  }
  if (!from._internal_created_by_type().empty()) {
    _this->_internal_set_created_by_type(from._internal_created_by_type());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_document_version() != 0) {
    _this->_internal_set_document_version(from._internal_document_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagEvent::CopyFrom(const TagEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.TagEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagEvent::IsInitialized() const {
  return true;
}

void TagEvent::InternalSwap(TagEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_event_uuid_, lhs_arena,
      &other->_impl_.tag_event_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_uuid_, lhs_arena,
      &other->_impl_.document_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operation_, lhs_arena,
      &other->_impl_.operation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.created_by_, lhs_arena,
      &other->_impl_.created_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.created_by_type_, lhs_arena,
      &other->_impl_.created_by_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagEvent, _impl_.document_version_)
      + sizeof(TagEvent::_impl_.document_version_)
      - PROTOBUF_FIELD_OFFSET(TagEvent, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[3]);
}

// ===================================================================

class PutDocumentRequest::_Internal {
 public:
  static const ::unhinged::document_store::Document& document(const PutDocumentRequest* msg);
};

const ::unhinged::document_store::Document&
PutDocumentRequest::_Internal::document(const PutDocumentRequest* msg) {
  return *msg->_impl_.document_;
}
PutDocumentRequest::PutDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.PutDocumentRequest)
}
PutDocumentRequest::PutDocumentRequest(const PutDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutDocumentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.document_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document()) {
    _this->_impl_.document_ = new ::unhinged::document_store::Document(*from._impl_.document_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.PutDocumentRequest)
}

inline void PutDocumentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.document_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PutDocumentRequest::~PutDocumentRequest() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.PutDocumentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.document_;
}

void PutDocumentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.PutDocumentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.document_ != nullptr) {
    delete _impl_.document_;
  }
  _impl_.document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutDocumentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.document_store.Document document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutDocumentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.PutDocumentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.document_store.Document document = 1;
  if (this->_internal_has_document()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::document(this),
        _Internal::document(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.PutDocumentRequest)
  return target;
}

size_t PutDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.PutDocumentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unhinged.document_store.Document document = 1;
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutDocumentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutDocumentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutDocumentRequest::GetClassData() const { return &_class_data_; }


void PutDocumentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutDocumentRequest*>(&to_msg);
  auto& from = static_cast<const PutDocumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.PutDocumentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_document()) {
    _this->_internal_mutable_document()->::unhinged::document_store::Document::MergeFrom(
        from._internal_document());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutDocumentRequest::CopyFrom(const PutDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.PutDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutDocumentRequest::IsInitialized() const {
  return true;
}

void PutDocumentRequest::InternalSwap(PutDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.document_, other->_impl_.document_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutDocumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[4]);
}

// ===================================================================

class PutDocumentResponse::_Internal {
 public:
};

PutDocumentResponse::PutDocumentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.PutDocumentResponse)
}
PutDocumentResponse::PutDocumentResponse(const PutDocumentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutDocumentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_uuid().empty()) {
    _this->_impl_.document_uuid_.Set(from._internal_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.PutDocumentResponse)
}

inline void PutDocumentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutDocumentResponse::~PutDocumentResponse() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.PutDocumentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutDocumentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.document_uuid_.Destroy();
}

void PutDocumentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutDocumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.PutDocumentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.document_uuid_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutDocumentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.PutDocumentResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // string document_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.PutDocumentResponse.document_uuid"));
        } else
          goto handle_unusual;
        continue;
      // int32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutDocumentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.PutDocumentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.PutDocumentResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string document_uuid = 3;
  if (!this->_internal_document_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_uuid().data(), static_cast<int>(this->_internal_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.PutDocumentResponse.document_uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_document_uuid(), target);
  }

  // int32 version = 4;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.PutDocumentResponse)
  return target;
}

size_t PutDocumentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.PutDocumentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string document_uuid = 3;
  if (!this->_internal_document_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_uuid());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 version = 4;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutDocumentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutDocumentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutDocumentResponse::GetClassData() const { return &_class_data_; }


void PutDocumentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutDocumentResponse*>(&to_msg);
  auto& from = static_cast<const PutDocumentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.PutDocumentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_document_uuid().empty()) {
    _this->_internal_set_document_uuid(from._internal_document_uuid());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutDocumentResponse::CopyFrom(const PutDocumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.PutDocumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutDocumentResponse::IsInitialized() const {
  return true;
}

void PutDocumentResponse::InternalSwap(PutDocumentResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_uuid_, lhs_arena,
      &other->_impl_.document_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutDocumentResponse, _impl_.version_)
      + sizeof(PutDocumentResponse::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(PutDocumentResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PutDocumentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[5]);
}

// ===================================================================

class PutDocumentsRequest::_Internal {
 public:
};

PutDocumentsRequest::PutDocumentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.PutDocumentsRequest)
}
PutDocumentsRequest::PutDocumentsRequest(const PutDocumentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutDocumentsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.documents_){from._impl_.documents_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.PutDocumentsRequest)
}

inline void PutDocumentsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.documents_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PutDocumentsRequest::~PutDocumentsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.PutDocumentsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutDocumentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.documents_.~RepeatedPtrField();
}

void PutDocumentsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutDocumentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.PutDocumentsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.documents_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutDocumentsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.document_store.Document documents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_documents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutDocumentsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.PutDocumentsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.document_store.Document documents = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_documents_size()); i < n; i++) {
    const auto& repfield = this->_internal_documents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.PutDocumentsRequest)
  return target;
}

size_t PutDocumentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.PutDocumentsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.document_store.Document documents = 1;
  total_size += 1UL * this->_internal_documents_size();
  for (const auto& msg : this->_impl_.documents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutDocumentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutDocumentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutDocumentsRequest::GetClassData() const { return &_class_data_; }


void PutDocumentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutDocumentsRequest*>(&to_msg);
  auto& from = static_cast<const PutDocumentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.PutDocumentsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.documents_.MergeFrom(from._impl_.documents_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutDocumentsRequest::CopyFrom(const PutDocumentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.PutDocumentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutDocumentsRequest::IsInitialized() const {
  return true;
}

void PutDocumentsRequest::InternalSwap(PutDocumentsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.documents_.InternalSwap(&other->_impl_.documents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutDocumentsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[6]);
}

// ===================================================================

class PutDocumentReceipt::_Internal {
 public:
};

PutDocumentReceipt::PutDocumentReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.PutDocumentReceipt)
}
PutDocumentReceipt::PutDocumentReceipt(const PutDocumentReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutDocumentReceipt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.document_uuid_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_uuid().empty()) {
    _this->_impl_.document_uuid_.Set(from._internal_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.PutDocumentReceipt)
}

inline void PutDocumentReceipt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.document_uuid_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutDocumentReceipt::~PutDocumentReceipt() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.PutDocumentReceipt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutDocumentReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_uuid_.Destroy();
  _impl_.error_message_.Destroy();
}

void PutDocumentReceipt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutDocumentReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.PutDocumentReceipt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_uuid_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutDocumentReceipt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.PutDocumentReceipt.document_uuid"));
        } else
          goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.PutDocumentReceipt.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutDocumentReceipt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.PutDocumentReceipt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_uuid().data(), static_cast<int>(this->_internal_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.PutDocumentReceipt.document_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_uuid(), target);
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.PutDocumentReceipt.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.PutDocumentReceipt)
  return target;
}

size_t PutDocumentReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.PutDocumentReceipt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_uuid());
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutDocumentReceipt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutDocumentReceipt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutDocumentReceipt::GetClassData() const { return &_class_data_; }


void PutDocumentReceipt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutDocumentReceipt*>(&to_msg);
  auto& from = static_cast<const PutDocumentReceipt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.PutDocumentReceipt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_document_uuid().empty()) {
    _this->_internal_set_document_uuid(from._internal_document_uuid());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutDocumentReceipt::CopyFrom(const PutDocumentReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.PutDocumentReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutDocumentReceipt::IsInitialized() const {
  return true;
}

void PutDocumentReceipt::InternalSwap(PutDocumentReceipt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_uuid_, lhs_arena,
      &other->_impl_.document_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutDocumentReceipt, _impl_.success_)
      + sizeof(PutDocumentReceipt::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(PutDocumentReceipt, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PutDocumentReceipt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[7]);
}

// ===================================================================

class PutDocumentsResponse::_Internal {
 public:
};

PutDocumentsResponse::PutDocumentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.PutDocumentsResponse)
}
PutDocumentsResponse::PutDocumentsResponse(const PutDocumentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutDocumentsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.receipts_){from._impl_.receipts_}
    , decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.PutDocumentsResponse)
}

inline void PutDocumentsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.receipts_){arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutDocumentsResponse::~PutDocumentsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.PutDocumentsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutDocumentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.receipts_.~RepeatedPtrField();
  _impl_.message_.Destroy();
}

void PutDocumentsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutDocumentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.PutDocumentsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.receipts_.Clear();
  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutDocumentsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.PutDocumentsResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.document_store.PutDocumentReceipt receipts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_receipts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutDocumentsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.PutDocumentsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.PutDocumentsResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated .unhinged.document_store.PutDocumentReceipt receipts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_receipts_size()); i < n; i++) {
    const auto& repfield = this->_internal_receipts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.PutDocumentsResponse)
  return target;
}

size_t PutDocumentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.PutDocumentsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.document_store.PutDocumentReceipt receipts = 3;
  total_size += 1UL * this->_internal_receipts_size();
  for (const auto& msg : this->_impl_.receipts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutDocumentsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutDocumentsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutDocumentsResponse::GetClassData() const { return &_class_data_; }


void PutDocumentsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutDocumentsResponse*>(&to_msg);
  auto& from = static_cast<const PutDocumentsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.PutDocumentsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.receipts_.MergeFrom(from._impl_.receipts_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutDocumentsResponse::CopyFrom(const PutDocumentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.PutDocumentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutDocumentsResponse::IsInitialized() const {
  return true;
}

void PutDocumentsResponse::InternalSwap(PutDocumentsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.receipts_.InternalSwap(&other->_impl_.receipts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutDocumentsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[8]);
}

// ===================================================================

class GetDocumentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDocumentRequest>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetDocumentRequest::GetDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.GetDocumentRequest)
}
GetDocumentRequest::GetDocumentRequest(const GetDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDocumentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.include_body_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_uuid().empty()) {
    _this->_impl_.document_uuid_.Set(from._internal_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_body_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.include_body_));
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.GetDocumentRequest)
}

inline void GetDocumentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.include_body_){false}
  };
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDocumentRequest::~GetDocumentRequest() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.GetDocumentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_uuid_.Destroy();
  _impl_.tag_.Destroy();
}

void GetDocumentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.GetDocumentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_uuid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.tag_.ClearNonDefaultToEmpty();
  }
  _impl_.version_ = 0;
  _impl_.include_body_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDocumentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.GetDocumentRequest.document_uuid"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.GetDocumentRequest.tag"));
        } else
          goto handle_unusual;
        continue;
      // bool include_body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.include_body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDocumentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.GetDocumentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_uuid().data(), static_cast<int>(this->_internal_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.GetDocumentRequest.document_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_uuid(), target);
  }

  // optional int32 version = 2;
  if (_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // optional string tag = 3;
  if (_internal_has_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.GetDocumentRequest.tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // bool include_body = 4;
  if (this->_internal_include_body() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_include_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.GetDocumentRequest)
  return target;
}

size_t GetDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.GetDocumentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_uuid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tag = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional int32 version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

  }
  // bool include_body = 4;
  if (this->_internal_include_body() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDocumentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDocumentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDocumentRequest::GetClassData() const { return &_class_data_; }


void GetDocumentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDocumentRequest*>(&to_msg);
  auto& from = static_cast<const GetDocumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.GetDocumentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_document_uuid().empty()) {
    _this->_internal_set_document_uuid(from._internal_document_uuid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_include_body() != 0) {
    _this->_internal_set_include_body(from._internal_include_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDocumentRequest::CopyFrom(const GetDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.GetDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocumentRequest::IsInitialized() const {
  return true;
}

void GetDocumentRequest::InternalSwap(GetDocumentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_uuid_, lhs_arena,
      &other->_impl_.document_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDocumentRequest, _impl_.include_body_)
      + sizeof(GetDocumentRequest::_impl_.include_body_)
      - PROTOBUF_FIELD_OFFSET(GetDocumentRequest, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDocumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[9]);
}

// ===================================================================

class GetDocumentResponse::_Internal {
 public:
  static const ::unhinged::document_store::Document& document(const GetDocumentResponse* msg);
};

const ::unhinged::document_store::Document&
GetDocumentResponse::_Internal::document(const GetDocumentResponse* msg) {
  return *msg->_impl_.document_;
}
GetDocumentResponse::GetDocumentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.GetDocumentResponse)
}
GetDocumentResponse::GetDocumentResponse(const GetDocumentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDocumentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_document()) {
    _this->_impl_.document_ = new ::unhinged::document_store::Document(*from._impl_.document_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.GetDocumentResponse)
}

inline void GetDocumentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDocumentResponse::~GetDocumentResponse() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.GetDocumentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDocumentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.document_;
}

void GetDocumentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDocumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.GetDocumentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.document_ != nullptr) {
    delete _impl_.document_;
  }
  _impl_.document_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDocumentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.GetDocumentResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.document_store.Document document = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDocumentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.GetDocumentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.GetDocumentResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .unhinged.document_store.Document document = 3;
  if (this->_internal_has_document()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::document(this),
        _Internal::document(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.GetDocumentResponse)
  return target;
}

size_t GetDocumentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.GetDocumentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .unhinged.document_store.Document document = 3;
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDocumentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDocumentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDocumentResponse::GetClassData() const { return &_class_data_; }


void GetDocumentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDocumentResponse*>(&to_msg);
  auto& from = static_cast<const GetDocumentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.GetDocumentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_document()) {
    _this->_internal_mutable_document()->::unhinged::document_store::Document::MergeFrom(
        from._internal_document());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDocumentResponse::CopyFrom(const GetDocumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.GetDocumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocumentResponse::IsInitialized() const {
  return true;
}

void GetDocumentResponse::InternalSwap(GetDocumentResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDocumentResponse, _impl_.success_)
      + sizeof(GetDocumentResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetDocumentResponse, _impl_.document_)>(
          reinterpret_cast<char*>(&_impl_.document_),
          reinterpret_cast<char*>(&other->_impl_.document_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDocumentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[10]);
}

// ===================================================================

class ListDocumentsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListDocumentsRequest>()._impl_._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& pagination_token(const ListDocumentsRequest* msg);
  static void set_has_pagination_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ListDocumentsRequest::_Internal::pagination_token(const ListDocumentsRequest* msg) {
  return *msg->_impl_.pagination_token_;
}
void ListDocumentsRequest::clear_pagination_token() {
  if (_impl_.pagination_token_ != nullptr) _impl_.pagination_token_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
ListDocumentsRequest::ListDocumentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.ListDocumentsRequest)
}
ListDocumentsRequest::ListDocumentsRequest(const ListDocumentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDocumentsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.pagination_token_){nullptr}
    , decltype(_impl_.page_size_){}
    , decltype(_impl_.include_body_){}
    , decltype(_impl_.latest_versions_only_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_namespace_()) {
    _this->_impl_.namespace__.Set(from._internal_namespace_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination_token()) {
    _this->_impl_.pagination_token_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.pagination_token_);
  }
  ::memcpy(&_impl_.page_size_, &from._impl_.page_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.latest_versions_only_) -
    reinterpret_cast<char*>(&_impl_.page_size_)) + sizeof(_impl_.latest_versions_only_));
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.ListDocumentsRequest)
}

inline void ListDocumentsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.pagination_token_){nullptr}
    , decltype(_impl_.page_size_){0}
    , decltype(_impl_.include_body_){false}
    , decltype(_impl_.latest_versions_only_){false}
  };
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDocumentsRequest::~ListDocumentsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.ListDocumentsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDocumentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.namespace__.Destroy();
  _impl_.type_.Destroy();
  _impl_.tag_.Destroy();
  _impl_.session_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_token_;
}

void ListDocumentsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDocumentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.ListDocumentsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.session_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.pagination_token_ != nullptr);
      _impl_.pagination_token_->Clear();
    }
  }
  ::memset(&_impl_.page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.latest_versions_only_) -
      reinterpret_cast<char*>(&_impl_.page_size_)) + sizeof(_impl_.latest_versions_only_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDocumentsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ListDocumentsRequest.namespace"));
        } else
          goto handle_unusual;
        continue;
      // optional string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ListDocumentsRequest.type"));
        } else
          goto handle_unusual;
        continue;
      // optional string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ListDocumentsRequest.tag"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ListDocumentsRequest.session_id"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp pagination_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_body = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.include_body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool latest_versions_only = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.latest_versions_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDocumentsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.ListDocumentsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string namespace = 1;
  if (_internal_has_namespace_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ListDocumentsRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string type = 2;
  if (_internal_has_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ListDocumentsRequest.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // optional string tag = 3;
  if (_internal_has_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ListDocumentsRequest.tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // optional string session_id = 4;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ListDocumentsRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_session_id(), target);
  }

  // optional .google.protobuf.Timestamp pagination_token = 5;
  if (_internal_has_pagination_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pagination_token(this),
        _Internal::pagination_token(this).GetCachedSize(), target, stream);
  }

  // int32 page_size = 6;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_page_size(), target);
  }

  // bool include_body = 7;
  if (this->_internal_include_body() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_include_body(), target);
  }

  // bool latest_versions_only = 8;
  if (this->_internal_latest_versions_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_latest_versions_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.ListDocumentsRequest)
  return target;
}

size_t ListDocumentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.ListDocumentsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string tag = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string session_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional .google.protobuf.Timestamp pagination_token = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pagination_token_);
    }

  }
  // int32 page_size = 6;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  // bool include_body = 7;
  if (this->_internal_include_body() != 0) {
    total_size += 1 + 1;
  }

  // bool latest_versions_only = 8;
  if (this->_internal_latest_versions_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDocumentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDocumentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDocumentsRequest::GetClassData() const { return &_class_data_; }


void ListDocumentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDocumentsRequest*>(&to_msg);
  auto& from = static_cast<const ListDocumentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.ListDocumentsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_pagination_token()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_pagination_token());
    }
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  if (from._internal_include_body() != 0) {
    _this->_internal_set_include_body(from._internal_include_body());
  }
  if (from._internal_latest_versions_only() != 0) {
    _this->_internal_set_latest_versions_only(from._internal_latest_versions_only());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDocumentsRequest::CopyFrom(const ListDocumentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.ListDocumentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDocumentsRequest::IsInitialized() const {
  return true;
}

void ListDocumentsRequest::InternalSwap(ListDocumentsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace__, lhs_arena,
      &other->_impl_.namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDocumentsRequest, _impl_.latest_versions_only_)
      + sizeof(ListDocumentsRequest::_impl_.latest_versions_only_)
      - PROTOBUF_FIELD_OFFSET(ListDocumentsRequest, _impl_.pagination_token_)>(
          reinterpret_cast<char*>(&_impl_.pagination_token_),
          reinterpret_cast<char*>(&other->_impl_.pagination_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDocumentsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[11]);
}

// ===================================================================

class ListDocumentsResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& next_pagination_token(const ListDocumentsResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ListDocumentsResponse::_Internal::next_pagination_token(const ListDocumentsResponse* msg) {
  return *msg->_impl_.next_pagination_token_;
}
void ListDocumentsResponse::clear_next_pagination_token() {
  if (GetArenaForAllocation() == nullptr && _impl_.next_pagination_token_ != nullptr) {
    delete _impl_.next_pagination_token_;
  }
  _impl_.next_pagination_token_ = nullptr;
}
ListDocumentsResponse::ListDocumentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.ListDocumentsResponse)
}
ListDocumentsResponse::ListDocumentsResponse(const ListDocumentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDocumentsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.documents_){from._impl_.documents_}
    , decltype(_impl_.message_){}
    , decltype(_impl_.next_pagination_token_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.total_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_next_pagination_token()) {
    _this->_impl_.next_pagination_token_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.next_pagination_token_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_count_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.total_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.ListDocumentsResponse)
}

inline void ListDocumentsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.documents_){arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.next_pagination_token_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.total_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDocumentsResponse::~ListDocumentsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.ListDocumentsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDocumentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.documents_.~RepeatedPtrField();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.next_pagination_token_;
}

void ListDocumentsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDocumentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.ListDocumentsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.documents_.Clear();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.next_pagination_token_ != nullptr) {
    delete _impl_.next_pagination_token_;
  }
  _impl_.next_pagination_token_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_count_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.total_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDocumentsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ListDocumentsResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.document_store.Document documents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_documents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp next_pagination_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_pagination_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDocumentsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.ListDocumentsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ListDocumentsResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated .unhinged.document_store.Document documents = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_documents_size()); i < n; i++) {
    const auto& repfield = this->_internal_documents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp next_pagination_token = 4;
  if (this->_internal_has_next_pagination_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::next_pagination_token(this),
        _Internal::next_pagination_token(this).GetCachedSize(), target, stream);
  }

  // int32 total_count = 5;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.ListDocumentsResponse)
  return target;
}

size_t ListDocumentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.ListDocumentsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.document_store.Document documents = 3;
  total_size += 1UL * this->_internal_documents_size();
  for (const auto& msg : this->_impl_.documents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp next_pagination_token = 4;
  if (this->_internal_has_next_pagination_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_pagination_token_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 total_count = 5;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDocumentsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDocumentsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDocumentsResponse::GetClassData() const { return &_class_data_; }


void ListDocumentsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDocumentsResponse*>(&to_msg);
  auto& from = static_cast<const ListDocumentsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.ListDocumentsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.documents_.MergeFrom(from._impl_.documents_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_next_pagination_token()) {
    _this->_internal_mutable_next_pagination_token()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_next_pagination_token());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDocumentsResponse::CopyFrom(const ListDocumentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.ListDocumentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDocumentsResponse::IsInitialized() const {
  return true;
}

void ListDocumentsResponse::InternalSwap(ListDocumentsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.documents_.InternalSwap(&other->_impl_.documents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDocumentsResponse, _impl_.total_count_)
      + sizeof(ListDocumentsResponse::_impl_.total_count_)
      - PROTOBUF_FIELD_OFFSET(ListDocumentsResponse, _impl_.next_pagination_token_)>(
          reinterpret_cast<char*>(&_impl_.next_pagination_token_),
          reinterpret_cast<char*>(&other->_impl_.next_pagination_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDocumentsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[12]);
}

// ===================================================================

class ListDocumentVersionsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListDocumentVersionsRequest>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& pagination_token(const ListDocumentVersionsRequest* msg);
  static void set_has_pagination_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ListDocumentVersionsRequest::_Internal::pagination_token(const ListDocumentVersionsRequest* msg) {
  return *msg->_impl_.pagination_token_;
}
void ListDocumentVersionsRequest::clear_pagination_token() {
  if (_impl_.pagination_token_ != nullptr) _impl_.pagination_token_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ListDocumentVersionsRequest::ListDocumentVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.ListDocumentVersionsRequest)
}
ListDocumentVersionsRequest::ListDocumentVersionsRequest(const ListDocumentVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDocumentVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.pagination_token_){nullptr}
    , decltype(_impl_.page_size_){}
    , decltype(_impl_.include_body_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_uuid().empty()) {
    _this->_impl_.document_uuid_.Set(from._internal_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination_token()) {
    _this->_impl_.pagination_token_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.pagination_token_);
  }
  ::memcpy(&_impl_.page_size_, &from._impl_.page_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_body_) -
    reinterpret_cast<char*>(&_impl_.page_size_)) + sizeof(_impl_.include_body_));
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.ListDocumentVersionsRequest)
}

inline void ListDocumentVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.pagination_token_){nullptr}
    , decltype(_impl_.page_size_){0}
    , decltype(_impl_.include_body_){false}
  };
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDocumentVersionsRequest::~ListDocumentVersionsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.ListDocumentVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDocumentVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_token_;
}

void ListDocumentVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDocumentVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.ListDocumentVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_uuid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.pagination_token_ != nullptr);
    _impl_.pagination_token_->Clear();
  }
  ::memset(&_impl_.page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.include_body_) -
      reinterpret_cast<char*>(&_impl_.page_size_)) + sizeof(_impl_.include_body_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDocumentVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ListDocumentVersionsRequest.document_uuid"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp pagination_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.include_body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDocumentVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.ListDocumentVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_uuid().data(), static_cast<int>(this->_internal_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ListDocumentVersionsRequest.document_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_uuid(), target);
  }

  // optional .google.protobuf.Timestamp pagination_token = 2;
  if (_internal_has_pagination_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination_token(this),
        _Internal::pagination_token(this).GetCachedSize(), target, stream);
  }

  // int32 page_size = 3;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_page_size(), target);
  }

  // bool include_body = 4;
  if (this->_internal_include_body() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_include_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.ListDocumentVersionsRequest)
  return target;
}

size_t ListDocumentVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.ListDocumentVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_uuid());
  }

  // optional .google.protobuf.Timestamp pagination_token = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_token_);
  }

  // int32 page_size = 3;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  // bool include_body = 4;
  if (this->_internal_include_body() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDocumentVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDocumentVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDocumentVersionsRequest::GetClassData() const { return &_class_data_; }


void ListDocumentVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDocumentVersionsRequest*>(&to_msg);
  auto& from = static_cast<const ListDocumentVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.ListDocumentVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_document_uuid().empty()) {
    _this->_internal_set_document_uuid(from._internal_document_uuid());
  }
  if (from._internal_has_pagination_token()) {
    _this->_internal_mutable_pagination_token()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_pagination_token());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  if (from._internal_include_body() != 0) {
    _this->_internal_set_include_body(from._internal_include_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDocumentVersionsRequest::CopyFrom(const ListDocumentVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.ListDocumentVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDocumentVersionsRequest::IsInitialized() const {
  return true;
}

void ListDocumentVersionsRequest::InternalSwap(ListDocumentVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_uuid_, lhs_arena,
      &other->_impl_.document_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDocumentVersionsRequest, _impl_.include_body_)
      + sizeof(ListDocumentVersionsRequest::_impl_.include_body_)
      - PROTOBUF_FIELD_OFFSET(ListDocumentVersionsRequest, _impl_.pagination_token_)>(
          reinterpret_cast<char*>(&_impl_.pagination_token_),
          reinterpret_cast<char*>(&other->_impl_.pagination_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDocumentVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[13]);
}

// ===================================================================

class ListDocumentVersionsResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& next_pagination_token(const ListDocumentVersionsResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ListDocumentVersionsResponse::_Internal::next_pagination_token(const ListDocumentVersionsResponse* msg) {
  return *msg->_impl_.next_pagination_token_;
}
void ListDocumentVersionsResponse::clear_next_pagination_token() {
  if (GetArenaForAllocation() == nullptr && _impl_.next_pagination_token_ != nullptr) {
    delete _impl_.next_pagination_token_;
  }
  _impl_.next_pagination_token_ = nullptr;
}
ListDocumentVersionsResponse::ListDocumentVersionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.ListDocumentVersionsResponse)
}
ListDocumentVersionsResponse::ListDocumentVersionsResponse(const ListDocumentVersionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDocumentVersionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.documents_){from._impl_.documents_}
    , decltype(_impl_.message_){}
    , decltype(_impl_.next_pagination_token_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.total_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_next_pagination_token()) {
    _this->_impl_.next_pagination_token_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.next_pagination_token_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_count_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.total_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.ListDocumentVersionsResponse)
}

inline void ListDocumentVersionsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.documents_){arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.next_pagination_token_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.total_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDocumentVersionsResponse::~ListDocumentVersionsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.ListDocumentVersionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDocumentVersionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.documents_.~RepeatedPtrField();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.next_pagination_token_;
}

void ListDocumentVersionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDocumentVersionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.ListDocumentVersionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.documents_.Clear();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.next_pagination_token_ != nullptr) {
    delete _impl_.next_pagination_token_;
  }
  _impl_.next_pagination_token_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_count_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.total_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDocumentVersionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ListDocumentVersionsResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.document_store.Document documents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_documents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp next_pagination_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_pagination_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDocumentVersionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.ListDocumentVersionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ListDocumentVersionsResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated .unhinged.document_store.Document documents = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_documents_size()); i < n; i++) {
    const auto& repfield = this->_internal_documents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp next_pagination_token = 4;
  if (this->_internal_has_next_pagination_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::next_pagination_token(this),
        _Internal::next_pagination_token(this).GetCachedSize(), target, stream);
  }

  // int32 total_count = 5;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.ListDocumentVersionsResponse)
  return target;
}

size_t ListDocumentVersionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.ListDocumentVersionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.document_store.Document documents = 3;
  total_size += 1UL * this->_internal_documents_size();
  for (const auto& msg : this->_impl_.documents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp next_pagination_token = 4;
  if (this->_internal_has_next_pagination_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_pagination_token_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 total_count = 5;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDocumentVersionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDocumentVersionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDocumentVersionsResponse::GetClassData() const { return &_class_data_; }


void ListDocumentVersionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDocumentVersionsResponse*>(&to_msg);
  auto& from = static_cast<const ListDocumentVersionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.ListDocumentVersionsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.documents_.MergeFrom(from._impl_.documents_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_next_pagination_token()) {
    _this->_internal_mutable_next_pagination_token()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_next_pagination_token());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDocumentVersionsResponse::CopyFrom(const ListDocumentVersionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.ListDocumentVersionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDocumentVersionsResponse::IsInitialized() const {
  return true;
}

void ListDocumentVersionsResponse::InternalSwap(ListDocumentVersionsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.documents_.InternalSwap(&other->_impl_.documents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDocumentVersionsResponse, _impl_.total_count_)
      + sizeof(ListDocumentVersionsResponse::_impl_.total_count_)
      - PROTOBUF_FIELD_OFFSET(ListDocumentVersionsResponse, _impl_.next_pagination_token_)>(
          reinterpret_cast<char*>(&_impl_.next_pagination_token_),
          reinterpret_cast<char*>(&other->_impl_.next_pagination_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDocumentVersionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[14]);
}

// ===================================================================

class TagDocumentRequest::_Internal {
 public:
};

TagDocumentRequest::TagDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.TagDocumentRequest)
}
TagDocumentRequest::TagDocumentRequest(const TagDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TagDocumentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.document_uuid_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.tagged_by_){}
    , decltype(_impl_.tagged_by_type_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_uuid().empty()) {
    _this->_impl_.document_uuid_.Set(from._internal_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tagged_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tagged_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tagged_by().empty()) {
    _this->_impl_.tagged_by_.Set(from._internal_tagged_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tagged_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tagged_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tagged_by_type().empty()) {
    _this->_impl_.tagged_by_type_.Set(from._internal_tagged_by_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.TagDocumentRequest)
}

inline void TagDocumentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.document_uuid_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.tagged_by_){}
    , decltype(_impl_.tagged_by_type_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tagged_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tagged_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tagged_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tagged_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TagDocumentRequest::~TagDocumentRequest() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.TagDocumentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TagDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_uuid_.Destroy();
  _impl_.tag_.Destroy();
  _impl_.tagged_by_.Destroy();
  _impl_.tagged_by_type_.Destroy();
  _impl_.session_id_.Destroy();
}

void TagDocumentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TagDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.TagDocumentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_uuid_.ClearToEmpty();
  _impl_.tag_.ClearToEmpty();
  _impl_.tagged_by_.ClearToEmpty();
  _impl_.tagged_by_type_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagDocumentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.TagDocumentRequest.document_uuid"));
        } else
          goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.TagDocumentRequest.tag"));
        } else
          goto handle_unusual;
        continue;
      // string tagged_by = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tagged_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.TagDocumentRequest.tagged_by"));
        } else
          goto handle_unusual;
        continue;
      // string tagged_by_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tagged_by_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.TagDocumentRequest.tagged_by_type"));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.TagDocumentRequest.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TagDocumentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.TagDocumentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_uuid().data(), static_cast<int>(this->_internal_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.TagDocumentRequest.document_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_uuid(), target);
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // string tag = 3;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.TagDocumentRequest.tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // string tagged_by = 4;
  if (!this->_internal_tagged_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagged_by().data(), static_cast<int>(this->_internal_tagged_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.TagDocumentRequest.tagged_by");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tagged_by(), target);
  }

  // string tagged_by_type = 5;
  if (!this->_internal_tagged_by_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagged_by_type().data(), static_cast<int>(this->_internal_tagged_by_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.TagDocumentRequest.tagged_by_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tagged_by_type(), target);
  }

  // string session_id = 6;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.TagDocumentRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.TagDocumentRequest)
  return target;
}

size_t TagDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.TagDocumentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_uuid());
  }

  // string tag = 3;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string tagged_by = 4;
  if (!this->_internal_tagged_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagged_by());
  }

  // string tagged_by_type = 5;
  if (!this->_internal_tagged_by_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagged_by_type());
  }

  // string session_id = 6;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagDocumentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TagDocumentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagDocumentRequest::GetClassData() const { return &_class_data_; }


void TagDocumentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TagDocumentRequest*>(&to_msg);
  auto& from = static_cast<const TagDocumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.TagDocumentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_document_uuid().empty()) {
    _this->_internal_set_document_uuid(from._internal_document_uuid());
  }
  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (!from._internal_tagged_by().empty()) {
    _this->_internal_set_tagged_by(from._internal_tagged_by());
  }
  if (!from._internal_tagged_by_type().empty()) {
    _this->_internal_set_tagged_by_type(from._internal_tagged_by_type());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagDocumentRequest::CopyFrom(const TagDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.TagDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagDocumentRequest::IsInitialized() const {
  return true;
}

void TagDocumentRequest::InternalSwap(TagDocumentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_uuid_, lhs_arena,
      &other->_impl_.document_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tagged_by_, lhs_arena,
      &other->_impl_.tagged_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tagged_by_type_, lhs_arena,
      &other->_impl_.tagged_by_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagDocumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[15]);
}

// ===================================================================

class TagDocumentResponse::_Internal {
 public:
};

TagDocumentResponse::TagDocumentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.TagDocumentResponse)
}
TagDocumentResponse::TagDocumentResponse(const TagDocumentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TagDocumentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.TagDocumentResponse)
}

inline void TagDocumentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TagDocumentResponse::~TagDocumentResponse() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.TagDocumentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TagDocumentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void TagDocumentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TagDocumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.TagDocumentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagDocumentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.TagDocumentResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TagDocumentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.TagDocumentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.TagDocumentResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.TagDocumentResponse)
  return target;
}

size_t TagDocumentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.TagDocumentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagDocumentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TagDocumentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagDocumentResponse::GetClassData() const { return &_class_data_; }


void TagDocumentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TagDocumentResponse*>(&to_msg);
  auto& from = static_cast<const TagDocumentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.TagDocumentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagDocumentResponse::CopyFrom(const TagDocumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.TagDocumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagDocumentResponse::IsInitialized() const {
  return true;
}

void TagDocumentResponse::InternalSwap(TagDocumentResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagDocumentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[16]);
}

// ===================================================================

class ListActiveTagsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListActiveTagsRequest>()._impl_._has_bits_);
  static void set_has_document_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& pagination_token(const ListActiveTagsRequest* msg);
  static void set_has_pagination_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ListActiveTagsRequest::_Internal::pagination_token(const ListActiveTagsRequest* msg) {
  return *msg->_impl_.pagination_token_;
}
void ListActiveTagsRequest::clear_pagination_token() {
  if (_impl_.pagination_token_ != nullptr) _impl_.pagination_token_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ListActiveTagsRequest::ListActiveTagsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.ListActiveTagsRequest)
}
ListActiveTagsRequest::ListActiveTagsRequest(const ListActiveTagsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListActiveTagsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.pagination_token_){nullptr}
    , decltype(_impl_.document_version_){}
    , decltype(_impl_.page_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_uuid().empty()) {
    _this->_impl_.document_uuid_.Set(from._internal_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination_token()) {
    _this->_impl_.pagination_token_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.pagination_token_);
  }
  ::memcpy(&_impl_.document_version_, &from._impl_.document_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.page_size_) -
    reinterpret_cast<char*>(&_impl_.document_version_)) + sizeof(_impl_.page_size_));
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.ListActiveTagsRequest)
}

inline void ListActiveTagsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.pagination_token_){nullptr}
    , decltype(_impl_.document_version_){0}
    , decltype(_impl_.page_size_){0}
  };
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListActiveTagsRequest::~ListActiveTagsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.ListActiveTagsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListActiveTagsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_token_;
}

void ListActiveTagsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListActiveTagsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.ListActiveTagsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_uuid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.pagination_token_ != nullptr);
    _impl_.pagination_token_->Clear();
  }
  _impl_.document_version_ = 0;
  _impl_.page_size_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListActiveTagsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ListActiveTagsRequest.document_uuid"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 document_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_document_version(&has_bits);
          _impl_.document_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp pagination_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListActiveTagsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.ListActiveTagsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_uuid().data(), static_cast<int>(this->_internal_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ListActiveTagsRequest.document_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_uuid(), target);
  }

  // optional int32 document_version = 2;
  if (_internal_has_document_version()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_document_version(), target);
  }

  // optional .google.protobuf.Timestamp pagination_token = 3;
  if (_internal_has_pagination_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination_token(this),
        _Internal::pagination_token(this).GetCachedSize(), target, stream);
  }

  // int32 page_size = 4;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_page_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.ListActiveTagsRequest)
  return target;
}

size_t ListActiveTagsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.ListActiveTagsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_uuid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp pagination_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pagination_token_);
    }

    // optional int32 document_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_document_version());
    }

  }
  // int32 page_size = 4;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListActiveTagsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListActiveTagsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListActiveTagsRequest::GetClassData() const { return &_class_data_; }


void ListActiveTagsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListActiveTagsRequest*>(&to_msg);
  auto& from = static_cast<const ListActiveTagsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.ListActiveTagsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_document_uuid().empty()) {
    _this->_internal_set_document_uuid(from._internal_document_uuid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pagination_token()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_pagination_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.document_version_ = from._impl_.document_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListActiveTagsRequest::CopyFrom(const ListActiveTagsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.ListActiveTagsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListActiveTagsRequest::IsInitialized() const {
  return true;
}

void ListActiveTagsRequest::InternalSwap(ListActiveTagsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_uuid_, lhs_arena,
      &other->_impl_.document_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListActiveTagsRequest, _impl_.page_size_)
      + sizeof(ListActiveTagsRequest::_impl_.page_size_)
      - PROTOBUF_FIELD_OFFSET(ListActiveTagsRequest, _impl_.pagination_token_)>(
          reinterpret_cast<char*>(&_impl_.pagination_token_),
          reinterpret_cast<char*>(&other->_impl_.pagination_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListActiveTagsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[17]);
}

// ===================================================================

class ListActiveTagsResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& next_pagination_token(const ListActiveTagsResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ListActiveTagsResponse::_Internal::next_pagination_token(const ListActiveTagsResponse* msg) {
  return *msg->_impl_.next_pagination_token_;
}
void ListActiveTagsResponse::clear_next_pagination_token() {
  if (GetArenaForAllocation() == nullptr && _impl_.next_pagination_token_ != nullptr) {
    delete _impl_.next_pagination_token_;
  }
  _impl_.next_pagination_token_ = nullptr;
}
ListActiveTagsResponse::ListActiveTagsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.ListActiveTagsResponse)
}
ListActiveTagsResponse::ListActiveTagsResponse(const ListActiveTagsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListActiveTagsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.message_){}
    , decltype(_impl_.next_pagination_token_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.total_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_next_pagination_token()) {
    _this->_impl_.next_pagination_token_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.next_pagination_token_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_count_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.total_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.ListActiveTagsResponse)
}

inline void ListActiveTagsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.next_pagination_token_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.total_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListActiveTagsResponse::~ListActiveTagsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.ListActiveTagsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListActiveTagsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.next_pagination_token_;
}

void ListActiveTagsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListActiveTagsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.ListActiveTagsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.next_pagination_token_ != nullptr) {
    delete _impl_.next_pagination_token_;
  }
  _impl_.next_pagination_token_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_count_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.total_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListActiveTagsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ListActiveTagsResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.document_store.ActiveTag tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp next_pagination_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_pagination_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListActiveTagsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.ListActiveTagsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ListActiveTagsResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated .unhinged.document_store.ActiveTag tags = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tags_size()); i < n; i++) {
    const auto& repfield = this->_internal_tags(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp next_pagination_token = 4;
  if (this->_internal_has_next_pagination_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::next_pagination_token(this),
        _Internal::next_pagination_token(this).GetCachedSize(), target, stream);
  }

  // int32 total_count = 5;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.ListActiveTagsResponse)
  return target;
}

size_t ListActiveTagsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.ListActiveTagsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.document_store.ActiveTag tags = 3;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->_impl_.tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp next_pagination_token = 4;
  if (this->_internal_has_next_pagination_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_pagination_token_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 total_count = 5;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListActiveTagsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListActiveTagsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListActiveTagsResponse::GetClassData() const { return &_class_data_; }


void ListActiveTagsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListActiveTagsResponse*>(&to_msg);
  auto& from = static_cast<const ListActiveTagsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.ListActiveTagsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_next_pagination_token()) {
    _this->_internal_mutable_next_pagination_token()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_next_pagination_token());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListActiveTagsResponse::CopyFrom(const ListActiveTagsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.ListActiveTagsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListActiveTagsResponse::IsInitialized() const {
  return true;
}

void ListActiveTagsResponse::InternalSwap(ListActiveTagsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListActiveTagsResponse, _impl_.total_count_)
      + sizeof(ListActiveTagsResponse::_impl_.total_count_)
      - PROTOBUF_FIELD_OFFSET(ListActiveTagsResponse, _impl_.next_pagination_token_)>(
          reinterpret_cast<char*>(&_impl_.next_pagination_token_),
          reinterpret_cast<char*>(&other->_impl_.next_pagination_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListActiveTagsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[18]);
}

// ===================================================================

class ListTagEventsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListTagEventsRequest>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& pagination_token(const ListTagEventsRequest* msg);
  static void set_has_pagination_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ListTagEventsRequest::_Internal::pagination_token(const ListTagEventsRequest* msg) {
  return *msg->_impl_.pagination_token_;
}
void ListTagEventsRequest::clear_pagination_token() {
  if (_impl_.pagination_token_ != nullptr) _impl_.pagination_token_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ListTagEventsRequest::ListTagEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.ListTagEventsRequest)
}
ListTagEventsRequest::ListTagEventsRequest(const ListTagEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListTagEventsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.pagination_token_){nullptr}
    , decltype(_impl_.page_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_uuid().empty()) {
    _this->_impl_.document_uuid_.Set(from._internal_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination_token()) {
    _this->_impl_.pagination_token_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.pagination_token_);
  }
  _this->_impl_.page_size_ = from._impl_.page_size_;
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.ListTagEventsRequest)
}

inline void ListTagEventsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.pagination_token_){nullptr}
    , decltype(_impl_.page_size_){0}
  };
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListTagEventsRequest::~ListTagEventsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.ListTagEventsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListTagEventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_uuid_.Destroy();
  _impl_.tag_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_token_;
}

void ListTagEventsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListTagEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.ListTagEventsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_uuid_.ClearToEmpty();
  _impl_.tag_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.pagination_token_ != nullptr);
    _impl_.pagination_token_->Clear();
  }
  _impl_.page_size_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTagEventsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ListTagEventsRequest.document_uuid"));
        } else
          goto handle_unusual;
        continue;
      // string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ListTagEventsRequest.tag"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp pagination_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListTagEventsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.ListTagEventsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_uuid().data(), static_cast<int>(this->_internal_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ListTagEventsRequest.document_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_uuid(), target);
  }

  // string tag = 2;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ListTagEventsRequest.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // optional .google.protobuf.Timestamp pagination_token = 3;
  if (_internal_has_pagination_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination_token(this),
        _Internal::pagination_token(this).GetCachedSize(), target, stream);
  }

  // int32 page_size = 4;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_page_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.ListTagEventsRequest)
  return target;
}

size_t ListTagEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.ListTagEventsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_uuid());
  }

  // string tag = 2;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // optional .google.protobuf.Timestamp pagination_token = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_token_);
  }

  // int32 page_size = 4;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTagEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListTagEventsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTagEventsRequest::GetClassData() const { return &_class_data_; }


void ListTagEventsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListTagEventsRequest*>(&to_msg);
  auto& from = static_cast<const ListTagEventsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.ListTagEventsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_document_uuid().empty()) {
    _this->_internal_set_document_uuid(from._internal_document_uuid());
  }
  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (from._internal_has_pagination_token()) {
    _this->_internal_mutable_pagination_token()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_pagination_token());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTagEventsRequest::CopyFrom(const ListTagEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.ListTagEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTagEventsRequest::IsInitialized() const {
  return true;
}

void ListTagEventsRequest::InternalSwap(ListTagEventsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_uuid_, lhs_arena,
      &other->_impl_.document_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListTagEventsRequest, _impl_.page_size_)
      + sizeof(ListTagEventsRequest::_impl_.page_size_)
      - PROTOBUF_FIELD_OFFSET(ListTagEventsRequest, _impl_.pagination_token_)>(
          reinterpret_cast<char*>(&_impl_.pagination_token_),
          reinterpret_cast<char*>(&other->_impl_.pagination_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTagEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[19]);
}

// ===================================================================

class ListTagEventsResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& next_pagination_token(const ListTagEventsResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ListTagEventsResponse::_Internal::next_pagination_token(const ListTagEventsResponse* msg) {
  return *msg->_impl_.next_pagination_token_;
}
void ListTagEventsResponse::clear_next_pagination_token() {
  if (GetArenaForAllocation() == nullptr && _impl_.next_pagination_token_ != nullptr) {
    delete _impl_.next_pagination_token_;
  }
  _impl_.next_pagination_token_ = nullptr;
}
ListTagEventsResponse::ListTagEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.ListTagEventsResponse)
}
ListTagEventsResponse::ListTagEventsResponse(const ListTagEventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListTagEventsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.message_){}
    , decltype(_impl_.next_pagination_token_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.total_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_next_pagination_token()) {
    _this->_impl_.next_pagination_token_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.next_pagination_token_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_count_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.total_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.ListTagEventsResponse)
}

inline void ListTagEventsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.next_pagination_token_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.total_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListTagEventsResponse::~ListTagEventsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.ListTagEventsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListTagEventsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.next_pagination_token_;
}

void ListTagEventsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListTagEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.ListTagEventsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.next_pagination_token_ != nullptr) {
    delete _impl_.next_pagination_token_;
  }
  _impl_.next_pagination_token_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_count_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.total_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTagEventsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.ListTagEventsResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.document_store.TagEvent events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp next_pagination_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_pagination_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListTagEventsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.ListTagEventsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.ListTagEventsResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated .unhinged.document_store.TagEvent events = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp next_pagination_token = 4;
  if (this->_internal_has_next_pagination_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::next_pagination_token(this),
        _Internal::next_pagination_token(this).GetCachedSize(), target, stream);
  }

  // int32 total_count = 5;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.ListTagEventsResponse)
  return target;
}

size_t ListTagEventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.ListTagEventsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.document_store.TagEvent events = 3;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp next_pagination_token = 4;
  if (this->_internal_has_next_pagination_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_pagination_token_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 total_count = 5;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTagEventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListTagEventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTagEventsResponse::GetClassData() const { return &_class_data_; }


void ListTagEventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListTagEventsResponse*>(&to_msg);
  auto& from = static_cast<const ListTagEventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.ListTagEventsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_next_pagination_token()) {
    _this->_internal_mutable_next_pagination_token()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_next_pagination_token());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTagEventsResponse::CopyFrom(const ListTagEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.ListTagEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTagEventsResponse::IsInitialized() const {
  return true;
}

void ListTagEventsResponse::InternalSwap(ListTagEventsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListTagEventsResponse, _impl_.total_count_)
      + sizeof(ListTagEventsResponse::_impl_.total_count_)
      - PROTOBUF_FIELD_OFFSET(ListTagEventsResponse, _impl_.next_pagination_token_)>(
          reinterpret_cast<char*>(&_impl_.next_pagination_token_),
          reinterpret_cast<char*>(&other->_impl_.next_pagination_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTagEventsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[20]);
}

// ===================================================================

class GetSessionContextRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSessionContextRequest>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& since(const GetSessionContextRequest* msg);
  static void set_has_since(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetSessionContextRequest::_Internal::since(const GetSessionContextRequest* msg) {
  return *msg->_impl_.since_;
}
void GetSessionContextRequest::clear_since() {
  if (_impl_.since_ != nullptr) _impl_.since_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetSessionContextRequest::GetSessionContextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.GetSessionContextRequest)
}
GetSessionContextRequest::GetSessionContextRequest(const GetSessionContextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSessionContextRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_types_){from._impl_.document_types_}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.since_){nullptr}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.include_body_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_since()) {
    _this->_impl_.since_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.since_);
  }
  ::memcpy(&_impl_.limit_, &from._impl_.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_body_) -
    reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.include_body_));
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.GetSessionContextRequest)
}

inline void GetSessionContextRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_types_){arena}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.since_){nullptr}
    , decltype(_impl_.limit_){0}
    , decltype(_impl_.include_body_){false}
  };
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSessionContextRequest::~GetSessionContextRequest() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.GetSessionContextRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSessionContextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_types_.~RepeatedPtrField();
  _impl_.session_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.since_;
}

void GetSessionContextRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSessionContextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.GetSessionContextRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_types_.Clear();
  _impl_.session_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.since_ != nullptr);
    _impl_.since_->Clear();
  }
  ::memset(&_impl_.limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.include_body_) -
      reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.include_body_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSessionContextRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.GetSessionContextRequest.session_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string document_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_document_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.GetSessionContextRequest.document_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp since = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_since(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.include_body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSessionContextRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.GetSessionContextRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.GetSessionContextRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // repeated string document_types = 2;
  for (int i = 0, n = this->_internal_document_types_size(); i < n; i++) {
    const auto& s = this->_internal_document_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.GetSessionContextRequest.document_types");
    target = stream->WriteString(2, s, target);
  }

  // optional .google.protobuf.Timestamp since = 3;
  if (_internal_has_since()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::since(this),
        _Internal::since(this).GetCachedSize(), target, stream);
  }

  // int32 limit = 4;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_limit(), target);
  }

  // bool include_body = 5;
  if (this->_internal_include_body() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_include_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.GetSessionContextRequest)
  return target;
}

size_t GetSessionContextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.GetSessionContextRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string document_types = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.document_types_.size());
  for (int i = 0, n = _impl_.document_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.document_types_.Get(i));
  }

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // optional .google.protobuf.Timestamp since = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.since_);
  }

  // int32 limit = 4;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  // bool include_body = 5;
  if (this->_internal_include_body() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSessionContextRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSessionContextRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSessionContextRequest::GetClassData() const { return &_class_data_; }


void GetSessionContextRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSessionContextRequest*>(&to_msg);
  auto& from = static_cast<const GetSessionContextRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.GetSessionContextRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.document_types_.MergeFrom(from._impl_.document_types_);
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_has_since()) {
    _this->_internal_mutable_since()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_since());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_include_body() != 0) {
    _this->_internal_set_include_body(from._internal_include_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSessionContextRequest::CopyFrom(const GetSessionContextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.GetSessionContextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSessionContextRequest::IsInitialized() const {
  return true;
}

void GetSessionContextRequest::InternalSwap(GetSessionContextRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.document_types_.InternalSwap(&other->_impl_.document_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSessionContextRequest, _impl_.include_body_)
      + sizeof(GetSessionContextRequest::_impl_.include_body_)
      - PROTOBUF_FIELD_OFFSET(GetSessionContextRequest, _impl_.since_)>(
          reinterpret_cast<char*>(&_impl_.since_),
          reinterpret_cast<char*>(&other->_impl_.since_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSessionContextRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[21]);
}

// ===================================================================

class GetSessionContextResponse::_Internal {
 public:
};

GetSessionContextResponse::GetSessionContextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.GetSessionContextResponse)
}
GetSessionContextResponse::GetSessionContextResponse(const GetSessionContextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSessionContextResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.documents_){from._impl_.documents_}
    , decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.total_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_count_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.total_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.GetSessionContextResponse)
}

inline void GetSessionContextResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.documents_){arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.total_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSessionContextResponse::~GetSessionContextResponse() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.GetSessionContextResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSessionContextResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.documents_.~RepeatedPtrField();
  _impl_.message_.Destroy();
}

void GetSessionContextResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSessionContextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.GetSessionContextResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.documents_.Clear();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_count_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.total_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSessionContextResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.GetSessionContextResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.document_store.Document documents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_documents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 total_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSessionContextResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.GetSessionContextResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.GetSessionContextResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated .unhinged.document_store.Document documents = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_documents_size()); i < n; i++) {
    const auto& repfield = this->_internal_documents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 total_count = 4;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.GetSessionContextResponse)
  return target;
}

size_t GetSessionContextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.GetSessionContextResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.document_store.Document documents = 3;
  total_size += 1UL * this->_internal_documents_size();
  for (const auto& msg : this->_impl_.documents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 total_count = 4;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSessionContextResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSessionContextResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSessionContextResponse::GetClassData() const { return &_class_data_; }


void GetSessionContextResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSessionContextResponse*>(&to_msg);
  auto& from = static_cast<const GetSessionContextResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.GetSessionContextResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.documents_.MergeFrom(from._impl_.documents_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSessionContextResponse::CopyFrom(const GetSessionContextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.GetSessionContextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSessionContextResponse::IsInitialized() const {
  return true;
}

void GetSessionContextResponse::InternalSwap(GetSessionContextResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.documents_.InternalSwap(&other->_impl_.documents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSessionContextResponse, _impl_.total_count_)
      + sizeof(GetSessionContextResponse::_impl_.total_count_)
      - PROTOBUF_FIELD_OFFSET(GetSessionContextResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSessionContextResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[22]);
}

// ===================================================================

class DeleteDocumentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteDocumentRequest>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeleteDocumentRequest::DeleteDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.DeleteDocumentRequest)
}
DeleteDocumentRequest::DeleteDocumentRequest(const DeleteDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteDocumentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.deleted_by_){}
    , decltype(_impl_.deleted_by_type_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_uuid().empty()) {
    _this->_impl_.document_uuid_.Set(from._internal_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deleted_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deleted_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deleted_by().empty()) {
    _this->_impl_.deleted_by_.Set(from._internal_deleted_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deleted_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deleted_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deleted_by_type().empty()) {
    _this->_impl_.deleted_by_type_.Set(from._internal_deleted_by_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.DeleteDocumentRequest)
}

inline void DeleteDocumentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_uuid_){}
    , decltype(_impl_.deleted_by_){}
    , decltype(_impl_.deleted_by_type_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.version_){0}
  };
  _impl_.document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deleted_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deleted_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deleted_by_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deleted_by_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteDocumentRequest::~DeleteDocumentRequest() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.DeleteDocumentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_uuid_.Destroy();
  _impl_.deleted_by_.Destroy();
  _impl_.deleted_by_type_.Destroy();
  _impl_.session_id_.Destroy();
}

void DeleteDocumentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.DeleteDocumentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_uuid_.ClearToEmpty();
  _impl_.deleted_by_.ClearToEmpty();
  _impl_.deleted_by_type_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.version_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDocumentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string document_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.DeleteDocumentRequest.document_uuid"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deleted_by = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_deleted_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.DeleteDocumentRequest.deleted_by"));
        } else
          goto handle_unusual;
        continue;
      // string deleted_by_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_deleted_by_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.DeleteDocumentRequest.deleted_by_type"));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.DeleteDocumentRequest.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDocumentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.DeleteDocumentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_uuid().data(), static_cast<int>(this->_internal_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.DeleteDocumentRequest.document_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_document_uuid(), target);
  }

  // optional int32 version = 2;
  if (_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // string deleted_by = 3;
  if (!this->_internal_deleted_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deleted_by().data(), static_cast<int>(this->_internal_deleted_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.DeleteDocumentRequest.deleted_by");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_deleted_by(), target);
  }

  // string deleted_by_type = 4;
  if (!this->_internal_deleted_by_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deleted_by_type().data(), static_cast<int>(this->_internal_deleted_by_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.DeleteDocumentRequest.deleted_by_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_deleted_by_type(), target);
  }

  // string session_id = 5;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.DeleteDocumentRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.DeleteDocumentRequest)
  return target;
}

size_t DeleteDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.DeleteDocumentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document_uuid = 1;
  if (!this->_internal_document_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_uuid());
  }

  // string deleted_by = 3;
  if (!this->_internal_deleted_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deleted_by());
  }

  // string deleted_by_type = 4;
  if (!this->_internal_deleted_by_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deleted_by_type());
  }

  // string session_id = 5;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // optional int32 version = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDocumentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteDocumentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDocumentRequest::GetClassData() const { return &_class_data_; }


void DeleteDocumentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteDocumentRequest*>(&to_msg);
  auto& from = static_cast<const DeleteDocumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.DeleteDocumentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_document_uuid().empty()) {
    _this->_internal_set_document_uuid(from._internal_document_uuid());
  }
  if (!from._internal_deleted_by().empty()) {
    _this->_internal_set_deleted_by(from._internal_deleted_by());
  }
  if (!from._internal_deleted_by_type().empty()) {
    _this->_internal_set_deleted_by_type(from._internal_deleted_by_type());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_has_version()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDocumentRequest::CopyFrom(const DeleteDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.DeleteDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDocumentRequest::IsInitialized() const {
  return true;
}

void DeleteDocumentRequest::InternalSwap(DeleteDocumentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_uuid_, lhs_arena,
      &other->_impl_.document_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deleted_by_, lhs_arena,
      &other->_impl_.deleted_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deleted_by_type_, lhs_arena,
      &other->_impl_.deleted_by_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDocumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[23]);
}

// ===================================================================

class DeleteDocumentResponse::_Internal {
 public:
};

DeleteDocumentResponse::DeleteDocumentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.DeleteDocumentResponse)
}
DeleteDocumentResponse::DeleteDocumentResponse(const DeleteDocumentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteDocumentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.versions_deleted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.versions_deleted_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.versions_deleted_));
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.DeleteDocumentResponse)
}

inline void DeleteDocumentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.versions_deleted_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteDocumentResponse::~DeleteDocumentResponse() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.DeleteDocumentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteDocumentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void DeleteDocumentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteDocumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.DeleteDocumentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.versions_deleted_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.versions_deleted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDocumentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.DeleteDocumentResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // int32 versions_deleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.versions_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDocumentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.DeleteDocumentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.DeleteDocumentResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // int32 versions_deleted = 3;
  if (this->_internal_versions_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_versions_deleted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.DeleteDocumentResponse)
  return target;
}

size_t DeleteDocumentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.DeleteDocumentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 versions_deleted = 3;
  if (this->_internal_versions_deleted() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_versions_deleted());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDocumentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteDocumentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDocumentResponse::GetClassData() const { return &_class_data_; }


void DeleteDocumentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteDocumentResponse*>(&to_msg);
  auto& from = static_cast<const DeleteDocumentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.DeleteDocumentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_versions_deleted() != 0) {
    _this->_internal_set_versions_deleted(from._internal_versions_deleted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDocumentResponse::CopyFrom(const DeleteDocumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.DeleteDocumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDocumentResponse::IsInitialized() const {
  return true;
}

void DeleteDocumentResponse::InternalSwap(DeleteDocumentResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteDocumentResponse, _impl_.versions_deleted_)
      + sizeof(DeleteDocumentResponse::_impl_.versions_deleted_)
      - PROTOBUF_FIELD_OFFSET(DeleteDocumentResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDocumentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[24]);
}

// ===================================================================

class HealthCheckRequest::_Internal {
 public:
};

HealthCheckRequest::HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.HealthCheckRequest)
}
HealthCheckRequest::HealthCheckRequest(const HealthCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HealthCheckRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.HealthCheckRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[25]);
}

// ===================================================================

class HealthCheckResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const HealthCheckResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HealthCheckResponse::_Internal::timestamp(const HealthCheckResponse* msg) {
  return *msg->_impl_.timestamp_;
}
void HealthCheckResponse::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
HealthCheckResponse::HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.document_store.HealthCheckResponse)
}
HealthCheckResponse::HealthCheckResponse(const HealthCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthCheckResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.healthy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  _this->_impl_.healthy_ = from._impl_.healthy_;
  // @@protoc_insertion_point(copy_constructor:unhinged.document_store.HealthCheckResponse)
}

inline void HealthCheckResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.healthy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthCheckResponse::~HealthCheckResponse() {
  // @@protoc_insertion_point(destructor:unhinged.document_store.HealthCheckResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void HealthCheckResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.document_store.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _impl_.healthy_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool healthy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.healthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.document_store.HealthCheckResponse.status"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheckResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.document_store.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool healthy = 1;
  if (this->_internal_healthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_healthy(), target);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.document_store.HealthCheckResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.document_store.HealthCheckResponse)
  return target;
}

size_t HealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.document_store.HealthCheckResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // bool healthy = 1;
  if (this->_internal_healthy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthCheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckResponse::GetClassData() const { return &_class_data_; }


void HealthCheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthCheckResponse*>(&to_msg);
  auto& from = static_cast<const HealthCheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.document_store.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_healthy() != 0) {
    _this->_internal_set_healthy(from._internal_healthy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckResponse::CopyFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.document_store.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckResponse::IsInitialized() const {
  return true;
}

void HealthCheckResponse::InternalSwap(HealthCheckResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthCheckResponse, _impl_.healthy_)
      + sizeof(HealthCheckResponse::_impl_.healthy_)
      - PROTOBUF_FIELD_OFFSET(HealthCheckResponse, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_document_5fstore_2eproto_getter, &descriptor_table_document_5fstore_2eproto_once,
      file_level_metadata_document_5fstore_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace document_store
}  // namespace unhinged
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::unhinged::document_store::Document*
Arena::CreateMaybeMessage< ::unhinged::document_store::Document >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::Document >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::DocumentStub*
Arena::CreateMaybeMessage< ::unhinged::document_store::DocumentStub >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::DocumentStub >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::ActiveTag*
Arena::CreateMaybeMessage< ::unhinged::document_store::ActiveTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::ActiveTag >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::TagEvent*
Arena::CreateMaybeMessage< ::unhinged::document_store::TagEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::TagEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::PutDocumentRequest*
Arena::CreateMaybeMessage< ::unhinged::document_store::PutDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::PutDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::PutDocumentResponse*
Arena::CreateMaybeMessage< ::unhinged::document_store::PutDocumentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::PutDocumentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::PutDocumentsRequest*
Arena::CreateMaybeMessage< ::unhinged::document_store::PutDocumentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::PutDocumentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::PutDocumentReceipt*
Arena::CreateMaybeMessage< ::unhinged::document_store::PutDocumentReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::PutDocumentReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::PutDocumentsResponse*
Arena::CreateMaybeMessage< ::unhinged::document_store::PutDocumentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::PutDocumentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::GetDocumentRequest*
Arena::CreateMaybeMessage< ::unhinged::document_store::GetDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::GetDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::GetDocumentResponse*
Arena::CreateMaybeMessage< ::unhinged::document_store::GetDocumentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::GetDocumentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::ListDocumentsRequest*
Arena::CreateMaybeMessage< ::unhinged::document_store::ListDocumentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::ListDocumentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::ListDocumentsResponse*
Arena::CreateMaybeMessage< ::unhinged::document_store::ListDocumentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::ListDocumentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::ListDocumentVersionsRequest*
Arena::CreateMaybeMessage< ::unhinged::document_store::ListDocumentVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::ListDocumentVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::ListDocumentVersionsResponse*
Arena::CreateMaybeMessage< ::unhinged::document_store::ListDocumentVersionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::ListDocumentVersionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::TagDocumentRequest*
Arena::CreateMaybeMessage< ::unhinged::document_store::TagDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::TagDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::TagDocumentResponse*
Arena::CreateMaybeMessage< ::unhinged::document_store::TagDocumentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::TagDocumentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::ListActiveTagsRequest*
Arena::CreateMaybeMessage< ::unhinged::document_store::ListActiveTagsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::ListActiveTagsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::ListActiveTagsResponse*
Arena::CreateMaybeMessage< ::unhinged::document_store::ListActiveTagsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::ListActiveTagsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::ListTagEventsRequest*
Arena::CreateMaybeMessage< ::unhinged::document_store::ListTagEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::ListTagEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::ListTagEventsResponse*
Arena::CreateMaybeMessage< ::unhinged::document_store::ListTagEventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::ListTagEventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::GetSessionContextRequest*
Arena::CreateMaybeMessage< ::unhinged::document_store::GetSessionContextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::GetSessionContextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::GetSessionContextResponse*
Arena::CreateMaybeMessage< ::unhinged::document_store::GetSessionContextResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::GetSessionContextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::DeleteDocumentRequest*
Arena::CreateMaybeMessage< ::unhinged::document_store::DeleteDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::DeleteDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::DeleteDocumentResponse*
Arena::CreateMaybeMessage< ::unhinged::document_store::DeleteDocumentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::DeleteDocumentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::HealthCheckRequest*
Arena::CreateMaybeMessage< ::unhinged::document_store::HealthCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::HealthCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::document_store::HealthCheckResponse*
Arena::CreateMaybeMessage< ::unhinged::document_store::HealthCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::document_store::HealthCheckResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
