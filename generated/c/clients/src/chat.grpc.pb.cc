// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto

#include "chat.pb.h"
#include "chat.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace unhinged {
namespace chat {
namespace v1 {

static const char* ChatService_method_names[] = {
  "/unhinged.chat.v1.ChatService/CreateConversation",
  "/unhinged.chat.v1.ChatService/GetConversation",
  "/unhinged.chat.v1.ChatService/ListConversations",
  "/unhinged.chat.v1.ChatService/UpdateConversation",
  "/unhinged.chat.v1.ChatService/DeleteConversation",
  "/unhinged.chat.v1.ChatService/SendMessage",
  "/unhinged.chat.v1.ChatService/GetMessages",
  "/unhinged.chat.v1.ChatService/UpdateMessage",
  "/unhinged.chat.v1.ChatService/DeleteMessage",
  "/unhinged.chat.v1.ChatService/StreamChat",
  "/unhinged.chat.v1.ChatService/SubscribeToConversation",
  "/unhinged.chat.v1.ChatService/HealthCheck",
};

std::unique_ptr< ChatService::Stub> ChatService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChatService::Stub> stub(new ChatService::Stub(channel, options));
  return stub;
}

ChatService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateConversation_(ChatService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConversation_(ChatService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListConversations_(ChatService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateConversation_(ChatService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteConversation_(ChatService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMessage_(ChatService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMessages_(ChatService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateMessage_(ChatService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteMessage_(ChatService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamChat_(ChatService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeToConversation_(ChatService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_HealthCheck_(ChatService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChatService::Stub::CreateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest& request, ::unhinged::chat::v1::CreateConversationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::chat::v1::CreateConversationRequest, ::unhinged::chat::v1::CreateConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateConversation_, context, request, response);
}

void ChatService::Stub::async::CreateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest* request, ::unhinged::chat::v1::CreateConversationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::chat::v1::CreateConversationRequest, ::unhinged::chat::v1::CreateConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateConversation_, context, request, response, std::move(f));
}

void ChatService::Stub::async::CreateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest* request, ::unhinged::chat::v1::CreateConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateConversation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::CreateConversationResponse>* ChatService::Stub::PrepareAsyncCreateConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::chat::v1::CreateConversationResponse, ::unhinged::chat::v1::CreateConversationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateConversation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::CreateConversationResponse>* ChatService::Stub::AsyncCreateConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateConversationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::GetConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest& request, ::unhinged::chat::v1::GetConversationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::chat::v1::GetConversationRequest, ::unhinged::chat::v1::GetConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConversation_, context, request, response);
}

void ChatService::Stub::async::GetConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest* request, ::unhinged::chat::v1::GetConversationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::chat::v1::GetConversationRequest, ::unhinged::chat::v1::GetConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConversation_, context, request, response, std::move(f));
}

void ChatService::Stub::async::GetConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest* request, ::unhinged::chat::v1::GetConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConversation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetConversationResponse>* ChatService::Stub::PrepareAsyncGetConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::chat::v1::GetConversationResponse, ::unhinged::chat::v1::GetConversationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConversation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetConversationResponse>* ChatService::Stub::AsyncGetConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetConversationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConversationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::ListConversations(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest& request, ::unhinged::chat::v1::ListConversationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::chat::v1::ListConversationsRequest, ::unhinged::chat::v1::ListConversationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListConversations_, context, request, response);
}

void ChatService::Stub::async::ListConversations(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest* request, ::unhinged::chat::v1::ListConversationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::chat::v1::ListConversationsRequest, ::unhinged::chat::v1::ListConversationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListConversations_, context, request, response, std::move(f));
}

void ChatService::Stub::async::ListConversations(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest* request, ::unhinged::chat::v1::ListConversationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListConversations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::ListConversationsResponse>* ChatService::Stub::PrepareAsyncListConversationsRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::chat::v1::ListConversationsResponse, ::unhinged::chat::v1::ListConversationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListConversations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::ListConversationsResponse>* ChatService::Stub::AsyncListConversationsRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::ListConversationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListConversationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::UpdateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest& request, ::unhinged::chat::v1::UpdateConversationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::chat::v1::UpdateConversationRequest, ::unhinged::chat::v1::UpdateConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateConversation_, context, request, response);
}

void ChatService::Stub::async::UpdateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest* request, ::unhinged::chat::v1::UpdateConversationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::chat::v1::UpdateConversationRequest, ::unhinged::chat::v1::UpdateConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateConversation_, context, request, response, std::move(f));
}

void ChatService::Stub::async::UpdateConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest* request, ::unhinged::chat::v1::UpdateConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateConversation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateConversationResponse>* ChatService::Stub::PrepareAsyncUpdateConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::chat::v1::UpdateConversationResponse, ::unhinged::chat::v1::UpdateConversationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateConversation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateConversationResponse>* ChatService::Stub::AsyncUpdateConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateConversationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateConversationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::DeleteConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest& request, ::unhinged::chat::v1::DeleteConversationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::chat::v1::DeleteConversationRequest, ::unhinged::chat::v1::DeleteConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteConversation_, context, request, response);
}

void ChatService::Stub::async::DeleteConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest* request, ::unhinged::chat::v1::DeleteConversationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::chat::v1::DeleteConversationRequest, ::unhinged::chat::v1::DeleteConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteConversation_, context, request, response, std::move(f));
}

void ChatService::Stub::async::DeleteConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest* request, ::unhinged::chat::v1::DeleteConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteConversation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteConversationResponse>* ChatService::Stub::PrepareAsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::chat::v1::DeleteConversationResponse, ::unhinged::chat::v1::DeleteConversationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteConversation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteConversationResponse>* ChatService::Stub::AsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteConversationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::SendMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest& request, ::unhinged::chat::v1::SendMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::chat::v1::SendMessageRequest, ::unhinged::chat::v1::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void ChatService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest* request, ::unhinged::chat::v1::SendMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::chat::v1::SendMessageRequest, ::unhinged::chat::v1::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void ChatService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest* request, ::unhinged::chat::v1::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::SendMessageResponse>* ChatService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::chat::v1::SendMessageResponse, ::unhinged::chat::v1::SendMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::SendMessageResponse>* ChatService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::GetMessages(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest& request, ::unhinged::chat::v1::GetMessagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::chat::v1::GetMessagesRequest, ::unhinged::chat::v1::GetMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMessages_, context, request, response);
}

void ChatService::Stub::async::GetMessages(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest* request, ::unhinged::chat::v1::GetMessagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::chat::v1::GetMessagesRequest, ::unhinged::chat::v1::GetMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessages_, context, request, response, std::move(f));
}

void ChatService::Stub::async::GetMessages(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest* request, ::unhinged::chat::v1::GetMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetMessagesResponse>* ChatService::Stub::PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::chat::v1::GetMessagesResponse, ::unhinged::chat::v1::GetMessagesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::GetMessagesResponse>* ChatService::Stub::AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::UpdateMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest& request, ::unhinged::chat::v1::UpdateMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::chat::v1::UpdateMessageRequest, ::unhinged::chat::v1::UpdateMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateMessage_, context, request, response);
}

void ChatService::Stub::async::UpdateMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest* request, ::unhinged::chat::v1::UpdateMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::chat::v1::UpdateMessageRequest, ::unhinged::chat::v1::UpdateMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMessage_, context, request, response, std::move(f));
}

void ChatService::Stub::async::UpdateMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest* request, ::unhinged::chat::v1::UpdateMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateMessageResponse>* ChatService::Stub::PrepareAsyncUpdateMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::chat::v1::UpdateMessageResponse, ::unhinged::chat::v1::UpdateMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::UpdateMessageResponse>* ChatService::Stub::AsyncUpdateMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::UpdateMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::DeleteMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest& request, ::unhinged::chat::v1::DeleteMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::chat::v1::DeleteMessageRequest, ::unhinged::chat::v1::DeleteMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteMessage_, context, request, response);
}

void ChatService::Stub::async::DeleteMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest* request, ::unhinged::chat::v1::DeleteMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::chat::v1::DeleteMessageRequest, ::unhinged::chat::v1::DeleteMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMessage_, context, request, response, std::move(f));
}

void ChatService::Stub::async::DeleteMessage(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest* request, ::unhinged::chat::v1::DeleteMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteMessageResponse>* ChatService::Stub::PrepareAsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::chat::v1::DeleteMessageResponse, ::unhinged::chat::v1::DeleteMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::chat::v1::DeleteMessageResponse>* ChatService::Stub::AsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>* ChatService::Stub::StreamChatRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), rpcmethod_StreamChat_, context, request);
}

void ChatService::Stub::async::StreamChat(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest* request, ::grpc::ClientReadReactor< ::unhinged::common::v1::StreamChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamChat_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* ChatService::Stub::AsyncStreamChatRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), cq, rpcmethod_StreamChat_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* ChatService::Stub::PrepareAsyncStreamChatRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::StreamChatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), cq, rpcmethod_StreamChat_, context, request, false, nullptr);
}

::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>* ChatService::Stub::SubscribeToConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), rpcmethod_SubscribeToConversation_, context, request);
}

void ChatService::Stub::async::SubscribeToConversation(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest* request, ::grpc::ClientReadReactor< ::unhinged::common::v1::StreamChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeToConversation_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* ChatService::Stub::AsyncSubscribeToConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), cq, rpcmethod_SubscribeToConversation_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* ChatService::Stub::PrepareAsyncSubscribeToConversationRaw(::grpc::ClientContext* context, const ::unhinged::chat::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), cq, rpcmethod_SubscribeToConversation_, context, request, false, nullptr);
}

::grpc::Status ChatService::Stub::HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::unhinged::common::v1::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void ChatService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void ChatService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>* ChatService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::common::v1::HealthCheckResponse, ::unhinged::common::v1::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>* ChatService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChatService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::unhinged::chat::v1::CreateConversationRequest, ::unhinged::chat::v1::CreateConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::chat::v1::CreateConversationRequest* req,
             ::unhinged::chat::v1::CreateConversationResponse* resp) {
               return service->CreateConversation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::unhinged::chat::v1::GetConversationRequest, ::unhinged::chat::v1::GetConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::chat::v1::GetConversationRequest* req,
             ::unhinged::chat::v1::GetConversationResponse* resp) {
               return service->GetConversation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::unhinged::chat::v1::ListConversationsRequest, ::unhinged::chat::v1::ListConversationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::chat::v1::ListConversationsRequest* req,
             ::unhinged::chat::v1::ListConversationsResponse* resp) {
               return service->ListConversations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::unhinged::chat::v1::UpdateConversationRequest, ::unhinged::chat::v1::UpdateConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::chat::v1::UpdateConversationRequest* req,
             ::unhinged::chat::v1::UpdateConversationResponse* resp) {
               return service->UpdateConversation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::unhinged::chat::v1::DeleteConversationRequest, ::unhinged::chat::v1::DeleteConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::chat::v1::DeleteConversationRequest* req,
             ::unhinged::chat::v1::DeleteConversationResponse* resp) {
               return service->DeleteConversation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::unhinged::chat::v1::SendMessageRequest, ::unhinged::chat::v1::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::chat::v1::SendMessageRequest* req,
             ::unhinged::chat::v1::SendMessageResponse* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::unhinged::chat::v1::GetMessagesRequest, ::unhinged::chat::v1::GetMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::chat::v1::GetMessagesRequest* req,
             ::unhinged::chat::v1::GetMessagesResponse* resp) {
               return service->GetMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::unhinged::chat::v1::UpdateMessageRequest, ::unhinged::chat::v1::UpdateMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::chat::v1::UpdateMessageRequest* req,
             ::unhinged::chat::v1::UpdateMessageResponse* resp) {
               return service->UpdateMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::unhinged::chat::v1::DeleteMessageRequest, ::unhinged::chat::v1::DeleteMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::chat::v1::DeleteMessageRequest* req,
             ::unhinged::chat::v1::DeleteMessageResponse* resp) {
               return service->DeleteMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ChatService::Service, ::unhinged::chat::v1::StreamChatRequest, ::unhinged::common::v1::StreamChunk>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::chat::v1::StreamChatRequest* req,
             ::grpc::ServerWriter<::unhinged::common::v1::StreamChunk>* writer) {
               return service->StreamChat(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ChatService::Service, ::unhinged::chat::v1::SubscribeRequest, ::unhinged::common::v1::StreamChunk>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::chat::v1::SubscribeRequest* req,
             ::grpc::ServerWriter<::unhinged::common::v1::StreamChunk>* writer) {
               return service->SubscribeToConversation(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::common::v1::HealthCheckRequest* req,
             ::unhinged::common::v1::HealthCheckResponse* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
}

ChatService::Service::~Service() {
}

::grpc::Status ChatService::Service::CreateConversation(::grpc::ServerContext* context, const ::unhinged::chat::v1::CreateConversationRequest* request, ::unhinged::chat::v1::CreateConversationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::GetConversation(::grpc::ServerContext* context, const ::unhinged::chat::v1::GetConversationRequest* request, ::unhinged::chat::v1::GetConversationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::ListConversations(::grpc::ServerContext* context, const ::unhinged::chat::v1::ListConversationsRequest* request, ::unhinged::chat::v1::ListConversationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::UpdateConversation(::grpc::ServerContext* context, const ::unhinged::chat::v1::UpdateConversationRequest* request, ::unhinged::chat::v1::UpdateConversationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::DeleteConversation(::grpc::ServerContext* context, const ::unhinged::chat::v1::DeleteConversationRequest* request, ::unhinged::chat::v1::DeleteConversationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::SendMessage(::grpc::ServerContext* context, const ::unhinged::chat::v1::SendMessageRequest* request, ::unhinged::chat::v1::SendMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::GetMessages(::grpc::ServerContext* context, const ::unhinged::chat::v1::GetMessagesRequest* request, ::unhinged::chat::v1::GetMessagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::UpdateMessage(::grpc::ServerContext* context, const ::unhinged::chat::v1::UpdateMessageRequest* request, ::unhinged::chat::v1::UpdateMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::DeleteMessage(::grpc::ServerContext* context, const ::unhinged::chat::v1::DeleteMessageRequest* request, ::unhinged::chat::v1::DeleteMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::StreamChat(::grpc::ServerContext* context, const ::unhinged::chat::v1::StreamChatRequest* request, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::SubscribeToConversation(::grpc::ServerContext* context, const ::unhinged::chat::v1::SubscribeRequest* request, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::HealthCheck(::grpc::ServerContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace unhinged
}  // namespace chat
}  // namespace v1

