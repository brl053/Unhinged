// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: persistence_platform.proto

#include "persistence_platform.pb.h"
#include "persistence_platform.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace unhinged {
namespace persistence {

static const char* PersistencePlatformService_method_names[] = {
  "/unhinged.persistence.PersistencePlatformService/Insert",
  "/unhinged.persistence.PersistencePlatformService/InsertBatch",
  "/unhinged.persistence.PersistencePlatformService/Update",
  "/unhinged.persistence.PersistencePlatformService/Delete",
  "/unhinged.persistence.PersistencePlatformService/ExecuteQuery",
  "/unhinged.persistence.PersistencePlatformService/ExecuteRawQuery",
  "/unhinged.persistence.PersistencePlatformService/VectorSearch",
  "/unhinged.persistence.PersistencePlatformService/GraphTraverse",
  "/unhinged.persistence.PersistencePlatformService/ExecuteOperation",
  "/unhinged.persistence.PersistencePlatformService/HealthCheck",
  "/unhinged.persistence.PersistencePlatformService/GetPlatformInfo",
  "/unhinged.persistence.PersistencePlatformService/GetMetrics",
};

std::unique_ptr< PersistencePlatformService::Stub> PersistencePlatformService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PersistencePlatformService::Stub> stub(new PersistencePlatformService::Stub(channel, options));
  return stub;
}

PersistencePlatformService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Insert_(PersistencePlatformService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsertBatch_(PersistencePlatformService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(PersistencePlatformService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(PersistencePlatformService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteQuery_(PersistencePlatformService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteRawQuery_(PersistencePlatformService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VectorSearch_(PersistencePlatformService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GraphTraverse_(PersistencePlatformService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteOperation_(PersistencePlatformService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HealthCheck_(PersistencePlatformService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPlatformInfo_(PersistencePlatformService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMetrics_(PersistencePlatformService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PersistencePlatformService::Stub::Insert(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest& request, ::unhinged::persistence::InsertResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::persistence::InsertRequest, ::unhinged::persistence::InsertResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Insert_, context, request, response);
}

void PersistencePlatformService::Stub::async::Insert(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest* request, ::unhinged::persistence::InsertResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::persistence::InsertRequest, ::unhinged::persistence::InsertResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, std::move(f));
}

void PersistencePlatformService::Stub::async::Insert(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest* request, ::unhinged::persistence::InsertResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertResponse>* PersistencePlatformService::Stub::PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::persistence::InsertResponse, ::unhinged::persistence::InsertRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Insert_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertResponse>* PersistencePlatformService::Stub::AsyncInsertRaw(::grpc::ClientContext* context, const ::unhinged::persistence::InsertRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersistencePlatformService::Stub::InsertBatch(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest& request, ::unhinged::persistence::InsertBatchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::persistence::InsertBatchRequest, ::unhinged::persistence::InsertBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertBatch_, context, request, response);
}

void PersistencePlatformService::Stub::async::InsertBatch(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest* request, ::unhinged::persistence::InsertBatchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::persistence::InsertBatchRequest, ::unhinged::persistence::InsertBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertBatch_, context, request, response, std::move(f));
}

void PersistencePlatformService::Stub::async::InsertBatch(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest* request, ::unhinged::persistence::InsertBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertBatch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertBatchResponse>* PersistencePlatformService::Stub::PrepareAsyncInsertBatchRaw(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::persistence::InsertBatchResponse, ::unhinged::persistence::InsertBatchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertBatch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::InsertBatchResponse>* PersistencePlatformService::Stub::AsyncInsertBatchRaw(::grpc::ClientContext* context, const ::unhinged::persistence::InsertBatchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertBatchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersistencePlatformService::Stub::Update(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest& request, ::unhinged::persistence::UpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::persistence::UpdateRequest, ::unhinged::persistence::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void PersistencePlatformService::Stub::async::Update(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest* request, ::unhinged::persistence::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::persistence::UpdateRequest, ::unhinged::persistence::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void PersistencePlatformService::Stub::async::Update(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest* request, ::unhinged::persistence::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::UpdateResponse>* PersistencePlatformService::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::persistence::UpdateResponse, ::unhinged::persistence::UpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::UpdateResponse>* PersistencePlatformService::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::unhinged::persistence::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersistencePlatformService::Stub::Delete(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest& request, ::unhinged::persistence::DeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::persistence::DeleteRequest, ::unhinged::persistence::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void PersistencePlatformService::Stub::async::Delete(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest* request, ::unhinged::persistence::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::persistence::DeleteRequest, ::unhinged::persistence::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void PersistencePlatformService::Stub::async::Delete(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest* request, ::unhinged::persistence::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::DeleteResponse>* PersistencePlatformService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::persistence::DeleteResponse, ::unhinged::persistence::DeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::DeleteResponse>* PersistencePlatformService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::unhinged::persistence::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersistencePlatformService::Stub::ExecuteQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest& request, ::unhinged::persistence::ExecuteQueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::persistence::ExecuteQueryRequest, ::unhinged::persistence::ExecuteQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteQuery_, context, request, response);
}

void PersistencePlatformService::Stub::async::ExecuteQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest* request, ::unhinged::persistence::ExecuteQueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::persistence::ExecuteQueryRequest, ::unhinged::persistence::ExecuteQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteQuery_, context, request, response, std::move(f));
}

void PersistencePlatformService::Stub::async::ExecuteQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest* request, ::unhinged::persistence::ExecuteQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteQueryResponse>* PersistencePlatformService::Stub::PrepareAsyncExecuteQueryRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::persistence::ExecuteQueryResponse, ::unhinged::persistence::ExecuteQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteQueryResponse>* PersistencePlatformService::Stub::AsyncExecuteQueryRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersistencePlatformService::Stub::ExecuteRawQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest& request, ::unhinged::persistence::ExecuteRawQueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::persistence::ExecuteRawQueryRequest, ::unhinged::persistence::ExecuteRawQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteRawQuery_, context, request, response);
}

void PersistencePlatformService::Stub::async::ExecuteRawQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest* request, ::unhinged::persistence::ExecuteRawQueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::persistence::ExecuteRawQueryRequest, ::unhinged::persistence::ExecuteRawQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteRawQuery_, context, request, response, std::move(f));
}

void PersistencePlatformService::Stub::async::ExecuteRawQuery(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest* request, ::unhinged::persistence::ExecuteRawQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteRawQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteRawQueryResponse>* PersistencePlatformService::Stub::PrepareAsyncExecuteRawQueryRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::persistence::ExecuteRawQueryResponse, ::unhinged::persistence::ExecuteRawQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteRawQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteRawQueryResponse>* PersistencePlatformService::Stub::AsyncExecuteRawQueryRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteRawQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersistencePlatformService::Stub::VectorSearch(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest& request, ::unhinged::persistence::VectorSearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::persistence::VectorSearchRequest, ::unhinged::persistence::VectorSearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VectorSearch_, context, request, response);
}

void PersistencePlatformService::Stub::async::VectorSearch(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest* request, ::unhinged::persistence::VectorSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::persistence::VectorSearchRequest, ::unhinged::persistence::VectorSearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VectorSearch_, context, request, response, std::move(f));
}

void PersistencePlatformService::Stub::async::VectorSearch(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest* request, ::unhinged::persistence::VectorSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VectorSearch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::VectorSearchResponse>* PersistencePlatformService::Stub::PrepareAsyncVectorSearchRaw(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::persistence::VectorSearchResponse, ::unhinged::persistence::VectorSearchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VectorSearch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::VectorSearchResponse>* PersistencePlatformService::Stub::AsyncVectorSearchRaw(::grpc::ClientContext* context, const ::unhinged::persistence::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVectorSearchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersistencePlatformService::Stub::GraphTraverse(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest& request, ::unhinged::persistence::GraphTraverseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::persistence::GraphTraverseRequest, ::unhinged::persistence::GraphTraverseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GraphTraverse_, context, request, response);
}

void PersistencePlatformService::Stub::async::GraphTraverse(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest* request, ::unhinged::persistence::GraphTraverseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::persistence::GraphTraverseRequest, ::unhinged::persistence::GraphTraverseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GraphTraverse_, context, request, response, std::move(f));
}

void PersistencePlatformService::Stub::async::GraphTraverse(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest* request, ::unhinged::persistence::GraphTraverseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GraphTraverse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GraphTraverseResponse>* PersistencePlatformService::Stub::PrepareAsyncGraphTraverseRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::persistence::GraphTraverseResponse, ::unhinged::persistence::GraphTraverseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GraphTraverse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GraphTraverseResponse>* PersistencePlatformService::Stub::AsyncGraphTraverseRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GraphTraverseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGraphTraverseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersistencePlatformService::Stub::ExecuteOperation(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest& request, ::unhinged::persistence::ExecuteOperationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::persistence::ExecuteOperationRequest, ::unhinged::persistence::ExecuteOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteOperation_, context, request, response);
}

void PersistencePlatformService::Stub::async::ExecuteOperation(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest* request, ::unhinged::persistence::ExecuteOperationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::persistence::ExecuteOperationRequest, ::unhinged::persistence::ExecuteOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteOperation_, context, request, response, std::move(f));
}

void PersistencePlatformService::Stub::async::ExecuteOperation(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest* request, ::unhinged::persistence::ExecuteOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteOperation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteOperationResponse>* PersistencePlatformService::Stub::PrepareAsyncExecuteOperationRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::persistence::ExecuteOperationResponse, ::unhinged::persistence::ExecuteOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteOperation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::ExecuteOperationResponse>* PersistencePlatformService::Stub::AsyncExecuteOperationRaw(::grpc::ClientContext* context, const ::unhinged::persistence::ExecuteOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteOperationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersistencePlatformService::Stub::HealthCheck(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest& request, ::unhinged::persistence::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::persistence::HealthCheckRequest, ::unhinged::persistence::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void PersistencePlatformService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest* request, ::unhinged::persistence::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::persistence::HealthCheckRequest, ::unhinged::persistence::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void PersistencePlatformService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest* request, ::unhinged::persistence::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::HealthCheckResponse>* PersistencePlatformService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::persistence::HealthCheckResponse, ::unhinged::persistence::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::HealthCheckResponse>* PersistencePlatformService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::persistence::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersistencePlatformService::Stub::GetPlatformInfo(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest& request, ::unhinged::persistence::GetPlatformInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::persistence::GetPlatformInfoRequest, ::unhinged::persistence::GetPlatformInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPlatformInfo_, context, request, response);
}

void PersistencePlatformService::Stub::async::GetPlatformInfo(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest* request, ::unhinged::persistence::GetPlatformInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::persistence::GetPlatformInfoRequest, ::unhinged::persistence::GetPlatformInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlatformInfo_, context, request, response, std::move(f));
}

void PersistencePlatformService::Stub::async::GetPlatformInfo(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest* request, ::unhinged::persistence::GetPlatformInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlatformInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetPlatformInfoResponse>* PersistencePlatformService::Stub::PrepareAsyncGetPlatformInfoRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::persistence::GetPlatformInfoResponse, ::unhinged::persistence::GetPlatformInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPlatformInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetPlatformInfoResponse>* PersistencePlatformService::Stub::AsyncGetPlatformInfoRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GetPlatformInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPlatformInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersistencePlatformService::Stub::GetMetrics(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest& request, ::unhinged::persistence::GetMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::persistence::GetMetricsRequest, ::unhinged::persistence::GetMetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMetrics_, context, request, response);
}

void PersistencePlatformService::Stub::async::GetMetrics(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest* request, ::unhinged::persistence::GetMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::persistence::GetMetricsRequest, ::unhinged::persistence::GetMetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, std::move(f));
}

void PersistencePlatformService::Stub::async::GetMetrics(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest* request, ::unhinged::persistence::GetMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetMetricsResponse>* PersistencePlatformService::Stub::PrepareAsyncGetMetricsRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::persistence::GetMetricsResponse, ::unhinged::persistence::GetMetricsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMetrics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::persistence::GetMetricsResponse>* PersistencePlatformService::Stub::AsyncGetMetricsRaw(::grpc::ClientContext* context, const ::unhinged::persistence::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMetricsRaw(context, request, cq);
  result->StartCall();
  return result;
}

PersistencePlatformService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersistencePlatformService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersistencePlatformService::Service, ::unhinged::persistence::InsertRequest, ::unhinged::persistence::InsertResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersistencePlatformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::persistence::InsertRequest* req,
             ::unhinged::persistence::InsertResponse* resp) {
               return service->Insert(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersistencePlatformService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersistencePlatformService::Service, ::unhinged::persistence::InsertBatchRequest, ::unhinged::persistence::InsertBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersistencePlatformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::persistence::InsertBatchRequest* req,
             ::unhinged::persistence::InsertBatchResponse* resp) {
               return service->InsertBatch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersistencePlatformService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersistencePlatformService::Service, ::unhinged::persistence::UpdateRequest, ::unhinged::persistence::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersistencePlatformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::persistence::UpdateRequest* req,
             ::unhinged::persistence::UpdateResponse* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersistencePlatformService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersistencePlatformService::Service, ::unhinged::persistence::DeleteRequest, ::unhinged::persistence::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersistencePlatformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::persistence::DeleteRequest* req,
             ::unhinged::persistence::DeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersistencePlatformService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersistencePlatformService::Service, ::unhinged::persistence::ExecuteQueryRequest, ::unhinged::persistence::ExecuteQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersistencePlatformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::persistence::ExecuteQueryRequest* req,
             ::unhinged::persistence::ExecuteQueryResponse* resp) {
               return service->ExecuteQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersistencePlatformService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersistencePlatformService::Service, ::unhinged::persistence::ExecuteRawQueryRequest, ::unhinged::persistence::ExecuteRawQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersistencePlatformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::persistence::ExecuteRawQueryRequest* req,
             ::unhinged::persistence::ExecuteRawQueryResponse* resp) {
               return service->ExecuteRawQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersistencePlatformService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersistencePlatformService::Service, ::unhinged::persistence::VectorSearchRequest, ::unhinged::persistence::VectorSearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersistencePlatformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::persistence::VectorSearchRequest* req,
             ::unhinged::persistence::VectorSearchResponse* resp) {
               return service->VectorSearch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersistencePlatformService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersistencePlatformService::Service, ::unhinged::persistence::GraphTraverseRequest, ::unhinged::persistence::GraphTraverseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersistencePlatformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::persistence::GraphTraverseRequest* req,
             ::unhinged::persistence::GraphTraverseResponse* resp) {
               return service->GraphTraverse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersistencePlatformService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersistencePlatformService::Service, ::unhinged::persistence::ExecuteOperationRequest, ::unhinged::persistence::ExecuteOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersistencePlatformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::persistence::ExecuteOperationRequest* req,
             ::unhinged::persistence::ExecuteOperationResponse* resp) {
               return service->ExecuteOperation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersistencePlatformService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersistencePlatformService::Service, ::unhinged::persistence::HealthCheckRequest, ::unhinged::persistence::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersistencePlatformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::persistence::HealthCheckRequest* req,
             ::unhinged::persistence::HealthCheckResponse* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersistencePlatformService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersistencePlatformService::Service, ::unhinged::persistence::GetPlatformInfoRequest, ::unhinged::persistence::GetPlatformInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersistencePlatformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::persistence::GetPlatformInfoRequest* req,
             ::unhinged::persistence::GetPlatformInfoResponse* resp) {
               return service->GetPlatformInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersistencePlatformService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersistencePlatformService::Service, ::unhinged::persistence::GetMetricsRequest, ::unhinged::persistence::GetMetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersistencePlatformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::persistence::GetMetricsRequest* req,
             ::unhinged::persistence::GetMetricsResponse* resp) {
               return service->GetMetrics(ctx, req, resp);
             }, this)));
}

PersistencePlatformService::Service::~Service() {
}

::grpc::Status PersistencePlatformService::Service::Insert(::grpc::ServerContext* context, const ::unhinged::persistence::InsertRequest* request, ::unhinged::persistence::InsertResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersistencePlatformService::Service::InsertBatch(::grpc::ServerContext* context, const ::unhinged::persistence::InsertBatchRequest* request, ::unhinged::persistence::InsertBatchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersistencePlatformService::Service::Update(::grpc::ServerContext* context, const ::unhinged::persistence::UpdateRequest* request, ::unhinged::persistence::UpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersistencePlatformService::Service::Delete(::grpc::ServerContext* context, const ::unhinged::persistence::DeleteRequest* request, ::unhinged::persistence::DeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersistencePlatformService::Service::ExecuteQuery(::grpc::ServerContext* context, const ::unhinged::persistence::ExecuteQueryRequest* request, ::unhinged::persistence::ExecuteQueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersistencePlatformService::Service::ExecuteRawQuery(::grpc::ServerContext* context, const ::unhinged::persistence::ExecuteRawQueryRequest* request, ::unhinged::persistence::ExecuteRawQueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersistencePlatformService::Service::VectorSearch(::grpc::ServerContext* context, const ::unhinged::persistence::VectorSearchRequest* request, ::unhinged::persistence::VectorSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersistencePlatformService::Service::GraphTraverse(::grpc::ServerContext* context, const ::unhinged::persistence::GraphTraverseRequest* request, ::unhinged::persistence::GraphTraverseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersistencePlatformService::Service::ExecuteOperation(::grpc::ServerContext* context, const ::unhinged::persistence::ExecuteOperationRequest* request, ::unhinged::persistence::ExecuteOperationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersistencePlatformService::Service::HealthCheck(::grpc::ServerContext* context, const ::unhinged::persistence::HealthCheckRequest* request, ::unhinged::persistence::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersistencePlatformService::Service::GetPlatformInfo(::grpc::ServerContext* context, const ::unhinged::persistence::GetPlatformInfoRequest* request, ::unhinged::persistence::GetPlatformInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersistencePlatformService::Service::GetMetrics(::grpc::ServerContext* context, const ::unhinged::persistence::GetMetricsRequest* request, ::unhinged::persistence::GetMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace unhinged
}  // namespace persistence

