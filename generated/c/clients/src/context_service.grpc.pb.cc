// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: context_service.proto

#include "context_service.pb.h"
#include "context_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace multimodal {

static const char* ContextService_method_names[] = {
  "/multimodal.ContextService/GeneratePrompt",
  "/multimodal.ContextService/SearchContext",
  "/multimodal.ContextService/GenerateText",
  "/multimodal.ContextService/GetAvailableModels",
  "/multimodal.ContextService/GetHealth",
};

std::unique_ptr< ContextService::Stub> ContextService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ContextService::Stub> stub(new ContextService::Stub(channel, options));
  return stub;
}

ContextService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GeneratePrompt_(ContextService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchContext_(ContextService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateText_(ContextService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAvailableModels_(ContextService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHealth_(ContextService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ContextService::Stub::GeneratePrompt(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest& request, ::multimodal::PromptGenerationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::multimodal::PromptGenerationRequest, ::multimodal::PromptGenerationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GeneratePrompt_, context, request, response);
}

void ContextService::Stub::async::GeneratePrompt(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest* request, ::multimodal::PromptGenerationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::multimodal::PromptGenerationRequest, ::multimodal::PromptGenerationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GeneratePrompt_, context, request, response, std::move(f));
}

void ContextService::Stub::async::GeneratePrompt(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest* request, ::multimodal::PromptGenerationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GeneratePrompt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::multimodal::PromptGenerationResponse>* ContextService::Stub::PrepareAsyncGeneratePromptRaw(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::multimodal::PromptGenerationResponse, ::multimodal::PromptGenerationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GeneratePrompt_, context, request);
}

::grpc::ClientAsyncResponseReader< ::multimodal::PromptGenerationResponse>* ContextService::Stub::AsyncGeneratePromptRaw(::grpc::ClientContext* context, const ::multimodal::PromptGenerationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGeneratePromptRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ContextService::Stub::SearchContext(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest& request, ::multimodal::ContextSearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::multimodal::ContextSearchRequest, ::multimodal::ContextSearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchContext_, context, request, response);
}

void ContextService::Stub::async::SearchContext(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest* request, ::multimodal::ContextSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::multimodal::ContextSearchRequest, ::multimodal::ContextSearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchContext_, context, request, response, std::move(f));
}

void ContextService::Stub::async::SearchContext(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest* request, ::multimodal::ContextSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchContext_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::multimodal::ContextSearchResponse>* ContextService::Stub::PrepareAsyncSearchContextRaw(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::multimodal::ContextSearchResponse, ::multimodal::ContextSearchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchContext_, context, request);
}

::grpc::ClientAsyncResponseReader< ::multimodal::ContextSearchResponse>* ContextService::Stub::AsyncSearchContextRaw(::grpc::ClientContext* context, const ::multimodal::ContextSearchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchContextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ContextService::Stub::GenerateText(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest& request, ::multimodal::TextGenerationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::multimodal::TextGenerationRequest, ::multimodal::TextGenerationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateText_, context, request, response);
}

void ContextService::Stub::async::GenerateText(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest* request, ::multimodal::TextGenerationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::multimodal::TextGenerationRequest, ::multimodal::TextGenerationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateText_, context, request, response, std::move(f));
}

void ContextService::Stub::async::GenerateText(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest* request, ::multimodal::TextGenerationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateText_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::multimodal::TextGenerationResponse>* ContextService::Stub::PrepareAsyncGenerateTextRaw(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::multimodal::TextGenerationResponse, ::multimodal::TextGenerationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateText_, context, request);
}

::grpc::ClientAsyncResponseReader< ::multimodal::TextGenerationResponse>* ContextService::Stub::AsyncGenerateTextRaw(::grpc::ClientContext* context, const ::multimodal::TextGenerationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateTextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ContextService::Stub::GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::multimodal::LLMModelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::multimodal::Empty, ::multimodal::LLMModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAvailableModels_, context, request, response);
}

void ContextService::Stub::async::GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::LLMModelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::multimodal::Empty, ::multimodal::LLMModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAvailableModels_, context, request, response, std::move(f));
}

void ContextService::Stub::async::GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::LLMModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAvailableModels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::multimodal::LLMModelsResponse>* ContextService::Stub::PrepareAsyncGetAvailableModelsRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::multimodal::LLMModelsResponse, ::multimodal::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAvailableModels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::multimodal::LLMModelsResponse>* ContextService::Stub::AsyncGetAvailableModelsRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAvailableModelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ContextService::Stub::GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::multimodal::HealthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::multimodal::Empty, ::multimodal::HealthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetHealth_, context, request, response);
}

void ContextService::Stub::async::GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::multimodal::Empty, ::multimodal::HealthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHealth_, context, request, response, std::move(f));
}

void ContextService::Stub::async::GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>* ContextService::Stub::PrepareAsyncGetHealthRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::multimodal::HealthResponse, ::multimodal::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>* ContextService::Stub::AsyncGetHealthRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

ContextService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContextService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContextService::Service, ::multimodal::PromptGenerationRequest, ::multimodal::PromptGenerationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ContextService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::multimodal::PromptGenerationRequest* req,
             ::multimodal::PromptGenerationResponse* resp) {
               return service->GeneratePrompt(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContextService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContextService::Service, ::multimodal::ContextSearchRequest, ::multimodal::ContextSearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ContextService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::multimodal::ContextSearchRequest* req,
             ::multimodal::ContextSearchResponse* resp) {
               return service->SearchContext(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContextService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContextService::Service, ::multimodal::TextGenerationRequest, ::multimodal::TextGenerationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ContextService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::multimodal::TextGenerationRequest* req,
             ::multimodal::TextGenerationResponse* resp) {
               return service->GenerateText(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContextService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContextService::Service, ::multimodal::Empty, ::multimodal::LLMModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ContextService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::multimodal::Empty* req,
             ::multimodal::LLMModelsResponse* resp) {
               return service->GetAvailableModels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContextService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContextService::Service, ::multimodal::Empty, ::multimodal::HealthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ContextService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::multimodal::Empty* req,
             ::multimodal::HealthResponse* resp) {
               return service->GetHealth(ctx, req, resp);
             }, this)));
}

ContextService::Service::~Service() {
}

::grpc::Status ContextService::Service::GeneratePrompt(::grpc::ServerContext* context, const ::multimodal::PromptGenerationRequest* request, ::multimodal::PromptGenerationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContextService::Service::SearchContext(::grpc::ServerContext* context, const ::multimodal::ContextSearchRequest* request, ::multimodal::ContextSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContextService::Service::GenerateText(::grpc::ServerContext* context, const ::multimodal::TextGenerationRequest* request, ::multimodal::TextGenerationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContextService::Service::GetAvailableModels(::grpc::ServerContext* context, const ::multimodal::Empty* request, ::multimodal::LLMModelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContextService::Service::GetHealth(::grpc::ServerContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace multimodal

