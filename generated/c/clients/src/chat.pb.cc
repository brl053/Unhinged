// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace unhinged {
namespace chat {
namespace v1 {
PROTOBUF_CONSTEXPR Conversation::Conversation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.participant_ids_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.settings_)*/nullptr
  , /*decltype(_impl_.message_count_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConversationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConversationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConversationDefaultTypeInternal() {}
  union {
    Conversation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConversationDefaultTypeInternal _Conversation_default_instance_;
PROTOBUF_CONSTEXPR ConversationSettings::ConversationSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_sequences_)*/{}
  , /*decltype(_impl_.available_tools_)*/{}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.temperature_)*/0
  , /*decltype(_impl_.max_tokens_)*/0
  , /*decltype(_impl_.context_window_size_)*/0
  , /*decltype(_impl_.include_context_)*/false
  , /*decltype(_impl_.enable_tools_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConversationSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConversationSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConversationSettingsDefaultTypeInternal() {}
  union {
    ConversationSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConversationSettingsDefaultTypeInternal _ConversationSettings_default_instance_;
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attachments_)*/{}
  , /*decltype(_impl_.tool_calls_)*/{}
  , /*decltype(_impl_.conversation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.usage_)*/nullptr
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
PROTOBUF_CONSTEXPR ToolCall::ToolCall(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tool_call_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tool_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.arguments_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ToolCallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolCallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolCallDefaultTypeInternal() {}
  union {
    ToolCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolCallDefaultTypeInternal _ToolCall_default_instance_;
PROTOBUF_CONSTEXPR CreateConversationRequest::CreateConversationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.team_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.namespace_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.settings_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateConversationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateConversationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateConversationRequestDefaultTypeInternal() {}
  union {
    CreateConversationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateConversationRequestDefaultTypeInternal _CreateConversationRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateConversationResponse::CreateConversationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.conversation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateConversationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateConversationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateConversationResponseDefaultTypeInternal() {}
  union {
    CreateConversationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateConversationResponseDefaultTypeInternal _CreateConversationResponse_default_instance_;
PROTOBUF_CONSTEXPR GetConversationRequest::GetConversationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.include_messages_)*/false
  , /*decltype(_impl_.message_limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetConversationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConversationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConversationRequestDefaultTypeInternal() {}
  union {
    GetConversationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConversationRequestDefaultTypeInternal _GetConversationRequest_default_instance_;
PROTOBUF_CONSTEXPR GetConversationResponse::GetConversationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.conversation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetConversationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConversationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConversationResponseDefaultTypeInternal() {}
  union {
    GetConversationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConversationResponseDefaultTypeInternal _GetConversationResponse_default_instance_;
PROTOBUF_CONSTEXPR ListConversationsRequest::ListConversationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filters_)*/{}
  , /*decltype(_impl_.team_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.namespace_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListConversationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListConversationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListConversationsRequestDefaultTypeInternal() {}
  union {
    ListConversationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListConversationsRequestDefaultTypeInternal _ListConversationsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListConversationsResponse::ListConversationsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversations_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListConversationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListConversationsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListConversationsResponseDefaultTypeInternal() {}
  union {
    ListConversationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListConversationsResponseDefaultTypeInternal _ListConversationsResponse_default_instance_;
PROTOBUF_CONSTEXPR SendMessageRequest::SendMessageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attachments_)*/{}
  , /*decltype(_impl_.conversation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendMessageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendMessageRequestDefaultTypeInternal() {}
  union {
    SendMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMessageRequestDefaultTypeInternal _SendMessageRequest_default_instance_;
PROTOBUF_CONSTEXPR SendMessageResponse::SendMessageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendMessageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendMessageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendMessageResponseDefaultTypeInternal() {}
  union {
    SendMessageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMessageResponseDefaultTypeInternal _SendMessageResponse_default_instance_;
PROTOBUF_CONSTEXPR StreamChatRequest::StreamChatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attachments_)*/{}
  , /*decltype(_impl_.conversation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamChatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamChatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamChatRequestDefaultTypeInternal() {}
  union {
    StreamChatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamChatRequestDefaultTypeInternal _StreamChatRequest_default_instance_;
PROTOBUF_CONSTEXPR StreamOptions::StreamOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_tokens_)*/0
  , /*decltype(_impl_.temperature_)*/0
  , /*decltype(_impl_.include_context_)*/false
  , /*decltype(_impl_.enable_tools_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOptionsDefaultTypeInternal() {}
  union {
    StreamOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOptionsDefaultTypeInternal _StreamOptions_default_instance_;
PROTOBUF_CONSTEXPR ChatChunkPayload::ChatChunkPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tool_calls_)*/{}
  , /*decltype(_impl_.message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.conversation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatChunkPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatChunkPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatChunkPayloadDefaultTypeInternal() {}
  union {
    ChatChunkPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatChunkPayloadDefaultTypeInternal _ChatChunkPayload_default_instance_;
PROTOBUF_CONSTEXPR SubscribeRequest::SubscribeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_types_)*/{}
  , /*decltype(_impl_._event_types_cached_byte_size_)*/{0}
  , /*decltype(_impl_.conversation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeRequestDefaultTypeInternal() {}
  union {
    SubscribeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
PROTOBUF_CONSTEXPR GetMessagesRequest::GetMessagesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filters_)*/{}
  , /*decltype(_impl_.conversation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.role_filter_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMessagesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMessagesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMessagesRequestDefaultTypeInternal() {}
  union {
    GetMessagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMessagesRequestDefaultTypeInternal _GetMessagesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetMessagesResponse::GetMessagesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMessagesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMessagesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMessagesResponseDefaultTypeInternal() {}
  union {
    GetMessagesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMessagesResponseDefaultTypeInternal _GetMessagesResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateConversationRequest::UpdateConversationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.settings_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateConversationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateConversationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateConversationRequestDefaultTypeInternal() {}
  union {
    UpdateConversationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateConversationRequestDefaultTypeInternal _UpdateConversationRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateConversationResponse::UpdateConversationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.conversation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateConversationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateConversationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateConversationResponseDefaultTypeInternal() {}
  union {
    UpdateConversationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateConversationResponseDefaultTypeInternal _UpdateConversationResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateMessageRequest::UpdateMessageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateMessageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateMessageRequestDefaultTypeInternal() {}
  union {
    UpdateMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateMessageRequestDefaultTypeInternal _UpdateMessageRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateMessageResponse::UpdateMessageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateMessageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateMessageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateMessageResponseDefaultTypeInternal() {}
  union {
    UpdateMessageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateMessageResponseDefaultTypeInternal _UpdateMessageResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteConversationRequest::DeleteConversationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hard_delete_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteConversationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteConversationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteConversationRequestDefaultTypeInternal() {}
  union {
    DeleteConversationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteConversationRequestDefaultTypeInternal _DeleteConversationRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteConversationResponse::DeleteConversationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteConversationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteConversationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteConversationResponseDefaultTypeInternal() {}
  union {
    DeleteConversationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteConversationResponseDefaultTypeInternal _DeleteConversationResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteMessageRequest::DeleteMessageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hard_delete_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteMessageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteMessageRequestDefaultTypeInternal() {}
  union {
    DeleteMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteMessageRequestDefaultTypeInternal _DeleteMessageRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteMessageResponse::DeleteMessageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteMessageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteMessageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteMessageResponseDefaultTypeInternal() {}
  union {
    DeleteMessageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteMessageResponseDefaultTypeInternal _DeleteMessageResponse_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace unhinged
static ::_pb::Metadata file_level_metadata_chat_2eproto[26];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_chat_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chat_2eproto = nullptr;

const uint32_t TableStruct_chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::Conversation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::Conversation, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::Conversation, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::Conversation, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::Conversation, _impl_.settings_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::Conversation, _impl_.message_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::Conversation, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::Conversation, _impl_.participant_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ConversationSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ConversationSettings, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ConversationSettings, _impl_.temperature_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ConversationSettings, _impl_.max_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ConversationSettings, _impl_.stop_sequences_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ConversationSettings, _impl_.include_context_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ConversationSettings, _impl_.context_window_size_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ConversationSettings, _impl_.enable_tools_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ConversationSettings, _impl_.available_tools_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatMessage, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatMessage, _impl_.conversation_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatMessage, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatMessage, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatMessage, _impl_.attachments_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatMessage, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatMessage, _impl_.parent_message_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatMessage, _impl_.usage_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatMessage, _impl_.tool_calls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ToolCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ToolCall, _impl_.tool_call_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ToolCall, _impl_.tool_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ToolCall, _impl_.arguments_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ToolCall, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ToolCall, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::CreateConversationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::CreateConversationRequest, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::CreateConversationRequest, _impl_.namespace_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::CreateConversationRequest, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::CreateConversationRequest, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::CreateConversationRequest, _impl_.settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::CreateConversationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::CreateConversationResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::CreateConversationResponse, _impl_.conversation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetConversationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetConversationRequest, _impl_.conversation_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetConversationRequest, _impl_.include_messages_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetConversationRequest, _impl_.message_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetConversationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetConversationResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetConversationResponse, _impl_.conversation_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetConversationResponse, _impl_.messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ListConversationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ListConversationsRequest, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ListConversationsRequest, _impl_.namespace_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ListConversationsRequest, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ListConversationsRequest, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ListConversationsRequest, _impl_.filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ListConversationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ListConversationsResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ListConversationsResponse, _impl_.conversations_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ListConversationsResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::SendMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::SendMessageRequest, _impl_.conversation_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::SendMessageRequest, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::SendMessageRequest, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::SendMessageRequest, _impl_.attachments_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::SendMessageRequest, _impl_.parent_message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::SendMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::SendMessageResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::SendMessageResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::StreamChatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::StreamChatRequest, _impl_.conversation_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::StreamChatRequest, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::StreamChatRequest, _impl_.attachments_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::StreamChatRequest, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::StreamOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::StreamOptions, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::StreamOptions, _impl_.max_tokens_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::StreamOptions, _impl_.temperature_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::StreamOptions, _impl_.include_context_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::StreamOptions, _impl_.enable_tools_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatChunkPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatChunkPayload, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatChunkPayload, _impl_.conversation_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatChunkPayload, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatChunkPayload, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::ChatChunkPayload, _impl_.tool_calls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::SubscribeRequest, _impl_.conversation_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::SubscribeRequest, _impl_.event_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetMessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetMessagesRequest, _impl_.conversation_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetMessagesRequest, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetMessagesRequest, _impl_.role_filter_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetMessagesRequest, _impl_.filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetMessagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetMessagesResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetMessagesResponse, _impl_.messages_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::GetMessagesResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateConversationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateConversationRequest, _impl_.conversation_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateConversationRequest, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateConversationRequest, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateConversationRequest, _impl_.settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateConversationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateConversationResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateConversationResponse, _impl_.conversation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateMessageRequest, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateMessageRequest, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateMessageResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::UpdateMessageResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::DeleteConversationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::DeleteConversationRequest, _impl_.conversation_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::DeleteConversationRequest, _impl_.hard_delete_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::DeleteConversationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::DeleteConversationResponse, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::DeleteMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::DeleteMessageRequest, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::DeleteMessageRequest, _impl_.hard_delete_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::DeleteMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::chat::v1::DeleteMessageResponse, _impl_.response_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::unhinged::chat::v1::Conversation)},
  { 13, -1, -1, sizeof(::unhinged::chat::v1::ConversationSettings)},
  { 27, -1, -1, sizeof(::unhinged::chat::v1::ChatMessage)},
  { 42, -1, -1, sizeof(::unhinged::chat::v1::ToolCall)},
  { 53, -1, -1, sizeof(::unhinged::chat::v1::CreateConversationRequest)},
  { 64, -1, -1, sizeof(::unhinged::chat::v1::CreateConversationResponse)},
  { 72, -1, -1, sizeof(::unhinged::chat::v1::GetConversationRequest)},
  { 81, -1, -1, sizeof(::unhinged::chat::v1::GetConversationResponse)},
  { 90, -1, -1, sizeof(::unhinged::chat::v1::ListConversationsRequest)},
  { 101, -1, -1, sizeof(::unhinged::chat::v1::ListConversationsResponse)},
  { 110, -1, -1, sizeof(::unhinged::chat::v1::SendMessageRequest)},
  { 121, -1, -1, sizeof(::unhinged::chat::v1::SendMessageResponse)},
  { 129, -1, -1, sizeof(::unhinged::chat::v1::StreamChatRequest)},
  { 139, -1, -1, sizeof(::unhinged::chat::v1::StreamOptions)},
  { 150, -1, -1, sizeof(::unhinged::chat::v1::ChatChunkPayload)},
  { 161, -1, -1, sizeof(::unhinged::chat::v1::SubscribeRequest)},
  { 169, -1, -1, sizeof(::unhinged::chat::v1::GetMessagesRequest)},
  { 179, -1, -1, sizeof(::unhinged::chat::v1::GetMessagesResponse)},
  { 188, -1, -1, sizeof(::unhinged::chat::v1::UpdateConversationRequest)},
  { 198, -1, -1, sizeof(::unhinged::chat::v1::UpdateConversationResponse)},
  { 206, -1, -1, sizeof(::unhinged::chat::v1::UpdateMessageRequest)},
  { 214, -1, -1, sizeof(::unhinged::chat::v1::UpdateMessageResponse)},
  { 222, -1, -1, sizeof(::unhinged::chat::v1::DeleteConversationRequest)},
  { 230, -1, -1, sizeof(::unhinged::chat::v1::DeleteConversationResponse)},
  { 237, -1, -1, sizeof(::unhinged::chat::v1::DeleteMessageRequest)},
  { 245, -1, -1, sizeof(::unhinged::chat::v1::DeleteMessageResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::unhinged::chat::v1::_Conversation_default_instance_._instance,
  &::unhinged::chat::v1::_ConversationSettings_default_instance_._instance,
  &::unhinged::chat::v1::_ChatMessage_default_instance_._instance,
  &::unhinged::chat::v1::_ToolCall_default_instance_._instance,
  &::unhinged::chat::v1::_CreateConversationRequest_default_instance_._instance,
  &::unhinged::chat::v1::_CreateConversationResponse_default_instance_._instance,
  &::unhinged::chat::v1::_GetConversationRequest_default_instance_._instance,
  &::unhinged::chat::v1::_GetConversationResponse_default_instance_._instance,
  &::unhinged::chat::v1::_ListConversationsRequest_default_instance_._instance,
  &::unhinged::chat::v1::_ListConversationsResponse_default_instance_._instance,
  &::unhinged::chat::v1::_SendMessageRequest_default_instance_._instance,
  &::unhinged::chat::v1::_SendMessageResponse_default_instance_._instance,
  &::unhinged::chat::v1::_StreamChatRequest_default_instance_._instance,
  &::unhinged::chat::v1::_StreamOptions_default_instance_._instance,
  &::unhinged::chat::v1::_ChatChunkPayload_default_instance_._instance,
  &::unhinged::chat::v1::_SubscribeRequest_default_instance_._instance,
  &::unhinged::chat::v1::_GetMessagesRequest_default_instance_._instance,
  &::unhinged::chat::v1::_GetMessagesResponse_default_instance_._instance,
  &::unhinged::chat::v1::_UpdateConversationRequest_default_instance_._instance,
  &::unhinged::chat::v1::_UpdateConversationResponse_default_instance_._instance,
  &::unhinged::chat::v1::_UpdateMessageRequest_default_instance_._instance,
  &::unhinged::chat::v1::_UpdateMessageResponse_default_instance_._instance,
  &::unhinged::chat::v1::_DeleteConversationRequest_default_instance_._instance,
  &::unhinged::chat::v1::_DeleteConversationResponse_default_instance_._instance,
  &::unhinged::chat::v1::_DeleteMessageRequest_default_instance_._instance,
  &::unhinged::chat::v1::_DeleteMessageResponse_default_instance_._instance,
};

const char descriptor_table_protodef_chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nchat.proto\022\020unhinged.chat.v1\032\014common.p"
  "roto\"\212\002\n\014Conversation\0226\n\010metadata\030\001 \001(\0132"
  "$.unhinged.common.v1.ResourceMetadata\022\r\n"
  "\005title\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\0228\n\010set"
  "tings\030\004 \001(\0132&.unhinged.chat.v1.Conversat"
  "ionSettings\022\025\n\rmessage_count\030\005 \001(\005\0224\n\006st"
  "atus\030\006 \001(\0162$.unhinged.chat.v1.Conversati"
  "onStatus\022\027\n\017participant_ids\030\007 \003(\t\"\313\001\n\024Co"
  "nversationSettings\022\r\n\005model\030\001 \001(\t\022\023\n\013tem"
  "perature\030\002 \001(\002\022\022\n\nmax_tokens\030\003 \001(\005\022\026\n\016st"
  "op_sequences\030\004 \003(\t\022\027\n\017include_context\030\005 "
  "\001(\010\022\033\n\023context_window_size\030\006 \001(\005\022\024\n\014enab"
  "le_tools\030\007 \001(\010\022\027\n\017available_tools\030\010 \003(\t\""
  "\376\002\n\013ChatMessage\0226\n\010metadata\030\001 \001(\0132$.unhi"
  "nged.common.v1.ResourceMetadata\022\027\n\017conve"
  "rsation_id\030\002 \001(\t\022+\n\004role\030\003 \001(\0162\035.unhinge"
  "d.chat.v1.MessageRole\022\017\n\007content\030\004 \001(\t\0223"
  "\n\013attachments\030\005 \003(\0132\036.unhinged.common.v1"
  ".Attachment\022/\n\006status\030\006 \001(\0162\037.unhinged.c"
  "hat.v1.MessageStatus\022\031\n\021parent_message_i"
  "d\030\007 \001(\t\022/\n\005usage\030\010 \001(\0132 .unhinged.common"
  ".v1.UsageMetrics\022.\n\ntool_calls\030\t \003(\0132\032.u"
  "nhinged.chat.v1.ToolCall\"\210\001\n\010ToolCall\022\024\n"
  "\014tool_call_id\030\001 \001(\t\022\021\n\ttool_name\030\002 \001(\t\022\021"
  "\n\targuments\030\003 \001(\t\022\016\n\006result\030\004 \001(\t\0220\n\006sta"
  "tus\030\005 \001(\0162 .unhinged.chat.v1.ToolCallSta"
  "tus\"\240\001\n\031CreateConversationRequest\022\017\n\007tea"
  "m_id\030\001 \001(\t\022\024\n\014namespace_id\030\002 \001(\t\022\r\n\005titl"
  "e\030\003 \001(\t\022\023\n\013description\030\004 \001(\t\0228\n\010settings"
  "\030\005 \001(\0132&.unhinged.chat.v1.ConversationSe"
  "ttings\"\212\001\n\032CreateConversationResponse\0226\n"
  "\010response\030\001 \001(\0132$.unhinged.common.v1.Sta"
  "ndardResponse\0224\n\014conversation\030\002 \001(\0132\036.un"
  "hinged.chat.v1.Conversation\"b\n\026GetConver"
  "sationRequest\022\027\n\017conversation_id\030\001 \001(\t\022\030"
  "\n\020include_messages\030\002 \001(\010\022\025\n\rmessage_limi"
  "t\030\003 \001(\005\"\270\001\n\027GetConversationResponse\0226\n\010r"
  "esponse\030\001 \001(\0132$.unhinged.common.v1.Stand"
  "ardResponse\0224\n\014conversation\030\002 \001(\0132\036.unhi"
  "nged.chat.v1.Conversation\022/\n\010messages\030\003 "
  "\003(\0132\035.unhinged.chat.v1.ChatMessage\"\337\001\n\030L"
  "istConversationsRequest\022\017\n\007team_id\030\001 \001(\t"
  "\022\024\n\014namespace_id\030\002 \001(\t\0224\n\006status\030\003 \001(\0162$"
  ".unhinged.chat.v1.ConversationStatus\0229\n\n"
  "pagination\030\004 \001(\0132%.unhinged.common.v1.Pa"
  "ginationRequest\022+\n\007filters\030\005 \003(\0132\032.unhin"
  "ged.common.v1.Filter\"\306\001\n\031ListConversatio"
  "nsResponse\0226\n\010response\030\001 \001(\0132$.unhinged."
  "common.v1.StandardResponse\0225\n\rconversati"
  "ons\030\002 \003(\0132\036.unhinged.chat.v1.Conversatio"
  "n\022:\n\npagination\030\003 \001(\0132&.unhinged.common."
  "v1.PaginationResponse\"\273\001\n\022SendMessageReq"
  "uest\022\027\n\017conversation_id\030\001 \001(\t\022+\n\004role\030\002 "
  "\001(\0162\035.unhinged.chat.v1.MessageRole\022\017\n\007co"
  "ntent\030\003 \001(\t\0223\n\013attachments\030\004 \003(\0132\036.unhin"
  "ged.common.v1.Attachment\022\031\n\021parent_messa"
  "ge_id\030\005 \001(\t\"}\n\023SendMessageResponse\0226\n\010re"
  "sponse\030\001 \001(\0132$.unhinged.common.v1.Standa"
  "rdResponse\022.\n\007message\030\002 \001(\0132\035.unhinged.c"
  "hat.v1.ChatMessage\"\244\001\n\021StreamChatRequest"
  "\022\027\n\017conversation_id\030\001 \001(\t\022\017\n\007content\030\002 \001"
  "(\t\0223\n\013attachments\030\003 \003(\0132\036.unhinged.commo"
  "n.v1.Attachment\0220\n\007options\030\004 \001(\0132\037.unhin"
  "ged.chat.v1.StreamOptions\"v\n\rStreamOptio"
  "ns\022\r\n\005model\030\001 \001(\t\022\022\n\nmax_tokens\030\002 \001(\005\022\023\n"
  "\013temperature\030\003 \001(\002\022\027\n\017include_context\030\004 "
  "\001(\010\022\024\n\014enable_tools\030\005 \001(\010\"\255\001\n\020ChatChunkP"
  "ayload\022\022\n\nmessage_id\030\001 \001(\t\022\027\n\017conversati"
  "on_id\030\002 \001(\t\022+\n\004role\030\003 \001(\0162\035.unhinged.cha"
  "t.v1.MessageRole\022\017\n\007content\030\004 \001(\t\022.\n\ntoo"
  "l_calls\030\005 \003(\0132\032.unhinged.chat.v1.ToolCal"
  "l\"^\n\020SubscribeRequest\022\027\n\017conversation_id"
  "\030\001 \001(\t\0221\n\013event_types\030\002 \003(\0162\034.unhinged.c"
  "hat.v1.UpdateType\"\311\001\n\022GetMessagesRequest"
  "\022\027\n\017conversation_id\030\001 \001(\t\0229\n\npagination\030"
  "\002 \001(\0132%.unhinged.common.v1.PaginationReq"
  "uest\0222\n\013role_filter\030\003 \001(\0162\035.unhinged.cha"
  "t.v1.MessageRole\022+\n\007filters\030\004 \003(\0132\032.unhi"
  "nged.common.v1.Filter\"\272\001\n\023GetMessagesRes"
  "ponse\0226\n\010response\030\001 \001(\0132$.unhinged.commo"
  "n.v1.StandardResponse\022/\n\010messages\030\002 \003(\0132"
  "\035.unhinged.chat.v1.ChatMessage\022:\n\npagina"
  "tion\030\003 \001(\0132&.unhinged.common.v1.Paginati"
  "onResponse\"\222\001\n\031UpdateConversationRequest"
  "\022\027\n\017conversation_id\030\001 \001(\t\022\r\n\005title\030\002 \001(\t"
  "\022\023\n\013description\030\003 \001(\t\0228\n\010settings\030\004 \001(\0132"
  "&.unhinged.chat.v1.ConversationSettings\""
  "\212\001\n\032UpdateConversationResponse\0226\n\010respon"
  "se\030\001 \001(\0132$.unhinged.common.v1.StandardRe"
  "sponse\0224\n\014conversation\030\002 \001(\0132\036.unhinged."
  "chat.v1.Conversation\";\n\024UpdateMessageReq"
  "uest\022\022\n\nmessage_id\030\001 \001(\t\022\017\n\007content\030\002 \001("
  "\t\"\177\n\025UpdateMessageResponse\0226\n\010response\030\001"
  " \001(\0132$.unhinged.common.v1.StandardRespon"
  "se\022.\n\007message\030\002 \001(\0132\035.unhinged.chat.v1.C"
  "hatMessage\"I\n\031DeleteConversationRequest\022"
  "\027\n\017conversation_id\030\001 \001(\t\022\023\n\013hard_delete\030"
  "\002 \001(\010\"T\n\032DeleteConversationResponse\0226\n\010r"
  "esponse\030\001 \001(\0132$.unhinged.common.v1.Stand"
  "ardResponse\"\?\n\024DeleteMessageRequest\022\022\n\nm"
  "essage_id\030\001 \001(\t\022\023\n\013hard_delete\030\002 \001(\010\"O\n\025"
  "DeleteMessageResponse\0226\n\010response\030\001 \001(\0132"
  "$.unhinged.common.v1.StandardResponse*\274\001"
  "\n\022ConversationStatus\022#\n\037CONVERSATION_STA"
  "TUS_UNSPECIFIED\020\000\022\036\n\032CONVERSATION_STATUS"
  "_ACTIVE\020\001\022 \n\034CONVERSATION_STATUS_ARCHIVE"
  "D\020\002\022\037\n\033CONVERSATION_STATUS_DELETED\020\003\022\036\n\032"
  "CONVERSATION_STATUS_LOCKED\020\004*\216\001\n\013Message"
  "Role\022\034\n\030MESSAGE_ROLE_UNSPECIFIED\020\000\022\025\n\021ME"
  "SSAGE_ROLE_USER\020\001\022\032\n\026MESSAGE_ROLE_ASSIST"
  "ANT\020\002\022\027\n\023MESSAGE_ROLE_SYSTEM\020\003\022\025\n\021MESSAG"
  "E_ROLE_TOOL\020\004*\327\001\n\rMessageStatus\022\036\n\032MESSA"
  "GE_STATUS_UNSPECIFIED\020\000\022\027\n\023MESSAGE_STATU"
  "S_SENT\020\001\022\035\n\031MESSAGE_STATUS_PROCESSING\020\002\022"
  "\034\n\030MESSAGE_STATUS_COMPLETED\020\003\022\031\n\025MESSAGE"
  "_STATUS_FAILED\020\004\022\031\n\025MESSAGE_STATUS_EDITE"
  "D\020\005\022\032\n\026MESSAGE_STATUS_DELETED\020\006*\255\001\n\016Tool"
  "CallStatus\022 \n\034TOOL_CALL_STATUS_UNSPECIFI"
  "ED\020\000\022\034\n\030TOOL_CALL_STATUS_PENDING\020\001\022\036\n\032TO"
  "OL_CALL_STATUS_EXECUTING\020\002\022\036\n\032TOOL_CALL_"
  "STATUS_COMPLETED\020\003\022\033\n\027TOOL_CALL_STATUS_F"
  "AILED\020\004*\217\002\n\nUpdateType\022\033\n\027UPDATE_TYPE_UN"
  "SPECIFIED\020\000\022\034\n\030UPDATE_TYPE_MESSAGE_SENT\020"
  "\001\022\037\n\033UPDATE_TYPE_MESSAGE_UPDATED\020\002\022\037\n\033UP"
  "DATE_TYPE_MESSAGE_DELETED\020\003\022\036\n\032UPDATE_TY"
  "PE_TYPING_STARTED\020\004\022\036\n\032UPDATE_TYPE_TYPIN"
  "G_STOPPED\020\005\022\"\n\036UPDATE_TYPE_PARTICIPANT_J"
  "OINED\020\006\022 \n\034UPDATE_TYPE_PARTICIPANT_LEFT\020"
  "\0072\312\t\n\013ChatService\022o\n\022CreateConversation\022"
  "+.unhinged.chat.v1.CreateConversationReq"
  "uest\032,.unhinged.chat.v1.CreateConversati"
  "onResponse\022f\n\017GetConversation\022(.unhinged"
  ".chat.v1.GetConversationRequest\032).unhing"
  "ed.chat.v1.GetConversationResponse\022l\n\021Li"
  "stConversations\022*.unhinged.chat.v1.ListC"
  "onversationsRequest\032+.unhinged.chat.v1.L"
  "istConversationsResponse\022o\n\022UpdateConver"
  "sation\022+.unhinged.chat.v1.UpdateConversa"
  "tionRequest\032,.unhinged.chat.v1.UpdateCon"
  "versationResponse\022o\n\022DeleteConversation\022"
  "+.unhinged.chat.v1.DeleteConversationReq"
  "uest\032,.unhinged.chat.v1.DeleteConversati"
  "onResponse\022Z\n\013SendMessage\022$.unhinged.cha"
  "t.v1.SendMessageRequest\032%.unhinged.chat."
  "v1.SendMessageResponse\022Z\n\013GetMessages\022$."
  "unhinged.chat.v1.GetMessagesRequest\032%.un"
  "hinged.chat.v1.GetMessagesResponse\022`\n\rUp"
  "dateMessage\022&.unhinged.chat.v1.UpdateMes"
  "sageRequest\032\'.unhinged.chat.v1.UpdateMes"
  "sageResponse\022`\n\rDeleteMessage\022&.unhinged"
  ".chat.v1.DeleteMessageRequest\032\'.unhinged"
  ".chat.v1.DeleteMessageResponse\022T\n\nStream"
  "Chat\022#.unhinged.chat.v1.StreamChatReques"
  "t\032\037.unhinged.common.v1.StreamChunk0\001\022`\n\027"
  "SubscribeToConversation\022\".unhinged.chat."
  "v1.SubscribeRequest\032\037.unhinged.common.v1"
  ".StreamChunk0\001\022^\n\013HealthCheck\022&.unhinged"
  ".common.v1.HealthCheckRequest\032\'.unhinged"
  ".common.v1.HealthCheckResponseB\034\n\runhing"
  "ed.chatB\tChatProtoP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_chat_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_chat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chat_2eproto = {
    false, false, 6388, descriptor_table_protodef_chat_2eproto,
    "chat.proto",
    &descriptor_table_chat_2eproto_once, descriptor_table_chat_2eproto_deps, 1, 26,
    schemas, file_default_instances, TableStruct_chat_2eproto::offsets,
    file_level_metadata_chat_2eproto, file_level_enum_descriptors_chat_2eproto,
    file_level_service_descriptors_chat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chat_2eproto_getter() {
  return &descriptor_table_chat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chat_2eproto(&descriptor_table_chat_2eproto);
namespace unhinged {
namespace chat {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConversationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[0];
}
bool ConversationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageRole_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[1];
}
bool MessageRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[2];
}
bool MessageStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ToolCallStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[3];
}
bool ToolCallStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[4];
}
bool UpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Conversation::_Internal {
 public:
  static const ::unhinged::common::v1::ResourceMetadata& metadata(const Conversation* msg);
  static const ::unhinged::chat::v1::ConversationSettings& settings(const Conversation* msg);
};

const ::unhinged::common::v1::ResourceMetadata&
Conversation::_Internal::metadata(const Conversation* msg) {
  return *msg->_impl_.metadata_;
}
const ::unhinged::chat::v1::ConversationSettings&
Conversation::_Internal::settings(const Conversation* msg) {
  return *msg->_impl_.settings_;
}
void Conversation::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
Conversation::Conversation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.Conversation)
}
Conversation::Conversation(const Conversation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Conversation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_ids_){from._impl_.participant_ids_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.settings_){nullptr}
    , decltype(_impl_.message_count_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::unhinged::common::v1::ResourceMetadata(*from._impl_.metadata_);
  }
  if (from._internal_has_settings()) {
    _this->_impl_.settings_ = new ::unhinged::chat::v1::ConversationSettings(*from._impl_.settings_);
  }
  ::memcpy(&_impl_.message_count_, &from._impl_.message_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.message_count_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.Conversation)
}

inline void Conversation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_ids_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.settings_){nullptr}
    , decltype(_impl_.message_count_){0}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Conversation::~Conversation() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.Conversation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Conversation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_ids_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.settings_;
}

void Conversation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Conversation::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.Conversation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participant_ids_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.settings_ != nullptr) {
    delete _impl_.settings_;
  }
  _impl_.settings_ = nullptr;
  ::memset(&_impl_.message_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.message_count_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Conversation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.ResourceMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.Conversation.title"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.Conversation.description"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.ConversationSettings settings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 message_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.message_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.ConversationStatus status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::unhinged::chat::v1::ConversationStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string participant_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_participant_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.Conversation.participant_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Conversation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.Conversation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.ResourceMetadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.Conversation.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.Conversation.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .unhinged.chat.v1.ConversationSettings settings = 4;
  if (this->_internal_has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::settings(this),
        _Internal::settings(this).GetCachedSize(), target, stream);
  }

  // int32 message_count = 5;
  if (this->_internal_message_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_message_count(), target);
  }

  // .unhinged.chat.v1.ConversationStatus status = 6;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  // repeated string participant_ids = 7;
  for (int i = 0, n = this->_internal_participant_ids_size(); i < n; i++) {
    const auto& s = this->_internal_participant_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.Conversation.participant_ids");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.Conversation)
  return target;
}

size_t Conversation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.Conversation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string participant_ids = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.participant_ids_.size());
  for (int i = 0, n = _impl_.participant_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.participant_ids_.Get(i));
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .unhinged.common.v1.ResourceMetadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .unhinged.chat.v1.ConversationSettings settings = 4;
  if (this->_internal_has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.settings_);
  }

  // int32 message_count = 5;
  if (this->_internal_message_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_message_count());
  }

  // .unhinged.chat.v1.ConversationStatus status = 6;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Conversation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Conversation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Conversation::GetClassData() const { return &_class_data_; }


void Conversation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Conversation*>(&to_msg);
  auto& from = static_cast<const Conversation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.Conversation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.participant_ids_.MergeFrom(from._impl_.participant_ids_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::unhinged::common::v1::ResourceMetadata::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_settings()) {
    _this->_internal_mutable_settings()->::unhinged::chat::v1::ConversationSettings::MergeFrom(
        from._internal_settings());
  }
  if (from._internal_message_count() != 0) {
    _this->_internal_set_message_count(from._internal_message_count());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Conversation::CopyFrom(const Conversation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.Conversation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conversation::IsInitialized() const {
  return true;
}

void Conversation::InternalSwap(Conversation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.participant_ids_.InternalSwap(&other->_impl_.participant_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Conversation, _impl_.status_)
      + sizeof(Conversation::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Conversation, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Conversation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[0]);
}

// ===================================================================

class ConversationSettings::_Internal {
 public:
};

ConversationSettings::ConversationSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.ConversationSettings)
}
ConversationSettings::ConversationSettings(const ConversationSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConversationSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_sequences_){from._impl_.stop_sequences_}
    , decltype(_impl_.available_tools_){from._impl_.available_tools_}
    , decltype(_impl_.model_){}
    , decltype(_impl_.temperature_){}
    , decltype(_impl_.max_tokens_){}
    , decltype(_impl_.context_window_size_){}
    , decltype(_impl_.include_context_){}
    , decltype(_impl_.enable_tools_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.temperature_, &from._impl_.temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_tools_) -
    reinterpret_cast<char*>(&_impl_.temperature_)) + sizeof(_impl_.enable_tools_));
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.ConversationSettings)
}

inline void ConversationSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_sequences_){arena}
    , decltype(_impl_.available_tools_){arena}
    , decltype(_impl_.model_){}
    , decltype(_impl_.temperature_){0}
    , decltype(_impl_.max_tokens_){0}
    , decltype(_impl_.context_window_size_){0}
    , decltype(_impl_.include_context_){false}
    , decltype(_impl_.enable_tools_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConversationSettings::~ConversationSettings() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.ConversationSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConversationSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stop_sequences_.~RepeatedPtrField();
  _impl_.available_tools_.~RepeatedPtrField();
  _impl_.model_.Destroy();
}

void ConversationSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConversationSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.ConversationSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_sequences_.Clear();
  _impl_.available_tools_.Clear();
  _impl_.model_.ClearToEmpty();
  ::memset(&_impl_.temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enable_tools_) -
      reinterpret_cast<char*>(&_impl_.temperature_)) + sizeof(_impl_.enable_tools_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConversationSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ConversationSettings.model"));
        } else
          goto handle_unusual;
        continue;
      // float temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 max_tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string stop_sequences = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stop_sequences();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ConversationSettings.stop_sequences"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool include_context = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.include_context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 context_window_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.context_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_tools = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.enable_tools_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string available_tools = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_available_tools();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ConversationSettings.available_tools"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConversationSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.ConversationSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ConversationSettings.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // float temperature = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_temperature(), target);
  }

  // int32 max_tokens = 3;
  if (this->_internal_max_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_tokens(), target);
  }

  // repeated string stop_sequences = 4;
  for (int i = 0, n = this->_internal_stop_sequences_size(); i < n; i++) {
    const auto& s = this->_internal_stop_sequences(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ConversationSettings.stop_sequences");
    target = stream->WriteString(4, s, target);
  }

  // bool include_context = 5;
  if (this->_internal_include_context() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_include_context(), target);
  }

  // int32 context_window_size = 6;
  if (this->_internal_context_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_context_window_size(), target);
  }

  // bool enable_tools = 7;
  if (this->_internal_enable_tools() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_enable_tools(), target);
  }

  // repeated string available_tools = 8;
  for (int i = 0, n = this->_internal_available_tools_size(); i < n; i++) {
    const auto& s = this->_internal_available_tools(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ConversationSettings.available_tools");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.ConversationSettings)
  return target;
}

size_t ConversationSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.ConversationSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stop_sequences = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.stop_sequences_.size());
  for (int i = 0, n = _impl_.stop_sequences_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.stop_sequences_.Get(i));
  }

  // repeated string available_tools = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.available_tools_.size());
  for (int i = 0, n = _impl_.available_tools_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.available_tools_.Get(i));
  }

  // string model = 1;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // float temperature = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 1 + 4;
  }

  // int32 max_tokens = 3;
  if (this->_internal_max_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_tokens());
  }

  // int32 context_window_size = 6;
  if (this->_internal_context_window_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_context_window_size());
  }

  // bool include_context = 5;
  if (this->_internal_include_context() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_tools = 7;
  if (this->_internal_enable_tools() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConversationSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConversationSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConversationSettings::GetClassData() const { return &_class_data_; }


void ConversationSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConversationSettings*>(&to_msg);
  auto& from = static_cast<const ConversationSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.ConversationSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stop_sequences_.MergeFrom(from._impl_.stop_sequences_);
  _this->_impl_.available_tools_.MergeFrom(from._impl_.available_tools_);
  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = from._internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  if (from._internal_max_tokens() != 0) {
    _this->_internal_set_max_tokens(from._internal_max_tokens());
  }
  if (from._internal_context_window_size() != 0) {
    _this->_internal_set_context_window_size(from._internal_context_window_size());
  }
  if (from._internal_include_context() != 0) {
    _this->_internal_set_include_context(from._internal_include_context());
  }
  if (from._internal_enable_tools() != 0) {
    _this->_internal_set_enable_tools(from._internal_enable_tools());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConversationSettings::CopyFrom(const ConversationSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.ConversationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConversationSettings::IsInitialized() const {
  return true;
}

void ConversationSettings::InternalSwap(ConversationSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stop_sequences_.InternalSwap(&other->_impl_.stop_sequences_);
  _impl_.available_tools_.InternalSwap(&other->_impl_.available_tools_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConversationSettings, _impl_.enable_tools_)
      + sizeof(ConversationSettings::_impl_.enable_tools_)
      - PROTOBUF_FIELD_OFFSET(ConversationSettings, _impl_.temperature_)>(
          reinterpret_cast<char*>(&_impl_.temperature_),
          reinterpret_cast<char*>(&other->_impl_.temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConversationSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[1]);
}

// ===================================================================

class ChatMessage::_Internal {
 public:
  static const ::unhinged::common::v1::ResourceMetadata& metadata(const ChatMessage* msg);
  static const ::unhinged::common::v1::UsageMetrics& usage(const ChatMessage* msg);
};

const ::unhinged::common::v1::ResourceMetadata&
ChatMessage::_Internal::metadata(const ChatMessage* msg) {
  return *msg->_impl_.metadata_;
}
const ::unhinged::common::v1::UsageMetrics&
ChatMessage::_Internal::usage(const ChatMessage* msg) {
  return *msg->_impl_.usage_;
}
void ChatMessage::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
void ChatMessage::clear_attachments() {
  _impl_.attachments_.Clear();
}
void ChatMessage::clear_usage() {
  if (GetArenaForAllocation() == nullptr && _impl_.usage_ != nullptr) {
    delete _impl_.usage_;
  }
  _impl_.usage_ = nullptr;
}
ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attachments_){from._impl_.attachments_}
    , decltype(_impl_.tool_calls_){from._impl_.tool_calls_}
    , decltype(_impl_.conversation_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.parent_message_id_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.usage_){nullptr}
    , decltype(_impl_.role_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parent_message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_message_id().empty()) {
    _this->_impl_.parent_message_id_.Set(from._internal_parent_message_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::unhinged::common::v1::ResourceMetadata(*from._impl_.metadata_);
  }
  if (from._internal_has_usage()) {
    _this->_impl_.usage_ = new ::unhinged::common::v1::UsageMetrics(*from._impl_.usage_);
  }
  ::memcpy(&_impl_.role_, &from._impl_.role_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.ChatMessage)
}

inline void ChatMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attachments_){arena}
    , decltype(_impl_.tool_calls_){arena}
    , decltype(_impl_.conversation_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.parent_message_id_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.usage_){nullptr}
    , decltype(_impl_.role_){0}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parent_message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.ChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attachments_.~RepeatedPtrField();
  _impl_.tool_calls_.~RepeatedPtrField();
  _impl_.conversation_id_.Destroy();
  _impl_.content_.Destroy();
  _impl_.parent_message_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.usage_;
}

void ChatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.ChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attachments_.Clear();
  _impl_.tool_calls_.Clear();
  _impl_.conversation_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.parent_message_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usage_ != nullptr) {
    delete _impl_.usage_;
  }
  _impl_.usage_ = nullptr;
  ::memset(&_impl_.role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.ResourceMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string conversation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ChatMessage.conversation_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.MessageRole role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::unhinged::chat::v1::MessageRole>(val));
        } else
          goto handle_unusual;
        continue;
      // string content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ChatMessage.content"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.common.v1.Attachment attachments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.MessageStatus status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::unhinged::chat::v1::MessageStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string parent_message_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_parent_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ChatMessage.parent_message_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.UsageMetrics usage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_usage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.chat.v1.ToolCall tool_calls = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tool_calls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.ChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.ResourceMetadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // string conversation_id = 2;
  if (!this->_internal_conversation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ChatMessage.conversation_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_conversation_id(), target);
  }

  // .unhinged.chat.v1.MessageRole role = 3;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_role(), target);
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ChatMessage.content");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_content(), target);
  }

  // repeated .unhinged.common.v1.Attachment attachments = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attachments_size()); i < n; i++) {
    const auto& repfield = this->_internal_attachments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .unhinged.chat.v1.MessageStatus status = 6;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  // string parent_message_id = 7;
  if (!this->_internal_parent_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_message_id().data(), static_cast<int>(this->_internal_parent_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ChatMessage.parent_message_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_parent_message_id(), target);
  }

  // .unhinged.common.v1.UsageMetrics usage = 8;
  if (this->_internal_has_usage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::usage(this),
        _Internal::usage(this).GetCachedSize(), target, stream);
  }

  // repeated .unhinged.chat.v1.ToolCall tool_calls = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tool_calls_size()); i < n; i++) {
    const auto& repfield = this->_internal_tool_calls(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.ChatMessage)
  return target;
}

size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.ChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.common.v1.Attachment attachments = 5;
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->_impl_.attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .unhinged.chat.v1.ToolCall tool_calls = 9;
  total_size += 1UL * this->_internal_tool_calls_size();
  for (const auto& msg : this->_impl_.tool_calls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string conversation_id = 2;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string parent_message_id = 7;
  if (!this->_internal_parent_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_message_id());
  }

  // .unhinged.common.v1.ResourceMetadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .unhinged.common.v1.UsageMetrics usage = 8;
  if (this->_internal_has_usage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usage_);
  }

  // .unhinged.chat.v1.MessageRole role = 3;
  if (this->_internal_role() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
  }

  // .unhinged.chat.v1.MessageStatus status = 6;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessage::GetClassData() const { return &_class_data_; }


void ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessage*>(&to_msg);
  auto& from = static_cast<const ChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.ChatMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attachments_.MergeFrom(from._impl_.attachments_);
  _this->_impl_.tool_calls_.MergeFrom(from._impl_.tool_calls_);
  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_parent_message_id().empty()) {
    _this->_internal_set_parent_message_id(from._internal_parent_message_id());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::unhinged::common::v1::ResourceMetadata::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_usage()) {
    _this->_internal_mutable_usage()->::unhinged::common::v1::UsageMetrics::MergeFrom(
        from._internal_usage());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attachments_.InternalSwap(&other->_impl_.attachments_);
  _impl_.tool_calls_.InternalSwap(&other->_impl_.tool_calls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_id_, lhs_arena,
      &other->_impl_.conversation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_message_id_, lhs_arena,
      &other->_impl_.parent_message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.status_)
      + sizeof(ChatMessage::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[2]);
}

// ===================================================================

class ToolCall::_Internal {
 public:
};

ToolCall::ToolCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.ToolCall)
}
ToolCall::ToolCall(const ToolCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToolCall* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_call_id_){}
    , decltype(_impl_.tool_name_){}
    , decltype(_impl_.arguments_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tool_call_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_call_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tool_call_id().empty()) {
    _this->_impl_.tool_call_id_.Set(from._internal_tool_call_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tool_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tool_name().empty()) {
    _this->_impl_.tool_name_.Set(from._internal_tool_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.arguments_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arguments_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arguments().empty()) {
    _this->_impl_.arguments_.Set(from._internal_arguments(), 
      _this->GetArenaForAllocation());
  }
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.ToolCall)
}

inline void ToolCall::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_call_id_){}
    , decltype(_impl_.tool_name_){}
    , decltype(_impl_.arguments_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tool_call_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_call_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tool_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.arguments_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arguments_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ToolCall::~ToolCall() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.ToolCall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToolCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tool_call_id_.Destroy();
  _impl_.tool_name_.Destroy();
  _impl_.arguments_.Destroy();
  _impl_.result_.Destroy();
}

void ToolCall::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToolCall::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.ToolCall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tool_call_id_.ClearToEmpty();
  _impl_.tool_name_.ClearToEmpty();
  _impl_.arguments_.ClearToEmpty();
  _impl_.result_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolCall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tool_call_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tool_call_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ToolCall.tool_call_id"));
        } else
          goto handle_unusual;
        continue;
      // string tool_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tool_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ToolCall.tool_name"));
        } else
          goto handle_unusual;
        continue;
      // string arguments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_arguments();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ToolCall.arguments"));
        } else
          goto handle_unusual;
        continue;
      // string result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ToolCall.result"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.ToolCallStatus status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::unhinged::chat::v1::ToolCallStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToolCall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.ToolCall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tool_call_id = 1;
  if (!this->_internal_tool_call_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tool_call_id().data(), static_cast<int>(this->_internal_tool_call_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ToolCall.tool_call_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tool_call_id(), target);
  }

  // string tool_name = 2;
  if (!this->_internal_tool_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tool_name().data(), static_cast<int>(this->_internal_tool_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ToolCall.tool_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tool_name(), target);
  }

  // string arguments = 3;
  if (!this->_internal_arguments().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arguments().data(), static_cast<int>(this->_internal_arguments().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ToolCall.arguments");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_arguments(), target);
  }

  // string result = 4;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ToolCall.result");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_result(), target);
  }

  // .unhinged.chat.v1.ToolCallStatus status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.ToolCall)
  return target;
}

size_t ToolCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.ToolCall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tool_call_id = 1;
  if (!this->_internal_tool_call_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tool_call_id());
  }

  // string tool_name = 2;
  if (!this->_internal_tool_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tool_name());
  }

  // string arguments = 3;
  if (!this->_internal_arguments().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arguments());
  }

  // string result = 4;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // .unhinged.chat.v1.ToolCallStatus status = 5;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolCall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToolCall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolCall::GetClassData() const { return &_class_data_; }


void ToolCall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToolCall*>(&to_msg);
  auto& from = static_cast<const ToolCall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.ToolCall)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tool_call_id().empty()) {
    _this->_internal_set_tool_call_id(from._internal_tool_call_id());
  }
  if (!from._internal_tool_name().empty()) {
    _this->_internal_set_tool_name(from._internal_tool_name());
  }
  if (!from._internal_arguments().empty()) {
    _this->_internal_set_arguments(from._internal_arguments());
  }
  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolCall::CopyFrom(const ToolCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.ToolCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolCall::IsInitialized() const {
  return true;
}

void ToolCall::InternalSwap(ToolCall* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tool_call_id_, lhs_arena,
      &other->_impl_.tool_call_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tool_name_, lhs_arena,
      &other->_impl_.tool_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.arguments_, lhs_arena,
      &other->_impl_.arguments_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolCall::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[3]);
}

// ===================================================================

class CreateConversationRequest::_Internal {
 public:
  static const ::unhinged::chat::v1::ConversationSettings& settings(const CreateConversationRequest* msg);
};

const ::unhinged::chat::v1::ConversationSettings&
CreateConversationRequest::_Internal::settings(const CreateConversationRequest* msg) {
  return *msg->_impl_.settings_;
}
CreateConversationRequest::CreateConversationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.CreateConversationRequest)
}
CreateConversationRequest::CreateConversationRequest(const CreateConversationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateConversationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.team_id_){}
    , decltype(_impl_.namespace_id_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.settings_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_team_id().empty()) {
    _this->_impl_.team_id_.Set(from._internal_team_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.namespace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_id().empty()) {
    _this->_impl_.namespace_id_.Set(from._internal_namespace_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_settings()) {
    _this->_impl_.settings_ = new ::unhinged::chat::v1::ConversationSettings(*from._impl_.settings_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.CreateConversationRequest)
}

inline void CreateConversationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.team_id_){}
    , decltype(_impl_.namespace_id_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.settings_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.team_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.namespace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateConversationRequest::~CreateConversationRequest() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.CreateConversationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateConversationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.team_id_.Destroy();
  _impl_.namespace_id_.Destroy();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.settings_;
}

void CreateConversationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateConversationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.CreateConversationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.team_id_.ClearToEmpty();
  _impl_.namespace_id_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.settings_ != nullptr) {
    delete _impl_.settings_;
  }
  _impl_.settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateConversationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_team_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.CreateConversationRequest.team_id"));
        } else
          goto handle_unusual;
        continue;
      // string namespace_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_namespace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.CreateConversationRequest.namespace_id"));
        } else
          goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.CreateConversationRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.CreateConversationRequest.description"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.ConversationSettings settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateConversationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.CreateConversationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string team_id = 1;
  if (!this->_internal_team_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_team_id().data(), static_cast<int>(this->_internal_team_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.CreateConversationRequest.team_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_team_id(), target);
  }

  // string namespace_id = 2;
  if (!this->_internal_namespace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_id().data(), static_cast<int>(this->_internal_namespace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.CreateConversationRequest.namespace_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_id(), target);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.CreateConversationRequest.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.CreateConversationRequest.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // .unhinged.chat.v1.ConversationSettings settings = 5;
  if (this->_internal_has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::settings(this),
        _Internal::settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.CreateConversationRequest)
  return target;
}

size_t CreateConversationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.CreateConversationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string team_id = 1;
  if (!this->_internal_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_team_id());
  }

  // string namespace_id = 2;
  if (!this->_internal_namespace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_id());
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .unhinged.chat.v1.ConversationSettings settings = 5;
  if (this->_internal_has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateConversationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateConversationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateConversationRequest::GetClassData() const { return &_class_data_; }


void CreateConversationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateConversationRequest*>(&to_msg);
  auto& from = static_cast<const CreateConversationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.CreateConversationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_team_id().empty()) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  if (!from._internal_namespace_id().empty()) {
    _this->_internal_set_namespace_id(from._internal_namespace_id());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_settings()) {
    _this->_internal_mutable_settings()->::unhinged::chat::v1::ConversationSettings::MergeFrom(
        from._internal_settings());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateConversationRequest::CopyFrom(const CreateConversationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.CreateConversationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateConversationRequest::IsInitialized() const {
  return true;
}

void CreateConversationRequest::InternalSwap(CreateConversationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_id_, lhs_arena,
      &other->_impl_.team_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace_id_, lhs_arena,
      &other->_impl_.namespace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.settings_, other->_impl_.settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateConversationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[4]);
}

// ===================================================================

class CreateConversationResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const CreateConversationResponse* msg);
  static const ::unhinged::chat::v1::Conversation& conversation(const CreateConversationResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
CreateConversationResponse::_Internal::response(const CreateConversationResponse* msg) {
  return *msg->_impl_.response_;
}
const ::unhinged::chat::v1::Conversation&
CreateConversationResponse::_Internal::conversation(const CreateConversationResponse* msg) {
  return *msg->_impl_.conversation_;
}
void CreateConversationResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
CreateConversationResponse::CreateConversationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.CreateConversationResponse)
}
CreateConversationResponse::CreateConversationResponse(const CreateConversationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateConversationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.conversation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  if (from._internal_has_conversation()) {
    _this->_impl_.conversation_ = new ::unhinged::chat::v1::Conversation(*from._impl_.conversation_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.CreateConversationResponse)
}

inline void CreateConversationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.conversation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateConversationResponse::~CreateConversationResponse() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.CreateConversationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateConversationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.conversation_;
}

void CreateConversationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateConversationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.CreateConversationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.conversation_ != nullptr) {
    delete _impl_.conversation_;
  }
  _impl_.conversation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateConversationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.Conversation conversation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_conversation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateConversationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.CreateConversationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .unhinged.chat.v1.Conversation conversation = 2;
  if (this->_internal_has_conversation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::conversation(this),
        _Internal::conversation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.CreateConversationResponse)
  return target;
}

size_t CreateConversationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.CreateConversationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .unhinged.chat.v1.Conversation conversation = 2;
  if (this->_internal_has_conversation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conversation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateConversationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateConversationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateConversationResponse::GetClassData() const { return &_class_data_; }


void CreateConversationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateConversationResponse*>(&to_msg);
  auto& from = static_cast<const CreateConversationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.CreateConversationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_conversation()) {
    _this->_internal_mutable_conversation()->::unhinged::chat::v1::Conversation::MergeFrom(
        from._internal_conversation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateConversationResponse::CopyFrom(const CreateConversationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.CreateConversationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateConversationResponse::IsInitialized() const {
  return true;
}

void CreateConversationResponse::InternalSwap(CreateConversationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateConversationResponse, _impl_.conversation_)
      + sizeof(CreateConversationResponse::_impl_.conversation_)
      - PROTOBUF_FIELD_OFFSET(CreateConversationResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateConversationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[5]);
}

// ===================================================================

class GetConversationRequest::_Internal {
 public:
};

GetConversationRequest::GetConversationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.GetConversationRequest)
}
GetConversationRequest::GetConversationRequest(const GetConversationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetConversationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_){}
    , decltype(_impl_.include_messages_){}
    , decltype(_impl_.message_limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.include_messages_, &from._impl_.include_messages_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_limit_) -
    reinterpret_cast<char*>(&_impl_.include_messages_)) + sizeof(_impl_.message_limit_));
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.GetConversationRequest)
}

inline void GetConversationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_){}
    , decltype(_impl_.include_messages_){false}
    , decltype(_impl_.message_limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetConversationRequest::~GetConversationRequest() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.GetConversationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetConversationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversation_id_.Destroy();
}

void GetConversationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetConversationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.GetConversationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conversation_id_.ClearToEmpty();
  ::memset(&_impl_.include_messages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.message_limit_) -
      reinterpret_cast<char*>(&_impl_.include_messages_)) + sizeof(_impl_.message_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConversationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.GetConversationRequest.conversation_id"));
        } else
          goto handle_unusual;
        continue;
      // bool include_messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.include_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 message_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.message_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConversationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.GetConversationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.GetConversationRequest.conversation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // bool include_messages = 2;
  if (this->_internal_include_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_include_messages(), target);
  }

  // int32 message_limit = 3;
  if (this->_internal_message_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_message_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.GetConversationRequest)
  return target;
}

size_t GetConversationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.GetConversationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  // bool include_messages = 2;
  if (this->_internal_include_messages() != 0) {
    total_size += 1 + 1;
  }

  // int32 message_limit = 3;
  if (this->_internal_message_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_message_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConversationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetConversationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConversationRequest::GetClassData() const { return &_class_data_; }


void GetConversationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetConversationRequest*>(&to_msg);
  auto& from = static_cast<const GetConversationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.GetConversationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  if (from._internal_include_messages() != 0) {
    _this->_internal_set_include_messages(from._internal_include_messages());
  }
  if (from._internal_message_limit() != 0) {
    _this->_internal_set_message_limit(from._internal_message_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConversationRequest::CopyFrom(const GetConversationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.GetConversationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConversationRequest::IsInitialized() const {
  return true;
}

void GetConversationRequest::InternalSwap(GetConversationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_id_, lhs_arena,
      &other->_impl_.conversation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetConversationRequest, _impl_.message_limit_)
      + sizeof(GetConversationRequest::_impl_.message_limit_)
      - PROTOBUF_FIELD_OFFSET(GetConversationRequest, _impl_.include_messages_)>(
          reinterpret_cast<char*>(&_impl_.include_messages_),
          reinterpret_cast<char*>(&other->_impl_.include_messages_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConversationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[6]);
}

// ===================================================================

class GetConversationResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const GetConversationResponse* msg);
  static const ::unhinged::chat::v1::Conversation& conversation(const GetConversationResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
GetConversationResponse::_Internal::response(const GetConversationResponse* msg) {
  return *msg->_impl_.response_;
}
const ::unhinged::chat::v1::Conversation&
GetConversationResponse::_Internal::conversation(const GetConversationResponse* msg) {
  return *msg->_impl_.conversation_;
}
void GetConversationResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
GetConversationResponse::GetConversationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.GetConversationResponse)
}
GetConversationResponse::GetConversationResponse(const GetConversationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetConversationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.conversation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  if (from._internal_has_conversation()) {
    _this->_impl_.conversation_ = new ::unhinged::chat::v1::Conversation(*from._impl_.conversation_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.GetConversationResponse)
}

inline void GetConversationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.conversation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetConversationResponse::~GetConversationResponse() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.GetConversationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetConversationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.conversation_;
}

void GetConversationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetConversationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.GetConversationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.conversation_ != nullptr) {
    delete _impl_.conversation_;
  }
  _impl_.conversation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConversationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.Conversation conversation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_conversation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.chat.v1.ChatMessage messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConversationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.GetConversationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .unhinged.chat.v1.Conversation conversation = 2;
  if (this->_internal_has_conversation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::conversation(this),
        _Internal::conversation(this).GetCachedSize(), target, stream);
  }

  // repeated .unhinged.chat.v1.ChatMessage messages = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.GetConversationResponse)
  return target;
}

size_t GetConversationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.GetConversationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.chat.v1.ChatMessage messages = 3;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .unhinged.chat.v1.Conversation conversation = 2;
  if (this->_internal_has_conversation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conversation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConversationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetConversationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConversationResponse::GetClassData() const { return &_class_data_; }


void GetConversationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetConversationResponse*>(&to_msg);
  auto& from = static_cast<const GetConversationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.GetConversationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_conversation()) {
    _this->_internal_mutable_conversation()->::unhinged::chat::v1::Conversation::MergeFrom(
        from._internal_conversation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConversationResponse::CopyFrom(const GetConversationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.GetConversationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConversationResponse::IsInitialized() const {
  return true;
}

void GetConversationResponse::InternalSwap(GetConversationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetConversationResponse, _impl_.conversation_)
      + sizeof(GetConversationResponse::_impl_.conversation_)
      - PROTOBUF_FIELD_OFFSET(GetConversationResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConversationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[7]);
}

// ===================================================================

class ListConversationsRequest::_Internal {
 public:
  static const ::unhinged::common::v1::PaginationRequest& pagination(const ListConversationsRequest* msg);
};

const ::unhinged::common::v1::PaginationRequest&
ListConversationsRequest::_Internal::pagination(const ListConversationsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void ListConversationsRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
void ListConversationsRequest::clear_filters() {
  _impl_.filters_.Clear();
}
ListConversationsRequest::ListConversationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.ListConversationsRequest)
}
ListConversationsRequest::ListConversationsRequest(const ListConversationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListConversationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){from._impl_.filters_}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.namespace_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_team_id().empty()) {
    _this->_impl_.team_id_.Set(from._internal_team_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.namespace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_id().empty()) {
    _this->_impl_.namespace_id_.Set(from._internal_namespace_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::unhinged::common::v1::PaginationRequest(*from._impl_.pagination_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.ListConversationsRequest)
}

inline void ListConversationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){arena}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.namespace_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.team_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.namespace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListConversationsRequest::~ListConversationsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.ListConversationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListConversationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filters_.~RepeatedPtrField();
  _impl_.team_id_.Destroy();
  _impl_.namespace_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void ListConversationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListConversationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.ListConversationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  _impl_.team_id_.ClearToEmpty();
  _impl_.namespace_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListConversationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_team_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ListConversationsRequest.team_id"));
        } else
          goto handle_unusual;
        continue;
      // string namespace_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_namespace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ListConversationsRequest.namespace_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.ConversationStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::unhinged::chat::v1::ConversationStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.PaginationRequest pagination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.common.v1.Filter filters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListConversationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.ListConversationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string team_id = 1;
  if (!this->_internal_team_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_team_id().data(), static_cast<int>(this->_internal_team_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ListConversationsRequest.team_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_team_id(), target);
  }

  // string namespace_id = 2;
  if (!this->_internal_namespace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_id().data(), static_cast<int>(this->_internal_namespace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ListConversationsRequest.namespace_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_id(), target);
  }

  // .unhinged.chat.v1.ConversationStatus status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // .unhinged.common.v1.PaginationRequest pagination = 4;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // repeated .unhinged.common.v1.Filter filters = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.ListConversationsRequest)
  return target;
}

size_t ListConversationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.ListConversationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.common.v1.Filter filters = 5;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->_impl_.filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string team_id = 1;
  if (!this->_internal_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_team_id());
  }

  // string namespace_id = 2;
  if (!this->_internal_namespace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_id());
  }

  // .unhinged.common.v1.PaginationRequest pagination = 4;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // .unhinged.chat.v1.ConversationStatus status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListConversationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListConversationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListConversationsRequest::GetClassData() const { return &_class_data_; }


void ListConversationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListConversationsRequest*>(&to_msg);
  auto& from = static_cast<const ListConversationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.ListConversationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filters_.MergeFrom(from._impl_.filters_);
  if (!from._internal_team_id().empty()) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  if (!from._internal_namespace_id().empty()) {
    _this->_internal_set_namespace_id(from._internal_namespace_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::unhinged::common::v1::PaginationRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListConversationsRequest::CopyFrom(const ListConversationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.ListConversationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConversationsRequest::IsInitialized() const {
  return true;
}

void ListConversationsRequest::InternalSwap(ListConversationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_id_, lhs_arena,
      &other->_impl_.team_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace_id_, lhs_arena,
      &other->_impl_.namespace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListConversationsRequest, _impl_.status_)
      + sizeof(ListConversationsRequest::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ListConversationsRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConversationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[8]);
}

// ===================================================================

class ListConversationsResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const ListConversationsResponse* msg);
  static const ::unhinged::common::v1::PaginationResponse& pagination(const ListConversationsResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
ListConversationsResponse::_Internal::response(const ListConversationsResponse* msg) {
  return *msg->_impl_.response_;
}
const ::unhinged::common::v1::PaginationResponse&
ListConversationsResponse::_Internal::pagination(const ListConversationsResponse* msg) {
  return *msg->_impl_.pagination_;
}
void ListConversationsResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
void ListConversationsResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
ListConversationsResponse::ListConversationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.ListConversationsResponse)
}
ListConversationsResponse::ListConversationsResponse(const ListConversationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListConversationsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversations_){from._impl_.conversations_}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::unhinged::common::v1::PaginationResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.ListConversationsResponse)
}

inline void ListConversationsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.conversations_){arena}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListConversationsResponse::~ListConversationsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.ListConversationsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListConversationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversations_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void ListConversationsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListConversationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.ListConversationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conversations_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListConversationsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.chat.v1.Conversation conversations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conversations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.PaginationResponse pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListConversationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.ListConversationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // repeated .unhinged.chat.v1.Conversation conversations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_conversations_size()); i < n; i++) {
    const auto& repfield = this->_internal_conversations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .unhinged.common.v1.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.ListConversationsResponse)
  return target;
}

size_t ListConversationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.ListConversationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.chat.v1.Conversation conversations = 2;
  total_size += 1UL * this->_internal_conversations_size();
  for (const auto& msg : this->_impl_.conversations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .unhinged.common.v1.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListConversationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListConversationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListConversationsResponse::GetClassData() const { return &_class_data_; }


void ListConversationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListConversationsResponse*>(&to_msg);
  auto& from = static_cast<const ListConversationsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.ListConversationsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.conversations_.MergeFrom(from._impl_.conversations_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::unhinged::common::v1::PaginationResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListConversationsResponse::CopyFrom(const ListConversationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.ListConversationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConversationsResponse::IsInitialized() const {
  return true;
}

void ListConversationsResponse::InternalSwap(ListConversationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.conversations_.InternalSwap(&other->_impl_.conversations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListConversationsResponse, _impl_.pagination_)
      + sizeof(ListConversationsResponse::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(ListConversationsResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConversationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[9]);
}

// ===================================================================

class SendMessageRequest::_Internal {
 public:
};

void SendMessageRequest::clear_attachments() {
  _impl_.attachments_.Clear();
}
SendMessageRequest::SendMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.SendMessageRequest)
}
SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendMessageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attachments_){from._impl_.attachments_}
    , decltype(_impl_.conversation_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.parent_message_id_){}
    , decltype(_impl_.role_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parent_message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_message_id().empty()) {
    _this->_impl_.parent_message_id_.Set(from._internal_parent_message_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.role_ = from._impl_.role_;
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.SendMessageRequest)
}

inline void SendMessageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attachments_){arena}
    , decltype(_impl_.conversation_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.parent_message_id_){}
    , decltype(_impl_.role_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parent_message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendMessageRequest::~SendMessageRequest() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.SendMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attachments_.~RepeatedPtrField();
  _impl_.conversation_id_.Destroy();
  _impl_.content_.Destroy();
  _impl_.parent_message_id_.Destroy();
}

void SendMessageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.SendMessageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attachments_.Clear();
  _impl_.conversation_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.parent_message_id_.ClearToEmpty();
  _impl_.role_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.SendMessageRequest.conversation_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.MessageRole role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::unhinged::chat::v1::MessageRole>(val));
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.SendMessageRequest.content"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.common.v1.Attachment attachments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string parent_message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_parent_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.SendMessageRequest.parent_message_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.SendMessageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.SendMessageRequest.conversation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // .unhinged.chat.v1.MessageRole role = 2;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_role(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.SendMessageRequest.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // repeated .unhinged.common.v1.Attachment attachments = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attachments_size()); i < n; i++) {
    const auto& repfield = this->_internal_attachments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string parent_message_id = 5;
  if (!this->_internal_parent_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_message_id().data(), static_cast<int>(this->_internal_parent_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.SendMessageRequest.parent_message_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_parent_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.SendMessageRequest)
  return target;
}

size_t SendMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.SendMessageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.common.v1.Attachment attachments = 4;
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->_impl_.attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string parent_message_id = 5;
  if (!this->_internal_parent_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_message_id());
  }

  // .unhinged.chat.v1.MessageRole role = 2;
  if (this->_internal_role() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageRequest::GetClassData() const { return &_class_data_; }


void SendMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendMessageRequest*>(&to_msg);
  auto& from = static_cast<const SendMessageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.SendMessageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attachments_.MergeFrom(from._impl_.attachments_);
  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_parent_message_id().empty()) {
    _this->_internal_set_parent_message_id(from._internal_parent_message_id());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageRequest::CopyFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.SendMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequest::IsInitialized() const {
  return true;
}

void SendMessageRequest::InternalSwap(SendMessageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attachments_.InternalSwap(&other->_impl_.attachments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_id_, lhs_arena,
      &other->_impl_.conversation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_message_id_, lhs_arena,
      &other->_impl_.parent_message_id_, rhs_arena
  );
  swap(_impl_.role_, other->_impl_.role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[10]);
}

// ===================================================================

class SendMessageResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const SendMessageResponse* msg);
  static const ::unhinged::chat::v1::ChatMessage& message(const SendMessageResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
SendMessageResponse::_Internal::response(const SendMessageResponse* msg) {
  return *msg->_impl_.response_;
}
const ::unhinged::chat::v1::ChatMessage&
SendMessageResponse::_Internal::message(const SendMessageResponse* msg) {
  return *msg->_impl_.message_;
}
void SendMessageResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
SendMessageResponse::SendMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.SendMessageResponse)
}
SendMessageResponse::SendMessageResponse(const SendMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendMessageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::unhinged::chat::v1::ChatMessage(*from._impl_.message_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.SendMessageResponse)
}

inline void SendMessageResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SendMessageResponse::~SendMessageResponse() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.SendMessageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.message_;
}

void SendMessageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.SendMessageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.ChatMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.SendMessageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .unhinged.chat.v1.ChatMessage message = 2;
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.SendMessageResponse)
  return target;
}

size_t SendMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.SendMessageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .unhinged.chat.v1.ChatMessage message = 2;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendMessageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageResponse::GetClassData() const { return &_class_data_; }


void SendMessageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendMessageResponse*>(&to_msg);
  auto& from = static_cast<const SendMessageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.SendMessageResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::unhinged::chat::v1::ChatMessage::MergeFrom(
        from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageResponse::CopyFrom(const SendMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.SendMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageResponse::IsInitialized() const {
  return true;
}

void SendMessageResponse::InternalSwap(SendMessageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageResponse, _impl_.message_)
      + sizeof(SendMessageResponse::_impl_.message_)
      - PROTOBUF_FIELD_OFFSET(SendMessageResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[11]);
}

// ===================================================================

class StreamChatRequest::_Internal {
 public:
  static const ::unhinged::chat::v1::StreamOptions& options(const StreamChatRequest* msg);
};

const ::unhinged::chat::v1::StreamOptions&
StreamChatRequest::_Internal::options(const StreamChatRequest* msg) {
  return *msg->_impl_.options_;
}
void StreamChatRequest::clear_attachments() {
  _impl_.attachments_.Clear();
}
StreamChatRequest::StreamChatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.StreamChatRequest)
}
StreamChatRequest::StreamChatRequest(const StreamChatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamChatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attachments_){from._impl_.attachments_}
    , decltype(_impl_.conversation_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.options_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::unhinged::chat::v1::StreamOptions(*from._impl_.options_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.StreamChatRequest)
}

inline void StreamChatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attachments_){arena}
    , decltype(_impl_.conversation_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.options_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamChatRequest::~StreamChatRequest() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.StreamChatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamChatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attachments_.~RepeatedPtrField();
  _impl_.conversation_id_.Destroy();
  _impl_.content_.Destroy();
  if (this != internal_default_instance()) delete _impl_.options_;
}

void StreamChatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.StreamChatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attachments_.Clear();
  _impl_.conversation_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamChatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.StreamChatRequest.conversation_id"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.StreamChatRequest.content"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.common.v1.Attachment attachments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.StreamOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamChatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.StreamChatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.StreamChatRequest.conversation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.StreamChatRequest.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // repeated .unhinged.common.v1.Attachment attachments = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attachments_size()); i < n; i++) {
    const auto& repfield = this->_internal_attachments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .unhinged.chat.v1.StreamOptions options = 4;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.StreamChatRequest)
  return target;
}

size_t StreamChatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.StreamChatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.common.v1.Attachment attachments = 3;
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->_impl_.attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .unhinged.chat.v1.StreamOptions options = 4;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamChatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamChatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamChatRequest::GetClassData() const { return &_class_data_; }


void StreamChatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamChatRequest*>(&to_msg);
  auto& from = static_cast<const StreamChatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.StreamChatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attachments_.MergeFrom(from._impl_.attachments_);
  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::unhinged::chat::v1::StreamOptions::MergeFrom(
        from._internal_options());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamChatRequest::CopyFrom(const StreamChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.StreamChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamChatRequest::IsInitialized() const {
  return true;
}

void StreamChatRequest::InternalSwap(StreamChatRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attachments_.InternalSwap(&other->_impl_.attachments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_id_, lhs_arena,
      &other->_impl_.conversation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.options_, other->_impl_.options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamChatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[12]);
}

// ===================================================================

class StreamOptions::_Internal {
 public:
};

StreamOptions::StreamOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.StreamOptions)
}
StreamOptions::StreamOptions(const StreamOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){}
    , decltype(_impl_.max_tokens_){}
    , decltype(_impl_.temperature_){}
    , decltype(_impl_.include_context_){}
    , decltype(_impl_.enable_tools_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.max_tokens_, &from._impl_.max_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_tools_) -
    reinterpret_cast<char*>(&_impl_.max_tokens_)) + sizeof(_impl_.enable_tools_));
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.StreamOptions)
}

inline void StreamOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){}
    , decltype(_impl_.max_tokens_){0}
    , decltype(_impl_.temperature_){0}
    , decltype(_impl_.include_context_){false}
    , decltype(_impl_.enable_tools_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamOptions::~StreamOptions() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.StreamOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_.Destroy();
}

void StreamOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.StreamOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_.ClearToEmpty();
  ::memset(&_impl_.max_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enable_tools_) -
      reinterpret_cast<char*>(&_impl_.max_tokens_)) + sizeof(_impl_.enable_tools_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.StreamOptions.model"));
        } else
          goto handle_unusual;
        continue;
      // int32 max_tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float temperature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool include_context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.include_context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_tools = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.enable_tools_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.StreamOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.StreamOptions.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // int32 max_tokens = 2;
  if (this->_internal_max_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_tokens(), target);
  }

  // float temperature = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_temperature(), target);
  }

  // bool include_context = 4;
  if (this->_internal_include_context() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_include_context(), target);
  }

  // bool enable_tools = 5;
  if (this->_internal_enable_tools() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_tools(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.StreamOptions)
  return target;
}

size_t StreamOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.StreamOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model = 1;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // int32 max_tokens = 2;
  if (this->_internal_max_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_tokens());
  }

  // float temperature = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 1 + 4;
  }

  // bool include_context = 4;
  if (this->_internal_include_context() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_tools = 5;
  if (this->_internal_enable_tools() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOptions::GetClassData() const { return &_class_data_; }


void StreamOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOptions*>(&to_msg);
  auto& from = static_cast<const StreamOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.StreamOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (from._internal_max_tokens() != 0) {
    _this->_internal_set_max_tokens(from._internal_max_tokens());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = from._internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  if (from._internal_include_context() != 0) {
    _this->_internal_set_include_context(from._internal_include_context());
  }
  if (from._internal_enable_tools() != 0) {
    _this->_internal_set_enable_tools(from._internal_enable_tools());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOptions::CopyFrom(const StreamOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.StreamOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOptions::IsInitialized() const {
  return true;
}

void StreamOptions::InternalSwap(StreamOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamOptions, _impl_.enable_tools_)
      + sizeof(StreamOptions::_impl_.enable_tools_)
      - PROTOBUF_FIELD_OFFSET(StreamOptions, _impl_.max_tokens_)>(
          reinterpret_cast<char*>(&_impl_.max_tokens_),
          reinterpret_cast<char*>(&other->_impl_.max_tokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[13]);
}

// ===================================================================

class ChatChunkPayload::_Internal {
 public:
};

ChatChunkPayload::ChatChunkPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.ChatChunkPayload)
}
ChatChunkPayload::ChatChunkPayload(const ChatChunkPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatChunkPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_calls_){from._impl_.tool_calls_}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.conversation_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.role_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    _this->_impl_.message_id_.Set(from._internal_message_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.role_ = from._impl_.role_;
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.ChatChunkPayload)
}

inline void ChatChunkPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_calls_){arena}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.conversation_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.role_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatChunkPayload::~ChatChunkPayload() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.ChatChunkPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatChunkPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tool_calls_.~RepeatedPtrField();
  _impl_.message_id_.Destroy();
  _impl_.conversation_id_.Destroy();
  _impl_.content_.Destroy();
}

void ChatChunkPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatChunkPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.ChatChunkPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tool_calls_.Clear();
  _impl_.message_id_.ClearToEmpty();
  _impl_.conversation_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.role_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatChunkPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ChatChunkPayload.message_id"));
        } else
          goto handle_unusual;
        continue;
      // string conversation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ChatChunkPayload.conversation_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.MessageRole role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::unhinged::chat::v1::MessageRole>(val));
        } else
          goto handle_unusual;
        continue;
      // string content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.ChatChunkPayload.content"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.chat.v1.ToolCall tool_calls = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tool_calls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatChunkPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.ChatChunkPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ChatChunkPayload.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // string conversation_id = 2;
  if (!this->_internal_conversation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ChatChunkPayload.conversation_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_conversation_id(), target);
  }

  // .unhinged.chat.v1.MessageRole role = 3;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_role(), target);
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.ChatChunkPayload.content");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_content(), target);
  }

  // repeated .unhinged.chat.v1.ToolCall tool_calls = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tool_calls_size()); i < n; i++) {
    const auto& repfield = this->_internal_tool_calls(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.ChatChunkPayload)
  return target;
}

size_t ChatChunkPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.ChatChunkPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.chat.v1.ToolCall tool_calls = 5;
  total_size += 1UL * this->_internal_tool_calls_size();
  for (const auto& msg : this->_impl_.tool_calls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string conversation_id = 2;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .unhinged.chat.v1.MessageRole role = 3;
  if (this->_internal_role() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatChunkPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatChunkPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatChunkPayload::GetClassData() const { return &_class_data_; }


void ChatChunkPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatChunkPayload*>(&to_msg);
  auto& from = static_cast<const ChatChunkPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.ChatChunkPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tool_calls_.MergeFrom(from._impl_.tool_calls_);
  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatChunkPayload::CopyFrom(const ChatChunkPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.ChatChunkPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatChunkPayload::IsInitialized() const {
  return true;
}

void ChatChunkPayload::InternalSwap(ChatChunkPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tool_calls_.InternalSwap(&other->_impl_.tool_calls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_id_, lhs_arena,
      &other->_impl_.message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_id_, lhs_arena,
      &other->_impl_.conversation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.role_, other->_impl_.role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatChunkPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[14]);
}

// ===================================================================

class SubscribeRequest::_Internal {
 public:
};

SubscribeRequest::SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_types_){from._impl_.event_types_}
    , /*decltype(_impl_._event_types_cached_byte_size_)*/{0}
    , decltype(_impl_.conversation_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.SubscribeRequest)
}

inline void SubscribeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_types_){arena}
    , /*decltype(_impl_._event_types_cached_byte_size_)*/{0}
    , decltype(_impl_.conversation_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.SubscribeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_types_.~RepeatedField();
  _impl_.conversation_id_.Destroy();
}

void SubscribeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.SubscribeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_types_.Clear();
  _impl_.conversation_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.SubscribeRequest.conversation_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.chat.v1.UpdateType event_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_event_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_event_types(static_cast<::unhinged::chat::v1::UpdateType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.SubscribeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.SubscribeRequest.conversation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // repeated .unhinged.chat.v1.UpdateType event_types = 2;
  {
    int byte_size = _impl_._event_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, _impl_.event_types_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.SubscribeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.chat.v1.UpdateType event_types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_event_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_event_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._event_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeRequest::GetClassData() const { return &_class_data_; }


void SubscribeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_types_.MergeFrom(from._impl_.event_types_);
  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.event_types_.InternalSwap(&other->_impl_.event_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_id_, lhs_arena,
      &other->_impl_.conversation_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[15]);
}

// ===================================================================

class GetMessagesRequest::_Internal {
 public:
  static const ::unhinged::common::v1::PaginationRequest& pagination(const GetMessagesRequest* msg);
};

const ::unhinged::common::v1::PaginationRequest&
GetMessagesRequest::_Internal::pagination(const GetMessagesRequest* msg) {
  return *msg->_impl_.pagination_;
}
void GetMessagesRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
void GetMessagesRequest::clear_filters() {
  _impl_.filters_.Clear();
}
GetMessagesRequest::GetMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.GetMessagesRequest)
}
GetMessagesRequest::GetMessagesRequest(const GetMessagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMessagesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){from._impl_.filters_}
    , decltype(_impl_.conversation_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.role_filter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::unhinged::common::v1::PaginationRequest(*from._impl_.pagination_);
  }
  _this->_impl_.role_filter_ = from._impl_.role_filter_;
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.GetMessagesRequest)
}

inline void GetMessagesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){arena}
    , decltype(_impl_.conversation_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.role_filter_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMessagesRequest::~GetMessagesRequest() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.GetMessagesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMessagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filters_.~RepeatedPtrField();
  _impl_.conversation_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetMessagesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.GetMessagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  _impl_.conversation_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.role_filter_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMessagesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.GetMessagesRequest.conversation_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.PaginationRequest pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.MessageRole role_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role_filter(static_cast<::unhinged::chat::v1::MessageRole>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.common.v1.Filter filters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMessagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.GetMessagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.GetMessagesRequest.conversation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // .unhinged.common.v1.PaginationRequest pagination = 2;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // .unhinged.chat.v1.MessageRole role_filter = 3;
  if (this->_internal_role_filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_role_filter(), target);
  }

  // repeated .unhinged.common.v1.Filter filters = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.GetMessagesRequest)
  return target;
}

size_t GetMessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.GetMessagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.common.v1.Filter filters = 4;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->_impl_.filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  // .unhinged.common.v1.PaginationRequest pagination = 2;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // .unhinged.chat.v1.MessageRole role_filter = 3;
  if (this->_internal_role_filter() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role_filter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMessagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMessagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMessagesRequest::GetClassData() const { return &_class_data_; }


void GetMessagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMessagesRequest*>(&to_msg);
  auto& from = static_cast<const GetMessagesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.GetMessagesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filters_.MergeFrom(from._impl_.filters_);
  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::unhinged::common::v1::PaginationRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_role_filter() != 0) {
    _this->_internal_set_role_filter(from._internal_role_filter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMessagesRequest::CopyFrom(const GetMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.GetMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessagesRequest::IsInitialized() const {
  return true;
}

void GetMessagesRequest::InternalSwap(GetMessagesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_id_, lhs_arena,
      &other->_impl_.conversation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMessagesRequest, _impl_.role_filter_)
      + sizeof(GetMessagesRequest::_impl_.role_filter_)
      - PROTOBUF_FIELD_OFFSET(GetMessagesRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMessagesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[16]);
}

// ===================================================================

class GetMessagesResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const GetMessagesResponse* msg);
  static const ::unhinged::common::v1::PaginationResponse& pagination(const GetMessagesResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
GetMessagesResponse::_Internal::response(const GetMessagesResponse* msg) {
  return *msg->_impl_.response_;
}
const ::unhinged::common::v1::PaginationResponse&
GetMessagesResponse::_Internal::pagination(const GetMessagesResponse* msg) {
  return *msg->_impl_.pagination_;
}
void GetMessagesResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
void GetMessagesResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetMessagesResponse::GetMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.GetMessagesResponse)
}
GetMessagesResponse::GetMessagesResponse(const GetMessagesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMessagesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::unhinged::common::v1::PaginationResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.GetMessagesResponse)
}

inline void GetMessagesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetMessagesResponse::~GetMessagesResponse() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.GetMessagesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMessagesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetMessagesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMessagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.GetMessagesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMessagesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.chat.v1.ChatMessage messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.common.v1.PaginationResponse pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMessagesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.GetMessagesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // repeated .unhinged.chat.v1.ChatMessage messages = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .unhinged.common.v1.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.GetMessagesResponse)
  return target;
}

size_t GetMessagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.GetMessagesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.chat.v1.ChatMessage messages = 2;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .unhinged.common.v1.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMessagesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMessagesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMessagesResponse::GetClassData() const { return &_class_data_; }


void GetMessagesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMessagesResponse*>(&to_msg);
  auto& from = static_cast<const GetMessagesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.GetMessagesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::unhinged::common::v1::PaginationResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMessagesResponse::CopyFrom(const GetMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.GetMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessagesResponse::IsInitialized() const {
  return true;
}

void GetMessagesResponse::InternalSwap(GetMessagesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMessagesResponse, _impl_.pagination_)
      + sizeof(GetMessagesResponse::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(GetMessagesResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMessagesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[17]);
}

// ===================================================================

class UpdateConversationRequest::_Internal {
 public:
  static const ::unhinged::chat::v1::ConversationSettings& settings(const UpdateConversationRequest* msg);
};

const ::unhinged::chat::v1::ConversationSettings&
UpdateConversationRequest::_Internal::settings(const UpdateConversationRequest* msg) {
  return *msg->_impl_.settings_;
}
UpdateConversationRequest::UpdateConversationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.UpdateConversationRequest)
}
UpdateConversationRequest::UpdateConversationRequest(const UpdateConversationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateConversationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.settings_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_settings()) {
    _this->_impl_.settings_ = new ::unhinged::chat::v1::ConversationSettings(*from._impl_.settings_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.UpdateConversationRequest)
}

inline void UpdateConversationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.settings_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateConversationRequest::~UpdateConversationRequest() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.UpdateConversationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateConversationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversation_id_.Destroy();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.settings_;
}

void UpdateConversationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateConversationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.UpdateConversationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conversation_id_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.settings_ != nullptr) {
    delete _impl_.settings_;
  }
  _impl_.settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateConversationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.UpdateConversationRequest.conversation_id"));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.UpdateConversationRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.UpdateConversationRequest.description"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.ConversationSettings settings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateConversationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.UpdateConversationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.UpdateConversationRequest.conversation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.UpdateConversationRequest.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.UpdateConversationRequest.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .unhinged.chat.v1.ConversationSettings settings = 4;
  if (this->_internal_has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::settings(this),
        _Internal::settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.UpdateConversationRequest)
  return target;
}

size_t UpdateConversationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.UpdateConversationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .unhinged.chat.v1.ConversationSettings settings = 4;
  if (this->_internal_has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateConversationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateConversationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateConversationRequest::GetClassData() const { return &_class_data_; }


void UpdateConversationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateConversationRequest*>(&to_msg);
  auto& from = static_cast<const UpdateConversationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.UpdateConversationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_settings()) {
    _this->_internal_mutable_settings()->::unhinged::chat::v1::ConversationSettings::MergeFrom(
        from._internal_settings());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateConversationRequest::CopyFrom(const UpdateConversationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.UpdateConversationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConversationRequest::IsInitialized() const {
  return true;
}

void UpdateConversationRequest::InternalSwap(UpdateConversationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_id_, lhs_arena,
      &other->_impl_.conversation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.settings_, other->_impl_.settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateConversationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[18]);
}

// ===================================================================

class UpdateConversationResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const UpdateConversationResponse* msg);
  static const ::unhinged::chat::v1::Conversation& conversation(const UpdateConversationResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
UpdateConversationResponse::_Internal::response(const UpdateConversationResponse* msg) {
  return *msg->_impl_.response_;
}
const ::unhinged::chat::v1::Conversation&
UpdateConversationResponse::_Internal::conversation(const UpdateConversationResponse* msg) {
  return *msg->_impl_.conversation_;
}
void UpdateConversationResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
UpdateConversationResponse::UpdateConversationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.UpdateConversationResponse)
}
UpdateConversationResponse::UpdateConversationResponse(const UpdateConversationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateConversationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.conversation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  if (from._internal_has_conversation()) {
    _this->_impl_.conversation_ = new ::unhinged::chat::v1::Conversation(*from._impl_.conversation_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.UpdateConversationResponse)
}

inline void UpdateConversationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.conversation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateConversationResponse::~UpdateConversationResponse() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.UpdateConversationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateConversationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.conversation_;
}

void UpdateConversationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateConversationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.UpdateConversationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.conversation_ != nullptr) {
    delete _impl_.conversation_;
  }
  _impl_.conversation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateConversationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.Conversation conversation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_conversation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateConversationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.UpdateConversationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .unhinged.chat.v1.Conversation conversation = 2;
  if (this->_internal_has_conversation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::conversation(this),
        _Internal::conversation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.UpdateConversationResponse)
  return target;
}

size_t UpdateConversationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.UpdateConversationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .unhinged.chat.v1.Conversation conversation = 2;
  if (this->_internal_has_conversation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conversation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateConversationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateConversationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateConversationResponse::GetClassData() const { return &_class_data_; }


void UpdateConversationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateConversationResponse*>(&to_msg);
  auto& from = static_cast<const UpdateConversationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.UpdateConversationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_conversation()) {
    _this->_internal_mutable_conversation()->::unhinged::chat::v1::Conversation::MergeFrom(
        from._internal_conversation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateConversationResponse::CopyFrom(const UpdateConversationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.UpdateConversationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConversationResponse::IsInitialized() const {
  return true;
}

void UpdateConversationResponse::InternalSwap(UpdateConversationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateConversationResponse, _impl_.conversation_)
      + sizeof(UpdateConversationResponse::_impl_.conversation_)
      - PROTOBUF_FIELD_OFFSET(UpdateConversationResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateConversationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[19]);
}

// ===================================================================

class UpdateMessageRequest::_Internal {
 public:
};

UpdateMessageRequest::UpdateMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.UpdateMessageRequest)
}
UpdateMessageRequest::UpdateMessageRequest(const UpdateMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateMessageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_id_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    _this->_impl_.message_id_.Set(from._internal_message_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.UpdateMessageRequest)
}

inline void UpdateMessageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_id_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateMessageRequest::~UpdateMessageRequest() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.UpdateMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_id_.Destroy();
  _impl_.content_.Destroy();
}

void UpdateMessageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.UpdateMessageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.UpdateMessageRequest.message_id"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.UpdateMessageRequest.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateMessageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.UpdateMessageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.UpdateMessageRequest.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.UpdateMessageRequest.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.UpdateMessageRequest)
  return target;
}

size_t UpdateMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.UpdateMessageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateMessageRequest::GetClassData() const { return &_class_data_; }


void UpdateMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateMessageRequest*>(&to_msg);
  auto& from = static_cast<const UpdateMessageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.UpdateMessageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateMessageRequest::CopyFrom(const UpdateMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.UpdateMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMessageRequest::IsInitialized() const {
  return true;
}

void UpdateMessageRequest::InternalSwap(UpdateMessageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_id_, lhs_arena,
      &other->_impl_.message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[20]);
}

// ===================================================================

class UpdateMessageResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const UpdateMessageResponse* msg);
  static const ::unhinged::chat::v1::ChatMessage& message(const UpdateMessageResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
UpdateMessageResponse::_Internal::response(const UpdateMessageResponse* msg) {
  return *msg->_impl_.response_;
}
const ::unhinged::chat::v1::ChatMessage&
UpdateMessageResponse::_Internal::message(const UpdateMessageResponse* msg) {
  return *msg->_impl_.message_;
}
void UpdateMessageResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
UpdateMessageResponse::UpdateMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.UpdateMessageResponse)
}
UpdateMessageResponse::UpdateMessageResponse(const UpdateMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateMessageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::unhinged::chat::v1::ChatMessage(*from._impl_.message_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.UpdateMessageResponse)
}

inline void UpdateMessageResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateMessageResponse::~UpdateMessageResponse() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.UpdateMessageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.message_;
}

void UpdateMessageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.UpdateMessageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMessageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.chat.v1.ChatMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateMessageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.UpdateMessageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .unhinged.chat.v1.ChatMessage message = 2;
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.UpdateMessageResponse)
  return target;
}

size_t UpdateMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.UpdateMessageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .unhinged.chat.v1.ChatMessage message = 2;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateMessageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateMessageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateMessageResponse::GetClassData() const { return &_class_data_; }


void UpdateMessageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateMessageResponse*>(&to_msg);
  auto& from = static_cast<const UpdateMessageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.UpdateMessageResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::unhinged::chat::v1::ChatMessage::MergeFrom(
        from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateMessageResponse::CopyFrom(const UpdateMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.UpdateMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMessageResponse::IsInitialized() const {
  return true;
}

void UpdateMessageResponse::InternalSwap(UpdateMessageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateMessageResponse, _impl_.message_)
      + sizeof(UpdateMessageResponse::_impl_.message_)
      - PROTOBUF_FIELD_OFFSET(UpdateMessageResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMessageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[21]);
}

// ===================================================================

class DeleteConversationRequest::_Internal {
 public:
};

DeleteConversationRequest::DeleteConversationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.DeleteConversationRequest)
}
DeleteConversationRequest::DeleteConversationRequest(const DeleteConversationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteConversationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_){}
    , decltype(_impl_.hard_delete_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.hard_delete_ = from._impl_.hard_delete_;
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.DeleteConversationRequest)
}

inline void DeleteConversationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_){}
    , decltype(_impl_.hard_delete_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteConversationRequest::~DeleteConversationRequest() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.DeleteConversationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteConversationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversation_id_.Destroy();
}

void DeleteConversationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteConversationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.DeleteConversationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conversation_id_.ClearToEmpty();
  _impl_.hard_delete_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteConversationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.DeleteConversationRequest.conversation_id"));
        } else
          goto handle_unusual;
        continue;
      // bool hard_delete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hard_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteConversationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.DeleteConversationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.DeleteConversationRequest.conversation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // bool hard_delete = 2;
  if (this->_internal_hard_delete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_hard_delete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.DeleteConversationRequest)
  return target;
}

size_t DeleteConversationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.DeleteConversationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  // bool hard_delete = 2;
  if (this->_internal_hard_delete() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteConversationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteConversationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteConversationRequest::GetClassData() const { return &_class_data_; }


void DeleteConversationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteConversationRequest*>(&to_msg);
  auto& from = static_cast<const DeleteConversationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.DeleteConversationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  if (from._internal_hard_delete() != 0) {
    _this->_internal_set_hard_delete(from._internal_hard_delete());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteConversationRequest::CopyFrom(const DeleteConversationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.DeleteConversationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteConversationRequest::IsInitialized() const {
  return true;
}

void DeleteConversationRequest::InternalSwap(DeleteConversationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_id_, lhs_arena,
      &other->_impl_.conversation_id_, rhs_arena
  );
  swap(_impl_.hard_delete_, other->_impl_.hard_delete_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteConversationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[22]);
}

// ===================================================================

class DeleteConversationResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const DeleteConversationResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
DeleteConversationResponse::_Internal::response(const DeleteConversationResponse* msg) {
  return *msg->_impl_.response_;
}
void DeleteConversationResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
DeleteConversationResponse::DeleteConversationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.DeleteConversationResponse)
}
DeleteConversationResponse::DeleteConversationResponse(const DeleteConversationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteConversationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.DeleteConversationResponse)
}

inline void DeleteConversationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteConversationResponse::~DeleteConversationResponse() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.DeleteConversationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteConversationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void DeleteConversationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteConversationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.DeleteConversationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteConversationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteConversationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.DeleteConversationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.DeleteConversationResponse)
  return target;
}

size_t DeleteConversationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.DeleteConversationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteConversationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteConversationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteConversationResponse::GetClassData() const { return &_class_data_; }


void DeleteConversationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteConversationResponse*>(&to_msg);
  auto& from = static_cast<const DeleteConversationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.DeleteConversationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteConversationResponse::CopyFrom(const DeleteConversationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.DeleteConversationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteConversationResponse::IsInitialized() const {
  return true;
}

void DeleteConversationResponse::InternalSwap(DeleteConversationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteConversationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[23]);
}

// ===================================================================

class DeleteMessageRequest::_Internal {
 public:
};

DeleteMessageRequest::DeleteMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.DeleteMessageRequest)
}
DeleteMessageRequest::DeleteMessageRequest(const DeleteMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteMessageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_id_){}
    , decltype(_impl_.hard_delete_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    _this->_impl_.message_id_.Set(from._internal_message_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.hard_delete_ = from._impl_.hard_delete_;
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.DeleteMessageRequest)
}

inline void DeleteMessageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_id_){}
    , decltype(_impl_.hard_delete_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteMessageRequest::~DeleteMessageRequest() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.DeleteMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_id_.Destroy();
}

void DeleteMessageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.DeleteMessageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_id_.ClearToEmpty();
  _impl_.hard_delete_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.chat.v1.DeleteMessageRequest.message_id"));
        } else
          goto handle_unusual;
        continue;
      // bool hard_delete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hard_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteMessageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.DeleteMessageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.chat.v1.DeleteMessageRequest.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // bool hard_delete = 2;
  if (this->_internal_hard_delete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_hard_delete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.DeleteMessageRequest)
  return target;
}

size_t DeleteMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.DeleteMessageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // bool hard_delete = 2;
  if (this->_internal_hard_delete() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteMessageRequest::GetClassData() const { return &_class_data_; }


void DeleteMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteMessageRequest*>(&to_msg);
  auto& from = static_cast<const DeleteMessageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.DeleteMessageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (from._internal_hard_delete() != 0) {
    _this->_internal_set_hard_delete(from._internal_hard_delete());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteMessageRequest::CopyFrom(const DeleteMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.DeleteMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMessageRequest::IsInitialized() const {
  return true;
}

void DeleteMessageRequest::InternalSwap(DeleteMessageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_id_, lhs_arena,
      &other->_impl_.message_id_, rhs_arena
  );
  swap(_impl_.hard_delete_, other->_impl_.hard_delete_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[24]);
}

// ===================================================================

class DeleteMessageResponse::_Internal {
 public:
  static const ::unhinged::common::v1::StandardResponse& response(const DeleteMessageResponse* msg);
};

const ::unhinged::common::v1::StandardResponse&
DeleteMessageResponse::_Internal::response(const DeleteMessageResponse* msg) {
  return *msg->_impl_.response_;
}
void DeleteMessageResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
DeleteMessageResponse::DeleteMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.chat.v1.DeleteMessageResponse)
}
DeleteMessageResponse::DeleteMessageResponse(const DeleteMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteMessageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::unhinged::common::v1::StandardResponse(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.chat.v1.DeleteMessageResponse)
}

inline void DeleteMessageResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteMessageResponse::~DeleteMessageResponse() {
  // @@protoc_insertion_point(destructor:unhinged.chat.v1.DeleteMessageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void DeleteMessageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.chat.v1.DeleteMessageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteMessageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.common.v1.StandardResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteMessageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.chat.v1.DeleteMessageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.chat.v1.DeleteMessageResponse)
  return target;
}

size_t DeleteMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.chat.v1.DeleteMessageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unhinged.common.v1.StandardResponse response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteMessageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteMessageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteMessageResponse::GetClassData() const { return &_class_data_; }


void DeleteMessageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteMessageResponse*>(&to_msg);
  auto& from = static_cast<const DeleteMessageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.chat.v1.DeleteMessageResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::unhinged::common::v1::StandardResponse::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteMessageResponse::CopyFrom(const DeleteMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.chat.v1.DeleteMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMessageResponse::IsInitialized() const {
  return true;
}

void DeleteMessageResponse::InternalSwap(DeleteMessageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMessageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace chat
}  // namespace unhinged
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::Conversation*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::Conversation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::Conversation >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::ConversationSettings*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::ConversationSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::ConversationSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::ChatMessage*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::ToolCall*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::ToolCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::ToolCall >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::CreateConversationRequest*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::CreateConversationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::CreateConversationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::CreateConversationResponse*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::CreateConversationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::CreateConversationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::GetConversationRequest*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::GetConversationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::GetConversationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::GetConversationResponse*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::GetConversationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::GetConversationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::ListConversationsRequest*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::ListConversationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::ListConversationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::ListConversationsResponse*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::ListConversationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::ListConversationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::SendMessageRequest*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::SendMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::SendMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::SendMessageResponse*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::SendMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::SendMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::StreamChatRequest*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::StreamChatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::StreamChatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::StreamOptions*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::StreamOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::StreamOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::ChatChunkPayload*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::ChatChunkPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::ChatChunkPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::SubscribeRequest*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::SubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::GetMessagesRequest*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::GetMessagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::GetMessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::GetMessagesResponse*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::GetMessagesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::GetMessagesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::UpdateConversationRequest*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::UpdateConversationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::UpdateConversationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::UpdateConversationResponse*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::UpdateConversationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::UpdateConversationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::UpdateMessageRequest*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::UpdateMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::UpdateMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::UpdateMessageResponse*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::UpdateMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::UpdateMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::DeleteConversationRequest*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::DeleteConversationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::DeleteConversationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::DeleteConversationResponse*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::DeleteConversationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::DeleteConversationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::DeleteMessageRequest*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::DeleteMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::DeleteMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::chat::v1::DeleteMessageResponse*
Arena::CreateMaybeMessage< ::unhinged::chat::v1::DeleteMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::chat::v1::DeleteMessageResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
