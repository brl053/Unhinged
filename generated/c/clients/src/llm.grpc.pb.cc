// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: llm.proto

#include "llm.pb.h"
#include "llm.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace unhinged {
namespace llm {
namespace v1 {

static const char* LLMService_method_names[] = {
  "/unhinged.llm.v1.LLMService/GenerateCompletion",
  "/unhinged.llm.v1.LLMService/StreamCompletion",
  "/unhinged.llm.v1.LLMService/ListModels",
  "/unhinged.llm.v1.LLMService/GetModel",
  "/unhinged.llm.v1.LLMService/EstimateTokens",
  "/unhinged.llm.v1.LLMService/CountTokens",
  "/unhinged.llm.v1.LLMService/HealthCheck",
};

std::unique_ptr< LLMService::Stub> LLMService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LLMService::Stub> stub(new LLMService::Stub(channel, options));
  return stub;
}

LLMService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GenerateCompletion_(LLMService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamCompletion_(LLMService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListModels_(LLMService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModel_(LLMService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EstimateTokens_(LLMService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CountTokens_(LLMService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HealthCheck_(LLMService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LLMService::Stub::GenerateCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::unhinged::llm::v1::CompletionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::llm::v1::CompletionRequest, ::unhinged::llm::v1::CompletionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateCompletion_, context, request, response);
}

void LLMService::Stub::async::GenerateCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::unhinged::llm::v1::CompletionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::llm::v1::CompletionRequest, ::unhinged::llm::v1::CompletionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateCompletion_, context, request, response, std::move(f));
}

void LLMService::Stub::async::GenerateCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::unhinged::llm::v1::CompletionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateCompletion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::CompletionResponse>* LLMService::Stub::PrepareAsyncGenerateCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::llm::v1::CompletionResponse, ::unhinged::llm::v1::CompletionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateCompletion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::CompletionResponse>* LLMService::Stub::AsyncGenerateCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateCompletionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::unhinged::common::v1::StreamChunk>* LLMService::Stub::StreamCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), rpcmethod_StreamCompletion_, context, request);
}

void LLMService::Stub::async::StreamCompletion(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::grpc::ClientReadReactor< ::unhinged::common::v1::StreamChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamCompletion_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* LLMService::Stub::AsyncStreamCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), cq, rpcmethod_StreamCompletion_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::unhinged::common::v1::StreamChunk>* LLMService::Stub::PrepareAsyncStreamCompletionRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::CompletionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::unhinged::common::v1::StreamChunk>::Create(channel_.get(), cq, rpcmethod_StreamCompletion_, context, request, false, nullptr);
}

::grpc::Status LLMService::Stub::ListModels(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest& request, ::unhinged::llm::v1::ListModelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::llm::v1::ListModelsRequest, ::unhinged::llm::v1::ListModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListModels_, context, request, response);
}

void LLMService::Stub::async::ListModels(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest* request, ::unhinged::llm::v1::ListModelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::llm::v1::ListModelsRequest, ::unhinged::llm::v1::ListModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListModels_, context, request, response, std::move(f));
}

void LLMService::Stub::async::ListModels(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest* request, ::unhinged::llm::v1::ListModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListModels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::ListModelsResponse>* LLMService::Stub::PrepareAsyncListModelsRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::llm::v1::ListModelsResponse, ::unhinged::llm::v1::ListModelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListModels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::ListModelsResponse>* LLMService::Stub::AsyncListModelsRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListModelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LLMService::Stub::GetModel(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest& request, ::unhinged::llm::v1::GetModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::llm::v1::GetModelRequest, ::unhinged::llm::v1::GetModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModel_, context, request, response);
}

void LLMService::Stub::async::GetModel(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest* request, ::unhinged::llm::v1::GetModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::llm::v1::GetModelRequest, ::unhinged::llm::v1::GetModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModel_, context, request, response, std::move(f));
}

void LLMService::Stub::async::GetModel(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest* request, ::unhinged::llm::v1::GetModelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::GetModelResponse>* LLMService::Stub::PrepareAsyncGetModelRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::llm::v1::GetModelResponse, ::unhinged::llm::v1::GetModelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::GetModelResponse>* LLMService::Stub::AsyncGetModelRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LLMService::Stub::EstimateTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest& request, ::unhinged::llm::v1::TokenEstimationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::llm::v1::TokenEstimationRequest, ::unhinged::llm::v1::TokenEstimationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EstimateTokens_, context, request, response);
}

void LLMService::Stub::async::EstimateTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest* request, ::unhinged::llm::v1::TokenEstimationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::llm::v1::TokenEstimationRequest, ::unhinged::llm::v1::TokenEstimationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstimateTokens_, context, request, response, std::move(f));
}

void LLMService::Stub::async::EstimateTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest* request, ::unhinged::llm::v1::TokenEstimationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstimateTokens_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenEstimationResponse>* LLMService::Stub::PrepareAsyncEstimateTokensRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::llm::v1::TokenEstimationResponse, ::unhinged::llm::v1::TokenEstimationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EstimateTokens_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenEstimationResponse>* LLMService::Stub::AsyncEstimateTokensRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenEstimationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEstimateTokensRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LLMService::Stub::CountTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest& request, ::unhinged::llm::v1::TokenCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::llm::v1::TokenCountRequest, ::unhinged::llm::v1::TokenCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CountTokens_, context, request, response);
}

void LLMService::Stub::async::CountTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest* request, ::unhinged::llm::v1::TokenCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::llm::v1::TokenCountRequest, ::unhinged::llm::v1::TokenCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CountTokens_, context, request, response, std::move(f));
}

void LLMService::Stub::async::CountTokens(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest* request, ::unhinged::llm::v1::TokenCountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CountTokens_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenCountResponse>* LLMService::Stub::PrepareAsyncCountTokensRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::llm::v1::TokenCountResponse, ::unhinged::llm::v1::TokenCountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CountTokens_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::llm::v1::TokenCountResponse>* LLMService::Stub::AsyncCountTokensRaw(::grpc::ClientContext* context, const ::unhinged::llm::v1::TokenCountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCountTokensRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LLMService::Stub::HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::unhinged::common::v1::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void LLMService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void LLMService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>* LLMService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::unhinged::common::v1::HealthCheckResponse, ::unhinged::common::v1::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::unhinged::common::v1::HealthCheckResponse>* LLMService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::unhinged::common::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

LLMService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LLMService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LLMService::Service, ::unhinged::llm::v1::CompletionRequest, ::unhinged::llm::v1::CompletionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LLMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::llm::v1::CompletionRequest* req,
             ::unhinged::llm::v1::CompletionResponse* resp) {
               return service->GenerateCompletion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LLMService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LLMService::Service, ::unhinged::llm::v1::CompletionRequest, ::unhinged::common::v1::StreamChunk>(
          [](LLMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::llm::v1::CompletionRequest* req,
             ::grpc::ServerWriter<::unhinged::common::v1::StreamChunk>* writer) {
               return service->StreamCompletion(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LLMService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LLMService::Service, ::unhinged::llm::v1::ListModelsRequest, ::unhinged::llm::v1::ListModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LLMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::llm::v1::ListModelsRequest* req,
             ::unhinged::llm::v1::ListModelsResponse* resp) {
               return service->ListModels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LLMService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LLMService::Service, ::unhinged::llm::v1::GetModelRequest, ::unhinged::llm::v1::GetModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LLMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::llm::v1::GetModelRequest* req,
             ::unhinged::llm::v1::GetModelResponse* resp) {
               return service->GetModel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LLMService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LLMService::Service, ::unhinged::llm::v1::TokenEstimationRequest, ::unhinged::llm::v1::TokenEstimationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LLMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::llm::v1::TokenEstimationRequest* req,
             ::unhinged::llm::v1::TokenEstimationResponse* resp) {
               return service->EstimateTokens(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LLMService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LLMService::Service, ::unhinged::llm::v1::TokenCountRequest, ::unhinged::llm::v1::TokenCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LLMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::llm::v1::TokenCountRequest* req,
             ::unhinged::llm::v1::TokenCountResponse* resp) {
               return service->CountTokens(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LLMService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LLMService::Service, ::unhinged::common::v1::HealthCheckRequest, ::unhinged::common::v1::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LLMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::unhinged::common::v1::HealthCheckRequest* req,
             ::unhinged::common::v1::HealthCheckResponse* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
}

LLMService::Service::~Service() {
}

::grpc::Status LLMService::Service::GenerateCompletion(::grpc::ServerContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::unhinged::llm::v1::CompletionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LLMService::Service::StreamCompletion(::grpc::ServerContext* context, const ::unhinged::llm::v1::CompletionRequest* request, ::grpc::ServerWriter< ::unhinged::common::v1::StreamChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LLMService::Service::ListModels(::grpc::ServerContext* context, const ::unhinged::llm::v1::ListModelsRequest* request, ::unhinged::llm::v1::ListModelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LLMService::Service::GetModel(::grpc::ServerContext* context, const ::unhinged::llm::v1::GetModelRequest* request, ::unhinged::llm::v1::GetModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LLMService::Service::EstimateTokens(::grpc::ServerContext* context, const ::unhinged::llm::v1::TokenEstimationRequest* request, ::unhinged::llm::v1::TokenEstimationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LLMService::Service::CountTokens(::grpc::ServerContext* context, const ::unhinged::llm::v1::TokenCountRequest* request, ::unhinged::llm::v1::TokenCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LLMService::Service::HealthCheck(::grpc::ServerContext* context, const ::unhinged::common::v1::HealthCheckRequest* request, ::unhinged::common::v1::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace unhinged
}  // namespace llm
}  // namespace v1

