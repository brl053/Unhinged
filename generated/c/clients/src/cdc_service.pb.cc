// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cdc_service.proto

#include "cdc_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace unhinged {
namespace cdc {
PROTOBUF_CONSTEXPR PublishEventRequest::PublishEventRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_subscribers_)*/{}
  , /*decltype(_impl_.routing_strategy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_)*/nullptr
  , /*decltype(_impl_.delivery_deadline_)*/nullptr
  , /*decltype(_impl_.ensure_delivery_)*/false
  , /*decltype(_impl_.retry_attempts_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublishEventRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishEventRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishEventRequestDefaultTypeInternal() {}
  union {
    PublishEventRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishEventRequestDefaultTypeInternal _PublishEventRequest_default_instance_;
PROTOBUF_CONSTEXPR PublishEventResponse::PublishEventResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.published_at_)*/nullptr
  , /*decltype(_impl_.sequence_number_)*/int64_t{0}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublishEventResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishEventResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishEventResponseDefaultTypeInternal() {}
  union {
    PublishEventResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishEventResponseDefaultTypeInternal _PublishEventResponse_default_instance_;
PROTOBUF_CONSTEXPR PublishEventsRequest::PublishEventsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.atomic_)*/false
  , /*decltype(_impl_.ensure_delivery_)*/false
  , /*decltype(_impl_.retry_attempts_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublishEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishEventsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishEventsRequestDefaultTypeInternal() {}
  union {
    PublishEventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishEventsRequestDefaultTypeInternal _PublishEventsRequest_default_instance_;
PROTOBUF_CONSTEXPR PublishEventResult::PublishEventResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequence_number_)*/int64_t{0}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublishEventResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishEventResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishEventResultDefaultTypeInternal() {}
  union {
    PublishEventResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishEventResultDefaultTypeInternal _PublishEventResult_default_instance_;
PROTOBUF_CONSTEXPR PublishEventsResponse::PublishEventsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.successful_count_)*/0
  , /*decltype(_impl_.failed_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublishEventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishEventsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishEventsResponseDefaultTypeInternal() {}
  union {
    PublishEventsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishEventsResponseDefaultTypeInternal _PublishEventsResponse_default_instance_;
PROTOBUF_CONSTEXPR SubscribeRequest::SubscribeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscriber_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subscriber_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeRequestDefaultTypeInternal() {}
  union {
    SubscribeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
PROTOBUF_CONSTEXPR EventFilter::EventFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_types_)*/{}
  , /*decltype(_impl_.source_services_)*/{}
  , /*decltype(_impl_.user_ids_)*/{}
  , /*decltype(_impl_.session_ids_)*/{}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.jq_filter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_.metadata_filter_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventFilterDefaultTypeInternal() {}
  union {
    EventFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventFilterDefaultTypeInternal _EventFilter_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionOptions::SubscriptionOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.delivery_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.replay_from_time_)*/nullptr
  , /*decltype(_impl_.batch_size_)*/0
  , /*decltype(_impl_.batch_timeout_ms_)*/0
  , /*decltype(_impl_.replay_from_sequence_)*/int64_t{0}
  , /*decltype(_impl_.replay_from_beginning_)*/false
  , /*decltype(_impl_.send_to_dlq_on_failure_)*/false
  , /*decltype(_impl_.max_retry_attempts_)*/0
  , /*decltype(_impl_.retry_backoff_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscriptionOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionOptionsDefaultTypeInternal() {}
  union {
    SubscriptionOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionOptionsDefaultTypeInternal _SubscriptionOptions_default_instance_;
PROTOBUF_CONSTEXPR EventStreamResponse::EventStreamResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EventStreamResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventStreamResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventStreamResponseDefaultTypeInternal() {}
  union {
    EventStreamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventStreamResponseDefaultTypeInternal _EventStreamResponse_default_instance_;
PROTOBUF_CONSTEXPR EventBatch::EventBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.checkpoint_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_time_)*/nullptr
  , /*decltype(_impl_.batch_sequence_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventBatchDefaultTypeInternal() {}
  union {
    EventBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventBatchDefaultTypeInternal _EventBatch_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionStatus::SubscriptionStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_processed_sequence_)*/int64_t{0}
  , /*decltype(_impl_.events_processed_)*/0
  , /*decltype(_impl_.events_failed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscriptionStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionStatusDefaultTypeInternal() {}
  union {
    SubscriptionStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionStatusDefaultTypeInternal _SubscriptionStatus_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionError::SubscriptionError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_recoverable_)*/false
  , /*decltype(_impl_.retry_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscriptionErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionErrorDefaultTypeInternal() {}
  union {
    SubscriptionError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionErrorDefaultTypeInternal _SubscriptionError_default_instance_;
PROTOBUF_CONSTEXPR Heartbeat::Heartbeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.current_sequence_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatDefaultTypeInternal() {}
  union {
    Heartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
PROTOBUF_CONSTEXPR AcknowledgeEventsRequest::AcknowledgeEventsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_ids_)*/{}
  , /*decltype(_impl_.subscriber_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.checkpoint_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AcknowledgeEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcknowledgeEventsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcknowledgeEventsRequestDefaultTypeInternal() {}
  union {
    AcknowledgeEventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcknowledgeEventsRequestDefaultTypeInternal _AcknowledgeEventsRequest_default_instance_;
PROTOBUF_CONSTEXPR AcknowledgeEventsResponse::AcknowledgeEventsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.acknowledged_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AcknowledgeEventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcknowledgeEventsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcknowledgeEventsResponseDefaultTypeInternal() {}
  union {
    AcknowledgeEventsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcknowledgeEventsResponseDefaultTypeInternal _AcknowledgeEventsResponse_default_instance_;
PROTOBUF_CONSTEXPR ReplayEventsRequest::ReplayEventsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscriber_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_.batch_size_)*/0
  , /*decltype(_impl_.include_failed_events_)*/false
  , /*decltype(_impl_.replay_range_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ReplayEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplayEventsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplayEventsRequestDefaultTypeInternal() {}
  union {
    ReplayEventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplayEventsRequestDefaultTypeInternal _ReplayEventsRequest_default_instance_;
PROTOBUF_CONSTEXPR TimeRange::TimeRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeRangeDefaultTypeInternal() {}
  union {
    TimeRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
PROTOBUF_CONSTEXPR SequenceRange::SequenceRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_sequence_)*/int64_t{0}
  , /*decltype(_impl_.end_sequence_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SequenceRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SequenceRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SequenceRangeDefaultTypeInternal() {}
  union {
    SequenceRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SequenceRangeDefaultTypeInternal _SequenceRange_default_instance_;
PROTOBUF_CONSTEXPR ListDeadLetterEventsRequest::ListDeadLetterEventsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscriber_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.since_)*/nullptr
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDeadLetterEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDeadLetterEventsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDeadLetterEventsRequestDefaultTypeInternal() {}
  union {
    ListDeadLetterEventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDeadLetterEventsRequestDefaultTypeInternal _ListDeadLetterEventsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListDeadLetterEventsResponse::ListDeadLetterEventsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.next_page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.total_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDeadLetterEventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDeadLetterEventsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDeadLetterEventsResponseDefaultTypeInternal() {}
  union {
    ListDeadLetterEventsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDeadLetterEventsResponseDefaultTypeInternal _ListDeadLetterEventsResponse_default_instance_;
PROTOBUF_CONSTEXPR DeadLetterEvent::DeadLetterEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.failure_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.original_event_)*/nullptr
  , /*decltype(_impl_.failed_at_)*/nullptr
  , /*decltype(_impl_.last_retry_at_)*/nullptr
  , /*decltype(_impl_.retry_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeadLetterEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeadLetterEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeadLetterEventDefaultTypeInternal() {}
  union {
    DeadLetterEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeadLetterEventDefaultTypeInternal _DeadLetterEvent_default_instance_;
PROTOBUF_CONSTEXPR ReprocessDeadLetterEventsRequest::ReprocessDeadLetterEventsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_ids_)*/{}
  , /*decltype(_impl_.subscriber_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reset_retry_count_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReprocessDeadLetterEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReprocessDeadLetterEventsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReprocessDeadLetterEventsRequestDefaultTypeInternal() {}
  union {
    ReprocessDeadLetterEventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReprocessDeadLetterEventsRequestDefaultTypeInternal _ReprocessDeadLetterEventsRequest_default_instance_;
PROTOBUF_CONSTEXPR ReprocessDeadLetterEventsResponse::ReprocessDeadLetterEventsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.reprocessed_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReprocessDeadLetterEventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReprocessDeadLetterEventsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReprocessDeadLetterEventsResponseDefaultTypeInternal() {}
  union {
    ReprocessDeadLetterEventsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReprocessDeadLetterEventsResponseDefaultTypeInternal _ReprocessDeadLetterEventsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetEventStatsRequest::GetEventStatsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_types_)*/{}
  , /*decltype(_impl_.source_services_)*/{}
  , /*decltype(_impl_.aggregation_interval_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetEventStatsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEventStatsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEventStatsRequestDefaultTypeInternal() {}
  union {
    GetEventStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEventStatsRequestDefaultTypeInternal _GetEventStatsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetEventStatsResponse::GetEventStatsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetEventStatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEventStatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEventStatsResponseDefaultTypeInternal() {}
  union {
    GetEventStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEventStatsResponseDefaultTypeInternal _GetEventStatsResponse_default_instance_;
PROTOBUF_CONSTEXPR EventStats::EventStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_service_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.event_count_)*/int64_t{0}
  , /*decltype(_impl_.events_per_second_)*/0
  , /*decltype(_impl_.avg_processing_time_ms_)*/0
  , /*decltype(_impl_.failed_count_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventStatsDefaultTypeInternal() {}
  union {
    EventStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventStatsDefaultTypeInternal _EventStats_default_instance_;
PROTOBUF_CONSTEXPR ListSubscriptionsRequest::ListSubscriptionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscriber_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.include_inactive_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListSubscriptionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListSubscriptionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListSubscriptionsRequestDefaultTypeInternal() {}
  union {
    ListSubscriptionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListSubscriptionsRequestDefaultTypeInternal _ListSubscriptionsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListSubscriptionsResponse::ListSubscriptionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscriptions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListSubscriptionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListSubscriptionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListSubscriptionsResponseDefaultTypeInternal() {}
  union {
    ListSubscriptionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListSubscriptionsResponseDefaultTypeInternal _ListSubscriptionsResponse_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionInfo::SubscriptionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscriber_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subscriber_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.last_active_at_)*/nullptr
  , /*decltype(_impl_.events_processed_)*/int64_t{0}
  , /*decltype(_impl_.events_failed_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscriptionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionInfoDefaultTypeInternal() {}
  union {
    SubscriptionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionInfoDefaultTypeInternal _SubscriptionInfo_default_instance_;
PROTOBUF_CONSTEXPR UpdateSubscriptionRequest::UpdateSubscriptionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscriber_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateSubscriptionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateSubscriptionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateSubscriptionRequestDefaultTypeInternal() {}
  union {
    UpdateSubscriptionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateSubscriptionRequestDefaultTypeInternal _UpdateSubscriptionRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateSubscriptionResponse::UpdateSubscriptionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateSubscriptionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateSubscriptionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateSubscriptionResponseDefaultTypeInternal() {}
  union {
    UpdateSubscriptionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateSubscriptionResponseDefaultTypeInternal _UpdateSubscriptionResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteSubscriptionRequest::DeleteSubscriptionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscriber_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteSubscriptionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteSubscriptionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteSubscriptionRequestDefaultTypeInternal() {}
  union {
    DeleteSubscriptionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteSubscriptionRequestDefaultTypeInternal _DeleteSubscriptionRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteSubscriptionResponse::DeleteSubscriptionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteSubscriptionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteSubscriptionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteSubscriptionResponseDefaultTypeInternal() {}
  union {
    DeleteSubscriptionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteSubscriptionResponseDefaultTypeInternal _DeleteSubscriptionResponse_default_instance_;
PROTOBUF_CONSTEXPR GetServiceStatusRequest::GetServiceStatusRequest(
    ::_pbi::ConstantInitialized) {}
struct GetServiceStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceStatusRequestDefaultTypeInternal() {}
  union {
    GetServiceStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceStatusRequestDefaultTypeInternal _GetServiceStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR GetServiceStatusResponse::GetServiceStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.metrics_)*/nullptr
  , /*decltype(_impl_.healthy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServiceStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceStatusResponseDefaultTypeInternal() {}
  union {
    GetServiceStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceStatusResponseDefaultTypeInternal _GetServiceStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR ServiceMetrics::ServiceMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_events_published_)*/int64_t{0}
  , /*decltype(_impl_.total_events_delivered_)*/int64_t{0}
  , /*decltype(_impl_.active_subscriptions_)*/int64_t{0}
  , /*decltype(_impl_.events_in_dlq_)*/int64_t{0}
  , /*decltype(_impl_.avg_publish_latency_ms_)*/0
  , /*decltype(_impl_.avg_delivery_latency_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceMetricsDefaultTypeInternal() {}
  union {
    ServiceMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceMetricsDefaultTypeInternal _ServiceMetrics_default_instance_;
}  // namespace cdc
}  // namespace unhinged
static ::_pb::Metadata file_level_metadata_cdc_5fservice_2eproto[36];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cdc_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cdc_5fservice_2eproto = nullptr;

const uint32_t TableStruct_cdc_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventRequest, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventRequest, _impl_.ensure_delivery_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventRequest, _impl_.retry_attempts_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventRequest, _impl_.delivery_deadline_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventRequest, _impl_.target_subscribers_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventRequest, _impl_.routing_strategy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventResponse, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventResponse, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventResponse, _impl_.published_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventsRequest, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventsRequest, _impl_.atomic_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventsRequest, _impl_.ensure_delivery_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventsRequest, _impl_.retry_attempts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventResult, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventResult, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventResult, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventResult, _impl_.sequence_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventsResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventsResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventsResponse, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventsResponse, _impl_.successful_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::PublishEventsResponse, _impl_.failed_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscribeRequest, _impl_.subscriber_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscribeRequest, _impl_.subscriber_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscribeRequest, _impl_.filter_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscribeRequest, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventFilter, _impl_.event_types_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventFilter, _impl_.source_services_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventFilter, _impl_.user_ids_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventFilter, _impl_.session_ids_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventFilter, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventFilter, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventFilter, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventFilter, _impl_.jq_filter_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventFilter, _impl_.metadata_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionOptions, _impl_.delivery_mode_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionOptions, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionOptions, _impl_.batch_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionOptions, _impl_.replay_from_beginning_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionOptions, _impl_.replay_from_sequence_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionOptions, _impl_.replay_from_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionOptions, _impl_.max_retry_attempts_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionOptions, _impl_.retry_backoff_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionOptions, _impl_.send_to_dlq_on_failure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventStreamResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventStreamResponse, _impl_.response_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventBatch, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventBatch, _impl_.batch_sequence_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventBatch, _impl_.batch_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventBatch, _impl_.checkpoint_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionStatus, _impl_.last_processed_sequence_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionStatus, _impl_.events_processed_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionStatus, _impl_.events_failed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionError, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionError, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionError, _impl_.is_recoverable_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionError, _impl_.retry_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::Heartbeat, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::Heartbeat, _impl_.current_sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AcknowledgeEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AcknowledgeEventsRequest, _impl_.subscriber_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AcknowledgeEventsRequest, _impl_.event_ids_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AcknowledgeEventsRequest, _impl_.checkpoint_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AcknowledgeEventsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AcknowledgeEventsResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AcknowledgeEventsResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::AcknowledgeEventsResponse, _impl_.acknowledged_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReplayEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReplayEventsRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReplayEventsRequest, _impl_.subscriber_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReplayEventsRequest, _impl_.filter_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReplayEventsRequest, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReplayEventsRequest, _impl_.include_failed_events_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReplayEventsRequest, _impl_.replay_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TimeRange, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::TimeRange, _impl_.end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SequenceRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SequenceRange, _impl_.start_sequence_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SequenceRange, _impl_.end_sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListDeadLetterEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListDeadLetterEventsRequest, _impl_.subscriber_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListDeadLetterEventsRequest, _impl_.since_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListDeadLetterEventsRequest, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListDeadLetterEventsRequest, _impl_.page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListDeadLetterEventsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListDeadLetterEventsResponse, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListDeadLetterEventsResponse, _impl_.next_page_token_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListDeadLetterEventsResponse, _impl_.total_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DeadLetterEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DeadLetterEvent, _impl_.original_event_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DeadLetterEvent, _impl_.failure_reason_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DeadLetterEvent, _impl_.retry_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DeadLetterEvent, _impl_.failed_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DeadLetterEvent, _impl_.last_retry_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReprocessDeadLetterEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReprocessDeadLetterEventsRequest, _impl_.subscriber_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReprocessDeadLetterEventsRequest, _impl_.event_ids_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReprocessDeadLetterEventsRequest, _impl_.reset_retry_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReprocessDeadLetterEventsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReprocessDeadLetterEventsResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReprocessDeadLetterEventsResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ReprocessDeadLetterEventsResponse, _impl_.reprocessed_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetEventStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetEventStatsRequest, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetEventStatsRequest, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetEventStatsRequest, _impl_.event_types_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetEventStatsRequest, _impl_.source_services_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetEventStatsRequest, _impl_.aggregation_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetEventStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetEventStatsResponse, _impl_.stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventStats, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventStats, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventStats, _impl_.source_service_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventStats, _impl_.event_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventStats, _impl_.events_per_second_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventStats, _impl_.avg_processing_time_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::EventStats, _impl_.failed_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListSubscriptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListSubscriptionsRequest, _impl_.subscriber_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListSubscriptionsRequest, _impl_.include_inactive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListSubscriptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ListSubscriptionsResponse, _impl_.subscriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionInfo, _impl_.subscriber_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionInfo, _impl_.subscriber_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionInfo, _impl_.filter_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionInfo, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionInfo, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionInfo, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionInfo, _impl_.last_active_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionInfo, _impl_.events_processed_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::SubscriptionInfo, _impl_.events_failed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UpdateSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UpdateSubscriptionRequest, _impl_.subscriber_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UpdateSubscriptionRequest, _impl_.filter_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UpdateSubscriptionRequest, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UpdateSubscriptionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UpdateSubscriptionResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::UpdateSubscriptionResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DeleteSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DeleteSubscriptionRequest, _impl_.subscriber_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DeleteSubscriptionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DeleteSubscriptionResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::DeleteSubscriptionResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetServiceStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetServiceStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetServiceStatusResponse, _impl_.healthy_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetServiceStatusResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetServiceStatusResponse, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::GetServiceStatusResponse, _impl_.metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceMetrics, _impl_.total_events_published_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceMetrics, _impl_.total_events_delivered_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceMetrics, _impl_.active_subscriptions_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceMetrics, _impl_.events_in_dlq_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceMetrics, _impl_.avg_publish_latency_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::cdc::ServiceMetrics, _impl_.avg_delivery_latency_ms_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::unhinged::cdc::PublishEventRequest)},
  { 12, -1, -1, sizeof(::unhinged::cdc::PublishEventResponse)},
  { 23, -1, -1, sizeof(::unhinged::cdc::PublishEventsRequest)},
  { 33, -1, -1, sizeof(::unhinged::cdc::PublishEventResult)},
  { 43, -1, -1, sizeof(::unhinged::cdc::PublishEventsResponse)},
  { 54, -1, -1, sizeof(::unhinged::cdc::SubscribeRequest)},
  { 64, -1, -1, sizeof(::unhinged::cdc::EventFilter)},
  { 79, -1, -1, sizeof(::unhinged::cdc::SubscriptionOptions)},
  { 94, -1, -1, sizeof(::unhinged::cdc::EventStreamResponse)},
  { 105, -1, -1, sizeof(::unhinged::cdc::EventBatch)},
  { 115, -1, -1, sizeof(::unhinged::cdc::SubscriptionStatus)},
  { 125, -1, -1, sizeof(::unhinged::cdc::SubscriptionError)},
  { 135, -1, -1, sizeof(::unhinged::cdc::Heartbeat)},
  { 143, -1, -1, sizeof(::unhinged::cdc::AcknowledgeEventsRequest)},
  { 152, -1, -1, sizeof(::unhinged::cdc::AcknowledgeEventsResponse)},
  { 161, -1, -1, sizeof(::unhinged::cdc::ReplayEventsRequest)},
  { 175, -1, -1, sizeof(::unhinged::cdc::TimeRange)},
  { 183, -1, -1, sizeof(::unhinged::cdc::SequenceRange)},
  { 191, -1, -1, sizeof(::unhinged::cdc::ListDeadLetterEventsRequest)},
  { 201, -1, -1, sizeof(::unhinged::cdc::ListDeadLetterEventsResponse)},
  { 210, -1, -1, sizeof(::unhinged::cdc::DeadLetterEvent)},
  { 221, -1, -1, sizeof(::unhinged::cdc::ReprocessDeadLetterEventsRequest)},
  { 230, -1, -1, sizeof(::unhinged::cdc::ReprocessDeadLetterEventsResponse)},
  { 239, -1, -1, sizeof(::unhinged::cdc::GetEventStatsRequest)},
  { 250, -1, -1, sizeof(::unhinged::cdc::GetEventStatsResponse)},
  { 257, -1, -1, sizeof(::unhinged::cdc::EventStats)},
  { 270, -1, -1, sizeof(::unhinged::cdc::ListSubscriptionsRequest)},
  { 278, -1, -1, sizeof(::unhinged::cdc::ListSubscriptionsResponse)},
  { 285, -1, -1, sizeof(::unhinged::cdc::SubscriptionInfo)},
  { 300, -1, -1, sizeof(::unhinged::cdc::UpdateSubscriptionRequest)},
  { 309, -1, -1, sizeof(::unhinged::cdc::UpdateSubscriptionResponse)},
  { 317, -1, -1, sizeof(::unhinged::cdc::DeleteSubscriptionRequest)},
  { 324, -1, -1, sizeof(::unhinged::cdc::DeleteSubscriptionResponse)},
  { 332, -1, -1, sizeof(::unhinged::cdc::GetServiceStatusRequest)},
  { 338, -1, -1, sizeof(::unhinged::cdc::GetServiceStatusResponse)},
  { 348, -1, -1, sizeof(::unhinged::cdc::ServiceMetrics)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::unhinged::cdc::_PublishEventRequest_default_instance_._instance,
  &::unhinged::cdc::_PublishEventResponse_default_instance_._instance,
  &::unhinged::cdc::_PublishEventsRequest_default_instance_._instance,
  &::unhinged::cdc::_PublishEventResult_default_instance_._instance,
  &::unhinged::cdc::_PublishEventsResponse_default_instance_._instance,
  &::unhinged::cdc::_SubscribeRequest_default_instance_._instance,
  &::unhinged::cdc::_EventFilter_default_instance_._instance,
  &::unhinged::cdc::_SubscriptionOptions_default_instance_._instance,
  &::unhinged::cdc::_EventStreamResponse_default_instance_._instance,
  &::unhinged::cdc::_EventBatch_default_instance_._instance,
  &::unhinged::cdc::_SubscriptionStatus_default_instance_._instance,
  &::unhinged::cdc::_SubscriptionError_default_instance_._instance,
  &::unhinged::cdc::_Heartbeat_default_instance_._instance,
  &::unhinged::cdc::_AcknowledgeEventsRequest_default_instance_._instance,
  &::unhinged::cdc::_AcknowledgeEventsResponse_default_instance_._instance,
  &::unhinged::cdc::_ReplayEventsRequest_default_instance_._instance,
  &::unhinged::cdc::_TimeRange_default_instance_._instance,
  &::unhinged::cdc::_SequenceRange_default_instance_._instance,
  &::unhinged::cdc::_ListDeadLetterEventsRequest_default_instance_._instance,
  &::unhinged::cdc::_ListDeadLetterEventsResponse_default_instance_._instance,
  &::unhinged::cdc::_DeadLetterEvent_default_instance_._instance,
  &::unhinged::cdc::_ReprocessDeadLetterEventsRequest_default_instance_._instance,
  &::unhinged::cdc::_ReprocessDeadLetterEventsResponse_default_instance_._instance,
  &::unhinged::cdc::_GetEventStatsRequest_default_instance_._instance,
  &::unhinged::cdc::_GetEventStatsResponse_default_instance_._instance,
  &::unhinged::cdc::_EventStats_default_instance_._instance,
  &::unhinged::cdc::_ListSubscriptionsRequest_default_instance_._instance,
  &::unhinged::cdc::_ListSubscriptionsResponse_default_instance_._instance,
  &::unhinged::cdc::_SubscriptionInfo_default_instance_._instance,
  &::unhinged::cdc::_UpdateSubscriptionRequest_default_instance_._instance,
  &::unhinged::cdc::_UpdateSubscriptionResponse_default_instance_._instance,
  &::unhinged::cdc::_DeleteSubscriptionRequest_default_instance_._instance,
  &::unhinged::cdc::_DeleteSubscriptionResponse_default_instance_._instance,
  &::unhinged::cdc::_GetServiceStatusRequest_default_instance_._instance,
  &::unhinged::cdc::_GetServiceStatusResponse_default_instance_._instance,
  &::unhinged::cdc::_ServiceMetrics_default_instance_._instance,
};

const char descriptor_table_protodef_cdc_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021cdc_service.proto\022\014unhinged.cdc\032\037googl"
  "e/protobuf/timestamp.proto\032\034google/proto"
  "buf/struct.proto\032\020cdc_events.proto\"\340\001\n\023P"
  "ublishEventRequest\022+\n\005event\030\001 \001(\0132\034.unhi"
  "nged.cdc.UniversalEvent\022\027\n\017ensure_delive"
  "ry\030\002 \001(\010\022\026\n\016retry_attempts\030\003 \001(\005\0225\n\021deli"
  "very_deadline\030\004 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022\032\n\022target_subscribers\030\005 \003(\t\022\030\n\020r"
  "outing_strategy\030\006 \001(\t\"\225\001\n\024PublishEventRe"
  "sponse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t"
  "\022\020\n\010event_id\030\003 \001(\t\022\027\n\017sequence_number\030\004 "
  "\001(\003\0220\n\014published_at\030\005 \001(\0132\032.google.proto"
  "buf.Timestamp\"\205\001\n\024PublishEventsRequest\022,"
  "\n\006events\030\001 \003(\0132\034.unhinged.cdc.UniversalE"
  "vent\022\016\n\006atomic\030\002 \001(\010\022\027\n\017ensure_delivery\030"
  "\003 \001(\010\022\026\n\016retry_attempts\030\004 \001(\005\"g\n\022Publish"
  "EventResult\022\020\n\010event_id\030\001 \001(\t\022\017\n\007success"
  "\030\002 \001(\010\022\025\n\rerror_message\030\003 \001(\t\022\027\n\017sequenc"
  "e_number\030\004 \001(\003\"\234\001\n\025PublishEventsResponse"
  "\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\0221\n\007re"
  "sults\030\003 \003(\0132 .unhinged.cdc.PublishEventR"
  "esult\022\030\n\020successful_count\030\004 \001(\005\022\024\n\014faile"
  "d_count\030\005 \001(\005\"\241\001\n\020SubscribeRequest\022\025\n\rsu"
  "bscriber_id\030\001 \001(\t\022\027\n\017subscriber_name\030\002 \001"
  "(\t\022)\n\006filter\030\003 \001(\0132\031.unhinged.cdc.EventF"
  "ilter\0222\n\007options\030\004 \001(\0132!.unhinged.cdc.Su"
  "bscriptionOptions\"\223\002\n\013EventFilter\022\023\n\013eve"
  "nt_types\030\001 \003(\t\022\027\n\017source_services\030\002 \003(\t\022"
  "\020\n\010user_ids\030\003 \003(\t\022\023\n\013session_ids\030\004 \003(\t\022\014"
  "\n\004tags\030\005 \003(\t\022.\n\nstart_time\030\006 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022,\n\010end_time\030\007 \001(\0132\032"
  ".google.protobuf.Timestamp\022\021\n\tjq_filter\030"
  "\010 \001(\t\0220\n\017metadata_filter\030\t \001(\0132\027.google."
  "protobuf.Struct\"\243\002\n\023SubscriptionOptions\022"
  "\025\n\rdelivery_mode\030\001 \001(\t\022\022\n\nbatch_size\030\002 \001"
  "(\005\022\030\n\020batch_timeout_ms\030\003 \001(\005\022\035\n\025replay_f"
  "rom_beginning\030\004 \001(\010\022\034\n\024replay_from_seque"
  "nce\030\005 \001(\003\0224\n\020replay_from_time\030\006 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022\032\n\022max_retry_att"
  "empts\030\007 \001(\005\022\030\n\020retry_backoff_ms\030\010 \001(\005\022\036\n"
  "\026send_to_dlq_on_failure\030\t \001(\010\"\353\001\n\023EventS"
  "treamResponse\022/\n\013event_batch\030\001 \001(\0132\030.unh"
  "inged.cdc.EventBatchH\000\0222\n\006status\030\002 \001(\0132 "
  ".unhinged.cdc.SubscriptionStatusH\000\0220\n\005er"
  "ror\030\003 \001(\0132\037.unhinged.cdc.SubscriptionErr"
  "orH\000\022,\n\theartbeat\030\004 \001(\0132\027.unhinged.cdc.H"
  "eartbeatH\000B\017\n\rresponse_type\"\234\001\n\nEventBat"
  "ch\022,\n\006events\030\001 \003(\0132\034.unhinged.cdc.Univer"
  "salEvent\022\026\n\016batch_sequence\030\002 \001(\003\022.\n\nbatc"
  "h_time\030\003 \001(\0132\032.google.protobuf.Timestamp"
  "\022\030\n\020checkpoint_token\030\004 \001(\t\"v\n\022Subscripti"
  "onStatus\022\016\n\006status\030\001 \001(\t\022\037\n\027last_process"
  "ed_sequence\030\002 \001(\003\022\030\n\020events_processed\030\003 "
  "\001(\005\022\025\n\revents_failed\030\004 \001(\005\"k\n\021Subscripti"
  "onError\022\022\n\nerror_code\030\001 \001(\t\022\025\n\rerror_mes"
  "sage\030\002 \001(\t\022\026\n\016is_recoverable\030\003 \001(\010\022\023\n\013re"
  "try_count\030\004 \001(\005\"T\n\tHeartbeat\022-\n\ttimestam"
  "p\030\001 \001(\0132\032.google.protobuf.Timestamp\022\030\n\020c"
  "urrent_sequence\030\002 \001(\003\"^\n\030AcknowledgeEven"
  "tsRequest\022\025\n\rsubscriber_id\030\001 \001(\t\022\021\n\teven"
  "t_ids\030\002 \003(\t\022\030\n\020checkpoint_token\030\003 \001(\t\"Y\n"
  "\031AcknowledgeEventsResponse\022\017\n\007success\030\001 "
  "\001(\010\022\017\n\007message\030\002 \001(\t\022\032\n\022acknowledged_cou"
  "nt\030\003 \001(\005\"\234\002\n\023ReplayEventsRequest\022\025\n\rsubs"
  "criber_id\030\001 \001(\t\022-\n\ntime_range\030\002 \001(\0132\027.un"
  "hinged.cdc.TimeRangeH\000\0225\n\016sequence_range"
  "\030\003 \001(\0132\033.unhinged.cdc.SequenceRangeH\000\022\032\n"
  "\020checkpoint_token\030\004 \001(\tH\000\022)\n\006filter\030\005 \001("
  "\0132\031.unhinged.cdc.EventFilter\022\022\n\nbatch_si"
  "ze\030\006 \001(\005\022\035\n\025include_failed_events\030\007 \001(\010B"
  "\016\n\014replay_range\"i\n\tTimeRange\022.\n\nstart_ti"
  "me\030\001 \001(\0132\032.google.protobuf.Timestamp\022,\n\010"
  "end_time\030\002 \001(\0132\032.google.protobuf.Timesta"
  "mp\"=\n\rSequenceRange\022\026\n\016start_sequence\030\001 "
  "\001(\003\022\024\n\014end_sequence\030\002 \001(\003\"\206\001\n\033ListDeadLe"
  "tterEventsRequest\022\025\n\rsubscriber_id\030\001 \001(\t"
  "\022)\n\005since\030\002 \001(\0132\032.google.protobuf.Timest"
  "amp\022\021\n\tpage_size\030\003 \001(\005\022\022\n\npage_token\030\004 \001"
  "(\t\"{\n\034ListDeadLetterEventsResponse\022-\n\006ev"
  "ents\030\001 \003(\0132\035.unhinged.cdc.DeadLetterEven"
  "t\022\027\n\017next_page_token\030\002 \001(\t\022\023\n\013total_coun"
  "t\030\003 \001(\005\"\326\001\n\017DeadLetterEvent\0224\n\016original_"
  "event\030\001 \001(\0132\034.unhinged.cdc.UniversalEven"
  "t\022\026\n\016failure_reason\030\002 \001(\t\022\023\n\013retry_count"
  "\030\003 \001(\005\022-\n\tfailed_at\030\004 \001(\0132\032.google.proto"
  "buf.Timestamp\0221\n\rlast_retry_at\030\005 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\"g\n ReprocessDea"
  "dLetterEventsRequest\022\025\n\rsubscriber_id\030\001 "
  "\001(\t\022\021\n\tevent_ids\030\002 \003(\t\022\031\n\021reset_retry_co"
  "unt\030\003 \001(\010\"`\n!ReprocessDeadLetterEventsRe"
  "sponse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t"
  "\022\031\n\021reprocessed_count\030\003 \001(\005\"\300\001\n\024GetEvent"
  "StatsRequest\022.\n\nstart_time\030\001 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022,\n\010end_time\030\002 \001(\0132\032"
  ".google.protobuf.Timestamp\022\023\n\013event_type"
  "s\030\003 \003(\t\022\027\n\017source_services\030\004 \003(\t\022\034\n\024aggr"
  "egation_interval\030\005 \001(\t\"@\n\025GetEventStatsR"
  "esponse\022\'\n\005stats\030\001 \003(\0132\030.unhinged.cdc.Ev"
  "entStats\"\315\001\n\nEventStats\022-\n\ttimestamp\030\001 \001"
  "(\0132\032.google.protobuf.Timestamp\022\022\n\nevent_"
  "type\030\002 \001(\t\022\026\n\016source_service\030\003 \001(\t\022\023\n\013ev"
  "ent_count\030\004 \001(\003\022\031\n\021events_per_second\030\005 \001"
  "(\001\022\036\n\026avg_processing_time_ms\030\006 \001(\001\022\024\n\014fa"
  "iled_count\030\007 \001(\003\"K\n\030ListSubscriptionsReq"
  "uest\022\025\n\rsubscriber_id\030\001 \001(\t\022\030\n\020include_i"
  "nactive\030\002 \001(\010\"R\n\031ListSubscriptionsRespon"
  "se\0225\n\rsubscriptions\030\001 \003(\0132\036.unhinged.cdc"
  ".SubscriptionInfo\"\306\002\n\020SubscriptionInfo\022\025"
  "\n\rsubscriber_id\030\001 \001(\t\022\027\n\017subscriber_name"
  "\030\002 \001(\t\022)\n\006filter\030\003 \001(\0132\031.unhinged.cdc.Ev"
  "entFilter\0222\n\007options\030\004 \001(\0132!.unhinged.cd"
  "c.SubscriptionOptions\022\016\n\006status\030\005 \001(\t\022.\n"
  "\ncreated_at\030\006 \001(\0132\032.google.protobuf.Time"
  "stamp\0222\n\016last_active_at\030\007 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022\030\n\020events_processed\030\010 "
  "\001(\003\022\025\n\revents_failed\030\t \001(\003\"\221\001\n\031UpdateSub"
  "scriptionRequest\022\025\n\rsubscriber_id\030\001 \001(\t\022"
  ")\n\006filter\030\002 \001(\0132\031.unhinged.cdc.EventFilt"
  "er\0222\n\007options\030\003 \001(\0132!.unhinged.cdc.Subsc"
  "riptionOptions\">\n\032UpdateSubscriptionResp"
  "onse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"2"
  "\n\031DeleteSubscriptionRequest\022\025\n\rsubscribe"
  "r_id\030\001 \001(\t\">\n\032DeleteSubscriptionResponse"
  "\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"\031\n\027Ge"
  "tServiceStatusRequest\"\231\001\n\030GetServiceStat"
  "usResponse\022\017\n\007healthy\030\001 \001(\010\022\016\n\006status\030\002 "
  "\001(\t\022-\n\ttimestamp\030\003 \001(\0132\032.google.protobuf"
  ".Timestamp\022-\n\007metrics\030\004 \001(\0132\034.unhinged.c"
  "dc.ServiceMetrics\"\306\001\n\016ServiceMetrics\022\036\n\026"
  "total_events_published\030\001 \001(\003\022\036\n\026total_ev"
  "ents_delivered\030\002 \001(\003\022\034\n\024active_subscript"
  "ions\030\003 \001(\003\022\025\n\revents_in_dlq\030\004 \001(\003\022\036\n\026avg"
  "_publish_latency_ms\030\005 \001(\001\022\037\n\027avg_deliver"
  "y_latency_ms\030\006 \001(\0012\257\t\n\nCDCService\022U\n\014Pub"
  "lishEvent\022!.unhinged.cdc.PublishEventReq"
  "uest\032\".unhinged.cdc.PublishEventResponse"
  "\022X\n\rPublishEvents\022\".unhinged.cdc.Publish"
  "EventsRequest\032#.unhinged.cdc.PublishEven"
  "tsResponse\022P\n\tSubscribe\022\036.unhinged.cdc.S"
  "ubscribeRequest\032!.unhinged.cdc.EventStre"
  "amResponse0\001\022d\n\021AcknowledgeEvents\022&.unhi"
  "nged.cdc.AcknowledgeEventsRequest\032\'.unhi"
  "nged.cdc.AcknowledgeEventsResponse\022V\n\014Re"
  "playEvents\022!.unhinged.cdc.ReplayEventsRe"
  "quest\032!.unhinged.cdc.EventStreamResponse"
  "0\001\022m\n\024ListDeadLetterEvents\022).unhinged.cd"
  "c.ListDeadLetterEventsRequest\032*.unhinged"
  ".cdc.ListDeadLetterEventsResponse\022|\n\031Rep"
  "rocessDeadLetterEvents\022..unhinged.cdc.Re"
  "processDeadLetterEventsRequest\032/.unhinge"
  "d.cdc.ReprocessDeadLetterEventsResponse\022"
  "X\n\rGetEventStats\022\".unhinged.cdc.GetEvent"
  "StatsRequest\032#.unhinged.cdc.GetEventStat"
  "sResponse\022d\n\021ListSubscriptions\022&.unhinge"
  "d.cdc.ListSubscriptionsRequest\032\'.unhinge"
  "d.cdc.ListSubscriptionsResponse\022g\n\022Updat"
  "eSubscription\022\'.unhinged.cdc.UpdateSubsc"
  "riptionRequest\032(.unhinged.cdc.UpdateSubs"
  "criptionResponse\022g\n\022DeleteSubscription\022\'"
  ".unhinged.cdc.DeleteSubscriptionRequest\032"
  "(.unhinged.cdc.DeleteSubscriptionRespons"
  "e\022a\n\020GetServiceStatus\022%.unhinged.cdc.Get"
  "ServiceStatusRequest\032&.unhinged.cdc.GetS"
  "erviceStatusResponseb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cdc_5fservice_2eproto_deps[3] = {
  &::descriptor_table_cdc_5fevents_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_cdc_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cdc_5fservice_2eproto = {
    false, false, 6548, descriptor_table_protodef_cdc_5fservice_2eproto,
    "cdc_service.proto",
    &descriptor_table_cdc_5fservice_2eproto_once, descriptor_table_cdc_5fservice_2eproto_deps, 3, 36,
    schemas, file_default_instances, TableStruct_cdc_5fservice_2eproto::offsets,
    file_level_metadata_cdc_5fservice_2eproto, file_level_enum_descriptors_cdc_5fservice_2eproto,
    file_level_service_descriptors_cdc_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cdc_5fservice_2eproto_getter() {
  return &descriptor_table_cdc_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cdc_5fservice_2eproto(&descriptor_table_cdc_5fservice_2eproto);
namespace unhinged {
namespace cdc {

// ===================================================================

class PublishEventRequest::_Internal {
 public:
  static const ::unhinged::cdc::UniversalEvent& event(const PublishEventRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& delivery_deadline(const PublishEventRequest* msg);
};

const ::unhinged::cdc::UniversalEvent&
PublishEventRequest::_Internal::event(const PublishEventRequest* msg) {
  return *msg->_impl_.event_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PublishEventRequest::_Internal::delivery_deadline(const PublishEventRequest* msg) {
  return *msg->_impl_.delivery_deadline_;
}
void PublishEventRequest::clear_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.event_ != nullptr) {
    delete _impl_.event_;
  }
  _impl_.event_ = nullptr;
}
void PublishEventRequest::clear_delivery_deadline() {
  if (GetArenaForAllocation() == nullptr && _impl_.delivery_deadline_ != nullptr) {
    delete _impl_.delivery_deadline_;
  }
  _impl_.delivery_deadline_ = nullptr;
}
PublishEventRequest::PublishEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.PublishEventRequest)
}
PublishEventRequest::PublishEventRequest(const PublishEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishEventRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_subscribers_){from._impl_.target_subscribers_}
    , decltype(_impl_.routing_strategy_){}
    , decltype(_impl_.event_){nullptr}
    , decltype(_impl_.delivery_deadline_){nullptr}
    , decltype(_impl_.ensure_delivery_){}
    , decltype(_impl_.retry_attempts_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.routing_strategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_strategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routing_strategy().empty()) {
    _this->_impl_.routing_strategy_.Set(from._internal_routing_strategy(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_event()) {
    _this->_impl_.event_ = new ::unhinged::cdc::UniversalEvent(*from._impl_.event_);
  }
  if (from._internal_has_delivery_deadline()) {
    _this->_impl_.delivery_deadline_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.delivery_deadline_);
  }
  ::memcpy(&_impl_.ensure_delivery_, &from._impl_.ensure_delivery_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retry_attempts_) -
    reinterpret_cast<char*>(&_impl_.ensure_delivery_)) + sizeof(_impl_.retry_attempts_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.PublishEventRequest)
}

inline void PublishEventRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_subscribers_){arena}
    , decltype(_impl_.routing_strategy_){}
    , decltype(_impl_.event_){nullptr}
    , decltype(_impl_.delivery_deadline_){nullptr}
    , decltype(_impl_.ensure_delivery_){false}
    , decltype(_impl_.retry_attempts_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.routing_strategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_strategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishEventRequest::~PublishEventRequest() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.PublishEventRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_subscribers_.~RepeatedPtrField();
  _impl_.routing_strategy_.Destroy();
  if (this != internal_default_instance()) delete _impl_.event_;
  if (this != internal_default_instance()) delete _impl_.delivery_deadline_;
}

void PublishEventRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.PublishEventRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_subscribers_.Clear();
  _impl_.routing_strategy_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.event_ != nullptr) {
    delete _impl_.event_;
  }
  _impl_.event_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delivery_deadline_ != nullptr) {
    delete _impl_.delivery_deadline_;
  }
  _impl_.delivery_deadline_ = nullptr;
  ::memset(&_impl_.ensure_delivery_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.retry_attempts_) -
      reinterpret_cast<char*>(&_impl_.ensure_delivery_)) + sizeof(_impl_.retry_attempts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishEventRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.cdc.UniversalEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ensure_delivery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ensure_delivery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 retry_attempts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.retry_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp delivery_deadline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_delivery_deadline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string target_subscribers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target_subscribers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.PublishEventRequest.target_subscribers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string routing_strategy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_routing_strategy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.PublishEventRequest.routing_strategy"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishEventRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.PublishEventRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.cdc.UniversalEvent event = 1;
  if (this->_internal_has_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  // bool ensure_delivery = 2;
  if (this->_internal_ensure_delivery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ensure_delivery(), target);
  }

  // int32 retry_attempts = 3;
  if (this->_internal_retry_attempts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_retry_attempts(), target);
  }

  // .google.protobuf.Timestamp delivery_deadline = 4;
  if (this->_internal_has_delivery_deadline()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::delivery_deadline(this),
        _Internal::delivery_deadline(this).GetCachedSize(), target, stream);
  }

  // repeated string target_subscribers = 5;
  for (int i = 0, n = this->_internal_target_subscribers_size(); i < n; i++) {
    const auto& s = this->_internal_target_subscribers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.PublishEventRequest.target_subscribers");
    target = stream->WriteString(5, s, target);
  }

  // string routing_strategy = 6;
  if (!this->_internal_routing_strategy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_routing_strategy().data(), static_cast<int>(this->_internal_routing_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.PublishEventRequest.routing_strategy");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_routing_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.PublishEventRequest)
  return target;
}

size_t PublishEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.PublishEventRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string target_subscribers = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.target_subscribers_.size());
  for (int i = 0, n = _impl_.target_subscribers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.target_subscribers_.Get(i));
  }

  // string routing_strategy = 6;
  if (!this->_internal_routing_strategy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_routing_strategy());
  }

  // .unhinged.cdc.UniversalEvent event = 1;
  if (this->_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_);
  }

  // .google.protobuf.Timestamp delivery_deadline = 4;
  if (this->_internal_has_delivery_deadline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delivery_deadline_);
  }

  // bool ensure_delivery = 2;
  if (this->_internal_ensure_delivery() != 0) {
    total_size += 1 + 1;
  }

  // int32 retry_attempts = 3;
  if (this->_internal_retry_attempts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retry_attempts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishEventRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishEventRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishEventRequest::GetClassData() const { return &_class_data_; }


void PublishEventRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishEventRequest*>(&to_msg);
  auto& from = static_cast<const PublishEventRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.PublishEventRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.target_subscribers_.MergeFrom(from._impl_.target_subscribers_);
  if (!from._internal_routing_strategy().empty()) {
    _this->_internal_set_routing_strategy(from._internal_routing_strategy());
  }
  if (from._internal_has_event()) {
    _this->_internal_mutable_event()->::unhinged::cdc::UniversalEvent::MergeFrom(
        from._internal_event());
  }
  if (from._internal_has_delivery_deadline()) {
    _this->_internal_mutable_delivery_deadline()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_delivery_deadline());
  }
  if (from._internal_ensure_delivery() != 0) {
    _this->_internal_set_ensure_delivery(from._internal_ensure_delivery());
  }
  if (from._internal_retry_attempts() != 0) {
    _this->_internal_set_retry_attempts(from._internal_retry_attempts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishEventRequest::CopyFrom(const PublishEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.PublishEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishEventRequest::IsInitialized() const {
  return true;
}

void PublishEventRequest::InternalSwap(PublishEventRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.target_subscribers_.InternalSwap(&other->_impl_.target_subscribers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.routing_strategy_, lhs_arena,
      &other->_impl_.routing_strategy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishEventRequest, _impl_.retry_attempts_)
      + sizeof(PublishEventRequest::_impl_.retry_attempts_)
      - PROTOBUF_FIELD_OFFSET(PublishEventRequest, _impl_.event_)>(
          reinterpret_cast<char*>(&_impl_.event_),
          reinterpret_cast<char*>(&other->_impl_.event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishEventRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[0]);
}

// ===================================================================

class PublishEventResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& published_at(const PublishEventResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PublishEventResponse::_Internal::published_at(const PublishEventResponse* msg) {
  return *msg->_impl_.published_at_;
}
void PublishEventResponse::clear_published_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.published_at_ != nullptr) {
    delete _impl_.published_at_;
  }
  _impl_.published_at_ = nullptr;
}
PublishEventResponse::PublishEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.PublishEventResponse)
}
PublishEventResponse::PublishEventResponse(const PublishEventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishEventResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.published_at_){nullptr}
    , decltype(_impl_.sequence_number_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_published_at()) {
    _this->_impl_.published_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.published_at_);
  }
  ::memcpy(&_impl_.sequence_number_, &from._impl_.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.PublishEventResponse)
}

inline void PublishEventResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.published_at_){nullptr}
    , decltype(_impl_.sequence_number_){int64_t{0}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishEventResponse::~PublishEventResponse() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.PublishEventResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishEventResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.event_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.published_at_;
}

void PublishEventResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.PublishEventResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.event_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.published_at_ != nullptr) {
    delete _impl_.published_at_;
  }
  _impl_.published_at_ = nullptr;
  ::memset(&_impl_.sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishEventResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.PublishEventResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // string event_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.PublishEventResponse.event_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp published_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_published_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishEventResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.PublishEventResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.PublishEventResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string event_id = 3;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.PublishEventResponse.event_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_event_id(), target);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sequence_number(), target);
  }

  // .google.protobuf.Timestamp published_at = 5;
  if (this->_internal_has_published_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::published_at(this),
        _Internal::published_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.PublishEventResponse)
  return target;
}

size_t PublishEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.PublishEventResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string event_id = 3;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // .google.protobuf.Timestamp published_at = 5;
  if (this->_internal_has_published_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.published_at_);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequence_number());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishEventResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishEventResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishEventResponse::GetClassData() const { return &_class_data_; }


void PublishEventResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishEventResponse*>(&to_msg);
  auto& from = static_cast<const PublishEventResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.PublishEventResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (from._internal_has_published_at()) {
    _this->_internal_mutable_published_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_published_at());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishEventResponse::CopyFrom(const PublishEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.PublishEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishEventResponse::IsInitialized() const {
  return true;
}

void PublishEventResponse::InternalSwap(PublishEventResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishEventResponse, _impl_.success_)
      + sizeof(PublishEventResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(PublishEventResponse, _impl_.published_at_)>(
          reinterpret_cast<char*>(&_impl_.published_at_),
          reinterpret_cast<char*>(&other->_impl_.published_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishEventResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[1]);
}

// ===================================================================

class PublishEventsRequest::_Internal {
 public:
};

void PublishEventsRequest::clear_events() {
  _impl_.events_.Clear();
}
PublishEventsRequest::PublishEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.PublishEventsRequest)
}
PublishEventsRequest::PublishEventsRequest(const PublishEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishEventsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.atomic_){}
    , decltype(_impl_.ensure_delivery_){}
    , decltype(_impl_.retry_attempts_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.atomic_, &from._impl_.atomic_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retry_attempts_) -
    reinterpret_cast<char*>(&_impl_.atomic_)) + sizeof(_impl_.retry_attempts_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.PublishEventsRequest)
}

inline void PublishEventsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.atomic_){false}
    , decltype(_impl_.ensure_delivery_){false}
    , decltype(_impl_.retry_attempts_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PublishEventsRequest::~PublishEventsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.PublishEventsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishEventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
}

void PublishEventsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.PublishEventsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  ::memset(&_impl_.atomic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.retry_attempts_) -
      reinterpret_cast<char*>(&_impl_.atomic_)) + sizeof(_impl_.retry_attempts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishEventsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.cdc.UniversalEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool atomic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.atomic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ensure_delivery = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ensure_delivery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 retry_attempts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.retry_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishEventsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.PublishEventsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.cdc.UniversalEvent events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool atomic = 2;
  if (this->_internal_atomic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_atomic(), target);
  }

  // bool ensure_delivery = 3;
  if (this->_internal_ensure_delivery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ensure_delivery(), target);
  }

  // int32 retry_attempts = 4;
  if (this->_internal_retry_attempts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_retry_attempts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.PublishEventsRequest)
  return target;
}

size_t PublishEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.PublishEventsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.cdc.UniversalEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool atomic = 2;
  if (this->_internal_atomic() != 0) {
    total_size += 1 + 1;
  }

  // bool ensure_delivery = 3;
  if (this->_internal_ensure_delivery() != 0) {
    total_size += 1 + 1;
  }

  // int32 retry_attempts = 4;
  if (this->_internal_retry_attempts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retry_attempts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishEventsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishEventsRequest::GetClassData() const { return &_class_data_; }


void PublishEventsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishEventsRequest*>(&to_msg);
  auto& from = static_cast<const PublishEventsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.PublishEventsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (from._internal_atomic() != 0) {
    _this->_internal_set_atomic(from._internal_atomic());
  }
  if (from._internal_ensure_delivery() != 0) {
    _this->_internal_set_ensure_delivery(from._internal_ensure_delivery());
  }
  if (from._internal_retry_attempts() != 0) {
    _this->_internal_set_retry_attempts(from._internal_retry_attempts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishEventsRequest::CopyFrom(const PublishEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.PublishEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishEventsRequest::IsInitialized() const {
  return true;
}

void PublishEventsRequest::InternalSwap(PublishEventsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishEventsRequest, _impl_.retry_attempts_)
      + sizeof(PublishEventsRequest::_impl_.retry_attempts_)
      - PROTOBUF_FIELD_OFFSET(PublishEventsRequest, _impl_.atomic_)>(
          reinterpret_cast<char*>(&_impl_.atomic_),
          reinterpret_cast<char*>(&other->_impl_.atomic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[2]);
}

// ===================================================================

class PublishEventResult::_Internal {
 public:
};

PublishEventResult::PublishEventResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.PublishEventResult)
}
PublishEventResult::PublishEventResult(const PublishEventResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishEventResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.sequence_number_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sequence_number_, &from._impl_.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.PublishEventResult)
}

inline void PublishEventResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.sequence_number_){int64_t{0}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishEventResult::~PublishEventResult() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.PublishEventResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishEventResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_id_.Destroy();
  _impl_.error_message_.Destroy();
}

void PublishEventResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishEventResult::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.PublishEventResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_id_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishEventResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.PublishEventResult.event_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.PublishEventResult.error_message"));
        } else
          goto handle_unusual;
        continue;
      // int64 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishEventResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.PublishEventResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.PublishEventResult.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.PublishEventResult.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.PublishEventResult)
  return target;
}

size_t PublishEventResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.PublishEventResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequence_number());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishEventResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishEventResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishEventResult::GetClassData() const { return &_class_data_; }


void PublishEventResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishEventResult*>(&to_msg);
  auto& from = static_cast<const PublishEventResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.PublishEventResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishEventResult::CopyFrom(const PublishEventResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.PublishEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishEventResult::IsInitialized() const {
  return true;
}

void PublishEventResult::InternalSwap(PublishEventResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishEventResult, _impl_.success_)
      + sizeof(PublishEventResult::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(PublishEventResult, _impl_.sequence_number_)>(
          reinterpret_cast<char*>(&_impl_.sequence_number_),
          reinterpret_cast<char*>(&other->_impl_.sequence_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishEventResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[3]);
}

// ===================================================================

class PublishEventsResponse::_Internal {
 public:
};

PublishEventsResponse::PublishEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.PublishEventsResponse)
}
PublishEventsResponse::PublishEventsResponse(const PublishEventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishEventsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.successful_count_){}
    , decltype(_impl_.failed_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.failed_count_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.failed_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.PublishEventsResponse)
}

inline void PublishEventsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.successful_count_){0}
    , decltype(_impl_.failed_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishEventsResponse::~PublishEventsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.PublishEventsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishEventsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  _impl_.message_.Destroy();
}

void PublishEventsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.PublishEventsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.failed_count_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.failed_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishEventsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.PublishEventsResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.cdc.PublishEventResult results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 successful_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.successful_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 failed_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.failed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishEventsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.PublishEventsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.PublishEventsResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated .unhinged.cdc.PublishEventResult results = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 successful_count = 4;
  if (this->_internal_successful_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_successful_count(), target);
  }

  // int32 failed_count = 5;
  if (this->_internal_failed_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_failed_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.PublishEventsResponse)
  return target;
}

size_t PublishEventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.PublishEventsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.cdc.PublishEventResult results = 3;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 successful_count = 4;
  if (this->_internal_successful_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_successful_count());
  }

  // int32 failed_count = 5;
  if (this->_internal_failed_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_failed_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishEventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishEventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishEventsResponse::GetClassData() const { return &_class_data_; }


void PublishEventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishEventsResponse*>(&to_msg);
  auto& from = static_cast<const PublishEventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.PublishEventsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_successful_count() != 0) {
    _this->_internal_set_successful_count(from._internal_successful_count());
  }
  if (from._internal_failed_count() != 0) {
    _this->_internal_set_failed_count(from._internal_failed_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishEventsResponse::CopyFrom(const PublishEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.PublishEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishEventsResponse::IsInitialized() const {
  return true;
}

void PublishEventsResponse::InternalSwap(PublishEventsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishEventsResponse, _impl_.failed_count_)
      + sizeof(PublishEventsResponse::_impl_.failed_count_)
      - PROTOBUF_FIELD_OFFSET(PublishEventsResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishEventsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[4]);
}

// ===================================================================

class SubscribeRequest::_Internal {
 public:
  static const ::unhinged::cdc::EventFilter& filter(const SubscribeRequest* msg);
  static const ::unhinged::cdc::SubscriptionOptions& options(const SubscribeRequest* msg);
};

const ::unhinged::cdc::EventFilter&
SubscribeRequest::_Internal::filter(const SubscribeRequest* msg) {
  return *msg->_impl_.filter_;
}
const ::unhinged::cdc::SubscriptionOptions&
SubscribeRequest::_Internal::options(const SubscribeRequest* msg) {
  return *msg->_impl_.options_;
}
SubscribeRequest::SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.subscriber_name_){}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.options_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscriber_id().empty()) {
    _this->_impl_.subscriber_id_.Set(from._internal_subscriber_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subscriber_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscriber_name().empty()) {
    _this->_impl_.subscriber_name_.Set(from._internal_subscriber_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_filter()) {
    _this->_impl_.filter_ = new ::unhinged::cdc::EventFilter(*from._impl_.filter_);
  }
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::unhinged::cdc::SubscriptionOptions(*from._impl_.options_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.SubscribeRequest)
}

inline void SubscribeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.subscriber_name_){}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.options_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subscriber_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.SubscribeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscriber_id_.Destroy();
  _impl_.subscriber_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.filter_;
  if (this != internal_default_instance()) delete _impl_.options_;
}

void SubscribeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.SubscribeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscriber_id_.ClearToEmpty();
  _impl_.subscriber_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.filter_ != nullptr) {
    delete _impl_.filter_;
  }
  _impl_.filter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subscriber_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subscriber_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SubscribeRequest.subscriber_id"));
        } else
          goto handle_unusual;
        continue;
      // string subscriber_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subscriber_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SubscribeRequest.subscriber_name"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.EventFilter filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SubscriptionOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.SubscribeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscriber_id().data(), static_cast<int>(this->_internal_subscriber_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SubscribeRequest.subscriber_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscriber_id(), target);
  }

  // string subscriber_name = 2;
  if (!this->_internal_subscriber_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscriber_name().data(), static_cast<int>(this->_internal_subscriber_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SubscribeRequest.subscriber_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subscriber_name(), target);
  }

  // .unhinged.cdc.EventFilter filter = 3;
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.SubscriptionOptions options = 4;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.SubscribeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscriber_id());
  }

  // string subscriber_name = 2;
  if (!this->_internal_subscriber_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscriber_name());
  }

  // .unhinged.cdc.EventFilter filter = 3;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filter_);
  }

  // .unhinged.cdc.SubscriptionOptions options = 4;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeRequest::GetClassData() const { return &_class_data_; }


void SubscribeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subscriber_id().empty()) {
    _this->_internal_set_subscriber_id(from._internal_subscriber_id());
  }
  if (!from._internal_subscriber_name().empty()) {
    _this->_internal_set_subscriber_name(from._internal_subscriber_name());
  }
  if (from._internal_has_filter()) {
    _this->_internal_mutable_filter()->::unhinged::cdc::EventFilter::MergeFrom(
        from._internal_filter());
  }
  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::unhinged::cdc::SubscriptionOptions::MergeFrom(
        from._internal_options());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriber_id_, lhs_arena,
      &other->_impl_.subscriber_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriber_name_, lhs_arena,
      &other->_impl_.subscriber_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeRequest, _impl_.options_)
      + sizeof(SubscribeRequest::_impl_.options_)
      - PROTOBUF_FIELD_OFFSET(SubscribeRequest, _impl_.filter_)>(
          reinterpret_cast<char*>(&_impl_.filter_),
          reinterpret_cast<char*>(&other->_impl_.filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[5]);
}

// ===================================================================

class EventFilter::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const EventFilter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const EventFilter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata_filter(const EventFilter* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
EventFilter::_Internal::start_time(const EventFilter* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
EventFilter::_Internal::end_time(const EventFilter* msg) {
  return *msg->_impl_.end_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
EventFilter::_Internal::metadata_filter(const EventFilter* msg) {
  return *msg->_impl_.metadata_filter_;
}
void EventFilter::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void EventFilter::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
}
void EventFilter::clear_metadata_filter() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_filter_ != nullptr) {
    delete _impl_.metadata_filter_;
  }
  _impl_.metadata_filter_ = nullptr;
}
EventFilter::EventFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.EventFilter)
}
EventFilter::EventFilter(const EventFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_types_){from._impl_.event_types_}
    , decltype(_impl_.source_services_){from._impl_.source_services_}
    , decltype(_impl_.user_ids_){from._impl_.user_ids_}
    , decltype(_impl_.session_ids_){from._impl_.session_ids_}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.jq_filter_){}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.metadata_filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.jq_filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jq_filter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_jq_filter().empty()) {
    _this->_impl_.jq_filter_.Set(from._internal_jq_filter(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_end_time()) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  if (from._internal_has_metadata_filter()) {
    _this->_impl_.metadata_filter_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_filter_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.EventFilter)
}

inline void EventFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_types_){arena}
    , decltype(_impl_.source_services_){arena}
    , decltype(_impl_.user_ids_){arena}
    , decltype(_impl_.session_ids_){arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.jq_filter_){}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.metadata_filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.jq_filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jq_filter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventFilter::~EventFilter() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.EventFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_types_.~RepeatedPtrField();
  _impl_.source_services_.~RepeatedPtrField();
  _impl_.user_ids_.~RepeatedPtrField();
  _impl_.session_ids_.~RepeatedPtrField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.jq_filter_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
  if (this != internal_default_instance()) delete _impl_.metadata_filter_;
}

void EventFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.EventFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_types_.Clear();
  _impl_.source_services_.Clear();
  _impl_.user_ids_.Clear();
  _impl_.session_ids_.Clear();
  _impl_.tags_.Clear();
  _impl_.jq_filter_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_filter_ != nullptr) {
    delete _impl_.metadata_filter_;
  }
  _impl_.metadata_filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string event_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_event_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.EventFilter.event_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string source_services = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_source_services();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.EventFilter.source_services"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.EventFilter.user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string session_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_session_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.EventFilter.session_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.EventFilter.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string jq_filter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_jq_filter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.EventFilter.jq_filter"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata_filter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.EventFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string event_types = 1;
  for (int i = 0, n = this->_internal_event_types_size(); i < n; i++) {
    const auto& s = this->_internal_event_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.EventFilter.event_types");
    target = stream->WriteString(1, s, target);
  }

  // repeated string source_services = 2;
  for (int i = 0, n = this->_internal_source_services_size(); i < n; i++) {
    const auto& s = this->_internal_source_services(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.EventFilter.source_services");
    target = stream->WriteString(2, s, target);
  }

  // repeated string user_ids = 3;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.EventFilter.user_ids");
    target = stream->WriteString(3, s, target);
  }

  // repeated string session_ids = 4;
  for (int i = 0, n = this->_internal_session_ids_size(); i < n; i++) {
    const auto& s = this->_internal_session_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.EventFilter.session_ids");
    target = stream->WriteString(4, s, target);
  }

  // repeated string tags = 5;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.EventFilter.tags");
    target = stream->WriteString(5, s, target);
  }

  // .google.protobuf.Timestamp start_time = 6;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 7;
  if (this->_internal_has_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  // string jq_filter = 8;
  if (!this->_internal_jq_filter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jq_filter().data(), static_cast<int>(this->_internal_jq_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.EventFilter.jq_filter");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_jq_filter(), target);
  }

  // .google.protobuf.Struct metadata_filter = 9;
  if (this->_internal_has_metadata_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::metadata_filter(this),
        _Internal::metadata_filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.EventFilter)
  return target;
}

size_t EventFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.EventFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string event_types = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.event_types_.size());
  for (int i = 0, n = _impl_.event_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.event_types_.Get(i));
  }

  // repeated string source_services = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.source_services_.size());
  for (int i = 0, n = _impl_.source_services_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.source_services_.Get(i));
  }

  // repeated string user_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_ids_.size());
  for (int i = 0, n = _impl_.user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.user_ids_.Get(i));
  }

  // repeated string session_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.session_ids_.size());
  for (int i = 0, n = _impl_.session_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.session_ids_.Get(i));
  }

  // repeated string tags = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string jq_filter = 8;
  if (!this->_internal_jq_filter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jq_filter());
  }

  // .google.protobuf.Timestamp start_time = 6;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp end_time = 7;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_time_);
  }

  // .google.protobuf.Struct metadata_filter = 9;
  if (this->_internal_has_metadata_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventFilter::GetClassData() const { return &_class_data_; }


void EventFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventFilter*>(&to_msg);
  auto& from = static_cast<const EventFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.EventFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_types_.MergeFrom(from._impl_.event_types_);
  _this->_impl_.source_services_.MergeFrom(from._impl_.source_services_);
  _this->_impl_.user_ids_.MergeFrom(from._impl_.user_ids_);
  _this->_impl_.session_ids_.MergeFrom(from._impl_.session_ids_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_jq_filter().empty()) {
    _this->_internal_set_jq_filter(from._internal_jq_filter());
  }
  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end_time());
  }
  if (from._internal_has_metadata_filter()) {
    _this->_internal_mutable_metadata_filter()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata_filter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventFilter::CopyFrom(const EventFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.EventFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventFilter::IsInitialized() const {
  return true;
}

void EventFilter::InternalSwap(EventFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.event_types_.InternalSwap(&other->_impl_.event_types_);
  _impl_.source_services_.InternalSwap(&other->_impl_.source_services_);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
  _impl_.session_ids_.InternalSwap(&other->_impl_.session_ids_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jq_filter_, lhs_arena,
      &other->_impl_.jq_filter_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventFilter, _impl_.metadata_filter_)
      + sizeof(EventFilter::_impl_.metadata_filter_)
      - PROTOBUF_FIELD_OFFSET(EventFilter, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[6]);
}

// ===================================================================

class SubscriptionOptions::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& replay_from_time(const SubscriptionOptions* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SubscriptionOptions::_Internal::replay_from_time(const SubscriptionOptions* msg) {
  return *msg->_impl_.replay_from_time_;
}
void SubscriptionOptions::clear_replay_from_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.replay_from_time_ != nullptr) {
    delete _impl_.replay_from_time_;
  }
  _impl_.replay_from_time_ = nullptr;
}
SubscriptionOptions::SubscriptionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.SubscriptionOptions)
}
SubscriptionOptions::SubscriptionOptions(const SubscriptionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.delivery_mode_){}
    , decltype(_impl_.replay_from_time_){nullptr}
    , decltype(_impl_.batch_size_){}
    , decltype(_impl_.batch_timeout_ms_){}
    , decltype(_impl_.replay_from_sequence_){}
    , decltype(_impl_.replay_from_beginning_){}
    , decltype(_impl_.send_to_dlq_on_failure_){}
    , decltype(_impl_.max_retry_attempts_){}
    , decltype(_impl_.retry_backoff_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.delivery_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delivery_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delivery_mode().empty()) {
    _this->_impl_.delivery_mode_.Set(from._internal_delivery_mode(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_replay_from_time()) {
    _this->_impl_.replay_from_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.replay_from_time_);
  }
  ::memcpy(&_impl_.batch_size_, &from._impl_.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retry_backoff_ms_) -
    reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.retry_backoff_ms_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.SubscriptionOptions)
}

inline void SubscriptionOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.delivery_mode_){}
    , decltype(_impl_.replay_from_time_){nullptr}
    , decltype(_impl_.batch_size_){0}
    , decltype(_impl_.batch_timeout_ms_){0}
    , decltype(_impl_.replay_from_sequence_){int64_t{0}}
    , decltype(_impl_.replay_from_beginning_){false}
    , decltype(_impl_.send_to_dlq_on_failure_){false}
    , decltype(_impl_.max_retry_attempts_){0}
    , decltype(_impl_.retry_backoff_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.delivery_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delivery_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscriptionOptions::~SubscriptionOptions() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.SubscriptionOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delivery_mode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.replay_from_time_;
}

void SubscriptionOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.SubscriptionOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.delivery_mode_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.replay_from_time_ != nullptr) {
    delete _impl_.replay_from_time_;
  }
  _impl_.replay_from_time_ = nullptr;
  ::memset(&_impl_.batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.retry_backoff_ms_) -
      reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.retry_backoff_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string delivery_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_delivery_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SubscriptionOptions.delivery_mode"));
        } else
          goto handle_unusual;
        continue;
      // int32 batch_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 batch_timeout_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.batch_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool replay_from_beginning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.replay_from_beginning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 replay_from_sequence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.replay_from_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp replay_from_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_from_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_retry_attempts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.max_retry_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 retry_backoff_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.retry_backoff_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool send_to_dlq_on_failure = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.send_to_dlq_on_failure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.SubscriptionOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string delivery_mode = 1;
  if (!this->_internal_delivery_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delivery_mode().data(), static_cast<int>(this->_internal_delivery_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SubscriptionOptions.delivery_mode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_delivery_mode(), target);
  }

  // int32 batch_size = 2;
  if (this->_internal_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_batch_size(), target);
  }

  // int32 batch_timeout_ms = 3;
  if (this->_internal_batch_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_batch_timeout_ms(), target);
  }

  // bool replay_from_beginning = 4;
  if (this->_internal_replay_from_beginning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_replay_from_beginning(), target);
  }

  // int64 replay_from_sequence = 5;
  if (this->_internal_replay_from_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_replay_from_sequence(), target);
  }

  // .google.protobuf.Timestamp replay_from_time = 6;
  if (this->_internal_has_replay_from_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::replay_from_time(this),
        _Internal::replay_from_time(this).GetCachedSize(), target, stream);
  }

  // int32 max_retry_attempts = 7;
  if (this->_internal_max_retry_attempts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_retry_attempts(), target);
  }

  // int32 retry_backoff_ms = 8;
  if (this->_internal_retry_backoff_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_retry_backoff_ms(), target);
  }

  // bool send_to_dlq_on_failure = 9;
  if (this->_internal_send_to_dlq_on_failure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_send_to_dlq_on_failure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.SubscriptionOptions)
  return target;
}

size_t SubscriptionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.SubscriptionOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delivery_mode = 1;
  if (!this->_internal_delivery_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delivery_mode());
  }

  // .google.protobuf.Timestamp replay_from_time = 6;
  if (this->_internal_has_replay_from_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replay_from_time_);
  }

  // int32 batch_size = 2;
  if (this->_internal_batch_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batch_size());
  }

  // int32 batch_timeout_ms = 3;
  if (this->_internal_batch_timeout_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batch_timeout_ms());
  }

  // int64 replay_from_sequence = 5;
  if (this->_internal_replay_from_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_replay_from_sequence());
  }

  // bool replay_from_beginning = 4;
  if (this->_internal_replay_from_beginning() != 0) {
    total_size += 1 + 1;
  }

  // bool send_to_dlq_on_failure = 9;
  if (this->_internal_send_to_dlq_on_failure() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_retry_attempts = 7;
  if (this->_internal_max_retry_attempts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_retry_attempts());
  }

  // int32 retry_backoff_ms = 8;
  if (this->_internal_retry_backoff_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retry_backoff_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionOptions::GetClassData() const { return &_class_data_; }


void SubscriptionOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionOptions*>(&to_msg);
  auto& from = static_cast<const SubscriptionOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.SubscriptionOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_delivery_mode().empty()) {
    _this->_internal_set_delivery_mode(from._internal_delivery_mode());
  }
  if (from._internal_has_replay_from_time()) {
    _this->_internal_mutable_replay_from_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_replay_from_time());
  }
  if (from._internal_batch_size() != 0) {
    _this->_internal_set_batch_size(from._internal_batch_size());
  }
  if (from._internal_batch_timeout_ms() != 0) {
    _this->_internal_set_batch_timeout_ms(from._internal_batch_timeout_ms());
  }
  if (from._internal_replay_from_sequence() != 0) {
    _this->_internal_set_replay_from_sequence(from._internal_replay_from_sequence());
  }
  if (from._internal_replay_from_beginning() != 0) {
    _this->_internal_set_replay_from_beginning(from._internal_replay_from_beginning());
  }
  if (from._internal_send_to_dlq_on_failure() != 0) {
    _this->_internal_set_send_to_dlq_on_failure(from._internal_send_to_dlq_on_failure());
  }
  if (from._internal_max_retry_attempts() != 0) {
    _this->_internal_set_max_retry_attempts(from._internal_max_retry_attempts());
  }
  if (from._internal_retry_backoff_ms() != 0) {
    _this->_internal_set_retry_backoff_ms(from._internal_retry_backoff_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionOptions::CopyFrom(const SubscriptionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.SubscriptionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionOptions::IsInitialized() const {
  return true;
}

void SubscriptionOptions::InternalSwap(SubscriptionOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.delivery_mode_, lhs_arena,
      &other->_impl_.delivery_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionOptions, _impl_.retry_backoff_ms_)
      + sizeof(SubscriptionOptions::_impl_.retry_backoff_ms_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionOptions, _impl_.replay_from_time_)>(
          reinterpret_cast<char*>(&_impl_.replay_from_time_),
          reinterpret_cast<char*>(&other->_impl_.replay_from_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[7]);
}

// ===================================================================

class EventStreamResponse::_Internal {
 public:
  static const ::unhinged::cdc::EventBatch& event_batch(const EventStreamResponse* msg);
  static const ::unhinged::cdc::SubscriptionStatus& status(const EventStreamResponse* msg);
  static const ::unhinged::cdc::SubscriptionError& error(const EventStreamResponse* msg);
  static const ::unhinged::cdc::Heartbeat& heartbeat(const EventStreamResponse* msg);
};

const ::unhinged::cdc::EventBatch&
EventStreamResponse::_Internal::event_batch(const EventStreamResponse* msg) {
  return *msg->_impl_.response_type_.event_batch_;
}
const ::unhinged::cdc::SubscriptionStatus&
EventStreamResponse::_Internal::status(const EventStreamResponse* msg) {
  return *msg->_impl_.response_type_.status_;
}
const ::unhinged::cdc::SubscriptionError&
EventStreamResponse::_Internal::error(const EventStreamResponse* msg) {
  return *msg->_impl_.response_type_.error_;
}
const ::unhinged::cdc::Heartbeat&
EventStreamResponse::_Internal::heartbeat(const EventStreamResponse* msg) {
  return *msg->_impl_.response_type_.heartbeat_;
}
void EventStreamResponse::set_allocated_event_batch(::unhinged::cdc::EventBatch* event_batch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response_type();
  if (event_batch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(event_batch);
    if (message_arena != submessage_arena) {
      event_batch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_batch, submessage_arena);
    }
    set_has_event_batch();
    _impl_.response_type_.event_batch_ = event_batch;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.EventStreamResponse.event_batch)
}
void EventStreamResponse::set_allocated_status(::unhinged::cdc::SubscriptionStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response_type();
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    _impl_.response_type_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.EventStreamResponse.status)
}
void EventStreamResponse::set_allocated_error(::unhinged::cdc::SubscriptionError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response_type();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    _impl_.response_type_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.EventStreamResponse.error)
}
void EventStreamResponse::set_allocated_heartbeat(::unhinged::cdc::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response_type();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    _impl_.response_type_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.EventStreamResponse.heartbeat)
}
EventStreamResponse::EventStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.EventStreamResponse)
}
EventStreamResponse::EventStreamResponse(const EventStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventStreamResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response_type();
  switch (from.response_type_case()) {
    case kEventBatch: {
      _this->_internal_mutable_event_batch()->::unhinged::cdc::EventBatch::MergeFrom(
          from._internal_event_batch());
      break;
    }
    case kStatus: {
      _this->_internal_mutable_status()->::unhinged::cdc::SubscriptionStatus::MergeFrom(
          from._internal_status());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::unhinged::cdc::SubscriptionError::MergeFrom(
          from._internal_error());
      break;
    }
    case kHeartbeat: {
      _this->_internal_mutable_heartbeat()->::unhinged::cdc::Heartbeat::MergeFrom(
          from._internal_heartbeat());
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.EventStreamResponse)
}

inline void EventStreamResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response_type();
}

EventStreamResponse::~EventStreamResponse() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.EventStreamResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventStreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response_type()) {
    clear_response_type();
  }
}

void EventStreamResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventStreamResponse::clear_response_type() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.cdc.EventStreamResponse)
  switch (response_type_case()) {
    case kEventBatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_type_.event_batch_;
      }
      break;
    }
    case kStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_type_.status_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_type_.error_;
      }
      break;
    }
    case kHeartbeat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_type_.heartbeat_;
      }
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_TYPE_NOT_SET;
}


void EventStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.EventStreamResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventStreamResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.cdc.EventBatch event_batch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_batch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SubscriptionStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SubscriptionError error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.Heartbeat heartbeat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventStreamResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.EventStreamResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.cdc.EventBatch event_batch = 1;
  if (_internal_has_event_batch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event_batch(this),
        _Internal::event_batch(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.SubscriptionStatus status = 2;
  if (_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.SubscriptionError error = 3;
  if (_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.Heartbeat heartbeat = 4;
  if (_internal_has_heartbeat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::heartbeat(this),
        _Internal::heartbeat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.EventStreamResponse)
  return target;
}

size_t EventStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.EventStreamResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_type_case()) {
    // .unhinged.cdc.EventBatch event_batch = 1;
    case kEventBatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_type_.event_batch_);
      break;
    }
    // .unhinged.cdc.SubscriptionStatus status = 2;
    case kStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_type_.status_);
      break;
    }
    // .unhinged.cdc.SubscriptionError error = 3;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_type_.error_);
      break;
    }
    // .unhinged.cdc.Heartbeat heartbeat = 4;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_type_.heartbeat_);
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventStreamResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventStreamResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventStreamResponse::GetClassData() const { return &_class_data_; }


void EventStreamResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventStreamResponse*>(&to_msg);
  auto& from = static_cast<const EventStreamResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.EventStreamResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_type_case()) {
    case kEventBatch: {
      _this->_internal_mutable_event_batch()->::unhinged::cdc::EventBatch::MergeFrom(
          from._internal_event_batch());
      break;
    }
    case kStatus: {
      _this->_internal_mutable_status()->::unhinged::cdc::SubscriptionStatus::MergeFrom(
          from._internal_status());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::unhinged::cdc::SubscriptionError::MergeFrom(
          from._internal_error());
      break;
    }
    case kHeartbeat: {
      _this->_internal_mutable_heartbeat()->::unhinged::cdc::Heartbeat::MergeFrom(
          from._internal_heartbeat());
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventStreamResponse::CopyFrom(const EventStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.EventStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventStreamResponse::IsInitialized() const {
  return true;
}

void EventStreamResponse::InternalSwap(EventStreamResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_type_, other->_impl_.response_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventStreamResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[8]);
}

// ===================================================================

class EventBatch::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& batch_time(const EventBatch* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
EventBatch::_Internal::batch_time(const EventBatch* msg) {
  return *msg->_impl_.batch_time_;
}
void EventBatch::clear_events() {
  _impl_.events_.Clear();
}
void EventBatch::clear_batch_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.batch_time_ != nullptr) {
    delete _impl_.batch_time_;
  }
  _impl_.batch_time_ = nullptr;
}
EventBatch::EventBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.EventBatch)
}
EventBatch::EventBatch(const EventBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.checkpoint_token_){}
    , decltype(_impl_.batch_time_){nullptr}
    , decltype(_impl_.batch_sequence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.checkpoint_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkpoint_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_checkpoint_token().empty()) {
    _this->_impl_.checkpoint_token_.Set(from._internal_checkpoint_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_batch_time()) {
    _this->_impl_.batch_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.batch_time_);
  }
  _this->_impl_.batch_sequence_ = from._impl_.batch_sequence_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.EventBatch)
}

inline void EventBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.checkpoint_token_){}
    , decltype(_impl_.batch_time_){nullptr}
    , decltype(_impl_.batch_sequence_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.checkpoint_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkpoint_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventBatch::~EventBatch() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.EventBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  _impl_.checkpoint_token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.batch_time_;
}

void EventBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.EventBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _impl_.checkpoint_token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.batch_time_ != nullptr) {
    delete _impl_.batch_time_;
  }
  _impl_.batch_time_ = nullptr;
  _impl_.batch_sequence_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.cdc.UniversalEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 batch_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.batch_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp batch_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string checkpoint_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_checkpoint_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.EventBatch.checkpoint_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.EventBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.cdc.UniversalEvent events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 batch_sequence = 2;
  if (this->_internal_batch_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_batch_sequence(), target);
  }

  // .google.protobuf.Timestamp batch_time = 3;
  if (this->_internal_has_batch_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::batch_time(this),
        _Internal::batch_time(this).GetCachedSize(), target, stream);
  }

  // string checkpoint_token = 4;
  if (!this->_internal_checkpoint_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpoint_token().data(), static_cast<int>(this->_internal_checkpoint_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.EventBatch.checkpoint_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_checkpoint_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.EventBatch)
  return target;
}

size_t EventBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.EventBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.cdc.UniversalEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string checkpoint_token = 4;
  if (!this->_internal_checkpoint_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpoint_token());
  }

  // .google.protobuf.Timestamp batch_time = 3;
  if (this->_internal_has_batch_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.batch_time_);
  }

  // int64 batch_sequence = 2;
  if (this->_internal_batch_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_batch_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventBatch::GetClassData() const { return &_class_data_; }


void EventBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventBatch*>(&to_msg);
  auto& from = static_cast<const EventBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.EventBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (!from._internal_checkpoint_token().empty()) {
    _this->_internal_set_checkpoint_token(from._internal_checkpoint_token());
  }
  if (from._internal_has_batch_time()) {
    _this->_internal_mutable_batch_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_batch_time());
  }
  if (from._internal_batch_sequence() != 0) {
    _this->_internal_set_batch_sequence(from._internal_batch_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventBatch::CopyFrom(const EventBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.EventBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBatch::IsInitialized() const {
  return true;
}

void EventBatch::InternalSwap(EventBatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.checkpoint_token_, lhs_arena,
      &other->_impl_.checkpoint_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventBatch, _impl_.batch_sequence_)
      + sizeof(EventBatch::_impl_.batch_sequence_)
      - PROTOBUF_FIELD_OFFSET(EventBatch, _impl_.batch_time_)>(
          reinterpret_cast<char*>(&_impl_.batch_time_),
          reinterpret_cast<char*>(&other->_impl_.batch_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[9]);
}

// ===================================================================

class SubscriptionStatus::_Internal {
 public:
};

SubscriptionStatus::SubscriptionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.SubscriptionStatus)
}
SubscriptionStatus::SubscriptionStatus(const SubscriptionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.last_processed_sequence_){}
    , decltype(_impl_.events_processed_){}
    , decltype(_impl_.events_failed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.last_processed_sequence_, &from._impl_.last_processed_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.events_failed_) -
    reinterpret_cast<char*>(&_impl_.last_processed_sequence_)) + sizeof(_impl_.events_failed_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.SubscriptionStatus)
}

inline void SubscriptionStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.last_processed_sequence_){int64_t{0}}
    , decltype(_impl_.events_processed_){0}
    , decltype(_impl_.events_failed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscriptionStatus::~SubscriptionStatus() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.SubscriptionStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void SubscriptionStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.SubscriptionStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  ::memset(&_impl_.last_processed_sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.events_failed_) -
      reinterpret_cast<char*>(&_impl_.last_processed_sequence_)) + sizeof(_impl_.events_failed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SubscriptionStatus.status"));
        } else
          goto handle_unusual;
        continue;
      // int64 last_processed_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.last_processed_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 events_processed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.events_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 events_failed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.events_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.SubscriptionStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SubscriptionStatus.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // int64 last_processed_sequence = 2;
  if (this->_internal_last_processed_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_last_processed_sequence(), target);
  }

  // int32 events_processed = 3;
  if (this->_internal_events_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_events_processed(), target);
  }

  // int32 events_failed = 4;
  if (this->_internal_events_failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_events_failed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.SubscriptionStatus)
  return target;
}

size_t SubscriptionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.SubscriptionStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // int64 last_processed_sequence = 2;
  if (this->_internal_last_processed_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_processed_sequence());
  }

  // int32 events_processed = 3;
  if (this->_internal_events_processed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_events_processed());
  }

  // int32 events_failed = 4;
  if (this->_internal_events_failed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_events_failed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionStatus::GetClassData() const { return &_class_data_; }


void SubscriptionStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionStatus*>(&to_msg);
  auto& from = static_cast<const SubscriptionStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.SubscriptionStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_last_processed_sequence() != 0) {
    _this->_internal_set_last_processed_sequence(from._internal_last_processed_sequence());
  }
  if (from._internal_events_processed() != 0) {
    _this->_internal_set_events_processed(from._internal_events_processed());
  }
  if (from._internal_events_failed() != 0) {
    _this->_internal_set_events_failed(from._internal_events_failed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionStatus::CopyFrom(const SubscriptionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.SubscriptionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionStatus::IsInitialized() const {
  return true;
}

void SubscriptionStatus::InternalSwap(SubscriptionStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionStatus, _impl_.events_failed_)
      + sizeof(SubscriptionStatus::_impl_.events_failed_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionStatus, _impl_.last_processed_sequence_)>(
          reinterpret_cast<char*>(&_impl_.last_processed_sequence_),
          reinterpret_cast<char*>(&other->_impl_.last_processed_sequence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[10]);
}

// ===================================================================

class SubscriptionError::_Internal {
 public:
};

SubscriptionError::SubscriptionError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.SubscriptionError)
}
SubscriptionError::SubscriptionError(const SubscriptionError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_code_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.is_recoverable_){}
    , decltype(_impl_.retry_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_code().empty()) {
    _this->_impl_.error_code_.Set(from._internal_error_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_recoverable_, &from._impl_.is_recoverable_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retry_count_) -
    reinterpret_cast<char*>(&_impl_.is_recoverable_)) + sizeof(_impl_.retry_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.SubscriptionError)
}

inline void SubscriptionError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_code_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.is_recoverable_){false}
    , decltype(_impl_.retry_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscriptionError::~SubscriptionError() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.SubscriptionError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_code_.Destroy();
  _impl_.error_message_.Destroy();
}

void SubscriptionError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionError::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.SubscriptionError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_code_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.is_recoverable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.retry_count_) -
      reinterpret_cast<char*>(&_impl_.is_recoverable_)) + sizeof(_impl_.retry_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SubscriptionError.error_code"));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SubscriptionError.error_message"));
        } else
          goto handle_unusual;
        continue;
      // bool is_recoverable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_recoverable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 retry_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.retry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.SubscriptionError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_code = 1;
  if (!this->_internal_error_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_code().data(), static_cast<int>(this->_internal_error_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SubscriptionError.error_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_code(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SubscriptionError.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  // bool is_recoverable = 3;
  if (this->_internal_is_recoverable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_recoverable(), target);
  }

  // int32 retry_count = 4;
  if (this->_internal_retry_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_retry_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.SubscriptionError)
  return target;
}

size_t SubscriptionError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.SubscriptionError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_code = 1;
  if (!this->_internal_error_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_code());
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool is_recoverable = 3;
  if (this->_internal_is_recoverable() != 0) {
    total_size += 1 + 1;
  }

  // int32 retry_count = 4;
  if (this->_internal_retry_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retry_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionError::GetClassData() const { return &_class_data_; }


void SubscriptionError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionError*>(&to_msg);
  auto& from = static_cast<const SubscriptionError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.SubscriptionError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_code().empty()) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_is_recoverable() != 0) {
    _this->_internal_set_is_recoverable(from._internal_is_recoverable());
  }
  if (from._internal_retry_count() != 0) {
    _this->_internal_set_retry_count(from._internal_retry_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionError::CopyFrom(const SubscriptionError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.SubscriptionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionError::IsInitialized() const {
  return true;
}

void SubscriptionError::InternalSwap(SubscriptionError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_code_, lhs_arena,
      &other->_impl_.error_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionError, _impl_.retry_count_)
      + sizeof(SubscriptionError::_impl_.retry_count_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionError, _impl_.is_recoverable_)>(
          reinterpret_cast<char*>(&_impl_.is_recoverable_),
          reinterpret_cast<char*>(&other->_impl_.is_recoverable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[11]);
}

// ===================================================================

class Heartbeat::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Heartbeat* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Heartbeat::_Internal::timestamp(const Heartbeat* msg) {
  return *msg->_impl_.timestamp_;
}
void Heartbeat::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
Heartbeat::Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Heartbeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.current_sequence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  _this->_impl_.current_sequence_ = from._impl_.current_sequence_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.Heartbeat)
}

inline void Heartbeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.current_sequence_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.Heartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Heartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void Heartbeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.Heartbeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _impl_.current_sequence_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 current_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.current_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Heartbeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.Heartbeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // int64 current_sequence = 2;
  if (this->_internal_current_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_current_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.Heartbeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // int64 current_sequence = 2;
  if (this->_internal_current_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_current_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Heartbeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Heartbeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Heartbeat::GetClassData() const { return &_class_data_; }


void Heartbeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Heartbeat*>(&to_msg);
  auto& from = static_cast<const Heartbeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.Heartbeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_current_sequence() != 0) {
    _this->_internal_set_current_sequence(from._internal_current_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.current_sequence_)
      + sizeof(Heartbeat::_impl_.current_sequence_)
      - PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Heartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[12]);
}

// ===================================================================

class AcknowledgeEventsRequest::_Internal {
 public:
};

AcknowledgeEventsRequest::AcknowledgeEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.AcknowledgeEventsRequest)
}
AcknowledgeEventsRequest::AcknowledgeEventsRequest(const AcknowledgeEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AcknowledgeEventsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_ids_){from._impl_.event_ids_}
    , decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.checkpoint_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscriber_id().empty()) {
    _this->_impl_.subscriber_id_.Set(from._internal_subscriber_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.checkpoint_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkpoint_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_checkpoint_token().empty()) {
    _this->_impl_.checkpoint_token_.Set(from._internal_checkpoint_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.AcknowledgeEventsRequest)
}

inline void AcknowledgeEventsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_ids_){arena}
    , decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.checkpoint_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.checkpoint_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkpoint_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AcknowledgeEventsRequest::~AcknowledgeEventsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.AcknowledgeEventsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AcknowledgeEventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_ids_.~RepeatedPtrField();
  _impl_.subscriber_id_.Destroy();
  _impl_.checkpoint_token_.Destroy();
}

void AcknowledgeEventsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AcknowledgeEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.AcknowledgeEventsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_ids_.Clear();
  _impl_.subscriber_id_.ClearToEmpty();
  _impl_.checkpoint_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcknowledgeEventsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subscriber_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subscriber_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AcknowledgeEventsRequest.subscriber_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string event_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_event_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AcknowledgeEventsRequest.event_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string checkpoint_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_checkpoint_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AcknowledgeEventsRequest.checkpoint_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AcknowledgeEventsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.AcknowledgeEventsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscriber_id().data(), static_cast<int>(this->_internal_subscriber_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AcknowledgeEventsRequest.subscriber_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscriber_id(), target);
  }

  // repeated string event_ids = 2;
  for (int i = 0, n = this->_internal_event_ids_size(); i < n; i++) {
    const auto& s = this->_internal_event_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AcknowledgeEventsRequest.event_ids");
    target = stream->WriteString(2, s, target);
  }

  // string checkpoint_token = 3;
  if (!this->_internal_checkpoint_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpoint_token().data(), static_cast<int>(this->_internal_checkpoint_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AcknowledgeEventsRequest.checkpoint_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_checkpoint_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.AcknowledgeEventsRequest)
  return target;
}

size_t AcknowledgeEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.AcknowledgeEventsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string event_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.event_ids_.size());
  for (int i = 0, n = _impl_.event_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.event_ids_.Get(i));
  }

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscriber_id());
  }

  // string checkpoint_token = 3;
  if (!this->_internal_checkpoint_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpoint_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcknowledgeEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AcknowledgeEventsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcknowledgeEventsRequest::GetClassData() const { return &_class_data_; }


void AcknowledgeEventsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AcknowledgeEventsRequest*>(&to_msg);
  auto& from = static_cast<const AcknowledgeEventsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.AcknowledgeEventsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_ids_.MergeFrom(from._impl_.event_ids_);
  if (!from._internal_subscriber_id().empty()) {
    _this->_internal_set_subscriber_id(from._internal_subscriber_id());
  }
  if (!from._internal_checkpoint_token().empty()) {
    _this->_internal_set_checkpoint_token(from._internal_checkpoint_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcknowledgeEventsRequest::CopyFrom(const AcknowledgeEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.AcknowledgeEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcknowledgeEventsRequest::IsInitialized() const {
  return true;
}

void AcknowledgeEventsRequest::InternalSwap(AcknowledgeEventsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.event_ids_.InternalSwap(&other->_impl_.event_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriber_id_, lhs_arena,
      &other->_impl_.subscriber_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.checkpoint_token_, lhs_arena,
      &other->_impl_.checkpoint_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AcknowledgeEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[13]);
}

// ===================================================================

class AcknowledgeEventsResponse::_Internal {
 public:
};

AcknowledgeEventsResponse::AcknowledgeEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.AcknowledgeEventsResponse)
}
AcknowledgeEventsResponse::AcknowledgeEventsResponse(const AcknowledgeEventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AcknowledgeEventsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.acknowledged_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.acknowledged_count_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.acknowledged_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.AcknowledgeEventsResponse)
}

inline void AcknowledgeEventsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.acknowledged_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AcknowledgeEventsResponse::~AcknowledgeEventsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.AcknowledgeEventsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AcknowledgeEventsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void AcknowledgeEventsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AcknowledgeEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.AcknowledgeEventsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.acknowledged_count_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.acknowledged_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcknowledgeEventsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.AcknowledgeEventsResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // int32 acknowledged_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.acknowledged_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AcknowledgeEventsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.AcknowledgeEventsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.AcknowledgeEventsResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // int32 acknowledged_count = 3;
  if (this->_internal_acknowledged_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_acknowledged_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.AcknowledgeEventsResponse)
  return target;
}

size_t AcknowledgeEventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.AcknowledgeEventsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 acknowledged_count = 3;
  if (this->_internal_acknowledged_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_acknowledged_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcknowledgeEventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AcknowledgeEventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcknowledgeEventsResponse::GetClassData() const { return &_class_data_; }


void AcknowledgeEventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AcknowledgeEventsResponse*>(&to_msg);
  auto& from = static_cast<const AcknowledgeEventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.AcknowledgeEventsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_acknowledged_count() != 0) {
    _this->_internal_set_acknowledged_count(from._internal_acknowledged_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcknowledgeEventsResponse::CopyFrom(const AcknowledgeEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.AcknowledgeEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcknowledgeEventsResponse::IsInitialized() const {
  return true;
}

void AcknowledgeEventsResponse::InternalSwap(AcknowledgeEventsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcknowledgeEventsResponse, _impl_.acknowledged_count_)
      + sizeof(AcknowledgeEventsResponse::_impl_.acknowledged_count_)
      - PROTOBUF_FIELD_OFFSET(AcknowledgeEventsResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcknowledgeEventsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[14]);
}

// ===================================================================

class ReplayEventsRequest::_Internal {
 public:
  static const ::unhinged::cdc::TimeRange& time_range(const ReplayEventsRequest* msg);
  static const ::unhinged::cdc::SequenceRange& sequence_range(const ReplayEventsRequest* msg);
  static const ::unhinged::cdc::EventFilter& filter(const ReplayEventsRequest* msg);
};

const ::unhinged::cdc::TimeRange&
ReplayEventsRequest::_Internal::time_range(const ReplayEventsRequest* msg) {
  return *msg->_impl_.replay_range_.time_range_;
}
const ::unhinged::cdc::SequenceRange&
ReplayEventsRequest::_Internal::sequence_range(const ReplayEventsRequest* msg) {
  return *msg->_impl_.replay_range_.sequence_range_;
}
const ::unhinged::cdc::EventFilter&
ReplayEventsRequest::_Internal::filter(const ReplayEventsRequest* msg) {
  return *msg->_impl_.filter_;
}
void ReplayEventsRequest::set_allocated_time_range(::unhinged::cdc::TimeRange* time_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_replay_range();
  if (time_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_range);
    if (message_arena != submessage_arena) {
      time_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_range, submessage_arena);
    }
    set_has_time_range();
    _impl_.replay_range_.time_range_ = time_range;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.ReplayEventsRequest.time_range)
}
void ReplayEventsRequest::set_allocated_sequence_range(::unhinged::cdc::SequenceRange* sequence_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_replay_range();
  if (sequence_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sequence_range);
    if (message_arena != submessage_arena) {
      sequence_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sequence_range, submessage_arena);
    }
    set_has_sequence_range();
    _impl_.replay_range_.sequence_range_ = sequence_range;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.cdc.ReplayEventsRequest.sequence_range)
}
ReplayEventsRequest::ReplayEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.ReplayEventsRequest)
}
ReplayEventsRequest::ReplayEventsRequest(const ReplayEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplayEventsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.batch_size_){}
    , decltype(_impl_.include_failed_events_){}
    , decltype(_impl_.replay_range_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscriber_id().empty()) {
    _this->_impl_.subscriber_id_.Set(from._internal_subscriber_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_filter()) {
    _this->_impl_.filter_ = new ::unhinged::cdc::EventFilter(*from._impl_.filter_);
  }
  ::memcpy(&_impl_.batch_size_, &from._impl_.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_failed_events_) -
    reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.include_failed_events_));
  clear_has_replay_range();
  switch (from.replay_range_case()) {
    case kTimeRange: {
      _this->_internal_mutable_time_range()->::unhinged::cdc::TimeRange::MergeFrom(
          from._internal_time_range());
      break;
    }
    case kSequenceRange: {
      _this->_internal_mutable_sequence_range()->::unhinged::cdc::SequenceRange::MergeFrom(
          from._internal_sequence_range());
      break;
    }
    case kCheckpointToken: {
      _this->_internal_set_checkpoint_token(from._internal_checkpoint_token());
      break;
    }
    case REPLAY_RANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.ReplayEventsRequest)
}

inline void ReplayEventsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.batch_size_){0}
    , decltype(_impl_.include_failed_events_){false}
    , decltype(_impl_.replay_range_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_replay_range();
}

ReplayEventsRequest::~ReplayEventsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.ReplayEventsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplayEventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscriber_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.filter_;
  if (has_replay_range()) {
    clear_replay_range();
  }
}

void ReplayEventsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplayEventsRequest::clear_replay_range() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.cdc.ReplayEventsRequest)
  switch (replay_range_case()) {
    case kTimeRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.replay_range_.time_range_;
      }
      break;
    }
    case kSequenceRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.replay_range_.sequence_range_;
      }
      break;
    }
    case kCheckpointToken: {
      _impl_.replay_range_.checkpoint_token_.Destroy();
      break;
    }
    case REPLAY_RANGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REPLAY_RANGE_NOT_SET;
}


void ReplayEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.ReplayEventsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscriber_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.filter_ != nullptr) {
    delete _impl_.filter_;
  }
  _impl_.filter_ = nullptr;
  ::memset(&_impl_.batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.include_failed_events_) -
      reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.include_failed_events_));
  clear_replay_range();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayEventsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subscriber_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subscriber_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ReplayEventsRequest.subscriber_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.TimeRange time_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SequenceRange sequence_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sequence_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string checkpoint_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_checkpoint_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ReplayEventsRequest.checkpoint_token"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.EventFilter filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 batch_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_failed_events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.include_failed_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplayEventsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.ReplayEventsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscriber_id().data(), static_cast<int>(this->_internal_subscriber_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ReplayEventsRequest.subscriber_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscriber_id(), target);
  }

  // .unhinged.cdc.TimeRange time_range = 2;
  if (_internal_has_time_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_range(this),
        _Internal::time_range(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.SequenceRange sequence_range = 3;
  if (_internal_has_sequence_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sequence_range(this),
        _Internal::sequence_range(this).GetCachedSize(), target, stream);
  }

  // string checkpoint_token = 4;
  if (_internal_has_checkpoint_token()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpoint_token().data(), static_cast<int>(this->_internal_checkpoint_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ReplayEventsRequest.checkpoint_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_checkpoint_token(), target);
  }

  // .unhinged.cdc.EventFilter filter = 5;
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // int32 batch_size = 6;
  if (this->_internal_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_batch_size(), target);
  }

  // bool include_failed_events = 7;
  if (this->_internal_include_failed_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_include_failed_events(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.ReplayEventsRequest)
  return target;
}

size_t ReplayEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.ReplayEventsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscriber_id());
  }

  // .unhinged.cdc.EventFilter filter = 5;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filter_);
  }

  // int32 batch_size = 6;
  if (this->_internal_batch_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batch_size());
  }

  // bool include_failed_events = 7;
  if (this->_internal_include_failed_events() != 0) {
    total_size += 1 + 1;
  }

  switch (replay_range_case()) {
    // .unhinged.cdc.TimeRange time_range = 2;
    case kTimeRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.replay_range_.time_range_);
      break;
    }
    // .unhinged.cdc.SequenceRange sequence_range = 3;
    case kSequenceRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.replay_range_.sequence_range_);
      break;
    }
    // string checkpoint_token = 4;
    case kCheckpointToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_checkpoint_token());
      break;
    }
    case REPLAY_RANGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplayEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplayEventsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplayEventsRequest::GetClassData() const { return &_class_data_; }


void ReplayEventsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplayEventsRequest*>(&to_msg);
  auto& from = static_cast<const ReplayEventsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.ReplayEventsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subscriber_id().empty()) {
    _this->_internal_set_subscriber_id(from._internal_subscriber_id());
  }
  if (from._internal_has_filter()) {
    _this->_internal_mutable_filter()->::unhinged::cdc::EventFilter::MergeFrom(
        from._internal_filter());
  }
  if (from._internal_batch_size() != 0) {
    _this->_internal_set_batch_size(from._internal_batch_size());
  }
  if (from._internal_include_failed_events() != 0) {
    _this->_internal_set_include_failed_events(from._internal_include_failed_events());
  }
  switch (from.replay_range_case()) {
    case kTimeRange: {
      _this->_internal_mutable_time_range()->::unhinged::cdc::TimeRange::MergeFrom(
          from._internal_time_range());
      break;
    }
    case kSequenceRange: {
      _this->_internal_mutable_sequence_range()->::unhinged::cdc::SequenceRange::MergeFrom(
          from._internal_sequence_range());
      break;
    }
    case kCheckpointToken: {
      _this->_internal_set_checkpoint_token(from._internal_checkpoint_token());
      break;
    }
    case REPLAY_RANGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplayEventsRequest::CopyFrom(const ReplayEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.ReplayEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayEventsRequest::IsInitialized() const {
  return true;
}

void ReplayEventsRequest::InternalSwap(ReplayEventsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriber_id_, lhs_arena,
      &other->_impl_.subscriber_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayEventsRequest, _impl_.include_failed_events_)
      + sizeof(ReplayEventsRequest::_impl_.include_failed_events_)
      - PROTOBUF_FIELD_OFFSET(ReplayEventsRequest, _impl_.filter_)>(
          reinterpret_cast<char*>(&_impl_.filter_),
          reinterpret_cast<char*>(&other->_impl_.filter_));
  swap(_impl_.replay_range_, other->_impl_.replay_range_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[15]);
}

// ===================================================================

class TimeRange::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const TimeRange* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const TimeRange* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimeRange::_Internal::start_time(const TimeRange* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimeRange::_Internal::end_time(const TimeRange* msg) {
  return *msg->_impl_.end_time_;
}
void TimeRange::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void TimeRange::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
}
TimeRange::TimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.TimeRange)
}
TimeRange::TimeRange(const TimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_end_time()) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.TimeRange)
}

inline void TimeRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.TimeRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
}

void TimeRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.TimeRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.TimeRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.TimeRange)
  return target;
}

size_t TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.TimeRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeRange::GetClassData() const { return &_class_data_; }


void TimeRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeRange*>(&to_msg);
  auto& from = static_cast<const TimeRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.TimeRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {
  return true;
}

void TimeRange::InternalSwap(TimeRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeRange, _impl_.end_time_)
      + sizeof(TimeRange::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(TimeRange, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[16]);
}

// ===================================================================

class SequenceRange::_Internal {
 public:
};

SequenceRange::SequenceRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.SequenceRange)
}
SequenceRange::SequenceRange(const SequenceRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SequenceRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_sequence_){}
    , decltype(_impl_.end_sequence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_sequence_, &from._impl_.start_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_sequence_) -
    reinterpret_cast<char*>(&_impl_.start_sequence_)) + sizeof(_impl_.end_sequence_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.SequenceRange)
}

inline void SequenceRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_sequence_){int64_t{0}}
    , decltype(_impl_.end_sequence_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SequenceRange::~SequenceRange() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.SequenceRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SequenceRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SequenceRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SequenceRange::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.SequenceRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_sequence_) -
      reinterpret_cast<char*>(&_impl_.start_sequence_)) + sizeof(_impl_.end_sequence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SequenceRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.end_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SequenceRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.SequenceRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_sequence = 1;
  if (this->_internal_start_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_sequence(), target);
  }

  // int64 end_sequence = 2;
  if (this->_internal_end_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.SequenceRange)
  return target;
}

size_t SequenceRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.SequenceRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start_sequence = 1;
  if (this->_internal_start_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_sequence());
  }

  // int64 end_sequence = 2;
  if (this->_internal_end_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SequenceRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SequenceRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SequenceRange::GetClassData() const { return &_class_data_; }


void SequenceRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SequenceRange*>(&to_msg);
  auto& from = static_cast<const SequenceRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.SequenceRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_sequence() != 0) {
    _this->_internal_set_start_sequence(from._internal_start_sequence());
  }
  if (from._internal_end_sequence() != 0) {
    _this->_internal_set_end_sequence(from._internal_end_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SequenceRange::CopyFrom(const SequenceRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.SequenceRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceRange::IsInitialized() const {
  return true;
}

void SequenceRange::InternalSwap(SequenceRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SequenceRange, _impl_.end_sequence_)
      + sizeof(SequenceRange::_impl_.end_sequence_)
      - PROTOBUF_FIELD_OFFSET(SequenceRange, _impl_.start_sequence_)>(
          reinterpret_cast<char*>(&_impl_.start_sequence_),
          reinterpret_cast<char*>(&other->_impl_.start_sequence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SequenceRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[17]);
}

// ===================================================================

class ListDeadLetterEventsRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& since(const ListDeadLetterEventsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ListDeadLetterEventsRequest::_Internal::since(const ListDeadLetterEventsRequest* msg) {
  return *msg->_impl_.since_;
}
void ListDeadLetterEventsRequest::clear_since() {
  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
}
ListDeadLetterEventsRequest::ListDeadLetterEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.ListDeadLetterEventsRequest)
}
ListDeadLetterEventsRequest::ListDeadLetterEventsRequest(const ListDeadLetterEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDeadLetterEventsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.since_){nullptr}
    , decltype(_impl_.page_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscriber_id().empty()) {
    _this->_impl_.subscriber_id_.Set(from._internal_subscriber_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    _this->_impl_.page_token_.Set(from._internal_page_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_since()) {
    _this->_impl_.since_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.since_);
  }
  _this->_impl_.page_size_ = from._impl_.page_size_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.ListDeadLetterEventsRequest)
}

inline void ListDeadLetterEventsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.since_){nullptr}
    , decltype(_impl_.page_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDeadLetterEventsRequest::~ListDeadLetterEventsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.ListDeadLetterEventsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDeadLetterEventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscriber_id_.Destroy();
  _impl_.page_token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.since_;
}

void ListDeadLetterEventsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDeadLetterEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.ListDeadLetterEventsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscriber_id_.ClearToEmpty();
  _impl_.page_token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
  _impl_.page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDeadLetterEventsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subscriber_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subscriber_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ListDeadLetterEventsRequest.subscriber_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp since = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_since(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ListDeadLetterEventsRequest.page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDeadLetterEventsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.ListDeadLetterEventsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscriber_id().data(), static_cast<int>(this->_internal_subscriber_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ListDeadLetterEventsRequest.subscriber_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscriber_id(), target);
  }

  // .google.protobuf.Timestamp since = 2;
  if (this->_internal_has_since()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::since(this),
        _Internal::since(this).GetCachedSize(), target, stream);
  }

  // int32 page_size = 3;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_page_size(), target);
  }

  // string page_token = 4;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ListDeadLetterEventsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.ListDeadLetterEventsRequest)
  return target;
}

size_t ListDeadLetterEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.ListDeadLetterEventsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscriber_id());
  }

  // string page_token = 4;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // .google.protobuf.Timestamp since = 2;
  if (this->_internal_has_since()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.since_);
  }

  // int32 page_size = 3;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDeadLetterEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDeadLetterEventsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDeadLetterEventsRequest::GetClassData() const { return &_class_data_; }


void ListDeadLetterEventsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDeadLetterEventsRequest*>(&to_msg);
  auto& from = static_cast<const ListDeadLetterEventsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.ListDeadLetterEventsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subscriber_id().empty()) {
    _this->_internal_set_subscriber_id(from._internal_subscriber_id());
  }
  if (!from._internal_page_token().empty()) {
    _this->_internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_has_since()) {
    _this->_internal_mutable_since()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_since());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDeadLetterEventsRequest::CopyFrom(const ListDeadLetterEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.ListDeadLetterEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDeadLetterEventsRequest::IsInitialized() const {
  return true;
}

void ListDeadLetterEventsRequest::InternalSwap(ListDeadLetterEventsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriber_id_, lhs_arena,
      &other->_impl_.subscriber_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_token_, lhs_arena,
      &other->_impl_.page_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDeadLetterEventsRequest, _impl_.page_size_)
      + sizeof(ListDeadLetterEventsRequest::_impl_.page_size_)
      - PROTOBUF_FIELD_OFFSET(ListDeadLetterEventsRequest, _impl_.since_)>(
          reinterpret_cast<char*>(&_impl_.since_),
          reinterpret_cast<char*>(&other->_impl_.since_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDeadLetterEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[18]);
}

// ===================================================================

class ListDeadLetterEventsResponse::_Internal {
 public:
};

ListDeadLetterEventsResponse::ListDeadLetterEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.ListDeadLetterEventsResponse)
}
ListDeadLetterEventsResponse::ListDeadLetterEventsResponse(const ListDeadLetterEventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDeadLetterEventsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.next_page_token_){}
    , decltype(_impl_.total_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    _this->_impl_.next_page_token_.Set(from._internal_next_page_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.total_count_ = from._impl_.total_count_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.ListDeadLetterEventsResponse)
}

inline void ListDeadLetterEventsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.next_page_token_){}
    , decltype(_impl_.total_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDeadLetterEventsResponse::~ListDeadLetterEventsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.ListDeadLetterEventsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDeadLetterEventsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  _impl_.next_page_token_.Destroy();
}

void ListDeadLetterEventsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDeadLetterEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.ListDeadLetterEventsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _impl_.next_page_token_.ClearToEmpty();
  _impl_.total_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDeadLetterEventsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.cdc.DeadLetterEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ListDeadLetterEventsResponse.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      // int32 total_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDeadLetterEventsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.ListDeadLetterEventsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.cdc.DeadLetterEvent events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ListDeadLetterEventsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  // int32 total_count = 3;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.ListDeadLetterEventsResponse)
  return target;
}

size_t ListDeadLetterEventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.ListDeadLetterEventsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.cdc.DeadLetterEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  // int32 total_count = 3;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDeadLetterEventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDeadLetterEventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDeadLetterEventsResponse::GetClassData() const { return &_class_data_; }


void ListDeadLetterEventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDeadLetterEventsResponse*>(&to_msg);
  auto& from = static_cast<const ListDeadLetterEventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.ListDeadLetterEventsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (!from._internal_next_page_token().empty()) {
    _this->_internal_set_next_page_token(from._internal_next_page_token());
  }
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDeadLetterEventsResponse::CopyFrom(const ListDeadLetterEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.ListDeadLetterEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDeadLetterEventsResponse::IsInitialized() const {
  return true;
}

void ListDeadLetterEventsResponse::InternalSwap(ListDeadLetterEventsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_page_token_, lhs_arena,
      &other->_impl_.next_page_token_, rhs_arena
  );
  swap(_impl_.total_count_, other->_impl_.total_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDeadLetterEventsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[19]);
}

// ===================================================================

class DeadLetterEvent::_Internal {
 public:
  static const ::unhinged::cdc::UniversalEvent& original_event(const DeadLetterEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& failed_at(const DeadLetterEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_retry_at(const DeadLetterEvent* msg);
};

const ::unhinged::cdc::UniversalEvent&
DeadLetterEvent::_Internal::original_event(const DeadLetterEvent* msg) {
  return *msg->_impl_.original_event_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DeadLetterEvent::_Internal::failed_at(const DeadLetterEvent* msg) {
  return *msg->_impl_.failed_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DeadLetterEvent::_Internal::last_retry_at(const DeadLetterEvent* msg) {
  return *msg->_impl_.last_retry_at_;
}
void DeadLetterEvent::clear_original_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.original_event_ != nullptr) {
    delete _impl_.original_event_;
  }
  _impl_.original_event_ = nullptr;
}
void DeadLetterEvent::clear_failed_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.failed_at_ != nullptr) {
    delete _impl_.failed_at_;
  }
  _impl_.failed_at_ = nullptr;
}
void DeadLetterEvent::clear_last_retry_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_retry_at_ != nullptr) {
    delete _impl_.last_retry_at_;
  }
  _impl_.last_retry_at_ = nullptr;
}
DeadLetterEvent::DeadLetterEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.DeadLetterEvent)
}
DeadLetterEvent::DeadLetterEvent(const DeadLetterEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeadLetterEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.failure_reason_){}
    , decltype(_impl_.original_event_){nullptr}
    , decltype(_impl_.failed_at_){nullptr}
    , decltype(_impl_.last_retry_at_){nullptr}
    , decltype(_impl_.retry_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.failure_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.failure_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_failure_reason().empty()) {
    _this->_impl_.failure_reason_.Set(from._internal_failure_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_original_event()) {
    _this->_impl_.original_event_ = new ::unhinged::cdc::UniversalEvent(*from._impl_.original_event_);
  }
  if (from._internal_has_failed_at()) {
    _this->_impl_.failed_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.failed_at_);
  }
  if (from._internal_has_last_retry_at()) {
    _this->_impl_.last_retry_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_retry_at_);
  }
  _this->_impl_.retry_count_ = from._impl_.retry_count_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.DeadLetterEvent)
}

inline void DeadLetterEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.failure_reason_){}
    , decltype(_impl_.original_event_){nullptr}
    , decltype(_impl_.failed_at_){nullptr}
    , decltype(_impl_.last_retry_at_){nullptr}
    , decltype(_impl_.retry_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.failure_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.failure_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeadLetterEvent::~DeadLetterEvent() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.DeadLetterEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeadLetterEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.failure_reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.original_event_;
  if (this != internal_default_instance()) delete _impl_.failed_at_;
  if (this != internal_default_instance()) delete _impl_.last_retry_at_;
}

void DeadLetterEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeadLetterEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.DeadLetterEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.failure_reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.original_event_ != nullptr) {
    delete _impl_.original_event_;
  }
  _impl_.original_event_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.failed_at_ != nullptr) {
    delete _impl_.failed_at_;
  }
  _impl_.failed_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_retry_at_ != nullptr) {
    delete _impl_.last_retry_at_;
  }
  _impl_.last_retry_at_ = nullptr;
  _impl_.retry_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeadLetterEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.cdc.UniversalEvent original_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string failure_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_failure_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DeadLetterEvent.failure_reason"));
        } else
          goto handle_unusual;
        continue;
      // int32 retry_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.retry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp failed_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_failed_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_retry_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_retry_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeadLetterEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.DeadLetterEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.cdc.UniversalEvent original_event = 1;
  if (this->_internal_has_original_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::original_event(this),
        _Internal::original_event(this).GetCachedSize(), target, stream);
  }

  // string failure_reason = 2;
  if (!this->_internal_failure_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failure_reason().data(), static_cast<int>(this->_internal_failure_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DeadLetterEvent.failure_reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_failure_reason(), target);
  }

  // int32 retry_count = 3;
  if (this->_internal_retry_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_retry_count(), target);
  }

  // .google.protobuf.Timestamp failed_at = 4;
  if (this->_internal_has_failed_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::failed_at(this),
        _Internal::failed_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_retry_at = 5;
  if (this->_internal_has_last_retry_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::last_retry_at(this),
        _Internal::last_retry_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.DeadLetterEvent)
  return target;
}

size_t DeadLetterEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.DeadLetterEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string failure_reason = 2;
  if (!this->_internal_failure_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failure_reason());
  }

  // .unhinged.cdc.UniversalEvent original_event = 1;
  if (this->_internal_has_original_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.original_event_);
  }

  // .google.protobuf.Timestamp failed_at = 4;
  if (this->_internal_has_failed_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.failed_at_);
  }

  // .google.protobuf.Timestamp last_retry_at = 5;
  if (this->_internal_has_last_retry_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_retry_at_);
  }

  // int32 retry_count = 3;
  if (this->_internal_retry_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retry_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeadLetterEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeadLetterEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeadLetterEvent::GetClassData() const { return &_class_data_; }


void DeadLetterEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeadLetterEvent*>(&to_msg);
  auto& from = static_cast<const DeadLetterEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.DeadLetterEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_failure_reason().empty()) {
    _this->_internal_set_failure_reason(from._internal_failure_reason());
  }
  if (from._internal_has_original_event()) {
    _this->_internal_mutable_original_event()->::unhinged::cdc::UniversalEvent::MergeFrom(
        from._internal_original_event());
  }
  if (from._internal_has_failed_at()) {
    _this->_internal_mutable_failed_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_failed_at());
  }
  if (from._internal_has_last_retry_at()) {
    _this->_internal_mutable_last_retry_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_retry_at());
  }
  if (from._internal_retry_count() != 0) {
    _this->_internal_set_retry_count(from._internal_retry_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeadLetterEvent::CopyFrom(const DeadLetterEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.DeadLetterEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadLetterEvent::IsInitialized() const {
  return true;
}

void DeadLetterEvent::InternalSwap(DeadLetterEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.failure_reason_, lhs_arena,
      &other->_impl_.failure_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeadLetterEvent, _impl_.retry_count_)
      + sizeof(DeadLetterEvent::_impl_.retry_count_)
      - PROTOBUF_FIELD_OFFSET(DeadLetterEvent, _impl_.original_event_)>(
          reinterpret_cast<char*>(&_impl_.original_event_),
          reinterpret_cast<char*>(&other->_impl_.original_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeadLetterEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[20]);
}

// ===================================================================

class ReprocessDeadLetterEventsRequest::_Internal {
 public:
};

ReprocessDeadLetterEventsRequest::ReprocessDeadLetterEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.ReprocessDeadLetterEventsRequest)
}
ReprocessDeadLetterEventsRequest::ReprocessDeadLetterEventsRequest(const ReprocessDeadLetterEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReprocessDeadLetterEventsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_ids_){from._impl_.event_ids_}
    , decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.reset_retry_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscriber_id().empty()) {
    _this->_impl_.subscriber_id_.Set(from._internal_subscriber_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.reset_retry_count_ = from._impl_.reset_retry_count_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.ReprocessDeadLetterEventsRequest)
}

inline void ReprocessDeadLetterEventsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_ids_){arena}
    , decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.reset_retry_count_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReprocessDeadLetterEventsRequest::~ReprocessDeadLetterEventsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.ReprocessDeadLetterEventsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReprocessDeadLetterEventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_ids_.~RepeatedPtrField();
  _impl_.subscriber_id_.Destroy();
}

void ReprocessDeadLetterEventsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReprocessDeadLetterEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.ReprocessDeadLetterEventsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_ids_.Clear();
  _impl_.subscriber_id_.ClearToEmpty();
  _impl_.reset_retry_count_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReprocessDeadLetterEventsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subscriber_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subscriber_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ReprocessDeadLetterEventsRequest.subscriber_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string event_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_event_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ReprocessDeadLetterEventsRequest.event_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool reset_retry_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.reset_retry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReprocessDeadLetterEventsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.ReprocessDeadLetterEventsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscriber_id().data(), static_cast<int>(this->_internal_subscriber_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ReprocessDeadLetterEventsRequest.subscriber_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscriber_id(), target);
  }

  // repeated string event_ids = 2;
  for (int i = 0, n = this->_internal_event_ids_size(); i < n; i++) {
    const auto& s = this->_internal_event_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ReprocessDeadLetterEventsRequest.event_ids");
    target = stream->WriteString(2, s, target);
  }

  // bool reset_retry_count = 3;
  if (this->_internal_reset_retry_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_reset_retry_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.ReprocessDeadLetterEventsRequest)
  return target;
}

size_t ReprocessDeadLetterEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.ReprocessDeadLetterEventsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string event_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.event_ids_.size());
  for (int i = 0, n = _impl_.event_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.event_ids_.Get(i));
  }

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscriber_id());
  }

  // bool reset_retry_count = 3;
  if (this->_internal_reset_retry_count() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReprocessDeadLetterEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReprocessDeadLetterEventsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReprocessDeadLetterEventsRequest::GetClassData() const { return &_class_data_; }


void ReprocessDeadLetterEventsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReprocessDeadLetterEventsRequest*>(&to_msg);
  auto& from = static_cast<const ReprocessDeadLetterEventsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.ReprocessDeadLetterEventsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_ids_.MergeFrom(from._impl_.event_ids_);
  if (!from._internal_subscriber_id().empty()) {
    _this->_internal_set_subscriber_id(from._internal_subscriber_id());
  }
  if (from._internal_reset_retry_count() != 0) {
    _this->_internal_set_reset_retry_count(from._internal_reset_retry_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReprocessDeadLetterEventsRequest::CopyFrom(const ReprocessDeadLetterEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.ReprocessDeadLetterEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReprocessDeadLetterEventsRequest::IsInitialized() const {
  return true;
}

void ReprocessDeadLetterEventsRequest::InternalSwap(ReprocessDeadLetterEventsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.event_ids_.InternalSwap(&other->_impl_.event_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriber_id_, lhs_arena,
      &other->_impl_.subscriber_id_, rhs_arena
  );
  swap(_impl_.reset_retry_count_, other->_impl_.reset_retry_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReprocessDeadLetterEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[21]);
}

// ===================================================================

class ReprocessDeadLetterEventsResponse::_Internal {
 public:
};

ReprocessDeadLetterEventsResponse::ReprocessDeadLetterEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.ReprocessDeadLetterEventsResponse)
}
ReprocessDeadLetterEventsResponse::ReprocessDeadLetterEventsResponse(const ReprocessDeadLetterEventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReprocessDeadLetterEventsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.reprocessed_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reprocessed_count_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.reprocessed_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.ReprocessDeadLetterEventsResponse)
}

inline void ReprocessDeadLetterEventsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.reprocessed_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReprocessDeadLetterEventsResponse::~ReprocessDeadLetterEventsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.ReprocessDeadLetterEventsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReprocessDeadLetterEventsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ReprocessDeadLetterEventsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReprocessDeadLetterEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.ReprocessDeadLetterEventsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reprocessed_count_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.reprocessed_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReprocessDeadLetterEventsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ReprocessDeadLetterEventsResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // int32 reprocessed_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.reprocessed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReprocessDeadLetterEventsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.ReprocessDeadLetterEventsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ReprocessDeadLetterEventsResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // int32 reprocessed_count = 3;
  if (this->_internal_reprocessed_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_reprocessed_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.ReprocessDeadLetterEventsResponse)
  return target;
}

size_t ReprocessDeadLetterEventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.ReprocessDeadLetterEventsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 reprocessed_count = 3;
  if (this->_internal_reprocessed_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reprocessed_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReprocessDeadLetterEventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReprocessDeadLetterEventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReprocessDeadLetterEventsResponse::GetClassData() const { return &_class_data_; }


void ReprocessDeadLetterEventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReprocessDeadLetterEventsResponse*>(&to_msg);
  auto& from = static_cast<const ReprocessDeadLetterEventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.ReprocessDeadLetterEventsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_reprocessed_count() != 0) {
    _this->_internal_set_reprocessed_count(from._internal_reprocessed_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReprocessDeadLetterEventsResponse::CopyFrom(const ReprocessDeadLetterEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.ReprocessDeadLetterEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReprocessDeadLetterEventsResponse::IsInitialized() const {
  return true;
}

void ReprocessDeadLetterEventsResponse::InternalSwap(ReprocessDeadLetterEventsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReprocessDeadLetterEventsResponse, _impl_.reprocessed_count_)
      + sizeof(ReprocessDeadLetterEventsResponse::_impl_.reprocessed_count_)
      - PROTOBUF_FIELD_OFFSET(ReprocessDeadLetterEventsResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReprocessDeadLetterEventsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[22]);
}

// ===================================================================

class GetEventStatsRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const GetEventStatsRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const GetEventStatsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetEventStatsRequest::_Internal::start_time(const GetEventStatsRequest* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetEventStatsRequest::_Internal::end_time(const GetEventStatsRequest* msg) {
  return *msg->_impl_.end_time_;
}
void GetEventStatsRequest::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void GetEventStatsRequest::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
}
GetEventStatsRequest::GetEventStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.GetEventStatsRequest)
}
GetEventStatsRequest::GetEventStatsRequest(const GetEventStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetEventStatsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_types_){from._impl_.event_types_}
    , decltype(_impl_.source_services_){from._impl_.source_services_}
    , decltype(_impl_.aggregation_interval_){}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.aggregation_interval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aggregation_interval_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aggregation_interval().empty()) {
    _this->_impl_.aggregation_interval_.Set(from._internal_aggregation_interval(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_end_time()) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.GetEventStatsRequest)
}

inline void GetEventStatsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_types_){arena}
    , decltype(_impl_.source_services_){arena}
    , decltype(_impl_.aggregation_interval_){}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.aggregation_interval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aggregation_interval_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetEventStatsRequest::~GetEventStatsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.GetEventStatsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetEventStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_types_.~RepeatedPtrField();
  _impl_.source_services_.~RepeatedPtrField();
  _impl_.aggregation_interval_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
}

void GetEventStatsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetEventStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.GetEventStatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_types_.Clear();
  _impl_.source_services_.Clear();
  _impl_.aggregation_interval_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventStatsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string event_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_event_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.GetEventStatsRequest.event_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string source_services = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_source_services();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.GetEventStatsRequest.source_services"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string aggregation_interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_aggregation_interval();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.GetEventStatsRequest.aggregation_interval"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetEventStatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.GetEventStatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  // repeated string event_types = 3;
  for (int i = 0, n = this->_internal_event_types_size(); i < n; i++) {
    const auto& s = this->_internal_event_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.GetEventStatsRequest.event_types");
    target = stream->WriteString(3, s, target);
  }

  // repeated string source_services = 4;
  for (int i = 0, n = this->_internal_source_services_size(); i < n; i++) {
    const auto& s = this->_internal_source_services(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.GetEventStatsRequest.source_services");
    target = stream->WriteString(4, s, target);
  }

  // string aggregation_interval = 5;
  if (!this->_internal_aggregation_interval().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aggregation_interval().data(), static_cast<int>(this->_internal_aggregation_interval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.GetEventStatsRequest.aggregation_interval");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_aggregation_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.GetEventStatsRequest)
  return target;
}

size_t GetEventStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.GetEventStatsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string event_types = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.event_types_.size());
  for (int i = 0, n = _impl_.event_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.event_types_.Get(i));
  }

  // repeated string source_services = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.source_services_.size());
  for (int i = 0, n = _impl_.source_services_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.source_services_.Get(i));
  }

  // string aggregation_interval = 5;
  if (!this->_internal_aggregation_interval().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aggregation_interval());
  }

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventStatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetEventStatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventStatsRequest::GetClassData() const { return &_class_data_; }


void GetEventStatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetEventStatsRequest*>(&to_msg);
  auto& from = static_cast<const GetEventStatsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.GetEventStatsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_types_.MergeFrom(from._impl_.event_types_);
  _this->_impl_.source_services_.MergeFrom(from._impl_.source_services_);
  if (!from._internal_aggregation_interval().empty()) {
    _this->_internal_set_aggregation_interval(from._internal_aggregation_interval());
  }
  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEventStatsRequest::CopyFrom(const GetEventStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.GetEventStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventStatsRequest::IsInitialized() const {
  return true;
}

void GetEventStatsRequest::InternalSwap(GetEventStatsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.event_types_.InternalSwap(&other->_impl_.event_types_);
  _impl_.source_services_.InternalSwap(&other->_impl_.source_services_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aggregation_interval_, lhs_arena,
      &other->_impl_.aggregation_interval_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetEventStatsRequest, _impl_.end_time_)
      + sizeof(GetEventStatsRequest::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(GetEventStatsRequest, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventStatsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[23]);
}

// ===================================================================

class GetEventStatsResponse::_Internal {
 public:
};

GetEventStatsResponse::GetEventStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.GetEventStatsResponse)
}
GetEventStatsResponse::GetEventStatsResponse(const GetEventStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetEventStatsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.GetEventStatsResponse)
}

inline void GetEventStatsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetEventStatsResponse::~GetEventStatsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.GetEventStatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetEventStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
}

void GetEventStatsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetEventStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.GetEventStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventStatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.cdc.EventStats stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetEventStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.GetEventStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.cdc.EventStats stats = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.GetEventStatsResponse)
  return target;
}

size_t GetEventStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.GetEventStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.cdc.EventStats stats = 1;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetEventStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventStatsResponse::GetClassData() const { return &_class_data_; }


void GetEventStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetEventStatsResponse*>(&to_msg);
  auto& from = static_cast<const GetEventStatsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.GetEventStatsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEventStatsResponse::CopyFrom(const GetEventStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.GetEventStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventStatsResponse::IsInitialized() const {
  return true;
}

void GetEventStatsResponse::InternalSwap(GetEventStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventStatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[24]);
}

// ===================================================================

class EventStats::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const EventStats* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
EventStats::_Internal::timestamp(const EventStats* msg) {
  return *msg->_impl_.timestamp_;
}
void EventStats::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
EventStats::EventStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.EventStats)
}
EventStats::EventStats(const EventStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_type_){}
    , decltype(_impl_.source_service_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.event_count_){}
    , decltype(_impl_.events_per_second_){}
    , decltype(_impl_.avg_processing_time_ms_){}
    , decltype(_impl_.failed_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_type().empty()) {
    _this->_impl_.event_type_.Set(from._internal_event_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_service().empty()) {
    _this->_impl_.source_service_.Set(from._internal_source_service(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.event_count_, &from._impl_.event_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.failed_count_) -
    reinterpret_cast<char*>(&_impl_.event_count_)) + sizeof(_impl_.failed_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.EventStats)
}

inline void EventStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_type_){}
    , decltype(_impl_.source_service_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.event_count_){int64_t{0}}
    , decltype(_impl_.events_per_second_){0}
    , decltype(_impl_.avg_processing_time_ms_){0}
    , decltype(_impl_.failed_count_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventStats::~EventStats() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.EventStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_type_.Destroy();
  _impl_.source_service_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void EventStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventStats::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.EventStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_type_.ClearToEmpty();
  _impl_.source_service_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  ::memset(&_impl_.event_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.failed_count_) -
      reinterpret_cast<char*>(&_impl_.event_count_)) + sizeof(_impl_.failed_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_event_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.EventStats.event_type"));
        } else
          goto handle_unusual;
        continue;
      // string source_service = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_source_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.EventStats.source_service"));
        } else
          goto handle_unusual;
        continue;
      // int64 event_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.event_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double events_per_second = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.events_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double avg_processing_time_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.avg_processing_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 failed_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.failed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.EventStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_type().data(), static_cast<int>(this->_internal_event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.EventStats.event_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event_type(), target);
  }

  // string source_service = 3;
  if (!this->_internal_source_service().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_service().data(), static_cast<int>(this->_internal_source_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.EventStats.source_service");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source_service(), target);
  }

  // int64 event_count = 4;
  if (this->_internal_event_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_event_count(), target);
  }

  // double events_per_second = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_events_per_second = this->_internal_events_per_second();
  uint64_t raw_events_per_second;
  memcpy(&raw_events_per_second, &tmp_events_per_second, sizeof(tmp_events_per_second));
  if (raw_events_per_second != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_events_per_second(), target);
  }

  // double avg_processing_time_ms = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_processing_time_ms = this->_internal_avg_processing_time_ms();
  uint64_t raw_avg_processing_time_ms;
  memcpy(&raw_avg_processing_time_ms, &tmp_avg_processing_time_ms, sizeof(tmp_avg_processing_time_ms));
  if (raw_avg_processing_time_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_avg_processing_time_ms(), target);
  }

  // int64 failed_count = 7;
  if (this->_internal_failed_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_failed_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.EventStats)
  return target;
}

size_t EventStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.EventStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_type());
  }

  // string source_service = 3;
  if (!this->_internal_source_service().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_service());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // int64 event_count = 4;
  if (this->_internal_event_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_event_count());
  }

  // double events_per_second = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_events_per_second = this->_internal_events_per_second();
  uint64_t raw_events_per_second;
  memcpy(&raw_events_per_second, &tmp_events_per_second, sizeof(tmp_events_per_second));
  if (raw_events_per_second != 0) {
    total_size += 1 + 8;
  }

  // double avg_processing_time_ms = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_processing_time_ms = this->_internal_avg_processing_time_ms();
  uint64_t raw_avg_processing_time_ms;
  memcpy(&raw_avg_processing_time_ms, &tmp_avg_processing_time_ms, sizeof(tmp_avg_processing_time_ms));
  if (raw_avg_processing_time_ms != 0) {
    total_size += 1 + 8;
  }

  // int64 failed_count = 7;
  if (this->_internal_failed_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_failed_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventStats::GetClassData() const { return &_class_data_; }


void EventStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventStats*>(&to_msg);
  auto& from = static_cast<const EventStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.EventStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_type().empty()) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (!from._internal_source_service().empty()) {
    _this->_internal_set_source_service(from._internal_source_service());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_event_count() != 0) {
    _this->_internal_set_event_count(from._internal_event_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_events_per_second = from._internal_events_per_second();
  uint64_t raw_events_per_second;
  memcpy(&raw_events_per_second, &tmp_events_per_second, sizeof(tmp_events_per_second));
  if (raw_events_per_second != 0) {
    _this->_internal_set_events_per_second(from._internal_events_per_second());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_processing_time_ms = from._internal_avg_processing_time_ms();
  uint64_t raw_avg_processing_time_ms;
  memcpy(&raw_avg_processing_time_ms, &tmp_avg_processing_time_ms, sizeof(tmp_avg_processing_time_ms));
  if (raw_avg_processing_time_ms != 0) {
    _this->_internal_set_avg_processing_time_ms(from._internal_avg_processing_time_ms());
  }
  if (from._internal_failed_count() != 0) {
    _this->_internal_set_failed_count(from._internal_failed_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventStats::CopyFrom(const EventStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.EventStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventStats::IsInitialized() const {
  return true;
}

void EventStats::InternalSwap(EventStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_type_, lhs_arena,
      &other->_impl_.event_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_service_, lhs_arena,
      &other->_impl_.source_service_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventStats, _impl_.failed_count_)
      + sizeof(EventStats::_impl_.failed_count_)
      - PROTOBUF_FIELD_OFFSET(EventStats, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[25]);
}

// ===================================================================

class ListSubscriptionsRequest::_Internal {
 public:
};

ListSubscriptionsRequest::ListSubscriptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.ListSubscriptionsRequest)
}
ListSubscriptionsRequest::ListSubscriptionsRequest(const ListSubscriptionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListSubscriptionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.include_inactive_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscriber_id().empty()) {
    _this->_impl_.subscriber_id_.Set(from._internal_subscriber_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.include_inactive_ = from._impl_.include_inactive_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.ListSubscriptionsRequest)
}

inline void ListSubscriptionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.include_inactive_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListSubscriptionsRequest::~ListSubscriptionsRequest() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.ListSubscriptionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListSubscriptionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscriber_id_.Destroy();
}

void ListSubscriptionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListSubscriptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.ListSubscriptionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscriber_id_.ClearToEmpty();
  _impl_.include_inactive_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSubscriptionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subscriber_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subscriber_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.ListSubscriptionsRequest.subscriber_id"));
        } else
          goto handle_unusual;
        continue;
      // bool include_inactive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.include_inactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSubscriptionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.ListSubscriptionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscriber_id().data(), static_cast<int>(this->_internal_subscriber_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.ListSubscriptionsRequest.subscriber_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscriber_id(), target);
  }

  // bool include_inactive = 2;
  if (this->_internal_include_inactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_include_inactive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.ListSubscriptionsRequest)
  return target;
}

size_t ListSubscriptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.ListSubscriptionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscriber_id());
  }

  // bool include_inactive = 2;
  if (this->_internal_include_inactive() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSubscriptionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListSubscriptionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSubscriptionsRequest::GetClassData() const { return &_class_data_; }


void ListSubscriptionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListSubscriptionsRequest*>(&to_msg);
  auto& from = static_cast<const ListSubscriptionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.ListSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subscriber_id().empty()) {
    _this->_internal_set_subscriber_id(from._internal_subscriber_id());
  }
  if (from._internal_include_inactive() != 0) {
    _this->_internal_set_include_inactive(from._internal_include_inactive());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSubscriptionsRequest::CopyFrom(const ListSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.ListSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSubscriptionsRequest::IsInitialized() const {
  return true;
}

void ListSubscriptionsRequest::InternalSwap(ListSubscriptionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriber_id_, lhs_arena,
      &other->_impl_.subscriber_id_, rhs_arena
  );
  swap(_impl_.include_inactive_, other->_impl_.include_inactive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSubscriptionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[26]);
}

// ===================================================================

class ListSubscriptionsResponse::_Internal {
 public:
};

ListSubscriptionsResponse::ListSubscriptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.ListSubscriptionsResponse)
}
ListSubscriptionsResponse::ListSubscriptionsResponse(const ListSubscriptionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListSubscriptionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriptions_){from._impl_.subscriptions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.ListSubscriptionsResponse)
}

inline void ListSubscriptionsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriptions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListSubscriptionsResponse::~ListSubscriptionsResponse() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.ListSubscriptionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListSubscriptionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscriptions_.~RepeatedPtrField();
}

void ListSubscriptionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListSubscriptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.ListSubscriptionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscriptions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSubscriptionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.cdc.SubscriptionInfo subscriptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSubscriptionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.ListSubscriptionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.cdc.SubscriptionInfo subscriptions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_subscriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.ListSubscriptionsResponse)
  return target;
}

size_t ListSubscriptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.ListSubscriptionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.cdc.SubscriptionInfo subscriptions = 1;
  total_size += 1UL * this->_internal_subscriptions_size();
  for (const auto& msg : this->_impl_.subscriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSubscriptionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListSubscriptionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSubscriptionsResponse::GetClassData() const { return &_class_data_; }


void ListSubscriptionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListSubscriptionsResponse*>(&to_msg);
  auto& from = static_cast<const ListSubscriptionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.ListSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subscriptions_.MergeFrom(from._impl_.subscriptions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSubscriptionsResponse::CopyFrom(const ListSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.ListSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSubscriptionsResponse::IsInitialized() const {
  return true;
}

void ListSubscriptionsResponse::InternalSwap(ListSubscriptionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.subscriptions_.InternalSwap(&other->_impl_.subscriptions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSubscriptionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[27]);
}

// ===================================================================

class SubscriptionInfo::_Internal {
 public:
  static const ::unhinged::cdc::EventFilter& filter(const SubscriptionInfo* msg);
  static const ::unhinged::cdc::SubscriptionOptions& options(const SubscriptionInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const SubscriptionInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_active_at(const SubscriptionInfo* msg);
};

const ::unhinged::cdc::EventFilter&
SubscriptionInfo::_Internal::filter(const SubscriptionInfo* msg) {
  return *msg->_impl_.filter_;
}
const ::unhinged::cdc::SubscriptionOptions&
SubscriptionInfo::_Internal::options(const SubscriptionInfo* msg) {
  return *msg->_impl_.options_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SubscriptionInfo::_Internal::created_at(const SubscriptionInfo* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SubscriptionInfo::_Internal::last_active_at(const SubscriptionInfo* msg) {
  return *msg->_impl_.last_active_at_;
}
void SubscriptionInfo::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void SubscriptionInfo::clear_last_active_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_active_at_ != nullptr) {
    delete _impl_.last_active_at_;
  }
  _impl_.last_active_at_ = nullptr;
}
SubscriptionInfo::SubscriptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.SubscriptionInfo)
}
SubscriptionInfo::SubscriptionInfo(const SubscriptionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.subscriber_name_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.last_active_at_){nullptr}
    , decltype(_impl_.events_processed_){}
    , decltype(_impl_.events_failed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscriber_id().empty()) {
    _this->_impl_.subscriber_id_.Set(from._internal_subscriber_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subscriber_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscriber_name().empty()) {
    _this->_impl_.subscriber_name_.Set(from._internal_subscriber_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_filter()) {
    _this->_impl_.filter_ = new ::unhinged::cdc::EventFilter(*from._impl_.filter_);
  }
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::unhinged::cdc::SubscriptionOptions(*from._impl_.options_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_last_active_at()) {
    _this->_impl_.last_active_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_active_at_);
  }
  ::memcpy(&_impl_.events_processed_, &from._impl_.events_processed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.events_failed_) -
    reinterpret_cast<char*>(&_impl_.events_processed_)) + sizeof(_impl_.events_failed_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.SubscriptionInfo)
}

inline void SubscriptionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.subscriber_name_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.last_active_at_){nullptr}
    , decltype(_impl_.events_processed_){int64_t{0}}
    , decltype(_impl_.events_failed_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subscriber_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscriptionInfo::~SubscriptionInfo() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.SubscriptionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscriber_id_.Destroy();
  _impl_.subscriber_name_.Destroy();
  _impl_.status_.Destroy();
  if (this != internal_default_instance()) delete _impl_.filter_;
  if (this != internal_default_instance()) delete _impl_.options_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.last_active_at_;
}

void SubscriptionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.SubscriptionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscriber_id_.ClearToEmpty();
  _impl_.subscriber_name_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.filter_ != nullptr) {
    delete _impl_.filter_;
  }
  _impl_.filter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_active_at_ != nullptr) {
    delete _impl_.last_active_at_;
  }
  _impl_.last_active_at_ = nullptr;
  ::memset(&_impl_.events_processed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.events_failed_) -
      reinterpret_cast<char*>(&_impl_.events_processed_)) + sizeof(_impl_.events_failed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subscriber_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subscriber_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SubscriptionInfo.subscriber_id"));
        } else
          goto handle_unusual;
        continue;
      // string subscriber_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subscriber_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SubscriptionInfo.subscriber_name"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.EventFilter filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SubscriptionOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.SubscriptionInfo.status"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_active_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_active_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 events_processed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.events_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 events_failed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.events_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.SubscriptionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscriber_id().data(), static_cast<int>(this->_internal_subscriber_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SubscriptionInfo.subscriber_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscriber_id(), target);
  }

  // string subscriber_name = 2;
  if (!this->_internal_subscriber_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscriber_name().data(), static_cast<int>(this->_internal_subscriber_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SubscriptionInfo.subscriber_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subscriber_name(), target);
  }

  // .unhinged.cdc.EventFilter filter = 3;
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.SubscriptionOptions options = 4;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // string status = 5;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.SubscriptionInfo.status");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_active_at = 7;
  if (this->_internal_has_last_active_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::last_active_at(this),
        _Internal::last_active_at(this).GetCachedSize(), target, stream);
  }

  // int64 events_processed = 8;
  if (this->_internal_events_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_events_processed(), target);
  }

  // int64 events_failed = 9;
  if (this->_internal_events_failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_events_failed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.SubscriptionInfo)
  return target;
}

size_t SubscriptionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.SubscriptionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscriber_id());
  }

  // string subscriber_name = 2;
  if (!this->_internal_subscriber_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscriber_name());
  }

  // string status = 5;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .unhinged.cdc.EventFilter filter = 3;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filter_);
  }

  // .unhinged.cdc.SubscriptionOptions options = 4;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp last_active_at = 7;
  if (this->_internal_has_last_active_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_active_at_);
  }

  // int64 events_processed = 8;
  if (this->_internal_events_processed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_events_processed());
  }

  // int64 events_failed = 9;
  if (this->_internal_events_failed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_events_failed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionInfo::GetClassData() const { return &_class_data_; }


void SubscriptionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionInfo*>(&to_msg);
  auto& from = static_cast<const SubscriptionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.SubscriptionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subscriber_id().empty()) {
    _this->_internal_set_subscriber_id(from._internal_subscriber_id());
  }
  if (!from._internal_subscriber_name().empty()) {
    _this->_internal_set_subscriber_name(from._internal_subscriber_name());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_has_filter()) {
    _this->_internal_mutable_filter()->::unhinged::cdc::EventFilter::MergeFrom(
        from._internal_filter());
  }
  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::unhinged::cdc::SubscriptionOptions::MergeFrom(
        from._internal_options());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_last_active_at()) {
    _this->_internal_mutable_last_active_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_active_at());
  }
  if (from._internal_events_processed() != 0) {
    _this->_internal_set_events_processed(from._internal_events_processed());
  }
  if (from._internal_events_failed() != 0) {
    _this->_internal_set_events_failed(from._internal_events_failed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionInfo::CopyFrom(const SubscriptionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.SubscriptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionInfo::IsInitialized() const {
  return true;
}

void SubscriptionInfo::InternalSwap(SubscriptionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriber_id_, lhs_arena,
      &other->_impl_.subscriber_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriber_name_, lhs_arena,
      &other->_impl_.subscriber_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionInfo, _impl_.events_failed_)
      + sizeof(SubscriptionInfo::_impl_.events_failed_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionInfo, _impl_.filter_)>(
          reinterpret_cast<char*>(&_impl_.filter_),
          reinterpret_cast<char*>(&other->_impl_.filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[28]);
}

// ===================================================================

class UpdateSubscriptionRequest::_Internal {
 public:
  static const ::unhinged::cdc::EventFilter& filter(const UpdateSubscriptionRequest* msg);
  static const ::unhinged::cdc::SubscriptionOptions& options(const UpdateSubscriptionRequest* msg);
};

const ::unhinged::cdc::EventFilter&
UpdateSubscriptionRequest::_Internal::filter(const UpdateSubscriptionRequest* msg) {
  return *msg->_impl_.filter_;
}
const ::unhinged::cdc::SubscriptionOptions&
UpdateSubscriptionRequest::_Internal::options(const UpdateSubscriptionRequest* msg) {
  return *msg->_impl_.options_;
}
UpdateSubscriptionRequest::UpdateSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.UpdateSubscriptionRequest)
}
UpdateSubscriptionRequest::UpdateSubscriptionRequest(const UpdateSubscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateSubscriptionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.options_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscriber_id().empty()) {
    _this->_impl_.subscriber_id_.Set(from._internal_subscriber_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_filter()) {
    _this->_impl_.filter_ = new ::unhinged::cdc::EventFilter(*from._impl_.filter_);
  }
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::unhinged::cdc::SubscriptionOptions(*from._impl_.options_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.UpdateSubscriptionRequest)
}

inline void UpdateSubscriptionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.options_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateSubscriptionRequest::~UpdateSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.UpdateSubscriptionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscriber_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.filter_;
  if (this != internal_default_instance()) delete _impl_.options_;
}

void UpdateSubscriptionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.UpdateSubscriptionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscriber_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.filter_ != nullptr) {
    delete _impl_.filter_;
  }
  _impl_.filter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSubscriptionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subscriber_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subscriber_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UpdateSubscriptionRequest.subscriber_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.EventFilter filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.SubscriptionOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateSubscriptionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.UpdateSubscriptionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscriber_id().data(), static_cast<int>(this->_internal_subscriber_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UpdateSubscriptionRequest.subscriber_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscriber_id(), target);
  }

  // .unhinged.cdc.EventFilter filter = 2;
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.SubscriptionOptions options = 3;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.UpdateSubscriptionRequest)
  return target;
}

size_t UpdateSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.UpdateSubscriptionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscriber_id());
  }

  // .unhinged.cdc.EventFilter filter = 2;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filter_);
  }

  // .unhinged.cdc.SubscriptionOptions options = 3;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateSubscriptionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateSubscriptionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateSubscriptionRequest::GetClassData() const { return &_class_data_; }


void UpdateSubscriptionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateSubscriptionRequest*>(&to_msg);
  auto& from = static_cast<const UpdateSubscriptionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.UpdateSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subscriber_id().empty()) {
    _this->_internal_set_subscriber_id(from._internal_subscriber_id());
  }
  if (from._internal_has_filter()) {
    _this->_internal_mutable_filter()->::unhinged::cdc::EventFilter::MergeFrom(
        from._internal_filter());
  }
  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::unhinged::cdc::SubscriptionOptions::MergeFrom(
        from._internal_options());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateSubscriptionRequest::CopyFrom(const UpdateSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.UpdateSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSubscriptionRequest::IsInitialized() const {
  return true;
}

void UpdateSubscriptionRequest::InternalSwap(UpdateSubscriptionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriber_id_, lhs_arena,
      &other->_impl_.subscriber_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateSubscriptionRequest, _impl_.options_)
      + sizeof(UpdateSubscriptionRequest::_impl_.options_)
      - PROTOBUF_FIELD_OFFSET(UpdateSubscriptionRequest, _impl_.filter_)>(
          reinterpret_cast<char*>(&_impl_.filter_),
          reinterpret_cast<char*>(&other->_impl_.filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSubscriptionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[29]);
}

// ===================================================================

class UpdateSubscriptionResponse::_Internal {
 public:
};

UpdateSubscriptionResponse::UpdateSubscriptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.UpdateSubscriptionResponse)
}
UpdateSubscriptionResponse::UpdateSubscriptionResponse(const UpdateSubscriptionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateSubscriptionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.UpdateSubscriptionResponse)
}

inline void UpdateSubscriptionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateSubscriptionResponse::~UpdateSubscriptionResponse() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.UpdateSubscriptionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateSubscriptionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void UpdateSubscriptionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateSubscriptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.UpdateSubscriptionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSubscriptionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.UpdateSubscriptionResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateSubscriptionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.UpdateSubscriptionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.UpdateSubscriptionResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.UpdateSubscriptionResponse)
  return target;
}

size_t UpdateSubscriptionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.UpdateSubscriptionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateSubscriptionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateSubscriptionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateSubscriptionResponse::GetClassData() const { return &_class_data_; }


void UpdateSubscriptionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateSubscriptionResponse*>(&to_msg);
  auto& from = static_cast<const UpdateSubscriptionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.UpdateSubscriptionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateSubscriptionResponse::CopyFrom(const UpdateSubscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.UpdateSubscriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSubscriptionResponse::IsInitialized() const {
  return true;
}

void UpdateSubscriptionResponse::InternalSwap(UpdateSubscriptionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSubscriptionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[30]);
}

// ===================================================================

class DeleteSubscriptionRequest::_Internal {
 public:
};

DeleteSubscriptionRequest::DeleteSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.DeleteSubscriptionRequest)
}
DeleteSubscriptionRequest::DeleteSubscriptionRequest(const DeleteSubscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteSubscriptionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscriber_id().empty()) {
    _this->_impl_.subscriber_id_.Set(from._internal_subscriber_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.DeleteSubscriptionRequest)
}

inline void DeleteSubscriptionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subscriber_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteSubscriptionRequest::~DeleteSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.DeleteSubscriptionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscriber_id_.Destroy();
}

void DeleteSubscriptionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.DeleteSubscriptionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscriber_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSubscriptionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subscriber_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subscriber_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DeleteSubscriptionRequest.subscriber_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteSubscriptionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.DeleteSubscriptionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscriber_id().data(), static_cast<int>(this->_internal_subscriber_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DeleteSubscriptionRequest.subscriber_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscriber_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.DeleteSubscriptionRequest)
  return target;
}

size_t DeleteSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.DeleteSubscriptionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscriber_id = 1;
  if (!this->_internal_subscriber_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscriber_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteSubscriptionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteSubscriptionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteSubscriptionRequest::GetClassData() const { return &_class_data_; }


void DeleteSubscriptionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteSubscriptionRequest*>(&to_msg);
  auto& from = static_cast<const DeleteSubscriptionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.DeleteSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subscriber_id().empty()) {
    _this->_internal_set_subscriber_id(from._internal_subscriber_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteSubscriptionRequest::CopyFrom(const DeleteSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.DeleteSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSubscriptionRequest::IsInitialized() const {
  return true;
}

void DeleteSubscriptionRequest::InternalSwap(DeleteSubscriptionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriber_id_, lhs_arena,
      &other->_impl_.subscriber_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSubscriptionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[31]);
}

// ===================================================================

class DeleteSubscriptionResponse::_Internal {
 public:
};

DeleteSubscriptionResponse::DeleteSubscriptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.DeleteSubscriptionResponse)
}
DeleteSubscriptionResponse::DeleteSubscriptionResponse(const DeleteSubscriptionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteSubscriptionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.DeleteSubscriptionResponse)
}

inline void DeleteSubscriptionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteSubscriptionResponse::~DeleteSubscriptionResponse() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.DeleteSubscriptionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteSubscriptionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void DeleteSubscriptionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteSubscriptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.DeleteSubscriptionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSubscriptionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.DeleteSubscriptionResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteSubscriptionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.DeleteSubscriptionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.DeleteSubscriptionResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.DeleteSubscriptionResponse)
  return target;
}

size_t DeleteSubscriptionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.DeleteSubscriptionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteSubscriptionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteSubscriptionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteSubscriptionResponse::GetClassData() const { return &_class_data_; }


void DeleteSubscriptionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteSubscriptionResponse*>(&to_msg);
  auto& from = static_cast<const DeleteSubscriptionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.DeleteSubscriptionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteSubscriptionResponse::CopyFrom(const DeleteSubscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.DeleteSubscriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSubscriptionResponse::IsInitialized() const {
  return true;
}

void DeleteSubscriptionResponse::InternalSwap(DeleteSubscriptionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSubscriptionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[32]);
}

// ===================================================================

class GetServiceStatusRequest::_Internal {
 public:
};

GetServiceStatusRequest::GetServiceStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.GetServiceStatusRequest)
}
GetServiceStatusRequest::GetServiceStatusRequest(const GetServiceStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetServiceStatusRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.GetServiceStatusRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceStatusRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetServiceStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[33]);
}

// ===================================================================

class GetServiceStatusResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const GetServiceStatusResponse* msg);
  static const ::unhinged::cdc::ServiceMetrics& metrics(const GetServiceStatusResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetServiceStatusResponse::_Internal::timestamp(const GetServiceStatusResponse* msg) {
  return *msg->_impl_.timestamp_;
}
const ::unhinged::cdc::ServiceMetrics&
GetServiceStatusResponse::_Internal::metrics(const GetServiceStatusResponse* msg) {
  return *msg->_impl_.metrics_;
}
void GetServiceStatusResponse::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
GetServiceStatusResponse::GetServiceStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.GetServiceStatusResponse)
}
GetServiceStatusResponse::GetServiceStatusResponse(const GetServiceStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServiceStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.metrics_){nullptr}
    , decltype(_impl_.healthy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_metrics()) {
    _this->_impl_.metrics_ = new ::unhinged::cdc::ServiceMetrics(*from._impl_.metrics_);
  }
  _this->_impl_.healthy_ = from._impl_.healthy_;
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.GetServiceStatusResponse)
}

inline void GetServiceStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.metrics_){nullptr}
    , decltype(_impl_.healthy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetServiceStatusResponse::~GetServiceStatusResponse() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.GetServiceStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServiceStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.metrics_;
}

void GetServiceStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServiceStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.GetServiceStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metrics_ != nullptr) {
    delete _impl_.metrics_;
  }
  _impl_.metrics_ = nullptr;
  _impl_.healthy_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool healthy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.healthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.cdc.GetServiceStatusResponse.status"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.cdc.ServiceMetrics metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServiceStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.GetServiceStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool healthy = 1;
  if (this->_internal_healthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_healthy(), target);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.cdc.GetServiceStatusResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .unhinged.cdc.ServiceMetrics metrics = 4;
  if (this->_internal_has_metrics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::metrics(this),
        _Internal::metrics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.GetServiceStatusResponse)
  return target;
}

size_t GetServiceStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.GetServiceStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .unhinged.cdc.ServiceMetrics metrics = 4;
  if (this->_internal_has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metrics_);
  }

  // bool healthy = 1;
  if (this->_internal_healthy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServiceStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceStatusResponse::GetClassData() const { return &_class_data_; }


void GetServiceStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServiceStatusResponse*>(&to_msg);
  auto& from = static_cast<const GetServiceStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.GetServiceStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_metrics()) {
    _this->_internal_mutable_metrics()->::unhinged::cdc::ServiceMetrics::MergeFrom(
        from._internal_metrics());
  }
  if (from._internal_healthy() != 0) {
    _this->_internal_set_healthy(from._internal_healthy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceStatusResponse::CopyFrom(const GetServiceStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.GetServiceStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceStatusResponse::IsInitialized() const {
  return true;
}

void GetServiceStatusResponse::InternalSwap(GetServiceStatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServiceStatusResponse, _impl_.healthy_)
      + sizeof(GetServiceStatusResponse::_impl_.healthy_)
      - PROTOBUF_FIELD_OFFSET(GetServiceStatusResponse, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[34]);
}

// ===================================================================

class ServiceMetrics::_Internal {
 public:
};

ServiceMetrics::ServiceMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.cdc.ServiceMetrics)
}
ServiceMetrics::ServiceMetrics(const ServiceMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.total_events_published_){}
    , decltype(_impl_.total_events_delivered_){}
    , decltype(_impl_.active_subscriptions_){}
    , decltype(_impl_.events_in_dlq_){}
    , decltype(_impl_.avg_publish_latency_ms_){}
    , decltype(_impl_.avg_delivery_latency_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_events_published_, &from._impl_.total_events_published_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.avg_delivery_latency_ms_) -
    reinterpret_cast<char*>(&_impl_.total_events_published_)) + sizeof(_impl_.avg_delivery_latency_ms_));
  // @@protoc_insertion_point(copy_constructor:unhinged.cdc.ServiceMetrics)
}

inline void ServiceMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.total_events_published_){int64_t{0}}
    , decltype(_impl_.total_events_delivered_){int64_t{0}}
    , decltype(_impl_.active_subscriptions_){int64_t{0}}
    , decltype(_impl_.events_in_dlq_){int64_t{0}}
    , decltype(_impl_.avg_publish_latency_ms_){0}
    , decltype(_impl_.avg_delivery_latency_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServiceMetrics::~ServiceMetrics() {
  // @@protoc_insertion_point(destructor:unhinged.cdc.ServiceMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServiceMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.cdc.ServiceMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_events_published_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.avg_delivery_latency_ms_) -
      reinterpret_cast<char*>(&_impl_.total_events_published_)) + sizeof(_impl_.avg_delivery_latency_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 total_events_published = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_events_published_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_events_delivered = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_events_delivered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 active_subscriptions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.active_subscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 events_in_dlq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.events_in_dlq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double avg_publish_latency_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.avg_publish_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double avg_delivery_latency_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.avg_delivery_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.cdc.ServiceMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total_events_published = 1;
  if (this->_internal_total_events_published() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_total_events_published(), target);
  }

  // int64 total_events_delivered = 2;
  if (this->_internal_total_events_delivered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_total_events_delivered(), target);
  }

  // int64 active_subscriptions = 3;
  if (this->_internal_active_subscriptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_active_subscriptions(), target);
  }

  // int64 events_in_dlq = 4;
  if (this->_internal_events_in_dlq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_events_in_dlq(), target);
  }

  // double avg_publish_latency_ms = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_publish_latency_ms = this->_internal_avg_publish_latency_ms();
  uint64_t raw_avg_publish_latency_ms;
  memcpy(&raw_avg_publish_latency_ms, &tmp_avg_publish_latency_ms, sizeof(tmp_avg_publish_latency_ms));
  if (raw_avg_publish_latency_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_avg_publish_latency_ms(), target);
  }

  // double avg_delivery_latency_ms = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_delivery_latency_ms = this->_internal_avg_delivery_latency_ms();
  uint64_t raw_avg_delivery_latency_ms;
  memcpy(&raw_avg_delivery_latency_ms, &tmp_avg_delivery_latency_ms, sizeof(tmp_avg_delivery_latency_ms));
  if (raw_avg_delivery_latency_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_avg_delivery_latency_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.cdc.ServiceMetrics)
  return target;
}

size_t ServiceMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.cdc.ServiceMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 total_events_published = 1;
  if (this->_internal_total_events_published() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_events_published());
  }

  // int64 total_events_delivered = 2;
  if (this->_internal_total_events_delivered() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_events_delivered());
  }

  // int64 active_subscriptions = 3;
  if (this->_internal_active_subscriptions() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_active_subscriptions());
  }

  // int64 events_in_dlq = 4;
  if (this->_internal_events_in_dlq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_events_in_dlq());
  }

  // double avg_publish_latency_ms = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_publish_latency_ms = this->_internal_avg_publish_latency_ms();
  uint64_t raw_avg_publish_latency_ms;
  memcpy(&raw_avg_publish_latency_ms, &tmp_avg_publish_latency_ms, sizeof(tmp_avg_publish_latency_ms));
  if (raw_avg_publish_latency_ms != 0) {
    total_size += 1 + 8;
  }

  // double avg_delivery_latency_ms = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_delivery_latency_ms = this->_internal_avg_delivery_latency_ms();
  uint64_t raw_avg_delivery_latency_ms;
  memcpy(&raw_avg_delivery_latency_ms, &tmp_avg_delivery_latency_ms, sizeof(tmp_avg_delivery_latency_ms));
  if (raw_avg_delivery_latency_ms != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceMetrics::GetClassData() const { return &_class_data_; }


void ServiceMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceMetrics*>(&to_msg);
  auto& from = static_cast<const ServiceMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.cdc.ServiceMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_events_published() != 0) {
    _this->_internal_set_total_events_published(from._internal_total_events_published());
  }
  if (from._internal_total_events_delivered() != 0) {
    _this->_internal_set_total_events_delivered(from._internal_total_events_delivered());
  }
  if (from._internal_active_subscriptions() != 0) {
    _this->_internal_set_active_subscriptions(from._internal_active_subscriptions());
  }
  if (from._internal_events_in_dlq() != 0) {
    _this->_internal_set_events_in_dlq(from._internal_events_in_dlq());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_publish_latency_ms = from._internal_avg_publish_latency_ms();
  uint64_t raw_avg_publish_latency_ms;
  memcpy(&raw_avg_publish_latency_ms, &tmp_avg_publish_latency_ms, sizeof(tmp_avg_publish_latency_ms));
  if (raw_avg_publish_latency_ms != 0) {
    _this->_internal_set_avg_publish_latency_ms(from._internal_avg_publish_latency_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_delivery_latency_ms = from._internal_avg_delivery_latency_ms();
  uint64_t raw_avg_delivery_latency_ms;
  memcpy(&raw_avg_delivery_latency_ms, &tmp_avg_delivery_latency_ms, sizeof(tmp_avg_delivery_latency_ms));
  if (raw_avg_delivery_latency_ms != 0) {
    _this->_internal_set_avg_delivery_latency_ms(from._internal_avg_delivery_latency_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceMetrics::CopyFrom(const ServiceMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.cdc.ServiceMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMetrics::IsInitialized() const {
  return true;
}

void ServiceMetrics::InternalSwap(ServiceMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceMetrics, _impl_.avg_delivery_latency_ms_)
      + sizeof(ServiceMetrics::_impl_.avg_delivery_latency_ms_)
      - PROTOBUF_FIELD_OFFSET(ServiceMetrics, _impl_.total_events_published_)>(
          reinterpret_cast<char*>(&_impl_.total_events_published_),
          reinterpret_cast<char*>(&other->_impl_.total_events_published_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cdc_5fservice_2eproto_getter, &descriptor_table_cdc_5fservice_2eproto_once,
      file_level_metadata_cdc_5fservice_2eproto[35]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cdc
}  // namespace unhinged
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::unhinged::cdc::PublishEventRequest*
Arena::CreateMaybeMessage< ::unhinged::cdc::PublishEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::PublishEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::PublishEventResponse*
Arena::CreateMaybeMessage< ::unhinged::cdc::PublishEventResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::PublishEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::PublishEventsRequest*
Arena::CreateMaybeMessage< ::unhinged::cdc::PublishEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::PublishEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::PublishEventResult*
Arena::CreateMaybeMessage< ::unhinged::cdc::PublishEventResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::PublishEventResult >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::PublishEventsResponse*
Arena::CreateMaybeMessage< ::unhinged::cdc::PublishEventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::PublishEventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::SubscribeRequest*
Arena::CreateMaybeMessage< ::unhinged::cdc::SubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::EventFilter*
Arena::CreateMaybeMessage< ::unhinged::cdc::EventFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::EventFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::SubscriptionOptions*
Arena::CreateMaybeMessage< ::unhinged::cdc::SubscriptionOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::SubscriptionOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::EventStreamResponse*
Arena::CreateMaybeMessage< ::unhinged::cdc::EventStreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::EventStreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::EventBatch*
Arena::CreateMaybeMessage< ::unhinged::cdc::EventBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::EventBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::SubscriptionStatus*
Arena::CreateMaybeMessage< ::unhinged::cdc::SubscriptionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::SubscriptionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::SubscriptionError*
Arena::CreateMaybeMessage< ::unhinged::cdc::SubscriptionError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::SubscriptionError >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::Heartbeat*
Arena::CreateMaybeMessage< ::unhinged::cdc::Heartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::AcknowledgeEventsRequest*
Arena::CreateMaybeMessage< ::unhinged::cdc::AcknowledgeEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::AcknowledgeEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::AcknowledgeEventsResponse*
Arena::CreateMaybeMessage< ::unhinged::cdc::AcknowledgeEventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::AcknowledgeEventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::ReplayEventsRequest*
Arena::CreateMaybeMessage< ::unhinged::cdc::ReplayEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::ReplayEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::TimeRange*
Arena::CreateMaybeMessage< ::unhinged::cdc::TimeRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::TimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::SequenceRange*
Arena::CreateMaybeMessage< ::unhinged::cdc::SequenceRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::SequenceRange >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::ListDeadLetterEventsRequest*
Arena::CreateMaybeMessage< ::unhinged::cdc::ListDeadLetterEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::ListDeadLetterEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::ListDeadLetterEventsResponse*
Arena::CreateMaybeMessage< ::unhinged::cdc::ListDeadLetterEventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::ListDeadLetterEventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::DeadLetterEvent*
Arena::CreateMaybeMessage< ::unhinged::cdc::DeadLetterEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::DeadLetterEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::ReprocessDeadLetterEventsRequest*
Arena::CreateMaybeMessage< ::unhinged::cdc::ReprocessDeadLetterEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::ReprocessDeadLetterEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::ReprocessDeadLetterEventsResponse*
Arena::CreateMaybeMessage< ::unhinged::cdc::ReprocessDeadLetterEventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::ReprocessDeadLetterEventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::GetEventStatsRequest*
Arena::CreateMaybeMessage< ::unhinged::cdc::GetEventStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::GetEventStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::GetEventStatsResponse*
Arena::CreateMaybeMessage< ::unhinged::cdc::GetEventStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::GetEventStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::EventStats*
Arena::CreateMaybeMessage< ::unhinged::cdc::EventStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::EventStats >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::ListSubscriptionsRequest*
Arena::CreateMaybeMessage< ::unhinged::cdc::ListSubscriptionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::ListSubscriptionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::ListSubscriptionsResponse*
Arena::CreateMaybeMessage< ::unhinged::cdc::ListSubscriptionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::ListSubscriptionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::SubscriptionInfo*
Arena::CreateMaybeMessage< ::unhinged::cdc::SubscriptionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::SubscriptionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::UpdateSubscriptionRequest*
Arena::CreateMaybeMessage< ::unhinged::cdc::UpdateSubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::UpdateSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::UpdateSubscriptionResponse*
Arena::CreateMaybeMessage< ::unhinged::cdc::UpdateSubscriptionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::UpdateSubscriptionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::DeleteSubscriptionRequest*
Arena::CreateMaybeMessage< ::unhinged::cdc::DeleteSubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::DeleteSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::DeleteSubscriptionResponse*
Arena::CreateMaybeMessage< ::unhinged::cdc::DeleteSubscriptionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::DeleteSubscriptionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::GetServiceStatusRequest*
Arena::CreateMaybeMessage< ::unhinged::cdc::GetServiceStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::GetServiceStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::GetServiceStatusResponse*
Arena::CreateMaybeMessage< ::unhinged::cdc::GetServiceStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::GetServiceStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::cdc::ServiceMetrics*
Arena::CreateMaybeMessage< ::unhinged::cdc::ServiceMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::cdc::ServiceMetrics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
