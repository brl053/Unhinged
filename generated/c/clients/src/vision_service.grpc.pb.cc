// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vision_service.proto

#include "vision_service.pb.h"
#include "vision_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace multimodal {

static const char* VisionService_method_names[] = {
  "/multimodal.VisionService/Infer",
  "/multimodal.VisionService/GetAvailableModels",
  "/multimodal.VisionService/GetHealth",
  "/multimodal.VisionService/GetModelMetrics",
};

std::unique_ptr< VisionService::Stub> VisionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VisionService::Stub> stub(new VisionService::Stub(channel, options));
  return stub;
}

VisionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Infer_(VisionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAvailableModels_(VisionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHealth_(VisionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModelMetrics_(VisionService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VisionService::Stub::Infer(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest& request, ::multimodal::VisionInferenceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::multimodal::VisionInferenceRequest, ::multimodal::VisionInferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Infer_, context, request, response);
}

void VisionService::Stub::async::Infer(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest* request, ::multimodal::VisionInferenceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::multimodal::VisionInferenceRequest, ::multimodal::VisionInferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Infer_, context, request, response, std::move(f));
}

void VisionService::Stub::async::Infer(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest* request, ::multimodal::VisionInferenceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Infer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::multimodal::VisionInferenceResponse>* VisionService::Stub::PrepareAsyncInferRaw(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::multimodal::VisionInferenceResponse, ::multimodal::VisionInferenceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Infer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::multimodal::VisionInferenceResponse>* VisionService::Stub::AsyncInferRaw(::grpc::ClientContext* context, const ::multimodal::VisionInferenceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VisionService::Stub::GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::multimodal::ModelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::multimodal::Empty, ::multimodal::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAvailableModels_, context, request, response);
}

void VisionService::Stub::async::GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::ModelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::multimodal::Empty, ::multimodal::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAvailableModels_, context, request, response, std::move(f));
}

void VisionService::Stub::async::GetAvailableModels(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAvailableModels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::multimodal::ModelsResponse>* VisionService::Stub::PrepareAsyncGetAvailableModelsRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::multimodal::ModelsResponse, ::multimodal::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAvailableModels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::multimodal::ModelsResponse>* VisionService::Stub::AsyncGetAvailableModelsRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAvailableModelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VisionService::Stub::GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::multimodal::HealthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::multimodal::Empty, ::multimodal::HealthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetHealth_, context, request, response);
}

void VisionService::Stub::async::GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::multimodal::Empty, ::multimodal::HealthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHealth_, context, request, response, std::move(f));
}

void VisionService::Stub::async::GetHealth(::grpc::ClientContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>* VisionService::Stub::PrepareAsyncGetHealthRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::multimodal::HealthResponse, ::multimodal::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::multimodal::HealthResponse>* VisionService::Stub::AsyncGetHealthRaw(::grpc::ClientContext* context, const ::multimodal::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VisionService::Stub::GetModelMetrics(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest& request, ::multimodal::ModelMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::multimodal::ModelMetricsRequest, ::multimodal::ModelMetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModelMetrics_, context, request, response);
}

void VisionService::Stub::async::GetModelMetrics(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest* request, ::multimodal::ModelMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::multimodal::ModelMetricsRequest, ::multimodal::ModelMetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelMetrics_, context, request, response, std::move(f));
}

void VisionService::Stub::async::GetModelMetrics(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest* request, ::multimodal::ModelMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::multimodal::ModelMetricsResponse>* VisionService::Stub::PrepareAsyncGetModelMetricsRaw(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::multimodal::ModelMetricsResponse, ::multimodal::ModelMetricsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModelMetrics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::multimodal::ModelMetricsResponse>* VisionService::Stub::AsyncGetModelMetricsRaw(::grpc::ClientContext* context, const ::multimodal::ModelMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModelMetricsRaw(context, request, cq);
  result->StartCall();
  return result;
}

VisionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VisionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VisionService::Service, ::multimodal::VisionInferenceRequest, ::multimodal::VisionInferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VisionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::multimodal::VisionInferenceRequest* req,
             ::multimodal::VisionInferenceResponse* resp) {
               return service->Infer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VisionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VisionService::Service, ::multimodal::Empty, ::multimodal::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VisionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::multimodal::Empty* req,
             ::multimodal::ModelsResponse* resp) {
               return service->GetAvailableModels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VisionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VisionService::Service, ::multimodal::Empty, ::multimodal::HealthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VisionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::multimodal::Empty* req,
             ::multimodal::HealthResponse* resp) {
               return service->GetHealth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VisionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VisionService::Service, ::multimodal::ModelMetricsRequest, ::multimodal::ModelMetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VisionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::multimodal::ModelMetricsRequest* req,
             ::multimodal::ModelMetricsResponse* resp) {
               return service->GetModelMetrics(ctx, req, resp);
             }, this)));
}

VisionService::Service::~Service() {
}

::grpc::Status VisionService::Service::Infer(::grpc::ServerContext* context, const ::multimodal::VisionInferenceRequest* request, ::multimodal::VisionInferenceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VisionService::Service::GetAvailableModels(::grpc::ServerContext* context, const ::multimodal::Empty* request, ::multimodal::ModelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VisionService::Service::GetHealth(::grpc::ServerContext* context, const ::multimodal::Empty* request, ::multimodal::HealthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VisionService::Service::GetModelMetrics(::grpc::ServerContext* context, const ::multimodal::ModelMetricsRequest* request, ::multimodal::ModelMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace multimodal

