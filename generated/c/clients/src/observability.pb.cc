// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: observability.proto

#include "observability.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace unhinged {
namespace observability {
namespace v1 {
PROTOBUF_CONSTEXPR TraceContext::TraceContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trace_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.span_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_span_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.correlation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_flags_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TraceContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceContextDefaultTypeInternal() {}
  union {
    TraceContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceContextDefaultTypeInternal _TraceContext_default_instance_;
PROTOBUF_CONSTEXPR TraceFlags::TraceFlags(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sampled_)*/false
  , /*decltype(_impl_.random_trace_id_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TraceFlagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceFlagsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceFlagsDefaultTypeInternal() {}
  union {
    TraceFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceFlagsDefaultTypeInternal _TraceFlags_default_instance_;
PROTOBUF_CONSTEXPR Resource_AttributesEntry_DoNotUse::Resource_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Resource_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Resource_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Resource_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Resource_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Resource_AttributesEntry_DoNotUseDefaultTypeInternal _Resource_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Resource::Resource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_instance_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deployment_environment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.k8s_cluster_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.k8s_namespace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.k8s_pod_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_arch_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceDefaultTypeInternal() {}
  union {
    Resource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceDefaultTypeInternal _Resource_default_instance_;
PROTOBUF_CONSTEXPR LogEvent::LogEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.trace_context_)*/nullptr
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.destinations_)*/nullptr
  , /*decltype(_impl_.partition_info_)*/nullptr
  , /*decltype(_impl_.sequence_number_)*/int64_t{0}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogEventDefaultTypeInternal() {}
  union {
    LogEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogEventDefaultTypeInternal _LogEvent_default_instance_;
PROTOBUF_CONSTEXPR ErrorInfo_ErrorAttributesEntry_DoNotUse::ErrorInfo_ErrorAttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ErrorInfo_ErrorAttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorInfo_ErrorAttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorInfo_ErrorAttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ErrorInfo_ErrorAttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorInfo_ErrorAttributesEntry_DoNotUseDefaultTypeInternal _ErrorInfo_ErrorAttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ErrorInfo::ErrorInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.error_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stack_trace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ErrorInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorInfoDefaultTypeInternal() {}
  union {
    ErrorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorInfoDefaultTypeInternal _ErrorInfo_default_instance_;
PROTOBUF_CONSTEXPR DestinationFlags::DestinationFlags(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_lake_options_)*/nullptr
  , /*decltype(_impl_.console_)*/false
  , /*decltype(_impl_.cdc_stream_)*/false
  , /*decltype(_impl_.data_lake_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DestinationFlagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestinationFlagsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestinationFlagsDefaultTypeInternal() {}
  union {
    DestinationFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestinationFlagsDefaultTypeInternal _DestinationFlags_default_instance_;
PROTOBUF_CONSTEXPR DataLakeOptions::DataLakeOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_strategy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_size_)*/0
  , /*decltype(_impl_.flush_interval_seconds_)*/0
  , /*decltype(_impl_.compression_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataLakeOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataLakeOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataLakeOptionsDefaultTypeInternal() {}
  union {
    DataLakeOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataLakeOptionsDefaultTypeInternal _DataLakeOptions_default_instance_;
PROTOBUF_CONSTEXPR PartitionInfo_CustomPartitionsEntry_DoNotUse::PartitionInfo_CustomPartitionsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PartitionInfo_CustomPartitionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionInfo_CustomPartitionsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionInfo_CustomPartitionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PartitionInfo_CustomPartitionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionInfo_CustomPartitionsEntry_DoNotUseDefaultTypeInternal _PartitionInfo_CustomPartitionsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PartitionInfo::PartitionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.custom_partitions_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.date_partition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hour_partition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_partition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level_partition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartitionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionInfoDefaultTypeInternal() {}
  union {
    PartitionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionInfoDefaultTypeInternal _PartitionInfo_default_instance_;
PROTOBUF_CONSTEXPR TraceEvent::TraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.trace_context_)*/nullptr
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_.span_)*/nullptr
  , /*decltype(_impl_.destinations_)*/nullptr
  , /*decltype(_impl_.partition_info_)*/nullptr
  , /*decltype(_impl_.sequence_number_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceEventDefaultTypeInternal() {}
  union {
    TraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceEventDefaultTypeInternal _TraceEvent_default_instance_;
PROTOBUF_CONSTEXPR SpanData_AttributesEntry_DoNotUse::SpanData_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SpanData_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanData_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanData_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SpanData_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanData_AttributesEntry_DoNotUseDefaultTypeInternal _SpanData_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SpanData::SpanData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.links_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.instrumentation_library_)*/nullptr
  , /*decltype(_impl_.duration_nanos_)*/int64_t{0}
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpanDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanDataDefaultTypeInternal() {}
  union {
    SpanData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanDataDefaultTypeInternal _SpanData_default_instance_;
PROTOBUF_CONSTEXPR SpanStatus::SpanStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpanStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanStatusDefaultTypeInternal() {}
  union {
    SpanStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanStatusDefaultTypeInternal _SpanStatus_default_instance_;
PROTOBUF_CONSTEXPR SpanEvent_AttributesEntry_DoNotUse::SpanEvent_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SpanEvent_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanEvent_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanEvent_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SpanEvent_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanEvent_AttributesEntry_DoNotUseDefaultTypeInternal _SpanEvent_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SpanEvent::SpanEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpanEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanEventDefaultTypeInternal() {}
  union {
    SpanEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanEventDefaultTypeInternal _SpanEvent_default_instance_;
PROTOBUF_CONSTEXPR SpanLink_AttributesEntry_DoNotUse::SpanLink_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SpanLink_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanLink_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanLink_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SpanLink_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanLink_AttributesEntry_DoNotUseDefaultTypeInternal _SpanLink_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SpanLink::SpanLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.trace_context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpanLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanLinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanLinkDefaultTypeInternal() {}
  union {
    SpanLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanLinkDefaultTypeInternal _SpanLink_default_instance_;
PROTOBUF_CONSTEXPR InstrumentationLibrary::InstrumentationLibrary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstrumentationLibraryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentationLibraryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentationLibraryDefaultTypeInternal() {}
  union {
    InstrumentationLibrary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentationLibraryDefaultTypeInternal _InstrumentationLibrary_default_instance_;
PROTOBUF_CONSTEXPR AttributeValue::AttributeValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AttributeValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeValueDefaultTypeInternal() {}
  union {
    AttributeValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeValueDefaultTypeInternal _AttributeValue_default_instance_;
PROTOBUF_CONSTEXPR AttributeArray::AttributeArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttributeArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeArrayDefaultTypeInternal() {}
  union {
    AttributeArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeArrayDefaultTypeInternal _AttributeArray_default_instance_;
PROTOBUF_CONSTEXPR AttributeKeyValueList::AttributeKeyValueList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttributeKeyValueListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeKeyValueListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeKeyValueListDefaultTypeInternal() {}
  union {
    AttributeKeyValueList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeKeyValueListDefaultTypeInternal _AttributeKeyValueList_default_instance_;
PROTOBUF_CONSTEXPR AttributeKeyValue::AttributeKeyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttributeKeyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeKeyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeKeyValueDefaultTypeInternal() {}
  union {
    AttributeKeyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeKeyValueDefaultTypeInternal _AttributeKeyValue_default_instance_;
PROTOBUF_CONSTEXPR MetricEvent::MetricEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.trace_context_)*/nullptr
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_.metric_)*/nullptr
  , /*decltype(_impl_.destinations_)*/nullptr
  , /*decltype(_impl_.partition_info_)*/nullptr
  , /*decltype(_impl_.sequence_number_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricEventDefaultTypeInternal() {}
  union {
    MetricEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricEventDefaultTypeInternal _MetricEvent_default_instance_;
PROTOBUF_CONSTEXPR MetricData::MetricData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unit_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrumentation_library_)*/nullptr
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MetricDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricDataDefaultTypeInternal() {}
  union {
    MetricData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricDataDefaultTypeInternal _MetricData_default_instance_;
PROTOBUF_CONSTEXPR GaugeData::GaugeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GaugeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GaugeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GaugeDataDefaultTypeInternal() {}
  union {
    GaugeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GaugeDataDefaultTypeInternal _GaugeData_default_instance_;
PROTOBUF_CONSTEXPR CounterData::CounterData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_points_)*/{}
  , /*decltype(_impl_.is_monotonic_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CounterDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CounterDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CounterDataDefaultTypeInternal() {}
  union {
    CounterData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CounterDataDefaultTypeInternal _CounterData_default_instance_;
PROTOBUF_CONSTEXPR HistogramData::HistogramData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_points_)*/{}
  , /*decltype(_impl_.aggregation_temporality_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HistogramDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistogramDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistogramDataDefaultTypeInternal() {}
  union {
    HistogramData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistogramDataDefaultTypeInternal _HistogramData_default_instance_;
PROTOBUF_CONSTEXPR SummaryData::SummaryData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SummaryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryDataDefaultTypeInternal() {}
  union {
    SummaryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryDataDefaultTypeInternal _SummaryData_default_instance_;
PROTOBUF_CONSTEXPR NumberDataPoint_AttributesEntry_DoNotUse::NumberDataPoint_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct NumberDataPoint_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberDataPoint_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberDataPoint_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NumberDataPoint_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberDataPoint_AttributesEntry_DoNotUseDefaultTypeInternal _NumberDataPoint_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR NumberDataPoint::NumberDataPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.exemplars_)*/{}
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct NumberDataPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberDataPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberDataPointDefaultTypeInternal() {}
  union {
    NumberDataPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberDataPointDefaultTypeInternal _NumberDataPoint_default_instance_;
PROTOBUF_CONSTEXPR HistogramDataPoint_AttributesEntry_DoNotUse::HistogramDataPoint_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HistogramDataPoint_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistogramDataPoint_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistogramDataPoint_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HistogramDataPoint_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistogramDataPoint_AttributesEntry_DoNotUseDefaultTypeInternal _HistogramDataPoint_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HistogramDataPoint::HistogramDataPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.explicit_bounds_)*/{}
  , /*decltype(_impl_.bucket_counts_)*/{}
  , /*decltype(_impl_._bucket_counts_cached_byte_size_)*/{0}
  , /*decltype(_impl_.exemplars_)*/{}
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.count_)*/uint64_t{0u}
  , /*decltype(_impl_.sum_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HistogramDataPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistogramDataPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistogramDataPointDefaultTypeInternal() {}
  union {
    HistogramDataPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistogramDataPointDefaultTypeInternal _HistogramDataPoint_default_instance_;
PROTOBUF_CONSTEXPR SummaryDataPoint_AttributesEntry_DoNotUse::SummaryDataPoint_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SummaryDataPoint_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryDataPoint_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryDataPoint_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SummaryDataPoint_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryDataPoint_AttributesEntry_DoNotUseDefaultTypeInternal _SummaryDataPoint_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SummaryDataPoint::SummaryDataPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.quantile_values_)*/{}
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.count_)*/uint64_t{0u}
  , /*decltype(_impl_.sum_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SummaryDataPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryDataPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryDataPointDefaultTypeInternal() {}
  union {
    SummaryDataPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryDataPointDefaultTypeInternal _SummaryDataPoint_default_instance_;
PROTOBUF_CONSTEXPR QuantileValue::QuantileValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quantile_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuantileValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuantileValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuantileValueDefaultTypeInternal() {}
  union {
    QuantileValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuantileValueDefaultTypeInternal _QuantileValue_default_instance_;
PROTOBUF_CONSTEXPR Exemplar_FilteredAttributesEntry_DoNotUse::Exemplar_FilteredAttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Exemplar_FilteredAttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Exemplar_FilteredAttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Exemplar_FilteredAttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Exemplar_FilteredAttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Exemplar_FilteredAttributesEntry_DoNotUseDefaultTypeInternal _Exemplar_FilteredAttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Exemplar::Exemplar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filtered_attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.span_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ExemplarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExemplarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExemplarDefaultTypeInternal() {}
  union {
    Exemplar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExemplarDefaultTypeInternal _Exemplar_default_instance_;
PROTOBUF_CONSTEXPR ServiceHealthEvent::ServiceHealthEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_.health_)*/nullptr
  , /*decltype(_impl_.destinations_)*/nullptr
  , /*decltype(_impl_.partition_info_)*/nullptr
  , /*decltype(_impl_.sequence_number_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceHealthEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceHealthEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceHealthEventDefaultTypeInternal() {}
  union {
    ServiceHealthEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceHealthEventDefaultTypeInternal _ServiceHealthEvent_default_instance_;
PROTOBUF_CONSTEXPR ServiceHealth::ServiceHealth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.health_checks_)*/{}
  , /*decltype(_impl_.dependencies_)*/{}
  , /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.slis_)*/nullptr
  , /*decltype(_impl_.system_metrics_)*/nullptr
  , /*decltype(_impl_.uptime_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceHealthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceHealthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceHealthDefaultTypeInternal() {}
  union {
    ServiceHealth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceHealthDefaultTypeInternal _ServiceHealth_default_instance_;
PROTOBUF_CONSTEXPR HealthCheck_MetadataEntry_DoNotUse::HealthCheck_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HealthCheck_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheck_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheck_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HealthCheck_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheck_MetadataEntry_DoNotUseDefaultTypeInternal _HealthCheck_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HealthCheck::HealthCheck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_check_)*/nullptr
  , /*decltype(_impl_.response_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthCheckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckDefaultTypeInternal() {}
  union {
    HealthCheck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckDefaultTypeInternal _HealthCheck_default_instance_;
PROTOBUF_CONSTEXPR DependencyHealth::DependencyHealth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_check_)*/nullptr
  , /*decltype(_impl_.response_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DependencyHealthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DependencyHealthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DependencyHealthDefaultTypeInternal() {}
  union {
    DependencyHealth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DependencyHealthDefaultTypeInternal _DependencyHealth_default_instance_;
PROTOBUF_CONSTEXPR ServiceLevelIndicators::ServiceLevelIndicators(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.window_start_)*/nullptr
  , /*decltype(_impl_.window_end_)*/nullptr
  , /*decltype(_impl_.availability_percent_)*/0
  , /*decltype(_impl_.error_rate_percent_)*/0
  , /*decltype(_impl_.latency_p50_ms_)*/0
  , /*decltype(_impl_.latency_p95_ms_)*/0
  , /*decltype(_impl_.latency_p99_ms_)*/0
  , /*decltype(_impl_.throughput_rps_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceLevelIndicatorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceLevelIndicatorsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceLevelIndicatorsDefaultTypeInternal() {}
  union {
    ServiceLevelIndicators _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceLevelIndicatorsDefaultTypeInternal _ServiceLevelIndicators_default_instance_;
PROTOBUF_CONSTEXPR SystemMetrics::SystemMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cpu_usage_percent_)*/0
  , /*decltype(_impl_.cpu_load_1m_)*/0
  , /*decltype(_impl_.cpu_load_5m_)*/0
  , /*decltype(_impl_.cpu_load_15m_)*/0
  , /*decltype(_impl_.memory_total_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.memory_used_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.memory_available_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.memory_usage_percent_)*/0
  , /*decltype(_impl_.disk_total_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.disk_used_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.disk_available_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.disk_usage_percent_)*/0
  , /*decltype(_impl_.network_bytes_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.network_bytes_received_)*/uint64_t{0u}
  , /*decltype(_impl_.network_packets_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.network_packets_received_)*/uint64_t{0u}
  , /*decltype(_impl_.process_count_)*/0u
  , /*decltype(_impl_.thread_count_)*/0u
  , /*decltype(_impl_.file_descriptor_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemMetricsDefaultTypeInternal() {}
  union {
    SystemMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemMetricsDefaultTypeInternal _SystemMetrics_default_instance_;
PROTOBUF_CONSTEXPR UptimeInfo::UptimeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.last_restart_)*/nullptr
  , /*decltype(_impl_.uptime_seconds_)*/int64_t{0}
  , /*decltype(_impl_.restart_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UptimeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UptimeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UptimeInfoDefaultTypeInternal() {}
  union {
    UptimeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UptimeInfoDefaultTypeInternal _UptimeInfo_default_instance_;
PROTOBUF_CONSTEXPR IncidentEvent::IncidentEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.incident_)*/nullptr
  , /*decltype(_impl_.destinations_)*/nullptr
  , /*decltype(_impl_.partition_info_)*/nullptr
  , /*decltype(_impl_.sequence_number_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncidentEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidentEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidentEventDefaultTypeInternal() {}
  union {
    IncidentEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidentEventDefaultTypeInternal _IncidentEvent_default_instance_;
PROTOBUF_CONSTEXPR IncidentData::IncidentData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.affected_services_)*/{}
  , /*decltype(_impl_.affected_components_)*/{}
  , /*decltype(_impl_.updates_)*/{}
  , /*decltype(_impl_.incident_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.resolved_at_)*/nullptr
  , /*decltype(_impl_.impact_)*/nullptr
  , /*decltype(_impl_.resolution_)*/nullptr
  , /*decltype(_impl_.severity_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncidentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidentDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidentDataDefaultTypeInternal() {}
  union {
    IncidentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidentDataDefaultTypeInternal _IncidentData_default_instance_;
PROTOBUF_CONSTEXPR IncidentUpdate::IncidentUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.update_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncidentUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidentUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidentUpdateDefaultTypeInternal() {}
  union {
    IncidentUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidentUpdateDefaultTypeInternal _IncidentUpdate_default_instance_;
PROTOBUF_CONSTEXPR IncidentImpact::IncidentImpact(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.affected_regions_)*/{}
  , /*decltype(_impl_.business_impact_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.availability_impact_)*/0
  , /*decltype(_impl_.performance_impact_)*/0
  , /*decltype(_impl_.affected_users_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncidentImpactDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidentImpactDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidentImpactDefaultTypeInternal() {}
  union {
    IncidentImpact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidentImpactDefaultTypeInternal _IncidentImpact_default_instance_;
PROTOBUF_CONSTEXPR IncidentResolution::IncidentResolution(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lessons_learned_)*/{}
  , /*decltype(_impl_.root_cause_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resolution_steps_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prevention_measures_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.postmortem_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncidentResolutionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidentResolutionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidentResolutionDefaultTypeInternal() {}
  union {
    IncidentResolution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidentResolutionDefaultTypeInternal _IncidentResolution_default_instance_;
PROTOBUF_CONSTEXPR IngestResponse::IngestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.processed_count_)*/0u
  , /*decltype(_impl_.failed_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IngestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IngestResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IngestResponseDefaultTypeInternal() {}
  union {
    IngestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IngestResponseDefaultTypeInternal _IngestResponse_default_instance_;
PROTOBUF_CONSTEXPR HealthResponse::HealthResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.next_check_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthResponseDefaultTypeInternal() {}
  union {
    HealthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthResponseDefaultTypeInternal _HealthResponse_default_instance_;
PROTOBUF_CONSTEXPR IncidentResponse::IncidentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.incident_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncidentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidentResponseDefaultTypeInternal() {}
  union {
    IncidentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidentResponseDefaultTypeInternal _IncidentResponse_default_instance_;
PROTOBUF_CONSTEXPR HealthQuery::HealthQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_names_)*/{}
  , /*decltype(_impl_.since_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthQueryDefaultTypeInternal() {}
  union {
    HealthQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthQueryDefaultTypeInternal _HealthQuery_default_instance_;
PROTOBUF_CONSTEXPR HealthQueryResponse::HealthQueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.services_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthQueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthQueryResponseDefaultTypeInternal() {}
  union {
    HealthQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthQueryResponseDefaultTypeInternal _HealthQueryResponse_default_instance_;
PROTOBUF_CONSTEXPR IncidentQuery::IncidentQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statuses_)*/{}
  , /*decltype(_impl_._statuses_cached_byte_size_)*/{0}
  , /*decltype(_impl_.severities_)*/{}
  , /*decltype(_impl_._severities_cached_byte_size_)*/{0}
  , /*decltype(_impl_.since_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncidentQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidentQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidentQueryDefaultTypeInternal() {}
  union {
    IncidentQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidentQueryDefaultTypeInternal _IncidentQuery_default_instance_;
PROTOBUF_CONSTEXPR IncidentQueryResponse::IncidentQueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.incidents_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncidentQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidentQueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidentQueryResponseDefaultTypeInternal() {}
  union {
    IncidentQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidentQueryResponseDefaultTypeInternal _IncidentQueryResponse_default_instance_;
PROTOBUF_CONSTEXPR MetricQuery_LabelsEntry_DoNotUse::MetricQuery_LabelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MetricQuery_LabelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricQuery_LabelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricQuery_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MetricQuery_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricQuery_LabelsEntry_DoNotUseDefaultTypeInternal _MetricQuery_LabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MetricQuery::MetricQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.labels_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.metric_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricQueryDefaultTypeInternal() {}
  union {
    MetricQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricQueryDefaultTypeInternal _MetricQuery_default_instance_;
PROTOBUF_CONSTEXPR MetricQueryResponse::MetricQueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metrics_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricQueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricQueryResponseDefaultTypeInternal() {}
  union {
    MetricQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricQueryResponseDefaultTypeInternal _MetricQueryResponse_default_instance_;
PROTOBUF_CONSTEXPR TraceQuery::TraceQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trace_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TraceQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceQueryDefaultTypeInternal() {}
  union {
    TraceQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceQueryDefaultTypeInternal _TraceQuery_default_instance_;
PROTOBUF_CONSTEXPR TraceQueryResponse::TraceQueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.traces_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TraceQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceQueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceQueryResponseDefaultTypeInternal() {}
  union {
    TraceQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceQueryResponseDefaultTypeInternal _TraceQueryResponse_default_instance_;
}  // namespace v1
}  // namespace observability
}  // namespace unhinged
static ::_pb::Metadata file_level_metadata_observability_2eproto[64];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_observability_2eproto[9];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_observability_2eproto = nullptr;

const uint32_t TableStruct_observability_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.span_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.parent_span_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.trace_flags_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.trace_state_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.correlation_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceFlags, _impl_.sampled_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceFlags, _impl_.random_trace_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.service_version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.service_instance_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.deployment_environment_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.k8s_cluster_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.k8s_namespace_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.k8s_pod_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.host_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.host_arch_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.trace_context_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.resource_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.destinations_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.partition_info_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo, _impl_.error_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo, _impl_.stack_trace_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo, _impl_.error_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DestinationFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DestinationFlags, _impl_.console_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DestinationFlags, _impl_.cdc_stream_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DestinationFlags, _impl_.data_lake_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DestinationFlags, _impl_.data_lake_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DataLakeOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DataLakeOptions, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DataLakeOptions, _impl_.partition_strategy_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DataLakeOptions, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DataLakeOptions, _impl_.flush_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DataLakeOptions, _impl_.compression_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo, _impl_.date_partition_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo, _impl_.hour_partition_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo, _impl_.service_partition_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo, _impl_.level_partition_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo, _impl_.custom_partitions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceEvent, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceEvent, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceEvent, _impl_.trace_context_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceEvent, _impl_.resource_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceEvent, _impl_.span_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceEvent, _impl_.destinations_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceEvent, _impl_.partition_info_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData, _impl_.duration_nanos_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData, _impl_.links_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanData, _impl_.instrumentation_library_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanStatus, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanStatus, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanEvent_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanEvent_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanEvent_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanEvent_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanEvent, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanEvent, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanEvent, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanLink_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanLink_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanLink_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanLink_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanLink, _impl_.trace_context_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SpanLink, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::InstrumentationLibrary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::InstrumentationLibrary, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::InstrumentationLibrary, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::InstrumentationLibrary, _impl_.schema_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::AttributeValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::AttributeValue, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::AttributeValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::AttributeArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::AttributeArray, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::AttributeKeyValueList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::AttributeKeyValueList, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::AttributeKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::AttributeKeyValue, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::AttributeKeyValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricEvent, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricEvent, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricEvent, _impl_.trace_context_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricEvent, _impl_.resource_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricEvent, _impl_.metric_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricEvent, _impl_.destinations_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricEvent, _impl_.partition_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricData, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricData, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricData, _impl_.unit_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricData, _impl_.instrumentation_library_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricData, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::GaugeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::GaugeData, _impl_.data_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::CounterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::CounterData, _impl_.data_points_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::CounterData, _impl_.is_monotonic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramData, _impl_.data_points_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramData, _impl_.aggregation_temporality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SummaryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SummaryData, _impl_.data_points_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::NumberDataPoint_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::NumberDataPoint_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::NumberDataPoint_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::NumberDataPoint_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::NumberDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::NumberDataPoint, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::NumberDataPoint, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::NumberDataPoint, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::NumberDataPoint, _impl_.time_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::NumberDataPoint, _impl_.exemplars_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::NumberDataPoint, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramDataPoint_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramDataPoint_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramDataPoint_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramDataPoint_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramDataPoint, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramDataPoint, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramDataPoint, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramDataPoint, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramDataPoint, _impl_.sum_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramDataPoint, _impl_.explicit_bounds_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramDataPoint, _impl_.bucket_counts_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HistogramDataPoint, _impl_.exemplars_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SummaryDataPoint_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SummaryDataPoint_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SummaryDataPoint_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SummaryDataPoint_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SummaryDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SummaryDataPoint, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SummaryDataPoint, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SummaryDataPoint, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SummaryDataPoint, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SummaryDataPoint, _impl_.sum_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SummaryDataPoint, _impl_.quantile_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::QuantileValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::QuantileValue, _impl_.quantile_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::QuantileValue, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Exemplar_FilteredAttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Exemplar_FilteredAttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Exemplar_FilteredAttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Exemplar_FilteredAttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Exemplar, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Exemplar, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Exemplar, _impl_.filtered_attributes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Exemplar, _impl_.timestamp_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Exemplar, _impl_.span_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Exemplar, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Exemplar, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealthEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealthEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealthEvent, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealthEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealthEvent, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealthEvent, _impl_.resource_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealthEvent, _impl_.health_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealthEvent, _impl_.destinations_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealthEvent, _impl_.partition_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealth, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealth, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealth, _impl_.status_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealth, _impl_.health_checks_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealth, _impl_.dependencies_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealth, _impl_.slis_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealth, _impl_.system_metrics_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceHealth, _impl_.uptime_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthCheck_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthCheck_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthCheck_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthCheck_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthCheck, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthCheck, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthCheck, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthCheck, _impl_.last_check_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthCheck, _impl_.response_time_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthCheck, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DependencyHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DependencyHealth, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DependencyHealth, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DependencyHealth, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DependencyHealth, _impl_.endpoint_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DependencyHealth, _impl_.response_time_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DependencyHealth, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DependencyHealth, _impl_.last_check_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceLevelIndicators, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceLevelIndicators, _impl_.availability_percent_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceLevelIndicators, _impl_.error_rate_percent_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceLevelIndicators, _impl_.latency_p50_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceLevelIndicators, _impl_.latency_p95_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceLevelIndicators, _impl_.latency_p99_ms_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceLevelIndicators, _impl_.throughput_rps_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceLevelIndicators, _impl_.window_start_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ServiceLevelIndicators, _impl_.window_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.cpu_usage_percent_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.cpu_load_1m_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.cpu_load_5m_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.cpu_load_15m_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.memory_total_bytes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.memory_used_bytes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.memory_available_bytes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.memory_usage_percent_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.disk_total_bytes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.disk_used_bytes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.disk_available_bytes_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.disk_usage_percent_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.network_bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.network_bytes_received_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.network_packets_sent_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.network_packets_received_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.process_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.thread_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::SystemMetrics, _impl_.file_descriptor_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::UptimeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::UptimeInfo, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::UptimeInfo, _impl_.uptime_seconds_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::UptimeInfo, _impl_.restart_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::UptimeInfo, _impl_.last_restart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentEvent, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentEvent, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentEvent, _impl_.incident_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentEvent, _impl_.destinations_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentEvent, _impl_.partition_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _impl_.incident_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _impl_.severity_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _impl_.resolved_at_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _impl_.affected_services_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _impl_.affected_components_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _impl_.updates_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _impl_.impact_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentData, _impl_.resolution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentUpdate, _impl_.update_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentUpdate, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentUpdate, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentUpdate, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentUpdate, _impl_.author_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentUpdate, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentImpact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentImpact, _impl_.availability_impact_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentImpact, _impl_.performance_impact_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentImpact, _impl_.affected_users_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentImpact, _impl_.affected_regions_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentImpact, _impl_.business_impact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentResolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentResolution, _impl_.root_cause_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentResolution, _impl_.resolution_steps_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentResolution, _impl_.prevention_measures_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentResolution, _impl_.lessons_learned_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentResolution, _impl_.postmortem_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IngestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IngestResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IngestResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IngestResponse, _impl_.processed_count_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IngestResponse, _impl_.failed_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthResponse, _impl_.next_check_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentResponse, _impl_.incident_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthQuery, _impl_.service_names_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthQuery, _impl_.since_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::HealthQueryResponse, _impl_.services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentQuery, _impl_.statuses_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentQuery, _impl_.severities_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentQuery, _impl_.since_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::IncidentQueryResponse, _impl_.incidents_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricQuery_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricQuery_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricQuery_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricQuery_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricQuery, _impl_.metric_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricQuery, _impl_.labels_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricQuery, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricQuery, _impl_.end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::MetricQueryResponse, _impl_.metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceQuery, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceQuery, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceQuery, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceQuery, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceQuery, _impl_.limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceQueryResponse, _impl_.traces_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::unhinged::observability::v1::TraceContext)},
  { 15, -1, -1, sizeof(::unhinged::observability::v1::TraceFlags)},
  { 23, 31, -1, sizeof(::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse)},
  { 33, -1, -1, sizeof(::unhinged::observability::v1::Resource)},
  { 49, -1, -1, sizeof(::unhinged::observability::v1::LogEvent)},
  { 67, 75, -1, sizeof(::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse)},
  { 77, -1, -1, sizeof(::unhinged::observability::v1::ErrorInfo)},
  { 88, -1, -1, sizeof(::unhinged::observability::v1::DestinationFlags)},
  { 98, -1, -1, sizeof(::unhinged::observability::v1::DataLakeOptions)},
  { 109, 117, -1, sizeof(::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse)},
  { 119, -1, -1, sizeof(::unhinged::observability::v1::PartitionInfo)},
  { 130, -1, -1, sizeof(::unhinged::observability::v1::TraceEvent)},
  { 145, 153, -1, sizeof(::unhinged::observability::v1::SpanData_AttributesEntry_DoNotUse)},
  { 155, -1, -1, sizeof(::unhinged::observability::v1::SpanData)},
  { 171, -1, -1, sizeof(::unhinged::observability::v1::SpanStatus)},
  { 179, 187, -1, sizeof(::unhinged::observability::v1::SpanEvent_AttributesEntry_DoNotUse)},
  { 189, -1, -1, sizeof(::unhinged::observability::v1::SpanEvent)},
  { 198, 206, -1, sizeof(::unhinged::observability::v1::SpanLink_AttributesEntry_DoNotUse)},
  { 208, -1, -1, sizeof(::unhinged::observability::v1::SpanLink)},
  { 216, -1, -1, sizeof(::unhinged::observability::v1::InstrumentationLibrary)},
  { 225, -1, -1, sizeof(::unhinged::observability::v1::AttributeValue)},
  { 239, -1, -1, sizeof(::unhinged::observability::v1::AttributeArray)},
  { 246, -1, -1, sizeof(::unhinged::observability::v1::AttributeKeyValueList)},
  { 253, -1, -1, sizeof(::unhinged::observability::v1::AttributeKeyValue)},
  { 261, -1, -1, sizeof(::unhinged::observability::v1::MetricEvent)},
  { 276, -1, -1, sizeof(::unhinged::observability::v1::MetricData)},
  { 291, -1, -1, sizeof(::unhinged::observability::v1::GaugeData)},
  { 298, -1, -1, sizeof(::unhinged::observability::v1::CounterData)},
  { 306, -1, -1, sizeof(::unhinged::observability::v1::HistogramData)},
  { 314, -1, -1, sizeof(::unhinged::observability::v1::SummaryData)},
  { 321, 329, -1, sizeof(::unhinged::observability::v1::NumberDataPoint_AttributesEntry_DoNotUse)},
  { 331, -1, -1, sizeof(::unhinged::observability::v1::NumberDataPoint)},
  { 344, 352, -1, sizeof(::unhinged::observability::v1::HistogramDataPoint_AttributesEntry_DoNotUse)},
  { 354, -1, -1, sizeof(::unhinged::observability::v1::HistogramDataPoint)},
  { 368, 376, -1, sizeof(::unhinged::observability::v1::SummaryDataPoint_AttributesEntry_DoNotUse)},
  { 378, -1, -1, sizeof(::unhinged::observability::v1::SummaryDataPoint)},
  { 390, -1, -1, sizeof(::unhinged::observability::v1::QuantileValue)},
  { 398, 406, -1, sizeof(::unhinged::observability::v1::Exemplar_FilteredAttributesEntry_DoNotUse)},
  { 408, -1, -1, sizeof(::unhinged::observability::v1::Exemplar)},
  { 421, -1, -1, sizeof(::unhinged::observability::v1::ServiceHealthEvent)},
  { 435, -1, -1, sizeof(::unhinged::observability::v1::ServiceHealth)},
  { 449, 457, -1, sizeof(::unhinged::observability::v1::HealthCheck_MetadataEntry_DoNotUse)},
  { 459, -1, -1, sizeof(::unhinged::observability::v1::HealthCheck)},
  { 471, -1, -1, sizeof(::unhinged::observability::v1::DependencyHealth)},
  { 484, -1, -1, sizeof(::unhinged::observability::v1::ServiceLevelIndicators)},
  { 498, -1, -1, sizeof(::unhinged::observability::v1::SystemMetrics)},
  { 523, -1, -1, sizeof(::unhinged::observability::v1::UptimeInfo)},
  { 533, -1, -1, sizeof(::unhinged::observability::v1::IncidentEvent)},
  { 546, -1, -1, sizeof(::unhinged::observability::v1::IncidentData)},
  { 565, -1, -1, sizeof(::unhinged::observability::v1::IncidentUpdate)},
  { 577, -1, -1, sizeof(::unhinged::observability::v1::IncidentImpact)},
  { 588, -1, -1, sizeof(::unhinged::observability::v1::IncidentResolution)},
  { 599, -1, -1, sizeof(::unhinged::observability::v1::IngestResponse)},
  { 609, -1, -1, sizeof(::unhinged::observability::v1::HealthResponse)},
  { 618, -1, -1, sizeof(::unhinged::observability::v1::IncidentResponse)},
  { 627, -1, -1, sizeof(::unhinged::observability::v1::HealthQuery)},
  { 635, -1, -1, sizeof(::unhinged::observability::v1::HealthQueryResponse)},
  { 642, -1, -1, sizeof(::unhinged::observability::v1::IncidentQuery)},
  { 651, -1, -1, sizeof(::unhinged::observability::v1::IncidentQueryResponse)},
  { 658, 666, -1, sizeof(::unhinged::observability::v1::MetricQuery_LabelsEntry_DoNotUse)},
  { 668, -1, -1, sizeof(::unhinged::observability::v1::MetricQuery)},
  { 678, -1, -1, sizeof(::unhinged::observability::v1::MetricQueryResponse)},
  { 685, -1, -1, sizeof(::unhinged::observability::v1::TraceQuery)},
  { 696, -1, -1, sizeof(::unhinged::observability::v1::TraceQueryResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::unhinged::observability::v1::_TraceContext_default_instance_._instance,
  &::unhinged::observability::v1::_TraceFlags_default_instance_._instance,
  &::unhinged::observability::v1::_Resource_AttributesEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_Resource_default_instance_._instance,
  &::unhinged::observability::v1::_LogEvent_default_instance_._instance,
  &::unhinged::observability::v1::_ErrorInfo_ErrorAttributesEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_ErrorInfo_default_instance_._instance,
  &::unhinged::observability::v1::_DestinationFlags_default_instance_._instance,
  &::unhinged::observability::v1::_DataLakeOptions_default_instance_._instance,
  &::unhinged::observability::v1::_PartitionInfo_CustomPartitionsEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_PartitionInfo_default_instance_._instance,
  &::unhinged::observability::v1::_TraceEvent_default_instance_._instance,
  &::unhinged::observability::v1::_SpanData_AttributesEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_SpanData_default_instance_._instance,
  &::unhinged::observability::v1::_SpanStatus_default_instance_._instance,
  &::unhinged::observability::v1::_SpanEvent_AttributesEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_SpanEvent_default_instance_._instance,
  &::unhinged::observability::v1::_SpanLink_AttributesEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_SpanLink_default_instance_._instance,
  &::unhinged::observability::v1::_InstrumentationLibrary_default_instance_._instance,
  &::unhinged::observability::v1::_AttributeValue_default_instance_._instance,
  &::unhinged::observability::v1::_AttributeArray_default_instance_._instance,
  &::unhinged::observability::v1::_AttributeKeyValueList_default_instance_._instance,
  &::unhinged::observability::v1::_AttributeKeyValue_default_instance_._instance,
  &::unhinged::observability::v1::_MetricEvent_default_instance_._instance,
  &::unhinged::observability::v1::_MetricData_default_instance_._instance,
  &::unhinged::observability::v1::_GaugeData_default_instance_._instance,
  &::unhinged::observability::v1::_CounterData_default_instance_._instance,
  &::unhinged::observability::v1::_HistogramData_default_instance_._instance,
  &::unhinged::observability::v1::_SummaryData_default_instance_._instance,
  &::unhinged::observability::v1::_NumberDataPoint_AttributesEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_NumberDataPoint_default_instance_._instance,
  &::unhinged::observability::v1::_HistogramDataPoint_AttributesEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_HistogramDataPoint_default_instance_._instance,
  &::unhinged::observability::v1::_SummaryDataPoint_AttributesEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_SummaryDataPoint_default_instance_._instance,
  &::unhinged::observability::v1::_QuantileValue_default_instance_._instance,
  &::unhinged::observability::v1::_Exemplar_FilteredAttributesEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_Exemplar_default_instance_._instance,
  &::unhinged::observability::v1::_ServiceHealthEvent_default_instance_._instance,
  &::unhinged::observability::v1::_ServiceHealth_default_instance_._instance,
  &::unhinged::observability::v1::_HealthCheck_MetadataEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_HealthCheck_default_instance_._instance,
  &::unhinged::observability::v1::_DependencyHealth_default_instance_._instance,
  &::unhinged::observability::v1::_ServiceLevelIndicators_default_instance_._instance,
  &::unhinged::observability::v1::_SystemMetrics_default_instance_._instance,
  &::unhinged::observability::v1::_UptimeInfo_default_instance_._instance,
  &::unhinged::observability::v1::_IncidentEvent_default_instance_._instance,
  &::unhinged::observability::v1::_IncidentData_default_instance_._instance,
  &::unhinged::observability::v1::_IncidentUpdate_default_instance_._instance,
  &::unhinged::observability::v1::_IncidentImpact_default_instance_._instance,
  &::unhinged::observability::v1::_IncidentResolution_default_instance_._instance,
  &::unhinged::observability::v1::_IngestResponse_default_instance_._instance,
  &::unhinged::observability::v1::_HealthResponse_default_instance_._instance,
  &::unhinged::observability::v1::_IncidentResponse_default_instance_._instance,
  &::unhinged::observability::v1::_HealthQuery_default_instance_._instance,
  &::unhinged::observability::v1::_HealthQueryResponse_default_instance_._instance,
  &::unhinged::observability::v1::_IncidentQuery_default_instance_._instance,
  &::unhinged::observability::v1::_IncidentQueryResponse_default_instance_._instance,
  &::unhinged::observability::v1::_MetricQuery_LabelsEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_MetricQuery_default_instance_._instance,
  &::unhinged::observability::v1::_MetricQueryResponse_default_instance_._instance,
  &::unhinged::observability::v1::_TraceQuery_default_instance_._instance,
  &::unhinged::observability::v1::_TraceQueryResponse_default_instance_._instance,
};

const char descriptor_table_protodef_observability_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023observability.proto\022\031unhinged.observab"
  "ility.v1\032\037google/protobuf/timestamp.prot"
  "o\032\031google/protobuf/any.proto\032\034google/pro"
  "tobuf/struct.proto\032\014common.proto\"\353\001\n\014Tra"
  "ceContext\022\020\n\010trace_id\030\001 \001(\t\022\017\n\007span_id\030\002"
  " \001(\t\022\026\n\016parent_span_id\030\003 \001(\t\022:\n\013trace_fl"
  "ags\030\004 \001(\0132%.unhinged.observability.v1.Tr"
  "aceFlags\022\023\n\013trace_state\030\005 \001(\t\022\026\n\016correla"
  "tion_id\030\n \001(\t\022\022\n\nrequest_id\030\013 \001(\t\022\022\n\nses"
  "sion_id\030\014 \001(\t\022\017\n\007user_id\030\r \001(\t\"6\n\nTraceF"
  "lags\022\017\n\007sampled\030\001 \001(\010\022\027\n\017random_trace_id"
  "\030\002 \001(\010\"\337\002\n\010Resource\022\024\n\014service_name\030\001 \001("
  "\t\022\027\n\017service_version\030\002 \001(\t\022\033\n\023service_in"
  "stance_id\030\003 \001(\t\022\036\n\026deployment_environmen"
  "t\030\004 \001(\t\022\030\n\020k8s_cluster_name\030\005 \001(\t\022\025\n\rk8s"
  "_namespace\030\006 \001(\t\022\024\n\014k8s_pod_name\030\007 \001(\t\022\021"
  "\n\thost_name\030\010 \001(\t\022\021\n\thost_arch\030\t \001(\t\022G\n\n"
  "attributes\030\024 \003(\01323.unhinged.observabilit"
  "y.v1.Resource.AttributesEntry\0321\n\017Attribu"
  "tesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
  "\"\231\004\n\010LogEvent\022\020\n\010event_id\030\001 \001(\t\022-\n\ttimes"
  "tamp\030\002 \001(\0132\032.google.protobuf.Timestamp\022\022"
  "\n\nevent_type\030\003 \001(\t\022\027\n\017sequence_number\030\004 "
  "\001(\003\022>\n\rtrace_context\030\005 \001(\0132\'.unhinged.ob"
  "servability.v1.TraceContext\0225\n\010resource\030"
  "\006 \001(\0132#.unhinged.observability.v1.Resour"
  "ce\0222\n\005level\030\n \001(\0162#.unhinged.observabili"
  "ty.v1.LogLevel\022\017\n\007message\030\013 \001(\t\022)\n\010metad"
  "ata\030\014 \001(\0132\027.google.protobuf.Struct\0223\n\005er"
  "ror\030\017 \001(\0132$.unhinged.observability.v1.Er"
  "rorInfo\022A\n\014destinations\030\024 \001(\0132+.unhinged"
  ".observability.v1.DestinationFlags\022@\n\016pa"
  "rtition_info\030\031 \001(\0132(.unhinged.observabil"
  "ity.v1.PartitionInfo\"\354\001\n\tErrorInfo\022\022\n\ner"
  "ror_type\030\001 \001(\t\022\025\n\rerror_message\030\002 \001(\t\022\023\n"
  "\013stack_trace\030\003 \001(\t\022\022\n\nerror_code\030\004 \001(\t\022S"
  "\n\020error_attributes\030\005 \003(\01329.unhinged.obse"
  "rvability.v1.ErrorInfo.ErrorAttributesEn"
  "try\0326\n\024ErrorAttributesEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\"\221\001\n\020DestinationFlags"
  "\022\017\n\007console\030\001 \001(\010\022\022\n\ncdc_stream\030\002 \001(\010\022\021\n"
  "\tdata_lake\030\003 \001(\010\022E\n\021data_lake_options\030\n "
  "\001(\0132*.unhinged.observability.v1.DataLake"
  "Options\"\266\001\n\017DataLakeOptions\022\022\n\ntable_nam"
  "e\030\001 \001(\t\022\032\n\022partition_strategy\030\002 \001(\t\022\022\n\nb"
  "atch_size\030\003 \001(\005\022\036\n\026flush_interval_second"
  "s\030\004 \001(\005\022\?\n\013compression\030\005 \001(\0162*.unhinged."
  "observability.v1.CompressionType\"\207\002\n\rPar"
  "titionInfo\022\026\n\016date_partition\030\001 \001(\t\022\026\n\016ho"
  "ur_partition\030\002 \001(\t\022\031\n\021service_partition\030"
  "\003 \001(\t\022\027\n\017level_partition\030\004 \001(\t\022Y\n\021custom"
  "_partitions\030\n \003(\0132>.unhinged.observabili"
  "ty.v1.PartitionInfo.CustomPartitionsEntr"
  "y\0327\n\025CustomPartitionsEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001\"\251\003\n\nTraceEvent\022\020\n\010eve"
  "nt_id\030\001 \001(\t\022-\n\ttimestamp\030\002 \001(\0132\032.google."
  "protobuf.Timestamp\022\022\n\nevent_type\030\003 \001(\t\022\027"
  "\n\017sequence_number\030\004 \001(\003\022>\n\rtrace_context"
  "\030\005 \001(\0132\'.unhinged.observability.v1.Trace"
  "Context\0225\n\010resource\030\006 \001(\0132#.unhinged.obs"
  "ervability.v1.Resource\0221\n\004span\030\n \001(\0132#.u"
  "nhinged.observability.v1.SpanData\022A\n\014des"
  "tinations\030\024 \001(\0132+.unhinged.observability"
  ".v1.DestinationFlags\022@\n\016partition_info\030\031"
  " \001(\0132(.unhinged.observability.v1.Partiti"
  "onInfo\"\335\004\n\010SpanData\022\014\n\004name\030\001 \001(\t\0221\n\004kin"
  "d\030\002 \001(\0162#.unhinged.observability.v1.Span"
  "Kind\022.\n\nstart_time\030\003 \001(\0132\032.google.protob"
  "uf.Timestamp\022,\n\010end_time\030\004 \001(\0132\032.google."
  "protobuf.Timestamp\022\026\n\016duration_nanos\030\005 \001"
  "(\003\0225\n\006status\030\n \001(\0132%.unhinged.observabil"
  "ity.v1.SpanStatus\022G\n\nattributes\030\017 \003(\01323."
  "unhinged.observability.v1.SpanData.Attri"
  "butesEntry\0224\n\006events\030\024 \003(\0132$.unhinged.ob"
  "servability.v1.SpanEvent\0222\n\005links\030\031 \003(\0132"
  "#.unhinged.observability.v1.SpanLink\022R\n\027"
  "instrumentation_library\030\036 \001(\01321.unhinged"
  ".observability.v1.InstrumentationLibrary"
  "\032\\\n\017AttributesEntry\022\013\n\003key\030\001 \001(\t\0228\n\005valu"
  "e\030\002 \001(\0132).unhinged.observability.v1.Attr"
  "ibuteValue:\0028\001\"R\n\nSpanStatus\0223\n\004code\030\001 \001"
  "(\0162%.unhinged.observability.v1.StatusCod"
  "e\022\017\n\007message\030\002 \001(\t\"\360\001\n\tSpanEvent\022-\n\ttime"
  "stamp\030\001 \001(\0132\032.google.protobuf.Timestamp\022"
  "\014\n\004name\030\002 \001(\t\022H\n\nattributes\030\003 \003(\01324.unhi"
  "nged.observability.v1.SpanEvent.Attribut"
  "esEntry\032\\\n\017AttributesEntry\022\013\n\003key\030\001 \001(\t\022"
  "8\n\005value\030\002 \001(\0132).unhinged.observability."
  "v1.AttributeValue:\0028\001\"\361\001\n\010SpanLink\022>\n\rtr"
  "ace_context\030\001 \001(\0132\'.unhinged.observabili"
  "ty.v1.TraceContext\022G\n\nattributes\030\002 \003(\01323"
  ".unhinged.observability.v1.SpanLink.Attr"
  "ibutesEntry\032\\\n\017AttributesEntry\022\013\n\003key\030\001 "
  "\001(\t\0228\n\005value\030\002 \001(\0132).unhinged.observabil"
  "ity.v1.AttributeValue:\0028\001\"K\n\026Instrumenta"
  "tionLibrary\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001"
  "(\t\022\022\n\nschema_url\030\003 \001(\t\"\227\002\n\016AttributeValu"
  "e\022\026\n\014string_value\030\001 \001(\tH\000\022\024\n\nbool_value\030"
  "\002 \001(\010H\000\022\023\n\tint_value\030\003 \001(\003H\000\022\026\n\014double_v"
  "alue\030\004 \001(\001H\000\022\025\n\013bytes_value\030\005 \001(\014H\000\022@\n\013a"
  "rray_value\030\006 \001(\0132).unhinged.observabilit"
  "y.v1.AttributeArrayH\000\022H\n\014kvlist_value\030\007 "
  "\001(\01320.unhinged.observability.v1.Attribut"
  "eKeyValueListH\000B\007\n\005value\"K\n\016AttributeArr"
  "ay\0229\n\006values\030\001 \003(\0132).unhinged.observabil"
  "ity.v1.AttributeValue\"U\n\025AttributeKeyVal"
  "ueList\022<\n\006values\030\001 \003(\0132,.unhinged.observ"
  "ability.v1.AttributeKeyValue\"Z\n\021Attribut"
  "eKeyValue\022\013\n\003key\030\001 \001(\t\0228\n\005value\030\002 \001(\0132)."
  "unhinged.observability.v1.AttributeValue"
  "\"\256\003\n\013MetricEvent\022\020\n\010event_id\030\001 \001(\t\022-\n\tti"
  "mestamp\030\002 \001(\0132\032.google.protobuf.Timestam"
  "p\022\022\n\nevent_type\030\003 \001(\t\022\027\n\017sequence_number"
  "\030\004 \001(\003\022>\n\rtrace_context\030\005 \001(\0132\'.unhinged"
  ".observability.v1.TraceContext\0225\n\010resour"
  "ce\030\006 \001(\0132#.unhinged.observability.v1.Res"
  "ource\0225\n\006metric\030\n \001(\0132%.unhinged.observa"
  "bility.v1.MetricData\022A\n\014destinations\030\024 \001"
  "(\0132+.unhinged.observability.v1.Destinati"
  "onFlags\022@\n\016partition_info\030\031 \001(\0132(.unhing"
  "ed.observability.v1.PartitionInfo\"\205\003\n\nMe"
  "tricData\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 "
  "\001(\t\022\014\n\004unit\030\003 \001(\t\0225\n\005gauge\030\n \001(\0132$.unhin"
  "ged.observability.v1.GaugeDataH\000\0229\n\007coun"
  "ter\030\013 \001(\0132&.unhinged.observability.v1.Co"
  "unterDataH\000\022=\n\thistogram\030\014 \001(\0132(.unhinge"
  "d.observability.v1.HistogramDataH\000\0229\n\007su"
  "mmary\030\r \001(\0132&.unhinged.observability.v1."
  "SummaryDataH\000\022R\n\027instrumentation_library"
  "\030\024 \001(\01321.unhinged.observability.v1.Instr"
  "umentationLibraryB\006\n\004data\"L\n\tGaugeData\022\?"
  "\n\013data_points\030\001 \003(\0132*.unhinged.observabi"
  "lity.v1.NumberDataPoint\"d\n\013CounterData\022\?"
  "\n\013data_points\030\001 \003(\0132*.unhinged.observabi"
  "lity.v1.NumberDataPoint\022\024\n\014is_monotonic\030"
  "\002 \001(\010\"\247\001\n\rHistogramData\022B\n\013data_points\030\001"
  " \003(\0132-.unhinged.observability.v1.Histogr"
  "amDataPoint\022R\n\027aggregation_temporality\030\002"
  " \001(\01621.unhinged.observability.v1.Aggrega"
  "tionTemporality\"O\n\013SummaryData\022@\n\013data_p"
  "oints\030\001 \003(\0132+.unhinged.observability.v1."
  "SummaryDataPoint\"\201\003\n\017NumberDataPoint\022N\n\n"
  "attributes\030\001 \003(\0132:.unhinged.observabilit"
  "y.v1.NumberDataPoint.AttributesEntry\022.\n\n"
  "start_time\030\002 \001(\0132\032.google.protobuf.Times"
  "tamp\022(\n\004time\030\003 \001(\0132\032.google.protobuf.Tim"
  "estamp\022\023\n\tas_double\030\n \001(\001H\000\022\020\n\006as_int\030\013 "
  "\001(\003H\000\0226\n\texemplars\030\024 \003(\0132#.unhinged.obse"
  "rvability.v1.Exemplar\032\\\n\017AttributesEntry"
  "\022\013\n\003key\030\001 \001(\t\0228\n\005value\030\002 \001(\0132).unhinged."
  "observability.v1.AttributeValue:\0028\001B\007\n\005v"
  "alue\"\243\003\n\022HistogramDataPoint\022Q\n\nattribute"
  "s\030\001 \003(\0132=.unhinged.observability.v1.Hist"
  "ogramDataPoint.AttributesEntry\022.\n\nstart_"
  "time\030\002 \001(\0132\032.google.protobuf.Timestamp\022("
  "\n\004time\030\003 \001(\0132\032.google.protobuf.Timestamp"
  "\022\r\n\005count\030\n \001(\004\022\013\n\003sum\030\013 \001(\001\022\027\n\017explicit"
  "_bounds\030\014 \003(\001\022\025\n\rbucket_counts\030\r \003(\004\0226\n\t"
  "exemplars\030\024 \003(\0132#.unhinged.observability"
  ".v1.Exemplar\032\\\n\017AttributesEntry\022\013\n\003key\030\001"
  " \001(\t\0228\n\005value\030\002 \001(\0132).unhinged.observabi"
  "lity.v1.AttributeValue:\0028\001\"\372\002\n\020SummaryDa"
  "taPoint\022O\n\nattributes\030\001 \003(\0132;.unhinged.o"
  "bservability.v1.SummaryDataPoint.Attribu"
  "tesEntry\022.\n\nstart_time\030\002 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022(\n\004time\030\003 \001(\0132\032.google."
  "protobuf.Timestamp\022\r\n\005count\030\n \001(\004\022\013\n\003sum"
  "\030\013 \001(\001\022A\n\017quantile_values\030\014 \003(\0132(.unhing"
  "ed.observability.v1.QuantileValue\032\\\n\017Att"
  "ributesEntry\022\013\n\003key\030\001 \001(\t\0228\n\005value\030\002 \001(\013"
  "2).unhinged.observability.v1.AttributeVa"
  "lue:\0028\001\"0\n\rQuantileValue\022\020\n\010quantile\030\001 \001"
  "(\001\022\r\n\005value\030\002 \001(\001\"\314\002\n\010Exemplar\022X\n\023filter"
  "ed_attributes\030\001 \003(\0132;.unhinged.observabi"
  "lity.v1.Exemplar.FilteredAttributesEntry"
  "\022-\n\ttimestamp\030\002 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022\023\n\tas_double\030\n \001(\001H\000\022\020\n\006as_int\030\013"
  " \001(\003H\000\022\017\n\007span_id\030\024 \001(\t\022\020\n\010trace_id\030\025 \001("
  "\t\032d\n\027FilteredAttributesEntry\022\013\n\003key\030\001 \001("
  "\t\0228\n\005value\030\002 \001(\0132).unhinged.observabilit"
  "y.v1.AttributeValue:\0028\001B\007\n\005value\"\370\002\n\022Ser"
  "viceHealthEvent\022\020\n\010event_id\030\001 \001(\t\022-\n\ttim"
  "estamp\030\002 \001(\0132\032.google.protobuf.Timestamp"
  "\022\022\n\nevent_type\030\003 \001(\t\022\027\n\017sequence_number\030"
  "\004 \001(\003\0225\n\010resource\030\005 \001(\0132#.unhinged.obser"
  "vability.v1.Resource\0228\n\006health\030\n \001(\0132(.u"
  "nhinged.observability.v1.ServiceHealth\022A"
  "\n\014destinations\030\024 \001(\0132+.unhinged.observab"
  "ility.v1.DestinationFlags\022@\n\016partition_i"
  "nfo\030\031 \001(\0132(.unhinged.observability.v1.Pa"
  "rtitionInfo\"\262\003\n\rServiceHealth\022\024\n\014service"
  "_name\030\001 \001(\t\0227\n\006status\030\002 \001(\0162\'.unhinged.o"
  "bservability.v1.HealthStatus\022\026\n\016status_m"
  "essage\030\003 \001(\t\022=\n\rhealth_checks\030\n \003(\0132&.un"
  "hinged.observability.v1.HealthCheck\022A\n\014d"
  "ependencies\030\017 \003(\0132+.unhinged.observabili"
  "ty.v1.DependencyHealth\022\?\n\004slis\030\024 \001(\01321.u"
  "nhinged.observability.v1.ServiceLevelInd"
  "icators\022@\n\016system_metrics\030\031 \001(\0132(.unhing"
  "ed.observability.v1.SystemMetrics\0225\n\006upt"
  "ime\030\036 \001(\0132%.unhinged.observability.v1.Up"
  "timeInfo\"\250\002\n\013HealthCheck\022\014\n\004name\030\001 \001(\t\0227"
  "\n\006status\030\002 \001(\0162\'.unhinged.observability."
  "v1.HealthStatus\022\017\n\007message\030\003 \001(\t\022.\n\nlast"
  "_check\030\004 \001(\0132\032.google.protobuf.Timestamp"
  "\022\030\n\020response_time_ms\030\005 \001(\003\022F\n\010metadata\030\n"
  " \003(\01324.unhinged.observability.v1.HealthC"
  "heck.MetadataEntry\032/\n\rMetadataEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\324\001\n\020Dependen"
  "cyHealth\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\0227\n\006"
  "status\030\003 \001(\0162\'.unhinged.observability.v1"
  ".HealthStatus\022\020\n\010endpoint\030\004 \001(\t\022\030\n\020respo"
  "nse_time_ms\030\005 \001(\003\022\017\n\007version\030\006 \001(\t\022.\n\nla"
  "st_check\030\n \001(\0132\032.google.protobuf.Timesta"
  "mp\"\224\002\n\026ServiceLevelIndicators\022\034\n\024availab"
  "ility_percent\030\001 \001(\001\022\032\n\022error_rate_percen"
  "t\030\002 \001(\001\022\026\n\016latency_p50_ms\030\003 \001(\001\022\026\n\016laten"
  "cy_p95_ms\030\004 \001(\001\022\026\n\016latency_p99_ms\030\005 \001(\001\022"
  "\026\n\016throughput_rps\030\006 \001(\001\0220\n\014window_start\030"
  "\n \001(\0132\032.google.protobuf.Timestamp\022.\n\nwin"
  "dow_end\030\013 \001(\0132\032.google.protobuf.Timestam"
  "p\"\224\004\n\rSystemMetrics\022\031\n\021cpu_usage_percent"
  "\030\001 \001(\001\022\023\n\013cpu_load_1m\030\002 \001(\001\022\023\n\013cpu_load_"
  "5m\030\003 \001(\001\022\024\n\014cpu_load_15m\030\004 \001(\001\022\032\n\022memory"
  "_total_bytes\030\n \001(\004\022\031\n\021memory_used_bytes\030"
  "\013 \001(\004\022\036\n\026memory_available_bytes\030\014 \001(\004\022\034\n"
  "\024memory_usage_percent\030\r \001(\001\022\030\n\020disk_tota"
  "l_bytes\030\024 \001(\004\022\027\n\017disk_used_bytes\030\025 \001(\004\022\034"
  "\n\024disk_available_bytes\030\026 \001(\004\022\032\n\022disk_usa"
  "ge_percent\030\027 \001(\001\022\032\n\022network_bytes_sent\030\036"
  " \001(\004\022\036\n\026network_bytes_received\030\037 \001(\004\022\034\n\024"
  "network_packets_sent\030  \001(\004\022 \n\030network_pa"
  "ckets_received\030! \001(\004\022\025\n\rprocess_count\030( "
  "\001(\r\022\024\n\014thread_count\030) \001(\r\022\035\n\025file_descri"
  "ptor_count\030* \001(\r\"\235\001\n\nUptimeInfo\022.\n\nstart"
  "_time\030\001 \001(\0132\032.google.protobuf.Timestamp\022"
  "\026\n\016uptime_seconds\030\002 \001(\003\022\025\n\rrestart_count"
  "\030\003 \001(\r\0220\n\014last_restart\030\004 \001(\0132\032.google.pr"
  "otobuf.Timestamp\"\275\002\n\rIncidentEvent\022\020\n\010ev"
  "ent_id\030\001 \001(\t\022-\n\ttimestamp\030\002 \001(\0132\032.google"
  ".protobuf.Timestamp\022\022\n\nevent_type\030\003 \001(\t\022"
  "\027\n\017sequence_number\030\004 \001(\003\0229\n\010incident\030\n \001"
  "(\0132\'.unhinged.observability.v1.IncidentD"
  "ata\022A\n\014destinations\030\024 \001(\0132+.unhinged.obs"
  "ervability.v1.DestinationFlags\022@\n\016partit"
  "ion_info\030\031 \001(\0132(.unhinged.observability."
  "v1.PartitionInfo\"\304\004\n\014IncidentData\022\023\n\013inc"
  "ident_id\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\023\n\013descrip"
  "tion\030\003 \001(\t\022=\n\010severity\030\004 \001(\0162+.unhinged."
  "observability.v1.IncidentSeverity\0229\n\006sta"
  "tus\030\005 \001(\0162).unhinged.observability.v1.In"
  "cidentStatus\022.\n\ncreated_at\030\n \001(\0132\032.googl"
  "e.protobuf.Timestamp\022.\n\nupdated_at\030\013 \001(\013"
  "2\032.google.protobuf.Timestamp\022/\n\013resolved"
  "_at\030\014 \001(\0132\032.google.protobuf.Timestamp\022\031\n"
  "\021affected_services\030\017 \003(\t\022\033\n\023affected_com"
  "ponents\030\020 \003(\t\022:\n\007updates\030\024 \003(\0132).unhinge"
  "d.observability.v1.IncidentUpdate\0229\n\006imp"
  "act\030\031 \001(\0132).unhinged.observability.v1.In"
  "cidentImpact\022A\n\nresolution\030\036 \001(\0132-.unhin"
  "ged.observability.v1.IncidentResolution\""
  "\343\001\n\016IncidentUpdate\022\021\n\tupdate_id\030\001 \001(\t\022-\n"
  "\ttimestamp\030\002 \001(\0132\032.google.protobuf.Times"
  "tamp\0229\n\006status\030\003 \001(\0162).unhinged.observab"
  "ility.v1.IncidentStatus\022\017\n\007message\030\004 \001(\t"
  "\022\016\n\006author\030\005 \001(\t\0223\n\004type\030\006 \001(\0162%.unhinge"
  "d.observability.v1.UpdateType\"\224\001\n\016Incide"
  "ntImpact\022\033\n\023availability_impact\030\001 \001(\001\022\032\n"
  "\022performance_impact\030\002 \001(\001\022\026\n\016affected_us"
  "ers\030\003 \001(\r\022\030\n\020affected_regions\030\004 \003(\t\022\027\n\017b"
  "usiness_impact\030\005 \001(\t\"\220\001\n\022IncidentResolut"
  "ion\022\022\n\nroot_cause\030\001 \001(\t\022\030\n\020resolution_st"
  "eps\030\002 \001(\t\022\033\n\023prevention_measures\030\003 \001(\t\022\027"
  "\n\017lessons_learned\030\004 \003(\t\022\026\n\016postmortem_ur"
  "l\030\005 \001(\t\"a\n\016IngestResponse\022\017\n\007success\030\001 \001"
  "(\010\022\017\n\007message\030\002 \001(\t\022\027\n\017processed_count\030\003"
  " \001(\r\022\024\n\014failed_count\030\004 \001(\r\"b\n\016HealthResp"
  "onse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\022."
  "\n\nnext_check\030\003 \001(\0132\032.google.protobuf.Tim"
  "estamp\"I\n\020IncidentResponse\022\017\n\007success\030\001 "
  "\001(\010\022\017\n\007message\030\002 \001(\t\022\023\n\013incident_id\030\003 \001("
  "\t\"O\n\013HealthQuery\022\025\n\rservice_names\030\001 \003(\t\022"
  ")\n\005since\030\002 \001(\0132\032.google.protobuf.Timesta"
  "mp\"Q\n\023HealthQueryResponse\022:\n\010services\030\001 "
  "\003(\0132(.unhinged.observability.v1.ServiceH"
  "ealth\"\270\001\n\rIncidentQuery\022;\n\010statuses\030\001 \003("
  "\0162).unhinged.observability.v1.IncidentSt"
  "atus\022\?\n\nseverities\030\002 \003(\0162+.unhinged.obse"
  "rvability.v1.IncidentSeverity\022)\n\005since\030\003"
  " \001(\0132\032.google.protobuf.Timestamp\"S\n\025Inci"
  "dentQueryResponse\022:\n\tincidents\030\001 \003(\0132\'.u"
  "nhinged.observability.v1.IncidentData\"\363\001"
  "\n\013MetricQuery\022\023\n\013metric_name\030\001 \001(\t\022B\n\006la"
  "bels\030\002 \003(\01322.unhinged.observability.v1.M"
  "etricQuery.LabelsEntry\022.\n\nstart_time\030\003 \001"
  "(\0132\032.google.protobuf.Timestamp\022,\n\010end_ti"
  "me\030\004 \001(\0132\032.google.protobuf.Timestamp\032-\n\013"
  "LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
  "\0028\001\"M\n\023MetricQueryResponse\0226\n\007metrics\030\001 "
  "\003(\0132%.unhinged.observability.v1.MetricDa"
  "ta\"\241\001\n\nTraceQuery\022\020\n\010trace_id\030\001 \001(\t\022\024\n\014s"
  "ervice_name\030\002 \001(\t\022.\n\nstart_time\030\003 \001(\0132\032."
  "google.protobuf.Timestamp\022,\n\010end_time\030\004 "
  "\001(\0132\032.google.protobuf.Timestamp\022\r\n\005limit"
  "\030\005 \001(\005\"K\n\022TraceQueryResponse\0225\n\006traces\030\001"
  " \003(\0132%.unhinged.observability.v1.TraceEv"
  "ent*\241\001\n\010LogLevel\022\031\n\025LOG_LEVEL_UNSPECIFIE"
  "D\020\000\022\023\n\017LOG_LEVEL_TRACE\020\001\022\023\n\017LOG_LEVEL_DE"
  "BUG\020\002\022\022\n\016LOG_LEVEL_INFO\020\003\022\022\n\016LOG_LEVEL_W"
  "ARN\020\004\022\023\n\017LOG_LEVEL_ERROR\020\005\022\023\n\017LOG_LEVEL_"
  "FATAL\020\006*\235\001\n\017CompressionType\022\033\n\027COMPRESSI"
  "ON_UNSPECIFIED\020\000\022\024\n\020COMPRESSION_NONE\020\001\022\024"
  "\n\020COMPRESSION_GZIP\020\002\022\026\n\022COMPRESSION_SNAP"
  "PY\020\003\022\023\n\017COMPRESSION_LZ4\020\004\022\024\n\020COMPRESSION"
  "_ZSTD\020\005*\231\001\n\010SpanKind\022\031\n\025SPAN_KIND_UNSPEC"
  "IFIED\020\000\022\026\n\022SPAN_KIND_INTERNAL\020\001\022\024\n\020SPAN_"
  "KIND_SERVER\020\002\022\024\n\020SPAN_KIND_CLIENT\020\003\022\026\n\022S"
  "PAN_KIND_PRODUCER\020\004\022\026\n\022SPAN_KIND_CONSUME"
  "R\020\005*N\n\nStatusCode\022\025\n\021STATUS_CODE_UNSET\020\000"
  "\022\022\n\016STATUS_CODE_OK\020\001\022\025\n\021STATUS_CODE_ERRO"
  "R\020\002*\214\001\n\026AggregationTemporality\022\'\n#AGGREG"
  "ATION_TEMPORALITY_UNSPECIFIED\020\000\022!\n\035AGGRE"
  "GATION_TEMPORALITY_DELTA\020\001\022&\n\"AGGREGATIO"
  "N_TEMPORALITY_CUMULATIVE\020\002*\234\001\n\014HealthSta"
  "tus\022\031\n\025HEALTH_STATUS_UNKNOWN\020\000\022\031\n\025HEALTH"
  "_STATUS_HEALTHY\020\001\022\032\n\026HEALTH_STATUS_DEGRA"
  "DED\020\002\022\033\n\027HEALTH_STATUS_UNHEALTHY\020\003\022\035\n\031HE"
  "ALTH_STATUS_MAINTENANCE\020\004*\246\001\n\020IncidentSe"
  "verity\022\035\n\031INCIDENT_SEVERITY_UNKNOWN\020\000\022\031\n"
  "\025INCIDENT_SEVERITY_LOW\020\001\022\034\n\030INCIDENT_SEV"
  "ERITY_MEDIUM\020\002\022\032\n\026INCIDENT_SEVERITY_HIGH"
  "\020\003\022\036\n\032INCIDENT_SEVERITY_CRITICAL\020\004*\316\001\n\016I"
  "ncidentStatus\022\033\n\027INCIDENT_STATUS_UNKNOWN"
  "\020\000\022!\n\035INCIDENT_STATUS_INVESTIGATING\020\001\022\036\n"
  "\032INCIDENT_STATUS_IDENTIFIED\020\002\022\036\n\032INCIDEN"
  "T_STATUS_MONITORING\020\003\022\034\n\030INCIDENT_STATUS"
  "_RESOLVED\020\004\022\036\n\032INCIDENT_STATUS_POSTMORTE"
  "M\020\005*\222\001\n\nUpdateType\022\027\n\023UPDATE_TYPE_UNKNOW"
  "N\020\000\022\035\n\031UPDATE_TYPE_INVESTIGATING\020\001\022\026\n\022UP"
  "DATE_TYPE_UPDATE\020\002\022\030\n\024UPDATE_TYPE_RESOLV"
  "ED\020\003\022\032\n\026UPDATE_TYPE_POSTMORTEM\020\0042\243\010\n\024Obs"
  "ervabilityService\022^\n\nIngestLogs\022#.unhing"
  "ed.observability.v1.LogEvent\032).unhinged."
  "observability.v1.IngestResponse(\001\022b\n\014Ing"
  "estTraces\022%.unhinged.observability.v1.Tr"
  "aceEvent\032).unhinged.observability.v1.Ing"
  "estResponse(\001\022d\n\rIngestMetrics\022&.unhinge"
  "d.observability.v1.MetricEvent\032).unhinge"
  "d.observability.v1.IngestResponse(\001\022h\n\014R"
  "eportHealth\022-.unhinged.observability.v1."
  "ServiceHealthEvent\032).unhinged.observabil"
  "ity.v1.HealthResponse\022g\n\016ReportIncident\022"
  "(.unhinged.observability.v1.IncidentEven"
  "t\032+.unhinged.observability.v1.IncidentRe"
  "sponse\022g\n\016UpdateIncident\022(.unhinged.obse"
  "rvability.v1.IncidentEvent\032+.unhinged.ob"
  "servability.v1.IncidentResponse\022j\n\020GetSe"
  "rviceHealth\022&.unhinged.observability.v1."
  "HealthQuery\032..unhinged.observability.v1."
  "HealthQueryResponse\022p\n\022GetActiveIncident"
  "s\022(.unhinged.observability.v1.IncidentQu"
  "ery\0320.unhinged.observability.v1.Incident"
  "QueryResponse\022d\n\nGetMetrics\022&.unhinged.o"
  "bservability.v1.MetricQuery\032..unhinged.o"
  "bservability.v1.MetricQueryResponse\022a\n\tG"
  "etTraces\022%.unhinged.observability.v1.Tra"
  "ceQuery\032-.unhinged.observability.v1.Trac"
  "eQueryResponseB.\n\026unhinged.observability"
  "B\022ObservabilityProtoP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_observability_2eproto_deps[4] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_observability_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_observability_2eproto = {
    false, false, 14750, descriptor_table_protodef_observability_2eproto,
    "observability.proto",
    &descriptor_table_observability_2eproto_once, descriptor_table_observability_2eproto_deps, 4, 64,
    schemas, file_default_instances, TableStruct_observability_2eproto::offsets,
    file_level_metadata_observability_2eproto, file_level_enum_descriptors_observability_2eproto,
    file_level_service_descriptors_observability_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_observability_2eproto_getter() {
  return &descriptor_table_observability_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_observability_2eproto(&descriptor_table_observability_2eproto);
namespace unhinged {
namespace observability {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_observability_2eproto);
  return file_level_enum_descriptors_observability_2eproto[0];
}
bool LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_observability_2eproto);
  return file_level_enum_descriptors_observability_2eproto[1];
}
bool CompressionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_observability_2eproto);
  return file_level_enum_descriptors_observability_2eproto[2];
}
bool SpanKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_observability_2eproto);
  return file_level_enum_descriptors_observability_2eproto[3];
}
bool StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregationTemporality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_observability_2eproto);
  return file_level_enum_descriptors_observability_2eproto[4];
}
bool AggregationTemporality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HealthStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_observability_2eproto);
  return file_level_enum_descriptors_observability_2eproto[5];
}
bool HealthStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IncidentSeverity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_observability_2eproto);
  return file_level_enum_descriptors_observability_2eproto[6];
}
bool IncidentSeverity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IncidentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_observability_2eproto);
  return file_level_enum_descriptors_observability_2eproto[7];
}
bool IncidentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_observability_2eproto);
  return file_level_enum_descriptors_observability_2eproto[8];
}
bool UpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TraceContext::_Internal {
 public:
  static const ::unhinged::observability::v1::TraceFlags& trace_flags(const TraceContext* msg);
};

const ::unhinged::observability::v1::TraceFlags&
TraceContext::_Internal::trace_flags(const TraceContext* msg) {
  return *msg->_impl_.trace_flags_;
}
TraceContext::TraceContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.TraceContext)
}
TraceContext::TraceContext(const TraceContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.parent_span_id_){}
    , decltype(_impl_.trace_state_){}
    , decltype(_impl_.correlation_id_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.trace_flags_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_id().empty()) {
    _this->_impl_.trace_id_.Set(from._internal_trace_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_span_id().empty()) {
    _this->_impl_.span_id_.Set(from._internal_span_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parent_span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_span_id().empty()) {
    _this->_impl_.parent_span_id_.Set(from._internal_parent_span_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.trace_state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_state().empty()) {
    _this->_impl_.trace_state_.Set(from._internal_trace_state(), 
      _this->GetArenaForAllocation());
  }
  _impl_.correlation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.correlation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_correlation_id().empty()) {
    _this->_impl_.correlation_id_.Set(from._internal_correlation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trace_flags()) {
    _this->_impl_.trace_flags_ = new ::unhinged::observability::v1::TraceFlags(*from._impl_.trace_flags_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.TraceContext)
}

inline void TraceContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.parent_span_id_){}
    , decltype(_impl_.trace_state_){}
    , decltype(_impl_.correlation_id_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.trace_flags_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parent_span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trace_state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.correlation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.correlation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceContext::~TraceContext() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.TraceContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trace_id_.Destroy();
  _impl_.span_id_.Destroy();
  _impl_.parent_span_id_.Destroy();
  _impl_.trace_state_.Destroy();
  _impl_.correlation_id_.Destroy();
  _impl_.request_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trace_flags_;
}

void TraceContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceContext::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.TraceContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trace_id_.ClearToEmpty();
  _impl_.span_id_.ClearToEmpty();
  _impl_.parent_span_id_.ClearToEmpty();
  _impl_.trace_state_.ClearToEmpty();
  _impl_.correlation_id_.ClearToEmpty();
  _impl_.request_id_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.trace_flags_ != nullptr) {
    delete _impl_.trace_flags_;
  }
  _impl_.trace_flags_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.trace_id"));
        } else
          goto handle_unusual;
        continue;
      // string span_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_span_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.span_id"));
        } else
          goto handle_unusual;
        continue;
      // string parent_span_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_parent_span_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.parent_span_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.TraceFlags trace_flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_flags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trace_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_trace_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.trace_state"));
        } else
          goto handle_unusual;
        continue;
      // string correlation_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_correlation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.correlation_id"));
        } else
          goto handle_unusual;
        continue;
      // string request_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.TraceContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string trace_id = 1;
  if (!this->_internal_trace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_id().data(), static_cast<int>(this->_internal_trace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.trace_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trace_id(), target);
  }

  // string span_id = 2;
  if (!this->_internal_span_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_span_id().data(), static_cast<int>(this->_internal_span_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.span_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_span_id(), target);
  }

  // string parent_span_id = 3;
  if (!this->_internal_parent_span_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_span_id().data(), static_cast<int>(this->_internal_parent_span_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.parent_span_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_parent_span_id(), target);
  }

  // .unhinged.observability.v1.TraceFlags trace_flags = 4;
  if (this->_internal_has_trace_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::trace_flags(this),
        _Internal::trace_flags(this).GetCachedSize(), target, stream);
  }

  // string trace_state = 5;
  if (!this->_internal_trace_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_state().data(), static_cast<int>(this->_internal_trace_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.trace_state");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_trace_state(), target);
  }

  // string correlation_id = 10;
  if (!this->_internal_correlation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_correlation_id().data(), static_cast<int>(this->_internal_correlation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.correlation_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_correlation_id(), target);
  }

  // string request_id = 11;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.request_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_request_id(), target);
  }

  // string session_id = 12;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.session_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_session_id(), target);
  }

  // string user_id = 13;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.user_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.TraceContext)
  return target;
}

size_t TraceContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.TraceContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trace_id = 1;
  if (!this->_internal_trace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_id());
  }

  // string span_id = 2;
  if (!this->_internal_span_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_span_id());
  }

  // string parent_span_id = 3;
  if (!this->_internal_parent_span_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_span_id());
  }

  // string trace_state = 5;
  if (!this->_internal_trace_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_state());
  }

  // string correlation_id = 10;
  if (!this->_internal_correlation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_correlation_id());
  }

  // string request_id = 11;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string session_id = 12;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string user_id = 13;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .unhinged.observability.v1.TraceFlags trace_flags = 4;
  if (this->_internal_has_trace_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trace_flags_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceContext::GetClassData() const { return &_class_data_; }


void TraceContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceContext*>(&to_msg);
  auto& from = static_cast<const TraceContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.TraceContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  if (!from._internal_span_id().empty()) {
    _this->_internal_set_span_id(from._internal_span_id());
  }
  if (!from._internal_parent_span_id().empty()) {
    _this->_internal_set_parent_span_id(from._internal_parent_span_id());
  }
  if (!from._internal_trace_state().empty()) {
    _this->_internal_set_trace_state(from._internal_trace_state());
  }
  if (!from._internal_correlation_id().empty()) {
    _this->_internal_set_correlation_id(from._internal_correlation_id());
  }
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_trace_flags()) {
    _this->_internal_mutable_trace_flags()->::unhinged::observability::v1::TraceFlags::MergeFrom(
        from._internal_trace_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceContext::CopyFrom(const TraceContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.TraceContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceContext::IsInitialized() const {
  return true;
}

void TraceContext::InternalSwap(TraceContext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trace_id_, lhs_arena,
      &other->_impl_.trace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.span_id_, lhs_arena,
      &other->_impl_.span_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_span_id_, lhs_arena,
      &other->_impl_.parent_span_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trace_state_, lhs_arena,
      &other->_impl_.trace_state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.correlation_id_, lhs_arena,
      &other->_impl_.correlation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  swap(_impl_.trace_flags_, other->_impl_.trace_flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[0]);
}

// ===================================================================

class TraceFlags::_Internal {
 public:
};

TraceFlags::TraceFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.TraceFlags)
}
TraceFlags::TraceFlags(const TraceFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceFlags* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sampled_){}
    , decltype(_impl_.random_trace_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sampled_, &from._impl_.sampled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.random_trace_id_) -
    reinterpret_cast<char*>(&_impl_.sampled_)) + sizeof(_impl_.random_trace_id_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.TraceFlags)
}

inline void TraceFlags::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sampled_){false}
    , decltype(_impl_.random_trace_id_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TraceFlags::~TraceFlags() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.TraceFlags)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceFlags::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.TraceFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.sampled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.random_trace_id_) -
      reinterpret_cast<char*>(&_impl_.sampled_)) + sizeof(_impl_.random_trace_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceFlags::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool sampled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sampled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool random_trace_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.random_trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.TraceFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool sampled = 1;
  if (this->_internal_sampled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_sampled(), target);
  }

  // bool random_trace_id = 2;
  if (this->_internal_random_trace_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_random_trace_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.TraceFlags)
  return target;
}

size_t TraceFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.TraceFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool sampled = 1;
  if (this->_internal_sampled() != 0) {
    total_size += 1 + 1;
  }

  // bool random_trace_id = 2;
  if (this->_internal_random_trace_id() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceFlags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceFlags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceFlags::GetClassData() const { return &_class_data_; }


void TraceFlags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceFlags*>(&to_msg);
  auto& from = static_cast<const TraceFlags&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.TraceFlags)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sampled() != 0) {
    _this->_internal_set_sampled(from._internal_sampled());
  }
  if (from._internal_random_trace_id() != 0) {
    _this->_internal_set_random_trace_id(from._internal_random_trace_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceFlags::CopyFrom(const TraceFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.TraceFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceFlags::IsInitialized() const {
  return true;
}

void TraceFlags::InternalSwap(TraceFlags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceFlags, _impl_.random_trace_id_)
      + sizeof(TraceFlags::_impl_.random_trace_id_)
      - PROTOBUF_FIELD_OFFSET(TraceFlags, _impl_.sampled_)>(
          reinterpret_cast<char*>(&_impl_.sampled_),
          reinterpret_cast<char*>(&other->_impl_.sampled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceFlags::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[1]);
}

// ===================================================================

Resource_AttributesEntry_DoNotUse::Resource_AttributesEntry_DoNotUse() {}
Resource_AttributesEntry_DoNotUse::Resource_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Resource_AttributesEntry_DoNotUse::MergeFrom(const Resource_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Resource_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[2]);
}

// ===================================================================

class Resource::_Internal {
 public:
};

Resource::Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Resource::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.Resource)
}
Resource::Resource(const Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Resource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.service_version_){}
    , decltype(_impl_.service_instance_id_){}
    , decltype(_impl_.deployment_environment_){}
    , decltype(_impl_.k8s_cluster_name_){}
    , decltype(_impl_.k8s_namespace_){}
    , decltype(_impl_.k8s_pod_name_){}
    , decltype(_impl_.host_name_){}
    , decltype(_impl_.host_arch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_version().empty()) {
    _this->_impl_.service_version_.Set(from._internal_service_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_instance_id().empty()) {
    _this->_impl_.service_instance_id_.Set(from._internal_service_instance_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deployment_environment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deployment_environment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deployment_environment().empty()) {
    _this->_impl_.deployment_environment_.Set(from._internal_deployment_environment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.k8s_cluster_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k8s_cluster_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k8s_cluster_name().empty()) {
    _this->_impl_.k8s_cluster_name_.Set(from._internal_k8s_cluster_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.k8s_namespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k8s_namespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k8s_namespace().empty()) {
    _this->_impl_.k8s_namespace_.Set(from._internal_k8s_namespace(), 
      _this->GetArenaForAllocation());
  }
  _impl_.k8s_pod_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k8s_pod_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k8s_pod_name().empty()) {
    _this->_impl_.k8s_pod_name_.Set(from._internal_k8s_pod_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_name().empty()) {
    _this->_impl_.host_name_.Set(from._internal_host_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_arch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_arch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_arch().empty()) {
    _this->_impl_.host_arch_.Set(from._internal_host_arch(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.Resource)
}

inline void Resource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.service_version_){}
    , decltype(_impl_.service_instance_id_){}
    , decltype(_impl_.deployment_environment_){}
    , decltype(_impl_.k8s_cluster_name_){}
    , decltype(_impl_.k8s_namespace_){}
    , decltype(_impl_.k8s_pod_name_){}
    , decltype(_impl_.host_name_){}
    , decltype(_impl_.host_arch_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deployment_environment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deployment_environment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.k8s_cluster_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k8s_cluster_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.k8s_namespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k8s_namespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.k8s_pod_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k8s_pod_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_arch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_arch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.Resource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Resource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.service_name_.Destroy();
  _impl_.service_version_.Destroy();
  _impl_.service_instance_id_.Destroy();
  _impl_.deployment_environment_.Destroy();
  _impl_.k8s_cluster_name_.Destroy();
  _impl_.k8s_namespace_.Destroy();
  _impl_.k8s_pod_name_.Destroy();
  _impl_.host_name_.Destroy();
  _impl_.host_arch_.Destroy();
}

void Resource::ArenaDtor(void* object) {
  Resource* _this = reinterpret_cast< Resource* >(object);
  _this->_impl_.attributes_.Destruct();
}
void Resource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.Resource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.service_name_.ClearToEmpty();
  _impl_.service_version_.ClearToEmpty();
  _impl_.service_instance_id_.ClearToEmpty();
  _impl_.deployment_environment_.ClearToEmpty();
  _impl_.k8s_cluster_name_.ClearToEmpty();
  _impl_.k8s_namespace_.ClearToEmpty();
  _impl_.k8s_pod_name_.ClearToEmpty();
  _impl_.host_name_.ClearToEmpty();
  _impl_.host_arch_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Resource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.service_name"));
        } else
          goto handle_unusual;
        continue;
      // string service_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.service_version"));
        } else
          goto handle_unusual;
        continue;
      // string service_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_service_instance_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.service_instance_id"));
        } else
          goto handle_unusual;
        continue;
      // string deployment_environment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_deployment_environment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.deployment_environment"));
        } else
          goto handle_unusual;
        continue;
      // string k8s_cluster_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_k8s_cluster_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.k8s_cluster_name"));
        } else
          goto handle_unusual;
        continue;
      // string k8s_namespace = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_k8s_namespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.k8s_namespace"));
        } else
          goto handle_unusual;
        continue;
      // string k8s_pod_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_k8s_pod_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.k8s_pod_name"));
        } else
          goto handle_unusual;
        continue;
      // string host_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_host_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.host_name"));
        } else
          goto handle_unusual;
        continue;
      // string host_arch = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_host_arch();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.host_arch"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Resource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.Resource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string service_version = 2;
  if (!this->_internal_service_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_version().data(), static_cast<int>(this->_internal_service_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.service_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_version(), target);
  }

  // string service_instance_id = 3;
  if (!this->_internal_service_instance_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_instance_id().data(), static_cast<int>(this->_internal_service_instance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.service_instance_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_instance_id(), target);
  }

  // string deployment_environment = 4;
  if (!this->_internal_deployment_environment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deployment_environment().data(), static_cast<int>(this->_internal_deployment_environment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.deployment_environment");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_deployment_environment(), target);
  }

  // string k8s_cluster_name = 5;
  if (!this->_internal_k8s_cluster_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_k8s_cluster_name().data(), static_cast<int>(this->_internal_k8s_cluster_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.k8s_cluster_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_k8s_cluster_name(), target);
  }

  // string k8s_namespace = 6;
  if (!this->_internal_k8s_namespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_k8s_namespace().data(), static_cast<int>(this->_internal_k8s_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.k8s_namespace");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_k8s_namespace(), target);
  }

  // string k8s_pod_name = 7;
  if (!this->_internal_k8s_pod_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_k8s_pod_name().data(), static_cast<int>(this->_internal_k8s_pod_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.k8s_pod_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_k8s_pod_name(), target);
  }

  // string host_name = 8;
  if (!this->_internal_host_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.host_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_host_name(), target);
  }

  // string host_arch = 9;
  if (!this->_internal_host_arch().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_arch().data(), static_cast<int>(this->_internal_host_arch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.host_arch");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_host_arch(), target);
  }

  // map<string, string> attributes = 20;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Resource_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.Resource.AttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.Resource.AttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(20, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(20, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.Resource)
  return target;
}

size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.Resource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += Resource_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string service_version = 2;
  if (!this->_internal_service_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_version());
  }

  // string service_instance_id = 3;
  if (!this->_internal_service_instance_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_instance_id());
  }

  // string deployment_environment = 4;
  if (!this->_internal_deployment_environment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deployment_environment());
  }

  // string k8s_cluster_name = 5;
  if (!this->_internal_k8s_cluster_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_k8s_cluster_name());
  }

  // string k8s_namespace = 6;
  if (!this->_internal_k8s_namespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_k8s_namespace());
  }

  // string k8s_pod_name = 7;
  if (!this->_internal_k8s_pod_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_k8s_pod_name());
  }

  // string host_name = 8;
  if (!this->_internal_host_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  // string host_arch = 9;
  if (!this->_internal_host_arch().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_arch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Resource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Resource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Resource::GetClassData() const { return &_class_data_; }


void Resource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Resource*>(&to_msg);
  auto& from = static_cast<const Resource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.Resource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_service_version().empty()) {
    _this->_internal_set_service_version(from._internal_service_version());
  }
  if (!from._internal_service_instance_id().empty()) {
    _this->_internal_set_service_instance_id(from._internal_service_instance_id());
  }
  if (!from._internal_deployment_environment().empty()) {
    _this->_internal_set_deployment_environment(from._internal_deployment_environment());
  }
  if (!from._internal_k8s_cluster_name().empty()) {
    _this->_internal_set_k8s_cluster_name(from._internal_k8s_cluster_name());
  }
  if (!from._internal_k8s_namespace().empty()) {
    _this->_internal_set_k8s_namespace(from._internal_k8s_namespace());
  }
  if (!from._internal_k8s_pod_name().empty()) {
    _this->_internal_set_k8s_pod_name(from._internal_k8s_pod_name());
  }
  if (!from._internal_host_name().empty()) {
    _this->_internal_set_host_name(from._internal_host_name());
  }
  if (!from._internal_host_arch().empty()) {
    _this->_internal_set_host_arch(from._internal_host_arch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  return true;
}

void Resource::InternalSwap(Resource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_version_, lhs_arena,
      &other->_impl_.service_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_instance_id_, lhs_arena,
      &other->_impl_.service_instance_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deployment_environment_, lhs_arena,
      &other->_impl_.deployment_environment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.k8s_cluster_name_, lhs_arena,
      &other->_impl_.k8s_cluster_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.k8s_namespace_, lhs_arena,
      &other->_impl_.k8s_namespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.k8s_pod_name_, lhs_arena,
      &other->_impl_.k8s_pod_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_name_, lhs_arena,
      &other->_impl_.host_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_arch_, lhs_arena,
      &other->_impl_.host_arch_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Resource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[3]);
}

// ===================================================================

class LogEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const LogEvent* msg);
  static const ::unhinged::observability::v1::TraceContext& trace_context(const LogEvent* msg);
  static const ::unhinged::observability::v1::Resource& resource(const LogEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const LogEvent* msg);
  static const ::unhinged::observability::v1::ErrorInfo& error(const LogEvent* msg);
  static const ::unhinged::observability::v1::DestinationFlags& destinations(const LogEvent* msg);
  static const ::unhinged::observability::v1::PartitionInfo& partition_info(const LogEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LogEvent::_Internal::timestamp(const LogEvent* msg) {
  return *msg->_impl_.timestamp_;
}
const ::unhinged::observability::v1::TraceContext&
LogEvent::_Internal::trace_context(const LogEvent* msg) {
  return *msg->_impl_.trace_context_;
}
const ::unhinged::observability::v1::Resource&
LogEvent::_Internal::resource(const LogEvent* msg) {
  return *msg->_impl_.resource_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
LogEvent::_Internal::metadata(const LogEvent* msg) {
  return *msg->_impl_.metadata_;
}
const ::unhinged::observability::v1::ErrorInfo&
LogEvent::_Internal::error(const LogEvent* msg) {
  return *msg->_impl_.error_;
}
const ::unhinged::observability::v1::DestinationFlags&
LogEvent::_Internal::destinations(const LogEvent* msg) {
  return *msg->_impl_.destinations_;
}
const ::unhinged::observability::v1::PartitionInfo&
LogEvent::_Internal::partition_info(const LogEvent* msg) {
  return *msg->_impl_.partition_info_;
}
void LogEvent::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void LogEvent::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
LogEvent::LogEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.LogEvent)
}
LogEvent::LogEvent(const LogEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.trace_context_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.destinations_){nullptr}
    , decltype(_impl_.partition_info_){nullptr}
    , decltype(_impl_.sequence_number_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_type().empty()) {
    _this->_impl_.event_type_.Set(from._internal_event_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_trace_context()) {
    _this->_impl_.trace_context_ = new ::unhinged::observability::v1::TraceContext(*from._impl_.trace_context_);
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::unhinged::observability::v1::Resource(*from._impl_.resource_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::unhinged::observability::v1::ErrorInfo(*from._impl_.error_);
  }
  if (from._internal_has_destinations()) {
    _this->_impl_.destinations_ = new ::unhinged::observability::v1::DestinationFlags(*from._impl_.destinations_);
  }
  if (from._internal_has_partition_info()) {
    _this->_impl_.partition_info_ = new ::unhinged::observability::v1::PartitionInfo(*from._impl_.partition_info_);
  }
  ::memcpy(&_impl_.sequence_number_, &from._impl_.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.LogEvent)
}

inline void LogEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.trace_context_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.destinations_){nullptr}
    , decltype(_impl_.partition_info_){nullptr}
    , decltype(_impl_.sequence_number_){int64_t{0}}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogEvent::~LogEvent() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.LogEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_id_.Destroy();
  _impl_.event_type_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.trace_context_;
  if (this != internal_default_instance()) delete _impl_.resource_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.error_;
  if (this != internal_default_instance()) delete _impl_.destinations_;
  if (this != internal_default_instance()) delete _impl_.partition_info_;
}

void LogEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.LogEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_id_.ClearToEmpty();
  _impl_.event_type_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trace_context_ != nullptr) {
    delete _impl_.trace_context_;
  }
  _impl_.trace_context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.destinations_ != nullptr) {
    delete _impl_.destinations_;
  }
  _impl_.destinations_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.partition_info_ != nullptr) {
    delete _impl_.partition_info_;
  }
  _impl_.partition_info_ = nullptr;
  ::memset(&_impl_.sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.LogEvent.event_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string event_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_event_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.LogEvent.event_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.TraceContext trace_context = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.Resource resource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.LogLevel level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::unhinged::observability::v1::LogLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.LogEvent.message"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.ErrorInfo error = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.DestinationFlags destinations = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_destinations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.PartitionInfo partition_info = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_partition_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.LogEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.LogEvent.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string event_type = 3;
  if (!this->_internal_event_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_type().data(), static_cast<int>(this->_internal_event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.LogEvent.event_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_event_type(), target);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sequence_number(), target);
  }

  // .unhinged.observability.v1.TraceContext trace_context = 5;
  if (this->_internal_has_trace_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::trace_context(this),
        _Internal::trace_context(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.Resource resource = 6;
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.LogLevel level = 10;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_level(), target);
  }

  // string message = 11;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.LogEvent.message");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_message(), target);
  }

  // .google.protobuf.Struct metadata = 12;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.ErrorInfo error = 15;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.DestinationFlags destinations = 20;
  if (this->_internal_has_destinations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::destinations(this),
        _Internal::destinations(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.PartitionInfo partition_info = 25;
  if (this->_internal_has_partition_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::partition_info(this),
        _Internal::partition_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.LogEvent)
  return target;
}

size_t LogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.LogEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // string event_type = 3;
  if (!this->_internal_event_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_type());
  }

  // string message = 11;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .unhinged.observability.v1.TraceContext trace_context = 5;
  if (this->_internal_has_trace_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trace_context_);
  }

  // .unhinged.observability.v1.Resource resource = 6;
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  // .google.protobuf.Struct metadata = 12;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .unhinged.observability.v1.ErrorInfo error = 15;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // .unhinged.observability.v1.DestinationFlags destinations = 20;
  if (this->_internal_has_destinations()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destinations_);
  }

  // .unhinged.observability.v1.PartitionInfo partition_info = 25;
  if (this->_internal_has_partition_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.partition_info_);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequence_number());
  }

  // .unhinged.observability.v1.LogLevel level = 10;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogEvent::GetClassData() const { return &_class_data_; }


void LogEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogEvent*>(&to_msg);
  auto& from = static_cast<const LogEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.LogEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (!from._internal_event_type().empty()) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_trace_context()) {
    _this->_internal_mutable_trace_context()->::unhinged::observability::v1::TraceContext::MergeFrom(
        from._internal_trace_context());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::unhinged::observability::v1::Resource::MergeFrom(
        from._internal_resource());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::unhinged::observability::v1::ErrorInfo::MergeFrom(
        from._internal_error());
  }
  if (from._internal_has_destinations()) {
    _this->_internal_mutable_destinations()->::unhinged::observability::v1::DestinationFlags::MergeFrom(
        from._internal_destinations());
  }
  if (from._internal_has_partition_info()) {
    _this->_internal_mutable_partition_info()->::unhinged::observability::v1::PartitionInfo::MergeFrom(
        from._internal_partition_info());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogEvent::CopyFrom(const LogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.LogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEvent::IsInitialized() const {
  return true;
}

void LogEvent::InternalSwap(LogEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_type_, lhs_arena,
      &other->_impl_.event_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogEvent, _impl_.level_)
      + sizeof(LogEvent::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(LogEvent, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[4]);
}

// ===================================================================

ErrorInfo_ErrorAttributesEntry_DoNotUse::ErrorInfo_ErrorAttributesEntry_DoNotUse() {}
ErrorInfo_ErrorAttributesEntry_DoNotUse::ErrorInfo_ErrorAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ErrorInfo_ErrorAttributesEntry_DoNotUse::MergeFrom(const ErrorInfo_ErrorAttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ErrorInfo_ErrorAttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[5]);
}

// ===================================================================

class ErrorInfo::_Internal {
 public:
};

ErrorInfo::ErrorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ErrorInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.ErrorInfo)
}
ErrorInfo::ErrorInfo(const ErrorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ErrorInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.error_attributes_)*/{}
    , decltype(_impl_.error_type_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.stack_trace_){}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.error_attributes_.MergeFrom(from._impl_.error_attributes_);
  _impl_.error_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_type().empty()) {
    _this->_impl_.error_type_.Set(from._internal_error_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stack_trace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stack_trace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stack_trace().empty()) {
    _this->_impl_.stack_trace_.Set(from._internal_stack_trace(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_code().empty()) {
    _this->_impl_.error_code_.Set(from._internal_error_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.ErrorInfo)
}

inline void ErrorInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.error_attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.error_type_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.stack_trace_){}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stack_trace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stack_trace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ErrorInfo::~ErrorInfo() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.ErrorInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ErrorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_attributes_.Destruct();
  _impl_.error_attributes_.~MapField();
  _impl_.error_type_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.stack_trace_.Destroy();
  _impl_.error_code_.Destroy();
}

void ErrorInfo::ArenaDtor(void* object) {
  ErrorInfo* _this = reinterpret_cast< ErrorInfo* >(object);
  _this->_impl_.error_attributes_.Destruct();
}
void ErrorInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ErrorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.ErrorInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_attributes_.Clear();
  _impl_.error_type_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  _impl_.stack_trace_.ClearToEmpty();
  _impl_.error_code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string error_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.ErrorInfo.error_type"));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.ErrorInfo.error_message"));
        } else
          goto handle_unusual;
        continue;
      // string stack_trace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_stack_trace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.ErrorInfo.stack_trace"));
        } else
          goto handle_unusual;
        continue;
      // string error_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.ErrorInfo.error_code"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> error_attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.error_attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrorInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.ErrorInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_type = 1;
  if (!this->_internal_error_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_type().data(), static_cast<int>(this->_internal_error_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.ErrorInfo.error_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_type(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.ErrorInfo.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  // string stack_trace = 3;
  if (!this->_internal_stack_trace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stack_trace().data(), static_cast<int>(this->_internal_stack_trace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.ErrorInfo.stack_trace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stack_trace(), target);
  }

  // string error_code = 4;
  if (!this->_internal_error_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_code().data(), static_cast<int>(this->_internal_error_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.ErrorInfo.error_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_code(), target);
  }

  // map<string, string> error_attributes = 5;
  if (!this->_internal_error_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ErrorInfo_ErrorAttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_error_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.ErrorInfo.ErrorAttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.ErrorInfo.ErrorAttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.ErrorInfo)
  return target;
}

size_t ErrorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.ErrorInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> error_attributes = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_error_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_error_attributes().begin();
      it != this->_internal_error_attributes().end(); ++it) {
    total_size += ErrorInfo_ErrorAttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string error_type = 1;
  if (!this->_internal_error_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_type());
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // string stack_trace = 3;
  if (!this->_internal_stack_trace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stack_trace());
  }

  // string error_code = 4;
  if (!this->_internal_error_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ErrorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorInfo::GetClassData() const { return &_class_data_; }


void ErrorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ErrorInfo*>(&to_msg);
  auto& from = static_cast<const ErrorInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.ErrorInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.error_attributes_.MergeFrom(from._impl_.error_attributes_);
  if (!from._internal_error_type().empty()) {
    _this->_internal_set_error_type(from._internal_error_type());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_stack_trace().empty()) {
    _this->_internal_set_stack_trace(from._internal_stack_trace());
  }
  if (!from._internal_error_code().empty()) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorInfo::CopyFrom(const ErrorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.ErrorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorInfo::IsInitialized() const {
  return true;
}

void ErrorInfo::InternalSwap(ErrorInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.error_attributes_.InternalSwap(&other->_impl_.error_attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_type_, lhs_arena,
      &other->_impl_.error_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stack_trace_, lhs_arena,
      &other->_impl_.stack_trace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_code_, lhs_arena,
      &other->_impl_.error_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[6]);
}

// ===================================================================

class DestinationFlags::_Internal {
 public:
  static const ::unhinged::observability::v1::DataLakeOptions& data_lake_options(const DestinationFlags* msg);
};

const ::unhinged::observability::v1::DataLakeOptions&
DestinationFlags::_Internal::data_lake_options(const DestinationFlags* msg) {
  return *msg->_impl_.data_lake_options_;
}
DestinationFlags::DestinationFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.DestinationFlags)
}
DestinationFlags::DestinationFlags(const DestinationFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DestinationFlags* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_lake_options_){nullptr}
    , decltype(_impl_.console_){}
    , decltype(_impl_.cdc_stream_){}
    , decltype(_impl_.data_lake_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_lake_options()) {
    _this->_impl_.data_lake_options_ = new ::unhinged::observability::v1::DataLakeOptions(*from._impl_.data_lake_options_);
  }
  ::memcpy(&_impl_.console_, &from._impl_.console_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_lake_) -
    reinterpret_cast<char*>(&_impl_.console_)) + sizeof(_impl_.data_lake_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.DestinationFlags)
}

inline void DestinationFlags::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_lake_options_){nullptr}
    , decltype(_impl_.console_){false}
    , decltype(_impl_.cdc_stream_){false}
    , decltype(_impl_.data_lake_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DestinationFlags::~DestinationFlags() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.DestinationFlags)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DestinationFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_lake_options_;
}

void DestinationFlags::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DestinationFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.DestinationFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_lake_options_ != nullptr) {
    delete _impl_.data_lake_options_;
  }
  _impl_.data_lake_options_ = nullptr;
  ::memset(&_impl_.console_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.data_lake_) -
      reinterpret_cast<char*>(&_impl_.console_)) + sizeof(_impl_.data_lake_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestinationFlags::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool console = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.console_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cdc_stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cdc_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool data_lake = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.data_lake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.DataLakeOptions data_lake_options = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_lake_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DestinationFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.DestinationFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool console = 1;
  if (this->_internal_console() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_console(), target);
  }

  // bool cdc_stream = 2;
  if (this->_internal_cdc_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_cdc_stream(), target);
  }

  // bool data_lake = 3;
  if (this->_internal_data_lake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_data_lake(), target);
  }

  // .unhinged.observability.v1.DataLakeOptions data_lake_options = 10;
  if (this->_internal_has_data_lake_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::data_lake_options(this),
        _Internal::data_lake_options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.DestinationFlags)
  return target;
}

size_t DestinationFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.DestinationFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unhinged.observability.v1.DataLakeOptions data_lake_options = 10;
  if (this->_internal_has_data_lake_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_lake_options_);
  }

  // bool console = 1;
  if (this->_internal_console() != 0) {
    total_size += 1 + 1;
  }

  // bool cdc_stream = 2;
  if (this->_internal_cdc_stream() != 0) {
    total_size += 1 + 1;
  }

  // bool data_lake = 3;
  if (this->_internal_data_lake() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DestinationFlags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DestinationFlags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DestinationFlags::GetClassData() const { return &_class_data_; }


void DestinationFlags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DestinationFlags*>(&to_msg);
  auto& from = static_cast<const DestinationFlags&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.DestinationFlags)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data_lake_options()) {
    _this->_internal_mutable_data_lake_options()->::unhinged::observability::v1::DataLakeOptions::MergeFrom(
        from._internal_data_lake_options());
  }
  if (from._internal_console() != 0) {
    _this->_internal_set_console(from._internal_console());
  }
  if (from._internal_cdc_stream() != 0) {
    _this->_internal_set_cdc_stream(from._internal_cdc_stream());
  }
  if (from._internal_data_lake() != 0) {
    _this->_internal_set_data_lake(from._internal_data_lake());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DestinationFlags::CopyFrom(const DestinationFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.DestinationFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationFlags::IsInitialized() const {
  return true;
}

void DestinationFlags::InternalSwap(DestinationFlags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DestinationFlags, _impl_.data_lake_)
      + sizeof(DestinationFlags::_impl_.data_lake_)
      - PROTOBUF_FIELD_OFFSET(DestinationFlags, _impl_.data_lake_options_)>(
          reinterpret_cast<char*>(&_impl_.data_lake_options_),
          reinterpret_cast<char*>(&other->_impl_.data_lake_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DestinationFlags::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[7]);
}

// ===================================================================

class DataLakeOptions::_Internal {
 public:
};

DataLakeOptions::DataLakeOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.DataLakeOptions)
}
DataLakeOptions::DataLakeOptions(const DataLakeOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataLakeOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){}
    , decltype(_impl_.partition_strategy_){}
    , decltype(_impl_.batch_size_){}
    , decltype(_impl_.flush_interval_seconds_){}
    , decltype(_impl_.compression_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_strategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_strategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_strategy().empty()) {
    _this->_impl_.partition_strategy_.Set(from._internal_partition_strategy(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.batch_size_, &from._impl_.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compression_) -
    reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.compression_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.DataLakeOptions)
}

inline void DataLakeOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){}
    , decltype(_impl_.partition_strategy_){}
    , decltype(_impl_.batch_size_){0}
    , decltype(_impl_.flush_interval_seconds_){0}
    , decltype(_impl_.compression_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_strategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_strategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataLakeOptions::~DataLakeOptions() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.DataLakeOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataLakeOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_name_.Destroy();
  _impl_.partition_strategy_.Destroy();
}

void DataLakeOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataLakeOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.DataLakeOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_name_.ClearToEmpty();
  _impl_.partition_strategy_.ClearToEmpty();
  ::memset(&_impl_.batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.compression_) -
      reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.compression_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataLakeOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.DataLakeOptions.table_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_strategy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partition_strategy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.DataLakeOptions.partition_strategy"));
        } else
          goto handle_unusual;
        continue;
      // int32 batch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flush_interval_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.flush_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.CompressionType compression = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compression(static_cast<::unhinged::observability::v1::CompressionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataLakeOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.DataLakeOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.DataLakeOptions.table_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // string partition_strategy = 2;
  if (!this->_internal_partition_strategy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_strategy().data(), static_cast<int>(this->_internal_partition_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.DataLakeOptions.partition_strategy");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partition_strategy(), target);
  }

  // int32 batch_size = 3;
  if (this->_internal_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_batch_size(), target);
  }

  // int32 flush_interval_seconds = 4;
  if (this->_internal_flush_interval_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_flush_interval_seconds(), target);
  }

  // .unhinged.observability.v1.CompressionType compression = 5;
  if (this->_internal_compression() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_compression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.DataLakeOptions)
  return target;
}

size_t DataLakeOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.DataLakeOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // string partition_strategy = 2;
  if (!this->_internal_partition_strategy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_strategy());
  }

  // int32 batch_size = 3;
  if (this->_internal_batch_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batch_size());
  }

  // int32 flush_interval_seconds = 4;
  if (this->_internal_flush_interval_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flush_interval_seconds());
  }

  // .unhinged.observability.v1.CompressionType compression = 5;
  if (this->_internal_compression() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_compression());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataLakeOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataLakeOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataLakeOptions::GetClassData() const { return &_class_data_; }


void DataLakeOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataLakeOptions*>(&to_msg);
  auto& from = static_cast<const DataLakeOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.DataLakeOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  if (!from._internal_partition_strategy().empty()) {
    _this->_internal_set_partition_strategy(from._internal_partition_strategy());
  }
  if (from._internal_batch_size() != 0) {
    _this->_internal_set_batch_size(from._internal_batch_size());
  }
  if (from._internal_flush_interval_seconds() != 0) {
    _this->_internal_set_flush_interval_seconds(from._internal_flush_interval_seconds());
  }
  if (from._internal_compression() != 0) {
    _this->_internal_set_compression(from._internal_compression());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataLakeOptions::CopyFrom(const DataLakeOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.DataLakeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataLakeOptions::IsInitialized() const {
  return true;
}

void DataLakeOptions::InternalSwap(DataLakeOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_strategy_, lhs_arena,
      &other->_impl_.partition_strategy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataLakeOptions, _impl_.compression_)
      + sizeof(DataLakeOptions::_impl_.compression_)
      - PROTOBUF_FIELD_OFFSET(DataLakeOptions, _impl_.batch_size_)>(
          reinterpret_cast<char*>(&_impl_.batch_size_),
          reinterpret_cast<char*>(&other->_impl_.batch_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataLakeOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[8]);
}

// ===================================================================

PartitionInfo_CustomPartitionsEntry_DoNotUse::PartitionInfo_CustomPartitionsEntry_DoNotUse() {}
PartitionInfo_CustomPartitionsEntry_DoNotUse::PartitionInfo_CustomPartitionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PartitionInfo_CustomPartitionsEntry_DoNotUse::MergeFrom(const PartitionInfo_CustomPartitionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PartitionInfo_CustomPartitionsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[9]);
}

// ===================================================================

class PartitionInfo::_Internal {
 public:
};

PartitionInfo::PartitionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PartitionInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.PartitionInfo)
}
PartitionInfo::PartitionInfo(const PartitionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartitionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.custom_partitions_)*/{}
    , decltype(_impl_.date_partition_){}
    , decltype(_impl_.hour_partition_){}
    , decltype(_impl_.service_partition_){}
    , decltype(_impl_.level_partition_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.custom_partitions_.MergeFrom(from._impl_.custom_partitions_);
  _impl_.date_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_date_partition().empty()) {
    _this->_impl_.date_partition_.Set(from._internal_date_partition(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hour_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hour_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hour_partition().empty()) {
    _this->_impl_.hour_partition_.Set(from._internal_hour_partition(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_partition().empty()) {
    _this->_impl_.service_partition_.Set(from._internal_service_partition(), 
      _this->GetArenaForAllocation());
  }
  _impl_.level_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_level_partition().empty()) {
    _this->_impl_.level_partition_.Set(from._internal_level_partition(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.PartitionInfo)
}

inline void PartitionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.custom_partitions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.date_partition_){}
    , decltype(_impl_.hour_partition_){}
    , decltype(_impl_.service_partition_){}
    , decltype(_impl_.level_partition_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.date_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hour_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hour_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.level_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PartitionInfo::~PartitionInfo() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.PartitionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PartitionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_partitions_.Destruct();
  _impl_.custom_partitions_.~MapField();
  _impl_.date_partition_.Destroy();
  _impl_.hour_partition_.Destroy();
  _impl_.service_partition_.Destroy();
  _impl_.level_partition_.Destroy();
}

void PartitionInfo::ArenaDtor(void* object) {
  PartitionInfo* _this = reinterpret_cast< PartitionInfo* >(object);
  _this->_impl_.custom_partitions_.Destruct();
}
void PartitionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartitionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.PartitionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custom_partitions_.Clear();
  _impl_.date_partition_.ClearToEmpty();
  _impl_.hour_partition_.ClearToEmpty();
  _impl_.service_partition_.ClearToEmpty();
  _impl_.level_partition_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartitionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string date_partition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_date_partition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.PartitionInfo.date_partition"));
        } else
          goto handle_unusual;
        continue;
      // string hour_partition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hour_partition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.PartitionInfo.hour_partition"));
        } else
          goto handle_unusual;
        continue;
      // string service_partition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_service_partition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.PartitionInfo.service_partition"));
        } else
          goto handle_unusual;
        continue;
      // string level_partition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_level_partition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.PartitionInfo.level_partition"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> custom_partitions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.custom_partitions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartitionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.PartitionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string date_partition = 1;
  if (!this->_internal_date_partition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_partition().data(), static_cast<int>(this->_internal_date_partition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.PartitionInfo.date_partition");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_date_partition(), target);
  }

  // string hour_partition = 2;
  if (!this->_internal_hour_partition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hour_partition().data(), static_cast<int>(this->_internal_hour_partition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.PartitionInfo.hour_partition");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hour_partition(), target);
  }

  // string service_partition = 3;
  if (!this->_internal_service_partition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_partition().data(), static_cast<int>(this->_internal_service_partition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.PartitionInfo.service_partition");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_partition(), target);
  }

  // string level_partition = 4;
  if (!this->_internal_level_partition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level_partition().data(), static_cast<int>(this->_internal_level_partition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.PartitionInfo.level_partition");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_level_partition(), target);
  }

  // map<string, string> custom_partitions = 10;
  if (!this->_internal_custom_partitions().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = PartitionInfo_CustomPartitionsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_custom_partitions();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.PartitionInfo.CustomPartitionsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.PartitionInfo.CustomPartitionsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.PartitionInfo)
  return target;
}

size_t PartitionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.PartitionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> custom_partitions = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_custom_partitions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_custom_partitions().begin();
      it != this->_internal_custom_partitions().end(); ++it) {
    total_size += PartitionInfo_CustomPartitionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string date_partition = 1;
  if (!this->_internal_date_partition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_partition());
  }

  // string hour_partition = 2;
  if (!this->_internal_hour_partition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hour_partition());
  }

  // string service_partition = 3;
  if (!this->_internal_service_partition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_partition());
  }

  // string level_partition = 4;
  if (!this->_internal_level_partition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level_partition());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartitionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartitionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartitionInfo::GetClassData() const { return &_class_data_; }


void PartitionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartitionInfo*>(&to_msg);
  auto& from = static_cast<const PartitionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.PartitionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custom_partitions_.MergeFrom(from._impl_.custom_partitions_);
  if (!from._internal_date_partition().empty()) {
    _this->_internal_set_date_partition(from._internal_date_partition());
  }
  if (!from._internal_hour_partition().empty()) {
    _this->_internal_set_hour_partition(from._internal_hour_partition());
  }
  if (!from._internal_service_partition().empty()) {
    _this->_internal_set_service_partition(from._internal_service_partition());
  }
  if (!from._internal_level_partition().empty()) {
    _this->_internal_set_level_partition(from._internal_level_partition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartitionInfo::CopyFrom(const PartitionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.PartitionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionInfo::IsInitialized() const {
  return true;
}

void PartitionInfo::InternalSwap(PartitionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.custom_partitions_.InternalSwap(&other->_impl_.custom_partitions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.date_partition_, lhs_arena,
      &other->_impl_.date_partition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hour_partition_, lhs_arena,
      &other->_impl_.hour_partition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_partition_, lhs_arena,
      &other->_impl_.service_partition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.level_partition_, lhs_arena,
      &other->_impl_.level_partition_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PartitionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[10]);
}

// ===================================================================

class TraceEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const TraceEvent* msg);
  static const ::unhinged::observability::v1::TraceContext& trace_context(const TraceEvent* msg);
  static const ::unhinged::observability::v1::Resource& resource(const TraceEvent* msg);
  static const ::unhinged::observability::v1::SpanData& span(const TraceEvent* msg);
  static const ::unhinged::observability::v1::DestinationFlags& destinations(const TraceEvent* msg);
  static const ::unhinged::observability::v1::PartitionInfo& partition_info(const TraceEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TraceEvent::_Internal::timestamp(const TraceEvent* msg) {
  return *msg->_impl_.timestamp_;
}
const ::unhinged::observability::v1::TraceContext&
TraceEvent::_Internal::trace_context(const TraceEvent* msg) {
  return *msg->_impl_.trace_context_;
}
const ::unhinged::observability::v1::Resource&
TraceEvent::_Internal::resource(const TraceEvent* msg) {
  return *msg->_impl_.resource_;
}
const ::unhinged::observability::v1::SpanData&
TraceEvent::_Internal::span(const TraceEvent* msg) {
  return *msg->_impl_.span_;
}
const ::unhinged::observability::v1::DestinationFlags&
TraceEvent::_Internal::destinations(const TraceEvent* msg) {
  return *msg->_impl_.destinations_;
}
const ::unhinged::observability::v1::PartitionInfo&
TraceEvent::_Internal::partition_info(const TraceEvent* msg) {
  return *msg->_impl_.partition_info_;
}
void TraceEvent::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
TraceEvent::TraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.TraceEvent)
}
TraceEvent::TraceEvent(const TraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.trace_context_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.span_){nullptr}
    , decltype(_impl_.destinations_){nullptr}
    , decltype(_impl_.partition_info_){nullptr}
    , decltype(_impl_.sequence_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_type().empty()) {
    _this->_impl_.event_type_.Set(from._internal_event_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_trace_context()) {
    _this->_impl_.trace_context_ = new ::unhinged::observability::v1::TraceContext(*from._impl_.trace_context_);
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::unhinged::observability::v1::Resource(*from._impl_.resource_);
  }
  if (from._internal_has_span()) {
    _this->_impl_.span_ = new ::unhinged::observability::v1::SpanData(*from._impl_.span_);
  }
  if (from._internal_has_destinations()) {
    _this->_impl_.destinations_ = new ::unhinged::observability::v1::DestinationFlags(*from._impl_.destinations_);
  }
  if (from._internal_has_partition_info()) {
    _this->_impl_.partition_info_ = new ::unhinged::observability::v1::PartitionInfo(*from._impl_.partition_info_);
  }
  _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.TraceEvent)
}

inline void TraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.trace_context_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.span_){nullptr}
    , decltype(_impl_.destinations_){nullptr}
    , decltype(_impl_.partition_info_){nullptr}
    , decltype(_impl_.sequence_number_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceEvent::~TraceEvent() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.TraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_id_.Destroy();
  _impl_.event_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.trace_context_;
  if (this != internal_default_instance()) delete _impl_.resource_;
  if (this != internal_default_instance()) delete _impl_.span_;
  if (this != internal_default_instance()) delete _impl_.destinations_;
  if (this != internal_default_instance()) delete _impl_.partition_info_;
}

void TraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.TraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_id_.ClearToEmpty();
  _impl_.event_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trace_context_ != nullptr) {
    delete _impl_.trace_context_;
  }
  _impl_.trace_context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.span_ != nullptr) {
    delete _impl_.span_;
  }
  _impl_.span_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.destinations_ != nullptr) {
    delete _impl_.destinations_;
  }
  _impl_.destinations_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.partition_info_ != nullptr) {
    delete _impl_.partition_info_;
  }
  _impl_.partition_info_ = nullptr;
  _impl_.sequence_number_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceEvent.event_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string event_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_event_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceEvent.event_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.TraceContext trace_context = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.Resource resource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.SpanData span = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_span(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.DestinationFlags destinations = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_destinations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.PartitionInfo partition_info = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_partition_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.TraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceEvent.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string event_type = 3;
  if (!this->_internal_event_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_type().data(), static_cast<int>(this->_internal_event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceEvent.event_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_event_type(), target);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sequence_number(), target);
  }

  // .unhinged.observability.v1.TraceContext trace_context = 5;
  if (this->_internal_has_trace_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::trace_context(this),
        _Internal::trace_context(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.Resource resource = 6;
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.SpanData span = 10;
  if (this->_internal_has_span()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::span(this),
        _Internal::span(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.DestinationFlags destinations = 20;
  if (this->_internal_has_destinations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::destinations(this),
        _Internal::destinations(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.PartitionInfo partition_info = 25;
  if (this->_internal_has_partition_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::partition_info(this),
        _Internal::partition_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.TraceEvent)
  return target;
}

size_t TraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.TraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // string event_type = 3;
  if (!this->_internal_event_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_type());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .unhinged.observability.v1.TraceContext trace_context = 5;
  if (this->_internal_has_trace_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trace_context_);
  }

  // .unhinged.observability.v1.Resource resource = 6;
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  // .unhinged.observability.v1.SpanData span = 10;
  if (this->_internal_has_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.span_);
  }

  // .unhinged.observability.v1.DestinationFlags destinations = 20;
  if (this->_internal_has_destinations()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destinations_);
  }

  // .unhinged.observability.v1.PartitionInfo partition_info = 25;
  if (this->_internal_has_partition_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.partition_info_);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequence_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceEvent::GetClassData() const { return &_class_data_; }


void TraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceEvent*>(&to_msg);
  auto& from = static_cast<const TraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.TraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (!from._internal_event_type().empty()) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_trace_context()) {
    _this->_internal_mutable_trace_context()->::unhinged::observability::v1::TraceContext::MergeFrom(
        from._internal_trace_context());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::unhinged::observability::v1::Resource::MergeFrom(
        from._internal_resource());
  }
  if (from._internal_has_span()) {
    _this->_internal_mutable_span()->::unhinged::observability::v1::SpanData::MergeFrom(
        from._internal_span());
  }
  if (from._internal_has_destinations()) {
    _this->_internal_mutable_destinations()->::unhinged::observability::v1::DestinationFlags::MergeFrom(
        from._internal_destinations());
  }
  if (from._internal_has_partition_info()) {
    _this->_internal_mutable_partition_info()->::unhinged::observability::v1::PartitionInfo::MergeFrom(
        from._internal_partition_info());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceEvent::CopyFrom(const TraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.TraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceEvent::IsInitialized() const {
  return true;
}

void TraceEvent::InternalSwap(TraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_type_, lhs_arena,
      &other->_impl_.event_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceEvent, _impl_.sequence_number_)
      + sizeof(TraceEvent::_impl_.sequence_number_)
      - PROTOBUF_FIELD_OFFSET(TraceEvent, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[11]);
}

// ===================================================================

SpanData_AttributesEntry_DoNotUse::SpanData_AttributesEntry_DoNotUse() {}
SpanData_AttributesEntry_DoNotUse::SpanData_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpanData_AttributesEntry_DoNotUse::MergeFrom(const SpanData_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpanData_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[12]);
}

// ===================================================================

class SpanData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const SpanData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const SpanData* msg);
  static const ::unhinged::observability::v1::SpanStatus& status(const SpanData* msg);
  static const ::unhinged::observability::v1::InstrumentationLibrary& instrumentation_library(const SpanData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SpanData::_Internal::start_time(const SpanData* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SpanData::_Internal::end_time(const SpanData* msg) {
  return *msg->_impl_.end_time_;
}
const ::unhinged::observability::v1::SpanStatus&
SpanData::_Internal::status(const SpanData* msg) {
  return *msg->_impl_.status_;
}
const ::unhinged::observability::v1::InstrumentationLibrary&
SpanData::_Internal::instrumentation_library(const SpanData* msg) {
  return *msg->_impl_.instrumentation_library_;
}
void SpanData::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void SpanData::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
}
SpanData::SpanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SpanData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.SpanData)
}
SpanData::SpanData(const SpanData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.links_){from._impl_.links_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.instrumentation_library_){nullptr}
    , decltype(_impl_.duration_nanos_){}
    , decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_end_time()) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::unhinged::observability::v1::SpanStatus(*from._impl_.status_);
  }
  if (from._internal_has_instrumentation_library()) {
    _this->_impl_.instrumentation_library_ = new ::unhinged::observability::v1::InstrumentationLibrary(*from._impl_.instrumentation_library_);
  }
  ::memcpy(&_impl_.duration_nanos_, &from._impl_.duration_nanos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.duration_nanos_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.SpanData)
}

inline void SpanData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.links_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.instrumentation_library_){nullptr}
    , decltype(_impl_.duration_nanos_){int64_t{0}}
    , decltype(_impl_.kind_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpanData::~SpanData() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.SpanData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SpanData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.events_.~RepeatedPtrField();
  _impl_.links_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.instrumentation_library_;
}

void SpanData::ArenaDtor(void* object) {
  SpanData* _this = reinterpret_cast< SpanData* >(object);
  _this->_impl_.attributes_.Destruct();
}
void SpanData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanData::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.SpanData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.events_.Clear();
  _impl_.links_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.instrumentation_library_ != nullptr) {
    delete _impl_.instrumentation_library_;
  }
  _impl_.instrumentation_library_ = nullptr;
  ::memset(&_impl_.duration_nanos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.kind_) -
      reinterpret_cast<char*>(&_impl_.duration_nanos_)) + sizeof(_impl_.kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.SpanData.name"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.SpanKind kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::unhinged::observability::v1::SpanKind>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 duration_nanos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.duration_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.SpanStatus status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .unhinged.observability.v1.AttributeValue> attributes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.observability.v1.SpanEvent events = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.observability.v1.SpanLink links = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.InstrumentationLibrary instrumentation_library = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrumentation_library(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.SpanData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.SpanData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .unhinged.observability.v1.SpanKind kind = 2;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_kind(), target);
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 4;
  if (this->_internal_has_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  // int64 duration_nanos = 5;
  if (this->_internal_duration_nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_duration_nanos(), target);
  }

  // .unhinged.observability.v1.SpanStatus status = 10;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // map<string, .unhinged.observability.v1.AttributeValue> attributes = 15;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, ::unhinged::observability::v1::AttributeValue>;
    using WireHelper = SpanData_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.SpanData.AttributesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .unhinged.observability.v1.SpanEvent events = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .unhinged.observability.v1.SpanLink links = 25;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_links_size()); i < n; i++) {
    const auto& repfield = this->_internal_links(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.InstrumentationLibrary instrumentation_library = 30;
  if (this->_internal_has_instrumentation_library()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::instrumentation_library(this),
        _Internal::instrumentation_library(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.SpanData)
  return target;
}

size_t SpanData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.SpanData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .unhinged.observability.v1.AttributeValue> attributes = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::unhinged::observability::v1::AttributeValue >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += SpanData_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .unhinged.observability.v1.SpanEvent events = 20;
  total_size += 2UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .unhinged.observability.v1.SpanLink links = 25;
  total_size += 2UL * this->_internal_links_size();
  for (const auto& msg : this->_impl_.links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp end_time = 4;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_time_);
  }

  // .unhinged.observability.v1.SpanStatus status = 10;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .unhinged.observability.v1.InstrumentationLibrary instrumentation_library = 30;
  if (this->_internal_has_instrumentation_library()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrumentation_library_);
  }

  // int64 duration_nanos = 5;
  if (this->_internal_duration_nanos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration_nanos());
  }

  // .unhinged.observability.v1.SpanKind kind = 2;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanData::GetClassData() const { return &_class_data_; }


void SpanData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanData*>(&to_msg);
  auto& from = static_cast<const SpanData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.SpanData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  _this->_impl_.links_.MergeFrom(from._impl_.links_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end_time());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::unhinged::observability::v1::SpanStatus::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_instrumentation_library()) {
    _this->_internal_mutable_instrumentation_library()->::unhinged::observability::v1::InstrumentationLibrary::MergeFrom(
        from._internal_instrumentation_library());
  }
  if (from._internal_duration_nanos() != 0) {
    _this->_internal_set_duration_nanos(from._internal_duration_nanos());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanData::CopyFrom(const SpanData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.SpanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanData::IsInitialized() const {
  return true;
}

void SpanData::InternalSwap(SpanData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  _impl_.links_.InternalSwap(&other->_impl_.links_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanData, _impl_.kind_)
      + sizeof(SpanData::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(SpanData, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[13]);
}

// ===================================================================

class SpanStatus::_Internal {
 public:
};

SpanStatus::SpanStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.SpanStatus)
}
SpanStatus::SpanStatus(const SpanStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.SpanStatus)
}

inline void SpanStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpanStatus::~SpanStatus() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.SpanStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpanStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void SpanStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.SpanStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.observability.v1.StatusCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::unhinged::observability::v1::StatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.SpanStatus.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.SpanStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.observability.v1.StatusCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.SpanStatus.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.SpanStatus)
  return target;
}

size_t SpanStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.SpanStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .unhinged.observability.v1.StatusCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanStatus::GetClassData() const { return &_class_data_; }


void SpanStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanStatus*>(&to_msg);
  auto& from = static_cast<const SpanStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.SpanStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanStatus::CopyFrom(const SpanStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.SpanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanStatus::IsInitialized() const {
  return true;
}

void SpanStatus::InternalSwap(SpanStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[14]);
}

// ===================================================================

SpanEvent_AttributesEntry_DoNotUse::SpanEvent_AttributesEntry_DoNotUse() {}
SpanEvent_AttributesEntry_DoNotUse::SpanEvent_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpanEvent_AttributesEntry_DoNotUse::MergeFrom(const SpanEvent_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpanEvent_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[15]);
}

// ===================================================================

class SpanEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const SpanEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SpanEvent::_Internal::timestamp(const SpanEvent* msg) {
  return *msg->_impl_.timestamp_;
}
void SpanEvent::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
SpanEvent::SpanEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SpanEvent::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.SpanEvent)
}
SpanEvent::SpanEvent(const SpanEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.SpanEvent)
}

inline void SpanEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpanEvent::~SpanEvent() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.SpanEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SpanEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void SpanEvent::ArenaDtor(void* object) {
  SpanEvent* _this = reinterpret_cast< SpanEvent* >(object);
  _this->_impl_.attributes_.Destruct();
}
void SpanEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.SpanEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.SpanEvent.name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .unhinged.observability.v1.AttributeValue> attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.SpanEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.SpanEvent.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // map<string, .unhinged.observability.v1.AttributeValue> attributes = 3;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, ::unhinged::observability::v1::AttributeValue>;
    using WireHelper = SpanEvent_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.SpanEvent.AttributesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.SpanEvent)
  return target;
}

size_t SpanEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.SpanEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .unhinged.observability.v1.AttributeValue> attributes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::unhinged::observability::v1::AttributeValue >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += SpanEvent_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanEvent::GetClassData() const { return &_class_data_; }


void SpanEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanEvent*>(&to_msg);
  auto& from = static_cast<const SpanEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.SpanEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanEvent::CopyFrom(const SpanEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.SpanEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanEvent::IsInitialized() const {
  return true;
}

void SpanEvent::InternalSwap(SpanEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[16]);
}

// ===================================================================

SpanLink_AttributesEntry_DoNotUse::SpanLink_AttributesEntry_DoNotUse() {}
SpanLink_AttributesEntry_DoNotUse::SpanLink_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpanLink_AttributesEntry_DoNotUse::MergeFrom(const SpanLink_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpanLink_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[17]);
}

// ===================================================================

class SpanLink::_Internal {
 public:
  static const ::unhinged::observability::v1::TraceContext& trace_context(const SpanLink* msg);
};

const ::unhinged::observability::v1::TraceContext&
SpanLink::_Internal::trace_context(const SpanLink* msg) {
  return *msg->_impl_.trace_context_;
}
SpanLink::SpanLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SpanLink::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.SpanLink)
}
SpanLink::SpanLink(const SpanLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.trace_context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (from._internal_has_trace_context()) {
    _this->_impl_.trace_context_ = new ::unhinged::observability::v1::TraceContext(*from._impl_.trace_context_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.SpanLink)
}

inline void SpanLink::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.trace_context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpanLink::~SpanLink() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.SpanLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SpanLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  if (this != internal_default_instance()) delete _impl_.trace_context_;
}

void SpanLink::ArenaDtor(void* object) {
  SpanLink* _this = reinterpret_cast< SpanLink* >(object);
  _this->_impl_.attributes_.Destruct();
}
void SpanLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanLink::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.SpanLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.trace_context_ != nullptr) {
    delete _impl_.trace_context_;
  }
  _impl_.trace_context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unhinged.observability.v1.TraceContext trace_context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .unhinged.observability.v1.AttributeValue> attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.SpanLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unhinged.observability.v1.TraceContext trace_context = 1;
  if (this->_internal_has_trace_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trace_context(this),
        _Internal::trace_context(this).GetCachedSize(), target, stream);
  }

  // map<string, .unhinged.observability.v1.AttributeValue> attributes = 2;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, ::unhinged::observability::v1::AttributeValue>;
    using WireHelper = SpanLink_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.SpanLink.AttributesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.SpanLink)
  return target;
}

size_t SpanLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.SpanLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .unhinged.observability.v1.AttributeValue> attributes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::unhinged::observability::v1::AttributeValue >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += SpanLink_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .unhinged.observability.v1.TraceContext trace_context = 1;
  if (this->_internal_has_trace_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trace_context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanLink::GetClassData() const { return &_class_data_; }


void SpanLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanLink*>(&to_msg);
  auto& from = static_cast<const SpanLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.SpanLink)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (from._internal_has_trace_context()) {
    _this->_internal_mutable_trace_context()->::unhinged::observability::v1::TraceContext::MergeFrom(
        from._internal_trace_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanLink::CopyFrom(const SpanLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.SpanLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanLink::IsInitialized() const {
  return true;
}

void SpanLink::InternalSwap(SpanLink* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  swap(_impl_.trace_context_, other->_impl_.trace_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[18]);
}

// ===================================================================

class InstrumentationLibrary::_Internal {
 public:
};

InstrumentationLibrary::InstrumentationLibrary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.InstrumentationLibrary)
}
InstrumentationLibrary::InstrumentationLibrary(const InstrumentationLibrary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstrumentationLibrary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.schema_url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.schema_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_url().empty()) {
    _this->_impl_.schema_url_.Set(from._internal_schema_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.InstrumentationLibrary)
}

inline void InstrumentationLibrary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.schema_url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.schema_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstrumentationLibrary::~InstrumentationLibrary() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.InstrumentationLibrary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstrumentationLibrary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.schema_url_.Destroy();
}

void InstrumentationLibrary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstrumentationLibrary::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.InstrumentationLibrary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.schema_url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentationLibrary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.InstrumentationLibrary.name"));
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.InstrumentationLibrary.version"));
        } else
          goto handle_unusual;
        continue;
      // string schema_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_schema_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.InstrumentationLibrary.schema_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstrumentationLibrary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.InstrumentationLibrary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.InstrumentationLibrary.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.InstrumentationLibrary.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // string schema_url = 3;
  if (!this->_internal_schema_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema_url().data(), static_cast<int>(this->_internal_schema_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.InstrumentationLibrary.schema_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_schema_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.InstrumentationLibrary)
  return target;
}

size_t InstrumentationLibrary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.InstrumentationLibrary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string schema_url = 3;
  if (!this->_internal_schema_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstrumentationLibrary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstrumentationLibrary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstrumentationLibrary::GetClassData() const { return &_class_data_; }


void InstrumentationLibrary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstrumentationLibrary*>(&to_msg);
  auto& from = static_cast<const InstrumentationLibrary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.InstrumentationLibrary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_schema_url().empty()) {
    _this->_internal_set_schema_url(from._internal_schema_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentationLibrary::CopyFrom(const InstrumentationLibrary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.InstrumentationLibrary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentationLibrary::IsInitialized() const {
  return true;
}

void InstrumentationLibrary::InternalSwap(InstrumentationLibrary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_url_, lhs_arena,
      &other->_impl_.schema_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentationLibrary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[19]);
}

// ===================================================================

class AttributeValue::_Internal {
 public:
  static const ::unhinged::observability::v1::AttributeArray& array_value(const AttributeValue* msg);
  static const ::unhinged::observability::v1::AttributeKeyValueList& kvlist_value(const AttributeValue* msg);
};

const ::unhinged::observability::v1::AttributeArray&
AttributeValue::_Internal::array_value(const AttributeValue* msg) {
  return *msg->_impl_.value_.array_value_;
}
const ::unhinged::observability::v1::AttributeKeyValueList&
AttributeValue::_Internal::kvlist_value(const AttributeValue* msg) {
  return *msg->_impl_.value_.kvlist_value_;
}
void AttributeValue::set_allocated_array_value(::unhinged::observability::v1::AttributeArray* array_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (array_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(array_value);
    if (message_arena != submessage_arena) {
      array_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array_value, submessage_arena);
    }
    set_has_array_value();
    _impl_.value_.array_value_ = array_value;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.observability.v1.AttributeValue.array_value)
}
void AttributeValue::set_allocated_kvlist_value(::unhinged::observability::v1::AttributeKeyValueList* kvlist_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (kvlist_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kvlist_value);
    if (message_arena != submessage_arena) {
      kvlist_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvlist_value, submessage_arena);
    }
    set_has_kvlist_value();
    _impl_.value_.kvlist_value_ = kvlist_value;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.observability.v1.AttributeValue.kvlist_value)
}
AttributeValue::AttributeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.AttributeValue)
}
AttributeValue::AttributeValue(const AttributeValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttributeValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBytesValue: {
      _this->_internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case kArrayValue: {
      _this->_internal_mutable_array_value()->::unhinged::observability::v1::AttributeArray::MergeFrom(
          from._internal_array_value());
      break;
    }
    case kKvlistValue: {
      _this->_internal_mutable_kvlist_value()->::unhinged::observability::v1::AttributeKeyValueList::MergeFrom(
          from._internal_kvlist_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.AttributeValue)
}

inline void AttributeValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

AttributeValue::~AttributeValue() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.AttributeValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributeValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void AttributeValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttributeValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.observability.v1.AttributeValue)
  switch (value_case()) {
    case kStringValue: {
      _impl_.value_.string_value_.Destroy();
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBytesValue: {
      _impl_.value_.bytes_value_.Destroy();
      break;
    }
    case kArrayValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.array_value_;
      }
      break;
    }
    case kKvlistValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.kvlist_value_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void AttributeValue::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.AttributeValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string string_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.AttributeValue.string_value"));
        } else
          goto handle_unusual;
        continue;
      // bool bool_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bytes bytes_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bytes_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.AttributeArray array_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_array_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.AttributeKeyValueList kvlist_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvlist_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.AttributeValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.AttributeValue.string_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_value(), target);
  }

  // bool bool_value = 2;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_bool_value(), target);
  }

  // int64 int_value = 3;
  if (_internal_has_int_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_int_value(), target);
  }

  // double double_value = 4;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_double_value(), target);
  }

  // bytes bytes_value = 5;
  if (_internal_has_bytes_value()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_bytes_value(), target);
  }

  // .unhinged.observability.v1.AttributeArray array_value = 6;
  if (_internal_has_array_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::array_value(this),
        _Internal::array_value(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.AttributeKeyValueList kvlist_value = 7;
  if (_internal_has_kvlist_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::kvlist_value(this),
        _Internal::kvlist_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.AttributeValue)
  return target;
}

size_t AttributeValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.AttributeValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // string string_value = 1;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // bool bool_value = 2;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // int64 int_value = 3;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int_value());
      break;
    }
    // double double_value = 4;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bytes bytes_value = 5;
    case kBytesValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_value());
      break;
    }
    // .unhinged.observability.v1.AttributeArray array_value = 6;
    case kArrayValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.array_value_);
      break;
    }
    // .unhinged.observability.v1.AttributeKeyValueList kvlist_value = 7;
    case kKvlistValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.kvlist_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttributeValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeValue::GetClassData() const { return &_class_data_; }


void AttributeValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttributeValue*>(&to_msg);
  auto& from = static_cast<const AttributeValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.AttributeValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBytesValue: {
      _this->_internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case kArrayValue: {
      _this->_internal_mutable_array_value()->::unhinged::observability::v1::AttributeArray::MergeFrom(
          from._internal_array_value());
      break;
    }
    case kKvlistValue: {
      _this->_internal_mutable_kvlist_value()->::unhinged::observability::v1::AttributeKeyValueList::MergeFrom(
          from._internal_kvlist_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeValue::CopyFrom(const AttributeValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.AttributeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeValue::IsInitialized() const {
  return true;
}

void AttributeValue::InternalSwap(AttributeValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[20]);
}

// ===================================================================

class AttributeArray::_Internal {
 public:
};

AttributeArray::AttributeArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.AttributeArray)
}
AttributeArray::AttributeArray(const AttributeArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttributeArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.AttributeArray)
}

inline void AttributeArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AttributeArray::~AttributeArray() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.AttributeArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributeArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void AttributeArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttributeArray::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.AttributeArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.observability.v1.AttributeValue values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.AttributeArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.AttributeValue values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.AttributeArray)
  return target;
}

size_t AttributeArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.AttributeArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.AttributeValue values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttributeArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeArray::GetClassData() const { return &_class_data_; }


void AttributeArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttributeArray*>(&to_msg);
  auto& from = static_cast<const AttributeArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.AttributeArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeArray::CopyFrom(const AttributeArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.AttributeArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeArray::IsInitialized() const {
  return true;
}

void AttributeArray::InternalSwap(AttributeArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[21]);
}

// ===================================================================

class AttributeKeyValueList::_Internal {
 public:
};

AttributeKeyValueList::AttributeKeyValueList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.AttributeKeyValueList)
}
AttributeKeyValueList::AttributeKeyValueList(const AttributeKeyValueList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttributeKeyValueList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.AttributeKeyValueList)
}

inline void AttributeKeyValueList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AttributeKeyValueList::~AttributeKeyValueList() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.AttributeKeyValueList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributeKeyValueList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void AttributeKeyValueList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttributeKeyValueList::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.AttributeKeyValueList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeKeyValueList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.observability.v1.AttributeKeyValue values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeKeyValueList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.AttributeKeyValueList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.AttributeKeyValue values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.AttributeKeyValueList)
  return target;
}

size_t AttributeKeyValueList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.AttributeKeyValueList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.AttributeKeyValue values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeKeyValueList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttributeKeyValueList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeKeyValueList::GetClassData() const { return &_class_data_; }


void AttributeKeyValueList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttributeKeyValueList*>(&to_msg);
  auto& from = static_cast<const AttributeKeyValueList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.AttributeKeyValueList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeKeyValueList::CopyFrom(const AttributeKeyValueList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.AttributeKeyValueList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeKeyValueList::IsInitialized() const {
  return true;
}

void AttributeKeyValueList::InternalSwap(AttributeKeyValueList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeKeyValueList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[22]);
}

// ===================================================================

class AttributeKeyValue::_Internal {
 public:
  static const ::unhinged::observability::v1::AttributeValue& value(const AttributeKeyValue* msg);
};

const ::unhinged::observability::v1::AttributeValue&
AttributeKeyValue::_Internal::value(const AttributeKeyValue* msg) {
  return *msg->_impl_.value_;
}
AttributeKeyValue::AttributeKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.AttributeKeyValue)
}
AttributeKeyValue::AttributeKeyValue(const AttributeKeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttributeKeyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::unhinged::observability::v1::AttributeValue(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.AttributeKeyValue)
}

inline void AttributeKeyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttributeKeyValue::~AttributeKeyValue() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.AttributeKeyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributeKeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void AttributeKeyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttributeKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.AttributeKeyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeKeyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.AttributeKeyValue.key"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.AttributeValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeKeyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.AttributeKeyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.AttributeKeyValue.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .unhinged.observability.v1.AttributeValue value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.AttributeKeyValue)
  return target;
}

size_t AttributeKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.AttributeKeyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .unhinged.observability.v1.AttributeValue value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeKeyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttributeKeyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeKeyValue::GetClassData() const { return &_class_data_; }


void AttributeKeyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttributeKeyValue*>(&to_msg);
  auto& from = static_cast<const AttributeKeyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.AttributeKeyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::unhinged::observability::v1::AttributeValue::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeKeyValue::CopyFrom(const AttributeKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.AttributeKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeKeyValue::IsInitialized() const {
  return true;
}

void AttributeKeyValue::InternalSwap(AttributeKeyValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeKeyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[23]);
}

// ===================================================================

class MetricEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const MetricEvent* msg);
  static const ::unhinged::observability::v1::TraceContext& trace_context(const MetricEvent* msg);
  static const ::unhinged::observability::v1::Resource& resource(const MetricEvent* msg);
  static const ::unhinged::observability::v1::MetricData& metric(const MetricEvent* msg);
  static const ::unhinged::observability::v1::DestinationFlags& destinations(const MetricEvent* msg);
  static const ::unhinged::observability::v1::PartitionInfo& partition_info(const MetricEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MetricEvent::_Internal::timestamp(const MetricEvent* msg) {
  return *msg->_impl_.timestamp_;
}
const ::unhinged::observability::v1::TraceContext&
MetricEvent::_Internal::trace_context(const MetricEvent* msg) {
  return *msg->_impl_.trace_context_;
}
const ::unhinged::observability::v1::Resource&
MetricEvent::_Internal::resource(const MetricEvent* msg) {
  return *msg->_impl_.resource_;
}
const ::unhinged::observability::v1::MetricData&
MetricEvent::_Internal::metric(const MetricEvent* msg) {
  return *msg->_impl_.metric_;
}
const ::unhinged::observability::v1::DestinationFlags&
MetricEvent::_Internal::destinations(const MetricEvent* msg) {
  return *msg->_impl_.destinations_;
}
const ::unhinged::observability::v1::PartitionInfo&
MetricEvent::_Internal::partition_info(const MetricEvent* msg) {
  return *msg->_impl_.partition_info_;
}
void MetricEvent::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
MetricEvent::MetricEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.MetricEvent)
}
MetricEvent::MetricEvent(const MetricEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.trace_context_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.metric_){nullptr}
    , decltype(_impl_.destinations_){nullptr}
    , decltype(_impl_.partition_info_){nullptr}
    , decltype(_impl_.sequence_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_type().empty()) {
    _this->_impl_.event_type_.Set(from._internal_event_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_trace_context()) {
    _this->_impl_.trace_context_ = new ::unhinged::observability::v1::TraceContext(*from._impl_.trace_context_);
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::unhinged::observability::v1::Resource(*from._impl_.resource_);
  }
  if (from._internal_has_metric()) {
    _this->_impl_.metric_ = new ::unhinged::observability::v1::MetricData(*from._impl_.metric_);
  }
  if (from._internal_has_destinations()) {
    _this->_impl_.destinations_ = new ::unhinged::observability::v1::DestinationFlags(*from._impl_.destinations_);
  }
  if (from._internal_has_partition_info()) {
    _this->_impl_.partition_info_ = new ::unhinged::observability::v1::PartitionInfo(*from._impl_.partition_info_);
  }
  _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.MetricEvent)
}

inline void MetricEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.trace_context_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.metric_){nullptr}
    , decltype(_impl_.destinations_){nullptr}
    , decltype(_impl_.partition_info_){nullptr}
    , decltype(_impl_.sequence_number_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetricEvent::~MetricEvent() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.MetricEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_id_.Destroy();
  _impl_.event_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.trace_context_;
  if (this != internal_default_instance()) delete _impl_.resource_;
  if (this != internal_default_instance()) delete _impl_.metric_;
  if (this != internal_default_instance()) delete _impl_.destinations_;
  if (this != internal_default_instance()) delete _impl_.partition_info_;
}

void MetricEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.MetricEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_id_.ClearToEmpty();
  _impl_.event_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trace_context_ != nullptr) {
    delete _impl_.trace_context_;
  }
  _impl_.trace_context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metric_ != nullptr) {
    delete _impl_.metric_;
  }
  _impl_.metric_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.destinations_ != nullptr) {
    delete _impl_.destinations_;
  }
  _impl_.destinations_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.partition_info_ != nullptr) {
    delete _impl_.partition_info_;
  }
  _impl_.partition_info_ = nullptr;
  _impl_.sequence_number_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.MetricEvent.event_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string event_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_event_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.MetricEvent.event_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.TraceContext trace_context = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.Resource resource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.MetricData metric = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_metric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.DestinationFlags destinations = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_destinations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.PartitionInfo partition_info = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_partition_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.MetricEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.MetricEvent.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string event_type = 3;
  if (!this->_internal_event_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_type().data(), static_cast<int>(this->_internal_event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.MetricEvent.event_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_event_type(), target);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sequence_number(), target);
  }

  // .unhinged.observability.v1.TraceContext trace_context = 5;
  if (this->_internal_has_trace_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::trace_context(this),
        _Internal::trace_context(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.Resource resource = 6;
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.MetricData metric = 10;
  if (this->_internal_has_metric()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::metric(this),
        _Internal::metric(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.DestinationFlags destinations = 20;
  if (this->_internal_has_destinations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::destinations(this),
        _Internal::destinations(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.PartitionInfo partition_info = 25;
  if (this->_internal_has_partition_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::partition_info(this),
        _Internal::partition_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.MetricEvent)
  return target;
}

size_t MetricEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.MetricEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // string event_type = 3;
  if (!this->_internal_event_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_type());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .unhinged.observability.v1.TraceContext trace_context = 5;
  if (this->_internal_has_trace_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trace_context_);
  }

  // .unhinged.observability.v1.Resource resource = 6;
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  // .unhinged.observability.v1.MetricData metric = 10;
  if (this->_internal_has_metric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metric_);
  }

  // .unhinged.observability.v1.DestinationFlags destinations = 20;
  if (this->_internal_has_destinations()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destinations_);
  }

  // .unhinged.observability.v1.PartitionInfo partition_info = 25;
  if (this->_internal_has_partition_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.partition_info_);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequence_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricEvent::GetClassData() const { return &_class_data_; }


void MetricEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricEvent*>(&to_msg);
  auto& from = static_cast<const MetricEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.MetricEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (!from._internal_event_type().empty()) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_trace_context()) {
    _this->_internal_mutable_trace_context()->::unhinged::observability::v1::TraceContext::MergeFrom(
        from._internal_trace_context());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::unhinged::observability::v1::Resource::MergeFrom(
        from._internal_resource());
  }
  if (from._internal_has_metric()) {
    _this->_internal_mutable_metric()->::unhinged::observability::v1::MetricData::MergeFrom(
        from._internal_metric());
  }
  if (from._internal_has_destinations()) {
    _this->_internal_mutable_destinations()->::unhinged::observability::v1::DestinationFlags::MergeFrom(
        from._internal_destinations());
  }
  if (from._internal_has_partition_info()) {
    _this->_internal_mutable_partition_info()->::unhinged::observability::v1::PartitionInfo::MergeFrom(
        from._internal_partition_info());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricEvent::CopyFrom(const MetricEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.MetricEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricEvent::IsInitialized() const {
  return true;
}

void MetricEvent::InternalSwap(MetricEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_type_, lhs_arena,
      &other->_impl_.event_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricEvent, _impl_.sequence_number_)
      + sizeof(MetricEvent::_impl_.sequence_number_)
      - PROTOBUF_FIELD_OFFSET(MetricEvent, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[24]);
}

// ===================================================================

class MetricData::_Internal {
 public:
  static const ::unhinged::observability::v1::GaugeData& gauge(const MetricData* msg);
  static const ::unhinged::observability::v1::CounterData& counter(const MetricData* msg);
  static const ::unhinged::observability::v1::HistogramData& histogram(const MetricData* msg);
  static const ::unhinged::observability::v1::SummaryData& summary(const MetricData* msg);
  static const ::unhinged::observability::v1::InstrumentationLibrary& instrumentation_library(const MetricData* msg);
};

const ::unhinged::observability::v1::GaugeData&
MetricData::_Internal::gauge(const MetricData* msg) {
  return *msg->_impl_.data_.gauge_;
}
const ::unhinged::observability::v1::CounterData&
MetricData::_Internal::counter(const MetricData* msg) {
  return *msg->_impl_.data_.counter_;
}
const ::unhinged::observability::v1::HistogramData&
MetricData::_Internal::histogram(const MetricData* msg) {
  return *msg->_impl_.data_.histogram_;
}
const ::unhinged::observability::v1::SummaryData&
MetricData::_Internal::summary(const MetricData* msg) {
  return *msg->_impl_.data_.summary_;
}
const ::unhinged::observability::v1::InstrumentationLibrary&
MetricData::_Internal::instrumentation_library(const MetricData* msg) {
  return *msg->_impl_.instrumentation_library_;
}
void MetricData::set_allocated_gauge(::unhinged::observability::v1::GaugeData* gauge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (gauge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gauge);
    if (message_arena != submessage_arena) {
      gauge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gauge, submessage_arena);
    }
    set_has_gauge();
    _impl_.data_.gauge_ = gauge;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.observability.v1.MetricData.gauge)
}
void MetricData::set_allocated_counter(::unhinged::observability::v1::CounterData* counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(counter);
    if (message_arena != submessage_arena) {
      counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counter, submessage_arena);
    }
    set_has_counter();
    _impl_.data_.counter_ = counter;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.observability.v1.MetricData.counter)
}
void MetricData::set_allocated_histogram(::unhinged::observability::v1::HistogramData* histogram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (histogram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(histogram);
    if (message_arena != submessage_arena) {
      histogram = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histogram, submessage_arena);
    }
    set_has_histogram();
    _impl_.data_.histogram_ = histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.observability.v1.MetricData.histogram)
}
void MetricData::set_allocated_summary(::unhinged::observability::v1::SummaryData* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    set_has_summary();
    _impl_.data_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_set_allocated:unhinged.observability.v1.MetricData.summary)
}
MetricData::MetricData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.MetricData)
}
MetricData::MetricData(const MetricData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.unit_){}
    , decltype(_impl_.instrumentation_library_){nullptr}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unit().empty()) {
    _this->_impl_.unit_.Set(from._internal_unit(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_instrumentation_library()) {
    _this->_impl_.instrumentation_library_ = new ::unhinged::observability::v1::InstrumentationLibrary(*from._impl_.instrumentation_library_);
  }
  clear_has_data();
  switch (from.data_case()) {
    case kGauge: {
      _this->_internal_mutable_gauge()->::unhinged::observability::v1::GaugeData::MergeFrom(
          from._internal_gauge());
      break;
    }
    case kCounter: {
      _this->_internal_mutable_counter()->::unhinged::observability::v1::CounterData::MergeFrom(
          from._internal_counter());
      break;
    }
    case kHistogram: {
      _this->_internal_mutable_histogram()->::unhinged::observability::v1::HistogramData::MergeFrom(
          from._internal_histogram());
      break;
    }
    case kSummary: {
      _this->_internal_mutable_summary()->::unhinged::observability::v1::SummaryData::MergeFrom(
          from._internal_summary());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.MetricData)
}

inline void MetricData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.unit_){}
    , decltype(_impl_.instrumentation_library_){nullptr}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_data();
}

MetricData::~MetricData() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.MetricData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.unit_.Destroy();
  if (this != internal_default_instance()) delete _impl_.instrumentation_library_;
  if (has_data()) {
    clear_data();
  }
}

void MetricData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricData::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.observability.v1.MetricData)
  switch (data_case()) {
    case kGauge: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.gauge_;
      }
      break;
    }
    case kCounter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.counter_;
      }
      break;
    }
    case kHistogram: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.histogram_;
      }
      break;
    }
    case kSummary: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.summary_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void MetricData::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.MetricData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.unit_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.instrumentation_library_ != nullptr) {
    delete _impl_.instrumentation_library_;
  }
  _impl_.instrumentation_library_ = nullptr;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.MetricData.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.MetricData.description"));
        } else
          goto handle_unusual;
        continue;
      // string unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_unit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.MetricData.unit"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.GaugeData gauge = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_gauge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.CounterData counter = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_counter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.HistogramData histogram = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogram(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.SummaryData summary = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.InstrumentationLibrary instrumentation_library = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrumentation_library(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.MetricData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.MetricData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.MetricData.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string unit = 3;
  if (!this->_internal_unit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.MetricData.unit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_unit(), target);
  }

  // .unhinged.observability.v1.GaugeData gauge = 10;
  if (_internal_has_gauge()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::gauge(this),
        _Internal::gauge(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.CounterData counter = 11;
  if (_internal_has_counter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::counter(this),
        _Internal::counter(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.HistogramData histogram = 12;
  if (_internal_has_histogram()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::histogram(this),
        _Internal::histogram(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.SummaryData summary = 13;
  if (_internal_has_summary()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::summary(this),
        _Internal::summary(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.InstrumentationLibrary instrumentation_library = 20;
  if (this->_internal_has_instrumentation_library()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::instrumentation_library(this),
        _Internal::instrumentation_library(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.MetricData)
  return target;
}

size_t MetricData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.MetricData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string unit = 3;
  if (!this->_internal_unit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  // .unhinged.observability.v1.InstrumentationLibrary instrumentation_library = 20;
  if (this->_internal_has_instrumentation_library()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrumentation_library_);
  }

  switch (data_case()) {
    // .unhinged.observability.v1.GaugeData gauge = 10;
    case kGauge: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.gauge_);
      break;
    }
    // .unhinged.observability.v1.CounterData counter = 11;
    case kCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.counter_);
      break;
    }
    // .unhinged.observability.v1.HistogramData histogram = 12;
    case kHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.histogram_);
      break;
    }
    // .unhinged.observability.v1.SummaryData summary = 13;
    case kSummary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.summary_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricData::GetClassData() const { return &_class_data_; }


void MetricData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricData*>(&to_msg);
  auto& from = static_cast<const MetricData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.MetricData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_unit().empty()) {
    _this->_internal_set_unit(from._internal_unit());
  }
  if (from._internal_has_instrumentation_library()) {
    _this->_internal_mutable_instrumentation_library()->::unhinged::observability::v1::InstrumentationLibrary::MergeFrom(
        from._internal_instrumentation_library());
  }
  switch (from.data_case()) {
    case kGauge: {
      _this->_internal_mutable_gauge()->::unhinged::observability::v1::GaugeData::MergeFrom(
          from._internal_gauge());
      break;
    }
    case kCounter: {
      _this->_internal_mutable_counter()->::unhinged::observability::v1::CounterData::MergeFrom(
          from._internal_counter());
      break;
    }
    case kHistogram: {
      _this->_internal_mutable_histogram()->::unhinged::observability::v1::HistogramData::MergeFrom(
          from._internal_histogram());
      break;
    }
    case kSummary: {
      _this->_internal_mutable_summary()->::unhinged::observability::v1::SummaryData::MergeFrom(
          from._internal_summary());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricData::CopyFrom(const MetricData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.MetricData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricData::IsInitialized() const {
  return true;
}

void MetricData::InternalSwap(MetricData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unit_, lhs_arena,
      &other->_impl_.unit_, rhs_arena
  );
  swap(_impl_.instrumentation_library_, other->_impl_.instrumentation_library_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[25]);
}

// ===================================================================

class GaugeData::_Internal {
 public:
};

GaugeData::GaugeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.GaugeData)
}
GaugeData::GaugeData(const GaugeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GaugeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_points_){from._impl_.data_points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.GaugeData)
}

inline void GaugeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GaugeData::~GaugeData() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.GaugeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GaugeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_points_.~RepeatedPtrField();
}

void GaugeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GaugeData::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.GaugeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GaugeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.observability.v1.NumberDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GaugeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.GaugeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.NumberDataPoint data_points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.GaugeData)
  return target;
}

size_t GaugeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.GaugeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.NumberDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->_impl_.data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GaugeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GaugeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GaugeData::GetClassData() const { return &_class_data_; }


void GaugeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GaugeData*>(&to_msg);
  auto& from = static_cast<const GaugeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.GaugeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_points_.MergeFrom(from._impl_.data_points_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GaugeData::CopyFrom(const GaugeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.GaugeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaugeData::IsInitialized() const {
  return true;
}

void GaugeData::InternalSwap(GaugeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_points_.InternalSwap(&other->_impl_.data_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GaugeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[26]);
}

// ===================================================================

class CounterData::_Internal {
 public:
};

CounterData::CounterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.CounterData)
}
CounterData::CounterData(const CounterData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CounterData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_points_){from._impl_.data_points_}
    , decltype(_impl_.is_monotonic_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.is_monotonic_ = from._impl_.is_monotonic_;
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.CounterData)
}

inline void CounterData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_points_){arena}
    , decltype(_impl_.is_monotonic_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CounterData::~CounterData() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.CounterData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CounterData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_points_.~RepeatedPtrField();
}

void CounterData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CounterData::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.CounterData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_points_.Clear();
  _impl_.is_monotonic_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CounterData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.observability.v1.NumberDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_monotonic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_monotonic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CounterData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.CounterData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.NumberDataPoint data_points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_monotonic = 2;
  if (this->_internal_is_monotonic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_monotonic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.CounterData)
  return target;
}

size_t CounterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.CounterData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.NumberDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->_impl_.data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool is_monotonic = 2;
  if (this->_internal_is_monotonic() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CounterData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CounterData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CounterData::GetClassData() const { return &_class_data_; }


void CounterData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CounterData*>(&to_msg);
  auto& from = static_cast<const CounterData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.CounterData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_points_.MergeFrom(from._impl_.data_points_);
  if (from._internal_is_monotonic() != 0) {
    _this->_internal_set_is_monotonic(from._internal_is_monotonic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CounterData::CopyFrom(const CounterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.CounterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterData::IsInitialized() const {
  return true;
}

void CounterData::InternalSwap(CounterData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_points_.InternalSwap(&other->_impl_.data_points_);
  swap(_impl_.is_monotonic_, other->_impl_.is_monotonic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CounterData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[27]);
}

// ===================================================================

class HistogramData::_Internal {
 public:
};

HistogramData::HistogramData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.HistogramData)
}
HistogramData::HistogramData(const HistogramData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HistogramData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_points_){from._impl_.data_points_}
    , decltype(_impl_.aggregation_temporality_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.aggregation_temporality_ = from._impl_.aggregation_temporality_;
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.HistogramData)
}

inline void HistogramData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_points_){arena}
    , decltype(_impl_.aggregation_temporality_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HistogramData::~HistogramData() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.HistogramData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistogramData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_points_.~RepeatedPtrField();
}

void HistogramData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HistogramData::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.HistogramData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_points_.Clear();
  _impl_.aggregation_temporality_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistogramData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.observability.v1.HistogramDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.AggregationTemporality aggregation_temporality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation_temporality(static_cast<::unhinged::observability::v1::AggregationTemporality>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistogramData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.HistogramData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.HistogramDataPoint data_points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->_internal_aggregation_temporality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_aggregation_temporality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.HistogramData)
  return target;
}

size_t HistogramData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.HistogramData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.HistogramDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->_impl_.data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .unhinged.observability.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->_internal_aggregation_temporality() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_aggregation_temporality());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistogramData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HistogramData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistogramData::GetClassData() const { return &_class_data_; }


void HistogramData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HistogramData*>(&to_msg);
  auto& from = static_cast<const HistogramData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.HistogramData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_points_.MergeFrom(from._impl_.data_points_);
  if (from._internal_aggregation_temporality() != 0) {
    _this->_internal_set_aggregation_temporality(from._internal_aggregation_temporality());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistogramData::CopyFrom(const HistogramData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.HistogramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramData::IsInitialized() const {
  return true;
}

void HistogramData::InternalSwap(HistogramData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_points_.InternalSwap(&other->_impl_.data_points_);
  swap(_impl_.aggregation_temporality_, other->_impl_.aggregation_temporality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HistogramData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[28]);
}

// ===================================================================

class SummaryData::_Internal {
 public:
};

SummaryData::SummaryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.SummaryData)
}
SummaryData::SummaryData(const SummaryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SummaryData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_points_){from._impl_.data_points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.SummaryData)
}

inline void SummaryData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SummaryData::~SummaryData() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.SummaryData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SummaryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_points_.~RepeatedPtrField();
}

void SummaryData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SummaryData::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.SummaryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.observability.v1.SummaryDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummaryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.SummaryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.SummaryDataPoint data_points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.SummaryData)
  return target;
}

size_t SummaryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.SummaryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.SummaryDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->_impl_.data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SummaryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryData::GetClassData() const { return &_class_data_; }


void SummaryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SummaryData*>(&to_msg);
  auto& from = static_cast<const SummaryData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.SummaryData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_points_.MergeFrom(from._impl_.data_points_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryData::CopyFrom(const SummaryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.SummaryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryData::IsInitialized() const {
  return true;
}

void SummaryData::InternalSwap(SummaryData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_points_.InternalSwap(&other->_impl_.data_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[29]);
}

// ===================================================================

NumberDataPoint_AttributesEntry_DoNotUse::NumberDataPoint_AttributesEntry_DoNotUse() {}
NumberDataPoint_AttributesEntry_DoNotUse::NumberDataPoint_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NumberDataPoint_AttributesEntry_DoNotUse::MergeFrom(const NumberDataPoint_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NumberDataPoint_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[30]);
}

// ===================================================================

class NumberDataPoint::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const NumberDataPoint* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const NumberDataPoint* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
NumberDataPoint::_Internal::start_time(const NumberDataPoint* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
NumberDataPoint::_Internal::time(const NumberDataPoint* msg) {
  return *msg->_impl_.time_;
}
void NumberDataPoint::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void NumberDataPoint::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
NumberDataPoint::NumberDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &NumberDataPoint::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.NumberDataPoint)
}
NumberDataPoint::NumberDataPoint(const NumberDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NumberDataPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.exemplars_){from._impl_.exemplars_}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kAsDouble: {
      _this->_internal_set_as_double(from._internal_as_double());
      break;
    }
    case kAsInt: {
      _this->_internal_set_as_int(from._internal_as_int());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.NumberDataPoint)
}

inline void NumberDataPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.exemplars_){arena}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

NumberDataPoint::~NumberDataPoint() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.NumberDataPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void NumberDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.exemplars_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.time_;
  if (has_value()) {
    clear_value();
  }
}

void NumberDataPoint::ArenaDtor(void* object) {
  NumberDataPoint* _this = reinterpret_cast< NumberDataPoint* >(object);
  _this->_impl_.attributes_.Destruct();
}
void NumberDataPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NumberDataPoint::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.observability.v1.NumberDataPoint)
  switch (value_case()) {
    case kAsDouble: {
      // No need to clear
      break;
    }
    case kAsInt: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void NumberDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.NumberDataPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.exemplars_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberDataPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .unhinged.observability.v1.AttributeValue> attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double as_double = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _internal_set_as_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 as_int = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _internal_set_as_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.observability.v1.Exemplar exemplars = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_exemplars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumberDataPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.NumberDataPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .unhinged.observability.v1.AttributeValue> attributes = 1;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, ::unhinged::observability::v1::AttributeValue>;
    using WireHelper = NumberDataPoint_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.NumberDataPoint.AttributesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // double as_double = 10;
  if (_internal_has_as_double()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_as_double(), target);
  }

  // int64 as_int = 11;
  if (_internal_has_as_int()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_as_int(), target);
  }

  // repeated .unhinged.observability.v1.Exemplar exemplars = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exemplars_size()); i < n; i++) {
    const auto& repfield = this->_internal_exemplars(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.NumberDataPoint)
  return target;
}

size_t NumberDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.NumberDataPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .unhinged.observability.v1.AttributeValue> attributes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::unhinged::observability::v1::AttributeValue >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += NumberDataPoint_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .unhinged.observability.v1.Exemplar exemplars = 20;
  total_size += 2UL * this->_internal_exemplars_size();
  for (const auto& msg : this->_impl_.exemplars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  switch (value_case()) {
    // double as_double = 10;
    case kAsDouble: {
      total_size += 1 + 8;
      break;
    }
    // int64 as_int = 11;
    case kAsInt: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_as_int());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumberDataPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NumberDataPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumberDataPoint::GetClassData() const { return &_class_data_; }


void NumberDataPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NumberDataPoint*>(&to_msg);
  auto& from = static_cast<const NumberDataPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.NumberDataPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _this->_impl_.exemplars_.MergeFrom(from._impl_.exemplars_);
  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  switch (from.value_case()) {
    case kAsDouble: {
      _this->_internal_set_as_double(from._internal_as_double());
      break;
    }
    case kAsInt: {
      _this->_internal_set_as_int(from._internal_as_int());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumberDataPoint::CopyFrom(const NumberDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.NumberDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberDataPoint::IsInitialized() const {
  return true;
}

void NumberDataPoint::InternalSwap(NumberDataPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  _impl_.exemplars_.InternalSwap(&other->_impl_.exemplars_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.time_)
      + sizeof(NumberDataPoint::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberDataPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[31]);
}

// ===================================================================

HistogramDataPoint_AttributesEntry_DoNotUse::HistogramDataPoint_AttributesEntry_DoNotUse() {}
HistogramDataPoint_AttributesEntry_DoNotUse::HistogramDataPoint_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HistogramDataPoint_AttributesEntry_DoNotUse::MergeFrom(const HistogramDataPoint_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HistogramDataPoint_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[32]);
}

// ===================================================================

class HistogramDataPoint::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const HistogramDataPoint* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const HistogramDataPoint* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HistogramDataPoint::_Internal::start_time(const HistogramDataPoint* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HistogramDataPoint::_Internal::time(const HistogramDataPoint* msg) {
  return *msg->_impl_.time_;
}
void HistogramDataPoint::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void HistogramDataPoint::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
HistogramDataPoint::HistogramDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HistogramDataPoint::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.HistogramDataPoint)
}
HistogramDataPoint::HistogramDataPoint(const HistogramDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HistogramDataPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.explicit_bounds_){from._impl_.explicit_bounds_}
    , decltype(_impl_.bucket_counts_){from._impl_.bucket_counts_}
    , /*decltype(_impl_._bucket_counts_cached_byte_size_)*/{0}
    , decltype(_impl_.exemplars_){from._impl_.exemplars_}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.count_){}
    , decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.count_, &from._impl_.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sum_) -
    reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.sum_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.HistogramDataPoint)
}

inline void HistogramDataPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.explicit_bounds_){arena}
    , decltype(_impl_.bucket_counts_){arena}
    , /*decltype(_impl_._bucket_counts_cached_byte_size_)*/{0}
    , decltype(_impl_.exemplars_){arena}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.count_){uint64_t{0u}}
    , decltype(_impl_.sum_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HistogramDataPoint::~HistogramDataPoint() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.HistogramDataPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HistogramDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.explicit_bounds_.~RepeatedField();
  _impl_.bucket_counts_.~RepeatedField();
  _impl_.exemplars_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void HistogramDataPoint::ArenaDtor(void* object) {
  HistogramDataPoint* _this = reinterpret_cast< HistogramDataPoint* >(object);
  _this->_impl_.attributes_.Destruct();
}
void HistogramDataPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HistogramDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.HistogramDataPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.explicit_bounds_.Clear();
  _impl_.bucket_counts_.Clear();
  _impl_.exemplars_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sum_) -
      reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.sum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistogramDataPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .unhinged.observability.v1.AttributeValue> attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double sum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double explicit_bounds = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_explicit_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 97) {
          _internal_add_explicit_bounds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 bucket_counts = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_bucket_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          _internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.observability.v1.Exemplar exemplars = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_exemplars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistogramDataPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.HistogramDataPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .unhinged.observability.v1.AttributeValue> attributes = 1;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, ::unhinged::observability::v1::AttributeValue>;
    using WireHelper = HistogramDataPoint_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.HistogramDataPoint.AttributesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // uint64 count = 10;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_count(), target);
  }

  // double sum = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = this->_internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_sum(), target);
  }

  // repeated double explicit_bounds = 12;
  if (this->_internal_explicit_bounds_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_explicit_bounds(), target);
  }

  // repeated uint64 bucket_counts = 13;
  {
    int byte_size = _impl_._bucket_counts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          13, _internal_bucket_counts(), byte_size, target);
    }
  }

  // repeated .unhinged.observability.v1.Exemplar exemplars = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exemplars_size()); i < n; i++) {
    const auto& repfield = this->_internal_exemplars(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.HistogramDataPoint)
  return target;
}

size_t HistogramDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.HistogramDataPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .unhinged.observability.v1.AttributeValue> attributes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::unhinged::observability::v1::AttributeValue >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += HistogramDataPoint_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated double explicit_bounds = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_explicit_bounds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint64 bucket_counts = 13;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.bucket_counts_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._bucket_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .unhinged.observability.v1.Exemplar exemplars = 20;
  total_size += 2UL * this->_internal_exemplars_size();
  for (const auto& msg : this->_impl_.exemplars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // uint64 count = 10;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  // double sum = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = this->_internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistogramDataPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HistogramDataPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistogramDataPoint::GetClassData() const { return &_class_data_; }


void HistogramDataPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HistogramDataPoint*>(&to_msg);
  auto& from = static_cast<const HistogramDataPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.HistogramDataPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _this->_impl_.explicit_bounds_.MergeFrom(from._impl_.explicit_bounds_);
  _this->_impl_.bucket_counts_.MergeFrom(from._impl_.bucket_counts_);
  _this->_impl_.exemplars_.MergeFrom(from._impl_.exemplars_);
  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = from._internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    _this->_internal_set_sum(from._internal_sum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistogramDataPoint::CopyFrom(const HistogramDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.HistogramDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramDataPoint::IsInitialized() const {
  return true;
}

void HistogramDataPoint::InternalSwap(HistogramDataPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  _impl_.explicit_bounds_.InternalSwap(&other->_impl_.explicit_bounds_);
  _impl_.bucket_counts_.InternalSwap(&other->_impl_.bucket_counts_);
  _impl_.exemplars_.InternalSwap(&other->_impl_.exemplars_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.sum_)
      + sizeof(HistogramDataPoint::_impl_.sum_)
      - PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistogramDataPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[33]);
}

// ===================================================================

SummaryDataPoint_AttributesEntry_DoNotUse::SummaryDataPoint_AttributesEntry_DoNotUse() {}
SummaryDataPoint_AttributesEntry_DoNotUse::SummaryDataPoint_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SummaryDataPoint_AttributesEntry_DoNotUse::MergeFrom(const SummaryDataPoint_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SummaryDataPoint_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[34]);
}

// ===================================================================

class SummaryDataPoint::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const SummaryDataPoint* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const SummaryDataPoint* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SummaryDataPoint::_Internal::start_time(const SummaryDataPoint* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SummaryDataPoint::_Internal::time(const SummaryDataPoint* msg) {
  return *msg->_impl_.time_;
}
void SummaryDataPoint::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void SummaryDataPoint::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
SummaryDataPoint::SummaryDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SummaryDataPoint::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.SummaryDataPoint)
}
SummaryDataPoint::SummaryDataPoint(const SummaryDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SummaryDataPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.quantile_values_){from._impl_.quantile_values_}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.count_){}
    , decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.count_, &from._impl_.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sum_) -
    reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.sum_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.SummaryDataPoint)
}

inline void SummaryDataPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.quantile_values_){arena}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.count_){uint64_t{0u}}
    , decltype(_impl_.sum_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SummaryDataPoint::~SummaryDataPoint() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.SummaryDataPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SummaryDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.quantile_values_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void SummaryDataPoint::ArenaDtor(void* object) {
  SummaryDataPoint* _this = reinterpret_cast< SummaryDataPoint* >(object);
  _this->_impl_.attributes_.Destruct();
}
void SummaryDataPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SummaryDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.SummaryDataPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.quantile_values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sum_) -
      reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.sum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryDataPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .unhinged.observability.v1.AttributeValue> attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double sum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.observability.v1.QuantileValue quantile_values = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quantile_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummaryDataPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.SummaryDataPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .unhinged.observability.v1.AttributeValue> attributes = 1;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, ::unhinged::observability::v1::AttributeValue>;
    using WireHelper = SummaryDataPoint_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.SummaryDataPoint.AttributesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // uint64 count = 10;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_count(), target);
  }

  // double sum = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = this->_internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_sum(), target);
  }

  // repeated .unhinged.observability.v1.QuantileValue quantile_values = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quantile_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_quantile_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.SummaryDataPoint)
  return target;
}

size_t SummaryDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.SummaryDataPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .unhinged.observability.v1.AttributeValue> attributes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::unhinged::observability::v1::AttributeValue >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += SummaryDataPoint_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .unhinged.observability.v1.QuantileValue quantile_values = 12;
  total_size += 1UL * this->_internal_quantile_values_size();
  for (const auto& msg : this->_impl_.quantile_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // uint64 count = 10;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  // double sum = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = this->_internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryDataPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SummaryDataPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryDataPoint::GetClassData() const { return &_class_data_; }


void SummaryDataPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SummaryDataPoint*>(&to_msg);
  auto& from = static_cast<const SummaryDataPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.SummaryDataPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _this->_impl_.quantile_values_.MergeFrom(from._impl_.quantile_values_);
  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = from._internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    _this->_internal_set_sum(from._internal_sum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryDataPoint::CopyFrom(const SummaryDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.SummaryDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryDataPoint::IsInitialized() const {
  return true;
}

void SummaryDataPoint::InternalSwap(SummaryDataPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  _impl_.quantile_values_.InternalSwap(&other->_impl_.quantile_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.sum_)
      + sizeof(SummaryDataPoint::_impl_.sum_)
      - PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryDataPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[35]);
}

// ===================================================================

class QuantileValue::_Internal {
 public:
};

QuantileValue::QuantileValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.QuantileValue)
}
QuantileValue::QuantileValue(const QuantileValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuantileValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quantile_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.quantile_, &from._impl_.quantile_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.quantile_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.QuantileValue)
}

inline void QuantileValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quantile_){0}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuantileValue::~QuantileValue() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.QuantileValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuantileValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QuantileValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuantileValue::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.QuantileValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.quantile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.quantile_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuantileValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double quantile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.quantile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuantileValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.QuantileValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double quantile = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_quantile = this->_internal_quantile();
  uint64_t raw_quantile;
  memcpy(&raw_quantile, &tmp_quantile, sizeof(tmp_quantile));
  if (raw_quantile != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_quantile(), target);
  }

  // double value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.QuantileValue)
  return target;
}

size_t QuantileValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.QuantileValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double quantile = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_quantile = this->_internal_quantile();
  uint64_t raw_quantile;
  memcpy(&raw_quantile, &tmp_quantile, sizeof(tmp_quantile));
  if (raw_quantile != 0) {
    total_size += 1 + 8;
  }

  // double value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuantileValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuantileValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuantileValue::GetClassData() const { return &_class_data_; }


void QuantileValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuantileValue*>(&to_msg);
  auto& from = static_cast<const QuantileValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.QuantileValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_quantile = from._internal_quantile();
  uint64_t raw_quantile;
  memcpy(&raw_quantile, &tmp_quantile, sizeof(tmp_quantile));
  if (raw_quantile != 0) {
    _this->_internal_set_quantile(from._internal_quantile());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuantileValue::CopyFrom(const QuantileValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.QuantileValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantileValue::IsInitialized() const {
  return true;
}

void QuantileValue::InternalSwap(QuantileValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuantileValue, _impl_.value_)
      + sizeof(QuantileValue::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(QuantileValue, _impl_.quantile_)>(
          reinterpret_cast<char*>(&_impl_.quantile_),
          reinterpret_cast<char*>(&other->_impl_.quantile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuantileValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[36]);
}

// ===================================================================

Exemplar_FilteredAttributesEntry_DoNotUse::Exemplar_FilteredAttributesEntry_DoNotUse() {}
Exemplar_FilteredAttributesEntry_DoNotUse::Exemplar_FilteredAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Exemplar_FilteredAttributesEntry_DoNotUse::MergeFrom(const Exemplar_FilteredAttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Exemplar_FilteredAttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[37]);
}

// ===================================================================

class Exemplar::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Exemplar* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Exemplar::_Internal::timestamp(const Exemplar* msg) {
  return *msg->_impl_.timestamp_;
}
void Exemplar::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
Exemplar::Exemplar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Exemplar::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.Exemplar)
}
Exemplar::Exemplar(const Exemplar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Exemplar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.filtered_attributes_)*/{}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.filtered_attributes_.MergeFrom(from._impl_.filtered_attributes_);
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_span_id().empty()) {
    _this->_impl_.span_id_.Set(from._internal_span_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_id().empty()) {
    _this->_impl_.trace_id_.Set(from._internal_trace_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kAsDouble: {
      _this->_internal_set_as_double(from._internal_as_double());
      break;
    }
    case kAsInt: {
      _this->_internal_set_as_int(from._internal_as_int());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.Exemplar)
}

inline void Exemplar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.filtered_attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

Exemplar::~Exemplar() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.Exemplar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Exemplar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filtered_attributes_.Destruct();
  _impl_.filtered_attributes_.~MapField();
  _impl_.span_id_.Destroy();
  _impl_.trace_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (has_value()) {
    clear_value();
  }
}

void Exemplar::ArenaDtor(void* object) {
  Exemplar* _this = reinterpret_cast< Exemplar* >(object);
  _this->_impl_.filtered_attributes_.Destruct();
}
void Exemplar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Exemplar::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:unhinged.observability.v1.Exemplar)
  switch (value_case()) {
    case kAsDouble: {
      // No need to clear
      break;
    }
    case kAsInt: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Exemplar::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.Exemplar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filtered_attributes_.Clear();
  _impl_.span_id_.ClearToEmpty();
  _impl_.trace_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Exemplar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .unhinged.observability.v1.AttributeValue> filtered_attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.filtered_attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double as_double = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _internal_set_as_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 as_int = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _internal_set_as_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string span_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_span_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Exemplar.span_id"));
        } else
          goto handle_unusual;
        continue;
      // string trace_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Exemplar.trace_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Exemplar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.Exemplar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .unhinged.observability.v1.AttributeValue> filtered_attributes = 1;
  if (!this->_internal_filtered_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, ::unhinged::observability::v1::AttributeValue>;
    using WireHelper = Exemplar_FilteredAttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_filtered_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.Exemplar.FilteredAttributesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // double as_double = 10;
  if (_internal_has_as_double()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_as_double(), target);
  }

  // int64 as_int = 11;
  if (_internal_has_as_int()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_as_int(), target);
  }

  // string span_id = 20;
  if (!this->_internal_span_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_span_id().data(), static_cast<int>(this->_internal_span_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Exemplar.span_id");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_span_id(), target);
  }

  // string trace_id = 21;
  if (!this->_internal_trace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_id().data(), static_cast<int>(this->_internal_trace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Exemplar.trace_id");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_trace_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.Exemplar)
  return target;
}

size_t Exemplar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.Exemplar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .unhinged.observability.v1.AttributeValue> filtered_attributes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_filtered_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::unhinged::observability::v1::AttributeValue >::const_iterator
      it = this->_internal_filtered_attributes().begin();
      it != this->_internal_filtered_attributes().end(); ++it) {
    total_size += Exemplar_FilteredAttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string span_id = 20;
  if (!this->_internal_span_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_span_id());
  }

  // string trace_id = 21;
  if (!this->_internal_trace_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_id());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  switch (value_case()) {
    // double as_double = 10;
    case kAsDouble: {
      total_size += 1 + 8;
      break;
    }
    // int64 as_int = 11;
    case kAsInt: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_as_int());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Exemplar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Exemplar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Exemplar::GetClassData() const { return &_class_data_; }


void Exemplar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Exemplar*>(&to_msg);
  auto& from = static_cast<const Exemplar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.Exemplar)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filtered_attributes_.MergeFrom(from._impl_.filtered_attributes_);
  if (!from._internal_span_id().empty()) {
    _this->_internal_set_span_id(from._internal_span_id());
  }
  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  switch (from.value_case()) {
    case kAsDouble: {
      _this->_internal_set_as_double(from._internal_as_double());
      break;
    }
    case kAsInt: {
      _this->_internal_set_as_int(from._internal_as_int());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Exemplar::CopyFrom(const Exemplar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.Exemplar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exemplar::IsInitialized() const {
  return true;
}

void Exemplar::InternalSwap(Exemplar* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filtered_attributes_.InternalSwap(&other->_impl_.filtered_attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.span_id_, lhs_arena,
      &other->_impl_.span_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trace_id_, lhs_arena,
      &other->_impl_.trace_id_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Exemplar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[38]);
}

// ===================================================================

class ServiceHealthEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ServiceHealthEvent* msg);
  static const ::unhinged::observability::v1::Resource& resource(const ServiceHealthEvent* msg);
  static const ::unhinged::observability::v1::ServiceHealth& health(const ServiceHealthEvent* msg);
  static const ::unhinged::observability::v1::DestinationFlags& destinations(const ServiceHealthEvent* msg);
  static const ::unhinged::observability::v1::PartitionInfo& partition_info(const ServiceHealthEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ServiceHealthEvent::_Internal::timestamp(const ServiceHealthEvent* msg) {
  return *msg->_impl_.timestamp_;
}
const ::unhinged::observability::v1::Resource&
ServiceHealthEvent::_Internal::resource(const ServiceHealthEvent* msg) {
  return *msg->_impl_.resource_;
}
const ::unhinged::observability::v1::ServiceHealth&
ServiceHealthEvent::_Internal::health(const ServiceHealthEvent* msg) {
  return *msg->_impl_.health_;
}
const ::unhinged::observability::v1::DestinationFlags&
ServiceHealthEvent::_Internal::destinations(const ServiceHealthEvent* msg) {
  return *msg->_impl_.destinations_;
}
const ::unhinged::observability::v1::PartitionInfo&
ServiceHealthEvent::_Internal::partition_info(const ServiceHealthEvent* msg) {
  return *msg->_impl_.partition_info_;
}
void ServiceHealthEvent::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
ServiceHealthEvent::ServiceHealthEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.ServiceHealthEvent)
}
ServiceHealthEvent::ServiceHealthEvent(const ServiceHealthEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceHealthEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.health_){nullptr}
    , decltype(_impl_.destinations_){nullptr}
    , decltype(_impl_.partition_info_){nullptr}
    , decltype(_impl_.sequence_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_type().empty()) {
    _this->_impl_.event_type_.Set(from._internal_event_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::unhinged::observability::v1::Resource(*from._impl_.resource_);
  }
  if (from._internal_has_health()) {
    _this->_impl_.health_ = new ::unhinged::observability::v1::ServiceHealth(*from._impl_.health_);
  }
  if (from._internal_has_destinations()) {
    _this->_impl_.destinations_ = new ::unhinged::observability::v1::DestinationFlags(*from._impl_.destinations_);
  }
  if (from._internal_has_partition_info()) {
    _this->_impl_.partition_info_ = new ::unhinged::observability::v1::PartitionInfo(*from._impl_.partition_info_);
  }
  _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.ServiceHealthEvent)
}

inline void ServiceHealthEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.health_){nullptr}
    , decltype(_impl_.destinations_){nullptr}
    , decltype(_impl_.partition_info_){nullptr}
    , decltype(_impl_.sequence_number_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceHealthEvent::~ServiceHealthEvent() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.ServiceHealthEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceHealthEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_id_.Destroy();
  _impl_.event_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.resource_;
  if (this != internal_default_instance()) delete _impl_.health_;
  if (this != internal_default_instance()) delete _impl_.destinations_;
  if (this != internal_default_instance()) delete _impl_.partition_info_;
}

void ServiceHealthEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceHealthEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.ServiceHealthEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_id_.ClearToEmpty();
  _impl_.event_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.health_ != nullptr) {
    delete _impl_.health_;
  }
  _impl_.health_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.destinations_ != nullptr) {
    delete _impl_.destinations_;
  }
  _impl_.destinations_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.partition_info_ != nullptr) {
    delete _impl_.partition_info_;
  }
  _impl_.partition_info_ = nullptr;
  _impl_.sequence_number_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceHealthEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.ServiceHealthEvent.event_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string event_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_event_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.ServiceHealthEvent.event_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.Resource resource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.ServiceHealth health = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_health(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.DestinationFlags destinations = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_destinations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.PartitionInfo partition_info = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_partition_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceHealthEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.ServiceHealthEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.ServiceHealthEvent.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string event_type = 3;
  if (!this->_internal_event_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_type().data(), static_cast<int>(this->_internal_event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.ServiceHealthEvent.event_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_event_type(), target);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sequence_number(), target);
  }

  // .unhinged.observability.v1.Resource resource = 5;
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.ServiceHealth health = 10;
  if (this->_internal_has_health()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::health(this),
        _Internal::health(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.DestinationFlags destinations = 20;
  if (this->_internal_has_destinations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::destinations(this),
        _Internal::destinations(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.PartitionInfo partition_info = 25;
  if (this->_internal_has_partition_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::partition_info(this),
        _Internal::partition_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.ServiceHealthEvent)
  return target;
}

size_t ServiceHealthEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.ServiceHealthEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // string event_type = 3;
  if (!this->_internal_event_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_type());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .unhinged.observability.v1.Resource resource = 5;
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  // .unhinged.observability.v1.ServiceHealth health = 10;
  if (this->_internal_has_health()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.health_);
  }

  // .unhinged.observability.v1.DestinationFlags destinations = 20;
  if (this->_internal_has_destinations()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destinations_);
  }

  // .unhinged.observability.v1.PartitionInfo partition_info = 25;
  if (this->_internal_has_partition_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.partition_info_);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequence_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceHealthEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceHealthEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceHealthEvent::GetClassData() const { return &_class_data_; }


void ServiceHealthEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceHealthEvent*>(&to_msg);
  auto& from = static_cast<const ServiceHealthEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.ServiceHealthEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (!from._internal_event_type().empty()) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::unhinged::observability::v1::Resource::MergeFrom(
        from._internal_resource());
  }
  if (from._internal_has_health()) {
    _this->_internal_mutable_health()->::unhinged::observability::v1::ServiceHealth::MergeFrom(
        from._internal_health());
  }
  if (from._internal_has_destinations()) {
    _this->_internal_mutable_destinations()->::unhinged::observability::v1::DestinationFlags::MergeFrom(
        from._internal_destinations());
  }
  if (from._internal_has_partition_info()) {
    _this->_internal_mutable_partition_info()->::unhinged::observability::v1::PartitionInfo::MergeFrom(
        from._internal_partition_info());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceHealthEvent::CopyFrom(const ServiceHealthEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.ServiceHealthEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceHealthEvent::IsInitialized() const {
  return true;
}

void ServiceHealthEvent::InternalSwap(ServiceHealthEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_type_, lhs_arena,
      &other->_impl_.event_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceHealthEvent, _impl_.sequence_number_)
      + sizeof(ServiceHealthEvent::_impl_.sequence_number_)
      - PROTOBUF_FIELD_OFFSET(ServiceHealthEvent, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceHealthEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[39]);
}

// ===================================================================

class ServiceHealth::_Internal {
 public:
  static const ::unhinged::observability::v1::ServiceLevelIndicators& slis(const ServiceHealth* msg);
  static const ::unhinged::observability::v1::SystemMetrics& system_metrics(const ServiceHealth* msg);
  static const ::unhinged::observability::v1::UptimeInfo& uptime(const ServiceHealth* msg);
};

const ::unhinged::observability::v1::ServiceLevelIndicators&
ServiceHealth::_Internal::slis(const ServiceHealth* msg) {
  return *msg->_impl_.slis_;
}
const ::unhinged::observability::v1::SystemMetrics&
ServiceHealth::_Internal::system_metrics(const ServiceHealth* msg) {
  return *msg->_impl_.system_metrics_;
}
const ::unhinged::observability::v1::UptimeInfo&
ServiceHealth::_Internal::uptime(const ServiceHealth* msg) {
  return *msg->_impl_.uptime_;
}
ServiceHealth::ServiceHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.ServiceHealth)
}
ServiceHealth::ServiceHealth(const ServiceHealth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceHealth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.health_checks_){from._impl_.health_checks_}
    , decltype(_impl_.dependencies_){from._impl_.dependencies_}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.status_message_){}
    , decltype(_impl_.slis_){nullptr}
    , decltype(_impl_.system_metrics_){nullptr}
    , decltype(_impl_.uptime_){nullptr}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_message().empty()) {
    _this->_impl_.status_message_.Set(from._internal_status_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_slis()) {
    _this->_impl_.slis_ = new ::unhinged::observability::v1::ServiceLevelIndicators(*from._impl_.slis_);
  }
  if (from._internal_has_system_metrics()) {
    _this->_impl_.system_metrics_ = new ::unhinged::observability::v1::SystemMetrics(*from._impl_.system_metrics_);
  }
  if (from._internal_has_uptime()) {
    _this->_impl_.uptime_ = new ::unhinged::observability::v1::UptimeInfo(*from._impl_.uptime_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.ServiceHealth)
}

inline void ServiceHealth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.health_checks_){arena}
    , decltype(_impl_.dependencies_){arena}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.status_message_){}
    , decltype(_impl_.slis_){nullptr}
    , decltype(_impl_.system_metrics_){nullptr}
    , decltype(_impl_.uptime_){nullptr}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceHealth::~ServiceHealth() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.ServiceHealth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceHealth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.health_checks_.~RepeatedPtrField();
  _impl_.dependencies_.~RepeatedPtrField();
  _impl_.service_name_.Destroy();
  _impl_.status_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.slis_;
  if (this != internal_default_instance()) delete _impl_.system_metrics_;
  if (this != internal_default_instance()) delete _impl_.uptime_;
}

void ServiceHealth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.ServiceHealth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.health_checks_.Clear();
  _impl_.dependencies_.Clear();
  _impl_.service_name_.ClearToEmpty();
  _impl_.status_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.slis_ != nullptr) {
    delete _impl_.slis_;
  }
  _impl_.slis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.system_metrics_ != nullptr) {
    delete _impl_.system_metrics_;
  }
  _impl_.system_metrics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.uptime_ != nullptr) {
    delete _impl_.uptime_;
  }
  _impl_.uptime_ = nullptr;
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceHealth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.ServiceHealth.service_name"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.HealthStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::unhinged::observability::v1::HealthStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string status_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_status_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.ServiceHealth.status_message"));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.observability.v1.HealthCheck health_checks = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_health_checks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.observability.v1.DependencyHealth dependencies = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependencies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.ServiceLevelIndicators slis = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_slis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.SystemMetrics system_metrics = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.UptimeInfo uptime = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_uptime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceHealth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.ServiceHealth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.ServiceHealth.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // .unhinged.observability.v1.HealthStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string status_message = 3;
  if (!this->_internal_status_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_message().data(), static_cast<int>(this->_internal_status_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.ServiceHealth.status_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status_message(), target);
  }

  // repeated .unhinged.observability.v1.HealthCheck health_checks = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_health_checks_size()); i < n; i++) {
    const auto& repfield = this->_internal_health_checks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .unhinged.observability.v1.DependencyHealth dependencies = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dependencies_size()); i < n; i++) {
    const auto& repfield = this->_internal_dependencies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.ServiceLevelIndicators slis = 20;
  if (this->_internal_has_slis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::slis(this),
        _Internal::slis(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.SystemMetrics system_metrics = 25;
  if (this->_internal_has_system_metrics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::system_metrics(this),
        _Internal::system_metrics(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.UptimeInfo uptime = 30;
  if (this->_internal_has_uptime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::uptime(this),
        _Internal::uptime(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.ServiceHealth)
  return target;
}

size_t ServiceHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.ServiceHealth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.HealthCheck health_checks = 10;
  total_size += 1UL * this->_internal_health_checks_size();
  for (const auto& msg : this->_impl_.health_checks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .unhinged.observability.v1.DependencyHealth dependencies = 15;
  total_size += 1UL * this->_internal_dependencies_size();
  for (const auto& msg : this->_impl_.dependencies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string status_message = 3;
  if (!this->_internal_status_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_message());
  }

  // .unhinged.observability.v1.ServiceLevelIndicators slis = 20;
  if (this->_internal_has_slis()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slis_);
  }

  // .unhinged.observability.v1.SystemMetrics system_metrics = 25;
  if (this->_internal_has_system_metrics()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.system_metrics_);
  }

  // .unhinged.observability.v1.UptimeInfo uptime = 30;
  if (this->_internal_has_uptime()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uptime_);
  }

  // .unhinged.observability.v1.HealthStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceHealth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceHealth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceHealth::GetClassData() const { return &_class_data_; }


void ServiceHealth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceHealth*>(&to_msg);
  auto& from = static_cast<const ServiceHealth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.ServiceHealth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.health_checks_.MergeFrom(from._impl_.health_checks_);
  _this->_impl_.dependencies_.MergeFrom(from._impl_.dependencies_);
  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_status_message().empty()) {
    _this->_internal_set_status_message(from._internal_status_message());
  }
  if (from._internal_has_slis()) {
    _this->_internal_mutable_slis()->::unhinged::observability::v1::ServiceLevelIndicators::MergeFrom(
        from._internal_slis());
  }
  if (from._internal_has_system_metrics()) {
    _this->_internal_mutable_system_metrics()->::unhinged::observability::v1::SystemMetrics::MergeFrom(
        from._internal_system_metrics());
  }
  if (from._internal_has_uptime()) {
    _this->_internal_mutable_uptime()->::unhinged::observability::v1::UptimeInfo::MergeFrom(
        from._internal_uptime());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceHealth::CopyFrom(const ServiceHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.ServiceHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceHealth::IsInitialized() const {
  return true;
}

void ServiceHealth::InternalSwap(ServiceHealth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.health_checks_.InternalSwap(&other->_impl_.health_checks_);
  _impl_.dependencies_.InternalSwap(&other->_impl_.dependencies_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_message_, lhs_arena,
      &other->_impl_.status_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceHealth, _impl_.status_)
      + sizeof(ServiceHealth::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ServiceHealth, _impl_.slis_)>(
          reinterpret_cast<char*>(&_impl_.slis_),
          reinterpret_cast<char*>(&other->_impl_.slis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceHealth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[40]);
}

// ===================================================================

HealthCheck_MetadataEntry_DoNotUse::HealthCheck_MetadataEntry_DoNotUse() {}
HealthCheck_MetadataEntry_DoNotUse::HealthCheck_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HealthCheck_MetadataEntry_DoNotUse::MergeFrom(const HealthCheck_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HealthCheck_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[41]);
}

// ===================================================================

class HealthCheck::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_check(const HealthCheck* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HealthCheck::_Internal::last_check(const HealthCheck* msg) {
  return *msg->_impl_.last_check_;
}
void HealthCheck::clear_last_check() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_check_ != nullptr) {
    delete _impl_.last_check_;
  }
  _impl_.last_check_ = nullptr;
}
HealthCheck::HealthCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HealthCheck::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.HealthCheck)
}
HealthCheck::HealthCheck(const HealthCheck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthCheck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.last_check_){nullptr}
    , decltype(_impl_.response_time_ms_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_last_check()) {
    _this->_impl_.last_check_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_check_);
  }
  ::memcpy(&_impl_.response_time_ms_, &from._impl_.response_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.response_time_ms_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.HealthCheck)
}

inline void HealthCheck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.last_check_){nullptr}
    , decltype(_impl_.response_time_ms_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthCheck::~HealthCheck() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.HealthCheck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HealthCheck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destruct();
  _impl_.metadata_.~MapField();
  _impl_.name_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.last_check_;
}

void HealthCheck::ArenaDtor(void* object) {
  HealthCheck* _this = reinterpret_cast< HealthCheck* >(object);
  _this->_impl_.metadata_.Destruct();
}
void HealthCheck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.HealthCheck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.last_check_ != nullptr) {
    delete _impl_.last_check_;
  }
  _impl_.last_check_ = nullptr;
  ::memset(&_impl_.response_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.response_time_ms_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.HealthCheck.name"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.HealthStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::unhinged::observability::v1::HealthStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.HealthCheck.message"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_check = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_check(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 response_time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.response_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> metadata = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.HealthCheck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.HealthCheck.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .unhinged.observability.v1.HealthStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.HealthCheck.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp last_check = 4;
  if (this->_internal_has_last_check()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::last_check(this),
        _Internal::last_check(this).GetCachedSize(), target, stream);
  }

  // int64 response_time_ms = 5;
  if (this->_internal_response_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_response_time_ms(), target);
  }

  // map<string, string> metadata = 10;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = HealthCheck_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.HealthCheck.MetadataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.HealthCheck.MetadataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.HealthCheck)
  return target;
}

size_t HealthCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.HealthCheck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += HealthCheck_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp last_check = 4;
  if (this->_internal_has_last_check()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_check_);
  }

  // int64 response_time_ms = 5;
  if (this->_internal_response_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_response_time_ms());
  }

  // .unhinged.observability.v1.HealthStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthCheck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheck::GetClassData() const { return &_class_data_; }


void HealthCheck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthCheck*>(&to_msg);
  auto& from = static_cast<const HealthCheck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.HealthCheck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_last_check()) {
    _this->_internal_mutable_last_check()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_check());
  }
  if (from._internal_response_time_ms() != 0) {
    _this->_internal_set_response_time_ms(from._internal_response_time_ms());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheck::CopyFrom(const HealthCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.HealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck::IsInitialized() const {
  return true;
}

void HealthCheck::InternalSwap(HealthCheck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthCheck, _impl_.status_)
      + sizeof(HealthCheck::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(HealthCheck, _impl_.last_check_)>(
          reinterpret_cast<char*>(&_impl_.last_check_),
          reinterpret_cast<char*>(&other->_impl_.last_check_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[42]);
}

// ===================================================================

class DependencyHealth::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_check(const DependencyHealth* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DependencyHealth::_Internal::last_check(const DependencyHealth* msg) {
  return *msg->_impl_.last_check_;
}
void DependencyHealth::clear_last_check() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_check_ != nullptr) {
    delete _impl_.last_check_;
  }
  _impl_.last_check_ = nullptr;
}
DependencyHealth::DependencyHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.DependencyHealth)
}
DependencyHealth::DependencyHealth(const DependencyHealth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DependencyHealth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.endpoint_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.last_check_){nullptr}
    , decltype(_impl_.response_time_ms_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_endpoint().empty()) {
    _this->_impl_.endpoint_.Set(from._internal_endpoint(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_last_check()) {
    _this->_impl_.last_check_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_check_);
  }
  ::memcpy(&_impl_.response_time_ms_, &from._impl_.response_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.response_time_ms_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.DependencyHealth)
}

inline void DependencyHealth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.endpoint_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.last_check_){nullptr}
    , decltype(_impl_.response_time_ms_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DependencyHealth::~DependencyHealth() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.DependencyHealth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DependencyHealth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  _impl_.endpoint_.Destroy();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.last_check_;
}

void DependencyHealth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DependencyHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.DependencyHealth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.endpoint_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.last_check_ != nullptr) {
    delete _impl_.last_check_;
  }
  _impl_.last_check_ = nullptr;
  ::memset(&_impl_.response_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.response_time_ms_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DependencyHealth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.DependencyHealth.name"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.DependencyHealth.type"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.HealthStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::unhinged::observability::v1::HealthStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string endpoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_endpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.DependencyHealth.endpoint"));
        } else
          goto handle_unusual;
        continue;
      // int64 response_time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.response_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.DependencyHealth.version"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_check = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_check(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DependencyHealth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.DependencyHealth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.DependencyHealth.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.DependencyHealth.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // .unhinged.observability.v1.HealthStatus status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string endpoint = 4;
  if (!this->_internal_endpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint().data(), static_cast<int>(this->_internal_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.DependencyHealth.endpoint");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_endpoint(), target);
  }

  // int64 response_time_ms = 5;
  if (this->_internal_response_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_response_time_ms(), target);
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.DependencyHealth.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  // .google.protobuf.Timestamp last_check = 10;
  if (this->_internal_has_last_check()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::last_check(this),
        _Internal::last_check(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.DependencyHealth)
  return target;
}

size_t DependencyHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.DependencyHealth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string endpoint = 4;
  if (!this->_internal_endpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .google.protobuf.Timestamp last_check = 10;
  if (this->_internal_has_last_check()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_check_);
  }

  // int64 response_time_ms = 5;
  if (this->_internal_response_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_response_time_ms());
  }

  // .unhinged.observability.v1.HealthStatus status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DependencyHealth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DependencyHealth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DependencyHealth::GetClassData() const { return &_class_data_; }


void DependencyHealth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DependencyHealth*>(&to_msg);
  auto& from = static_cast<const DependencyHealth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.DependencyHealth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_endpoint().empty()) {
    _this->_internal_set_endpoint(from._internal_endpoint());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_last_check()) {
    _this->_internal_mutable_last_check()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_check());
  }
  if (from._internal_response_time_ms() != 0) {
    _this->_internal_set_response_time_ms(from._internal_response_time_ms());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DependencyHealth::CopyFrom(const DependencyHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.DependencyHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DependencyHealth::IsInitialized() const {
  return true;
}

void DependencyHealth::InternalSwap(DependencyHealth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.endpoint_, lhs_arena,
      &other->_impl_.endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DependencyHealth, _impl_.status_)
      + sizeof(DependencyHealth::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(DependencyHealth, _impl_.last_check_)>(
          reinterpret_cast<char*>(&_impl_.last_check_),
          reinterpret_cast<char*>(&other->_impl_.last_check_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DependencyHealth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[43]);
}

// ===================================================================

class ServiceLevelIndicators::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& window_start(const ServiceLevelIndicators* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& window_end(const ServiceLevelIndicators* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ServiceLevelIndicators::_Internal::window_start(const ServiceLevelIndicators* msg) {
  return *msg->_impl_.window_start_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ServiceLevelIndicators::_Internal::window_end(const ServiceLevelIndicators* msg) {
  return *msg->_impl_.window_end_;
}
void ServiceLevelIndicators::clear_window_start() {
  if (GetArenaForAllocation() == nullptr && _impl_.window_start_ != nullptr) {
    delete _impl_.window_start_;
  }
  _impl_.window_start_ = nullptr;
}
void ServiceLevelIndicators::clear_window_end() {
  if (GetArenaForAllocation() == nullptr && _impl_.window_end_ != nullptr) {
    delete _impl_.window_end_;
  }
  _impl_.window_end_ = nullptr;
}
ServiceLevelIndicators::ServiceLevelIndicators(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.ServiceLevelIndicators)
}
ServiceLevelIndicators::ServiceLevelIndicators(const ServiceLevelIndicators& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceLevelIndicators* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.window_start_){nullptr}
    , decltype(_impl_.window_end_){nullptr}
    , decltype(_impl_.availability_percent_){}
    , decltype(_impl_.error_rate_percent_){}
    , decltype(_impl_.latency_p50_ms_){}
    , decltype(_impl_.latency_p95_ms_){}
    , decltype(_impl_.latency_p99_ms_){}
    , decltype(_impl_.throughput_rps_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_window_start()) {
    _this->_impl_.window_start_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.window_start_);
  }
  if (from._internal_has_window_end()) {
    _this->_impl_.window_end_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.window_end_);
  }
  ::memcpy(&_impl_.availability_percent_, &from._impl_.availability_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.throughput_rps_) -
    reinterpret_cast<char*>(&_impl_.availability_percent_)) + sizeof(_impl_.throughput_rps_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.ServiceLevelIndicators)
}

inline void ServiceLevelIndicators::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.window_start_){nullptr}
    , decltype(_impl_.window_end_){nullptr}
    , decltype(_impl_.availability_percent_){0}
    , decltype(_impl_.error_rate_percent_){0}
    , decltype(_impl_.latency_p50_ms_){0}
    , decltype(_impl_.latency_p95_ms_){0}
    , decltype(_impl_.latency_p99_ms_){0}
    , decltype(_impl_.throughput_rps_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServiceLevelIndicators::~ServiceLevelIndicators() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.ServiceLevelIndicators)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceLevelIndicators::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.window_start_;
  if (this != internal_default_instance()) delete _impl_.window_end_;
}

void ServiceLevelIndicators::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceLevelIndicators::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.ServiceLevelIndicators)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.window_start_ != nullptr) {
    delete _impl_.window_start_;
  }
  _impl_.window_start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.window_end_ != nullptr) {
    delete _impl_.window_end_;
  }
  _impl_.window_end_ = nullptr;
  ::memset(&_impl_.availability_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.throughput_rps_) -
      reinterpret_cast<char*>(&_impl_.availability_percent_)) + sizeof(_impl_.throughput_rps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceLevelIndicators::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double availability_percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.availability_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double error_rate_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.error_rate_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double latency_p50_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.latency_p50_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double latency_p95_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.latency_p95_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double latency_p99_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.latency_p99_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double throughput_rps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.throughput_rps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp window_start = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp window_end = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceLevelIndicators::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.ServiceLevelIndicators)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double availability_percent = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_availability_percent = this->_internal_availability_percent();
  uint64_t raw_availability_percent;
  memcpy(&raw_availability_percent, &tmp_availability_percent, sizeof(tmp_availability_percent));
  if (raw_availability_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_availability_percent(), target);
  }

  // double error_rate_percent = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_error_rate_percent = this->_internal_error_rate_percent();
  uint64_t raw_error_rate_percent;
  memcpy(&raw_error_rate_percent, &tmp_error_rate_percent, sizeof(tmp_error_rate_percent));
  if (raw_error_rate_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_error_rate_percent(), target);
  }

  // double latency_p50_ms = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latency_p50_ms = this->_internal_latency_p50_ms();
  uint64_t raw_latency_p50_ms;
  memcpy(&raw_latency_p50_ms, &tmp_latency_p50_ms, sizeof(tmp_latency_p50_ms));
  if (raw_latency_p50_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_latency_p50_ms(), target);
  }

  // double latency_p95_ms = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latency_p95_ms = this->_internal_latency_p95_ms();
  uint64_t raw_latency_p95_ms;
  memcpy(&raw_latency_p95_ms, &tmp_latency_p95_ms, sizeof(tmp_latency_p95_ms));
  if (raw_latency_p95_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_latency_p95_ms(), target);
  }

  // double latency_p99_ms = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latency_p99_ms = this->_internal_latency_p99_ms();
  uint64_t raw_latency_p99_ms;
  memcpy(&raw_latency_p99_ms, &tmp_latency_p99_ms, sizeof(tmp_latency_p99_ms));
  if (raw_latency_p99_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_latency_p99_ms(), target);
  }

  // double throughput_rps = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throughput_rps = this->_internal_throughput_rps();
  uint64_t raw_throughput_rps;
  memcpy(&raw_throughput_rps, &tmp_throughput_rps, sizeof(tmp_throughput_rps));
  if (raw_throughput_rps != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_throughput_rps(), target);
  }

  // .google.protobuf.Timestamp window_start = 10;
  if (this->_internal_has_window_start()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::window_start(this),
        _Internal::window_start(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp window_end = 11;
  if (this->_internal_has_window_end()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::window_end(this),
        _Internal::window_end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.ServiceLevelIndicators)
  return target;
}

size_t ServiceLevelIndicators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.ServiceLevelIndicators)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp window_start = 10;
  if (this->_internal_has_window_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.window_start_);
  }

  // .google.protobuf.Timestamp window_end = 11;
  if (this->_internal_has_window_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.window_end_);
  }

  // double availability_percent = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_availability_percent = this->_internal_availability_percent();
  uint64_t raw_availability_percent;
  memcpy(&raw_availability_percent, &tmp_availability_percent, sizeof(tmp_availability_percent));
  if (raw_availability_percent != 0) {
    total_size += 1 + 8;
  }

  // double error_rate_percent = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_error_rate_percent = this->_internal_error_rate_percent();
  uint64_t raw_error_rate_percent;
  memcpy(&raw_error_rate_percent, &tmp_error_rate_percent, sizeof(tmp_error_rate_percent));
  if (raw_error_rate_percent != 0) {
    total_size += 1 + 8;
  }

  // double latency_p50_ms = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latency_p50_ms = this->_internal_latency_p50_ms();
  uint64_t raw_latency_p50_ms;
  memcpy(&raw_latency_p50_ms, &tmp_latency_p50_ms, sizeof(tmp_latency_p50_ms));
  if (raw_latency_p50_ms != 0) {
    total_size += 1 + 8;
  }

  // double latency_p95_ms = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latency_p95_ms = this->_internal_latency_p95_ms();
  uint64_t raw_latency_p95_ms;
  memcpy(&raw_latency_p95_ms, &tmp_latency_p95_ms, sizeof(tmp_latency_p95_ms));
  if (raw_latency_p95_ms != 0) {
    total_size += 1 + 8;
  }

  // double latency_p99_ms = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latency_p99_ms = this->_internal_latency_p99_ms();
  uint64_t raw_latency_p99_ms;
  memcpy(&raw_latency_p99_ms, &tmp_latency_p99_ms, sizeof(tmp_latency_p99_ms));
  if (raw_latency_p99_ms != 0) {
    total_size += 1 + 8;
  }

  // double throughput_rps = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throughput_rps = this->_internal_throughput_rps();
  uint64_t raw_throughput_rps;
  memcpy(&raw_throughput_rps, &tmp_throughput_rps, sizeof(tmp_throughput_rps));
  if (raw_throughput_rps != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceLevelIndicators::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceLevelIndicators::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceLevelIndicators::GetClassData() const { return &_class_data_; }


void ServiceLevelIndicators::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceLevelIndicators*>(&to_msg);
  auto& from = static_cast<const ServiceLevelIndicators&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.ServiceLevelIndicators)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_window_start()) {
    _this->_internal_mutable_window_start()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_window_start());
  }
  if (from._internal_has_window_end()) {
    _this->_internal_mutable_window_end()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_window_end());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_availability_percent = from._internal_availability_percent();
  uint64_t raw_availability_percent;
  memcpy(&raw_availability_percent, &tmp_availability_percent, sizeof(tmp_availability_percent));
  if (raw_availability_percent != 0) {
    _this->_internal_set_availability_percent(from._internal_availability_percent());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_error_rate_percent = from._internal_error_rate_percent();
  uint64_t raw_error_rate_percent;
  memcpy(&raw_error_rate_percent, &tmp_error_rate_percent, sizeof(tmp_error_rate_percent));
  if (raw_error_rate_percent != 0) {
    _this->_internal_set_error_rate_percent(from._internal_error_rate_percent());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latency_p50_ms = from._internal_latency_p50_ms();
  uint64_t raw_latency_p50_ms;
  memcpy(&raw_latency_p50_ms, &tmp_latency_p50_ms, sizeof(tmp_latency_p50_ms));
  if (raw_latency_p50_ms != 0) {
    _this->_internal_set_latency_p50_ms(from._internal_latency_p50_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latency_p95_ms = from._internal_latency_p95_ms();
  uint64_t raw_latency_p95_ms;
  memcpy(&raw_latency_p95_ms, &tmp_latency_p95_ms, sizeof(tmp_latency_p95_ms));
  if (raw_latency_p95_ms != 0) {
    _this->_internal_set_latency_p95_ms(from._internal_latency_p95_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latency_p99_ms = from._internal_latency_p99_ms();
  uint64_t raw_latency_p99_ms;
  memcpy(&raw_latency_p99_ms, &tmp_latency_p99_ms, sizeof(tmp_latency_p99_ms));
  if (raw_latency_p99_ms != 0) {
    _this->_internal_set_latency_p99_ms(from._internal_latency_p99_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throughput_rps = from._internal_throughput_rps();
  uint64_t raw_throughput_rps;
  memcpy(&raw_throughput_rps, &tmp_throughput_rps, sizeof(tmp_throughput_rps));
  if (raw_throughput_rps != 0) {
    _this->_internal_set_throughput_rps(from._internal_throughput_rps());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceLevelIndicators::CopyFrom(const ServiceLevelIndicators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.ServiceLevelIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceLevelIndicators::IsInitialized() const {
  return true;
}

void ServiceLevelIndicators::InternalSwap(ServiceLevelIndicators* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceLevelIndicators, _impl_.throughput_rps_)
      + sizeof(ServiceLevelIndicators::_impl_.throughput_rps_)
      - PROTOBUF_FIELD_OFFSET(ServiceLevelIndicators, _impl_.window_start_)>(
          reinterpret_cast<char*>(&_impl_.window_start_),
          reinterpret_cast<char*>(&other->_impl_.window_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceLevelIndicators::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[44]);
}

// ===================================================================

class SystemMetrics::_Internal {
 public:
};

SystemMetrics::SystemMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.SystemMetrics)
}
SystemMetrics::SystemMetrics(const SystemMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_usage_percent_){}
    , decltype(_impl_.cpu_load_1m_){}
    , decltype(_impl_.cpu_load_5m_){}
    , decltype(_impl_.cpu_load_15m_){}
    , decltype(_impl_.memory_total_bytes_){}
    , decltype(_impl_.memory_used_bytes_){}
    , decltype(_impl_.memory_available_bytes_){}
    , decltype(_impl_.memory_usage_percent_){}
    , decltype(_impl_.disk_total_bytes_){}
    , decltype(_impl_.disk_used_bytes_){}
    , decltype(_impl_.disk_available_bytes_){}
    , decltype(_impl_.disk_usage_percent_){}
    , decltype(_impl_.network_bytes_sent_){}
    , decltype(_impl_.network_bytes_received_){}
    , decltype(_impl_.network_packets_sent_){}
    , decltype(_impl_.network_packets_received_){}
    , decltype(_impl_.process_count_){}
    , decltype(_impl_.thread_count_){}
    , decltype(_impl_.file_descriptor_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cpu_usage_percent_, &from._impl_.cpu_usage_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.file_descriptor_count_) -
    reinterpret_cast<char*>(&_impl_.cpu_usage_percent_)) + sizeof(_impl_.file_descriptor_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.SystemMetrics)
}

inline void SystemMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_usage_percent_){0}
    , decltype(_impl_.cpu_load_1m_){0}
    , decltype(_impl_.cpu_load_5m_){0}
    , decltype(_impl_.cpu_load_15m_){0}
    , decltype(_impl_.memory_total_bytes_){uint64_t{0u}}
    , decltype(_impl_.memory_used_bytes_){uint64_t{0u}}
    , decltype(_impl_.memory_available_bytes_){uint64_t{0u}}
    , decltype(_impl_.memory_usage_percent_){0}
    , decltype(_impl_.disk_total_bytes_){uint64_t{0u}}
    , decltype(_impl_.disk_used_bytes_){uint64_t{0u}}
    , decltype(_impl_.disk_available_bytes_){uint64_t{0u}}
    , decltype(_impl_.disk_usage_percent_){0}
    , decltype(_impl_.network_bytes_sent_){uint64_t{0u}}
    , decltype(_impl_.network_bytes_received_){uint64_t{0u}}
    , decltype(_impl_.network_packets_sent_){uint64_t{0u}}
    , decltype(_impl_.network_packets_received_){uint64_t{0u}}
    , decltype(_impl_.process_count_){0u}
    , decltype(_impl_.thread_count_){0u}
    , decltype(_impl_.file_descriptor_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SystemMetrics::~SystemMetrics() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.SystemMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SystemMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.SystemMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cpu_usage_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.file_descriptor_count_) -
      reinterpret_cast<char*>(&_impl_.cpu_usage_percent_)) + sizeof(_impl_.file_descriptor_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double cpu_usage_percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.cpu_usage_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cpu_load_1m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.cpu_load_1m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cpu_load_5m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.cpu_load_5m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cpu_load_15m = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.cpu_load_15m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 memory_total_bytes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.memory_total_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 memory_used_bytes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.memory_used_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 memory_available_bytes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.memory_available_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double memory_usage_percent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.memory_usage_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 disk_total_bytes = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.disk_total_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 disk_used_bytes = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.disk_used_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 disk_available_bytes = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.disk_available_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double disk_usage_percent = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.disk_usage_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 network_bytes_sent = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.network_bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 network_bytes_received = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.network_bytes_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 network_packets_sent = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.network_packets_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 network_packets_received = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.network_packets_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 process_count = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.process_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 thread_count = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.thread_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 file_descriptor_count = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.file_descriptor_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.SystemMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double cpu_usage_percent = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage_percent = this->_internal_cpu_usage_percent();
  uint64_t raw_cpu_usage_percent;
  memcpy(&raw_cpu_usage_percent, &tmp_cpu_usage_percent, sizeof(tmp_cpu_usage_percent));
  if (raw_cpu_usage_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_cpu_usage_percent(), target);
  }

  // double cpu_load_1m = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_load_1m = this->_internal_cpu_load_1m();
  uint64_t raw_cpu_load_1m;
  memcpy(&raw_cpu_load_1m, &tmp_cpu_load_1m, sizeof(tmp_cpu_load_1m));
  if (raw_cpu_load_1m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_cpu_load_1m(), target);
  }

  // double cpu_load_5m = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_load_5m = this->_internal_cpu_load_5m();
  uint64_t raw_cpu_load_5m;
  memcpy(&raw_cpu_load_5m, &tmp_cpu_load_5m, sizeof(tmp_cpu_load_5m));
  if (raw_cpu_load_5m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_cpu_load_5m(), target);
  }

  // double cpu_load_15m = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_load_15m = this->_internal_cpu_load_15m();
  uint64_t raw_cpu_load_15m;
  memcpy(&raw_cpu_load_15m, &tmp_cpu_load_15m, sizeof(tmp_cpu_load_15m));
  if (raw_cpu_load_15m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_cpu_load_15m(), target);
  }

  // uint64 memory_total_bytes = 10;
  if (this->_internal_memory_total_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_memory_total_bytes(), target);
  }

  // uint64 memory_used_bytes = 11;
  if (this->_internal_memory_used_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_memory_used_bytes(), target);
  }

  // uint64 memory_available_bytes = 12;
  if (this->_internal_memory_available_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_memory_available_bytes(), target);
  }

  // double memory_usage_percent = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage_percent = this->_internal_memory_usage_percent();
  uint64_t raw_memory_usage_percent;
  memcpy(&raw_memory_usage_percent, &tmp_memory_usage_percent, sizeof(tmp_memory_usage_percent));
  if (raw_memory_usage_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_memory_usage_percent(), target);
  }

  // uint64 disk_total_bytes = 20;
  if (this->_internal_disk_total_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_disk_total_bytes(), target);
  }

  // uint64 disk_used_bytes = 21;
  if (this->_internal_disk_used_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_disk_used_bytes(), target);
  }

  // uint64 disk_available_bytes = 22;
  if (this->_internal_disk_available_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(22, this->_internal_disk_available_bytes(), target);
  }

  // double disk_usage_percent = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_usage_percent = this->_internal_disk_usage_percent();
  uint64_t raw_disk_usage_percent;
  memcpy(&raw_disk_usage_percent, &tmp_disk_usage_percent, sizeof(tmp_disk_usage_percent));
  if (raw_disk_usage_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_disk_usage_percent(), target);
  }

  // uint64 network_bytes_sent = 30;
  if (this->_internal_network_bytes_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(30, this->_internal_network_bytes_sent(), target);
  }

  // uint64 network_bytes_received = 31;
  if (this->_internal_network_bytes_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(31, this->_internal_network_bytes_received(), target);
  }

  // uint64 network_packets_sent = 32;
  if (this->_internal_network_packets_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(32, this->_internal_network_packets_sent(), target);
  }

  // uint64 network_packets_received = 33;
  if (this->_internal_network_packets_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(33, this->_internal_network_packets_received(), target);
  }

  // uint32 process_count = 40;
  if (this->_internal_process_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(40, this->_internal_process_count(), target);
  }

  // uint32 thread_count = 41;
  if (this->_internal_thread_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(41, this->_internal_thread_count(), target);
  }

  // uint32 file_descriptor_count = 42;
  if (this->_internal_file_descriptor_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(42, this->_internal_file_descriptor_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.SystemMetrics)
  return target;
}

size_t SystemMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.SystemMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double cpu_usage_percent = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage_percent = this->_internal_cpu_usage_percent();
  uint64_t raw_cpu_usage_percent;
  memcpy(&raw_cpu_usage_percent, &tmp_cpu_usage_percent, sizeof(tmp_cpu_usage_percent));
  if (raw_cpu_usage_percent != 0) {
    total_size += 1 + 8;
  }

  // double cpu_load_1m = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_load_1m = this->_internal_cpu_load_1m();
  uint64_t raw_cpu_load_1m;
  memcpy(&raw_cpu_load_1m, &tmp_cpu_load_1m, sizeof(tmp_cpu_load_1m));
  if (raw_cpu_load_1m != 0) {
    total_size += 1 + 8;
  }

  // double cpu_load_5m = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_load_5m = this->_internal_cpu_load_5m();
  uint64_t raw_cpu_load_5m;
  memcpy(&raw_cpu_load_5m, &tmp_cpu_load_5m, sizeof(tmp_cpu_load_5m));
  if (raw_cpu_load_5m != 0) {
    total_size += 1 + 8;
  }

  // double cpu_load_15m = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_load_15m = this->_internal_cpu_load_15m();
  uint64_t raw_cpu_load_15m;
  memcpy(&raw_cpu_load_15m, &tmp_cpu_load_15m, sizeof(tmp_cpu_load_15m));
  if (raw_cpu_load_15m != 0) {
    total_size += 1 + 8;
  }

  // uint64 memory_total_bytes = 10;
  if (this->_internal_memory_total_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_memory_total_bytes());
  }

  // uint64 memory_used_bytes = 11;
  if (this->_internal_memory_used_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_memory_used_bytes());
  }

  // uint64 memory_available_bytes = 12;
  if (this->_internal_memory_available_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_memory_available_bytes());
  }

  // double memory_usage_percent = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage_percent = this->_internal_memory_usage_percent();
  uint64_t raw_memory_usage_percent;
  memcpy(&raw_memory_usage_percent, &tmp_memory_usage_percent, sizeof(tmp_memory_usage_percent));
  if (raw_memory_usage_percent != 0) {
    total_size += 1 + 8;
  }

  // uint64 disk_total_bytes = 20;
  if (this->_internal_disk_total_bytes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_disk_total_bytes());
  }

  // uint64 disk_used_bytes = 21;
  if (this->_internal_disk_used_bytes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_disk_used_bytes());
  }

  // uint64 disk_available_bytes = 22;
  if (this->_internal_disk_available_bytes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_disk_available_bytes());
  }

  // double disk_usage_percent = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_usage_percent = this->_internal_disk_usage_percent();
  uint64_t raw_disk_usage_percent;
  memcpy(&raw_disk_usage_percent, &tmp_disk_usage_percent, sizeof(tmp_disk_usage_percent));
  if (raw_disk_usage_percent != 0) {
    total_size += 2 + 8;
  }

  // uint64 network_bytes_sent = 30;
  if (this->_internal_network_bytes_sent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_network_bytes_sent());
  }

  // uint64 network_bytes_received = 31;
  if (this->_internal_network_bytes_received() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_network_bytes_received());
  }

  // uint64 network_packets_sent = 32;
  if (this->_internal_network_packets_sent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_network_packets_sent());
  }

  // uint64 network_packets_received = 33;
  if (this->_internal_network_packets_received() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_network_packets_received());
  }

  // uint32 process_count = 40;
  if (this->_internal_process_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_process_count());
  }

  // uint32 thread_count = 41;
  if (this->_internal_thread_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_thread_count());
  }

  // uint32 file_descriptor_count = 42;
  if (this->_internal_file_descriptor_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_file_descriptor_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemMetrics::GetClassData() const { return &_class_data_; }


void SystemMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemMetrics*>(&to_msg);
  auto& from = static_cast<const SystemMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.SystemMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage_percent = from._internal_cpu_usage_percent();
  uint64_t raw_cpu_usage_percent;
  memcpy(&raw_cpu_usage_percent, &tmp_cpu_usage_percent, sizeof(tmp_cpu_usage_percent));
  if (raw_cpu_usage_percent != 0) {
    _this->_internal_set_cpu_usage_percent(from._internal_cpu_usage_percent());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_load_1m = from._internal_cpu_load_1m();
  uint64_t raw_cpu_load_1m;
  memcpy(&raw_cpu_load_1m, &tmp_cpu_load_1m, sizeof(tmp_cpu_load_1m));
  if (raw_cpu_load_1m != 0) {
    _this->_internal_set_cpu_load_1m(from._internal_cpu_load_1m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_load_5m = from._internal_cpu_load_5m();
  uint64_t raw_cpu_load_5m;
  memcpy(&raw_cpu_load_5m, &tmp_cpu_load_5m, sizeof(tmp_cpu_load_5m));
  if (raw_cpu_load_5m != 0) {
    _this->_internal_set_cpu_load_5m(from._internal_cpu_load_5m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_load_15m = from._internal_cpu_load_15m();
  uint64_t raw_cpu_load_15m;
  memcpy(&raw_cpu_load_15m, &tmp_cpu_load_15m, sizeof(tmp_cpu_load_15m));
  if (raw_cpu_load_15m != 0) {
    _this->_internal_set_cpu_load_15m(from._internal_cpu_load_15m());
  }
  if (from._internal_memory_total_bytes() != 0) {
    _this->_internal_set_memory_total_bytes(from._internal_memory_total_bytes());
  }
  if (from._internal_memory_used_bytes() != 0) {
    _this->_internal_set_memory_used_bytes(from._internal_memory_used_bytes());
  }
  if (from._internal_memory_available_bytes() != 0) {
    _this->_internal_set_memory_available_bytes(from._internal_memory_available_bytes());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage_percent = from._internal_memory_usage_percent();
  uint64_t raw_memory_usage_percent;
  memcpy(&raw_memory_usage_percent, &tmp_memory_usage_percent, sizeof(tmp_memory_usage_percent));
  if (raw_memory_usage_percent != 0) {
    _this->_internal_set_memory_usage_percent(from._internal_memory_usage_percent());
  }
  if (from._internal_disk_total_bytes() != 0) {
    _this->_internal_set_disk_total_bytes(from._internal_disk_total_bytes());
  }
  if (from._internal_disk_used_bytes() != 0) {
    _this->_internal_set_disk_used_bytes(from._internal_disk_used_bytes());
  }
  if (from._internal_disk_available_bytes() != 0) {
    _this->_internal_set_disk_available_bytes(from._internal_disk_available_bytes());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_usage_percent = from._internal_disk_usage_percent();
  uint64_t raw_disk_usage_percent;
  memcpy(&raw_disk_usage_percent, &tmp_disk_usage_percent, sizeof(tmp_disk_usage_percent));
  if (raw_disk_usage_percent != 0) {
    _this->_internal_set_disk_usage_percent(from._internal_disk_usage_percent());
  }
  if (from._internal_network_bytes_sent() != 0) {
    _this->_internal_set_network_bytes_sent(from._internal_network_bytes_sent());
  }
  if (from._internal_network_bytes_received() != 0) {
    _this->_internal_set_network_bytes_received(from._internal_network_bytes_received());
  }
  if (from._internal_network_packets_sent() != 0) {
    _this->_internal_set_network_packets_sent(from._internal_network_packets_sent());
  }
  if (from._internal_network_packets_received() != 0) {
    _this->_internal_set_network_packets_received(from._internal_network_packets_received());
  }
  if (from._internal_process_count() != 0) {
    _this->_internal_set_process_count(from._internal_process_count());
  }
  if (from._internal_thread_count() != 0) {
    _this->_internal_set_thread_count(from._internal_thread_count());
  }
  if (from._internal_file_descriptor_count() != 0) {
    _this->_internal_set_file_descriptor_count(from._internal_file_descriptor_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemMetrics::CopyFrom(const SystemMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.SystemMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemMetrics::IsInitialized() const {
  return true;
}

void SystemMetrics::InternalSwap(SystemMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemMetrics, _impl_.file_descriptor_count_)
      + sizeof(SystemMetrics::_impl_.file_descriptor_count_)
      - PROTOBUF_FIELD_OFFSET(SystemMetrics, _impl_.cpu_usage_percent_)>(
          reinterpret_cast<char*>(&_impl_.cpu_usage_percent_),
          reinterpret_cast<char*>(&other->_impl_.cpu_usage_percent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[45]);
}

// ===================================================================

class UptimeInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const UptimeInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_restart(const UptimeInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UptimeInfo::_Internal::start_time(const UptimeInfo* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UptimeInfo::_Internal::last_restart(const UptimeInfo* msg) {
  return *msg->_impl_.last_restart_;
}
void UptimeInfo::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void UptimeInfo::clear_last_restart() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_restart_ != nullptr) {
    delete _impl_.last_restart_;
  }
  _impl_.last_restart_ = nullptr;
}
UptimeInfo::UptimeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.UptimeInfo)
}
UptimeInfo::UptimeInfo(const UptimeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UptimeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.last_restart_){nullptr}
    , decltype(_impl_.uptime_seconds_){}
    , decltype(_impl_.restart_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_last_restart()) {
    _this->_impl_.last_restart_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_restart_);
  }
  ::memcpy(&_impl_.uptime_seconds_, &from._impl_.uptime_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.restart_count_) -
    reinterpret_cast<char*>(&_impl_.uptime_seconds_)) + sizeof(_impl_.restart_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.UptimeInfo)
}

inline void UptimeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.last_restart_){nullptr}
    , decltype(_impl_.uptime_seconds_){int64_t{0}}
    , decltype(_impl_.restart_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UptimeInfo::~UptimeInfo() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.UptimeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UptimeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.last_restart_;
}

void UptimeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UptimeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.UptimeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_restart_ != nullptr) {
    delete _impl_.last_restart_;
  }
  _impl_.last_restart_ = nullptr;
  ::memset(&_impl_.uptime_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.restart_count_) -
      reinterpret_cast<char*>(&_impl_.uptime_seconds_)) + sizeof(_impl_.restart_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UptimeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 uptime_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.uptime_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 restart_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.restart_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_restart = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_restart(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UptimeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.UptimeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // int64 uptime_seconds = 2;
  if (this->_internal_uptime_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_uptime_seconds(), target);
  }

  // uint32 restart_count = 3;
  if (this->_internal_restart_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_restart_count(), target);
  }

  // .google.protobuf.Timestamp last_restart = 4;
  if (this->_internal_has_last_restart()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::last_restart(this),
        _Internal::last_restart(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.UptimeInfo)
  return target;
}

size_t UptimeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.UptimeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp last_restart = 4;
  if (this->_internal_has_last_restart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_restart_);
  }

  // int64 uptime_seconds = 2;
  if (this->_internal_uptime_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uptime_seconds());
  }

  // uint32 restart_count = 3;
  if (this->_internal_restart_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_restart_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UptimeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UptimeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UptimeInfo::GetClassData() const { return &_class_data_; }


void UptimeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UptimeInfo*>(&to_msg);
  auto& from = static_cast<const UptimeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.UptimeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_last_restart()) {
    _this->_internal_mutable_last_restart()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_restart());
  }
  if (from._internal_uptime_seconds() != 0) {
    _this->_internal_set_uptime_seconds(from._internal_uptime_seconds());
  }
  if (from._internal_restart_count() != 0) {
    _this->_internal_set_restart_count(from._internal_restart_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UptimeInfo::CopyFrom(const UptimeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.UptimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UptimeInfo::IsInitialized() const {
  return true;
}

void UptimeInfo::InternalSwap(UptimeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UptimeInfo, _impl_.restart_count_)
      + sizeof(UptimeInfo::_impl_.restart_count_)
      - PROTOBUF_FIELD_OFFSET(UptimeInfo, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UptimeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[46]);
}

// ===================================================================

class IncidentEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const IncidentEvent* msg);
  static const ::unhinged::observability::v1::IncidentData& incident(const IncidentEvent* msg);
  static const ::unhinged::observability::v1::DestinationFlags& destinations(const IncidentEvent* msg);
  static const ::unhinged::observability::v1::PartitionInfo& partition_info(const IncidentEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
IncidentEvent::_Internal::timestamp(const IncidentEvent* msg) {
  return *msg->_impl_.timestamp_;
}
const ::unhinged::observability::v1::IncidentData&
IncidentEvent::_Internal::incident(const IncidentEvent* msg) {
  return *msg->_impl_.incident_;
}
const ::unhinged::observability::v1::DestinationFlags&
IncidentEvent::_Internal::destinations(const IncidentEvent* msg) {
  return *msg->_impl_.destinations_;
}
const ::unhinged::observability::v1::PartitionInfo&
IncidentEvent::_Internal::partition_info(const IncidentEvent* msg) {
  return *msg->_impl_.partition_info_;
}
void IncidentEvent::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
IncidentEvent::IncidentEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.IncidentEvent)
}
IncidentEvent::IncidentEvent(const IncidentEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IncidentEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.incident_){nullptr}
    , decltype(_impl_.destinations_){nullptr}
    , decltype(_impl_.partition_info_){nullptr}
    , decltype(_impl_.sequence_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_type().empty()) {
    _this->_impl_.event_type_.Set(from._internal_event_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_incident()) {
    _this->_impl_.incident_ = new ::unhinged::observability::v1::IncidentData(*from._impl_.incident_);
  }
  if (from._internal_has_destinations()) {
    _this->_impl_.destinations_ = new ::unhinged::observability::v1::DestinationFlags(*from._impl_.destinations_);
  }
  if (from._internal_has_partition_info()) {
    _this->_impl_.partition_info_ = new ::unhinged::observability::v1::PartitionInfo(*from._impl_.partition_info_);
  }
  _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.IncidentEvent)
}

inline void IncidentEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.incident_){nullptr}
    , decltype(_impl_.destinations_){nullptr}
    , decltype(_impl_.partition_info_){nullptr}
    , decltype(_impl_.sequence_number_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IncidentEvent::~IncidentEvent() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.IncidentEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncidentEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_id_.Destroy();
  _impl_.event_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.incident_;
  if (this != internal_default_instance()) delete _impl_.destinations_;
  if (this != internal_default_instance()) delete _impl_.partition_info_;
}

void IncidentEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncidentEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.IncidentEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_id_.ClearToEmpty();
  _impl_.event_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.incident_ != nullptr) {
    delete _impl_.incident_;
  }
  _impl_.incident_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.destinations_ != nullptr) {
    delete _impl_.destinations_;
  }
  _impl_.destinations_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.partition_info_ != nullptr) {
    delete _impl_.partition_info_;
  }
  _impl_.partition_info_ = nullptr;
  _impl_.sequence_number_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidentEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentEvent.event_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string event_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_event_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentEvent.event_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.IncidentData incident = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_incident(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.DestinationFlags destinations = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_destinations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.PartitionInfo partition_info = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_partition_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncidentEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.IncidentEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentEvent.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string event_type = 3;
  if (!this->_internal_event_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_type().data(), static_cast<int>(this->_internal_event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentEvent.event_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_event_type(), target);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sequence_number(), target);
  }

  // .unhinged.observability.v1.IncidentData incident = 10;
  if (this->_internal_has_incident()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::incident(this),
        _Internal::incident(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.DestinationFlags destinations = 20;
  if (this->_internal_has_destinations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::destinations(this),
        _Internal::destinations(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.PartitionInfo partition_info = 25;
  if (this->_internal_has_partition_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::partition_info(this),
        _Internal::partition_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.IncidentEvent)
  return target;
}

size_t IncidentEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.IncidentEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // string event_type = 3;
  if (!this->_internal_event_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_type());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .unhinged.observability.v1.IncidentData incident = 10;
  if (this->_internal_has_incident()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.incident_);
  }

  // .unhinged.observability.v1.DestinationFlags destinations = 20;
  if (this->_internal_has_destinations()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destinations_);
  }

  // .unhinged.observability.v1.PartitionInfo partition_info = 25;
  if (this->_internal_has_partition_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.partition_info_);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequence_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncidentEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IncidentEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncidentEvent::GetClassData() const { return &_class_data_; }


void IncidentEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IncidentEvent*>(&to_msg);
  auto& from = static_cast<const IncidentEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.IncidentEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (!from._internal_event_type().empty()) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_incident()) {
    _this->_internal_mutable_incident()->::unhinged::observability::v1::IncidentData::MergeFrom(
        from._internal_incident());
  }
  if (from._internal_has_destinations()) {
    _this->_internal_mutable_destinations()->::unhinged::observability::v1::DestinationFlags::MergeFrom(
        from._internal_destinations());
  }
  if (from._internal_has_partition_info()) {
    _this->_internal_mutable_partition_info()->::unhinged::observability::v1::PartitionInfo::MergeFrom(
        from._internal_partition_info());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncidentEvent::CopyFrom(const IncidentEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.IncidentEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentEvent::IsInitialized() const {
  return true;
}

void IncidentEvent::InternalSwap(IncidentEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_type_, lhs_arena,
      &other->_impl_.event_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncidentEvent, _impl_.sequence_number_)
      + sizeof(IncidentEvent::_impl_.sequence_number_)
      - PROTOBUF_FIELD_OFFSET(IncidentEvent, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidentEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[47]);
}

// ===================================================================

class IncidentData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const IncidentData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const IncidentData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& resolved_at(const IncidentData* msg);
  static const ::unhinged::observability::v1::IncidentImpact& impact(const IncidentData* msg);
  static const ::unhinged::observability::v1::IncidentResolution& resolution(const IncidentData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
IncidentData::_Internal::created_at(const IncidentData* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
IncidentData::_Internal::updated_at(const IncidentData* msg) {
  return *msg->_impl_.updated_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
IncidentData::_Internal::resolved_at(const IncidentData* msg) {
  return *msg->_impl_.resolved_at_;
}
const ::unhinged::observability::v1::IncidentImpact&
IncidentData::_Internal::impact(const IncidentData* msg) {
  return *msg->_impl_.impact_;
}
const ::unhinged::observability::v1::IncidentResolution&
IncidentData::_Internal::resolution(const IncidentData* msg) {
  return *msg->_impl_.resolution_;
}
void IncidentData::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void IncidentData::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
void IncidentData::clear_resolved_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.resolved_at_ != nullptr) {
    delete _impl_.resolved_at_;
  }
  _impl_.resolved_at_ = nullptr;
}
IncidentData::IncidentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.IncidentData)
}
IncidentData::IncidentData(const IncidentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IncidentData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.affected_services_){from._impl_.affected_services_}
    , decltype(_impl_.affected_components_){from._impl_.affected_components_}
    , decltype(_impl_.updates_){from._impl_.updates_}
    , decltype(_impl_.incident_id_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.resolved_at_){nullptr}
    , decltype(_impl_.impact_){nullptr}
    , decltype(_impl_.resolution_){nullptr}
    , decltype(_impl_.severity_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.incident_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.incident_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_incident_id().empty()) {
    _this->_impl_.incident_id_.Set(from._internal_incident_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  if (from._internal_has_resolved_at()) {
    _this->_impl_.resolved_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.resolved_at_);
  }
  if (from._internal_has_impact()) {
    _this->_impl_.impact_ = new ::unhinged::observability::v1::IncidentImpact(*from._impl_.impact_);
  }
  if (from._internal_has_resolution()) {
    _this->_impl_.resolution_ = new ::unhinged::observability::v1::IncidentResolution(*from._impl_.resolution_);
  }
  ::memcpy(&_impl_.severity_, &from._impl_.severity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.severity_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.IncidentData)
}

inline void IncidentData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.affected_services_){arena}
    , decltype(_impl_.affected_components_){arena}
    , decltype(_impl_.updates_){arena}
    , decltype(_impl_.incident_id_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.resolved_at_){nullptr}
    , decltype(_impl_.impact_){nullptr}
    , decltype(_impl_.resolution_){nullptr}
    , decltype(_impl_.severity_){0}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.incident_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.incident_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IncidentData::~IncidentData() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.IncidentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncidentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.affected_services_.~RepeatedPtrField();
  _impl_.affected_components_.~RepeatedPtrField();
  _impl_.updates_.~RepeatedPtrField();
  _impl_.incident_id_.Destroy();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
  if (this != internal_default_instance()) delete _impl_.resolved_at_;
  if (this != internal_default_instance()) delete _impl_.impact_;
  if (this != internal_default_instance()) delete _impl_.resolution_;
}

void IncidentData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncidentData::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.IncidentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.affected_services_.Clear();
  _impl_.affected_components_.Clear();
  _impl_.updates_.Clear();
  _impl_.incident_id_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resolved_at_ != nullptr) {
    delete _impl_.resolved_at_;
  }
  _impl_.resolved_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.impact_ != nullptr) {
    delete _impl_.impact_;
  }
  _impl_.impact_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resolution_ != nullptr) {
    delete _impl_.resolution_;
  }
  _impl_.resolution_ = nullptr;
  ::memset(&_impl_.severity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.severity_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string incident_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_incident_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentData.incident_id"));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentData.title"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentData.description"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.IncidentSeverity severity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::unhinged::observability::v1::IncidentSeverity>(val));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.IncidentStatus status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::unhinged::observability::v1::IncidentStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp resolved_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolved_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string affected_services = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_affected_services();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentData.affected_services"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string affected_components = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_affected_components();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentData.affected_components"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.observability.v1.IncidentUpdate updates = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.IncidentImpact impact = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_impact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.IncidentResolution resolution = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncidentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.IncidentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string incident_id = 1;
  if (!this->_internal_incident_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_incident_id().data(), static_cast<int>(this->_internal_incident_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentData.incident_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_incident_id(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentData.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentData.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .unhinged.observability.v1.IncidentSeverity severity = 4;
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_severity(), target);
  }

  // .unhinged.observability.v1.IncidentStatus status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp created_at = 10;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp resolved_at = 12;
  if (this->_internal_has_resolved_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::resolved_at(this),
        _Internal::resolved_at(this).GetCachedSize(), target, stream);
  }

  // repeated string affected_services = 15;
  for (int i = 0, n = this->_internal_affected_services_size(); i < n; i++) {
    const auto& s = this->_internal_affected_services(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentData.affected_services");
    target = stream->WriteString(15, s, target);
  }

  // repeated string affected_components = 16;
  for (int i = 0, n = this->_internal_affected_components_size(); i < n; i++) {
    const auto& s = this->_internal_affected_components(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentData.affected_components");
    target = stream->WriteString(16, s, target);
  }

  // repeated .unhinged.observability.v1.IncidentUpdate updates = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.IncidentImpact impact = 25;
  if (this->_internal_has_impact()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::impact(this),
        _Internal::impact(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.IncidentResolution resolution = 30;
  if (this->_internal_has_resolution()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::resolution(this),
        _Internal::resolution(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.IncidentData)
  return target;
}

size_t IncidentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.IncidentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string affected_services = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.affected_services_.size());
  for (int i = 0, n = _impl_.affected_services_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.affected_services_.Get(i));
  }

  // repeated string affected_components = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.affected_components_.size());
  for (int i = 0, n = _impl_.affected_components_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.affected_components_.Get(i));
  }

  // repeated .unhinged.observability.v1.IncidentUpdate updates = 20;
  total_size += 2UL * this->_internal_updates_size();
  for (const auto& msg : this->_impl_.updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string incident_id = 1;
  if (!this->_internal_incident_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_incident_id());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Timestamp created_at = 10;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .google.protobuf.Timestamp resolved_at = 12;
  if (this->_internal_has_resolved_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resolved_at_);
  }

  // .unhinged.observability.v1.IncidentImpact impact = 25;
  if (this->_internal_has_impact()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.impact_);
  }

  // .unhinged.observability.v1.IncidentResolution resolution = 30;
  if (this->_internal_has_resolution()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resolution_);
  }

  // .unhinged.observability.v1.IncidentSeverity severity = 4;
  if (this->_internal_severity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_severity());
  }

  // .unhinged.observability.v1.IncidentStatus status = 5;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncidentData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IncidentData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncidentData::GetClassData() const { return &_class_data_; }


void IncidentData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IncidentData*>(&to_msg);
  auto& from = static_cast<const IncidentData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.IncidentData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.affected_services_.MergeFrom(from._impl_.affected_services_);
  _this->_impl_.affected_components_.MergeFrom(from._impl_.affected_components_);
  _this->_impl_.updates_.MergeFrom(from._impl_.updates_);
  if (!from._internal_incident_id().empty()) {
    _this->_internal_set_incident_id(from._internal_incident_id());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_has_resolved_at()) {
    _this->_internal_mutable_resolved_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_resolved_at());
  }
  if (from._internal_has_impact()) {
    _this->_internal_mutable_impact()->::unhinged::observability::v1::IncidentImpact::MergeFrom(
        from._internal_impact());
  }
  if (from._internal_has_resolution()) {
    _this->_internal_mutable_resolution()->::unhinged::observability::v1::IncidentResolution::MergeFrom(
        from._internal_resolution());
  }
  if (from._internal_severity() != 0) {
    _this->_internal_set_severity(from._internal_severity());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncidentData::CopyFrom(const IncidentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.IncidentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentData::IsInitialized() const {
  return true;
}

void IncidentData::InternalSwap(IncidentData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.affected_services_.InternalSwap(&other->_impl_.affected_services_);
  _impl_.affected_components_.InternalSwap(&other->_impl_.affected_components_);
  _impl_.updates_.InternalSwap(&other->_impl_.updates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.incident_id_, lhs_arena,
      &other->_impl_.incident_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncidentData, _impl_.status_)
      + sizeof(IncidentData::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(IncidentData, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidentData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[48]);
}

// ===================================================================

class IncidentUpdate::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const IncidentUpdate* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
IncidentUpdate::_Internal::timestamp(const IncidentUpdate* msg) {
  return *msg->_impl_.timestamp_;
}
void IncidentUpdate::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
IncidentUpdate::IncidentUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.IncidentUpdate)
}
IncidentUpdate::IncidentUpdate(const IncidentUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IncidentUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.update_id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.author_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.status_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.update_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.update_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_update_id().empty()) {
    _this->_impl_.update_id_.Set(from._internal_update_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.author_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_author().empty()) {
    _this->_impl_.author_.Set(from._internal_author(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.IncidentUpdate)
}

inline void IncidentUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.update_id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.author_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.update_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.update_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.author_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IncidentUpdate::~IncidentUpdate() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.IncidentUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncidentUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.update_id_.Destroy();
  _impl_.message_.Destroy();
  _impl_.author_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void IncidentUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncidentUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.IncidentUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.update_id_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.author_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  ::memset(&_impl_.status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidentUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string update_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_update_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentUpdate.update_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.IncidentStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::unhinged::observability::v1::IncidentStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentUpdate.message"));
        } else
          goto handle_unusual;
        continue;
      // string author = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_author();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentUpdate.author"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.UpdateType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::unhinged::observability::v1::UpdateType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncidentUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.IncidentUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string update_id = 1;
  if (!this->_internal_update_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_id().data(), static_cast<int>(this->_internal_update_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentUpdate.update_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_update_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.IncidentStatus status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentUpdate.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // string author = 5;
  if (!this->_internal_author().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentUpdate.author");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_author(), target);
  }

  // .unhinged.observability.v1.UpdateType type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.IncidentUpdate)
  return target;
}

size_t IncidentUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.IncidentUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string update_id = 1;
  if (!this->_internal_update_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_id());
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string author = 5;
  if (!this->_internal_author().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .unhinged.observability.v1.IncidentStatus status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .unhinged.observability.v1.UpdateType type = 6;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncidentUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IncidentUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncidentUpdate::GetClassData() const { return &_class_data_; }


void IncidentUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IncidentUpdate*>(&to_msg);
  auto& from = static_cast<const IncidentUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.IncidentUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_update_id().empty()) {
    _this->_internal_set_update_id(from._internal_update_id());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_author().empty()) {
    _this->_internal_set_author(from._internal_author());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncidentUpdate::CopyFrom(const IncidentUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.IncidentUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentUpdate::IsInitialized() const {
  return true;
}

void IncidentUpdate::InternalSwap(IncidentUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.update_id_, lhs_arena,
      &other->_impl_.update_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.author_, lhs_arena,
      &other->_impl_.author_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncidentUpdate, _impl_.type_)
      + sizeof(IncidentUpdate::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(IncidentUpdate, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidentUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[49]);
}

// ===================================================================

class IncidentImpact::_Internal {
 public:
};

IncidentImpact::IncidentImpact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.IncidentImpact)
}
IncidentImpact::IncidentImpact(const IncidentImpact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IncidentImpact* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.affected_regions_){from._impl_.affected_regions_}
    , decltype(_impl_.business_impact_){}
    , decltype(_impl_.availability_impact_){}
    , decltype(_impl_.performance_impact_){}
    , decltype(_impl_.affected_users_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.business_impact_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.business_impact_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_business_impact().empty()) {
    _this->_impl_.business_impact_.Set(from._internal_business_impact(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.availability_impact_, &from._impl_.availability_impact_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.affected_users_) -
    reinterpret_cast<char*>(&_impl_.availability_impact_)) + sizeof(_impl_.affected_users_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.IncidentImpact)
}

inline void IncidentImpact::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.affected_regions_){arena}
    , decltype(_impl_.business_impact_){}
    , decltype(_impl_.availability_impact_){0}
    , decltype(_impl_.performance_impact_){0}
    , decltype(_impl_.affected_users_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.business_impact_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.business_impact_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IncidentImpact::~IncidentImpact() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.IncidentImpact)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncidentImpact::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.affected_regions_.~RepeatedPtrField();
  _impl_.business_impact_.Destroy();
}

void IncidentImpact::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncidentImpact::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.IncidentImpact)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.affected_regions_.Clear();
  _impl_.business_impact_.ClearToEmpty();
  ::memset(&_impl_.availability_impact_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.affected_users_) -
      reinterpret_cast<char*>(&_impl_.availability_impact_)) + sizeof(_impl_.affected_users_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidentImpact::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double availability_impact = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.availability_impact_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double performance_impact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.performance_impact_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 affected_users = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.affected_users_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string affected_regions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_affected_regions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentImpact.affected_regions"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string business_impact = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_business_impact();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentImpact.business_impact"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncidentImpact::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.IncidentImpact)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double availability_impact = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_availability_impact = this->_internal_availability_impact();
  uint64_t raw_availability_impact;
  memcpy(&raw_availability_impact, &tmp_availability_impact, sizeof(tmp_availability_impact));
  if (raw_availability_impact != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_availability_impact(), target);
  }

  // double performance_impact = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_performance_impact = this->_internal_performance_impact();
  uint64_t raw_performance_impact;
  memcpy(&raw_performance_impact, &tmp_performance_impact, sizeof(tmp_performance_impact));
  if (raw_performance_impact != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_performance_impact(), target);
  }

  // uint32 affected_users = 3;
  if (this->_internal_affected_users() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_affected_users(), target);
  }

  // repeated string affected_regions = 4;
  for (int i = 0, n = this->_internal_affected_regions_size(); i < n; i++) {
    const auto& s = this->_internal_affected_regions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentImpact.affected_regions");
    target = stream->WriteString(4, s, target);
  }

  // string business_impact = 5;
  if (!this->_internal_business_impact().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_business_impact().data(), static_cast<int>(this->_internal_business_impact().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentImpact.business_impact");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_business_impact(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.IncidentImpact)
  return target;
}

size_t IncidentImpact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.IncidentImpact)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string affected_regions = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.affected_regions_.size());
  for (int i = 0, n = _impl_.affected_regions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.affected_regions_.Get(i));
  }

  // string business_impact = 5;
  if (!this->_internal_business_impact().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_business_impact());
  }

  // double availability_impact = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_availability_impact = this->_internal_availability_impact();
  uint64_t raw_availability_impact;
  memcpy(&raw_availability_impact, &tmp_availability_impact, sizeof(tmp_availability_impact));
  if (raw_availability_impact != 0) {
    total_size += 1 + 8;
  }

  // double performance_impact = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_performance_impact = this->_internal_performance_impact();
  uint64_t raw_performance_impact;
  memcpy(&raw_performance_impact, &tmp_performance_impact, sizeof(tmp_performance_impact));
  if (raw_performance_impact != 0) {
    total_size += 1 + 8;
  }

  // uint32 affected_users = 3;
  if (this->_internal_affected_users() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_affected_users());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncidentImpact::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IncidentImpact::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncidentImpact::GetClassData() const { return &_class_data_; }


void IncidentImpact::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IncidentImpact*>(&to_msg);
  auto& from = static_cast<const IncidentImpact&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.IncidentImpact)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.affected_regions_.MergeFrom(from._impl_.affected_regions_);
  if (!from._internal_business_impact().empty()) {
    _this->_internal_set_business_impact(from._internal_business_impact());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_availability_impact = from._internal_availability_impact();
  uint64_t raw_availability_impact;
  memcpy(&raw_availability_impact, &tmp_availability_impact, sizeof(tmp_availability_impact));
  if (raw_availability_impact != 0) {
    _this->_internal_set_availability_impact(from._internal_availability_impact());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_performance_impact = from._internal_performance_impact();
  uint64_t raw_performance_impact;
  memcpy(&raw_performance_impact, &tmp_performance_impact, sizeof(tmp_performance_impact));
  if (raw_performance_impact != 0) {
    _this->_internal_set_performance_impact(from._internal_performance_impact());
  }
  if (from._internal_affected_users() != 0) {
    _this->_internal_set_affected_users(from._internal_affected_users());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncidentImpact::CopyFrom(const IncidentImpact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.IncidentImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentImpact::IsInitialized() const {
  return true;
}

void IncidentImpact::InternalSwap(IncidentImpact* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.affected_regions_.InternalSwap(&other->_impl_.affected_regions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.business_impact_, lhs_arena,
      &other->_impl_.business_impact_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncidentImpact, _impl_.affected_users_)
      + sizeof(IncidentImpact::_impl_.affected_users_)
      - PROTOBUF_FIELD_OFFSET(IncidentImpact, _impl_.availability_impact_)>(
          reinterpret_cast<char*>(&_impl_.availability_impact_),
          reinterpret_cast<char*>(&other->_impl_.availability_impact_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidentImpact::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[50]);
}

// ===================================================================

class IncidentResolution::_Internal {
 public:
};

IncidentResolution::IncidentResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.IncidentResolution)
}
IncidentResolution::IncidentResolution(const IncidentResolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IncidentResolution* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lessons_learned_){from._impl_.lessons_learned_}
    , decltype(_impl_.root_cause_){}
    , decltype(_impl_.resolution_steps_){}
    , decltype(_impl_.prevention_measures_){}
    , decltype(_impl_.postmortem_url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.root_cause_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_cause_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_root_cause().empty()) {
    _this->_impl_.root_cause_.Set(from._internal_root_cause(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resolution_steps_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resolution_steps_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resolution_steps().empty()) {
    _this->_impl_.resolution_steps_.Set(from._internal_resolution_steps(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prevention_measures_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prevention_measures_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prevention_measures().empty()) {
    _this->_impl_.prevention_measures_.Set(from._internal_prevention_measures(), 
      _this->GetArenaForAllocation());
  }
  _impl_.postmortem_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.postmortem_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_postmortem_url().empty()) {
    _this->_impl_.postmortem_url_.Set(from._internal_postmortem_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.IncidentResolution)
}

inline void IncidentResolution::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lessons_learned_){arena}
    , decltype(_impl_.root_cause_){}
    , decltype(_impl_.resolution_steps_){}
    , decltype(_impl_.prevention_measures_){}
    , decltype(_impl_.postmortem_url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.root_cause_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_cause_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resolution_steps_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resolution_steps_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prevention_measures_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prevention_measures_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.postmortem_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.postmortem_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IncidentResolution::~IncidentResolution() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.IncidentResolution)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncidentResolution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lessons_learned_.~RepeatedPtrField();
  _impl_.root_cause_.Destroy();
  _impl_.resolution_steps_.Destroy();
  _impl_.prevention_measures_.Destroy();
  _impl_.postmortem_url_.Destroy();
}

void IncidentResolution::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncidentResolution::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.IncidentResolution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lessons_learned_.Clear();
  _impl_.root_cause_.ClearToEmpty();
  _impl_.resolution_steps_.ClearToEmpty();
  _impl_.prevention_measures_.ClearToEmpty();
  _impl_.postmortem_url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidentResolution::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string root_cause = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_root_cause();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentResolution.root_cause"));
        } else
          goto handle_unusual;
        continue;
      // string resolution_steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resolution_steps();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentResolution.resolution_steps"));
        } else
          goto handle_unusual;
        continue;
      // string prevention_measures = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_prevention_measures();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentResolution.prevention_measures"));
        } else
          goto handle_unusual;
        continue;
      // repeated string lessons_learned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lessons_learned();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentResolution.lessons_learned"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string postmortem_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_postmortem_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentResolution.postmortem_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncidentResolution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.IncidentResolution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string root_cause = 1;
  if (!this->_internal_root_cause().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_root_cause().data(), static_cast<int>(this->_internal_root_cause().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentResolution.root_cause");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_root_cause(), target);
  }

  // string resolution_steps = 2;
  if (!this->_internal_resolution_steps().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resolution_steps().data(), static_cast<int>(this->_internal_resolution_steps().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentResolution.resolution_steps");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resolution_steps(), target);
  }

  // string prevention_measures = 3;
  if (!this->_internal_prevention_measures().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prevention_measures().data(), static_cast<int>(this->_internal_prevention_measures().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentResolution.prevention_measures");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prevention_measures(), target);
  }

  // repeated string lessons_learned = 4;
  for (int i = 0, n = this->_internal_lessons_learned_size(); i < n; i++) {
    const auto& s = this->_internal_lessons_learned(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentResolution.lessons_learned");
    target = stream->WriteString(4, s, target);
  }

  // string postmortem_url = 5;
  if (!this->_internal_postmortem_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postmortem_url().data(), static_cast<int>(this->_internal_postmortem_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentResolution.postmortem_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_postmortem_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.IncidentResolution)
  return target;
}

size_t IncidentResolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.IncidentResolution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lessons_learned = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.lessons_learned_.size());
  for (int i = 0, n = _impl_.lessons_learned_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.lessons_learned_.Get(i));
  }

  // string root_cause = 1;
  if (!this->_internal_root_cause().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_root_cause());
  }

  // string resolution_steps = 2;
  if (!this->_internal_resolution_steps().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resolution_steps());
  }

  // string prevention_measures = 3;
  if (!this->_internal_prevention_measures().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prevention_measures());
  }

  // string postmortem_url = 5;
  if (!this->_internal_postmortem_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postmortem_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncidentResolution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IncidentResolution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncidentResolution::GetClassData() const { return &_class_data_; }


void IncidentResolution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IncidentResolution*>(&to_msg);
  auto& from = static_cast<const IncidentResolution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.IncidentResolution)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lessons_learned_.MergeFrom(from._impl_.lessons_learned_);
  if (!from._internal_root_cause().empty()) {
    _this->_internal_set_root_cause(from._internal_root_cause());
  }
  if (!from._internal_resolution_steps().empty()) {
    _this->_internal_set_resolution_steps(from._internal_resolution_steps());
  }
  if (!from._internal_prevention_measures().empty()) {
    _this->_internal_set_prevention_measures(from._internal_prevention_measures());
  }
  if (!from._internal_postmortem_url().empty()) {
    _this->_internal_set_postmortem_url(from._internal_postmortem_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncidentResolution::CopyFrom(const IncidentResolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.IncidentResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentResolution::IsInitialized() const {
  return true;
}

void IncidentResolution::InternalSwap(IncidentResolution* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lessons_learned_.InternalSwap(&other->_impl_.lessons_learned_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.root_cause_, lhs_arena,
      &other->_impl_.root_cause_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resolution_steps_, lhs_arena,
      &other->_impl_.resolution_steps_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prevention_measures_, lhs_arena,
      &other->_impl_.prevention_measures_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.postmortem_url_, lhs_arena,
      &other->_impl_.postmortem_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidentResolution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[51]);
}

// ===================================================================

class IngestResponse::_Internal {
 public:
};

IngestResponse::IngestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.IngestResponse)
}
IngestResponse::IngestResponse(const IngestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IngestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.processed_count_){}
    , decltype(_impl_.failed_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.failed_count_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.failed_count_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.IngestResponse)
}

inline void IngestResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.processed_count_){0u}
    , decltype(_impl_.failed_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IngestResponse::~IngestResponse() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.IngestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IngestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void IngestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IngestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.IngestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.failed_count_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.failed_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IngestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IngestResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // uint32 processed_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.processed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 failed_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.failed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IngestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.IngestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IngestResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // uint32 processed_count = 3;
  if (this->_internal_processed_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_processed_count(), target);
  }

  // uint32 failed_count = 4;
  if (this->_internal_failed_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_failed_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.IngestResponse)
  return target;
}

size_t IngestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.IngestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 processed_count = 3;
  if (this->_internal_processed_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_processed_count());
  }

  // uint32 failed_count = 4;
  if (this->_internal_failed_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_failed_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IngestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IngestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IngestResponse::GetClassData() const { return &_class_data_; }


void IngestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IngestResponse*>(&to_msg);
  auto& from = static_cast<const IngestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.IngestResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_processed_count() != 0) {
    _this->_internal_set_processed_count(from._internal_processed_count());
  }
  if (from._internal_failed_count() != 0) {
    _this->_internal_set_failed_count(from._internal_failed_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IngestResponse::CopyFrom(const IngestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.IngestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IngestResponse::IsInitialized() const {
  return true;
}

void IngestResponse::InternalSwap(IngestResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IngestResponse, _impl_.failed_count_)
      + sizeof(IngestResponse::_impl_.failed_count_)
      - PROTOBUF_FIELD_OFFSET(IngestResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IngestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[52]);
}

// ===================================================================

class HealthResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& next_check(const HealthResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HealthResponse::_Internal::next_check(const HealthResponse* msg) {
  return *msg->_impl_.next_check_;
}
void HealthResponse::clear_next_check() {
  if (GetArenaForAllocation() == nullptr && _impl_.next_check_ != nullptr) {
    delete _impl_.next_check_;
  }
  _impl_.next_check_ = nullptr;
}
HealthResponse::HealthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.HealthResponse)
}
HealthResponse::HealthResponse(const HealthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.next_check_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_next_check()) {
    _this->_impl_.next_check_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.next_check_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.HealthResponse)
}

inline void HealthResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.next_check_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthResponse::~HealthResponse() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.HealthResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.next_check_;
}

void HealthResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.HealthResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.next_check_ != nullptr) {
    delete _impl_.next_check_;
  }
  _impl_.next_check_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.HealthResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp next_check = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_check(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.HealthResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.HealthResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp next_check = 3;
  if (this->_internal_has_next_check()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::next_check(this),
        _Internal::next_check(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.HealthResponse)
  return target;
}

size_t HealthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.HealthResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp next_check = 3;
  if (this->_internal_has_next_check()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_check_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthResponse::GetClassData() const { return &_class_data_; }


void HealthResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthResponse*>(&to_msg);
  auto& from = static_cast<const HealthResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.HealthResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_next_check()) {
    _this->_internal_mutable_next_check()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_next_check());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthResponse::CopyFrom(const HealthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.HealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthResponse::IsInitialized() const {
  return true;
}

void HealthResponse::InternalSwap(HealthResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthResponse, _impl_.success_)
      + sizeof(HealthResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(HealthResponse, _impl_.next_check_)>(
          reinterpret_cast<char*>(&_impl_.next_check_),
          reinterpret_cast<char*>(&other->_impl_.next_check_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[53]);
}

// ===================================================================

class IncidentResponse::_Internal {
 public:
};

IncidentResponse::IncidentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.IncidentResponse)
}
IncidentResponse::IncidentResponse(const IncidentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IncidentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.incident_id_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.incident_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.incident_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_incident_id().empty()) {
    _this->_impl_.incident_id_.Set(from._internal_incident_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.IncidentResponse)
}

inline void IncidentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.incident_id_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.incident_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.incident_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IncidentResponse::~IncidentResponse() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.IncidentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncidentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.incident_id_.Destroy();
}

void IncidentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncidentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.IncidentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.incident_id_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // string incident_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_incident_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.IncidentResponse.incident_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncidentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.IncidentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string incident_id = 3;
  if (!this->_internal_incident_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_incident_id().data(), static_cast<int>(this->_internal_incident_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.IncidentResponse.incident_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_incident_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.IncidentResponse)
  return target;
}

size_t IncidentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.IncidentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string incident_id = 3;
  if (!this->_internal_incident_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_incident_id());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncidentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IncidentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncidentResponse::GetClassData() const { return &_class_data_; }


void IncidentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IncidentResponse*>(&to_msg);
  auto& from = static_cast<const IncidentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.IncidentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_incident_id().empty()) {
    _this->_internal_set_incident_id(from._internal_incident_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncidentResponse::CopyFrom(const IncidentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.IncidentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentResponse::IsInitialized() const {
  return true;
}

void IncidentResponse::InternalSwap(IncidentResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.incident_id_, lhs_arena,
      &other->_impl_.incident_id_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[54]);
}

// ===================================================================

class HealthQuery::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& since(const HealthQuery* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HealthQuery::_Internal::since(const HealthQuery* msg) {
  return *msg->_impl_.since_;
}
void HealthQuery::clear_since() {
  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
}
HealthQuery::HealthQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.HealthQuery)
}
HealthQuery::HealthQuery(const HealthQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_names_){from._impl_.service_names_}
    , decltype(_impl_.since_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_since()) {
    _this->_impl_.since_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.since_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.HealthQuery)
}

inline void HealthQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_names_){arena}
    , decltype(_impl_.since_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HealthQuery::~HealthQuery() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.HealthQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_names_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.since_;
}

void HealthQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.HealthQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_names_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string service_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_service_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.HealthQuery.service_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp since = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_since(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.HealthQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string service_names = 1;
  for (int i = 0, n = this->_internal_service_names_size(); i < n; i++) {
    const auto& s = this->_internal_service_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.HealthQuery.service_names");
    target = stream->WriteString(1, s, target);
  }

  // .google.protobuf.Timestamp since = 2;
  if (this->_internal_has_since()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::since(this),
        _Internal::since(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.HealthQuery)
  return target;
}

size_t HealthQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.HealthQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string service_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.service_names_.size());
  for (int i = 0, n = _impl_.service_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.service_names_.Get(i));
  }

  // .google.protobuf.Timestamp since = 2;
  if (this->_internal_has_since()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.since_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthQuery::GetClassData() const { return &_class_data_; }


void HealthQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthQuery*>(&to_msg);
  auto& from = static_cast<const HealthQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.HealthQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.service_names_.MergeFrom(from._impl_.service_names_);
  if (from._internal_has_since()) {
    _this->_internal_mutable_since()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_since());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthQuery::CopyFrom(const HealthQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.HealthQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthQuery::IsInitialized() const {
  return true;
}

void HealthQuery::InternalSwap(HealthQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.service_names_.InternalSwap(&other->_impl_.service_names_);
  swap(_impl_.since_, other->_impl_.since_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[55]);
}

// ===================================================================

class HealthQueryResponse::_Internal {
 public:
};

HealthQueryResponse::HealthQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.HealthQueryResponse)
}
HealthQueryResponse::HealthQueryResponse(const HealthQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthQueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.services_){from._impl_.services_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.HealthQueryResponse)
}

inline void HealthQueryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.services_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HealthQueryResponse::~HealthQueryResponse() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.HealthQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.services_.~RepeatedPtrField();
}

void HealthQueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.HealthQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.services_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.observability.v1.ServiceHealth services = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.HealthQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.ServiceHealth services = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.HealthQueryResponse)
  return target;
}

size_t HealthQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.HealthQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.ServiceHealth services = 1;
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_impl_.services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthQueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthQueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthQueryResponse::GetClassData() const { return &_class_data_; }


void HealthQueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthQueryResponse*>(&to_msg);
  auto& from = static_cast<const HealthQueryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.HealthQueryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.services_.MergeFrom(from._impl_.services_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthQueryResponse::CopyFrom(const HealthQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.HealthQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthQueryResponse::IsInitialized() const {
  return true;
}

void HealthQueryResponse::InternalSwap(HealthQueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthQueryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[56]);
}

// ===================================================================

class IncidentQuery::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& since(const IncidentQuery* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
IncidentQuery::_Internal::since(const IncidentQuery* msg) {
  return *msg->_impl_.since_;
}
void IncidentQuery::clear_since() {
  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
}
IncidentQuery::IncidentQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.IncidentQuery)
}
IncidentQuery::IncidentQuery(const IncidentQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IncidentQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statuses_){from._impl_.statuses_}
    , /*decltype(_impl_._statuses_cached_byte_size_)*/{0}
    , decltype(_impl_.severities_){from._impl_.severities_}
    , /*decltype(_impl_._severities_cached_byte_size_)*/{0}
    , decltype(_impl_.since_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_since()) {
    _this->_impl_.since_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.since_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.IncidentQuery)
}

inline void IncidentQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.statuses_){arena}
    , /*decltype(_impl_._statuses_cached_byte_size_)*/{0}
    , decltype(_impl_.severities_){arena}
    , /*decltype(_impl_._severities_cached_byte_size_)*/{0}
    , decltype(_impl_.since_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IncidentQuery::~IncidentQuery() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.IncidentQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncidentQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.statuses_.~RepeatedField();
  _impl_.severities_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.since_;
}

void IncidentQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncidentQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.IncidentQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.statuses_.Clear();
  _impl_.severities_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidentQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.observability.v1.IncidentStatus statuses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_statuses(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_statuses(static_cast<::unhinged::observability::v1::IncidentStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .unhinged.observability.v1.IncidentSeverity severities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_severities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_severities(static_cast<::unhinged::observability::v1::IncidentSeverity>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp since = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_since(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncidentQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.IncidentQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.IncidentStatus statuses = 1;
  {
    int byte_size = _impl_._statuses_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.statuses_, byte_size, target);
    }
  }

  // repeated .unhinged.observability.v1.IncidentSeverity severities = 2;
  {
    int byte_size = _impl_._severities_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, _impl_.severities_, byte_size, target);
    }
  }

  // .google.protobuf.Timestamp since = 3;
  if (this->_internal_has_since()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::since(this),
        _Internal::since(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.IncidentQuery)
  return target;
}

size_t IncidentQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.IncidentQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.IncidentStatus statuses = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_statuses_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_statuses(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._statuses_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .unhinged.observability.v1.IncidentSeverity severities = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_severities_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_severities(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._severities_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .google.protobuf.Timestamp since = 3;
  if (this->_internal_has_since()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.since_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncidentQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IncidentQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncidentQuery::GetClassData() const { return &_class_data_; }


void IncidentQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IncidentQuery*>(&to_msg);
  auto& from = static_cast<const IncidentQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.IncidentQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.statuses_.MergeFrom(from._impl_.statuses_);
  _this->_impl_.severities_.MergeFrom(from._impl_.severities_);
  if (from._internal_has_since()) {
    _this->_internal_mutable_since()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_since());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncidentQuery::CopyFrom(const IncidentQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.IncidentQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentQuery::IsInitialized() const {
  return true;
}

void IncidentQuery::InternalSwap(IncidentQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.statuses_.InternalSwap(&other->_impl_.statuses_);
  _impl_.severities_.InternalSwap(&other->_impl_.severities_);
  swap(_impl_.since_, other->_impl_.since_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidentQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[57]);
}

// ===================================================================

class IncidentQueryResponse::_Internal {
 public:
};

IncidentQueryResponse::IncidentQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.IncidentQueryResponse)
}
IncidentQueryResponse::IncidentQueryResponse(const IncidentQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IncidentQueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.incidents_){from._impl_.incidents_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.IncidentQueryResponse)
}

inline void IncidentQueryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.incidents_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IncidentQueryResponse::~IncidentQueryResponse() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.IncidentQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncidentQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.incidents_.~RepeatedPtrField();
}

void IncidentQueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncidentQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.IncidentQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.incidents_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidentQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.observability.v1.IncidentData incidents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incidents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncidentQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.IncidentQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.IncidentData incidents = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_incidents_size()); i < n; i++) {
    const auto& repfield = this->_internal_incidents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.IncidentQueryResponse)
  return target;
}

size_t IncidentQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.IncidentQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.IncidentData incidents = 1;
  total_size += 1UL * this->_internal_incidents_size();
  for (const auto& msg : this->_impl_.incidents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncidentQueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IncidentQueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncidentQueryResponse::GetClassData() const { return &_class_data_; }


void IncidentQueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IncidentQueryResponse*>(&to_msg);
  auto& from = static_cast<const IncidentQueryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.IncidentQueryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.incidents_.MergeFrom(from._impl_.incidents_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncidentQueryResponse::CopyFrom(const IncidentQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.IncidentQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentQueryResponse::IsInitialized() const {
  return true;
}

void IncidentQueryResponse::InternalSwap(IncidentQueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.incidents_.InternalSwap(&other->_impl_.incidents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidentQueryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[58]);
}

// ===================================================================

MetricQuery_LabelsEntry_DoNotUse::MetricQuery_LabelsEntry_DoNotUse() {}
MetricQuery_LabelsEntry_DoNotUse::MetricQuery_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MetricQuery_LabelsEntry_DoNotUse::MergeFrom(const MetricQuery_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MetricQuery_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[59]);
}

// ===================================================================

class MetricQuery::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const MetricQuery* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const MetricQuery* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MetricQuery::_Internal::start_time(const MetricQuery* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MetricQuery::_Internal::end_time(const MetricQuery* msg) {
  return *msg->_impl_.end_time_;
}
void MetricQuery::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void MetricQuery::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
}
MetricQuery::MetricQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MetricQuery::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.MetricQuery)
}
MetricQuery::MetricQuery(const MetricQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.labels_)*/{}
    , decltype(_impl_.metric_name_){}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _impl_.metric_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metric_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metric_name().empty()) {
    _this->_impl_.metric_name_.Set(from._internal_metric_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_end_time()) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.MetricQuery)
}

inline void MetricQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.labels_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.metric_name_){}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.metric_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metric_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetricQuery::~MetricQuery() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.MetricQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MetricQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labels_.Destruct();
  _impl_.labels_.~MapField();
  _impl_.metric_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
}

void MetricQuery::ArenaDtor(void* object) {
  MetricQuery* _this = reinterpret_cast< MetricQuery* >(object);
  _this->_impl_.labels_.Destruct();
}
void MetricQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.MetricQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labels_.Clear();
  _impl_.metric_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string metric_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_metric_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.MetricQuery.metric_name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> labels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.MetricQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string metric_name = 1;
  if (!this->_internal_metric_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metric_name().data(), static_cast<int>(this->_internal_metric_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.MetricQuery.metric_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_metric_name(), target);
  }

  // map<string, string> labels = 2;
  if (!this->_internal_labels().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = MetricQuery_LabelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_labels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.MetricQuery.LabelsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.MetricQuery.LabelsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 4;
  if (this->_internal_has_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.MetricQuery)
  return target;
}

size_t MetricQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.MetricQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += MetricQuery_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string metric_name = 1;
  if (!this->_internal_metric_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metric_name());
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp end_time = 4;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricQuery::GetClassData() const { return &_class_data_; }


void MetricQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricQuery*>(&to_msg);
  auto& from = static_cast<const MetricQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.MetricQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  if (!from._internal_metric_name().empty()) {
    _this->_internal_set_metric_name(from._internal_metric_name());
  }
  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricQuery::CopyFrom(const MetricQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.MetricQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricQuery::IsInitialized() const {
  return true;
}

void MetricQuery::InternalSwap(MetricQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metric_name_, lhs_arena,
      &other->_impl_.metric_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricQuery, _impl_.end_time_)
      + sizeof(MetricQuery::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(MetricQuery, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[60]);
}

// ===================================================================

class MetricQueryResponse::_Internal {
 public:
};

MetricQueryResponse::MetricQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.MetricQueryResponse)
}
MetricQueryResponse::MetricQueryResponse(const MetricQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricQueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metrics_){from._impl_.metrics_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.MetricQueryResponse)
}

inline void MetricQueryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metrics_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetricQueryResponse::~MetricQueryResponse() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.MetricQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metrics_.~RepeatedPtrField();
}

void MetricQueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.MetricQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metrics_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.observability.v1.MetricData metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.MetricQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.MetricData metrics = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.MetricQueryResponse)
  return target;
}

size_t MetricQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.MetricQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.MetricData metrics = 1;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->_impl_.metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricQueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricQueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricQueryResponse::GetClassData() const { return &_class_data_; }


void MetricQueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricQueryResponse*>(&to_msg);
  auto& from = static_cast<const MetricQueryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.MetricQueryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricQueryResponse::CopyFrom(const MetricQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.MetricQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricQueryResponse::IsInitialized() const {
  return true;
}

void MetricQueryResponse::InternalSwap(MetricQueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricQueryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[61]);
}

// ===================================================================

class TraceQuery::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const TraceQuery* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const TraceQuery* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TraceQuery::_Internal::start_time(const TraceQuery* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TraceQuery::_Internal::end_time(const TraceQuery* msg) {
  return *msg->_impl_.end_time_;
}
void TraceQuery::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void TraceQuery::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
}
TraceQuery::TraceQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.TraceQuery)
}
TraceQuery::TraceQuery(const TraceQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trace_id_){}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_id().empty()) {
    _this->_impl_.trace_id_.Set(from._internal_trace_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_end_time()) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.TraceQuery)
}

inline void TraceQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trace_id_){}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceQuery::~TraceQuery() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.TraceQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trace_id_.Destroy();
  _impl_.service_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
}

void TraceQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.TraceQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trace_id_.ClearToEmpty();
  _impl_.service_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
  _impl_.limit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceQuery.trace_id"));
        } else
          goto handle_unusual;
        continue;
      // string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceQuery.service_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.TraceQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string trace_id = 1;
  if (!this->_internal_trace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_id().data(), static_cast<int>(this->_internal_trace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceQuery.trace_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trace_id(), target);
  }

  // string service_name = 2;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceQuery.service_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_name(), target);
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 4;
  if (this->_internal_has_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  // int32 limit = 5;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.TraceQuery)
  return target;
}

size_t TraceQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.TraceQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trace_id = 1;
  if (!this->_internal_trace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_id());
  }

  // string service_name = 2;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp end_time = 4;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_time_);
  }

  // int32 limit = 5;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceQuery::GetClassData() const { return &_class_data_; }


void TraceQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceQuery*>(&to_msg);
  auto& from = static_cast<const TraceQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.TraceQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end_time());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceQuery::CopyFrom(const TraceQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.TraceQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceQuery::IsInitialized() const {
  return true;
}

void TraceQuery::InternalSwap(TraceQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trace_id_, lhs_arena,
      &other->_impl_.trace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceQuery, _impl_.limit_)
      + sizeof(TraceQuery::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(TraceQuery, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[62]);
}

// ===================================================================

class TraceQueryResponse::_Internal {
 public:
};

TraceQueryResponse::TraceQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.TraceQueryResponse)
}
TraceQueryResponse::TraceQueryResponse(const TraceQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceQueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.traces_){from._impl_.traces_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.TraceQueryResponse)
}

inline void TraceQueryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.traces_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TraceQueryResponse::~TraceQueryResponse() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.TraceQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.traces_.~RepeatedPtrField();
}

void TraceQueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.TraceQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.traces_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .unhinged.observability.v1.TraceEvent traces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.TraceQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.TraceEvent traces = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_traces_size()); i < n; i++) {
    const auto& repfield = this->_internal_traces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.TraceQueryResponse)
  return target;
}

size_t TraceQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.TraceQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unhinged.observability.v1.TraceEvent traces = 1;
  total_size += 1UL * this->_internal_traces_size();
  for (const auto& msg : this->_impl_.traces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceQueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceQueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceQueryResponse::GetClassData() const { return &_class_data_; }


void TraceQueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceQueryResponse*>(&to_msg);
  auto& from = static_cast<const TraceQueryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.TraceQueryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.traces_.MergeFrom(from._impl_.traces_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceQueryResponse::CopyFrom(const TraceQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.TraceQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceQueryResponse::IsInitialized() const {
  return true;
}

void TraceQueryResponse::InternalSwap(TraceQueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.traces_.InternalSwap(&other->_impl_.traces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceQueryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[63]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace observability
}  // namespace unhinged
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::TraceContext*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::TraceContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::TraceContext >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::TraceFlags*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::TraceFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::TraceFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::Resource*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::Resource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::LogEvent*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::LogEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::LogEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::ErrorInfo*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::ErrorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::ErrorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::DestinationFlags*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::DestinationFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::DestinationFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::DataLakeOptions*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::DataLakeOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::DataLakeOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::PartitionInfo*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::PartitionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::PartitionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::TraceEvent*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::TraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::TraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::SpanData_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::SpanData_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::SpanData_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::SpanData*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::SpanData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::SpanData >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::SpanStatus*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::SpanStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::SpanStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::SpanEvent_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::SpanEvent_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::SpanEvent_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::SpanEvent*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::SpanEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::SpanEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::SpanLink_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::SpanLink_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::SpanLink_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::SpanLink*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::SpanLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::SpanLink >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::InstrumentationLibrary*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::InstrumentationLibrary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::InstrumentationLibrary >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::AttributeValue*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::AttributeValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::AttributeValue >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::AttributeArray*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::AttributeArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::AttributeArray >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::AttributeKeyValueList*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::AttributeKeyValueList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::AttributeKeyValueList >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::AttributeKeyValue*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::AttributeKeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::AttributeKeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::MetricEvent*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::MetricEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::MetricEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::MetricData*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::MetricData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::MetricData >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::GaugeData*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::GaugeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::GaugeData >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::CounterData*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::CounterData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::CounterData >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::HistogramData*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::HistogramData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::HistogramData >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::SummaryData*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::SummaryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::SummaryData >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::NumberDataPoint_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::NumberDataPoint_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::NumberDataPoint_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::NumberDataPoint*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::NumberDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::NumberDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::HistogramDataPoint_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::HistogramDataPoint_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::HistogramDataPoint_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::HistogramDataPoint*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::HistogramDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::HistogramDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::SummaryDataPoint_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::SummaryDataPoint_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::SummaryDataPoint_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::SummaryDataPoint*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::SummaryDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::SummaryDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::QuantileValue*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::QuantileValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::QuantileValue >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::Exemplar_FilteredAttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::Exemplar_FilteredAttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::Exemplar_FilteredAttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::Exemplar*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::Exemplar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::Exemplar >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::ServiceHealthEvent*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::ServiceHealthEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::ServiceHealthEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::ServiceHealth*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::ServiceHealth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::ServiceHealth >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::HealthCheck_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::HealthCheck_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::HealthCheck_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::HealthCheck*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::HealthCheck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::HealthCheck >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::DependencyHealth*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::DependencyHealth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::DependencyHealth >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::ServiceLevelIndicators*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::ServiceLevelIndicators >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::ServiceLevelIndicators >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::SystemMetrics*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::SystemMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::SystemMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::UptimeInfo*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::UptimeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::UptimeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::IncidentEvent*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::IncidentEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::IncidentEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::IncidentData*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::IncidentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::IncidentData >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::IncidentUpdate*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::IncidentUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::IncidentUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::IncidentImpact*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::IncidentImpact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::IncidentImpact >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::IncidentResolution*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::IncidentResolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::IncidentResolution >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::IngestResponse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::IngestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::IngestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::HealthResponse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::HealthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::HealthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::IncidentResponse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::IncidentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::IncidentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::HealthQuery*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::HealthQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::HealthQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::HealthQueryResponse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::HealthQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::HealthQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::IncidentQuery*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::IncidentQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::IncidentQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::IncidentQueryResponse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::IncidentQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::IncidentQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::MetricQuery_LabelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::MetricQuery_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::MetricQuery_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::MetricQuery*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::MetricQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::MetricQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::MetricQueryResponse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::MetricQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::MetricQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::TraceQuery*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::TraceQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::TraceQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::TraceQueryResponse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::TraceQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::TraceQueryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
