// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: observability.proto

#include "observability.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace unhinged {
namespace observability {
namespace v1 {
PROTOBUF_CONSTEXPR TraceContext::TraceContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trace_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.span_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_span_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.correlation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_flags_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TraceContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceContextDefaultTypeInternal() {}
  union {
    TraceContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceContextDefaultTypeInternal _TraceContext_default_instance_;
PROTOBUF_CONSTEXPR TraceFlags::TraceFlags(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sampled_)*/false
  , /*decltype(_impl_.random_trace_id_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TraceFlagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceFlagsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceFlagsDefaultTypeInternal() {}
  union {
    TraceFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceFlagsDefaultTypeInternal _TraceFlags_default_instance_;
PROTOBUF_CONSTEXPR Resource_AttributesEntry_DoNotUse::Resource_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Resource_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Resource_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Resource_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Resource_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Resource_AttributesEntry_DoNotUseDefaultTypeInternal _Resource_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Resource::Resource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_instance_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deployment_environment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.k8s_cluster_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.k8s_namespace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.k8s_pod_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_arch_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceDefaultTypeInternal() {}
  union {
    Resource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceDefaultTypeInternal _Resource_default_instance_;
PROTOBUF_CONSTEXPR LogEvent::LogEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.trace_context_)*/nullptr
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.destinations_)*/nullptr
  , /*decltype(_impl_.partition_info_)*/nullptr
  , /*decltype(_impl_.sequence_number_)*/int64_t{0}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogEventDefaultTypeInternal() {}
  union {
    LogEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogEventDefaultTypeInternal _LogEvent_default_instance_;
PROTOBUF_CONSTEXPR ErrorInfo_ErrorAttributesEntry_DoNotUse::ErrorInfo_ErrorAttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ErrorInfo_ErrorAttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorInfo_ErrorAttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorInfo_ErrorAttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ErrorInfo_ErrorAttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorInfo_ErrorAttributesEntry_DoNotUseDefaultTypeInternal _ErrorInfo_ErrorAttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ErrorInfo::ErrorInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.error_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stack_trace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ErrorInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorInfoDefaultTypeInternal() {}
  union {
    ErrorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorInfoDefaultTypeInternal _ErrorInfo_default_instance_;
PROTOBUF_CONSTEXPR DestinationFlags::DestinationFlags(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_lake_options_)*/nullptr
  , /*decltype(_impl_.console_)*/false
  , /*decltype(_impl_.cdc_stream_)*/false
  , /*decltype(_impl_.data_lake_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DestinationFlagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestinationFlagsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestinationFlagsDefaultTypeInternal() {}
  union {
    DestinationFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestinationFlagsDefaultTypeInternal _DestinationFlags_default_instance_;
PROTOBUF_CONSTEXPR DataLakeOptions::DataLakeOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_strategy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_size_)*/0
  , /*decltype(_impl_.flush_interval_seconds_)*/0
  , /*decltype(_impl_.compression_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataLakeOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataLakeOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataLakeOptionsDefaultTypeInternal() {}
  union {
    DataLakeOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataLakeOptionsDefaultTypeInternal _DataLakeOptions_default_instance_;
PROTOBUF_CONSTEXPR PartitionInfo_CustomPartitionsEntry_DoNotUse::PartitionInfo_CustomPartitionsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PartitionInfo_CustomPartitionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionInfo_CustomPartitionsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionInfo_CustomPartitionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PartitionInfo_CustomPartitionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionInfo_CustomPartitionsEntry_DoNotUseDefaultTypeInternal _PartitionInfo_CustomPartitionsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PartitionInfo::PartitionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.custom_partitions_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.date_partition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hour_partition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_partition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level_partition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartitionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionInfoDefaultTypeInternal() {}
  union {
    PartitionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionInfoDefaultTypeInternal _PartitionInfo_default_instance_;
}  // namespace v1
}  // namespace observability
}  // namespace unhinged
static ::_pb::Metadata file_level_metadata_observability_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_observability_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_observability_2eproto = nullptr;

const uint32_t TableStruct_observability_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.span_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.parent_span_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.trace_flags_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.trace_state_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.correlation_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceContext, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceFlags, _impl_.sampled_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::TraceFlags, _impl_.random_trace_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.service_version_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.service_instance_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.deployment_environment_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.k8s_cluster_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.k8s_namespace_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.k8s_pod_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.host_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.host_arch_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::Resource, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.trace_context_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.resource_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.destinations_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::LogEvent, _impl_.partition_info_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo, _impl_.error_type_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo, _impl_.stack_trace_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::ErrorInfo, _impl_.error_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DestinationFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DestinationFlags, _impl_.console_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DestinationFlags, _impl_.cdc_stream_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DestinationFlags, _impl_.data_lake_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DestinationFlags, _impl_.data_lake_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DataLakeOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DataLakeOptions, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DataLakeOptions, _impl_.partition_strategy_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DataLakeOptions, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DataLakeOptions, _impl_.flush_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::DataLakeOptions, _impl_.compression_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo, _impl_.date_partition_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo, _impl_.hour_partition_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo, _impl_.service_partition_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo, _impl_.level_partition_),
  PROTOBUF_FIELD_OFFSET(::unhinged::observability::v1::PartitionInfo, _impl_.custom_partitions_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::unhinged::observability::v1::TraceContext)},
  { 15, -1, -1, sizeof(::unhinged::observability::v1::TraceFlags)},
  { 23, 31, -1, sizeof(::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse)},
  { 33, -1, -1, sizeof(::unhinged::observability::v1::Resource)},
  { 49, -1, -1, sizeof(::unhinged::observability::v1::LogEvent)},
  { 67, 75, -1, sizeof(::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse)},
  { 77, -1, -1, sizeof(::unhinged::observability::v1::ErrorInfo)},
  { 88, -1, -1, sizeof(::unhinged::observability::v1::DestinationFlags)},
  { 98, -1, -1, sizeof(::unhinged::observability::v1::DataLakeOptions)},
  { 109, 117, -1, sizeof(::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse)},
  { 119, -1, -1, sizeof(::unhinged::observability::v1::PartitionInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::unhinged::observability::v1::_TraceContext_default_instance_._instance,
  &::unhinged::observability::v1::_TraceFlags_default_instance_._instance,
  &::unhinged::observability::v1::_Resource_AttributesEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_Resource_default_instance_._instance,
  &::unhinged::observability::v1::_LogEvent_default_instance_._instance,
  &::unhinged::observability::v1::_ErrorInfo_ErrorAttributesEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_ErrorInfo_default_instance_._instance,
  &::unhinged::observability::v1::_DestinationFlags_default_instance_._instance,
  &::unhinged::observability::v1::_DataLakeOptions_default_instance_._instance,
  &::unhinged::observability::v1::_PartitionInfo_CustomPartitionsEntry_DoNotUse_default_instance_._instance,
  &::unhinged::observability::v1::_PartitionInfo_default_instance_._instance,
};

const char descriptor_table_protodef_observability_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023observability.proto\022\031unhinged.observab"
  "ility.v1\032\037google/protobuf/timestamp.prot"
  "o\032\031google/protobuf/any.proto\032\034google/pro"
  "tobuf/struct.proto\032\014common.proto\"\353\001\n\014Tra"
  "ceContext\022\020\n\010trace_id\030\001 \001(\t\022\017\n\007span_id\030\002"
  " \001(\t\022\026\n\016parent_span_id\030\003 \001(\t\022:\n\013trace_fl"
  "ags\030\004 \001(\0132%.unhinged.observability.v1.Tr"
  "aceFlags\022\023\n\013trace_state\030\005 \001(\t\022\026\n\016correla"
  "tion_id\030\n \001(\t\022\022\n\nrequest_id\030\013 \001(\t\022\022\n\nses"
  "sion_id\030\014 \001(\t\022\017\n\007user_id\030\r \001(\t\"6\n\nTraceF"
  "lags\022\017\n\007sampled\030\001 \001(\010\022\027\n\017random_trace_id"
  "\030\002 \001(\010\"\337\002\n\010Resource\022\024\n\014service_name\030\001 \001("
  "\t\022\027\n\017service_version\030\002 \001(\t\022\033\n\023service_in"
  "stance_id\030\003 \001(\t\022\036\n\026deployment_environmen"
  "t\030\004 \001(\t\022\030\n\020k8s_cluster_name\030\005 \001(\t\022\025\n\rk8s"
  "_namespace\030\006 \001(\t\022\024\n\014k8s_pod_name\030\007 \001(\t\022\021"
  "\n\thost_name\030\010 \001(\t\022\021\n\thost_arch\030\t \001(\t\022G\n\n"
  "attributes\030\024 \003(\01323.unhinged.observabilit"
  "y.v1.Resource.AttributesEntry\0321\n\017Attribu"
  "tesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
  "\"\231\004\n\010LogEvent\022\020\n\010event_id\030\001 \001(\t\022-\n\ttimes"
  "tamp\030\002 \001(\0132\032.google.protobuf.Timestamp\022\022"
  "\n\nevent_type\030\003 \001(\t\022\027\n\017sequence_number\030\004 "
  "\001(\003\022>\n\rtrace_context\030\005 \001(\0132\'.unhinged.ob"
  "servability.v1.TraceContext\0225\n\010resource\030"
  "\006 \001(\0132#.unhinged.observability.v1.Resour"
  "ce\0222\n\005level\030\n \001(\0162#.unhinged.observabili"
  "ty.v1.LogLevel\022\017\n\007message\030\013 \001(\t\022)\n\010metad"
  "ata\030\014 \001(\0132\027.google.protobuf.Struct\0223\n\005er"
  "ror\030\017 \001(\0132$.unhinged.observability.v1.Er"
  "rorInfo\022A\n\014destinations\030\024 \001(\0132+.unhinged"
  ".observability.v1.DestinationFlags\022@\n\016pa"
  "rtition_info\030\031 \001(\0132(.unhinged.observabil"
  "ity.v1.PartitionInfo\"\354\001\n\tErrorInfo\022\022\n\ner"
  "ror_type\030\001 \001(\t\022\025\n\rerror_message\030\002 \001(\t\022\023\n"
  "\013stack_trace\030\003 \001(\t\022\022\n\nerror_code\030\004 \001(\t\022S"
  "\n\020error_attributes\030\005 \003(\01329.unhinged.obse"
  "rvability.v1.ErrorInfo.ErrorAttributesEn"
  "try\0326\n\024ErrorAttributesEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\"\221\001\n\020DestinationFlags"
  "\022\017\n\007console\030\001 \001(\010\022\022\n\ncdc_stream\030\002 \001(\010\022\021\n"
  "\tdata_lake\030\003 \001(\010\022E\n\021data_lake_options\030\n "
  "\001(\0132*.unhinged.observability.v1.DataLake"
  "Options\"\266\001\n\017DataLakeOptions\022\022\n\ntable_nam"
  "e\030\001 \001(\t\022\032\n\022partition_strategy\030\002 \001(\t\022\022\n\nb"
  "atch_size\030\003 \001(\005\022\036\n\026flush_interval_second"
  "s\030\004 \001(\005\022\?\n\013compression\030\005 \001(\0162*.unhinged."
  "observability.v1.CompressionType\"\207\002\n\rPar"
  "titionInfo\022\026\n\016date_partition\030\001 \001(\t\022\026\n\016ho"
  "ur_partition\030\002 \001(\t\022\031\n\021service_partition\030"
  "\003 \001(\t\022\027\n\017level_partition\030\004 \001(\t\022Y\n\021custom"
  "_partitions\030\n \003(\0132>.unhinged.observabili"
  "ty.v1.PartitionInfo.CustomPartitionsEntr"
  "y\0327\n\025CustomPartitionsEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001*\241\001\n\010LogLevel\022\031\n\025LOG_L"
  "EVEL_UNSPECIFIED\020\000\022\023\n\017LOG_LEVEL_TRACE\020\001\022"
  "\023\n\017LOG_LEVEL_DEBUG\020\002\022\022\n\016LOG_LEVEL_INFO\020\003"
  "\022\022\n\016LOG_LEVEL_WARN\020\004\022\023\n\017LOG_LEVEL_ERROR\020"
  "\005\022\023\n\017LOG_LEVEL_FATAL\020\006*\235\001\n\017CompressionTy"
  "pe\022\033\n\027COMPRESSION_UNSPECIFIED\020\000\022\024\n\020COMPR"
  "ESSION_NONE\020\001\022\024\n\020COMPRESSION_GZIP\020\002\022\026\n\022C"
  "OMPRESSION_SNAPPY\020\003\022\023\n\017COMPRESSION_LZ4\020\004"
  "\022\024\n\020COMPRESSION_ZSTD\020\005B.\n\026unhinged.obser"
  "vabilityB\022ObservabilityProtoP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_observability_2eproto_deps[4] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_observability_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_observability_2eproto = {
    false, false, 2558, descriptor_table_protodef_observability_2eproto,
    "observability.proto",
    &descriptor_table_observability_2eproto_once, descriptor_table_observability_2eproto_deps, 4, 11,
    schemas, file_default_instances, TableStruct_observability_2eproto::offsets,
    file_level_metadata_observability_2eproto, file_level_enum_descriptors_observability_2eproto,
    file_level_service_descriptors_observability_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_observability_2eproto_getter() {
  return &descriptor_table_observability_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_observability_2eproto(&descriptor_table_observability_2eproto);
namespace unhinged {
namespace observability {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_observability_2eproto);
  return file_level_enum_descriptors_observability_2eproto[0];
}
bool LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_observability_2eproto);
  return file_level_enum_descriptors_observability_2eproto[1];
}
bool CompressionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TraceContext::_Internal {
 public:
  static const ::unhinged::observability::v1::TraceFlags& trace_flags(const TraceContext* msg);
};

const ::unhinged::observability::v1::TraceFlags&
TraceContext::_Internal::trace_flags(const TraceContext* msg) {
  return *msg->_impl_.trace_flags_;
}
TraceContext::TraceContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.TraceContext)
}
TraceContext::TraceContext(const TraceContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.parent_span_id_){}
    , decltype(_impl_.trace_state_){}
    , decltype(_impl_.correlation_id_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.trace_flags_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_id().empty()) {
    _this->_impl_.trace_id_.Set(from._internal_trace_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_span_id().empty()) {
    _this->_impl_.span_id_.Set(from._internal_span_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parent_span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_span_id().empty()) {
    _this->_impl_.parent_span_id_.Set(from._internal_parent_span_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.trace_state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_state().empty()) {
    _this->_impl_.trace_state_.Set(from._internal_trace_state(), 
      _this->GetArenaForAllocation());
  }
  _impl_.correlation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.correlation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_correlation_id().empty()) {
    _this->_impl_.correlation_id_.Set(from._internal_correlation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trace_flags()) {
    _this->_impl_.trace_flags_ = new ::unhinged::observability::v1::TraceFlags(*from._impl_.trace_flags_);
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.TraceContext)
}

inline void TraceContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.parent_span_id_){}
    , decltype(_impl_.trace_state_){}
    , decltype(_impl_.correlation_id_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.trace_flags_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parent_span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trace_state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.correlation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.correlation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceContext::~TraceContext() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.TraceContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trace_id_.Destroy();
  _impl_.span_id_.Destroy();
  _impl_.parent_span_id_.Destroy();
  _impl_.trace_state_.Destroy();
  _impl_.correlation_id_.Destroy();
  _impl_.request_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trace_flags_;
}

void TraceContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceContext::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.TraceContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trace_id_.ClearToEmpty();
  _impl_.span_id_.ClearToEmpty();
  _impl_.parent_span_id_.ClearToEmpty();
  _impl_.trace_state_.ClearToEmpty();
  _impl_.correlation_id_.ClearToEmpty();
  _impl_.request_id_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.trace_flags_ != nullptr) {
    delete _impl_.trace_flags_;
  }
  _impl_.trace_flags_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.trace_id"));
        } else
          goto handle_unusual;
        continue;
      // string span_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_span_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.span_id"));
        } else
          goto handle_unusual;
        continue;
      // string parent_span_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_parent_span_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.parent_span_id"));
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.TraceFlags trace_flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_flags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trace_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_trace_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.trace_state"));
        } else
          goto handle_unusual;
        continue;
      // string correlation_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_correlation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.correlation_id"));
        } else
          goto handle_unusual;
        continue;
      // string request_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.TraceContext.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.TraceContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string trace_id = 1;
  if (!this->_internal_trace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_id().data(), static_cast<int>(this->_internal_trace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.trace_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trace_id(), target);
  }

  // string span_id = 2;
  if (!this->_internal_span_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_span_id().data(), static_cast<int>(this->_internal_span_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.span_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_span_id(), target);
  }

  // string parent_span_id = 3;
  if (!this->_internal_parent_span_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_span_id().data(), static_cast<int>(this->_internal_parent_span_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.parent_span_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_parent_span_id(), target);
  }

  // .unhinged.observability.v1.TraceFlags trace_flags = 4;
  if (this->_internal_has_trace_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::trace_flags(this),
        _Internal::trace_flags(this).GetCachedSize(), target, stream);
  }

  // string trace_state = 5;
  if (!this->_internal_trace_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_state().data(), static_cast<int>(this->_internal_trace_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.trace_state");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_trace_state(), target);
  }

  // string correlation_id = 10;
  if (!this->_internal_correlation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_correlation_id().data(), static_cast<int>(this->_internal_correlation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.correlation_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_correlation_id(), target);
  }

  // string request_id = 11;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.request_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_request_id(), target);
  }

  // string session_id = 12;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.session_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_session_id(), target);
  }

  // string user_id = 13;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.TraceContext.user_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.TraceContext)
  return target;
}

size_t TraceContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.TraceContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trace_id = 1;
  if (!this->_internal_trace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_id());
  }

  // string span_id = 2;
  if (!this->_internal_span_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_span_id());
  }

  // string parent_span_id = 3;
  if (!this->_internal_parent_span_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_span_id());
  }

  // string trace_state = 5;
  if (!this->_internal_trace_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_state());
  }

  // string correlation_id = 10;
  if (!this->_internal_correlation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_correlation_id());
  }

  // string request_id = 11;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string session_id = 12;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string user_id = 13;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .unhinged.observability.v1.TraceFlags trace_flags = 4;
  if (this->_internal_has_trace_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trace_flags_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceContext::GetClassData() const { return &_class_data_; }


void TraceContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceContext*>(&to_msg);
  auto& from = static_cast<const TraceContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.TraceContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  if (!from._internal_span_id().empty()) {
    _this->_internal_set_span_id(from._internal_span_id());
  }
  if (!from._internal_parent_span_id().empty()) {
    _this->_internal_set_parent_span_id(from._internal_parent_span_id());
  }
  if (!from._internal_trace_state().empty()) {
    _this->_internal_set_trace_state(from._internal_trace_state());
  }
  if (!from._internal_correlation_id().empty()) {
    _this->_internal_set_correlation_id(from._internal_correlation_id());
  }
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_trace_flags()) {
    _this->_internal_mutable_trace_flags()->::unhinged::observability::v1::TraceFlags::MergeFrom(
        from._internal_trace_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceContext::CopyFrom(const TraceContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.TraceContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceContext::IsInitialized() const {
  return true;
}

void TraceContext::InternalSwap(TraceContext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trace_id_, lhs_arena,
      &other->_impl_.trace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.span_id_, lhs_arena,
      &other->_impl_.span_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_span_id_, lhs_arena,
      &other->_impl_.parent_span_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trace_state_, lhs_arena,
      &other->_impl_.trace_state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.correlation_id_, lhs_arena,
      &other->_impl_.correlation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  swap(_impl_.trace_flags_, other->_impl_.trace_flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[0]);
}

// ===================================================================

class TraceFlags::_Internal {
 public:
};

TraceFlags::TraceFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.TraceFlags)
}
TraceFlags::TraceFlags(const TraceFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceFlags* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sampled_){}
    , decltype(_impl_.random_trace_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sampled_, &from._impl_.sampled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.random_trace_id_) -
    reinterpret_cast<char*>(&_impl_.sampled_)) + sizeof(_impl_.random_trace_id_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.TraceFlags)
}

inline void TraceFlags::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sampled_){false}
    , decltype(_impl_.random_trace_id_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TraceFlags::~TraceFlags() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.TraceFlags)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceFlags::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.TraceFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.sampled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.random_trace_id_) -
      reinterpret_cast<char*>(&_impl_.sampled_)) + sizeof(_impl_.random_trace_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceFlags::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool sampled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sampled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool random_trace_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.random_trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.TraceFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool sampled = 1;
  if (this->_internal_sampled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_sampled(), target);
  }

  // bool random_trace_id = 2;
  if (this->_internal_random_trace_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_random_trace_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.TraceFlags)
  return target;
}

size_t TraceFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.TraceFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool sampled = 1;
  if (this->_internal_sampled() != 0) {
    total_size += 1 + 1;
  }

  // bool random_trace_id = 2;
  if (this->_internal_random_trace_id() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceFlags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceFlags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceFlags::GetClassData() const { return &_class_data_; }


void TraceFlags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceFlags*>(&to_msg);
  auto& from = static_cast<const TraceFlags&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.TraceFlags)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sampled() != 0) {
    _this->_internal_set_sampled(from._internal_sampled());
  }
  if (from._internal_random_trace_id() != 0) {
    _this->_internal_set_random_trace_id(from._internal_random_trace_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceFlags::CopyFrom(const TraceFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.TraceFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceFlags::IsInitialized() const {
  return true;
}

void TraceFlags::InternalSwap(TraceFlags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceFlags, _impl_.random_trace_id_)
      + sizeof(TraceFlags::_impl_.random_trace_id_)
      - PROTOBUF_FIELD_OFFSET(TraceFlags, _impl_.sampled_)>(
          reinterpret_cast<char*>(&_impl_.sampled_),
          reinterpret_cast<char*>(&other->_impl_.sampled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceFlags::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[1]);
}

// ===================================================================

Resource_AttributesEntry_DoNotUse::Resource_AttributesEntry_DoNotUse() {}
Resource_AttributesEntry_DoNotUse::Resource_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Resource_AttributesEntry_DoNotUse::MergeFrom(const Resource_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Resource_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[2]);
}

// ===================================================================

class Resource::_Internal {
 public:
};

Resource::Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Resource::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.Resource)
}
Resource::Resource(const Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Resource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.service_version_){}
    , decltype(_impl_.service_instance_id_){}
    , decltype(_impl_.deployment_environment_){}
    , decltype(_impl_.k8s_cluster_name_){}
    , decltype(_impl_.k8s_namespace_){}
    , decltype(_impl_.k8s_pod_name_){}
    , decltype(_impl_.host_name_){}
    , decltype(_impl_.host_arch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_version().empty()) {
    _this->_impl_.service_version_.Set(from._internal_service_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_instance_id().empty()) {
    _this->_impl_.service_instance_id_.Set(from._internal_service_instance_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deployment_environment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deployment_environment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deployment_environment().empty()) {
    _this->_impl_.deployment_environment_.Set(from._internal_deployment_environment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.k8s_cluster_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k8s_cluster_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k8s_cluster_name().empty()) {
    _this->_impl_.k8s_cluster_name_.Set(from._internal_k8s_cluster_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.k8s_namespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k8s_namespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k8s_namespace().empty()) {
    _this->_impl_.k8s_namespace_.Set(from._internal_k8s_namespace(), 
      _this->GetArenaForAllocation());
  }
  _impl_.k8s_pod_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k8s_pod_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k8s_pod_name().empty()) {
    _this->_impl_.k8s_pod_name_.Set(from._internal_k8s_pod_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_name().empty()) {
    _this->_impl_.host_name_.Set(from._internal_host_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_arch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_arch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_arch().empty()) {
    _this->_impl_.host_arch_.Set(from._internal_host_arch(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.Resource)
}

inline void Resource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.service_version_){}
    , decltype(_impl_.service_instance_id_){}
    , decltype(_impl_.deployment_environment_){}
    , decltype(_impl_.k8s_cluster_name_){}
    , decltype(_impl_.k8s_namespace_){}
    , decltype(_impl_.k8s_pod_name_){}
    , decltype(_impl_.host_name_){}
    , decltype(_impl_.host_arch_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deployment_environment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deployment_environment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.k8s_cluster_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k8s_cluster_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.k8s_namespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k8s_namespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.k8s_pod_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k8s_pod_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_arch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_arch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.Resource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Resource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.service_name_.Destroy();
  _impl_.service_version_.Destroy();
  _impl_.service_instance_id_.Destroy();
  _impl_.deployment_environment_.Destroy();
  _impl_.k8s_cluster_name_.Destroy();
  _impl_.k8s_namespace_.Destroy();
  _impl_.k8s_pod_name_.Destroy();
  _impl_.host_name_.Destroy();
  _impl_.host_arch_.Destroy();
}

void Resource::ArenaDtor(void* object) {
  Resource* _this = reinterpret_cast< Resource* >(object);
  _this->_impl_.attributes_.Destruct();
}
void Resource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.Resource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.service_name_.ClearToEmpty();
  _impl_.service_version_.ClearToEmpty();
  _impl_.service_instance_id_.ClearToEmpty();
  _impl_.deployment_environment_.ClearToEmpty();
  _impl_.k8s_cluster_name_.ClearToEmpty();
  _impl_.k8s_namespace_.ClearToEmpty();
  _impl_.k8s_pod_name_.ClearToEmpty();
  _impl_.host_name_.ClearToEmpty();
  _impl_.host_arch_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Resource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.service_name"));
        } else
          goto handle_unusual;
        continue;
      // string service_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.service_version"));
        } else
          goto handle_unusual;
        continue;
      // string service_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_service_instance_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.service_instance_id"));
        } else
          goto handle_unusual;
        continue;
      // string deployment_environment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_deployment_environment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.deployment_environment"));
        } else
          goto handle_unusual;
        continue;
      // string k8s_cluster_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_k8s_cluster_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.k8s_cluster_name"));
        } else
          goto handle_unusual;
        continue;
      // string k8s_namespace = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_k8s_namespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.k8s_namespace"));
        } else
          goto handle_unusual;
        continue;
      // string k8s_pod_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_k8s_pod_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.k8s_pod_name"));
        } else
          goto handle_unusual;
        continue;
      // string host_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_host_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.host_name"));
        } else
          goto handle_unusual;
        continue;
      // string host_arch = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_host_arch();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.Resource.host_arch"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributes = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Resource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.Resource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string service_version = 2;
  if (!this->_internal_service_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_version().data(), static_cast<int>(this->_internal_service_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.service_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_version(), target);
  }

  // string service_instance_id = 3;
  if (!this->_internal_service_instance_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_instance_id().data(), static_cast<int>(this->_internal_service_instance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.service_instance_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_instance_id(), target);
  }

  // string deployment_environment = 4;
  if (!this->_internal_deployment_environment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deployment_environment().data(), static_cast<int>(this->_internal_deployment_environment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.deployment_environment");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_deployment_environment(), target);
  }

  // string k8s_cluster_name = 5;
  if (!this->_internal_k8s_cluster_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_k8s_cluster_name().data(), static_cast<int>(this->_internal_k8s_cluster_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.k8s_cluster_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_k8s_cluster_name(), target);
  }

  // string k8s_namespace = 6;
  if (!this->_internal_k8s_namespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_k8s_namespace().data(), static_cast<int>(this->_internal_k8s_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.k8s_namespace");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_k8s_namespace(), target);
  }

  // string k8s_pod_name = 7;
  if (!this->_internal_k8s_pod_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_k8s_pod_name().data(), static_cast<int>(this->_internal_k8s_pod_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.k8s_pod_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_k8s_pod_name(), target);
  }

  // string host_name = 8;
  if (!this->_internal_host_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.host_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_host_name(), target);
  }

  // string host_arch = 9;
  if (!this->_internal_host_arch().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_arch().data(), static_cast<int>(this->_internal_host_arch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.Resource.host_arch");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_host_arch(), target);
  }

  // map<string, string> attributes = 20;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Resource_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.Resource.AttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.Resource.AttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(20, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(20, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.Resource)
  return target;
}

size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.Resource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += Resource_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string service_version = 2;
  if (!this->_internal_service_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_version());
  }

  // string service_instance_id = 3;
  if (!this->_internal_service_instance_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_instance_id());
  }

  // string deployment_environment = 4;
  if (!this->_internal_deployment_environment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deployment_environment());
  }

  // string k8s_cluster_name = 5;
  if (!this->_internal_k8s_cluster_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_k8s_cluster_name());
  }

  // string k8s_namespace = 6;
  if (!this->_internal_k8s_namespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_k8s_namespace());
  }

  // string k8s_pod_name = 7;
  if (!this->_internal_k8s_pod_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_k8s_pod_name());
  }

  // string host_name = 8;
  if (!this->_internal_host_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  // string host_arch = 9;
  if (!this->_internal_host_arch().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_arch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Resource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Resource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Resource::GetClassData() const { return &_class_data_; }


void Resource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Resource*>(&to_msg);
  auto& from = static_cast<const Resource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.Resource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_service_version().empty()) {
    _this->_internal_set_service_version(from._internal_service_version());
  }
  if (!from._internal_service_instance_id().empty()) {
    _this->_internal_set_service_instance_id(from._internal_service_instance_id());
  }
  if (!from._internal_deployment_environment().empty()) {
    _this->_internal_set_deployment_environment(from._internal_deployment_environment());
  }
  if (!from._internal_k8s_cluster_name().empty()) {
    _this->_internal_set_k8s_cluster_name(from._internal_k8s_cluster_name());
  }
  if (!from._internal_k8s_namespace().empty()) {
    _this->_internal_set_k8s_namespace(from._internal_k8s_namespace());
  }
  if (!from._internal_k8s_pod_name().empty()) {
    _this->_internal_set_k8s_pod_name(from._internal_k8s_pod_name());
  }
  if (!from._internal_host_name().empty()) {
    _this->_internal_set_host_name(from._internal_host_name());
  }
  if (!from._internal_host_arch().empty()) {
    _this->_internal_set_host_arch(from._internal_host_arch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  return true;
}

void Resource::InternalSwap(Resource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_version_, lhs_arena,
      &other->_impl_.service_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_instance_id_, lhs_arena,
      &other->_impl_.service_instance_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deployment_environment_, lhs_arena,
      &other->_impl_.deployment_environment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.k8s_cluster_name_, lhs_arena,
      &other->_impl_.k8s_cluster_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.k8s_namespace_, lhs_arena,
      &other->_impl_.k8s_namespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.k8s_pod_name_, lhs_arena,
      &other->_impl_.k8s_pod_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_name_, lhs_arena,
      &other->_impl_.host_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_arch_, lhs_arena,
      &other->_impl_.host_arch_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Resource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[3]);
}

// ===================================================================

class LogEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const LogEvent* msg);
  static const ::unhinged::observability::v1::TraceContext& trace_context(const LogEvent* msg);
  static const ::unhinged::observability::v1::Resource& resource(const LogEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const LogEvent* msg);
  static const ::unhinged::observability::v1::ErrorInfo& error(const LogEvent* msg);
  static const ::unhinged::observability::v1::DestinationFlags& destinations(const LogEvent* msg);
  static const ::unhinged::observability::v1::PartitionInfo& partition_info(const LogEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LogEvent::_Internal::timestamp(const LogEvent* msg) {
  return *msg->_impl_.timestamp_;
}
const ::unhinged::observability::v1::TraceContext&
LogEvent::_Internal::trace_context(const LogEvent* msg) {
  return *msg->_impl_.trace_context_;
}
const ::unhinged::observability::v1::Resource&
LogEvent::_Internal::resource(const LogEvent* msg) {
  return *msg->_impl_.resource_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
LogEvent::_Internal::metadata(const LogEvent* msg) {
  return *msg->_impl_.metadata_;
}
const ::unhinged::observability::v1::ErrorInfo&
LogEvent::_Internal::error(const LogEvent* msg) {
  return *msg->_impl_.error_;
}
const ::unhinged::observability::v1::DestinationFlags&
LogEvent::_Internal::destinations(const LogEvent* msg) {
  return *msg->_impl_.destinations_;
}
const ::unhinged::observability::v1::PartitionInfo&
LogEvent::_Internal::partition_info(const LogEvent* msg) {
  return *msg->_impl_.partition_info_;
}
void LogEvent::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void LogEvent::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
LogEvent::LogEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.LogEvent)
}
LogEvent::LogEvent(const LogEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.trace_context_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.destinations_){nullptr}
    , decltype(_impl_.partition_info_){nullptr}
    , decltype(_impl_.sequence_number_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_type().empty()) {
    _this->_impl_.event_type_.Set(from._internal_event_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_trace_context()) {
    _this->_impl_.trace_context_ = new ::unhinged::observability::v1::TraceContext(*from._impl_.trace_context_);
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::unhinged::observability::v1::Resource(*from._impl_.resource_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::unhinged::observability::v1::ErrorInfo(*from._impl_.error_);
  }
  if (from._internal_has_destinations()) {
    _this->_impl_.destinations_ = new ::unhinged::observability::v1::DestinationFlags(*from._impl_.destinations_);
  }
  if (from._internal_has_partition_info()) {
    _this->_impl_.partition_info_ = new ::unhinged::observability::v1::PartitionInfo(*from._impl_.partition_info_);
  }
  ::memcpy(&_impl_.sequence_number_, &from._impl_.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.LogEvent)
}

inline void LogEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.trace_context_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.destinations_){nullptr}
    , decltype(_impl_.partition_info_){nullptr}
    , decltype(_impl_.sequence_number_){int64_t{0}}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogEvent::~LogEvent() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.LogEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_id_.Destroy();
  _impl_.event_type_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.trace_context_;
  if (this != internal_default_instance()) delete _impl_.resource_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.error_;
  if (this != internal_default_instance()) delete _impl_.destinations_;
  if (this != internal_default_instance()) delete _impl_.partition_info_;
}

void LogEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.LogEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_id_.ClearToEmpty();
  _impl_.event_type_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trace_context_ != nullptr) {
    delete _impl_.trace_context_;
  }
  _impl_.trace_context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.destinations_ != nullptr) {
    delete _impl_.destinations_;
  }
  _impl_.destinations_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.partition_info_ != nullptr) {
    delete _impl_.partition_info_;
  }
  _impl_.partition_info_ = nullptr;
  ::memset(&_impl_.sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.LogEvent.event_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string event_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_event_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.LogEvent.event_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.TraceContext trace_context = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.Resource resource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.LogLevel level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::unhinged::observability::v1::LogLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.LogEvent.message"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.ErrorInfo error = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.DestinationFlags destinations = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_destinations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.PartitionInfo partition_info = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_partition_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.LogEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.LogEvent.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string event_type = 3;
  if (!this->_internal_event_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_type().data(), static_cast<int>(this->_internal_event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.LogEvent.event_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_event_type(), target);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sequence_number(), target);
  }

  // .unhinged.observability.v1.TraceContext trace_context = 5;
  if (this->_internal_has_trace_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::trace_context(this),
        _Internal::trace_context(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.Resource resource = 6;
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.LogLevel level = 10;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_level(), target);
  }

  // string message = 11;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.LogEvent.message");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_message(), target);
  }

  // .google.protobuf.Struct metadata = 12;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.ErrorInfo error = 15;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.DestinationFlags destinations = 20;
  if (this->_internal_has_destinations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::destinations(this),
        _Internal::destinations(this).GetCachedSize(), target, stream);
  }

  // .unhinged.observability.v1.PartitionInfo partition_info = 25;
  if (this->_internal_has_partition_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::partition_info(this),
        _Internal::partition_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.LogEvent)
  return target;
}

size_t LogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.LogEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // string event_type = 3;
  if (!this->_internal_event_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_type());
  }

  // string message = 11;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .unhinged.observability.v1.TraceContext trace_context = 5;
  if (this->_internal_has_trace_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trace_context_);
  }

  // .unhinged.observability.v1.Resource resource = 6;
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  // .google.protobuf.Struct metadata = 12;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .unhinged.observability.v1.ErrorInfo error = 15;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // .unhinged.observability.v1.DestinationFlags destinations = 20;
  if (this->_internal_has_destinations()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destinations_);
  }

  // .unhinged.observability.v1.PartitionInfo partition_info = 25;
  if (this->_internal_has_partition_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.partition_info_);
  }

  // int64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequence_number());
  }

  // .unhinged.observability.v1.LogLevel level = 10;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogEvent::GetClassData() const { return &_class_data_; }


void LogEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogEvent*>(&to_msg);
  auto& from = static_cast<const LogEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.LogEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (!from._internal_event_type().empty()) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_trace_context()) {
    _this->_internal_mutable_trace_context()->::unhinged::observability::v1::TraceContext::MergeFrom(
        from._internal_trace_context());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::unhinged::observability::v1::Resource::MergeFrom(
        from._internal_resource());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::unhinged::observability::v1::ErrorInfo::MergeFrom(
        from._internal_error());
  }
  if (from._internal_has_destinations()) {
    _this->_internal_mutable_destinations()->::unhinged::observability::v1::DestinationFlags::MergeFrom(
        from._internal_destinations());
  }
  if (from._internal_has_partition_info()) {
    _this->_internal_mutable_partition_info()->::unhinged::observability::v1::PartitionInfo::MergeFrom(
        from._internal_partition_info());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogEvent::CopyFrom(const LogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.LogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEvent::IsInitialized() const {
  return true;
}

void LogEvent::InternalSwap(LogEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_type_, lhs_arena,
      &other->_impl_.event_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogEvent, _impl_.level_)
      + sizeof(LogEvent::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(LogEvent, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[4]);
}

// ===================================================================

ErrorInfo_ErrorAttributesEntry_DoNotUse::ErrorInfo_ErrorAttributesEntry_DoNotUse() {}
ErrorInfo_ErrorAttributesEntry_DoNotUse::ErrorInfo_ErrorAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ErrorInfo_ErrorAttributesEntry_DoNotUse::MergeFrom(const ErrorInfo_ErrorAttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ErrorInfo_ErrorAttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[5]);
}

// ===================================================================

class ErrorInfo::_Internal {
 public:
};

ErrorInfo::ErrorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ErrorInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.ErrorInfo)
}
ErrorInfo::ErrorInfo(const ErrorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ErrorInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.error_attributes_)*/{}
    , decltype(_impl_.error_type_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.stack_trace_){}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.error_attributes_.MergeFrom(from._impl_.error_attributes_);
  _impl_.error_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_type().empty()) {
    _this->_impl_.error_type_.Set(from._internal_error_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stack_trace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stack_trace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stack_trace().empty()) {
    _this->_impl_.stack_trace_.Set(from._internal_stack_trace(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_code().empty()) {
    _this->_impl_.error_code_.Set(from._internal_error_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.ErrorInfo)
}

inline void ErrorInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.error_attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.error_type_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.stack_trace_){}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stack_trace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stack_trace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ErrorInfo::~ErrorInfo() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.ErrorInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ErrorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_attributes_.Destruct();
  _impl_.error_attributes_.~MapField();
  _impl_.error_type_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.stack_trace_.Destroy();
  _impl_.error_code_.Destroy();
}

void ErrorInfo::ArenaDtor(void* object) {
  ErrorInfo* _this = reinterpret_cast< ErrorInfo* >(object);
  _this->_impl_.error_attributes_.Destruct();
}
void ErrorInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ErrorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.ErrorInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_attributes_.Clear();
  _impl_.error_type_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  _impl_.stack_trace_.ClearToEmpty();
  _impl_.error_code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string error_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.ErrorInfo.error_type"));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.ErrorInfo.error_message"));
        } else
          goto handle_unusual;
        continue;
      // string stack_trace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_stack_trace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.ErrorInfo.stack_trace"));
        } else
          goto handle_unusual;
        continue;
      // string error_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.ErrorInfo.error_code"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> error_attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.error_attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrorInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.ErrorInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_type = 1;
  if (!this->_internal_error_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_type().data(), static_cast<int>(this->_internal_error_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.ErrorInfo.error_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_type(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.ErrorInfo.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  // string stack_trace = 3;
  if (!this->_internal_stack_trace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stack_trace().data(), static_cast<int>(this->_internal_stack_trace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.ErrorInfo.stack_trace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stack_trace(), target);
  }

  // string error_code = 4;
  if (!this->_internal_error_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_code().data(), static_cast<int>(this->_internal_error_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.ErrorInfo.error_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_code(), target);
  }

  // map<string, string> error_attributes = 5;
  if (!this->_internal_error_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ErrorInfo_ErrorAttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_error_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.ErrorInfo.ErrorAttributesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.ErrorInfo.ErrorAttributesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.ErrorInfo)
  return target;
}

size_t ErrorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.ErrorInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> error_attributes = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_error_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_error_attributes().begin();
      it != this->_internal_error_attributes().end(); ++it) {
    total_size += ErrorInfo_ErrorAttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string error_type = 1;
  if (!this->_internal_error_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_type());
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // string stack_trace = 3;
  if (!this->_internal_stack_trace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stack_trace());
  }

  // string error_code = 4;
  if (!this->_internal_error_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ErrorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorInfo::GetClassData() const { return &_class_data_; }


void ErrorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ErrorInfo*>(&to_msg);
  auto& from = static_cast<const ErrorInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.ErrorInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.error_attributes_.MergeFrom(from._impl_.error_attributes_);
  if (!from._internal_error_type().empty()) {
    _this->_internal_set_error_type(from._internal_error_type());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_stack_trace().empty()) {
    _this->_internal_set_stack_trace(from._internal_stack_trace());
  }
  if (!from._internal_error_code().empty()) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorInfo::CopyFrom(const ErrorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.ErrorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorInfo::IsInitialized() const {
  return true;
}

void ErrorInfo::InternalSwap(ErrorInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.error_attributes_.InternalSwap(&other->_impl_.error_attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_type_, lhs_arena,
      &other->_impl_.error_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stack_trace_, lhs_arena,
      &other->_impl_.stack_trace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_code_, lhs_arena,
      &other->_impl_.error_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[6]);
}

// ===================================================================

class DestinationFlags::_Internal {
 public:
  static const ::unhinged::observability::v1::DataLakeOptions& data_lake_options(const DestinationFlags* msg);
};

const ::unhinged::observability::v1::DataLakeOptions&
DestinationFlags::_Internal::data_lake_options(const DestinationFlags* msg) {
  return *msg->_impl_.data_lake_options_;
}
DestinationFlags::DestinationFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.DestinationFlags)
}
DestinationFlags::DestinationFlags(const DestinationFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DestinationFlags* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_lake_options_){nullptr}
    , decltype(_impl_.console_){}
    , decltype(_impl_.cdc_stream_){}
    , decltype(_impl_.data_lake_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_lake_options()) {
    _this->_impl_.data_lake_options_ = new ::unhinged::observability::v1::DataLakeOptions(*from._impl_.data_lake_options_);
  }
  ::memcpy(&_impl_.console_, &from._impl_.console_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_lake_) -
    reinterpret_cast<char*>(&_impl_.console_)) + sizeof(_impl_.data_lake_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.DestinationFlags)
}

inline void DestinationFlags::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_lake_options_){nullptr}
    , decltype(_impl_.console_){false}
    , decltype(_impl_.cdc_stream_){false}
    , decltype(_impl_.data_lake_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DestinationFlags::~DestinationFlags() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.DestinationFlags)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DestinationFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_lake_options_;
}

void DestinationFlags::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DestinationFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.DestinationFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_lake_options_ != nullptr) {
    delete _impl_.data_lake_options_;
  }
  _impl_.data_lake_options_ = nullptr;
  ::memset(&_impl_.console_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.data_lake_) -
      reinterpret_cast<char*>(&_impl_.console_)) + sizeof(_impl_.data_lake_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestinationFlags::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool console = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.console_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cdc_stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cdc_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool data_lake = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.data_lake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.DataLakeOptions data_lake_options = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_lake_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DestinationFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.DestinationFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool console = 1;
  if (this->_internal_console() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_console(), target);
  }

  // bool cdc_stream = 2;
  if (this->_internal_cdc_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_cdc_stream(), target);
  }

  // bool data_lake = 3;
  if (this->_internal_data_lake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_data_lake(), target);
  }

  // .unhinged.observability.v1.DataLakeOptions data_lake_options = 10;
  if (this->_internal_has_data_lake_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::data_lake_options(this),
        _Internal::data_lake_options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.DestinationFlags)
  return target;
}

size_t DestinationFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.DestinationFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unhinged.observability.v1.DataLakeOptions data_lake_options = 10;
  if (this->_internal_has_data_lake_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_lake_options_);
  }

  // bool console = 1;
  if (this->_internal_console() != 0) {
    total_size += 1 + 1;
  }

  // bool cdc_stream = 2;
  if (this->_internal_cdc_stream() != 0) {
    total_size += 1 + 1;
  }

  // bool data_lake = 3;
  if (this->_internal_data_lake() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DestinationFlags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DestinationFlags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DestinationFlags::GetClassData() const { return &_class_data_; }


void DestinationFlags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DestinationFlags*>(&to_msg);
  auto& from = static_cast<const DestinationFlags&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.DestinationFlags)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data_lake_options()) {
    _this->_internal_mutable_data_lake_options()->::unhinged::observability::v1::DataLakeOptions::MergeFrom(
        from._internal_data_lake_options());
  }
  if (from._internal_console() != 0) {
    _this->_internal_set_console(from._internal_console());
  }
  if (from._internal_cdc_stream() != 0) {
    _this->_internal_set_cdc_stream(from._internal_cdc_stream());
  }
  if (from._internal_data_lake() != 0) {
    _this->_internal_set_data_lake(from._internal_data_lake());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DestinationFlags::CopyFrom(const DestinationFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.DestinationFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationFlags::IsInitialized() const {
  return true;
}

void DestinationFlags::InternalSwap(DestinationFlags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DestinationFlags, _impl_.data_lake_)
      + sizeof(DestinationFlags::_impl_.data_lake_)
      - PROTOBUF_FIELD_OFFSET(DestinationFlags, _impl_.data_lake_options_)>(
          reinterpret_cast<char*>(&_impl_.data_lake_options_),
          reinterpret_cast<char*>(&other->_impl_.data_lake_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DestinationFlags::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[7]);
}

// ===================================================================

class DataLakeOptions::_Internal {
 public:
};

DataLakeOptions::DataLakeOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.DataLakeOptions)
}
DataLakeOptions::DataLakeOptions(const DataLakeOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataLakeOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){}
    , decltype(_impl_.partition_strategy_){}
    , decltype(_impl_.batch_size_){}
    , decltype(_impl_.flush_interval_seconds_){}
    , decltype(_impl_.compression_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_strategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_strategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_strategy().empty()) {
    _this->_impl_.partition_strategy_.Set(from._internal_partition_strategy(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.batch_size_, &from._impl_.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compression_) -
    reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.compression_));
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.DataLakeOptions)
}

inline void DataLakeOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){}
    , decltype(_impl_.partition_strategy_){}
    , decltype(_impl_.batch_size_){0}
    , decltype(_impl_.flush_interval_seconds_){0}
    , decltype(_impl_.compression_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_strategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_strategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataLakeOptions::~DataLakeOptions() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.DataLakeOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataLakeOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_name_.Destroy();
  _impl_.partition_strategy_.Destroy();
}

void DataLakeOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataLakeOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.DataLakeOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_name_.ClearToEmpty();
  _impl_.partition_strategy_.ClearToEmpty();
  ::memset(&_impl_.batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.compression_) -
      reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.compression_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataLakeOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.DataLakeOptions.table_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_strategy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partition_strategy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.DataLakeOptions.partition_strategy"));
        } else
          goto handle_unusual;
        continue;
      // int32 batch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flush_interval_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.flush_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .unhinged.observability.v1.CompressionType compression = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compression(static_cast<::unhinged::observability::v1::CompressionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataLakeOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.DataLakeOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.DataLakeOptions.table_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // string partition_strategy = 2;
  if (!this->_internal_partition_strategy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_strategy().data(), static_cast<int>(this->_internal_partition_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.DataLakeOptions.partition_strategy");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partition_strategy(), target);
  }

  // int32 batch_size = 3;
  if (this->_internal_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_batch_size(), target);
  }

  // int32 flush_interval_seconds = 4;
  if (this->_internal_flush_interval_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_flush_interval_seconds(), target);
  }

  // .unhinged.observability.v1.CompressionType compression = 5;
  if (this->_internal_compression() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_compression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.DataLakeOptions)
  return target;
}

size_t DataLakeOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.DataLakeOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // string partition_strategy = 2;
  if (!this->_internal_partition_strategy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_strategy());
  }

  // int32 batch_size = 3;
  if (this->_internal_batch_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batch_size());
  }

  // int32 flush_interval_seconds = 4;
  if (this->_internal_flush_interval_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flush_interval_seconds());
  }

  // .unhinged.observability.v1.CompressionType compression = 5;
  if (this->_internal_compression() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_compression());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataLakeOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataLakeOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataLakeOptions::GetClassData() const { return &_class_data_; }


void DataLakeOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataLakeOptions*>(&to_msg);
  auto& from = static_cast<const DataLakeOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.DataLakeOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  if (!from._internal_partition_strategy().empty()) {
    _this->_internal_set_partition_strategy(from._internal_partition_strategy());
  }
  if (from._internal_batch_size() != 0) {
    _this->_internal_set_batch_size(from._internal_batch_size());
  }
  if (from._internal_flush_interval_seconds() != 0) {
    _this->_internal_set_flush_interval_seconds(from._internal_flush_interval_seconds());
  }
  if (from._internal_compression() != 0) {
    _this->_internal_set_compression(from._internal_compression());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataLakeOptions::CopyFrom(const DataLakeOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.DataLakeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataLakeOptions::IsInitialized() const {
  return true;
}

void DataLakeOptions::InternalSwap(DataLakeOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_strategy_, lhs_arena,
      &other->_impl_.partition_strategy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataLakeOptions, _impl_.compression_)
      + sizeof(DataLakeOptions::_impl_.compression_)
      - PROTOBUF_FIELD_OFFSET(DataLakeOptions, _impl_.batch_size_)>(
          reinterpret_cast<char*>(&_impl_.batch_size_),
          reinterpret_cast<char*>(&other->_impl_.batch_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataLakeOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[8]);
}

// ===================================================================

PartitionInfo_CustomPartitionsEntry_DoNotUse::PartitionInfo_CustomPartitionsEntry_DoNotUse() {}
PartitionInfo_CustomPartitionsEntry_DoNotUse::PartitionInfo_CustomPartitionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PartitionInfo_CustomPartitionsEntry_DoNotUse::MergeFrom(const PartitionInfo_CustomPartitionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PartitionInfo_CustomPartitionsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[9]);
}

// ===================================================================

class PartitionInfo::_Internal {
 public:
};

PartitionInfo::PartitionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PartitionInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:unhinged.observability.v1.PartitionInfo)
}
PartitionInfo::PartitionInfo(const PartitionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartitionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.custom_partitions_)*/{}
    , decltype(_impl_.date_partition_){}
    , decltype(_impl_.hour_partition_){}
    , decltype(_impl_.service_partition_){}
    , decltype(_impl_.level_partition_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.custom_partitions_.MergeFrom(from._impl_.custom_partitions_);
  _impl_.date_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_date_partition().empty()) {
    _this->_impl_.date_partition_.Set(from._internal_date_partition(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hour_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hour_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hour_partition().empty()) {
    _this->_impl_.hour_partition_.Set(from._internal_hour_partition(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_partition().empty()) {
    _this->_impl_.service_partition_.Set(from._internal_service_partition(), 
      _this->GetArenaForAllocation());
  }
  _impl_.level_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_level_partition().empty()) {
    _this->_impl_.level_partition_.Set(from._internal_level_partition(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unhinged.observability.v1.PartitionInfo)
}

inline void PartitionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.custom_partitions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.date_partition_){}
    , decltype(_impl_.hour_partition_){}
    , decltype(_impl_.service_partition_){}
    , decltype(_impl_.level_partition_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.date_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hour_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hour_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.level_partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PartitionInfo::~PartitionInfo() {
  // @@protoc_insertion_point(destructor:unhinged.observability.v1.PartitionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PartitionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_partitions_.Destruct();
  _impl_.custom_partitions_.~MapField();
  _impl_.date_partition_.Destroy();
  _impl_.hour_partition_.Destroy();
  _impl_.service_partition_.Destroy();
  _impl_.level_partition_.Destroy();
}

void PartitionInfo::ArenaDtor(void* object) {
  PartitionInfo* _this = reinterpret_cast< PartitionInfo* >(object);
  _this->_impl_.custom_partitions_.Destruct();
}
void PartitionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartitionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:unhinged.observability.v1.PartitionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custom_partitions_.Clear();
  _impl_.date_partition_.ClearToEmpty();
  _impl_.hour_partition_.ClearToEmpty();
  _impl_.service_partition_.ClearToEmpty();
  _impl_.level_partition_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartitionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string date_partition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_date_partition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.PartitionInfo.date_partition"));
        } else
          goto handle_unusual;
        continue;
      // string hour_partition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hour_partition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.PartitionInfo.hour_partition"));
        } else
          goto handle_unusual;
        continue;
      // string service_partition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_service_partition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.PartitionInfo.service_partition"));
        } else
          goto handle_unusual;
        continue;
      // string level_partition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_level_partition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unhinged.observability.v1.PartitionInfo.level_partition"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> custom_partitions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.custom_partitions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartitionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unhinged.observability.v1.PartitionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string date_partition = 1;
  if (!this->_internal_date_partition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_partition().data(), static_cast<int>(this->_internal_date_partition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.PartitionInfo.date_partition");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_date_partition(), target);
  }

  // string hour_partition = 2;
  if (!this->_internal_hour_partition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hour_partition().data(), static_cast<int>(this->_internal_hour_partition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.PartitionInfo.hour_partition");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hour_partition(), target);
  }

  // string service_partition = 3;
  if (!this->_internal_service_partition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_partition().data(), static_cast<int>(this->_internal_service_partition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.PartitionInfo.service_partition");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_partition(), target);
  }

  // string level_partition = 4;
  if (!this->_internal_level_partition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level_partition().data(), static_cast<int>(this->_internal_level_partition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unhinged.observability.v1.PartitionInfo.level_partition");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_level_partition(), target);
  }

  // map<string, string> custom_partitions = 10;
  if (!this->_internal_custom_partitions().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = PartitionInfo_CustomPartitionsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_custom_partitions();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.PartitionInfo.CustomPartitionsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "unhinged.observability.v1.PartitionInfo.CustomPartitionsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unhinged.observability.v1.PartitionInfo)
  return target;
}

size_t PartitionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unhinged.observability.v1.PartitionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> custom_partitions = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_custom_partitions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_custom_partitions().begin();
      it != this->_internal_custom_partitions().end(); ++it) {
    total_size += PartitionInfo_CustomPartitionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string date_partition = 1;
  if (!this->_internal_date_partition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_partition());
  }

  // string hour_partition = 2;
  if (!this->_internal_hour_partition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hour_partition());
  }

  // string service_partition = 3;
  if (!this->_internal_service_partition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_partition());
  }

  // string level_partition = 4;
  if (!this->_internal_level_partition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level_partition());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartitionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartitionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartitionInfo::GetClassData() const { return &_class_data_; }


void PartitionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartitionInfo*>(&to_msg);
  auto& from = static_cast<const PartitionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unhinged.observability.v1.PartitionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custom_partitions_.MergeFrom(from._impl_.custom_partitions_);
  if (!from._internal_date_partition().empty()) {
    _this->_internal_set_date_partition(from._internal_date_partition());
  }
  if (!from._internal_hour_partition().empty()) {
    _this->_internal_set_hour_partition(from._internal_hour_partition());
  }
  if (!from._internal_service_partition().empty()) {
    _this->_internal_set_service_partition(from._internal_service_partition());
  }
  if (!from._internal_level_partition().empty()) {
    _this->_internal_set_level_partition(from._internal_level_partition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartitionInfo::CopyFrom(const PartitionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unhinged.observability.v1.PartitionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionInfo::IsInitialized() const {
  return true;
}

void PartitionInfo::InternalSwap(PartitionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.custom_partitions_.InternalSwap(&other->_impl_.custom_partitions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.date_partition_, lhs_arena,
      &other->_impl_.date_partition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hour_partition_, lhs_arena,
      &other->_impl_.hour_partition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_partition_, lhs_arena,
      &other->_impl_.service_partition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.level_partition_, lhs_arena,
      &other->_impl_.level_partition_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PartitionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observability_2eproto_getter, &descriptor_table_observability_2eproto_once,
      file_level_metadata_observability_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace observability
}  // namespace unhinged
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::TraceContext*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::TraceContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::TraceContext >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::TraceFlags*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::TraceFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::TraceFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::Resource_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::Resource*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::Resource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::LogEvent*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::LogEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::LogEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::ErrorInfo_ErrorAttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::ErrorInfo*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::ErrorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::ErrorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::DestinationFlags*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::DestinationFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::DestinationFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::DataLakeOptions*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::DataLakeOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::DataLakeOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::PartitionInfo_CustomPartitionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::unhinged::observability::v1::PartitionInfo*
Arena::CreateMaybeMessage< ::unhinged::observability::v1::PartitionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unhinged::observability::v1::PartitionInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
