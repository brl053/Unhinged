// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.21.12
// source: minimal_event.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export interface UniversalEvent {
  /** UUID */
  eventId: string;
  /** "llm.inference.completed" */
  eventType: string;
  /** Unix epoch milliseconds */
  timestampMs: string;
  /** User identifier */
  userId: string;
  /** Session identifier */
  sessionId: string;
  /** Serialized domain event (parse later) */
  payload: Uint8Array;
}

export interface LLMInferenceEvent {
  /** User prompt */
  prompt: string;
  /** LLM response */
  response: string;
  /** Model name (e.g., "llama2") */
  model: string;
  /** Input token count */
  promptTokens: number;
  /** Output token count */
  responseTokens: number;
  /** Inference latency */
  latencyMs: string;
  /** Whether inference succeeded */
  success: boolean;
  /** Error message if failed */
  errorMessage: string;
  /** Minimal rationale for audit */
  intent: string;
  /** Model confidence (0.0-1.0) */
  confidence: number;
}

function createBaseUniversalEvent(): UniversalEvent {
  return { eventId: "", eventType: "", timestampMs: "0", userId: "", sessionId: "", payload: new Uint8Array(0) };
}

export const UniversalEvent = {
  encode(message: UniversalEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    if (message.eventType !== "") {
      writer.uint32(18).string(message.eventType);
    }
    if (message.timestampMs !== "0") {
      writer.uint32(24).int64(message.timestampMs);
    }
    if (message.userId !== "") {
      writer.uint32(34).string(message.userId);
    }
    if (message.sessionId !== "") {
      writer.uint32(42).string(message.sessionId);
    }
    if (message.payload.length !== 0) {
      writer.uint32(50).bytes(message.payload);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UniversalEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniversalEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventType = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.timestampMs = longToString(reader.int64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.payload = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniversalEvent {
    return {
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      timestampMs: isSet(object.timestampMs) ? globalThis.String(object.timestampMs) : "0",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
    };
  },

  toJSON(message: UniversalEvent): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.timestampMs !== "0") {
      obj.timestampMs = message.timestampMs;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniversalEvent>, I>>(base?: I): UniversalEvent {
    return UniversalEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniversalEvent>, I>>(object: I): UniversalEvent {
    const message = createBaseUniversalEvent();
    message.eventId = object.eventId ?? "";
    message.eventType = object.eventType ?? "";
    message.timestampMs = object.timestampMs ?? "0";
    message.userId = object.userId ?? "";
    message.sessionId = object.sessionId ?? "";
    message.payload = object.payload ?? new Uint8Array(0);
    return message;
  },
};

function createBaseLLMInferenceEvent(): LLMInferenceEvent {
  return {
    prompt: "",
    response: "",
    model: "",
    promptTokens: 0,
    responseTokens: 0,
    latencyMs: "0",
    success: false,
    errorMessage: "",
    intent: "",
    confidence: 0,
  };
}

export const LLMInferenceEvent = {
  encode(message: LLMInferenceEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.prompt !== "") {
      writer.uint32(10).string(message.prompt);
    }
    if (message.response !== "") {
      writer.uint32(18).string(message.response);
    }
    if (message.model !== "") {
      writer.uint32(26).string(message.model);
    }
    if (message.promptTokens !== 0) {
      writer.uint32(32).int32(message.promptTokens);
    }
    if (message.responseTokens !== 0) {
      writer.uint32(40).int32(message.responseTokens);
    }
    if (message.latencyMs !== "0") {
      writer.uint32(48).int64(message.latencyMs);
    }
    if (message.success !== false) {
      writer.uint32(56).bool(message.success);
    }
    if (message.errorMessage !== "") {
      writer.uint32(66).string(message.errorMessage);
    }
    if (message.intent !== "") {
      writer.uint32(74).string(message.intent);
    }
    if (message.confidence !== 0) {
      writer.uint32(85).float(message.confidence);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LLMInferenceEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLLMInferenceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.prompt = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.model = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.promptTokens = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.responseTokens = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.latencyMs = longToString(reader.int64() as Long);
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.intent = reader.string();
          continue;
        case 10:
          if (tag !== 85) {
            break;
          }

          message.confidence = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LLMInferenceEvent {
    return {
      prompt: isSet(object.prompt) ? globalThis.String(object.prompt) : "",
      response: isSet(object.response) ? globalThis.String(object.response) : "",
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      promptTokens: isSet(object.promptTokens) ? globalThis.Number(object.promptTokens) : 0,
      responseTokens: isSet(object.responseTokens) ? globalThis.Number(object.responseTokens) : 0,
      latencyMs: isSet(object.latencyMs) ? globalThis.String(object.latencyMs) : "0",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      intent: isSet(object.intent) ? globalThis.String(object.intent) : "",
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
    };
  },

  toJSON(message: LLMInferenceEvent): unknown {
    const obj: any = {};
    if (message.prompt !== "") {
      obj.prompt = message.prompt;
    }
    if (message.response !== "") {
      obj.response = message.response;
    }
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.promptTokens !== 0) {
      obj.promptTokens = Math.round(message.promptTokens);
    }
    if (message.responseTokens !== 0) {
      obj.responseTokens = Math.round(message.responseTokens);
    }
    if (message.latencyMs !== "0") {
      obj.latencyMs = message.latencyMs;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.intent !== "") {
      obj.intent = message.intent;
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LLMInferenceEvent>, I>>(base?: I): LLMInferenceEvent {
    return LLMInferenceEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LLMInferenceEvent>, I>>(object: I): LLMInferenceEvent {
    const message = createBaseLLMInferenceEvent();
    message.prompt = object.prompt ?? "";
    message.response = object.response ?? "";
    message.model = object.model ?? "";
    message.promptTokens = object.promptTokens ?? 0;
    message.responseTokens = object.responseTokens ?? 0;
    message.latencyMs = object.latencyMs ?? "0";
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? "";
    message.intent = object.intent ?? "";
    message.confidence = object.confidence ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
