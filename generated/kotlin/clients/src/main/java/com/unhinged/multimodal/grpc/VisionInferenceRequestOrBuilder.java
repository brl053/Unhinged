// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_service.proto

package com.unhinged.multimodal.grpc;

public interface VisionInferenceRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:multimodal.VisionInferenceRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Raw image data (JPEG, PNG, etc.)
   * </pre>
   *
   * <code>bytes image_data = 1;</code>
   * @return The imageData.
   */
  com.google.protobuf.ByteString getImageData();

  /**
   * <pre>
   * Model to use for inference (e.g., "qwen2-vl", "blip-base")
   * </pre>
   *
   * <code>string model = 2;</code>
   * @return The model.
   */
  java.lang.String getModel();
  /**
   * <pre>
   * Model to use for inference (e.g., "qwen2-vl", "blip-base")
   * </pre>
   *
   * <code>string model = 2;</code>
   * @return The bytes for model.
   */
  com.google.protobuf.ByteString
      getModelBytes();

  /**
   * <pre>
   * Analysis prompt for the model
   * </pre>
   *
   * <code>string prompt = 3;</code>
   * @return The prompt.
   */
  java.lang.String getPrompt();
  /**
   * <pre>
   * Analysis prompt for the model
   * </pre>
   *
   * <code>string prompt = 3;</code>
   * @return The bytes for prompt.
   */
  com.google.protobuf.ByteString
      getPromptBytes();

  /**
   * <pre>
   * Type of analysis (screenshot, natural_image, document, ui_component)
   * </pre>
   *
   * <code>string analysis_type = 4;</code>
   * @return The analysisType.
   */
  java.lang.String getAnalysisType();
  /**
   * <pre>
   * Type of analysis (screenshot, natural_image, document, ui_component)
   * </pre>
   *
   * <code>string analysis_type = 4;</code>
   * @return The bytes for analysisType.
   */
  com.google.protobuf.ByteString
      getAnalysisTypeBytes();

  /**
   * <pre>
   * Maximum tokens for response
   * </pre>
   *
   * <code>int32 max_tokens = 5;</code>
   * @return The maxTokens.
   */
  int getMaxTokens();

  /**
   * <pre>
   * Temperature for generation (0.0 to 1.0)
   * </pre>
   *
   * <code>float temperature = 6;</code>
   * @return The temperature.
   */
  float getTemperature();

  /**
   * <pre>
   * Additional inference parameters
   * </pre>
   *
   * <code>map&lt;string, string&gt; parameters = 7;</code>
   */
  int getParametersCount();
  /**
   * <pre>
   * Additional inference parameters
   * </pre>
   *
   * <code>map&lt;string, string&gt; parameters = 7;</code>
   */
  boolean containsParameters(
      java.lang.String key);
  /**
   * Use {@link #getParametersMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getParameters();
  /**
   * <pre>
   * Additional inference parameters
   * </pre>
   *
   * <code>map&lt;string, string&gt; parameters = 7;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getParametersMap();
  /**
   * <pre>
   * Additional inference parameters
   * </pre>
   *
   * <code>map&lt;string, string&gt; parameters = 7;</code>
   */
  /* nullable */
java.lang.String getParametersOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Additional inference parameters
   * </pre>
   *
   * <code>map&lt;string, string&gt; parameters = 7;</code>
   */
  java.lang.String getParametersOrThrow(
      java.lang.String key);
}
