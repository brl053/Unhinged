// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

package unhinged.common;

/**
 * <pre>
 **
 * Chunk processing status
 * </pre>
 *
 * Protobuf enum {@code unhinged.common.v1.ChunkStatus}
 */
public enum ChunkStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>CHUNK_STATUS_UNSPECIFIED = 0;</code>
   */
  CHUNK_STATUS_UNSPECIFIED(0),
  /**
   * <pre>
   * Still being processed
   * </pre>
   *
   * <code>CHUNK_STATUS_PROCESSING = 1;</code>
   */
  CHUNK_STATUS_PROCESSING(1),
  /**
   * <pre>
   * Successfully processed
   * </pre>
   *
   * <code>CHUNK_STATUS_COMPLETE = 2;</code>
   */
  CHUNK_STATUS_COMPLETE(2),
  /**
   * <pre>
   * Processing failed
   * </pre>
   *
   * <code>CHUNK_STATUS_ERROR = 3;</code>
   */
  CHUNK_STATUS_ERROR(3),
  /**
   * <pre>
   * Processing cancelled
   * </pre>
   *
   * <code>CHUNK_STATUS_CANCELLED = 4;</code>
   */
  CHUNK_STATUS_CANCELLED(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>CHUNK_STATUS_UNSPECIFIED = 0;</code>
   */
  public static final int CHUNK_STATUS_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Still being processed
   * </pre>
   *
   * <code>CHUNK_STATUS_PROCESSING = 1;</code>
   */
  public static final int CHUNK_STATUS_PROCESSING_VALUE = 1;
  /**
   * <pre>
   * Successfully processed
   * </pre>
   *
   * <code>CHUNK_STATUS_COMPLETE = 2;</code>
   */
  public static final int CHUNK_STATUS_COMPLETE_VALUE = 2;
  /**
   * <pre>
   * Processing failed
   * </pre>
   *
   * <code>CHUNK_STATUS_ERROR = 3;</code>
   */
  public static final int CHUNK_STATUS_ERROR_VALUE = 3;
  /**
   * <pre>
   * Processing cancelled
   * </pre>
   *
   * <code>CHUNK_STATUS_CANCELLED = 4;</code>
   */
  public static final int CHUNK_STATUS_CANCELLED_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ChunkStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ChunkStatus forNumber(int value) {
    switch (value) {
      case 0: return CHUNK_STATUS_UNSPECIFIED;
      case 1: return CHUNK_STATUS_PROCESSING;
      case 2: return CHUNK_STATUS_COMPLETE;
      case 3: return CHUNK_STATUS_ERROR;
      case 4: return CHUNK_STATUS_CANCELLED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ChunkStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ChunkStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ChunkStatus>() {
          public ChunkStatus findValueByNumber(int number) {
            return ChunkStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return unhinged.common.CommonProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final ChunkStatus[] VALUES = values();

  public static ChunkStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ChunkStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:unhinged.common.v1.ChunkStatus)
}

