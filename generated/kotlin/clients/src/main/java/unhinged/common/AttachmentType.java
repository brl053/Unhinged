// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

package unhinged.common;

/**
 * <pre>
 **
 * Attachment type classification
 * </pre>
 *
 * Protobuf enum {@code unhinged.common.v1.AttachmentType}
 */
public enum AttachmentType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>ATTACHMENT_TYPE_UNSPECIFIED = 0;</code>
   */
  ATTACHMENT_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * Images (jpg, png, gif, etc.)
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_IMAGE = 1;</code>
   */
  ATTACHMENT_TYPE_IMAGE(1),
  /**
   * <pre>
   * Documents (pdf, docx, txt, etc.)
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_DOCUMENT = 2;</code>
   */
  ATTACHMENT_TYPE_DOCUMENT(2),
  /**
   * <pre>
   * Audio files (mp3, wav, etc.)
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_AUDIO = 3;</code>
   */
  ATTACHMENT_TYPE_AUDIO(3),
  /**
   * <pre>
   * Video files (mp4, avi, etc.)
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_VIDEO = 4;</code>
   */
  ATTACHMENT_TYPE_VIDEO(4),
  /**
   * <pre>
   * Archives (zip, tar, etc.)
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_ARCHIVE = 5;</code>
   */
  ATTACHMENT_TYPE_ARCHIVE(5),
  /**
   * <pre>
   * Source code files
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_CODE = 6;</code>
   */
  ATTACHMENT_TYPE_CODE(6),
  /**
   * <pre>
   * Excel, CSV, etc.
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_SPREADSHEET = 7;</code>
   */
  ATTACHMENT_TYPE_SPREADSHEET(7),
  /**
   * <pre>
   * PowerPoint, etc.
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_PRESENTATION = 8;</code>
   */
  ATTACHMENT_TYPE_PRESENTATION(8),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>ATTACHMENT_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int ATTACHMENT_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Images (jpg, png, gif, etc.)
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_IMAGE = 1;</code>
   */
  public static final int ATTACHMENT_TYPE_IMAGE_VALUE = 1;
  /**
   * <pre>
   * Documents (pdf, docx, txt, etc.)
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_DOCUMENT = 2;</code>
   */
  public static final int ATTACHMENT_TYPE_DOCUMENT_VALUE = 2;
  /**
   * <pre>
   * Audio files (mp3, wav, etc.)
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_AUDIO = 3;</code>
   */
  public static final int ATTACHMENT_TYPE_AUDIO_VALUE = 3;
  /**
   * <pre>
   * Video files (mp4, avi, etc.)
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_VIDEO = 4;</code>
   */
  public static final int ATTACHMENT_TYPE_VIDEO_VALUE = 4;
  /**
   * <pre>
   * Archives (zip, tar, etc.)
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_ARCHIVE = 5;</code>
   */
  public static final int ATTACHMENT_TYPE_ARCHIVE_VALUE = 5;
  /**
   * <pre>
   * Source code files
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_CODE = 6;</code>
   */
  public static final int ATTACHMENT_TYPE_CODE_VALUE = 6;
  /**
   * <pre>
   * Excel, CSV, etc.
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_SPREADSHEET = 7;</code>
   */
  public static final int ATTACHMENT_TYPE_SPREADSHEET_VALUE = 7;
  /**
   * <pre>
   * PowerPoint, etc.
   * </pre>
   *
   * <code>ATTACHMENT_TYPE_PRESENTATION = 8;</code>
   */
  public static final int ATTACHMENT_TYPE_PRESENTATION_VALUE = 8;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static AttachmentType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static AttachmentType forNumber(int value) {
    switch (value) {
      case 0: return ATTACHMENT_TYPE_UNSPECIFIED;
      case 1: return ATTACHMENT_TYPE_IMAGE;
      case 2: return ATTACHMENT_TYPE_DOCUMENT;
      case 3: return ATTACHMENT_TYPE_AUDIO;
      case 4: return ATTACHMENT_TYPE_VIDEO;
      case 5: return ATTACHMENT_TYPE_ARCHIVE;
      case 6: return ATTACHMENT_TYPE_CODE;
      case 7: return ATTACHMENT_TYPE_SPREADSHEET;
      case 8: return ATTACHMENT_TYPE_PRESENTATION;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<AttachmentType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      AttachmentType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<AttachmentType>() {
          public AttachmentType findValueByNumber(int number) {
            return AttachmentType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return unhinged.common.CommonProto.getDescriptor().getEnumTypes().get(2);
  }

  private static final AttachmentType[] VALUES = values();

  public static AttachmentType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private AttachmentType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:unhinged.common.v1.AttachmentType)
}

