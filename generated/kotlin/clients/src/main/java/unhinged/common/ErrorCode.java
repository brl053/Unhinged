// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

package unhinged.common;

/**
 * <pre>
 **
 * Standard error codes aligned with gRPC status codes
 * </pre>
 *
 * Protobuf enum {@code unhinged.common.v1.ErrorCode}
 */
public enum ErrorCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>ERROR_CODE_UNSPECIFIED = 0;</code>
   */
  ERROR_CODE_UNSPECIFIED(0),
  /**
   * <pre>
   * Invalid request parameters
   * </pre>
   *
   * <code>ERROR_CODE_INVALID_ARGUMENT = 1;</code>
   */
  ERROR_CODE_INVALID_ARGUMENT(1),
  /**
   * <pre>
   * Resource not found
   * </pre>
   *
   * <code>ERROR_CODE_NOT_FOUND = 2;</code>
   */
  ERROR_CODE_NOT_FOUND(2),
  /**
   * <pre>
   * Access denied
   * </pre>
   *
   * <code>ERROR_CODE_PERMISSION_DENIED = 3;</code>
   */
  ERROR_CODE_PERMISSION_DENIED(3),
  /**
   * <pre>
   * Authentication required
   * </pre>
   *
   * <code>ERROR_CODE_UNAUTHENTICATED = 4;</code>
   */
  ERROR_CODE_UNAUTHENTICATED(4),
  /**
   * <pre>
   * Rate limit or quota exceeded
   * </pre>
   *
   * <code>ERROR_CODE_RESOURCE_EXHAUSTED = 5;</code>
   */
  ERROR_CODE_RESOURCE_EXHAUSTED(5),
  /**
   * <pre>
   * Internal server error
   * </pre>
   *
   * <code>ERROR_CODE_INTERNAL = 6;</code>
   */
  ERROR_CODE_INTERNAL(6),
  /**
   * <pre>
   * Service temporarily unavailable
   * </pre>
   *
   * <code>ERROR_CODE_UNAVAILABLE = 7;</code>
   */
  ERROR_CODE_UNAVAILABLE(7),
  /**
   * <pre>
   * Request timeout
   * </pre>
   *
   * <code>ERROR_CODE_DEADLINE_EXCEEDED = 8;</code>
   */
  ERROR_CODE_DEADLINE_EXCEEDED(8),
  /**
   * <pre>
   * Resource already exists
   * </pre>
   *
   * <code>ERROR_CODE_ALREADY_EXISTS = 9;</code>
   */
  ERROR_CODE_ALREADY_EXISTS(9),
  /**
   * <pre>
   * Request cancelled
   * </pre>
   *
   * <code>ERROR_CODE_CANCELLED = 10;</code>
   */
  ERROR_CODE_CANCELLED(10),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>ERROR_CODE_UNSPECIFIED = 0;</code>
   */
  public static final int ERROR_CODE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Invalid request parameters
   * </pre>
   *
   * <code>ERROR_CODE_INVALID_ARGUMENT = 1;</code>
   */
  public static final int ERROR_CODE_INVALID_ARGUMENT_VALUE = 1;
  /**
   * <pre>
   * Resource not found
   * </pre>
   *
   * <code>ERROR_CODE_NOT_FOUND = 2;</code>
   */
  public static final int ERROR_CODE_NOT_FOUND_VALUE = 2;
  /**
   * <pre>
   * Access denied
   * </pre>
   *
   * <code>ERROR_CODE_PERMISSION_DENIED = 3;</code>
   */
  public static final int ERROR_CODE_PERMISSION_DENIED_VALUE = 3;
  /**
   * <pre>
   * Authentication required
   * </pre>
   *
   * <code>ERROR_CODE_UNAUTHENTICATED = 4;</code>
   */
  public static final int ERROR_CODE_UNAUTHENTICATED_VALUE = 4;
  /**
   * <pre>
   * Rate limit or quota exceeded
   * </pre>
   *
   * <code>ERROR_CODE_RESOURCE_EXHAUSTED = 5;</code>
   */
  public static final int ERROR_CODE_RESOURCE_EXHAUSTED_VALUE = 5;
  /**
   * <pre>
   * Internal server error
   * </pre>
   *
   * <code>ERROR_CODE_INTERNAL = 6;</code>
   */
  public static final int ERROR_CODE_INTERNAL_VALUE = 6;
  /**
   * <pre>
   * Service temporarily unavailable
   * </pre>
   *
   * <code>ERROR_CODE_UNAVAILABLE = 7;</code>
   */
  public static final int ERROR_CODE_UNAVAILABLE_VALUE = 7;
  /**
   * <pre>
   * Request timeout
   * </pre>
   *
   * <code>ERROR_CODE_DEADLINE_EXCEEDED = 8;</code>
   */
  public static final int ERROR_CODE_DEADLINE_EXCEEDED_VALUE = 8;
  /**
   * <pre>
   * Resource already exists
   * </pre>
   *
   * <code>ERROR_CODE_ALREADY_EXISTS = 9;</code>
   */
  public static final int ERROR_CODE_ALREADY_EXISTS_VALUE = 9;
  /**
   * <pre>
   * Request cancelled
   * </pre>
   *
   * <code>ERROR_CODE_CANCELLED = 10;</code>
   */
  public static final int ERROR_CODE_CANCELLED_VALUE = 10;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ErrorCode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ErrorCode forNumber(int value) {
    switch (value) {
      case 0: return ERROR_CODE_UNSPECIFIED;
      case 1: return ERROR_CODE_INVALID_ARGUMENT;
      case 2: return ERROR_CODE_NOT_FOUND;
      case 3: return ERROR_CODE_PERMISSION_DENIED;
      case 4: return ERROR_CODE_UNAUTHENTICATED;
      case 5: return ERROR_CODE_RESOURCE_EXHAUSTED;
      case 6: return ERROR_CODE_INTERNAL;
      case 7: return ERROR_CODE_UNAVAILABLE;
      case 8: return ERROR_CODE_DEADLINE_EXCEEDED;
      case 9: return ERROR_CODE_ALREADY_EXISTS;
      case 10: return ERROR_CODE_CANCELLED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ErrorCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ErrorCode>() {
          public ErrorCode findValueByNumber(int number) {
            return ErrorCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return unhinged.common.CommonProto.getDescriptor().getEnumTypes().get(3);
  }

  private static final ErrorCode[] VALUES = values();

  public static ErrorCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ErrorCode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:unhinged.common.v1.ErrorCode)
}

