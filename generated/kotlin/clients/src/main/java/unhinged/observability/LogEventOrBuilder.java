// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: observability.proto

package unhinged.observability;

public interface LogEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:unhinged.observability.v1.LogEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Standard CDC event fields
   * </pre>
   *
   * <code>string event_id = 1;</code>
   * @return The eventId.
   */
  java.lang.String getEventId();
  /**
   * <pre>
   * Standard CDC event fields
   * </pre>
   *
   * <code>string event_id = 1;</code>
   * @return The bytes for eventId.
   */
  com.google.protobuf.ByteString
      getEventIdBytes();

  /**
   * <pre>
   * Event timestamp
   * </pre>
   *
   * <code>.google.protobuf.Timestamp timestamp = 2;</code>
   * @return Whether the timestamp field is set.
   */
  boolean hasTimestamp();
  /**
   * <pre>
   * Event timestamp
   * </pre>
   *
   * <code>.google.protobuf.Timestamp timestamp = 2;</code>
   * @return The timestamp.
   */
  com.google.protobuf.Timestamp getTimestamp();
  /**
   * <pre>
   * Event timestamp
   * </pre>
   *
   * <code>.google.protobuf.Timestamp timestamp = 2;</code>
   */
  com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder();

  /**
   * <pre>
   * Always "log_entry"
   * </pre>
   *
   * <code>string event_type = 3;</code>
   * @return The eventType.
   */
  java.lang.String getEventType();
  /**
   * <pre>
   * Always "log_entry"
   * </pre>
   *
   * <code>string event_type = 3;</code>
   * @return The bytes for eventType.
   */
  com.google.protobuf.ByteString
      getEventTypeBytes();

  /**
   * <pre>
   * CDC sequence for ordering
   * </pre>
   *
   * <code>int64 sequence_number = 4;</code>
   * @return The sequenceNumber.
   */
  long getSequenceNumber();

  /**
   * <pre>
   * OpenTelemetry context
   * </pre>
   *
   * <code>.unhinged.observability.v1.TraceContext trace_context = 5;</code>
   * @return Whether the traceContext field is set.
   */
  boolean hasTraceContext();
  /**
   * <pre>
   * OpenTelemetry context
   * </pre>
   *
   * <code>.unhinged.observability.v1.TraceContext trace_context = 5;</code>
   * @return The traceContext.
   */
  unhinged.observability.TraceContext getTraceContext();
  /**
   * <pre>
   * OpenTelemetry context
   * </pre>
   *
   * <code>.unhinged.observability.v1.TraceContext trace_context = 5;</code>
   */
  unhinged.observability.TraceContextOrBuilder getTraceContextOrBuilder();

  /**
   * <code>.unhinged.observability.v1.Resource resource = 6;</code>
   * @return Whether the resource field is set.
   */
  boolean hasResource();
  /**
   * <code>.unhinged.observability.v1.Resource resource = 6;</code>
   * @return The resource.
   */
  unhinged.observability.Resource getResource();
  /**
   * <code>.unhinged.observability.v1.Resource resource = 6;</code>
   */
  unhinged.observability.ResourceOrBuilder getResourceOrBuilder();

  /**
   * <pre>
   * Log entry data
   * </pre>
   *
   * <code>.unhinged.observability.v1.LogLevel level = 10;</code>
   * @return The enum numeric value on the wire for level.
   */
  int getLevelValue();
  /**
   * <pre>
   * Log entry data
   * </pre>
   *
   * <code>.unhinged.observability.v1.LogLevel level = 10;</code>
   * @return The level.
   */
  unhinged.observability.LogLevel getLevel();

  /**
   * <pre>
   * Log message
   * </pre>
   *
   * <code>string message = 11;</code>
   * @return The message.
   */
  java.lang.String getMessage();
  /**
   * <pre>
   * Log message
   * </pre>
   *
   * <code>string message = 11;</code>
   * @return The bytes for message.
   */
  com.google.protobuf.ByteString
      getMessageBytes();

  /**
   * <pre>
   * Structured metadata
   * </pre>
   *
   * <code>.google.protobuf.Struct metadata = 12;</code>
   * @return Whether the metadata field is set.
   */
  boolean hasMetadata();
  /**
   * <pre>
   * Structured metadata
   * </pre>
   *
   * <code>.google.protobuf.Struct metadata = 12;</code>
   * @return The metadata.
   */
  com.google.protobuf.Struct getMetadata();
  /**
   * <pre>
   * Structured metadata
   * </pre>
   *
   * <code>.google.protobuf.Struct metadata = 12;</code>
   */
  com.google.protobuf.StructOrBuilder getMetadataOrBuilder();

  /**
   * <pre>
   * Error information (if applicable)
   * </pre>
   *
   * <code>.unhinged.observability.v1.ErrorInfo error = 15;</code>
   * @return Whether the error field is set.
   */
  boolean hasError();
  /**
   * <pre>
   * Error information (if applicable)
   * </pre>
   *
   * <code>.unhinged.observability.v1.ErrorInfo error = 15;</code>
   * @return The error.
   */
  unhinged.observability.ErrorInfo getError();
  /**
   * <pre>
   * Error information (if applicable)
   * </pre>
   *
   * <code>.unhinged.observability.v1.ErrorInfo error = 15;</code>
   */
  unhinged.observability.ErrorInfoOrBuilder getErrorOrBuilder();

  /**
   * <pre>
   * Destination flags for dual persistence
   * </pre>
   *
   * <code>.unhinged.observability.v1.DestinationFlags destinations = 20;</code>
   * @return Whether the destinations field is set.
   */
  boolean hasDestinations();
  /**
   * <pre>
   * Destination flags for dual persistence
   * </pre>
   *
   * <code>.unhinged.observability.v1.DestinationFlags destinations = 20;</code>
   * @return The destinations.
   */
  unhinged.observability.DestinationFlags getDestinations();
  /**
   * <pre>
   * Destination flags for dual persistence
   * </pre>
   *
   * <code>.unhinged.observability.v1.DestinationFlags destinations = 20;</code>
   */
  unhinged.observability.DestinationFlagsOrBuilder getDestinationsOrBuilder();

  /**
   * <pre>
   * Data lake partitioning hints
   * </pre>
   *
   * <code>.unhinged.observability.v1.PartitionInfo partition_info = 25;</code>
   * @return Whether the partitionInfo field is set.
   */
  boolean hasPartitionInfo();
  /**
   * <pre>
   * Data lake partitioning hints
   * </pre>
   *
   * <code>.unhinged.observability.v1.PartitionInfo partition_info = 25;</code>
   * @return The partitionInfo.
   */
  unhinged.observability.PartitionInfo getPartitionInfo();
  /**
   * <pre>
   * Data lake partitioning hints
   * </pre>
   *
   * <code>.unhinged.observability.v1.PartitionInfo partition_info = 25;</code>
   */
  unhinged.observability.PartitionInfoOrBuilder getPartitionInfoOrBuilder();
}
