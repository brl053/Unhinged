//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google/protobuf/timestamp.proto

package com.google.protobuf;

@kotlin.jvm.JvmName("-initializetimestamp")
public inline fun timestamp(block: com.google.protobuf.TimestampKt.Dsl.() -> kotlin.Unit): com.google.protobuf.Timestamp =
  com.google.protobuf.TimestampKt.Dsl._create(com.google.protobuf.Timestamp.newBuilder()).apply { block() }._build()
public object TimestampKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.google.protobuf.Timestamp.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.google.protobuf.Timestamp.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.google.protobuf.Timestamp = _builder.build()

    /**
     * <pre>
     * Represents seconds of UTC time since Unix epoch
     * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
     * 9999-12-31T23:59:59Z inclusive.
     * </pre>
     *
     * <code>int64 seconds = 1;</code>
     */
    public var seconds: kotlin.Long
      @JvmName("getSeconds")
      get() = _builder.getSeconds()
      @JvmName("setSeconds")
      set(value) {
        _builder.setSeconds(value)
      }
    /**
     * <pre>
     * Represents seconds of UTC time since Unix epoch
     * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
     * 9999-12-31T23:59:59Z inclusive.
     * </pre>
     *
     * <code>int64 seconds = 1;</code>
     */
    public fun clearSeconds() {
      _builder.clearSeconds()
    }

    /**
     * <pre>
     * Non-negative fractions of a second at nanosecond resolution. Negative
     * second values with fractions must still have non-negative nanos values
     * that count forward in time. Must be from 0 to 999,999,999
     * inclusive.
     * </pre>
     *
     * <code>int32 nanos = 2;</code>
     */
    public var nanos: kotlin.Int
      @JvmName("getNanos")
      get() = _builder.getNanos()
      @JvmName("setNanos")
      set(value) {
        _builder.setNanos(value)
      }
    /**
     * <pre>
     * Non-negative fractions of a second at nanosecond resolution. Negative
     * second values with fractions must still have non-negative nanos values
     * that count forward in time. Must be from 0 to 999,999,999
     * inclusive.
     * </pre>
     *
     * <code>int32 nanos = 2;</code>
     */
    public fun clearNanos() {
      _builder.clearNanos()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.google.protobuf.Timestamp.copy(block: com.google.protobuf.TimestampKt.Dsl.() -> kotlin.Unit): com.google.protobuf.Timestamp =
  com.google.protobuf.TimestampKt.Dsl._create(this.toBuilder()).apply { block() }._build()

