//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: minimal_event.proto

package com.unhinged.cdc.minimal;

@kotlin.jvm.JvmName("-initializelLMInferenceEvent")
public inline fun lLMInferenceEvent(block: com.unhinged.cdc.minimal.LLMInferenceEventKt.Dsl.() -> kotlin.Unit): com.unhinged.cdc.minimal.MinimalEventProto.LLMInferenceEvent =
  com.unhinged.cdc.minimal.LLMInferenceEventKt.Dsl._create(com.unhinged.cdc.minimal.MinimalEventProto.LLMInferenceEvent.newBuilder()).apply { block() }._build()
public object LLMInferenceEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.unhinged.cdc.minimal.MinimalEventProto.LLMInferenceEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.unhinged.cdc.minimal.MinimalEventProto.LLMInferenceEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.unhinged.cdc.minimal.MinimalEventProto.LLMInferenceEvent = _builder.build()

    /**
     * <pre>
     * User prompt
     * </pre>
     *
     * <code>string prompt = 1;</code>
     */
    public var prompt: kotlin.String
      @JvmName("getPrompt")
      get() = _builder.getPrompt()
      @JvmName("setPrompt")
      set(value) {
        _builder.setPrompt(value)
      }
    /**
     * <pre>
     * User prompt
     * </pre>
     *
     * <code>string prompt = 1;</code>
     */
    public fun clearPrompt() {
      _builder.clearPrompt()
    }

    /**
     * <pre>
     * LLM response
     * </pre>
     *
     * <code>string response = 2;</code>
     */
    public var response: kotlin.String
      @JvmName("getResponse")
      get() = _builder.getResponse()
      @JvmName("setResponse")
      set(value) {
        _builder.setResponse(value)
      }
    /**
     * <pre>
     * LLM response
     * </pre>
     *
     * <code>string response = 2;</code>
     */
    public fun clearResponse() {
      _builder.clearResponse()
    }

    /**
     * <pre>
     * Model name (e.g., "llama2")
     * </pre>
     *
     * <code>string model = 3;</code>
     */
    public var model: kotlin.String
      @JvmName("getModel")
      get() = _builder.getModel()
      @JvmName("setModel")
      set(value) {
        _builder.setModel(value)
      }
    /**
     * <pre>
     * Model name (e.g., "llama2")
     * </pre>
     *
     * <code>string model = 3;</code>
     */
    public fun clearModel() {
      _builder.clearModel()
    }

    /**
     * <pre>
     * Input token count
     * </pre>
     *
     * <code>int32 prompt_tokens = 4;</code>
     */
    public var promptTokens: kotlin.Int
      @JvmName("getPromptTokens")
      get() = _builder.getPromptTokens()
      @JvmName("setPromptTokens")
      set(value) {
        _builder.setPromptTokens(value)
      }
    /**
     * <pre>
     * Input token count
     * </pre>
     *
     * <code>int32 prompt_tokens = 4;</code>
     */
    public fun clearPromptTokens() {
      _builder.clearPromptTokens()
    }

    /**
     * <pre>
     * Output token count
     * </pre>
     *
     * <code>int32 response_tokens = 5;</code>
     */
    public var responseTokens: kotlin.Int
      @JvmName("getResponseTokens")
      get() = _builder.getResponseTokens()
      @JvmName("setResponseTokens")
      set(value) {
        _builder.setResponseTokens(value)
      }
    /**
     * <pre>
     * Output token count
     * </pre>
     *
     * <code>int32 response_tokens = 5;</code>
     */
    public fun clearResponseTokens() {
      _builder.clearResponseTokens()
    }

    /**
     * <pre>
     * Inference latency
     * </pre>
     *
     * <code>int64 latency_ms = 6;</code>
     */
    public var latencyMs: kotlin.Long
      @JvmName("getLatencyMs")
      get() = _builder.getLatencyMs()
      @JvmName("setLatencyMs")
      set(value) {
        _builder.setLatencyMs(value)
      }
    /**
     * <pre>
     * Inference latency
     * </pre>
     *
     * <code>int64 latency_ms = 6;</code>
     */
    public fun clearLatencyMs() {
      _builder.clearLatencyMs()
    }

    /**
     * <pre>
     * Whether inference succeeded
     * </pre>
     *
     * <code>bool success = 7;</code>
     */
    public var success: kotlin.Boolean
      @JvmName("getSuccess")
      get() = _builder.getSuccess()
      @JvmName("setSuccess")
      set(value) {
        _builder.setSuccess(value)
      }
    /**
     * <pre>
     * Whether inference succeeded
     * </pre>
     *
     * <code>bool success = 7;</code>
     */
    public fun clearSuccess() {
      _builder.clearSuccess()
    }

    /**
     * <pre>
     * Error message if failed
     * </pre>
     *
     * <code>string error_message = 8;</code>
     */
    public var errorMessage: kotlin.String
      @JvmName("getErrorMessage")
      get() = _builder.getErrorMessage()
      @JvmName("setErrorMessage")
      set(value) {
        _builder.setErrorMessage(value)
      }
    /**
     * <pre>
     * Error message if failed
     * </pre>
     *
     * <code>string error_message = 8;</code>
     */
    public fun clearErrorMessage() {
      _builder.clearErrorMessage()
    }

    /**
     * <pre>
     * Minimal rationale for audit
     * </pre>
     *
     * <code>string intent = 9;</code>
     */
    public var intent: kotlin.String
      @JvmName("getIntent")
      get() = _builder.getIntent()
      @JvmName("setIntent")
      set(value) {
        _builder.setIntent(value)
      }
    /**
     * <pre>
     * Minimal rationale for audit
     * </pre>
     *
     * <code>string intent = 9;</code>
     */
    public fun clearIntent() {
      _builder.clearIntent()
    }

    /**
     * <pre>
     * Model confidence (0.0-1.0)
     * </pre>
     *
     * <code>float confidence = 10;</code>
     */
    public var confidence: kotlin.Float
      @JvmName("getConfidence")
      get() = _builder.getConfidence()
      @JvmName("setConfidence")
      set(value) {
        _builder.setConfidence(value)
      }
    /**
     * <pre>
     * Model confidence (0.0-1.0)
     * </pre>
     *
     * <code>float confidence = 10;</code>
     */
    public fun clearConfidence() {
      _builder.clearConfidence()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.unhinged.cdc.minimal.MinimalEventProto.LLMInferenceEvent.copy(block: com.unhinged.cdc.minimal.LLMInferenceEventKt.Dsl.() -> kotlin.Unit): com.unhinged.cdc.minimal.MinimalEventProto.LLMInferenceEvent =
  com.unhinged.cdc.minimal.LLMInferenceEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

