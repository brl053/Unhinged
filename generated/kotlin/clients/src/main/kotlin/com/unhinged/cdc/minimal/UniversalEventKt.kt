//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: minimal_event.proto

package com.unhinged.cdc.minimal;

@kotlin.jvm.JvmName("-initializeuniversalEvent")
public inline fun universalEvent(block: com.unhinged.cdc.minimal.UniversalEventKt.Dsl.() -> kotlin.Unit): com.unhinged.cdc.minimal.MinimalEventProto.UniversalEvent =
  com.unhinged.cdc.minimal.UniversalEventKt.Dsl._create(com.unhinged.cdc.minimal.MinimalEventProto.UniversalEvent.newBuilder()).apply { block() }._build()
public object UniversalEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.unhinged.cdc.minimal.MinimalEventProto.UniversalEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.unhinged.cdc.minimal.MinimalEventProto.UniversalEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.unhinged.cdc.minimal.MinimalEventProto.UniversalEvent = _builder.build()

    /**
     * <pre>
     * UUID
     * </pre>
     *
     * <code>string event_id = 1;</code>
     */
    public var eventId: kotlin.String
      @JvmName("getEventId")
      get() = _builder.getEventId()
      @JvmName("setEventId")
      set(value) {
        _builder.setEventId(value)
      }
    /**
     * <pre>
     * UUID
     * </pre>
     *
     * <code>string event_id = 1;</code>
     */
    public fun clearEventId() {
      _builder.clearEventId()
    }

    /**
     * <pre>
     * "llm.inference.completed"
     * </pre>
     *
     * <code>string event_type = 2;</code>
     */
    public var eventType: kotlin.String
      @JvmName("getEventType")
      get() = _builder.getEventType()
      @JvmName("setEventType")
      set(value) {
        _builder.setEventType(value)
      }
    /**
     * <pre>
     * "llm.inference.completed"
     * </pre>
     *
     * <code>string event_type = 2;</code>
     */
    public fun clearEventType() {
      _builder.clearEventType()
    }

    /**
     * <pre>
     * Unix epoch milliseconds
     * </pre>
     *
     * <code>int64 timestamp_ms = 3;</code>
     */
    public var timestampMs: kotlin.Long
      @JvmName("getTimestampMs")
      get() = _builder.getTimestampMs()
      @JvmName("setTimestampMs")
      set(value) {
        _builder.setTimestampMs(value)
      }
    /**
     * <pre>
     * Unix epoch milliseconds
     * </pre>
     *
     * <code>int64 timestamp_ms = 3;</code>
     */
    public fun clearTimestampMs() {
      _builder.clearTimestampMs()
    }

    /**
     * <pre>
     * User identifier
     * </pre>
     *
     * <code>string user_id = 4;</code>
     */
    public var userId: kotlin.String
      @JvmName("getUserId")
      get() = _builder.getUserId()
      @JvmName("setUserId")
      set(value) {
        _builder.setUserId(value)
      }
    /**
     * <pre>
     * User identifier
     * </pre>
     *
     * <code>string user_id = 4;</code>
     */
    public fun clearUserId() {
      _builder.clearUserId()
    }

    /**
     * <pre>
     * Session identifier
     * </pre>
     *
     * <code>string session_id = 5;</code>
     */
    public var sessionId: kotlin.String
      @JvmName("getSessionId")
      get() = _builder.getSessionId()
      @JvmName("setSessionId")
      set(value) {
        _builder.setSessionId(value)
      }
    /**
     * <pre>
     * Session identifier
     * </pre>
     *
     * <code>string session_id = 5;</code>
     */
    public fun clearSessionId() {
      _builder.clearSessionId()
    }

    /**
     * <pre>
     * Serialized domain event (parse later)
     * </pre>
     *
     * <code>bytes payload = 6;</code>
     */
    public var payload: com.google.protobuf.ByteString
      @JvmName("getPayload")
      get() = _builder.getPayload()
      @JvmName("setPayload")
      set(value) {
        _builder.setPayload(value)
      }
    /**
     * <pre>
     * Serialized domain event (parse later)
     * </pre>
     *
     * <code>bytes payload = 6;</code>
     */
    public fun clearPayload() {
      _builder.clearPayload()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.unhinged.cdc.minimal.MinimalEventProto.UniversalEvent.copy(block: com.unhinged.cdc.minimal.UniversalEventKt.Dsl.() -> kotlin.Unit): com.unhinged.cdc.minimal.MinimalEventProto.UniversalEvent =
  com.unhinged.cdc.minimal.UniversalEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

