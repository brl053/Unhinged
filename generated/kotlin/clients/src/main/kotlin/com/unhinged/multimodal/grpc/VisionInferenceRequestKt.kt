//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: vision_service.proto

package com.unhinged.multimodal.grpc;

@kotlin.jvm.JvmName("-initializevisionInferenceRequest")
public inline fun visionInferenceRequest(block: com.unhinged.multimodal.grpc.VisionInferenceRequestKt.Dsl.() -> kotlin.Unit): com.unhinged.multimodal.grpc.VisionInferenceRequest =
  com.unhinged.multimodal.grpc.VisionInferenceRequestKt.Dsl._create(com.unhinged.multimodal.grpc.VisionInferenceRequest.newBuilder()).apply { block() }._build()
public object VisionInferenceRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.unhinged.multimodal.grpc.VisionInferenceRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.unhinged.multimodal.grpc.VisionInferenceRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.unhinged.multimodal.grpc.VisionInferenceRequest = _builder.build()

    /**
     * <pre>
     * Raw image data (JPEG, PNG, etc.)
     * </pre>
     *
     * <code>bytes image_data = 1;</code>
     */
    public var imageData: com.google.protobuf.ByteString
      @JvmName("getImageData")
      get() = _builder.getImageData()
      @JvmName("setImageData")
      set(value) {
        _builder.setImageData(value)
      }
    /**
     * <pre>
     * Raw image data (JPEG, PNG, etc.)
     * </pre>
     *
     * <code>bytes image_data = 1;</code>
     */
    public fun clearImageData() {
      _builder.clearImageData()
    }

    /**
     * <pre>
     * Model to use for inference (e.g., "qwen2-vl", "blip-base")
     * </pre>
     *
     * <code>string model = 2;</code>
     */
    public var model: kotlin.String
      @JvmName("getModel")
      get() = _builder.getModel()
      @JvmName("setModel")
      set(value) {
        _builder.setModel(value)
      }
    /**
     * <pre>
     * Model to use for inference (e.g., "qwen2-vl", "blip-base")
     * </pre>
     *
     * <code>string model = 2;</code>
     */
    public fun clearModel() {
      _builder.clearModel()
    }

    /**
     * <pre>
     * Analysis prompt for the model
     * </pre>
     *
     * <code>string prompt = 3;</code>
     */
    public var prompt: kotlin.String
      @JvmName("getPrompt")
      get() = _builder.getPrompt()
      @JvmName("setPrompt")
      set(value) {
        _builder.setPrompt(value)
      }
    /**
     * <pre>
     * Analysis prompt for the model
     * </pre>
     *
     * <code>string prompt = 3;</code>
     */
    public fun clearPrompt() {
      _builder.clearPrompt()
    }

    /**
     * <pre>
     * Type of analysis (screenshot, natural_image, document, ui_component)
     * </pre>
     *
     * <code>string analysis_type = 4;</code>
     */
    public var analysisType: kotlin.String
      @JvmName("getAnalysisType")
      get() = _builder.getAnalysisType()
      @JvmName("setAnalysisType")
      set(value) {
        _builder.setAnalysisType(value)
      }
    /**
     * <pre>
     * Type of analysis (screenshot, natural_image, document, ui_component)
     * </pre>
     *
     * <code>string analysis_type = 4;</code>
     */
    public fun clearAnalysisType() {
      _builder.clearAnalysisType()
    }

    /**
     * <pre>
     * Maximum tokens for response
     * </pre>
     *
     * <code>int32 max_tokens = 5;</code>
     */
    public var maxTokens: kotlin.Int
      @JvmName("getMaxTokens")
      get() = _builder.getMaxTokens()
      @JvmName("setMaxTokens")
      set(value) {
        _builder.setMaxTokens(value)
      }
    /**
     * <pre>
     * Maximum tokens for response
     * </pre>
     *
     * <code>int32 max_tokens = 5;</code>
     */
    public fun clearMaxTokens() {
      _builder.clearMaxTokens()
    }

    /**
     * <pre>
     * Temperature for generation (0.0 to 1.0)
     * </pre>
     *
     * <code>float temperature = 6;</code>
     */
    public var temperature: kotlin.Float
      @JvmName("getTemperature")
      get() = _builder.getTemperature()
      @JvmName("setTemperature")
      set(value) {
        _builder.setTemperature(value)
      }
    /**
     * <pre>
     * Temperature for generation (0.0 to 1.0)
     * </pre>
     *
     * <code>float temperature = 6;</code>
     */
    public fun clearTemperature() {
      _builder.clearTemperature()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ParametersProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Additional inference parameters
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 7;</code>
     */
     public val parameters: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ParametersProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getParametersMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getParametersMap()
      )
    /**
     * <pre>
     * Additional inference parameters
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 7;</code>
     */
    @JvmName("putParameters")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ParametersProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putParameters(key, value)
       }
    /**
     * <pre>
     * Additional inference parameters
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 7;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setParameters")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ParametersProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <pre>
     * Additional inference parameters
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 7;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeParameters")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ParametersProxy>
      .remove(key: kotlin.String) {
         _builder.removeParameters(key)
       }
    /**
     * <pre>
     * Additional inference parameters
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 7;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllParameters")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ParametersProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllParameters(map)
       }
    /**
     * <pre>
     * Additional inference parameters
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 7;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearParameters")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ParametersProxy>
      .clear() {
         _builder.clearParameters()
       }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.unhinged.multimodal.grpc.VisionInferenceRequest.copy(block: com.unhinged.multimodal.grpc.VisionInferenceRequestKt.Dsl.() -> kotlin.Unit): com.unhinged.multimodal.grpc.VisionInferenceRequest =
  com.unhinged.multimodal.grpc.VisionInferenceRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

