//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: messaging.proto

package unhinged.messaging;

@kotlin.jvm.JvmName("-initializelLMMessage")
public inline fun lLMMessage(block: unhinged.messaging.LLMMessageKt.Dsl.() -> kotlin.Unit): unhinged.messaging.Messaging.LLMMessage =
  unhinged.messaging.LLMMessageKt.Dsl._create(unhinged.messaging.Messaging.LLMMessage.newBuilder()).apply { block() }._build()
public object LLMMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.messaging.Messaging.LLMMessage.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.messaging.Messaging.LLMMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.messaging.Messaging.LLMMessage = _builder.build()

    /**
     * <code>string interaction_id = 1;</code>
     */
    public var interactionId: kotlin.String
      @JvmName("getInteractionId")
      get() = _builder.getInteractionId()
      @JvmName("setInteractionId")
      set(value) {
        _builder.setInteractionId(value)
      }
    /**
     * <code>string interaction_id = 1;</code>
     */
    public fun clearInteractionId() {
      _builder.clearInteractionId()
    }

    /**
     * <code>.unhinged.messaging.LLMMessageType message_type = 2;</code>
     */
    public var messageType: unhinged.messaging.Messaging.LLMMessageType
      @JvmName("getMessageType")
      get() = _builder.getMessageType()
      @JvmName("setMessageType")
      set(value) {
        _builder.setMessageType(value)
      }
    /**
     * <code>.unhinged.messaging.LLMMessageType message_type = 2;</code>
     */
    public fun clearMessageType() {
      _builder.clearMessageType()
    }

    /**
     * <code>.unhinged.messaging.LLMPromptRequest prompt_request = 10;</code>
     */
    public var promptRequest: unhinged.messaging.Messaging.LLMPromptRequest
      @JvmName("getPromptRequest")
      get() = _builder.getPromptRequest()
      @JvmName("setPromptRequest")
      set(value) {
        _builder.setPromptRequest(value)
      }
    /**
     * <code>.unhinged.messaging.LLMPromptRequest prompt_request = 10;</code>
     */
    public fun clearPromptRequest() {
      _builder.clearPromptRequest()
    }
    /**
     * <code>.unhinged.messaging.LLMPromptRequest prompt_request = 10;</code>
     * @return Whether the promptRequest field is set.
     */
    public fun hasPromptRequest(): kotlin.Boolean {
      return _builder.hasPromptRequest()
    }

    /**
     * <code>.unhinged.messaging.LLMPromptResponse prompt_response = 11;</code>
     */
    public var promptResponse: unhinged.messaging.Messaging.LLMPromptResponse
      @JvmName("getPromptResponse")
      get() = _builder.getPromptResponse()
      @JvmName("setPromptResponse")
      set(value) {
        _builder.setPromptResponse(value)
      }
    /**
     * <code>.unhinged.messaging.LLMPromptResponse prompt_response = 11;</code>
     */
    public fun clearPromptResponse() {
      _builder.clearPromptResponse()
    }
    /**
     * <code>.unhinged.messaging.LLMPromptResponse prompt_response = 11;</code>
     * @return Whether the promptResponse field is set.
     */
    public fun hasPromptResponse(): kotlin.Boolean {
      return _builder.hasPromptResponse()
    }

    /**
     * <code>.unhinged.messaging.LLMStreamChunk stream_chunk = 12;</code>
     */
    public var streamChunk: unhinged.messaging.Messaging.LLMStreamChunk
      @JvmName("getStreamChunk")
      get() = _builder.getStreamChunk()
      @JvmName("setStreamChunk")
      set(value) {
        _builder.setStreamChunk(value)
      }
    /**
     * <code>.unhinged.messaging.LLMStreamChunk stream_chunk = 12;</code>
     */
    public fun clearStreamChunk() {
      _builder.clearStreamChunk()
    }
    /**
     * <code>.unhinged.messaging.LLMStreamChunk stream_chunk = 12;</code>
     * @return Whether the streamChunk field is set.
     */
    public fun hasStreamChunk(): kotlin.Boolean {
      return _builder.hasStreamChunk()
    }

    /**
     * <code>.unhinged.messaging.LLMError llm_error = 13;</code>
     */
    public var llmError: unhinged.messaging.Messaging.LLMError
      @JvmName("getLlmError")
      get() = _builder.getLlmError()
      @JvmName("setLlmError")
      set(value) {
        _builder.setLlmError(value)
      }
    /**
     * <code>.unhinged.messaging.LLMError llm_error = 13;</code>
     */
    public fun clearLlmError() {
      _builder.clearLlmError()
    }
    /**
     * <code>.unhinged.messaging.LLMError llm_error = 13;</code>
     * @return Whether the llmError field is set.
     */
    public fun hasLlmError(): kotlin.Boolean {
      return _builder.hasLlmError()
    }

    /**
     * <code>.unhinged.messaging.LLMCancel cancel_request = 14;</code>
     */
    public var cancelRequest: unhinged.messaging.Messaging.LLMCancel
      @JvmName("getCancelRequest")
      get() = _builder.getCancelRequest()
      @JvmName("setCancelRequest")
      set(value) {
        _builder.setCancelRequest(value)
      }
    /**
     * <code>.unhinged.messaging.LLMCancel cancel_request = 14;</code>
     */
    public fun clearCancelRequest() {
      _builder.clearCancelRequest()
    }
    /**
     * <code>.unhinged.messaging.LLMCancel cancel_request = 14;</code>
     * @return Whether the cancelRequest field is set.
     */
    public fun hasCancelRequest(): kotlin.Boolean {
      return _builder.hasCancelRequest()
    }
    public val messageDataCase: unhinged.messaging.Messaging.LLMMessage.MessageDataCase
      @JvmName("getMessageDataCase")
      get() = _builder.getMessageDataCase()

    public fun clearMessageData() {
      _builder.clearMessageData()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.messaging.Messaging.LLMMessage.copy(block: unhinged.messaging.LLMMessageKt.Dsl.() -> kotlin.Unit): unhinged.messaging.Messaging.LLMMessage =
  unhinged.messaging.LLMMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.messaging.Messaging.LLMMessageOrBuilder.promptRequestOrNull: unhinged.messaging.Messaging.LLMPromptRequest?
  get() = if (hasPromptRequest()) getPromptRequest() else null

public val unhinged.messaging.Messaging.LLMMessageOrBuilder.promptResponseOrNull: unhinged.messaging.Messaging.LLMPromptResponse?
  get() = if (hasPromptResponse()) getPromptResponse() else null

public val unhinged.messaging.Messaging.LLMMessageOrBuilder.streamChunkOrNull: unhinged.messaging.Messaging.LLMStreamChunk?
  get() = if (hasStreamChunk()) getStreamChunk() else null

public val unhinged.messaging.Messaging.LLMMessageOrBuilder.llmErrorOrNull: unhinged.messaging.Messaging.LLMError?
  get() = if (hasLlmError()) getLlmError() else null

public val unhinged.messaging.Messaging.LLMMessageOrBuilder.cancelRequestOrNull: unhinged.messaging.Messaging.LLMCancel?
  get() = if (hasCancelRequest()) getCancelRequest() else null

