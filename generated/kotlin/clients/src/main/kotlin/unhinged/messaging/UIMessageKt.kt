//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: messaging.proto

package unhinged.messaging;

@kotlin.jvm.JvmName("-initializeuIMessage")
public inline fun uIMessage(block: unhinged.messaging.UIMessageKt.Dsl.() -> kotlin.Unit): unhinged.messaging.Messaging.UIMessage =
  unhinged.messaging.UIMessageKt.Dsl._create(unhinged.messaging.Messaging.UIMessage.newBuilder()).apply { block() }._build()
public object UIMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.messaging.Messaging.UIMessage.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.messaging.Messaging.UIMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.messaging.Messaging.UIMessage = _builder.build()

    /**
     * <code>string component_id = 1;</code>
     */
    public var componentId: kotlin.String
      @JvmName("getComponentId")
      get() = _builder.getComponentId()
      @JvmName("setComponentId")
      set(value) {
        _builder.setComponentId(value)
      }
    /**
     * <code>string component_id = 1;</code>
     */
    public fun clearComponentId() {
      _builder.clearComponentId()
    }

    /**
     * <code>.unhinged.messaging.UIMessageType message_type = 2;</code>
     */
    public var messageType: unhinged.messaging.Messaging.UIMessageType
      @JvmName("getMessageType")
      get() = _builder.getMessageType()
      @JvmName("setMessageType")
      set(value) {
        _builder.setMessageType(value)
      }
    /**
     * <code>.unhinged.messaging.UIMessageType message_type = 2;</code>
     */
    public fun clearMessageType() {
      _builder.clearMessageType()
    }

    /**
     * <code>.unhinged.messaging.UIUpdate update = 10;</code>
     */
    public var update: unhinged.messaging.Messaging.UIUpdate
      @JvmName("getUpdate")
      get() = _builder.getUpdate()
      @JvmName("setUpdate")
      set(value) {
        _builder.setUpdate(value)
      }
    /**
     * <code>.unhinged.messaging.UIUpdate update = 10;</code>
     */
    public fun clearUpdate() {
      _builder.clearUpdate()
    }
    /**
     * <code>.unhinged.messaging.UIUpdate update = 10;</code>
     * @return Whether the update field is set.
     */
    public fun hasUpdate(): kotlin.Boolean {
      return _builder.hasUpdate()
    }

    /**
     * <code>.unhinged.messaging.UINotification notification = 11;</code>
     */
    public var notification: unhinged.messaging.Messaging.UINotification
      @JvmName("getNotification")
      get() = _builder.getNotification()
      @JvmName("setNotification")
      set(value) {
        _builder.setNotification(value)
      }
    /**
     * <code>.unhinged.messaging.UINotification notification = 11;</code>
     */
    public fun clearNotification() {
      _builder.clearNotification()
    }
    /**
     * <code>.unhinged.messaging.UINotification notification = 11;</code>
     * @return Whether the notification field is set.
     */
    public fun hasNotification(): kotlin.Boolean {
      return _builder.hasNotification()
    }

    /**
     * <code>.unhinged.messaging.UICommand command = 12;</code>
     */
    public var command: unhinged.messaging.Messaging.UICommand
      @JvmName("getCommand")
      get() = _builder.getCommand()
      @JvmName("setCommand")
      set(value) {
        _builder.setCommand(value)
      }
    /**
     * <code>.unhinged.messaging.UICommand command = 12;</code>
     */
    public fun clearCommand() {
      _builder.clearCommand()
    }
    /**
     * <code>.unhinged.messaging.UICommand command = 12;</code>
     * @return Whether the command field is set.
     */
    public fun hasCommand(): kotlin.Boolean {
      return _builder.hasCommand()
    }
    public val messageDataCase: unhinged.messaging.Messaging.UIMessage.MessageDataCase
      @JvmName("getMessageDataCase")
      get() = _builder.getMessageDataCase()

    public fun clearMessageData() {
      _builder.clearMessageData()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.messaging.Messaging.UIMessage.copy(block: unhinged.messaging.UIMessageKt.Dsl.() -> kotlin.Unit): unhinged.messaging.Messaging.UIMessage =
  unhinged.messaging.UIMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.messaging.Messaging.UIMessageOrBuilder.updateOrNull: unhinged.messaging.Messaging.UIUpdate?
  get() = if (hasUpdate()) getUpdate() else null

public val unhinged.messaging.Messaging.UIMessageOrBuilder.notificationOrNull: unhinged.messaging.Messaging.UINotification?
  get() = if (hasNotification()) getNotification() else null

public val unhinged.messaging.Messaging.UIMessageOrBuilder.commandOrNull: unhinged.messaging.Messaging.UICommand?
  get() = if (hasCommand()) getCommand() else null

