//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: messaging.proto

package unhinged.messaging;

@kotlin.jvm.JvmName("-initializeworkflowMessage")
public inline fun workflowMessage(block: unhinged.messaging.WorkflowMessageKt.Dsl.() -> kotlin.Unit): unhinged.messaging.Messaging.WorkflowMessage =
  unhinged.messaging.WorkflowMessageKt.Dsl._create(unhinged.messaging.Messaging.WorkflowMessage.newBuilder()).apply { block() }._build()
public object WorkflowMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.messaging.Messaging.WorkflowMessage.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.messaging.Messaging.WorkflowMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.messaging.Messaging.WorkflowMessage = _builder.build()

    /**
     * <code>string workflow_id = 1;</code>
     */
    public var workflowId: kotlin.String
      @JvmName("getWorkflowId")
      get() = _builder.getWorkflowId()
      @JvmName("setWorkflowId")
      set(value) {
        _builder.setWorkflowId(value)
      }
    /**
     * <code>string workflow_id = 1;</code>
     */
    public fun clearWorkflowId() {
      _builder.clearWorkflowId()
    }

    /**
     * <code>string execution_id = 2;</code>
     */
    public var executionId: kotlin.String
      @JvmName("getExecutionId")
      get() = _builder.getExecutionId()
      @JvmName("setExecutionId")
      set(value) {
        _builder.setExecutionId(value)
      }
    /**
     * <code>string execution_id = 2;</code>
     */
    public fun clearExecutionId() {
      _builder.clearExecutionId()
    }

    /**
     * <code>.unhinged.messaging.WorkflowMessageType message_type = 3;</code>
     */
    public var messageType: unhinged.messaging.Messaging.WorkflowMessageType
      @JvmName("getMessageType")
      get() = _builder.getMessageType()
      @JvmName("setMessageType")
      set(value) {
        _builder.setMessageType(value)
      }
    /**
     * <code>.unhinged.messaging.WorkflowMessageType message_type = 3;</code>
     */
    public fun clearMessageType() {
      _builder.clearMessageType()
    }

    /**
     * <code>.unhinged.messaging.WorkflowTrigger trigger = 10;</code>
     */
    public var trigger: unhinged.messaging.Messaging.WorkflowTrigger
      @JvmName("getTrigger")
      get() = _builder.getTrigger()
      @JvmName("setTrigger")
      set(value) {
        _builder.setTrigger(value)
      }
    /**
     * <code>.unhinged.messaging.WorkflowTrigger trigger = 10;</code>
     */
    public fun clearTrigger() {
      _builder.clearTrigger()
    }
    /**
     * <code>.unhinged.messaging.WorkflowTrigger trigger = 10;</code>
     * @return Whether the trigger field is set.
     */
    public fun hasTrigger(): kotlin.Boolean {
      return _builder.hasTrigger()
    }

    /**
     * <code>.unhinged.messaging.WorkflowStepExecution step_execution = 11;</code>
     */
    public var stepExecution: unhinged.messaging.Messaging.WorkflowStepExecution
      @JvmName("getStepExecution")
      get() = _builder.getStepExecution()
      @JvmName("setStepExecution")
      set(value) {
        _builder.setStepExecution(value)
      }
    /**
     * <code>.unhinged.messaging.WorkflowStepExecution step_execution = 11;</code>
     */
    public fun clearStepExecution() {
      _builder.clearStepExecution()
    }
    /**
     * <code>.unhinged.messaging.WorkflowStepExecution step_execution = 11;</code>
     * @return Whether the stepExecution field is set.
     */
    public fun hasStepExecution(): kotlin.Boolean {
      return _builder.hasStepExecution()
    }

    /**
     * <code>.unhinged.messaging.WorkflowCompletion completion = 12;</code>
     */
    public var completion: unhinged.messaging.Messaging.WorkflowCompletion
      @JvmName("getCompletion")
      get() = _builder.getCompletion()
      @JvmName("setCompletion")
      set(value) {
        _builder.setCompletion(value)
      }
    /**
     * <code>.unhinged.messaging.WorkflowCompletion completion = 12;</code>
     */
    public fun clearCompletion() {
      _builder.clearCompletion()
    }
    /**
     * <code>.unhinged.messaging.WorkflowCompletion completion = 12;</code>
     * @return Whether the completion field is set.
     */
    public fun hasCompletion(): kotlin.Boolean {
      return _builder.hasCompletion()
    }

    /**
     * <code>.unhinged.messaging.WorkflowControl control = 13;</code>
     */
    public var control: unhinged.messaging.Messaging.WorkflowControl
      @JvmName("getControl")
      get() = _builder.getControl()
      @JvmName("setControl")
      set(value) {
        _builder.setControl(value)
      }
    /**
     * <code>.unhinged.messaging.WorkflowControl control = 13;</code>
     */
    public fun clearControl() {
      _builder.clearControl()
    }
    /**
     * <code>.unhinged.messaging.WorkflowControl control = 13;</code>
     * @return Whether the control field is set.
     */
    public fun hasControl(): kotlin.Boolean {
      return _builder.hasControl()
    }
    public val messageDataCase: unhinged.messaging.Messaging.WorkflowMessage.MessageDataCase
      @JvmName("getMessageDataCase")
      get() = _builder.getMessageDataCase()

    public fun clearMessageData() {
      _builder.clearMessageData()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.messaging.Messaging.WorkflowMessage.copy(block: unhinged.messaging.WorkflowMessageKt.Dsl.() -> kotlin.Unit): unhinged.messaging.Messaging.WorkflowMessage =
  unhinged.messaging.WorkflowMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.messaging.Messaging.WorkflowMessageOrBuilder.triggerOrNull: unhinged.messaging.Messaging.WorkflowTrigger?
  get() = if (hasTrigger()) getTrigger() else null

public val unhinged.messaging.Messaging.WorkflowMessageOrBuilder.stepExecutionOrNull: unhinged.messaging.Messaging.WorkflowStepExecution?
  get() = if (hasStepExecution()) getStepExecution() else null

public val unhinged.messaging.Messaging.WorkflowMessageOrBuilder.completionOrNull: unhinged.messaging.Messaging.WorkflowCompletion?
  get() = if (hasCompletion()) getCompletion() else null

public val unhinged.messaging.Messaging.WorkflowMessageOrBuilder.controlOrNull: unhinged.messaging.Messaging.WorkflowControl?
  get() = if (hasControl()) getControl() else null

