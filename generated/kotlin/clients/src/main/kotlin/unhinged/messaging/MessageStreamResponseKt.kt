//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: messaging.proto

package unhinged.messaging;

@kotlin.jvm.JvmName("-initializemessageStreamResponse")
public inline fun messageStreamResponse(block: unhinged.messaging.MessageStreamResponseKt.Dsl.() -> kotlin.Unit): unhinged.messaging.Messaging.MessageStreamResponse =
  unhinged.messaging.MessageStreamResponseKt.Dsl._create(unhinged.messaging.Messaging.MessageStreamResponse.newBuilder()).apply { block() }._build()
public object MessageStreamResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.messaging.Messaging.MessageStreamResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.messaging.Messaging.MessageStreamResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.messaging.Messaging.MessageStreamResponse = _builder.build()

    /**
     * <code>.unhinged.messaging.Message message = 1;</code>
     */
    public var message: unhinged.messaging.Messaging.Message
      @JvmName("getMessage")
      get() = _builder.getMessage()
      @JvmName("setMessage")
      set(value) {
        _builder.setMessage(value)
      }
    /**
     * <code>.unhinged.messaging.Message message = 1;</code>
     */
    public fun clearMessage() {
      _builder.clearMessage()
    }
    /**
     * <code>.unhinged.messaging.Message message = 1;</code>
     * @return Whether the message field is set.
     */
    public fun hasMessage(): kotlin.Boolean {
      return _builder.hasMessage()
    }

    /**
     * <code>.unhinged.messaging.StreamStatus status = 2;</code>
     */
    public var status: unhinged.messaging.Messaging.StreamStatus
      @JvmName("getStatus")
      get() = _builder.getStatus()
      @JvmName("setStatus")
      set(value) {
        _builder.setStatus(value)
      }
    /**
     * <code>.unhinged.messaging.StreamStatus status = 2;</code>
     */
    public fun clearStatus() {
      _builder.clearStatus()
    }
    /**
     * <code>.unhinged.messaging.StreamStatus status = 2;</code>
     * @return Whether the status field is set.
     */
    public fun hasStatus(): kotlin.Boolean {
      return _builder.hasStatus()
    }

    /**
     * <code>.unhinged.messaging.StreamError error = 3;</code>
     */
    public var error: unhinged.messaging.Messaging.StreamError
      @JvmName("getError")
      get() = _builder.getError()
      @JvmName("setError")
      set(value) {
        _builder.setError(value)
      }
    /**
     * <code>.unhinged.messaging.StreamError error = 3;</code>
     */
    public fun clearError() {
      _builder.clearError()
    }
    /**
     * <code>.unhinged.messaging.StreamError error = 3;</code>
     * @return Whether the error field is set.
     */
    public fun hasError(): kotlin.Boolean {
      return _builder.hasError()
    }
    public val responseTypeCase: unhinged.messaging.Messaging.MessageStreamResponse.ResponseTypeCase
      @JvmName("getResponseTypeCase")
      get() = _builder.getResponseTypeCase()

    public fun clearResponseType() {
      _builder.clearResponseType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.messaging.Messaging.MessageStreamResponse.copy(block: unhinged.messaging.MessageStreamResponseKt.Dsl.() -> kotlin.Unit): unhinged.messaging.Messaging.MessageStreamResponse =
  unhinged.messaging.MessageStreamResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.messaging.Messaging.MessageStreamResponseOrBuilder.messageOrNull: unhinged.messaging.Messaging.Message?
  get() = if (hasMessage()) getMessage() else null

public val unhinged.messaging.Messaging.MessageStreamResponseOrBuilder.statusOrNull: unhinged.messaging.Messaging.StreamStatus?
  get() = if (hasStatus()) getStatus() else null

public val unhinged.messaging.Messaging.MessageStreamResponseOrBuilder.errorOrNull: unhinged.messaging.Messaging.StreamError?
  get() = if (hasError()) getError() else null

