//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: audio.proto

package unhinged.audio;

@kotlin.jvm.JvmName("-initializegetVoiceRequest")
public inline fun getVoiceRequest(block: unhinged.audio.GetVoiceRequestKt.Dsl.() -> kotlin.Unit): unhinged.audio.GetVoiceRequest =
  unhinged.audio.GetVoiceRequestKt.Dsl._create(unhinged.audio.GetVoiceRequest.newBuilder()).apply { block() }._build()
public object GetVoiceRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.audio.GetVoiceRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.audio.GetVoiceRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.audio.GetVoiceRequest = _builder.build()

    /**
     * <code>string voice_id = 1;</code>
     */
    public var voiceId: kotlin.String
      @JvmName("getVoiceId")
      get() = _builder.getVoiceId()
      @JvmName("setVoiceId")
      set(value) {
        _builder.setVoiceId(value)
      }
    /**
     * <code>string voice_id = 1;</code>
     */
    public fun clearVoiceId() {
      _builder.clearVoiceId()
    }

    /**
     * <code>bool include_preview = 2;</code>
     */
    public var includePreview: kotlin.Boolean
      @JvmName("getIncludePreview")
      get() = _builder.getIncludePreview()
      @JvmName("setIncludePreview")
      set(value) {
        _builder.setIncludePreview(value)
      }
    /**
     * <code>bool include_preview = 2;</code>
     */
    public fun clearIncludePreview() {
      _builder.clearIncludePreview()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.audio.GetVoiceRequest.copy(block: unhinged.audio.GetVoiceRequestKt.Dsl.() -> kotlin.Unit): unhinged.audio.GetVoiceRequest =
  unhinged.audio.GetVoiceRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

