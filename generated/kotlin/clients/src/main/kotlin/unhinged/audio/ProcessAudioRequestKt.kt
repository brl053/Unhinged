//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: audio.proto

package unhinged.audio;

@kotlin.jvm.JvmName("-initializeprocessAudioRequest")
public inline fun processAudioRequest(block: unhinged.audio.ProcessAudioRequestKt.Dsl.() -> kotlin.Unit): unhinged.audio.ProcessAudioRequest =
  unhinged.audio.ProcessAudioRequestKt.Dsl._create(unhinged.audio.ProcessAudioRequest.newBuilder()).apply { block() }._build()
public object ProcessAudioRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.audio.ProcessAudioRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.audio.ProcessAudioRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.audio.ProcessAudioRequest = _builder.build()

    /**
     * <pre>
     * ← DRY! (universal attachment)
     * </pre>
     *
     * <code>.unhinged.common.v1.Attachment audio_file = 1;</code>
     */
    public var audioFile: unhinged.common.Attachment
      @JvmName("getAudioFile")
      get() = _builder.getAudioFile()
      @JvmName("setAudioFile")
      set(value) {
        _builder.setAudioFile(value)
      }
    /**
     * <pre>
     * ← DRY! (universal attachment)
     * </pre>
     *
     * <code>.unhinged.common.v1.Attachment audio_file = 1;</code>
     */
    public fun clearAudioFile() {
      _builder.clearAudioFile()
    }
    /**
     * <pre>
     * ← DRY! (universal attachment)
     * </pre>
     *
     * <code>.unhinged.common.v1.Attachment audio_file = 1;</code>
     * @return Whether the audioFile field is set.
     */
    public fun hasAudioFile(): kotlin.Boolean {
      return _builder.hasAudioFile()
    }

    /**
     * <code>.unhinged.audio.v1.ProcessingType processing_type = 2;</code>
     */
    public var processingType: unhinged.audio.ProcessingType
      @JvmName("getProcessingType")
      get() = _builder.getProcessingType()
      @JvmName("setProcessingType")
      set(value) {
        _builder.setProcessingType(value)
      }
    /**
     * <code>.unhinged.audio.v1.ProcessingType processing_type = 2;</code>
     */
    public fun clearProcessingType() {
      _builder.clearProcessingType()
    }

    /**
     * <code>.unhinged.audio.v1.AudioOptions options = 3;</code>
     */
    public var options: unhinged.audio.AudioOptions
      @JvmName("getOptions")
      get() = _builder.getOptions()
      @JvmName("setOptions")
      set(value) {
        _builder.setOptions(value)
      }
    /**
     * <code>.unhinged.audio.v1.AudioOptions options = 3;</code>
     */
    public fun clearOptions() {
      _builder.clearOptions()
    }
    /**
     * <code>.unhinged.audio.v1.AudioOptions options = 3;</code>
     * @return Whether the options field is set.
     */
    public fun hasOptions(): kotlin.Boolean {
      return _builder.hasOptions()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.audio.ProcessAudioRequest.copy(block: unhinged.audio.ProcessAudioRequestKt.Dsl.() -> kotlin.Unit): unhinged.audio.ProcessAudioRequest =
  unhinged.audio.ProcessAudioRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.audio.ProcessAudioRequestOrBuilder.audioFileOrNull: unhinged.common.Attachment?
  get() = if (hasAudioFile()) getAudioFile() else null

public val unhinged.audio.ProcessAudioRequestOrBuilder.optionsOrNull: unhinged.audio.AudioOptions?
  get() = if (hasOptions()) getOptions() else null

