//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: audio.proto

package unhinged.audio;

@kotlin.jvm.JvmName("-initializeanalyzeAudioRequest")
public inline fun analyzeAudioRequest(block: unhinged.audio.AnalyzeAudioRequestKt.Dsl.() -> kotlin.Unit): unhinged.audio.AnalyzeAudioRequest =
  unhinged.audio.AnalyzeAudioRequestKt.Dsl._create(unhinged.audio.AnalyzeAudioRequest.newBuilder()).apply { block() }._build()
public object AnalyzeAudioRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.audio.AnalyzeAudioRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.audio.AnalyzeAudioRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.audio.AnalyzeAudioRequest = _builder.build()

    /**
     * <pre>
     * ← DRY!
     * </pre>
     *
     * <code>.unhinged.common.v1.Attachment audio_file = 1;</code>
     */
    public var audioFile: unhinged.common.Attachment
      @JvmName("getAudioFile")
      get() = _builder.getAudioFile()
      @JvmName("setAudioFile")
      set(value) {
        _builder.setAudioFile(value)
      }
    /**
     * <pre>
     * ← DRY!
     * </pre>
     *
     * <code>.unhinged.common.v1.Attachment audio_file = 1;</code>
     */
    public fun clearAudioFile() {
      _builder.clearAudioFile()
    }
    /**
     * <pre>
     * ← DRY!
     * </pre>
     *
     * <code>.unhinged.common.v1.Attachment audio_file = 1;</code>
     * @return Whether the audioFile field is set.
     */
    public fun hasAudioFile(): kotlin.Boolean {
      return _builder.hasAudioFile()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class AnalysisTypesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .unhinged.audio.v1.AnalysisType analysis_types = 2;</code>
     */
    public val analysisTypes: com.google.protobuf.kotlin.DslList<unhinged.audio.AnalysisType, AnalysisTypesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getAnalysisTypesList()
      )
    /**
     * <code>repeated .unhinged.audio.v1.AnalysisType analysis_types = 2;</code>
     * @param value The analysisTypes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAnalysisTypes")
    public fun com.google.protobuf.kotlin.DslList<unhinged.audio.AnalysisType, AnalysisTypesProxy>.add(value: unhinged.audio.AnalysisType) {
      _builder.addAnalysisTypes(value)
    }/**
     * <code>repeated .unhinged.audio.v1.AnalysisType analysis_types = 2;</code>
     * @param value The analysisTypes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAnalysisTypes")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<unhinged.audio.AnalysisType, AnalysisTypesProxy>.plusAssign(value: unhinged.audio.AnalysisType) {
      add(value)
    }/**
     * <code>repeated .unhinged.audio.v1.AnalysisType analysis_types = 2;</code>
     * @param values The analysisTypes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllAnalysisTypes")
    public fun com.google.protobuf.kotlin.DslList<unhinged.audio.AnalysisType, AnalysisTypesProxy>.addAll(values: kotlin.collections.Iterable<unhinged.audio.AnalysisType>) {
      _builder.addAllAnalysisTypes(values)
    }/**
     * <code>repeated .unhinged.audio.v1.AnalysisType analysis_types = 2;</code>
     * @param values The analysisTypes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllAnalysisTypes")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<unhinged.audio.AnalysisType, AnalysisTypesProxy>.plusAssign(values: kotlin.collections.Iterable<unhinged.audio.AnalysisType>) {
      addAll(values)
    }/**
     * <code>repeated .unhinged.audio.v1.AnalysisType analysis_types = 2;</code>
     * @param index The index to set the value at.
     * @param value The analysisTypes to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setAnalysisTypes")
    public operator fun com.google.protobuf.kotlin.DslList<unhinged.audio.AnalysisType, AnalysisTypesProxy>.set(index: kotlin.Int, value: unhinged.audio.AnalysisType) {
      _builder.setAnalysisTypes(index, value)
    }/**
     * <code>repeated .unhinged.audio.v1.AnalysisType analysis_types = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearAnalysisTypes")
    public fun com.google.protobuf.kotlin.DslList<unhinged.audio.AnalysisType, AnalysisTypesProxy>.clear() {
      _builder.clearAnalysisTypes()
    }}
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.audio.AnalyzeAudioRequest.copy(block: unhinged.audio.AnalyzeAudioRequestKt.Dsl.() -> kotlin.Unit): unhinged.audio.AnalyzeAudioRequest =
  unhinged.audio.AnalyzeAudioRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.audio.AnalyzeAudioRequestOrBuilder.audioFileOrNull: unhinged.common.Attachment?
  get() = if (hasAudioFile()) getAudioFile() else null

