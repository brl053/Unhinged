//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: audio.proto

package unhinged.audio;

@kotlin.jvm.JvmName("-initializeaudioQualityMetrics")
public inline fun audioQualityMetrics(block: unhinged.audio.AudioQualityMetricsKt.Dsl.() -> kotlin.Unit): unhinged.audio.AudioQualityMetrics =
  unhinged.audio.AudioQualityMetricsKt.Dsl._create(unhinged.audio.AudioQualityMetrics.newBuilder()).apply { block() }._build()
public object AudioQualityMetricsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.audio.AudioQualityMetrics.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.audio.AudioQualityMetrics.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.audio.AudioQualityMetrics = _builder.build()

    /**
     * <code>float signal_to_noise_ratio = 1;</code>
     */
    public var signalToNoiseRatio: kotlin.Float
      @JvmName("getSignalToNoiseRatio")
      get() = _builder.getSignalToNoiseRatio()
      @JvmName("setSignalToNoiseRatio")
      set(value) {
        _builder.setSignalToNoiseRatio(value)
      }
    /**
     * <code>float signal_to_noise_ratio = 1;</code>
     */
    public fun clearSignalToNoiseRatio() {
      _builder.clearSignalToNoiseRatio()
    }

    /**
     * <code>float dynamic_range = 2;</code>
     */
    public var dynamicRange: kotlin.Float
      @JvmName("getDynamicRange")
      get() = _builder.getDynamicRange()
      @JvmName("setDynamicRange")
      set(value) {
        _builder.setDynamicRange(value)
      }
    /**
     * <code>float dynamic_range = 2;</code>
     */
    public fun clearDynamicRange() {
      _builder.clearDynamicRange()
    }

    /**
     * <code>bool has_clipping = 3;</code>
     */
    public var hasClipping: kotlin.Boolean
      @JvmName("getHasClipping")
      get() = _builder.getHasClipping()
      @JvmName("setHasClipping")
      set(value) {
        _builder.setHasClipping(value)
      }
    /**
     * <code>bool has_clipping = 3;</code>
     */
    public fun clearHasClipping() {
      _builder.clearHasClipping()
    }

    /**
     * <code>bool has_background_noise = 4;</code>
     */
    public var hasBackgroundNoise: kotlin.Boolean
      @JvmName("getHasBackgroundNoise")
      get() = _builder.getHasBackgroundNoise()
      @JvmName("setHasBackgroundNoise")
      set(value) {
        _builder.setHasBackgroundNoise(value)
      }
    /**
     * <code>bool has_background_noise = 4;</code>
     */
    public fun clearHasBackgroundNoise() {
      _builder.clearHasBackgroundNoise()
    }

    /**
     * <pre>
     * 0.0 to 1.0
     * </pre>
     *
     * <code>float overall_quality_score = 5;</code>
     */
    public var overallQualityScore: kotlin.Float
      @JvmName("getOverallQualityScore")
      get() = _builder.getOverallQualityScore()
      @JvmName("setOverallQualityScore")
      set(value) {
        _builder.setOverallQualityScore(value)
      }
    /**
     * <pre>
     * 0.0 to 1.0
     * </pre>
     *
     * <code>float overall_quality_score = 5;</code>
     */
    public fun clearOverallQualityScore() {
      _builder.clearOverallQualityScore()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.audio.AudioQualityMetrics.copy(block: unhinged.audio.AudioQualityMetricsKt.Dsl.() -> kotlin.Unit): unhinged.audio.AudioQualityMetrics =
  unhinged.audio.AudioQualityMetricsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

