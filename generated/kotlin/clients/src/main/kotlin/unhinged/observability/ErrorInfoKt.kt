//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: observability.proto

package unhinged.observability;

@kotlin.jvm.JvmName("-initializeerrorInfo")
public inline fun errorInfo(block: unhinged.observability.ErrorInfoKt.Dsl.() -> kotlin.Unit): unhinged.observability.ErrorInfo =
  unhinged.observability.ErrorInfoKt.Dsl._create(unhinged.observability.ErrorInfo.newBuilder()).apply { block() }._build()
public object ErrorInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.observability.ErrorInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.observability.ErrorInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.observability.ErrorInfo = _builder.build()

    /**
     * <pre>
     * Exception class name
     * </pre>
     *
     * <code>string error_type = 1;</code>
     */
    public var errorType: kotlin.String
      @JvmName("getErrorType")
      get() = _builder.getErrorType()
      @JvmName("setErrorType")
      set(value) {
        _builder.setErrorType(value)
      }
    /**
     * <pre>
     * Exception class name
     * </pre>
     *
     * <code>string error_type = 1;</code>
     */
    public fun clearErrorType() {
      _builder.clearErrorType()
    }

    /**
     * <pre>
     * Exception message
     * </pre>
     *
     * <code>string error_message = 2;</code>
     */
    public var errorMessage: kotlin.String
      @JvmName("getErrorMessage")
      get() = _builder.getErrorMessage()
      @JvmName("setErrorMessage")
      set(value) {
        _builder.setErrorMessage(value)
      }
    /**
     * <pre>
     * Exception message
     * </pre>
     *
     * <code>string error_message = 2;</code>
     */
    public fun clearErrorMessage() {
      _builder.clearErrorMessage()
    }

    /**
     * <pre>
     * Full stack trace
     * </pre>
     *
     * <code>string stack_trace = 3;</code>
     */
    public var stackTrace: kotlin.String
      @JvmName("getStackTrace")
      get() = _builder.getStackTrace()
      @JvmName("setStackTrace")
      set(value) {
        _builder.setStackTrace(value)
      }
    /**
     * <pre>
     * Full stack trace
     * </pre>
     *
     * <code>string stack_trace = 3;</code>
     */
    public fun clearStackTrace() {
      _builder.clearStackTrace()
    }

    /**
     * <pre>
     * Application error code
     * </pre>
     *
     * <code>string error_code = 4;</code>
     */
    public var errorCode: kotlin.String
      @JvmName("getErrorCode")
      get() = _builder.getErrorCode()
      @JvmName("setErrorCode")
      set(value) {
        _builder.setErrorCode(value)
      }
    /**
     * <pre>
     * Application error code
     * </pre>
     *
     * <code>string error_code = 4;</code>
     */
    public fun clearErrorCode() {
      _builder.clearErrorCode()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ErrorAttributesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Additional error context
     * </pre>
     *
     * <code>map&lt;string, string&gt; error_attributes = 5;</code>
     */
     public val errorAttributes: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ErrorAttributesProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getErrorAttributesMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getErrorAttributesMap()
      )
    /**
     * <pre>
     * Additional error context
     * </pre>
     *
     * <code>map&lt;string, string&gt; error_attributes = 5;</code>
     */
    @JvmName("putErrorAttributes")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ErrorAttributesProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putErrorAttributes(key, value)
       }
    /**
     * <pre>
     * Additional error context
     * </pre>
     *
     * <code>map&lt;string, string&gt; error_attributes = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setErrorAttributes")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ErrorAttributesProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <pre>
     * Additional error context
     * </pre>
     *
     * <code>map&lt;string, string&gt; error_attributes = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeErrorAttributes")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ErrorAttributesProxy>
      .remove(key: kotlin.String) {
         _builder.removeErrorAttributes(key)
       }
    /**
     * <pre>
     * Additional error context
     * </pre>
     *
     * <code>map&lt;string, string&gt; error_attributes = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllErrorAttributes")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ErrorAttributesProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllErrorAttributes(map)
       }
    /**
     * <pre>
     * Additional error context
     * </pre>
     *
     * <code>map&lt;string, string&gt; error_attributes = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearErrorAttributes")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ErrorAttributesProxy>
      .clear() {
         _builder.clearErrorAttributes()
       }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.observability.ErrorInfo.copy(block: unhinged.observability.ErrorInfoKt.Dsl.() -> kotlin.Unit): unhinged.observability.ErrorInfo =
  unhinged.observability.ErrorInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

