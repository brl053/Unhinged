//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: observability.proto

package unhinged.observability;

@kotlin.jvm.JvmName("-initializetraceFlags")
public inline fun traceFlags(block: unhinged.observability.TraceFlagsKt.Dsl.() -> kotlin.Unit): unhinged.observability.TraceFlags =
  unhinged.observability.TraceFlagsKt.Dsl._create(unhinged.observability.TraceFlags.newBuilder()).apply { block() }._build()
public object TraceFlagsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.observability.TraceFlags.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.observability.TraceFlags.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.observability.TraceFlags = _builder.build()

    /**
     * <pre>
     * Whether trace is sampled
     * </pre>
     *
     * <code>bool sampled = 1;</code>
     */
    public var sampled: kotlin.Boolean
      @JvmName("getSampled")
      get() = _builder.getSampled()
      @JvmName("setSampled")
      set(value) {
        _builder.setSampled(value)
      }
    /**
     * <pre>
     * Whether trace is sampled
     * </pre>
     *
     * <code>bool sampled = 1;</code>
     */
    public fun clearSampled() {
      _builder.clearSampled()
    }

    /**
     * <pre>
     * Whether trace ID is random
     * </pre>
     *
     * <code>bool random_trace_id = 2;</code>
     */
    public var randomTraceId: kotlin.Boolean
      @JvmName("getRandomTraceId")
      get() = _builder.getRandomTraceId()
      @JvmName("setRandomTraceId")
      set(value) {
        _builder.setRandomTraceId(value)
      }
    /**
     * <pre>
     * Whether trace ID is random
     * </pre>
     *
     * <code>bool random_trace_id = 2;</code>
     */
    public fun clearRandomTraceId() {
      _builder.clearRandomTraceId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.observability.TraceFlags.copy(block: unhinged.observability.TraceFlagsKt.Dsl.() -> kotlin.Unit): unhinged.observability.TraceFlags =
  unhinged.observability.TraceFlagsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

