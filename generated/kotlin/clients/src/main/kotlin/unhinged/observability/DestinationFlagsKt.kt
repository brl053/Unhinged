//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: observability.proto

package unhinged.observability;

@kotlin.jvm.JvmName("-initializedestinationFlags")
public inline fun destinationFlags(block: unhinged.observability.DestinationFlagsKt.Dsl.() -> kotlin.Unit): unhinged.observability.DestinationFlags =
  unhinged.observability.DestinationFlagsKt.Dsl._create(unhinged.observability.DestinationFlags.newBuilder()).apply { block() }._build()
public object DestinationFlagsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.observability.DestinationFlags.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.observability.DestinationFlags.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.observability.DestinationFlags = _builder.build()

    /**
     * <pre>
     * Output to console (C flag)
     * </pre>
     *
     * <code>bool console = 1;</code>
     */
    public var console: kotlin.Boolean
      @JvmName("getConsole")
      get() = _builder.getConsole()
      @JvmName("setConsole")
      set(value) {
        _builder.setConsole(value)
      }
    /**
     * <pre>
     * Output to console (C flag)
     * </pre>
     *
     * <code>bool console = 1;</code>
     */
    public fun clearConsole() {
      _builder.clearConsole()
    }

    /**
     * <pre>
     * Persist to CDC stream (D flag)
     * </pre>
     *
     * <code>bool cdc_stream = 2;</code>
     */
    public var cdcStream: kotlin.Boolean
      @JvmName("getCdcStream")
      get() = _builder.getCdcStream()
      @JvmName("setCdcStream")
      set(value) {
        _builder.setCdcStream(value)
      }
    /**
     * <pre>
     * Persist to CDC stream (D flag)
     * </pre>
     *
     * <code>bool cdc_stream = 2;</code>
     */
    public fun clearCdcStream() {
      _builder.clearCdcStream()
    }

    /**
     * <pre>
     * Send to data lake (L flag)
     * </pre>
     *
     * <code>bool data_lake = 3;</code>
     */
    public var dataLake: kotlin.Boolean
      @JvmName("getDataLake")
      get() = _builder.getDataLake()
      @JvmName("setDataLake")
      set(value) {
        _builder.setDataLake(value)
      }
    /**
     * <pre>
     * Send to data lake (L flag)
     * </pre>
     *
     * <code>bool data_lake = 3;</code>
     */
    public fun clearDataLake() {
      _builder.clearDataLake()
    }

    /**
     * <pre>
     * Data lake specific options
     * </pre>
     *
     * <code>.unhinged.observability.v1.DataLakeOptions data_lake_options = 10;</code>
     */
    public var dataLakeOptions: unhinged.observability.DataLakeOptions
      @JvmName("getDataLakeOptions")
      get() = _builder.getDataLakeOptions()
      @JvmName("setDataLakeOptions")
      set(value) {
        _builder.setDataLakeOptions(value)
      }
    /**
     * <pre>
     * Data lake specific options
     * </pre>
     *
     * <code>.unhinged.observability.v1.DataLakeOptions data_lake_options = 10;</code>
     */
    public fun clearDataLakeOptions() {
      _builder.clearDataLakeOptions()
    }
    /**
     * <pre>
     * Data lake specific options
     * </pre>
     *
     * <code>.unhinged.observability.v1.DataLakeOptions data_lake_options = 10;</code>
     * @return Whether the dataLakeOptions field is set.
     */
    public fun hasDataLakeOptions(): kotlin.Boolean {
      return _builder.hasDataLakeOptions()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.observability.DestinationFlags.copy(block: unhinged.observability.DestinationFlagsKt.Dsl.() -> kotlin.Unit): unhinged.observability.DestinationFlags =
  unhinged.observability.DestinationFlagsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.observability.DestinationFlagsOrBuilder.dataLakeOptionsOrNull: unhinged.observability.DataLakeOptions?
  get() = if (hasDataLakeOptions()) getDataLakeOptions() else null

