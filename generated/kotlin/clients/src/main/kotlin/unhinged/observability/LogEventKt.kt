//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: observability.proto

package unhinged.observability;

@kotlin.jvm.JvmName("-initializelogEvent")
public inline fun logEvent(block: unhinged.observability.LogEventKt.Dsl.() -> kotlin.Unit): unhinged.observability.LogEvent =
  unhinged.observability.LogEventKt.Dsl._create(unhinged.observability.LogEvent.newBuilder()).apply { block() }._build()
public object LogEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.observability.LogEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.observability.LogEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.observability.LogEvent = _builder.build()

    /**
     * <pre>
     * Standard CDC event fields
     * </pre>
     *
     * <code>string event_id = 1;</code>
     */
    public var eventId: kotlin.String
      @JvmName("getEventId")
      get() = _builder.getEventId()
      @JvmName("setEventId")
      set(value) {
        _builder.setEventId(value)
      }
    /**
     * <pre>
     * Standard CDC event fields
     * </pre>
     *
     * <code>string event_id = 1;</code>
     */
    public fun clearEventId() {
      _builder.clearEventId()
    }

    /**
     * <pre>
     * Event timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 2;</code>
     */
    public var timestamp: com.google.protobuf.Timestamp
      @JvmName("getTimestamp")
      get() = _builder.getTimestamp()
      @JvmName("setTimestamp")
      set(value) {
        _builder.setTimestamp(value)
      }
    /**
     * <pre>
     * Event timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 2;</code>
     */
    public fun clearTimestamp() {
      _builder.clearTimestamp()
    }
    /**
     * <pre>
     * Event timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 2;</code>
     * @return Whether the timestamp field is set.
     */
    public fun hasTimestamp(): kotlin.Boolean {
      return _builder.hasTimestamp()
    }

    /**
     * <pre>
     * Always "log_entry"
     * </pre>
     *
     * <code>string event_type = 3;</code>
     */
    public var eventType: kotlin.String
      @JvmName("getEventType")
      get() = _builder.getEventType()
      @JvmName("setEventType")
      set(value) {
        _builder.setEventType(value)
      }
    /**
     * <pre>
     * Always "log_entry"
     * </pre>
     *
     * <code>string event_type = 3;</code>
     */
    public fun clearEventType() {
      _builder.clearEventType()
    }

    /**
     * <pre>
     * CDC sequence for ordering
     * </pre>
     *
     * <code>int64 sequence_number = 4;</code>
     */
    public var sequenceNumber: kotlin.Long
      @JvmName("getSequenceNumber")
      get() = _builder.getSequenceNumber()
      @JvmName("setSequenceNumber")
      set(value) {
        _builder.setSequenceNumber(value)
      }
    /**
     * <pre>
     * CDC sequence for ordering
     * </pre>
     *
     * <code>int64 sequence_number = 4;</code>
     */
    public fun clearSequenceNumber() {
      _builder.clearSequenceNumber()
    }

    /**
     * <pre>
     * OpenTelemetry context
     * </pre>
     *
     * <code>.unhinged.observability.v1.TraceContext trace_context = 5;</code>
     */
    public var traceContext: unhinged.observability.TraceContext
      @JvmName("getTraceContext")
      get() = _builder.getTraceContext()
      @JvmName("setTraceContext")
      set(value) {
        _builder.setTraceContext(value)
      }
    /**
     * <pre>
     * OpenTelemetry context
     * </pre>
     *
     * <code>.unhinged.observability.v1.TraceContext trace_context = 5;</code>
     */
    public fun clearTraceContext() {
      _builder.clearTraceContext()
    }
    /**
     * <pre>
     * OpenTelemetry context
     * </pre>
     *
     * <code>.unhinged.observability.v1.TraceContext trace_context = 5;</code>
     * @return Whether the traceContext field is set.
     */
    public fun hasTraceContext(): kotlin.Boolean {
      return _builder.hasTraceContext()
    }

    /**
     * <code>.unhinged.observability.v1.Resource resource = 6;</code>
     */
    public var resource: unhinged.observability.Resource
      @JvmName("getResource")
      get() = _builder.getResource()
      @JvmName("setResource")
      set(value) {
        _builder.setResource(value)
      }
    /**
     * <code>.unhinged.observability.v1.Resource resource = 6;</code>
     */
    public fun clearResource() {
      _builder.clearResource()
    }
    /**
     * <code>.unhinged.observability.v1.Resource resource = 6;</code>
     * @return Whether the resource field is set.
     */
    public fun hasResource(): kotlin.Boolean {
      return _builder.hasResource()
    }

    /**
     * <pre>
     * Log entry data
     * </pre>
     *
     * <code>.unhinged.observability.v1.LogLevel level = 10;</code>
     */
    public var level: unhinged.observability.LogLevel
      @JvmName("getLevel")
      get() = _builder.getLevel()
      @JvmName("setLevel")
      set(value) {
        _builder.setLevel(value)
      }
    /**
     * <pre>
     * Log entry data
     * </pre>
     *
     * <code>.unhinged.observability.v1.LogLevel level = 10;</code>
     */
    public fun clearLevel() {
      _builder.clearLevel()
    }

    /**
     * <pre>
     * Log message
     * </pre>
     *
     * <code>string message = 11;</code>
     */
    public var message: kotlin.String
      @JvmName("getMessage")
      get() = _builder.getMessage()
      @JvmName("setMessage")
      set(value) {
        _builder.setMessage(value)
      }
    /**
     * <pre>
     * Log message
     * </pre>
     *
     * <code>string message = 11;</code>
     */
    public fun clearMessage() {
      _builder.clearMessage()
    }

    /**
     * <pre>
     * Structured metadata
     * </pre>
     *
     * <code>.google.protobuf.Struct metadata = 12;</code>
     */
    public var metadata: com.google.protobuf.Struct
      @JvmName("getMetadata")
      get() = _builder.getMetadata()
      @JvmName("setMetadata")
      set(value) {
        _builder.setMetadata(value)
      }
    /**
     * <pre>
     * Structured metadata
     * </pre>
     *
     * <code>.google.protobuf.Struct metadata = 12;</code>
     */
    public fun clearMetadata() {
      _builder.clearMetadata()
    }
    /**
     * <pre>
     * Structured metadata
     * </pre>
     *
     * <code>.google.protobuf.Struct metadata = 12;</code>
     * @return Whether the metadata field is set.
     */
    public fun hasMetadata(): kotlin.Boolean {
      return _builder.hasMetadata()
    }

    /**
     * <pre>
     * Error information (if applicable)
     * </pre>
     *
     * <code>.unhinged.observability.v1.ErrorInfo error = 15;</code>
     */
    public var error: unhinged.observability.ErrorInfo
      @JvmName("getError")
      get() = _builder.getError()
      @JvmName("setError")
      set(value) {
        _builder.setError(value)
      }
    /**
     * <pre>
     * Error information (if applicable)
     * </pre>
     *
     * <code>.unhinged.observability.v1.ErrorInfo error = 15;</code>
     */
    public fun clearError() {
      _builder.clearError()
    }
    /**
     * <pre>
     * Error information (if applicable)
     * </pre>
     *
     * <code>.unhinged.observability.v1.ErrorInfo error = 15;</code>
     * @return Whether the error field is set.
     */
    public fun hasError(): kotlin.Boolean {
      return _builder.hasError()
    }

    /**
     * <pre>
     * Destination flags for dual persistence
     * </pre>
     *
     * <code>.unhinged.observability.v1.DestinationFlags destinations = 20;</code>
     */
    public var destinations: unhinged.observability.DestinationFlags
      @JvmName("getDestinations")
      get() = _builder.getDestinations()
      @JvmName("setDestinations")
      set(value) {
        _builder.setDestinations(value)
      }
    /**
     * <pre>
     * Destination flags for dual persistence
     * </pre>
     *
     * <code>.unhinged.observability.v1.DestinationFlags destinations = 20;</code>
     */
    public fun clearDestinations() {
      _builder.clearDestinations()
    }
    /**
     * <pre>
     * Destination flags for dual persistence
     * </pre>
     *
     * <code>.unhinged.observability.v1.DestinationFlags destinations = 20;</code>
     * @return Whether the destinations field is set.
     */
    public fun hasDestinations(): kotlin.Boolean {
      return _builder.hasDestinations()
    }

    /**
     * <pre>
     * Data lake partitioning hints
     * </pre>
     *
     * <code>.unhinged.observability.v1.PartitionInfo partition_info = 25;</code>
     */
    public var partitionInfo: unhinged.observability.PartitionInfo
      @JvmName("getPartitionInfo")
      get() = _builder.getPartitionInfo()
      @JvmName("setPartitionInfo")
      set(value) {
        _builder.setPartitionInfo(value)
      }
    /**
     * <pre>
     * Data lake partitioning hints
     * </pre>
     *
     * <code>.unhinged.observability.v1.PartitionInfo partition_info = 25;</code>
     */
    public fun clearPartitionInfo() {
      _builder.clearPartitionInfo()
    }
    /**
     * <pre>
     * Data lake partitioning hints
     * </pre>
     *
     * <code>.unhinged.observability.v1.PartitionInfo partition_info = 25;</code>
     * @return Whether the partitionInfo field is set.
     */
    public fun hasPartitionInfo(): kotlin.Boolean {
      return _builder.hasPartitionInfo()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.observability.LogEvent.copy(block: unhinged.observability.LogEventKt.Dsl.() -> kotlin.Unit): unhinged.observability.LogEvent =
  unhinged.observability.LogEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.observability.LogEventOrBuilder.timestampOrNull: com.google.protobuf.Timestamp?
  get() = if (hasTimestamp()) getTimestamp() else null

public val unhinged.observability.LogEventOrBuilder.traceContextOrNull: unhinged.observability.TraceContext?
  get() = if (hasTraceContext()) getTraceContext() else null

public val unhinged.observability.LogEventOrBuilder.resourceOrNull: unhinged.observability.Resource?
  get() = if (hasResource()) getResource() else null

public val unhinged.observability.LogEventOrBuilder.metadataOrNull: com.google.protobuf.Struct?
  get() = if (hasMetadata()) getMetadata() else null

public val unhinged.observability.LogEventOrBuilder.errorOrNull: unhinged.observability.ErrorInfo?
  get() = if (hasError()) getError() else null

public val unhinged.observability.LogEventOrBuilder.destinationsOrNull: unhinged.observability.DestinationFlags?
  get() = if (hasDestinations()) getDestinations() else null

public val unhinged.observability.LogEventOrBuilder.partitionInfoOrNull: unhinged.observability.PartitionInfo?
  get() = if (hasPartitionInfo()) getPartitionInfo() else null

