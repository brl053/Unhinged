//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: observability.proto

package unhinged.observability;

@kotlin.jvm.JvmName("-initializedataLakeOptions")
public inline fun dataLakeOptions(block: unhinged.observability.DataLakeOptionsKt.Dsl.() -> kotlin.Unit): unhinged.observability.DataLakeOptions =
  unhinged.observability.DataLakeOptionsKt.Dsl._create(unhinged.observability.DataLakeOptions.newBuilder()).apply { block() }._build()
public object DataLakeOptionsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.observability.DataLakeOptions.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.observability.DataLakeOptions.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.observability.DataLakeOptions = _builder.build()

    /**
     * <pre>
     * Target table/dataset
     * </pre>
     *
     * <code>string table_name = 1;</code>
     */
    public var tableName: kotlin.String
      @JvmName("getTableName")
      get() = _builder.getTableName()
      @JvmName("setTableName")
      set(value) {
        _builder.setTableName(value)
      }
    /**
     * <pre>
     * Target table/dataset
     * </pre>
     *
     * <code>string table_name = 1;</code>
     */
    public fun clearTableName() {
      _builder.clearTableName()
    }

    /**
     * <pre>
     * Partitioning strategy
     * </pre>
     *
     * <code>string partition_strategy = 2;</code>
     */
    public var partitionStrategy: kotlin.String
      @JvmName("getPartitionStrategy")
      get() = _builder.getPartitionStrategy()
      @JvmName("setPartitionStrategy")
      set(value) {
        _builder.setPartitionStrategy(value)
      }
    /**
     * <pre>
     * Partitioning strategy
     * </pre>
     *
     * <code>string partition_strategy = 2;</code>
     */
    public fun clearPartitionStrategy() {
      _builder.clearPartitionStrategy()
    }

    /**
     * <pre>
     * Batching configuration
     * </pre>
     *
     * <code>int32 batch_size = 3;</code>
     */
    public var batchSize: kotlin.Int
      @JvmName("getBatchSize")
      get() = _builder.getBatchSize()
      @JvmName("setBatchSize")
      set(value) {
        _builder.setBatchSize(value)
      }
    /**
     * <pre>
     * Batching configuration
     * </pre>
     *
     * <code>int32 batch_size = 3;</code>
     */
    public fun clearBatchSize() {
      _builder.clearBatchSize()
    }

    /**
     * <pre>
     * Flush interval
     * </pre>
     *
     * <code>int32 flush_interval_seconds = 4;</code>
     */
    public var flushIntervalSeconds: kotlin.Int
      @JvmName("getFlushIntervalSeconds")
      get() = _builder.getFlushIntervalSeconds()
      @JvmName("setFlushIntervalSeconds")
      set(value) {
        _builder.setFlushIntervalSeconds(value)
      }
    /**
     * <pre>
     * Flush interval
     * </pre>
     *
     * <code>int32 flush_interval_seconds = 4;</code>
     */
    public fun clearFlushIntervalSeconds() {
      _builder.clearFlushIntervalSeconds()
    }

    /**
     * <pre>
     * Compression type
     * </pre>
     *
     * <code>.unhinged.observability.v1.CompressionType compression = 5;</code>
     */
    public var compression: unhinged.observability.CompressionType
      @JvmName("getCompression")
      get() = _builder.getCompression()
      @JvmName("setCompression")
      set(value) {
        _builder.setCompression(value)
      }
    /**
     * <pre>
     * Compression type
     * </pre>
     *
     * <code>.unhinged.observability.v1.CompressionType compression = 5;</code>
     */
    public fun clearCompression() {
      _builder.clearCompression()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.observability.DataLakeOptions.copy(block: unhinged.observability.DataLakeOptionsKt.Dsl.() -> kotlin.Unit): unhinged.observability.DataLakeOptions =
  unhinged.observability.DataLakeOptionsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

