//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: observability.proto

package unhinged.observability;

@kotlin.jvm.JvmName("-initializetraceContext")
public inline fun traceContext(block: unhinged.observability.TraceContextKt.Dsl.() -> kotlin.Unit): unhinged.observability.TraceContext =
  unhinged.observability.TraceContextKt.Dsl._create(unhinged.observability.TraceContext.newBuilder()).apply { block() }._build()
public object TraceContextKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.observability.TraceContext.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.observability.TraceContext.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.observability.TraceContext = _builder.build()

    /**
     * <pre>
     * OpenTelemetry trace ID (32 hex chars)
     * </pre>
     *
     * <code>string trace_id = 1;</code>
     */
    public var traceId: kotlin.String
      @JvmName("getTraceId")
      get() = _builder.getTraceId()
      @JvmName("setTraceId")
      set(value) {
        _builder.setTraceId(value)
      }
    /**
     * <pre>
     * OpenTelemetry trace ID (32 hex chars)
     * </pre>
     *
     * <code>string trace_id = 1;</code>
     */
    public fun clearTraceId() {
      _builder.clearTraceId()
    }

    /**
     * <pre>
     * OpenTelemetry span ID (16 hex chars)
     * </pre>
     *
     * <code>string span_id = 2;</code>
     */
    public var spanId: kotlin.String
      @JvmName("getSpanId")
      get() = _builder.getSpanId()
      @JvmName("setSpanId")
      set(value) {
        _builder.setSpanId(value)
      }
    /**
     * <pre>
     * OpenTelemetry span ID (16 hex chars)
     * </pre>
     *
     * <code>string span_id = 2;</code>
     */
    public fun clearSpanId() {
      _builder.clearSpanId()
    }

    /**
     * <pre>
     * Parent span ID for hierarchy
     * </pre>
     *
     * <code>string parent_span_id = 3;</code>
     */
    public var parentSpanId: kotlin.String
      @JvmName("getParentSpanId")
      get() = _builder.getParentSpanId()
      @JvmName("setParentSpanId")
      set(value) {
        _builder.setParentSpanId(value)
      }
    /**
     * <pre>
     * Parent span ID for hierarchy
     * </pre>
     *
     * <code>string parent_span_id = 3;</code>
     */
    public fun clearParentSpanId() {
      _builder.clearParentSpanId()
    }

    /**
     * <pre>
     * Trace flags (sampled, etc.)
     * </pre>
     *
     * <code>.unhinged.observability.v1.TraceFlags trace_flags = 4;</code>
     */
    public var traceFlags: unhinged.observability.TraceFlags
      @JvmName("getTraceFlags")
      get() = _builder.getTraceFlags()
      @JvmName("setTraceFlags")
      set(value) {
        _builder.setTraceFlags(value)
      }
    /**
     * <pre>
     * Trace flags (sampled, etc.)
     * </pre>
     *
     * <code>.unhinged.observability.v1.TraceFlags trace_flags = 4;</code>
     */
    public fun clearTraceFlags() {
      _builder.clearTraceFlags()
    }
    /**
     * <pre>
     * Trace flags (sampled, etc.)
     * </pre>
     *
     * <code>.unhinged.observability.v1.TraceFlags trace_flags = 4;</code>
     * @return Whether the traceFlags field is set.
     */
    public fun hasTraceFlags(): kotlin.Boolean {
      return _builder.hasTraceFlags()
    }

    /**
     * <pre>
     * W3C trace state for vendor data
     * </pre>
     *
     * <code>string trace_state = 5;</code>
     */
    public var traceState: kotlin.String
      @JvmName("getTraceState")
      get() = _builder.getTraceState()
      @JvmName("setTraceState")
      set(value) {
        _builder.setTraceState(value)
      }
    /**
     * <pre>
     * W3C trace state for vendor data
     * </pre>
     *
     * <code>string trace_state = 5;</code>
     */
    public fun clearTraceState() {
      _builder.clearTraceState()
    }

    /**
     * <pre>
     * Additional context for correlation
     * </pre>
     *
     * <code>string correlation_id = 10;</code>
     */
    public var correlationId: kotlin.String
      @JvmName("getCorrelationId")
      get() = _builder.getCorrelationId()
      @JvmName("setCorrelationId")
      set(value) {
        _builder.setCorrelationId(value)
      }
    /**
     * <pre>
     * Additional context for correlation
     * </pre>
     *
     * <code>string correlation_id = 10;</code>
     */
    public fun clearCorrelationId() {
      _builder.clearCorrelationId()
    }

    /**
     * <pre>
     * Request-specific ID
     * </pre>
     *
     * <code>string request_id = 11;</code>
     */
    public var requestId: kotlin.String
      @JvmName("getRequestId")
      get() = _builder.getRequestId()
      @JvmName("setRequestId")
      set(value) {
        _builder.setRequestId(value)
      }
    /**
     * <pre>
     * Request-specific ID
     * </pre>
     *
     * <code>string request_id = 11;</code>
     */
    public fun clearRequestId() {
      _builder.clearRequestId()
    }

    /**
     * <pre>
     * User session ID
     * </pre>
     *
     * <code>string session_id = 12;</code>
     */
    public var sessionId: kotlin.String
      @JvmName("getSessionId")
      get() = _builder.getSessionId()
      @JvmName("setSessionId")
      set(value) {
        _builder.setSessionId(value)
      }
    /**
     * <pre>
     * User session ID
     * </pre>
     *
     * <code>string session_id = 12;</code>
     */
    public fun clearSessionId() {
      _builder.clearSessionId()
    }

    /**
     * <pre>
     * User identifier
     * </pre>
     *
     * <code>string user_id = 13;</code>
     */
    public var userId: kotlin.String
      @JvmName("getUserId")
      get() = _builder.getUserId()
      @JvmName("setUserId")
      set(value) {
        _builder.setUserId(value)
      }
    /**
     * <pre>
     * User identifier
     * </pre>
     *
     * <code>string user_id = 13;</code>
     */
    public fun clearUserId() {
      _builder.clearUserId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.observability.TraceContext.copy(block: unhinged.observability.TraceContextKt.Dsl.() -> kotlin.Unit): unhinged.observability.TraceContext =
  unhinged.observability.TraceContextKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.observability.TraceContextOrBuilder.traceFlagsOrNull: unhinged.observability.TraceFlags?
  get() = if (hasTraceFlags()) getTraceFlags() else null

