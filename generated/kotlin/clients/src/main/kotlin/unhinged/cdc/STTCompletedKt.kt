//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cdc_events.proto

package unhinged.cdc;

@kotlin.jvm.JvmName("-initializesTTCompleted")
public inline fun sTTCompleted(block: unhinged.cdc.STTCompletedKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.STTCompleted =
  unhinged.cdc.STTCompletedKt.Dsl._create(unhinged.cdc.CdcEvents.STTCompleted.newBuilder()).apply { block() }._build()
public object STTCompletedKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.cdc.CdcEvents.STTCompleted.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.cdc.CdcEvents.STTCompleted.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.cdc.CdcEvents.STTCompleted = _builder.build()

    /**
     * <code>string transcript = 1;</code>
     */
    public var transcript: kotlin.String
      @JvmName("getTranscript")
      get() = _builder.getTranscript()
      @JvmName("setTranscript")
      set(value) {
        _builder.setTranscript(value)
      }
    /**
     * <code>string transcript = 1;</code>
     */
    public fun clearTranscript() {
      _builder.clearTranscript()
    }

    /**
     * <code>float confidence = 2;</code>
     */
    public var confidence: kotlin.Float
      @JvmName("getConfidence")
      get() = _builder.getConfidence()
      @JvmName("setConfidence")
      set(value) {
        _builder.setConfidence(value)
      }
    /**
     * <code>float confidence = 2;</code>
     */
    public fun clearConfidence() {
      _builder.clearConfidence()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.cdc.CdcEvents.STTCompleted.copy(block: unhinged.cdc.STTCompletedKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.STTCompleted =
  unhinged.cdc.STTCompletedKt.Dsl._create(this.toBuilder()).apply { block() }._build()

