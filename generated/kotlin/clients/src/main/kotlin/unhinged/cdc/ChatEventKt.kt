//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cdc_events.proto

package unhinged.cdc;

@kotlin.jvm.JvmName("-initializechatEvent")
public inline fun chatEvent(block: unhinged.cdc.ChatEventKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.ChatEvent =
  unhinged.cdc.ChatEventKt.Dsl._create(unhinged.cdc.CdcEvents.ChatEvent.newBuilder()).apply { block() }._build()
public object ChatEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.cdc.CdcEvents.ChatEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.cdc.CdcEvents.ChatEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.cdc.CdcEvents.ChatEvent = _builder.build()

    /**
     * <code>string conversation_id = 1;</code>
     */
    public var conversationId: kotlin.String
      @JvmName("getConversationId")
      get() = _builder.getConversationId()
      @JvmName("setConversationId")
      set(value) {
        _builder.setConversationId(value)
      }
    /**
     * <code>string conversation_id = 1;</code>
     */
    public fun clearConversationId() {
      _builder.clearConversationId()
    }

    /**
     * <code>string message_id = 2;</code>
     */
    public var messageId: kotlin.String
      @JvmName("getMessageId")
      get() = _builder.getMessageId()
      @JvmName("setMessageId")
      set(value) {
        _builder.setMessageId(value)
      }
    /**
     * <code>string message_id = 2;</code>
     */
    public fun clearMessageId() {
      _builder.clearMessageId()
    }

    /**
     * <code>.unhinged.cdc.ChatEventType event_type = 3;</code>
     */
    public var eventType: unhinged.cdc.CdcEvents.ChatEventType
      @JvmName("getEventType")
      get() = _builder.getEventType()
      @JvmName("setEventType")
      set(value) {
        _builder.setEventType(value)
      }
    /**
     * <code>.unhinged.cdc.ChatEventType event_type = 3;</code>
     */
    public fun clearEventType() {
      _builder.clearEventType()
    }

    /**
     * <code>.unhinged.cdc.ConversationCreated conversation_created = 10;</code>
     */
    public var conversationCreated: unhinged.cdc.CdcEvents.ConversationCreated
      @JvmName("getConversationCreated")
      get() = _builder.getConversationCreated()
      @JvmName("setConversationCreated")
      set(value) {
        _builder.setConversationCreated(value)
      }
    /**
     * <code>.unhinged.cdc.ConversationCreated conversation_created = 10;</code>
     */
    public fun clearConversationCreated() {
      _builder.clearConversationCreated()
    }
    /**
     * <code>.unhinged.cdc.ConversationCreated conversation_created = 10;</code>
     * @return Whether the conversationCreated field is set.
     */
    public fun hasConversationCreated(): kotlin.Boolean {
      return _builder.hasConversationCreated()
    }

    /**
     * <code>.unhinged.cdc.MessageSent message_sent = 11;</code>
     */
    public var messageSent: unhinged.cdc.CdcEvents.MessageSent
      @JvmName("getMessageSent")
      get() = _builder.getMessageSent()
      @JvmName("setMessageSent")
      set(value) {
        _builder.setMessageSent(value)
      }
    /**
     * <code>.unhinged.cdc.MessageSent message_sent = 11;</code>
     */
    public fun clearMessageSent() {
      _builder.clearMessageSent()
    }
    /**
     * <code>.unhinged.cdc.MessageSent message_sent = 11;</code>
     * @return Whether the messageSent field is set.
     */
    public fun hasMessageSent(): kotlin.Boolean {
      return _builder.hasMessageSent()
    }

    /**
     * <code>.unhinged.cdc.MessageUpdated message_updated = 12;</code>
     */
    public var messageUpdated: unhinged.cdc.CdcEvents.MessageUpdated
      @JvmName("getMessageUpdated")
      get() = _builder.getMessageUpdated()
      @JvmName("setMessageUpdated")
      set(value) {
        _builder.setMessageUpdated(value)
      }
    /**
     * <code>.unhinged.cdc.MessageUpdated message_updated = 12;</code>
     */
    public fun clearMessageUpdated() {
      _builder.clearMessageUpdated()
    }
    /**
     * <code>.unhinged.cdc.MessageUpdated message_updated = 12;</code>
     * @return Whether the messageUpdated field is set.
     */
    public fun hasMessageUpdated(): kotlin.Boolean {
      return _builder.hasMessageUpdated()
    }

    /**
     * <code>.unhinged.cdc.TypingStarted typing_started = 13;</code>
     */
    public var typingStarted: unhinged.cdc.CdcEvents.TypingStarted
      @JvmName("getTypingStarted")
      get() = _builder.getTypingStarted()
      @JvmName("setTypingStarted")
      set(value) {
        _builder.setTypingStarted(value)
      }
    /**
     * <code>.unhinged.cdc.TypingStarted typing_started = 13;</code>
     */
    public fun clearTypingStarted() {
      _builder.clearTypingStarted()
    }
    /**
     * <code>.unhinged.cdc.TypingStarted typing_started = 13;</code>
     * @return Whether the typingStarted field is set.
     */
    public fun hasTypingStarted(): kotlin.Boolean {
      return _builder.hasTypingStarted()
    }

    /**
     * <code>.unhinged.cdc.ParticipantJoined participant_joined = 14;</code>
     */
    public var participantJoined: unhinged.cdc.CdcEvents.ParticipantJoined
      @JvmName("getParticipantJoined")
      get() = _builder.getParticipantJoined()
      @JvmName("setParticipantJoined")
      set(value) {
        _builder.setParticipantJoined(value)
      }
    /**
     * <code>.unhinged.cdc.ParticipantJoined participant_joined = 14;</code>
     */
    public fun clearParticipantJoined() {
      _builder.clearParticipantJoined()
    }
    /**
     * <code>.unhinged.cdc.ParticipantJoined participant_joined = 14;</code>
     * @return Whether the participantJoined field is set.
     */
    public fun hasParticipantJoined(): kotlin.Boolean {
      return _builder.hasParticipantJoined()
    }
    public val eventDataCase: unhinged.cdc.CdcEvents.ChatEvent.EventDataCase
      @JvmName("getEventDataCase")
      get() = _builder.getEventDataCase()

    public fun clearEventData() {
      _builder.clearEventData()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.cdc.CdcEvents.ChatEvent.copy(block: unhinged.cdc.ChatEventKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.ChatEvent =
  unhinged.cdc.ChatEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.cdc.CdcEvents.ChatEventOrBuilder.conversationCreatedOrNull: unhinged.cdc.CdcEvents.ConversationCreated?
  get() = if (hasConversationCreated()) getConversationCreated() else null

public val unhinged.cdc.CdcEvents.ChatEventOrBuilder.messageSentOrNull: unhinged.cdc.CdcEvents.MessageSent?
  get() = if (hasMessageSent()) getMessageSent() else null

public val unhinged.cdc.CdcEvents.ChatEventOrBuilder.messageUpdatedOrNull: unhinged.cdc.CdcEvents.MessageUpdated?
  get() = if (hasMessageUpdated()) getMessageUpdated() else null

public val unhinged.cdc.CdcEvents.ChatEventOrBuilder.typingStartedOrNull: unhinged.cdc.CdcEvents.TypingStarted?
  get() = if (hasTypingStarted()) getTypingStarted() else null

public val unhinged.cdc.CdcEvents.ChatEventOrBuilder.participantJoinedOrNull: unhinged.cdc.CdcEvents.ParticipantJoined?
  get() = if (hasParticipantJoined()) getParticipantJoined() else null

