//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cdc_service.proto

package unhinged.cdc;

@kotlin.jvm.JvmName("-initializereplayEventsRequest")
public inline fun replayEventsRequest(block: unhinged.cdc.ReplayEventsRequestKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcService.ReplayEventsRequest =
  unhinged.cdc.ReplayEventsRequestKt.Dsl._create(unhinged.cdc.CdcService.ReplayEventsRequest.newBuilder()).apply { block() }._build()
public object ReplayEventsRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.cdc.CdcService.ReplayEventsRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.cdc.CdcService.ReplayEventsRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.cdc.CdcService.ReplayEventsRequest = _builder.build()

    /**
     * <code>string subscriber_id = 1;</code>
     */
    public var subscriberId: kotlin.String
      @JvmName("getSubscriberId")
      get() = _builder.getSubscriberId()
      @JvmName("setSubscriberId")
      set(value) {
        _builder.setSubscriberId(value)
      }
    /**
     * <code>string subscriber_id = 1;</code>
     */
    public fun clearSubscriberId() {
      _builder.clearSubscriberId()
    }

    /**
     * <code>.unhinged.cdc.TimeRange time_range = 2;</code>
     */
    public var timeRange: unhinged.cdc.CdcService.TimeRange
      @JvmName("getTimeRange")
      get() = _builder.getTimeRange()
      @JvmName("setTimeRange")
      set(value) {
        _builder.setTimeRange(value)
      }
    /**
     * <code>.unhinged.cdc.TimeRange time_range = 2;</code>
     */
    public fun clearTimeRange() {
      _builder.clearTimeRange()
    }
    /**
     * <code>.unhinged.cdc.TimeRange time_range = 2;</code>
     * @return Whether the timeRange field is set.
     */
    public fun hasTimeRange(): kotlin.Boolean {
      return _builder.hasTimeRange()
    }

    /**
     * <code>.unhinged.cdc.SequenceRange sequence_range = 3;</code>
     */
    public var sequenceRange: unhinged.cdc.CdcService.SequenceRange
      @JvmName("getSequenceRange")
      get() = _builder.getSequenceRange()
      @JvmName("setSequenceRange")
      set(value) {
        _builder.setSequenceRange(value)
      }
    /**
     * <code>.unhinged.cdc.SequenceRange sequence_range = 3;</code>
     */
    public fun clearSequenceRange() {
      _builder.clearSequenceRange()
    }
    /**
     * <code>.unhinged.cdc.SequenceRange sequence_range = 3;</code>
     * @return Whether the sequenceRange field is set.
     */
    public fun hasSequenceRange(): kotlin.Boolean {
      return _builder.hasSequenceRange()
    }

    /**
     * <code>string checkpoint_token = 4;</code>
     */
    public var checkpointToken: kotlin.String
      @JvmName("getCheckpointToken")
      get() = _builder.getCheckpointToken()
      @JvmName("setCheckpointToken")
      set(value) {
        _builder.setCheckpointToken(value)
      }
    /**
     * <code>string checkpoint_token = 4;</code>
     */
    public fun clearCheckpointToken() {
      _builder.clearCheckpointToken()
    }
    /**
     * <code>string checkpoint_token = 4;</code>
     * @return Whether the checkpointToken field is set.
     */
    public fun hasCheckpointToken(): kotlin.Boolean {
      return _builder.hasCheckpointToken()
    }

    /**
     * <pre>
     * Replay options
     * </pre>
     *
     * <code>.unhinged.cdc.EventFilter filter = 5;</code>
     */
    public var filter: unhinged.cdc.CdcService.EventFilter
      @JvmName("getFilter")
      get() = _builder.getFilter()
      @JvmName("setFilter")
      set(value) {
        _builder.setFilter(value)
      }
    /**
     * <pre>
     * Replay options
     * </pre>
     *
     * <code>.unhinged.cdc.EventFilter filter = 5;</code>
     */
    public fun clearFilter() {
      _builder.clearFilter()
    }
    /**
     * <pre>
     * Replay options
     * </pre>
     *
     * <code>.unhinged.cdc.EventFilter filter = 5;</code>
     * @return Whether the filter field is set.
     */
    public fun hasFilter(): kotlin.Boolean {
      return _builder.hasFilter()
    }

    /**
     * <code>int32 batch_size = 6;</code>
     */
    public var batchSize: kotlin.Int
      @JvmName("getBatchSize")
      get() = _builder.getBatchSize()
      @JvmName("setBatchSize")
      set(value) {
        _builder.setBatchSize(value)
      }
    /**
     * <code>int32 batch_size = 6;</code>
     */
    public fun clearBatchSize() {
      _builder.clearBatchSize()
    }

    /**
     * <code>bool include_failed_events = 7;</code>
     */
    public var includeFailedEvents: kotlin.Boolean
      @JvmName("getIncludeFailedEvents")
      get() = _builder.getIncludeFailedEvents()
      @JvmName("setIncludeFailedEvents")
      set(value) {
        _builder.setIncludeFailedEvents(value)
      }
    /**
     * <code>bool include_failed_events = 7;</code>
     */
    public fun clearIncludeFailedEvents() {
      _builder.clearIncludeFailedEvents()
    }
    public val replayRangeCase: unhinged.cdc.CdcService.ReplayEventsRequest.ReplayRangeCase
      @JvmName("getReplayRangeCase")
      get() = _builder.getReplayRangeCase()

    public fun clearReplayRange() {
      _builder.clearReplayRange()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.cdc.CdcService.ReplayEventsRequest.copy(block: unhinged.cdc.ReplayEventsRequestKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcService.ReplayEventsRequest =
  unhinged.cdc.ReplayEventsRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.cdc.CdcService.ReplayEventsRequestOrBuilder.timeRangeOrNull: unhinged.cdc.CdcService.TimeRange?
  get() = if (hasTimeRange()) getTimeRange() else null

public val unhinged.cdc.CdcService.ReplayEventsRequestOrBuilder.sequenceRangeOrNull: unhinged.cdc.CdcService.SequenceRange?
  get() = if (hasSequenceRange()) getSequenceRange() else null

public val unhinged.cdc.CdcService.ReplayEventsRequestOrBuilder.filterOrNull: unhinged.cdc.CdcService.EventFilter?
  get() = if (hasFilter()) getFilter() else null

