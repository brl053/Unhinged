//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cdc_events.proto

package unhinged.cdc;

@kotlin.jvm.JvmName("-initializeworkflowEvent")
public inline fun workflowEvent(block: unhinged.cdc.WorkflowEventKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.WorkflowEvent =
  unhinged.cdc.WorkflowEventKt.Dsl._create(unhinged.cdc.CdcEvents.WorkflowEvent.newBuilder()).apply { block() }._build()
public object WorkflowEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.cdc.CdcEvents.WorkflowEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.cdc.CdcEvents.WorkflowEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.cdc.CdcEvents.WorkflowEvent = _builder.build()

    /**
     * <code>string workflow_id = 1;</code>
     */
    public var workflowId: kotlin.String
      @JvmName("getWorkflowId")
      get() = _builder.getWorkflowId()
      @JvmName("setWorkflowId")
      set(value) {
        _builder.setWorkflowId(value)
      }
    /**
     * <code>string workflow_id = 1;</code>
     */
    public fun clearWorkflowId() {
      _builder.clearWorkflowId()
    }

    /**
     * <code>string workflow_type = 2;</code>
     */
    public var workflowType: kotlin.String
      @JvmName("getWorkflowType")
      get() = _builder.getWorkflowType()
      @JvmName("setWorkflowType")
      set(value) {
        _builder.setWorkflowType(value)
      }
    /**
     * <code>string workflow_type = 2;</code>
     */
    public fun clearWorkflowType() {
      _builder.clearWorkflowType()
    }

    /**
     * <code>string execution_id = 3;</code>
     */
    public var executionId: kotlin.String
      @JvmName("getExecutionId")
      get() = _builder.getExecutionId()
      @JvmName("setExecutionId")
      set(value) {
        _builder.setExecutionId(value)
      }
    /**
     * <code>string execution_id = 3;</code>
     */
    public fun clearExecutionId() {
      _builder.clearExecutionId()
    }

    /**
     * <code>.unhinged.cdc.WorkflowEventType event_type = 4;</code>
     */
    public var eventType: unhinged.cdc.CdcEvents.WorkflowEventType
      @JvmName("getEventType")
      get() = _builder.getEventType()
      @JvmName("setEventType")
      set(value) {
        _builder.setEventType(value)
      }
    /**
     * <code>.unhinged.cdc.WorkflowEventType event_type = 4;</code>
     */
    public fun clearEventType() {
      _builder.clearEventType()
    }

    /**
     * <code>.unhinged.cdc.WorkflowTriggered triggered = 10;</code>
     */
    public var triggered: unhinged.cdc.CdcEvents.WorkflowTriggered
      @JvmName("getTriggered")
      get() = _builder.getTriggered()
      @JvmName("setTriggered")
      set(value) {
        _builder.setTriggered(value)
      }
    /**
     * <code>.unhinged.cdc.WorkflowTriggered triggered = 10;</code>
     */
    public fun clearTriggered() {
      _builder.clearTriggered()
    }
    /**
     * <code>.unhinged.cdc.WorkflowTriggered triggered = 10;</code>
     * @return Whether the triggered field is set.
     */
    public fun hasTriggered(): kotlin.Boolean {
      return _builder.hasTriggered()
    }

    /**
     * <code>.unhinged.cdc.WorkflowStepExecuted step_executed = 11;</code>
     */
    public var stepExecuted: unhinged.cdc.CdcEvents.WorkflowStepExecuted
      @JvmName("getStepExecuted")
      get() = _builder.getStepExecuted()
      @JvmName("setStepExecuted")
      set(value) {
        _builder.setStepExecuted(value)
      }
    /**
     * <code>.unhinged.cdc.WorkflowStepExecuted step_executed = 11;</code>
     */
    public fun clearStepExecuted() {
      _builder.clearStepExecuted()
    }
    /**
     * <code>.unhinged.cdc.WorkflowStepExecuted step_executed = 11;</code>
     * @return Whether the stepExecuted field is set.
     */
    public fun hasStepExecuted(): kotlin.Boolean {
      return _builder.hasStepExecuted()
    }

    /**
     * <code>.unhinged.cdc.WorkflowCompleted completed = 12;</code>
     */
    public var completed: unhinged.cdc.CdcEvents.WorkflowCompleted
      @JvmName("getCompleted")
      get() = _builder.getCompleted()
      @JvmName("setCompleted")
      set(value) {
        _builder.setCompleted(value)
      }
    /**
     * <code>.unhinged.cdc.WorkflowCompleted completed = 12;</code>
     */
    public fun clearCompleted() {
      _builder.clearCompleted()
    }
    /**
     * <code>.unhinged.cdc.WorkflowCompleted completed = 12;</code>
     * @return Whether the completed field is set.
     */
    public fun hasCompleted(): kotlin.Boolean {
      return _builder.hasCompleted()
    }

    /**
     * <code>.unhinged.cdc.WorkflowFailed failed = 13;</code>
     */
    public var failed: unhinged.cdc.CdcEvents.WorkflowFailed
      @JvmName("getFailed")
      get() = _builder.getFailed()
      @JvmName("setFailed")
      set(value) {
        _builder.setFailed(value)
      }
    /**
     * <code>.unhinged.cdc.WorkflowFailed failed = 13;</code>
     */
    public fun clearFailed() {
      _builder.clearFailed()
    }
    /**
     * <code>.unhinged.cdc.WorkflowFailed failed = 13;</code>
     * @return Whether the failed field is set.
     */
    public fun hasFailed(): kotlin.Boolean {
      return _builder.hasFailed()
    }
    public val eventDataCase: unhinged.cdc.CdcEvents.WorkflowEvent.EventDataCase
      @JvmName("getEventDataCase")
      get() = _builder.getEventDataCase()

    public fun clearEventData() {
      _builder.clearEventData()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.cdc.CdcEvents.WorkflowEvent.copy(block: unhinged.cdc.WorkflowEventKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.WorkflowEvent =
  unhinged.cdc.WorkflowEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.cdc.CdcEvents.WorkflowEventOrBuilder.triggeredOrNull: unhinged.cdc.CdcEvents.WorkflowTriggered?
  get() = if (hasTriggered()) getTriggered() else null

public val unhinged.cdc.CdcEvents.WorkflowEventOrBuilder.stepExecutedOrNull: unhinged.cdc.CdcEvents.WorkflowStepExecuted?
  get() = if (hasStepExecuted()) getStepExecuted() else null

public val unhinged.cdc.CdcEvents.WorkflowEventOrBuilder.completedOrNull: unhinged.cdc.CdcEvents.WorkflowCompleted?
  get() = if (hasCompleted()) getCompleted() else null

public val unhinged.cdc.CdcEvents.WorkflowEventOrBuilder.failedOrNull: unhinged.cdc.CdcEvents.WorkflowFailed?
  get() = if (hasFailed()) getFailed() else null

