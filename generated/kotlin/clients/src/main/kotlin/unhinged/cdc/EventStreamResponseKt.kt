//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cdc_service.proto

package unhinged.cdc;

@kotlin.jvm.JvmName("-initializeeventStreamResponse")
public inline fun eventStreamResponse(block: unhinged.cdc.EventStreamResponseKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcService.EventStreamResponse =
  unhinged.cdc.EventStreamResponseKt.Dsl._create(unhinged.cdc.CdcService.EventStreamResponse.newBuilder()).apply { block() }._build()
public object EventStreamResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.cdc.CdcService.EventStreamResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.cdc.CdcService.EventStreamResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.cdc.CdcService.EventStreamResponse = _builder.build()

    /**
     * <code>.unhinged.cdc.EventBatch event_batch = 1;</code>
     */
    public var eventBatch: unhinged.cdc.CdcService.EventBatch
      @JvmName("getEventBatch")
      get() = _builder.getEventBatch()
      @JvmName("setEventBatch")
      set(value) {
        _builder.setEventBatch(value)
      }
    /**
     * <code>.unhinged.cdc.EventBatch event_batch = 1;</code>
     */
    public fun clearEventBatch() {
      _builder.clearEventBatch()
    }
    /**
     * <code>.unhinged.cdc.EventBatch event_batch = 1;</code>
     * @return Whether the eventBatch field is set.
     */
    public fun hasEventBatch(): kotlin.Boolean {
      return _builder.hasEventBatch()
    }

    /**
     * <code>.unhinged.cdc.SubscriptionStatus status = 2;</code>
     */
    public var status: unhinged.cdc.CdcService.SubscriptionStatus
      @JvmName("getStatus")
      get() = _builder.getStatus()
      @JvmName("setStatus")
      set(value) {
        _builder.setStatus(value)
      }
    /**
     * <code>.unhinged.cdc.SubscriptionStatus status = 2;</code>
     */
    public fun clearStatus() {
      _builder.clearStatus()
    }
    /**
     * <code>.unhinged.cdc.SubscriptionStatus status = 2;</code>
     * @return Whether the status field is set.
     */
    public fun hasStatus(): kotlin.Boolean {
      return _builder.hasStatus()
    }

    /**
     * <code>.unhinged.cdc.SubscriptionError error = 3;</code>
     */
    public var error: unhinged.cdc.CdcService.SubscriptionError
      @JvmName("getError")
      get() = _builder.getError()
      @JvmName("setError")
      set(value) {
        _builder.setError(value)
      }
    /**
     * <code>.unhinged.cdc.SubscriptionError error = 3;</code>
     */
    public fun clearError() {
      _builder.clearError()
    }
    /**
     * <code>.unhinged.cdc.SubscriptionError error = 3;</code>
     * @return Whether the error field is set.
     */
    public fun hasError(): kotlin.Boolean {
      return _builder.hasError()
    }

    /**
     * <code>.unhinged.cdc.Heartbeat heartbeat = 4;</code>
     */
    public var heartbeat: unhinged.cdc.CdcService.Heartbeat
      @JvmName("getHeartbeat")
      get() = _builder.getHeartbeat()
      @JvmName("setHeartbeat")
      set(value) {
        _builder.setHeartbeat(value)
      }
    /**
     * <code>.unhinged.cdc.Heartbeat heartbeat = 4;</code>
     */
    public fun clearHeartbeat() {
      _builder.clearHeartbeat()
    }
    /**
     * <code>.unhinged.cdc.Heartbeat heartbeat = 4;</code>
     * @return Whether the heartbeat field is set.
     */
    public fun hasHeartbeat(): kotlin.Boolean {
      return _builder.hasHeartbeat()
    }
    public val responseTypeCase: unhinged.cdc.CdcService.EventStreamResponse.ResponseTypeCase
      @JvmName("getResponseTypeCase")
      get() = _builder.getResponseTypeCase()

    public fun clearResponseType() {
      _builder.clearResponseType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.cdc.CdcService.EventStreamResponse.copy(block: unhinged.cdc.EventStreamResponseKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcService.EventStreamResponse =
  unhinged.cdc.EventStreamResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.cdc.CdcService.EventStreamResponseOrBuilder.eventBatchOrNull: unhinged.cdc.CdcService.EventBatch?
  get() = if (hasEventBatch()) getEventBatch() else null

public val unhinged.cdc.CdcService.EventStreamResponseOrBuilder.statusOrNull: unhinged.cdc.CdcService.SubscriptionStatus?
  get() = if (hasStatus()) getStatus() else null

public val unhinged.cdc.CdcService.EventStreamResponseOrBuilder.errorOrNull: unhinged.cdc.CdcService.SubscriptionError?
  get() = if (hasError()) getError() else null

public val unhinged.cdc.CdcService.EventStreamResponseOrBuilder.heartbeatOrNull: unhinged.cdc.CdcService.Heartbeat?
  get() = if (hasHeartbeat()) getHeartbeat() else null

