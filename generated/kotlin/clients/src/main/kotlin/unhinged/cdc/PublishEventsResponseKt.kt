//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cdc_service.proto

package unhinged.cdc;

@kotlin.jvm.JvmName("-initializepublishEventsResponse")
public inline fun publishEventsResponse(block: unhinged.cdc.PublishEventsResponseKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcService.PublishEventsResponse =
  unhinged.cdc.PublishEventsResponseKt.Dsl._create(unhinged.cdc.CdcService.PublishEventsResponse.newBuilder()).apply { block() }._build()
public object PublishEventsResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.cdc.CdcService.PublishEventsResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.cdc.CdcService.PublishEventsResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.cdc.CdcService.PublishEventsResponse = _builder.build()

    /**
     * <code>bool success = 1;</code>
     */
    public var success: kotlin.Boolean
      @JvmName("getSuccess")
      get() = _builder.getSuccess()
      @JvmName("setSuccess")
      set(value) {
        _builder.setSuccess(value)
      }
    /**
     * <code>bool success = 1;</code>
     */
    public fun clearSuccess() {
      _builder.clearSuccess()
    }

    /**
     * <code>string message = 2;</code>
     */
    public var message: kotlin.String
      @JvmName("getMessage")
      get() = _builder.getMessage()
      @JvmName("setMessage")
      set(value) {
        _builder.setMessage(value)
      }
    /**
     * <code>string message = 2;</code>
     */
    public fun clearMessage() {
      _builder.clearMessage()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ResultsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .unhinged.cdc.PublishEventResult results = 3;</code>
     */
     public val results: com.google.protobuf.kotlin.DslList<unhinged.cdc.CdcService.PublishEventResult, ResultsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getResultsList()
      )
    /**
     * <code>repeated .unhinged.cdc.PublishEventResult results = 3;</code>
     * @param value The results to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addResults")
    public fun com.google.protobuf.kotlin.DslList<unhinged.cdc.CdcService.PublishEventResult, ResultsProxy>.add(value: unhinged.cdc.CdcService.PublishEventResult) {
      _builder.addResults(value)
    }
    /**
     * <code>repeated .unhinged.cdc.PublishEventResult results = 3;</code>
     * @param value The results to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignResults")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<unhinged.cdc.CdcService.PublishEventResult, ResultsProxy>.plusAssign(value: unhinged.cdc.CdcService.PublishEventResult) {
      add(value)
    }
    /**
     * <code>repeated .unhinged.cdc.PublishEventResult results = 3;</code>
     * @param values The results to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllResults")
    public fun com.google.protobuf.kotlin.DslList<unhinged.cdc.CdcService.PublishEventResult, ResultsProxy>.addAll(values: kotlin.collections.Iterable<unhinged.cdc.CdcService.PublishEventResult>) {
      _builder.addAllResults(values)
    }
    /**
     * <code>repeated .unhinged.cdc.PublishEventResult results = 3;</code>
     * @param values The results to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllResults")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<unhinged.cdc.CdcService.PublishEventResult, ResultsProxy>.plusAssign(values: kotlin.collections.Iterable<unhinged.cdc.CdcService.PublishEventResult>) {
      addAll(values)
    }
    /**
     * <code>repeated .unhinged.cdc.PublishEventResult results = 3;</code>
     * @param index The index to set the value at.
     * @param value The results to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setResults")
    public operator fun com.google.protobuf.kotlin.DslList<unhinged.cdc.CdcService.PublishEventResult, ResultsProxy>.set(index: kotlin.Int, value: unhinged.cdc.CdcService.PublishEventResult) {
      _builder.setResults(index, value)
    }
    /**
     * <code>repeated .unhinged.cdc.PublishEventResult results = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearResults")
    public fun com.google.protobuf.kotlin.DslList<unhinged.cdc.CdcService.PublishEventResult, ResultsProxy>.clear() {
      _builder.clearResults()
    }


    /**
     * <code>int32 successful_count = 4;</code>
     */
    public var successfulCount: kotlin.Int
      @JvmName("getSuccessfulCount")
      get() = _builder.getSuccessfulCount()
      @JvmName("setSuccessfulCount")
      set(value) {
        _builder.setSuccessfulCount(value)
      }
    /**
     * <code>int32 successful_count = 4;</code>
     */
    public fun clearSuccessfulCount() {
      _builder.clearSuccessfulCount()
    }

    /**
     * <code>int32 failed_count = 5;</code>
     */
    public var failedCount: kotlin.Int
      @JvmName("getFailedCount")
      get() = _builder.getFailedCount()
      @JvmName("setFailedCount")
      set(value) {
        _builder.setFailedCount(value)
      }
    /**
     * <code>int32 failed_count = 5;</code>
     */
    public fun clearFailedCount() {
      _builder.clearFailedCount()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.cdc.CdcService.PublishEventsResponse.copy(block: unhinged.cdc.PublishEventsResponseKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcService.PublishEventsResponse =
  unhinged.cdc.PublishEventsResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

