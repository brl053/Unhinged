//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cdc_events.proto

package unhinged.cdc;

@kotlin.jvm.JvmName("-initializesessionEvent")
public inline fun sessionEvent(block: unhinged.cdc.SessionEventKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.SessionEvent =
  unhinged.cdc.SessionEventKt.Dsl._create(unhinged.cdc.CdcEvents.SessionEvent.newBuilder()).apply { block() }._build()
public object SessionEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.cdc.CdcEvents.SessionEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.cdc.CdcEvents.SessionEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.cdc.CdcEvents.SessionEvent = _builder.build()

    /**
     * <code>string session_id = 1;</code>
     */
    public var sessionId: kotlin.String
      @JvmName("getSessionId")
      get() = _builder.getSessionId()
      @JvmName("setSessionId")
      set(value) {
        _builder.setSessionId(value)
      }
    /**
     * <code>string session_id = 1;</code>
     */
    public fun clearSessionId() {
      _builder.clearSessionId()
    }

    /**
     * <code>.unhinged.cdc.SessionEventType event_type = 2;</code>
     */
    public var eventType: unhinged.cdc.CdcEvents.SessionEventType
      @JvmName("getEventType")
      get() = _builder.getEventType()
      @JvmName("setEventType")
      set(value) {
        _builder.setEventType(value)
      }
    /**
     * <code>.unhinged.cdc.SessionEventType event_type = 2;</code>
     */
    public fun clearEventType() {
      _builder.clearEventType()
    }

    /**
     * <code>.unhinged.cdc.SessionStarted started = 10;</code>
     */
    public var started: unhinged.cdc.CdcEvents.SessionStarted
      @JvmName("getStarted")
      get() = _builder.getStarted()
      @JvmName("setStarted")
      set(value) {
        _builder.setStarted(value)
      }
    /**
     * <code>.unhinged.cdc.SessionStarted started = 10;</code>
     */
    public fun clearStarted() {
      _builder.clearStarted()
    }
    /**
     * <code>.unhinged.cdc.SessionStarted started = 10;</code>
     * @return Whether the started field is set.
     */
    public fun hasStarted(): kotlin.Boolean {
      return _builder.hasStarted()
    }

    /**
     * <code>.unhinged.cdc.SessionEnded ended = 11;</code>
     */
    public var ended: unhinged.cdc.CdcEvents.SessionEnded
      @JvmName("getEnded")
      get() = _builder.getEnded()
      @JvmName("setEnded")
      set(value) {
        _builder.setEnded(value)
      }
    /**
     * <code>.unhinged.cdc.SessionEnded ended = 11;</code>
     */
    public fun clearEnded() {
      _builder.clearEnded()
    }
    /**
     * <code>.unhinged.cdc.SessionEnded ended = 11;</code>
     * @return Whether the ended field is set.
     */
    public fun hasEnded(): kotlin.Boolean {
      return _builder.hasEnded()
    }

    /**
     * <code>.unhinged.cdc.SessionContextAccessed context_accessed = 12;</code>
     */
    public var contextAccessed: unhinged.cdc.CdcEvents.SessionContextAccessed
      @JvmName("getContextAccessed")
      get() = _builder.getContextAccessed()
      @JvmName("setContextAccessed")
      set(value) {
        _builder.setContextAccessed(value)
      }
    /**
     * <code>.unhinged.cdc.SessionContextAccessed context_accessed = 12;</code>
     */
    public fun clearContextAccessed() {
      _builder.clearContextAccessed()
    }
    /**
     * <code>.unhinged.cdc.SessionContextAccessed context_accessed = 12;</code>
     * @return Whether the contextAccessed field is set.
     */
    public fun hasContextAccessed(): kotlin.Boolean {
      return _builder.hasContextAccessed()
    }

    /**
     * <code>.unhinged.cdc.SessionHeartbeat heartbeat = 13;</code>
     */
    public var heartbeat: unhinged.cdc.CdcEvents.SessionHeartbeat
      @JvmName("getHeartbeat")
      get() = _builder.getHeartbeat()
      @JvmName("setHeartbeat")
      set(value) {
        _builder.setHeartbeat(value)
      }
    /**
     * <code>.unhinged.cdc.SessionHeartbeat heartbeat = 13;</code>
     */
    public fun clearHeartbeat() {
      _builder.clearHeartbeat()
    }
    /**
     * <code>.unhinged.cdc.SessionHeartbeat heartbeat = 13;</code>
     * @return Whether the heartbeat field is set.
     */
    public fun hasHeartbeat(): kotlin.Boolean {
      return _builder.hasHeartbeat()
    }
    public val eventDataCase: unhinged.cdc.CdcEvents.SessionEvent.EventDataCase
      @JvmName("getEventDataCase")
      get() = _builder.getEventDataCase()

    public fun clearEventData() {
      _builder.clearEventData()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.cdc.CdcEvents.SessionEvent.copy(block: unhinged.cdc.SessionEventKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.SessionEvent =
  unhinged.cdc.SessionEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.cdc.CdcEvents.SessionEventOrBuilder.startedOrNull: unhinged.cdc.CdcEvents.SessionStarted?
  get() = if (hasStarted()) getStarted() else null

public val unhinged.cdc.CdcEvents.SessionEventOrBuilder.endedOrNull: unhinged.cdc.CdcEvents.SessionEnded?
  get() = if (hasEnded()) getEnded() else null

public val unhinged.cdc.CdcEvents.SessionEventOrBuilder.contextAccessedOrNull: unhinged.cdc.CdcEvents.SessionContextAccessed?
  get() = if (hasContextAccessed()) getContextAccessed() else null

public val unhinged.cdc.CdcEvents.SessionEventOrBuilder.heartbeatOrNull: unhinged.cdc.CdcEvents.SessionHeartbeat?
  get() = if (hasHeartbeat()) getHeartbeat() else null

