//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cdc_events.proto

package unhinged.cdc;

@kotlin.jvm.JvmName("-initializesystemEvent")
public inline fun systemEvent(block: unhinged.cdc.SystemEventKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.SystemEvent =
  unhinged.cdc.SystemEventKt.Dsl._create(unhinged.cdc.CdcEvents.SystemEvent.newBuilder()).apply { block() }._build()
public object SystemEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.cdc.CdcEvents.SystemEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.cdc.CdcEvents.SystemEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.cdc.CdcEvents.SystemEvent = _builder.build()

    /**
     * <code>string component = 1;</code>
     */
    public var component: kotlin.String
      @JvmName("getComponent")
      get() = _builder.getComponent()
      @JvmName("setComponent")
      set(value) {
        _builder.setComponent(value)
      }
    /**
     * <code>string component = 1;</code>
     */
    public fun clearComponent() {
      _builder.clearComponent()
    }

    /**
     * <code>.unhinged.cdc.SystemEventType event_type = 2;</code>
     */
    public var eventType: unhinged.cdc.CdcEvents.SystemEventType
      @JvmName("getEventType")
      get() = _builder.getEventType()
      @JvmName("setEventType")
      set(value) {
        _builder.setEventType(value)
      }
    /**
     * <code>.unhinged.cdc.SystemEventType event_type = 2;</code>
     */
    public fun clearEventType() {
      _builder.clearEventType()
    }

    /**
     * <code>.unhinged.cdc.HealthCheck health_check = 10;</code>
     */
    public var healthCheck: unhinged.cdc.CdcEvents.HealthCheck
      @JvmName("getHealthCheck")
      get() = _builder.getHealthCheck()
      @JvmName("setHealthCheck")
      set(value) {
        _builder.setHealthCheck(value)
      }
    /**
     * <code>.unhinged.cdc.HealthCheck health_check = 10;</code>
     */
    public fun clearHealthCheck() {
      _builder.clearHealthCheck()
    }
    /**
     * <code>.unhinged.cdc.HealthCheck health_check = 10;</code>
     * @return Whether the healthCheck field is set.
     */
    public fun hasHealthCheck(): kotlin.Boolean {
      return _builder.hasHealthCheck()
    }

    /**
     * <code>.unhinged.cdc.MetricReported metric = 11;</code>
     */
    public var metric: unhinged.cdc.CdcEvents.MetricReported
      @JvmName("getMetric")
      get() = _builder.getMetric()
      @JvmName("setMetric")
      set(value) {
        _builder.setMetric(value)
      }
    /**
     * <code>.unhinged.cdc.MetricReported metric = 11;</code>
     */
    public fun clearMetric() {
      _builder.clearMetric()
    }
    /**
     * <code>.unhinged.cdc.MetricReported metric = 11;</code>
     * @return Whether the metric field is set.
     */
    public fun hasMetric(): kotlin.Boolean {
      return _builder.hasMetric()
    }

    /**
     * <code>.unhinged.cdc.AlertTriggered alert = 12;</code>
     */
    public var alert: unhinged.cdc.CdcEvents.AlertTriggered
      @JvmName("getAlert")
      get() = _builder.getAlert()
      @JvmName("setAlert")
      set(value) {
        _builder.setAlert(value)
      }
    /**
     * <code>.unhinged.cdc.AlertTriggered alert = 12;</code>
     */
    public fun clearAlert() {
      _builder.clearAlert()
    }
    /**
     * <code>.unhinged.cdc.AlertTriggered alert = 12;</code>
     * @return Whether the alert field is set.
     */
    public fun hasAlert(): kotlin.Boolean {
      return _builder.hasAlert()
    }

    /**
     * <code>.unhinged.cdc.ServiceStarted service_started = 13;</code>
     */
    public var serviceStarted: unhinged.cdc.CdcEvents.ServiceStarted
      @JvmName("getServiceStarted")
      get() = _builder.getServiceStarted()
      @JvmName("setServiceStarted")
      set(value) {
        _builder.setServiceStarted(value)
      }
    /**
     * <code>.unhinged.cdc.ServiceStarted service_started = 13;</code>
     */
    public fun clearServiceStarted() {
      _builder.clearServiceStarted()
    }
    /**
     * <code>.unhinged.cdc.ServiceStarted service_started = 13;</code>
     * @return Whether the serviceStarted field is set.
     */
    public fun hasServiceStarted(): kotlin.Boolean {
      return _builder.hasServiceStarted()
    }

    /**
     * <code>.unhinged.cdc.ServiceStopped service_stopped = 14;</code>
     */
    public var serviceStopped: unhinged.cdc.CdcEvents.ServiceStopped
      @JvmName("getServiceStopped")
      get() = _builder.getServiceStopped()
      @JvmName("setServiceStopped")
      set(value) {
        _builder.setServiceStopped(value)
      }
    /**
     * <code>.unhinged.cdc.ServiceStopped service_stopped = 14;</code>
     */
    public fun clearServiceStopped() {
      _builder.clearServiceStopped()
    }
    /**
     * <code>.unhinged.cdc.ServiceStopped service_stopped = 14;</code>
     * @return Whether the serviceStopped field is set.
     */
    public fun hasServiceStopped(): kotlin.Boolean {
      return _builder.hasServiceStopped()
    }
    public val eventDataCase: unhinged.cdc.CdcEvents.SystemEvent.EventDataCase
      @JvmName("getEventDataCase")
      get() = _builder.getEventDataCase()

    public fun clearEventData() {
      _builder.clearEventData()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.cdc.CdcEvents.SystemEvent.copy(block: unhinged.cdc.SystemEventKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.SystemEvent =
  unhinged.cdc.SystemEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.cdc.CdcEvents.SystemEventOrBuilder.healthCheckOrNull: unhinged.cdc.CdcEvents.HealthCheck?
  get() = if (hasHealthCheck()) getHealthCheck() else null

public val unhinged.cdc.CdcEvents.SystemEventOrBuilder.metricOrNull: unhinged.cdc.CdcEvents.MetricReported?
  get() = if (hasMetric()) getMetric() else null

public val unhinged.cdc.CdcEvents.SystemEventOrBuilder.alertOrNull: unhinged.cdc.CdcEvents.AlertTriggered?
  get() = if (hasAlert()) getAlert() else null

public val unhinged.cdc.CdcEvents.SystemEventOrBuilder.serviceStartedOrNull: unhinged.cdc.CdcEvents.ServiceStarted?
  get() = if (hasServiceStarted()) getServiceStarted() else null

public val unhinged.cdc.CdcEvents.SystemEventOrBuilder.serviceStoppedOrNull: unhinged.cdc.CdcEvents.ServiceStopped?
  get() = if (hasServiceStopped()) getServiceStopped() else null

