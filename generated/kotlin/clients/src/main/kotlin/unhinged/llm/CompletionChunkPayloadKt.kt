//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: llm.proto

package unhinged.llm;

@kotlin.jvm.JvmName("-initializecompletionChunkPayload")
public inline fun completionChunkPayload(block: unhinged.llm.CompletionChunkPayloadKt.Dsl.() -> kotlin.Unit): unhinged.llm.CompletionChunkPayload =
  unhinged.llm.CompletionChunkPayloadKt.Dsl._create(unhinged.llm.CompletionChunkPayload.newBuilder()).apply { block() }._build()
public object CompletionChunkPayloadKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.llm.CompletionChunkPayload.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.llm.CompletionChunkPayload.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.llm.CompletionChunkPayload = _builder.build()

    /**
     * <code>string completion_id = 1;</code>
     */
    public var completionId: kotlin.String
      @JvmName("getCompletionId")
      get() = _builder.getCompletionId()
      @JvmName("setCompletionId")
      set(value) {
        _builder.setCompletionId(value)
      }
    /**
     * <code>string completion_id = 1;</code>
     */
    public fun clearCompletionId() {
      _builder.clearCompletionId()
    }

    /**
     * <code>int32 choice_index = 2;</code>
     */
    public var choiceIndex: kotlin.Int
      @JvmName("getChoiceIndex")
      get() = _builder.getChoiceIndex()
      @JvmName("setChoiceIndex")
      set(value) {
        _builder.setChoiceIndex(value)
      }
    /**
     * <code>int32 choice_index = 2;</code>
     */
    public fun clearChoiceIndex() {
      _builder.clearChoiceIndex()
    }

    /**
     * <code>.unhinged.llm.v1.CompletionChunkType type = 3;</code>
     */
    public var type: unhinged.llm.CompletionChunkType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <code>.unhinged.llm.v1.CompletionChunkType type = 3;</code>
     */
    public fun clearType() {
      _builder.clearType()
    }

    /**
     * <code>string content = 4;</code>
     */
    public var content: kotlin.String
      @JvmName("getContent")
      get() = _builder.getContent()
      @JvmName("setContent")
      set(value) {
        _builder.setContent(value)
      }
    /**
     * <code>string content = 4;</code>
     */
    public fun clearContent() {
      _builder.clearContent()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ToolCallsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * ← DRY! (reuse from chat)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ToolCall tool_calls = 5;</code>
     */
     public val toolCalls: com.google.protobuf.kotlin.DslList<unhinged.chat.ToolCall, ToolCallsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getToolCallsList()
      )
    /**
     * <pre>
     * ← DRY! (reuse from chat)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ToolCall tool_calls = 5;</code>
     * @param value The toolCalls to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addToolCalls")
    public fun com.google.protobuf.kotlin.DslList<unhinged.chat.ToolCall, ToolCallsProxy>.add(value: unhinged.chat.ToolCall) {
      _builder.addToolCalls(value)
    }
    /**
     * <pre>
     * ← DRY! (reuse from chat)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ToolCall tool_calls = 5;</code>
     * @param value The toolCalls to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignToolCalls")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<unhinged.chat.ToolCall, ToolCallsProxy>.plusAssign(value: unhinged.chat.ToolCall) {
      add(value)
    }
    /**
     * <pre>
     * ← DRY! (reuse from chat)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ToolCall tool_calls = 5;</code>
     * @param values The toolCalls to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllToolCalls")
    public fun com.google.protobuf.kotlin.DslList<unhinged.chat.ToolCall, ToolCallsProxy>.addAll(values: kotlin.collections.Iterable<unhinged.chat.ToolCall>) {
      _builder.addAllToolCalls(values)
    }
    /**
     * <pre>
     * ← DRY! (reuse from chat)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ToolCall tool_calls = 5;</code>
     * @param values The toolCalls to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllToolCalls")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<unhinged.chat.ToolCall, ToolCallsProxy>.plusAssign(values: kotlin.collections.Iterable<unhinged.chat.ToolCall>) {
      addAll(values)
    }
    /**
     * <pre>
     * ← DRY! (reuse from chat)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ToolCall tool_calls = 5;</code>
     * @param index The index to set the value at.
     * @param value The toolCalls to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setToolCalls")
    public operator fun com.google.protobuf.kotlin.DslList<unhinged.chat.ToolCall, ToolCallsProxy>.set(index: kotlin.Int, value: unhinged.chat.ToolCall) {
      _builder.setToolCalls(index, value)
    }
    /**
     * <pre>
     * ← DRY! (reuse from chat)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ToolCall tool_calls = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearToolCalls")
    public fun com.google.protobuf.kotlin.DslList<unhinged.chat.ToolCall, ToolCallsProxy>.clear() {
      _builder.clearToolCalls()
    }


    /**
     * <code>string finish_reason = 6;</code>
     */
    public var finishReason: kotlin.String
      @JvmName("getFinishReason")
      get() = _builder.getFinishReason()
      @JvmName("setFinishReason")
      set(value) {
        _builder.setFinishReason(value)
      }
    /**
     * <code>string finish_reason = 6;</code>
     */
    public fun clearFinishReason() {
      _builder.clearFinishReason()
    }

    /**
     * <pre>
     * ← DRY! (only in final chunk)
     * </pre>
     *
     * <code>.unhinged.common.v1.UsageMetrics usage = 7;</code>
     */
    public var usage: unhinged.common.UsageMetrics
      @JvmName("getUsage")
      get() = _builder.getUsage()
      @JvmName("setUsage")
      set(value) {
        _builder.setUsage(value)
      }
    /**
     * <pre>
     * ← DRY! (only in final chunk)
     * </pre>
     *
     * <code>.unhinged.common.v1.UsageMetrics usage = 7;</code>
     */
    public fun clearUsage() {
      _builder.clearUsage()
    }
    /**
     * <pre>
     * ← DRY! (only in final chunk)
     * </pre>
     *
     * <code>.unhinged.common.v1.UsageMetrics usage = 7;</code>
     * @return Whether the usage field is set.
     */
    public fun hasUsage(): kotlin.Boolean {
      return _builder.hasUsage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.llm.CompletionChunkPayload.copy(block: unhinged.llm.CompletionChunkPayloadKt.Dsl.() -> kotlin.Unit): unhinged.llm.CompletionChunkPayload =
  unhinged.llm.CompletionChunkPayloadKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.llm.CompletionChunkPayloadOrBuilder.usageOrNull: unhinged.common.UsageMetrics?
  get() = if (hasUsage()) getUsage() else null

