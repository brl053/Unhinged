//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: llm.proto

package unhinged.llm;

@kotlin.jvm.JvmName("-initializecompletionRequest")
public inline fun completionRequest(block: unhinged.llm.CompletionRequestKt.Dsl.() -> kotlin.Unit): unhinged.llm.CompletionRequest =
  unhinged.llm.CompletionRequestKt.Dsl._create(unhinged.llm.CompletionRequest.newBuilder()).apply { block() }._build()
public object CompletionRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.llm.CompletionRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.llm.CompletionRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.llm.CompletionRequest = _builder.build()

    /**
     * <code>string model = 1;</code>
     */
    public var model: kotlin.String
      @JvmName("getModel")
      get() = _builder.getModel()
      @JvmName("setModel")
      set(value) {
        _builder.setModel(value)
      }
    /**
     * <code>string model = 1;</code>
     */
    public fun clearModel() {
      _builder.clearModel()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class MessagesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * ← DRY! (reuse chat messages)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ChatMessage messages = 2;</code>
     */
     public val messages: com.google.protobuf.kotlin.DslList<unhinged.chat.ChatMessage, MessagesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getMessagesList()
      )
    /**
     * <pre>
     * ← DRY! (reuse chat messages)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ChatMessage messages = 2;</code>
     * @param value The messages to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addMessages")
    public fun com.google.protobuf.kotlin.DslList<unhinged.chat.ChatMessage, MessagesProxy>.add(value: unhinged.chat.ChatMessage) {
      _builder.addMessages(value)
    }
    /**
     * <pre>
     * ← DRY! (reuse chat messages)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ChatMessage messages = 2;</code>
     * @param value The messages to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignMessages")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<unhinged.chat.ChatMessage, MessagesProxy>.plusAssign(value: unhinged.chat.ChatMessage) {
      add(value)
    }
    /**
     * <pre>
     * ← DRY! (reuse chat messages)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ChatMessage messages = 2;</code>
     * @param values The messages to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllMessages")
    public fun com.google.protobuf.kotlin.DslList<unhinged.chat.ChatMessage, MessagesProxy>.addAll(values: kotlin.collections.Iterable<unhinged.chat.ChatMessage>) {
      _builder.addAllMessages(values)
    }
    /**
     * <pre>
     * ← DRY! (reuse chat messages)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ChatMessage messages = 2;</code>
     * @param values The messages to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllMessages")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<unhinged.chat.ChatMessage, MessagesProxy>.plusAssign(values: kotlin.collections.Iterable<unhinged.chat.ChatMessage>) {
      addAll(values)
    }
    /**
     * <pre>
     * ← DRY! (reuse chat messages)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ChatMessage messages = 2;</code>
     * @param index The index to set the value at.
     * @param value The messages to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setMessages")
    public operator fun com.google.protobuf.kotlin.DslList<unhinged.chat.ChatMessage, MessagesProxy>.set(index: kotlin.Int, value: unhinged.chat.ChatMessage) {
      _builder.setMessages(index, value)
    }
    /**
     * <pre>
     * ← DRY! (reuse chat messages)
     * </pre>
     *
     * <code>repeated .unhinged.chat.v1.ChatMessage messages = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearMessages")
    public fun com.google.protobuf.kotlin.DslList<unhinged.chat.ChatMessage, MessagesProxy>.clear() {
      _builder.clearMessages()
    }


    /**
     * <code>.unhinged.llm.v1.CompletionOptions options = 3;</code>
     */
    public var options: unhinged.llm.CompletionOptions
      @JvmName("getOptions")
      get() = _builder.getOptions()
      @JvmName("setOptions")
      set(value) {
        _builder.setOptions(value)
      }
    /**
     * <code>.unhinged.llm.v1.CompletionOptions options = 3;</code>
     */
    public fun clearOptions() {
      _builder.clearOptions()
    }
    /**
     * <code>.unhinged.llm.v1.CompletionOptions options = 3;</code>
     * @return Whether the options field is set.
     */
    public fun hasOptions(): kotlin.Boolean {
      return _builder.hasOptions()
    }

    /**
     * <pre>
     * For DocumentStore context integration
     * </pre>
     *
     * <code>string session_id = 4;</code>
     */
    public var sessionId: kotlin.String
      @JvmName("getSessionId")
      get() = _builder.getSessionId()
      @JvmName("setSessionId")
      set(value) {
        _builder.setSessionId(value)
      }
    /**
     * <pre>
     * For DocumentStore context integration
     * </pre>
     *
     * <code>string session_id = 4;</code>
     */
    public fun clearSessionId() {
      _builder.clearSessionId()
    }

    /**
     * <pre>
     * Pull relevant documents from DocumentStore
     * </pre>
     *
     * <code>bool include_context = 5;</code>
     */
    public var includeContext: kotlin.Boolean
      @JvmName("getIncludeContext")
      get() = _builder.getIncludeContext()
      @JvmName("setIncludeContext")
      set(value) {
        _builder.setIncludeContext(value)
      }
    /**
     * <pre>
     * Pull relevant documents from DocumentStore
     * </pre>
     *
     * <code>bool include_context = 5;</code>
     */
    public fun clearIncludeContext() {
      _builder.clearIncludeContext()
    }

    /**
     * <code>.unhinged.llm.v1.ContextOptions context_options = 6;</code>
     */
    public var contextOptions: unhinged.llm.ContextOptions
      @JvmName("getContextOptions")
      get() = _builder.getContextOptions()
      @JvmName("setContextOptions")
      set(value) {
        _builder.setContextOptions(value)
      }
    /**
     * <code>.unhinged.llm.v1.ContextOptions context_options = 6;</code>
     */
    public fun clearContextOptions() {
      _builder.clearContextOptions()
    }
    /**
     * <code>.unhinged.llm.v1.ContextOptions context_options = 6;</code>
     * @return Whether the contextOptions field is set.
     */
    public fun hasContextOptions(): kotlin.Boolean {
      return _builder.hasContextOptions()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.llm.CompletionRequest.copy(block: unhinged.llm.CompletionRequestKt.Dsl.() -> kotlin.Unit): unhinged.llm.CompletionRequest =
  unhinged.llm.CompletionRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.llm.CompletionRequestOrBuilder.optionsOrNull: unhinged.llm.CompletionOptions?
  get() = if (hasOptions()) getOptions() else null

public val unhinged.llm.CompletionRequestOrBuilder.contextOptionsOrNull: unhinged.llm.ContextOptions?
  get() = if (hasContextOptions()) getContextOptions() else null

