//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: llm.proto

package unhinged.llm;

@kotlin.jvm.JvmName("-initializelistModelsRequest")
public inline fun listModelsRequest(block: unhinged.llm.ListModelsRequestKt.Dsl.() -> kotlin.Unit): unhinged.llm.ListModelsRequest =
  unhinged.llm.ListModelsRequestKt.Dsl._create(unhinged.llm.ListModelsRequest.newBuilder()).apply { block() }._build()
public object ListModelsRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.llm.ListModelsRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.llm.ListModelsRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.llm.ListModelsRequest = _builder.build()

    /**
     * <pre>
     * Filter by provider
     * </pre>
     *
     * <code>string provider = 1;</code>
     */
    public var provider: kotlin.String
      @JvmName("getProvider")
      get() = _builder.getProvider()
      @JvmName("setProvider")
      set(value) {
        _builder.setProvider(value)
      }
    /**
     * <pre>
     * Filter by provider
     * </pre>
     *
     * <code>string provider = 1;</code>
     */
    public fun clearProvider() {
      _builder.clearProvider()
    }

    /**
     * <pre>
     * Only show available models
     * </pre>
     *
     * <code>bool available_only = 2;</code>
     */
    public var availableOnly: kotlin.Boolean
      @JvmName("getAvailableOnly")
      get() = _builder.getAvailableOnly()
      @JvmName("setAvailableOnly")
      set(value) {
        _builder.setAvailableOnly(value)
      }
    /**
     * <pre>
     * Only show available models
     * </pre>
     *
     * <code>bool available_only = 2;</code>
     */
    public fun clearAvailableOnly() {
      _builder.clearAvailableOnly()
    }

    /**
     * <pre>
     * ← DRY!
     * </pre>
     *
     * <code>.unhinged.common.v1.PaginationRequest pagination = 3;</code>
     */
    public var pagination: unhinged.common.PaginationRequest
      @JvmName("getPagination")
      get() = _builder.getPagination()
      @JvmName("setPagination")
      set(value) {
        _builder.setPagination(value)
      }
    /**
     * <pre>
     * ← DRY!
     * </pre>
     *
     * <code>.unhinged.common.v1.PaginationRequest pagination = 3;</code>
     */
    public fun clearPagination() {
      _builder.clearPagination()
    }
    /**
     * <pre>
     * ← DRY!
     * </pre>
     *
     * <code>.unhinged.common.v1.PaginationRequest pagination = 3;</code>
     * @return Whether the pagination field is set.
     */
    public fun hasPagination(): kotlin.Boolean {
      return _builder.hasPagination()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class FiltersProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * ← DRY!
     * </pre>
     *
     * <code>repeated .unhinged.common.v1.Filter filters = 4;</code>
     */
     public val filters: com.google.protobuf.kotlin.DslList<unhinged.common.Filter, FiltersProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getFiltersList()
      )
    /**
     * <pre>
     * ← DRY!
     * </pre>
     *
     * <code>repeated .unhinged.common.v1.Filter filters = 4;</code>
     * @param value The filters to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addFilters")
    public fun com.google.protobuf.kotlin.DslList<unhinged.common.Filter, FiltersProxy>.add(value: unhinged.common.Filter) {
      _builder.addFilters(value)
    }
    /**
     * <pre>
     * ← DRY!
     * </pre>
     *
     * <code>repeated .unhinged.common.v1.Filter filters = 4;</code>
     * @param value The filters to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignFilters")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<unhinged.common.Filter, FiltersProxy>.plusAssign(value: unhinged.common.Filter) {
      add(value)
    }
    /**
     * <pre>
     * ← DRY!
     * </pre>
     *
     * <code>repeated .unhinged.common.v1.Filter filters = 4;</code>
     * @param values The filters to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllFilters")
    public fun com.google.protobuf.kotlin.DslList<unhinged.common.Filter, FiltersProxy>.addAll(values: kotlin.collections.Iterable<unhinged.common.Filter>) {
      _builder.addAllFilters(values)
    }
    /**
     * <pre>
     * ← DRY!
     * </pre>
     *
     * <code>repeated .unhinged.common.v1.Filter filters = 4;</code>
     * @param values The filters to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllFilters")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<unhinged.common.Filter, FiltersProxy>.plusAssign(values: kotlin.collections.Iterable<unhinged.common.Filter>) {
      addAll(values)
    }
    /**
     * <pre>
     * ← DRY!
     * </pre>
     *
     * <code>repeated .unhinged.common.v1.Filter filters = 4;</code>
     * @param index The index to set the value at.
     * @param value The filters to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setFilters")
    public operator fun com.google.protobuf.kotlin.DslList<unhinged.common.Filter, FiltersProxy>.set(index: kotlin.Int, value: unhinged.common.Filter) {
      _builder.setFilters(index, value)
    }
    /**
     * <pre>
     * ← DRY!
     * </pre>
     *
     * <code>repeated .unhinged.common.v1.Filter filters = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearFilters")
    public fun com.google.protobuf.kotlin.DslList<unhinged.common.Filter, FiltersProxy>.clear() {
      _builder.clearFilters()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.llm.ListModelsRequest.copy(block: unhinged.llm.ListModelsRequestKt.Dsl.() -> kotlin.Unit): unhinged.llm.ListModelsRequest =
  unhinged.llm.ListModelsRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.llm.ListModelsRequestOrBuilder.paginationOrNull: unhinged.common.PaginationRequest?
  get() = if (hasPagination()) getPagination() else null

