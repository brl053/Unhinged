//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: chat.proto

package unhinged.chat;

@kotlin.jvm.JvmName("-initializeupdateMessageRequest")
public inline fun updateMessageRequest(block: unhinged.chat.UpdateMessageRequestKt.Dsl.() -> kotlin.Unit): unhinged.chat.UpdateMessageRequest =
  unhinged.chat.UpdateMessageRequestKt.Dsl._create(unhinged.chat.UpdateMessageRequest.newBuilder()).apply { block() }._build()
public object UpdateMessageRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.chat.UpdateMessageRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.chat.UpdateMessageRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.chat.UpdateMessageRequest = _builder.build()

    /**
     * <code>string message_id = 1;</code>
     */
    public var messageId: kotlin.String
      @JvmName("getMessageId")
      get() = _builder.getMessageId()
      @JvmName("setMessageId")
      set(value) {
        _builder.setMessageId(value)
      }
    /**
     * <code>string message_id = 1;</code>
     */
    public fun clearMessageId() {
      _builder.clearMessageId()
    }

    /**
     * <code>string content = 2;</code>
     */
    public var content: kotlin.String
      @JvmName("getContent")
      get() = _builder.getContent()
      @JvmName("setContent")
      set(value) {
        _builder.setContent(value)
      }
    /**
     * <code>string content = 2;</code>
     */
    public fun clearContent() {
      _builder.clearContent()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.chat.UpdateMessageRequest.copy(block: unhinged.chat.UpdateMessageRequestKt.Dsl.() -> kotlin.Unit): unhinged.chat.UpdateMessageRequest =
  unhinged.chat.UpdateMessageRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

