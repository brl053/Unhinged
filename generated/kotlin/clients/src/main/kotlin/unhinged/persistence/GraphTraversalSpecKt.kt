//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: persistence_platform.proto

package unhinged.persistence;

@kotlin.jvm.JvmName("-initializegraphTraversalSpec")
public inline fun graphTraversalSpec(block: unhinged.persistence.GraphTraversalSpecKt.Dsl.() -> kotlin.Unit): unhinged.persistence.PersistencePlatform.GraphTraversalSpec =
  unhinged.persistence.GraphTraversalSpecKt.Dsl._create(unhinged.persistence.PersistencePlatform.GraphTraversalSpec.newBuilder()).apply { block() }._build()
public object GraphTraversalSpecKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.persistence.PersistencePlatform.GraphTraversalSpec.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.persistence.PersistencePlatform.GraphTraversalSpec.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.persistence.PersistencePlatform.GraphTraversalSpec = _builder.build()

    /**
     * <code>.unhinged.persistence.GraphTraversalType traversal_type = 1;</code>
     */
    public var traversalType: unhinged.persistence.PersistencePlatform.GraphTraversalType
      @JvmName("getTraversalType")
      get() = _builder.getTraversalType()
      @JvmName("setTraversalType")
      set(value) {
        _builder.setTraversalType(value)
      }
    /**
     * <code>.unhinged.persistence.GraphTraversalType traversal_type = 1;</code>
     */
    public fun clearTraversalType() {
      _builder.clearTraversalType()
    }

    /**
     * <code>int32 max_depth = 2;</code>
     */
    public var maxDepth: kotlin.Int
      @JvmName("getMaxDepth")
      get() = _builder.getMaxDepth()
      @JvmName("setMaxDepth")
      set(value) {
        _builder.setMaxDepth(value)
      }
    /**
     * <code>int32 max_depth = 2;</code>
     */
    public fun clearMaxDepth() {
      _builder.clearMaxDepth()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class RelationshipTypesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated string relationship_types = 3;</code>
     * @return A list containing the relationshipTypes.
     */
    public val relationshipTypes: com.google.protobuf.kotlin.DslList<kotlin.String, RelationshipTypesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getRelationshipTypesList()
      )
    /**
     * <code>repeated string relationship_types = 3;</code>
     * @param value The relationshipTypes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addRelationshipTypes")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, RelationshipTypesProxy>.add(value: kotlin.String) {
      _builder.addRelationshipTypes(value)
    }
    /**
     * <code>repeated string relationship_types = 3;</code>
     * @param value The relationshipTypes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignRelationshipTypes")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, RelationshipTypesProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * <code>repeated string relationship_types = 3;</code>
     * @param values The relationshipTypes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllRelationshipTypes")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, RelationshipTypesProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllRelationshipTypes(values)
    }
    /**
     * <code>repeated string relationship_types = 3;</code>
     * @param values The relationshipTypes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllRelationshipTypes")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, RelationshipTypesProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * <code>repeated string relationship_types = 3;</code>
     * @param index The index to set the value at.
     * @param value The relationshipTypes to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setRelationshipTypes")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, RelationshipTypesProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setRelationshipTypes(index, value)
    }/**
     * <code>repeated string relationship_types = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearRelationshipTypes")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, RelationshipTypesProxy>.clear() {
      _builder.clearRelationshipTypes()
    }
    /**
     * <code>.unhinged.persistence.QueryCriteria node_filter = 4;</code>
     */
    public var nodeFilter: unhinged.persistence.PersistencePlatform.QueryCriteria
      @JvmName("getNodeFilter")
      get() = _builder.getNodeFilter()
      @JvmName("setNodeFilter")
      set(value) {
        _builder.setNodeFilter(value)
      }
    /**
     * <code>.unhinged.persistence.QueryCriteria node_filter = 4;</code>
     */
    public fun clearNodeFilter() {
      _builder.clearNodeFilter()
    }
    /**
     * <code>.unhinged.persistence.QueryCriteria node_filter = 4;</code>
     * @return Whether the nodeFilter field is set.
     */
    public fun hasNodeFilter(): kotlin.Boolean {
      return _builder.hasNodeFilter()
    }

    /**
     * <code>.unhinged.persistence.QueryCriteria edge_filter = 5;</code>
     */
    public var edgeFilter: unhinged.persistence.PersistencePlatform.QueryCriteria
      @JvmName("getEdgeFilter")
      get() = _builder.getEdgeFilter()
      @JvmName("setEdgeFilter")
      set(value) {
        _builder.setEdgeFilter(value)
      }
    /**
     * <code>.unhinged.persistence.QueryCriteria edge_filter = 5;</code>
     */
    public fun clearEdgeFilter() {
      _builder.clearEdgeFilter()
    }
    /**
     * <code>.unhinged.persistence.QueryCriteria edge_filter = 5;</code>
     * @return Whether the edgeFilter field is set.
     */
    public fun hasEdgeFilter(): kotlin.Boolean {
      return _builder.hasEdgeFilter()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.persistence.PersistencePlatform.GraphTraversalSpec.copy(block: unhinged.persistence.GraphTraversalSpecKt.Dsl.() -> kotlin.Unit): unhinged.persistence.PersistencePlatform.GraphTraversalSpec =
  unhinged.persistence.GraphTraversalSpecKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.persistence.PersistencePlatform.GraphTraversalSpecOrBuilder.nodeFilterOrNull: unhinged.persistence.PersistencePlatform.QueryCriteria?
  get() = if (hasNodeFilter()) getNodeFilter() else null

public val unhinged.persistence.PersistencePlatform.GraphTraversalSpecOrBuilder.edgeFilterOrNull: unhinged.persistence.PersistencePlatform.QueryCriteria?
  get() = if (hasEdgeFilter()) getEdgeFilter() else null

