// ============================================================================
// Graph Service Protocol Buffer Definition - Minimal Contract
// ============================================================================
//
// @file dag_service.proto (will rename to graph_service.proto)
// @version 1.0.0
// @author Unhinged Team
// @date 2025-10-31
// @description Minimal Graph execution service for AI workflows
//
// This service provides ONLY the essential Graph operations:
// - Create and manage Graph definitions (DAG is a validation type)
// - Execute Graphs with real-time status streaming
// - Query execution results and history
//
// Design Principles:
// - Graph > DAG: DAG is just a validation type, not the core concept
// - Document-based: Graphs are stored as documents with metadata
// - Tool generation: Proto scraped to create LLM tools for node types
// - Minimal viable contract - no scope creep
// ============================================================================

syntax = "proto3";

package unhinged.graph.v1;

import "common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";

option java_package = "unhinged.graph";
option java_multiple_files = true;
option java_outer_classname = "GraphServiceProto";

// ============================================================================
// Core Graph Service
// ============================================================================

/**
 * Minimal Graph execution service for AI workflow orchestration
 *
 * Note: DAG is just a validation type - the core concept is Graph
 */
service GraphService {
  // Graph Definition Management
  rpc CreateGraph(CreateGraphRequest) returns (CreateGraphResponse);
  rpc GetGraph(GetGraphRequest) returns (GetGraphResponse);
  rpc ListGraphs(ListGraphsRequest) returns (ListGraphsResponse);
  rpc DeleteGraph(DeleteGraphRequest) returns (DeleteGraphResponse);

  // Graph Execution
  rpc ExecuteGraph(ExecuteGraphRequest) returns (ExecuteGraphResponse);
  rpc StreamExecution(StreamExecutionRequest) returns (stream ExecutionEvent);
  rpc GetExecution(GetExecutionRequest) returns (GetExecutionResponse);
  rpc CancelExecution(CancelExecutionRequest) returns (CancelExecutionResponse);

  // Health and Status
  rpc HealthCheck(unhinged.common.v1.HealthCheckRequest) returns (unhinged.common.v1.HealthCheckResponse);
}

// ============================================================================
// Core Graph Types - Minimal Essential Fields Only
// ============================================================================

/**
 * Graph definition - minimal structure for AI workflows
 *
 * Note: This is stored as a document with metadata + body
 * GraphType determines validation rules (DAG, cyclic, etc.)
 */
message Graph {
  string id = 1;                                    // UUID - no redundant prefixes
  string name = 2;
  string description = 3;
  GraphType graph_type = 4;                         // DAG, CYCLIC, etc. - determines validation
  repeated Node nodes = 5;
  repeated Edge edges = 6;
  unhinged.common.v1.ResourceMetadata metadata = 7; // Document metadata
}

/**
 * Graph types for different validation rules
 */
enum GraphType {
  GRAPH_TYPE_UNSPECIFIED = 0;
  DAG = 1;                    // Directed Acyclic Graph - no cycles allowed
  CYCLIC = 2;                 // Allows cycles
  CYCLIC_WITH_BREAKERS = 3;   // Cycles with loop breakers (max iterations)
  TREE = 4;                   // Tree structure - no cycles, single root
  UNRESTRICTED = 5;           // No validation - just ensure nothing's broken
}

/**
 * Node - represents a single AI service or operation
 */
message Node {
  string id = 1;              // UUID - no redundant prefixes
  string name = 2;
  NodeType type = 3;
  google.protobuf.Struct config = 4;  // Service-specific configuration
}

/**
 * Edge - represents data flow between nodes
 */
message Edge {
  string id = 1;              // UUID - no redundant prefixes
  string source_node_id = 2;  // References Node.id
  string target_node_id = 3;  // References Node.id
  string source_output = 4;   // Output port name
  string target_input = 5;    // Input port name
}

/**
 * Node types for AI service integration
 *
 * Note: These will be scraped to generate LLM tools for each node type
 * Each type represents a capability that can be orchestrated in workflows
 */
enum NodeType {
  NODE_TYPE_UNSPECIFIED = 0;

  // Core AI Services (voice-first pipeline)
  SPEECH_TO_TEXT = 1;         // Convert audio → text
  TEXT_TO_SPEECH = 2;         // Convert text → audio
  LLM_CHAT = 3;              // Conversational AI processing
  LLM_COMPLETION = 4;        // Text completion/generation
  VISION_AI = 5;             // Image analysis and understanding
  IMAGE_GENERATION = 6;      // Text → image generation

  // Context and Enhancement
  CONTEXT_HYDRATION = 7;     // Enhance prompts with vector DB context
  PROMPT_ENHANCEMENT = 8;    // Improve prompt quality

  // Data Operations
  DATA_TRANSFORM = 10;       // JSON/data transformation
  CONDITIONAL = 11;          // Branching logic
  LOOP_BREAKER = 12;         // Cycle control with max iterations

  // Integration
  HTTP_REQUEST = 20;         // External API calls
  CUSTOM_SERVICE = 21;       // Generic service integration
}

// ============================================================================
// Request/Response Messages
// ============================================================================

message CreateGraphRequest {
  Graph graph = 1;
}

message CreateGraphResponse {
  unhinged.common.v1.StandardResponse response = 1;
  string id = 2;  // Graph ID (UUID)
}

message GetGraphRequest {
  string id = 1;  // Graph ID
}

message GetGraphResponse {
  unhinged.common.v1.StandardResponse response = 1;
  Graph graph = 2;
}

message ListGraphsRequest {
  unhinged.common.v1.PaginationRequest pagination = 1;
  repeated unhinged.common.v1.Filter filters = 2;
  GraphType graph_type = 3;  // Optional filter by graph type
}

message ListGraphsResponse {
  unhinged.common.v1.StandardResponse response = 1;
  repeated Graph graphs = 2;
  unhinged.common.v1.PaginationResponse pagination = 3;
}

message DeleteGraphRequest {
  string id = 1;  // Graph ID
}

message DeleteGraphResponse {
  unhinged.common.v1.StandardResponse response = 1;
}

message ExecuteGraphRequest {
  string id = 1;                              // Graph ID
  google.protobuf.Struct input_data = 2;      // Initial input parameters
  string execution_id = 3;                    // Optional - system generates if empty
}

message ExecuteGraphResponse {
  unhinged.common.v1.StandardResponse response = 1;
  string execution_id = 2;
  ExecutionStatus status = 3;
}

// ============================================================================
// Execution Monitoring and Results
// ============================================================================

message StreamExecutionRequest {
  string execution_id = 1;
}

message ExecutionEvent {
  string execution_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  ExecutionEventType event_type = 3;
  string node_id = 4;  // Empty for DAG-level events
  google.protobuf.Struct event_data = 5;
}

enum ExecutionEventType {
  EXECUTION_EVENT_TYPE_UNSPECIFIED = 0;
  EXECUTION_STARTED = 1;
  NODE_STARTED = 2;
  NODE_COMPLETED = 3;
  NODE_FAILED = 4;
  EXECUTION_COMPLETED = 5;
  EXECUTION_FAILED = 6;
  EXECUTION_CANCELLED = 7;
}

enum ExecutionStatus {
  EXECUTION_STATUS_UNSPECIFIED = 0;
  PENDING = 1;
  RUNNING = 2;
  COMPLETED = 3;
  FAILED = 4;
  CANCELLED = 5;
}

message GetExecutionRequest {
  string execution_id = 1;
}

message GetExecutionResponse {
  unhinged.common.v1.StandardResponse response = 1;
  string execution_id = 2;
  string graph_id = 3;                     // References Graph.id
  ExecutionStatus status = 4;
  google.protobuf.Timestamp started_at = 5;
  google.protobuf.Timestamp completed_at = 6;
  google.protobuf.Struct result_data = 7;  // Final output
  string error_message = 8;
  repeated NodeExecution node_executions = 9;
}

message NodeExecution {
  string node_id = 1;                      // References Node.id
  ExecutionStatus status = 2;
  google.protobuf.Timestamp started_at = 3;
  google.protobuf.Timestamp completed_at = 4;
  google.protobuf.Struct output_data = 5;
  string error_message = 6;
}

message CancelExecutionRequest {
  string execution_id = 1;
}

message CancelExecutionResponse {
  unhinged.common.v1.StandardResponse response = 1;
}
