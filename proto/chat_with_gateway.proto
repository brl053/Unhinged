// ============================================================================
// Chat Service with Gateway Annotations - Example Implementation
// ============================================================================
//
// @file chat_with_gateway.proto
// @version 1.0.0
// @author Unhinged Team
// @date 2025-10-06
// @description Example of chat.proto enhanced with gateway annotations
//
// This demonstrates how to use the gateway annotations to automatically
// generate REST endpoints, WebSocket handlers, and SSE streams from your
// existing gRPC service definitions.
// ============================================================================

syntax = "proto3";

package unhinged.chat.v1;

import "common.proto";
import "gateway_annotations.proto";

option java_package = "unhinged.chat";
option java_multiple_files = true;
option java_outer_classname = "ChatWithGatewayProto";

// ============================================================================
// Chat Service with Gateway Annotations
// ============================================================================

/**
 * Chat service with automatic gateway generation
 *
 * Service-level configuration applies to all methods unless overridden
 */
service ChatService {
  option (unhinged.gateway.service) = {
    base_path: "/api/v1/chat"
    version: "v1"
    title: "Unhinged Chat API"
    description: "Real-time chat and conversation management"
    tags: ["chat", "conversations", "messaging"]
    default_auth_required: true
    default_scopes: ["chat:read", "chat:write"]
    default_cors: {
      allowed_origins: ["http://localhost:3000", "https://app.unhinged.ai"]
      allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
      allowed_headers: ["Authorization", "Content-Type", "X-Request-ID"]
      allow_credentials: true
      max_age_seconds: 3600
    }
  };

  // ========================================================================
  // Conversation Management - REST Endpoints
  // ========================================================================

  /**
   * Create a new conversation
   * Generates: POST /api/v1/chat/conversations
   */
  rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse) {
    option (unhinged.gateway.http) = {
      method: "POST"
      path: "/conversations"
      body: "*"
      summary: "Create a new conversation"
      description: "Creates a new conversation with optional initial message"
      tags: ["conversations"]
      rate_limit: {
        requests_per_minute: 10
        key_strategy: "user"
      }
    };
  }

  /**
   * Get conversation details
   * Generates: GET /api/v1/chat/conversations/{conversation_id}
   */
  rpc GetConversation(GetConversationRequest) returns (GetConversationResponse) {
    option (unhinged.gateway.http) = {
      method: "GET"
      path: "/conversations/{conversation_id}"
      summary: "Get conversation details"
      description: "Retrieves conversation metadata and recent messages"
      tags: ["conversations"]
      cache: {
        ttl_seconds: 300
        cache_keys: ["conversation_id", "user_id"]
        private_cache: true
      }
    };
  }

  /**
   * List user conversations with pagination
   * Generates: GET /api/v1/chat/conversations
   */
  rpc ListConversations(ListConversationsRequest) returns (ListConversationsResponse) {
    option (unhinged.gateway.http) = {
      method: "GET"
      path: "/conversations"
      query_params: ["page_size", "page_token", "filter"]
      summary: "List conversations"
      description: "Lists user conversations with pagination and filtering"
      tags: ["conversations"]
      cache: {
        ttl_seconds: 60
        cache_keys: ["user_id", "page_token"]
        private_cache: true
      }
    };
  }

  /**
   * Update conversation metadata
   * Generates: PUT /api/v1/chat/conversations/{conversation_id}
   */
  rpc UpdateConversation(UpdateConversationRequest) returns (UpdateConversationResponse) {
    option (unhinged.gateway.http) = {
      method: "PUT"
      path: "/conversations/{conversation_id}"
      body: "*"
      summary: "Update conversation"
      description: "Updates conversation title, settings, or metadata"
      tags: ["conversations"]
      rate_limit: {
        requests_per_minute: 30
        key_strategy: "user"
      }
    };
  }

  /**
   * Delete a conversation
   * Generates: DELETE /api/v1/chat/conversations/{conversation_id}
   */
  rpc DeleteConversation(DeleteConversationRequest) returns (DeleteConversationResponse) {
    option (unhinged.gateway.http) = {
      method: "DELETE"
      path: "/conversations/{conversation_id}"
      summary: "Delete conversation"
      description: "Permanently deletes a conversation and all its messages"
      tags: ["conversations"]
      rate_limit: {
        requests_per_minute: 5
        key_strategy: "user"
      }
    };
  }

  // ========================================================================
  // Message Management - REST Endpoints
  // ========================================================================

  /**
   * Send a message to a conversation
   * Generates: POST /api/v1/chat/conversations/{conversation_id}/messages
   */
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {
    option (unhinged.gateway.http) = {
      method: "POST"
      path: "/conversations/{conversation_id}/messages"
      body: "*"
      summary: "Send a message"
      description: "Sends a new message to the conversation"
      tags: ["messages"]
      rate_limit: {
        requests_per_minute: 60
        key_strategy: "user"
      }
    };
  }

  /**
   * Get messages from a conversation
   * Generates: GET /api/v1/chat/conversations/{conversation_id}/messages
   */
  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse) {
    option (unhinged.gateway.http) = {
      method: "GET"
      path: "/conversations/{conversation_id}/messages"
      query_params: ["page_size", "page_token", "since_timestamp"]
      summary: "Get conversation messages"
      description: "Retrieves messages from a conversation with pagination"
      tags: ["messages"]
      cache: {
        ttl_seconds: 30
        cache_keys: ["conversation_id", "page_token"]
        private_cache: true
      }
    };
  }

  // ========================================================================
  // Real-time Communication - WebSocket & SSE
  // ========================================================================

  /**
   * Real-time chat streaming (bidirectional)
   * Generates: WebSocket /ws/chat/{conversation_id}
   */
  rpc StreamChat(stream StreamChatRequest) returns (stream StreamChatResponse) {
    option (unhinged.gateway.websocket) = {
      path: "/ws/chat/{conversation_id}"
      event_type: "chat_message"
      auth_required: true
      required_scopes: ["chat:stream"]
      max_connections_per_user: 5
      idle_timeout_seconds: 300
      request_field: "message"
      response_field: "data"
      broadcast: true
      broadcast_filter: "conversation_id == request.conversation_id"
      rate_limit: {
        requests_per_minute: 120
        key_strategy: "user"
      }
      summary: "Real-time chat streaming"
      description: "Bidirectional streaming for real-time chat messages"
      tags: ["streaming", "websocket"]
    };
  }

  /**
   * Conversation events stream (server-to-client)
   * Generates: SSE /api/v1/chat/conversations/{conversation_id}/events
   */
  rpc StreamConversationEvents(StreamEventsRequest) returns (stream StreamEventsResponse) {
    option (unhinged.gateway.sse) = {
      path: "/conversations/{conversation_id}/events"
      event_type: "conversation_event"
      auth_required: true
      required_scopes: ["chat:events"]
      keepalive_interval_seconds: 30
      max_stream_duration_seconds: 3600
      data_field: "event_data"
      id_field: "event_id"
      json_encode: true
      filter_params: ["event_types", "since_timestamp"]
      routing_key: "conversation_id"
      summary: "Conversation events stream"
      description: "Server-sent events for conversation updates and notifications"
      tags: ["streaming", "sse"]
    };
  }

  /**
   * Global user events (for multiple conversations)
   * Generates: SSE /api/v1/chat/users/{user_id}/events
   */
  rpc StreamUserEvents(StreamUserEventsRequest) returns (stream StreamUserEventsResponse) {
    option (unhinged.gateway.sse) = {
      path: "/users/{user_id}/events"
      event_type: "user_event"
      auth_required: true
      required_scopes: ["chat:user_events"]
      keepalive_interval_seconds: 30
      max_stream_duration_seconds: 7200
      data_field: "event_data"
      id_field: "event_id"
      json_encode: true
      filter_params: ["conversation_ids", "event_types"]
      routing_key: "user_id"
      summary: "User events stream"
      description: "Server-sent events for all user conversations and notifications"
      tags: ["streaming", "sse", "notifications"]
    };
  }

  // ========================================================================
  // Legacy Support - Long Polling
  // ========================================================================

  /**
   * Poll for new messages (legacy client support)
   * Generates: GET /api/v1/chat/conversations/{conversation_id}/poll
   */
  rpc PollMessages(PollMessagesRequest) returns (PollMessagesResponse) {
    option (unhinged.gateway.long_polling) = {
      path: "/conversations/{conversation_id}/poll"
      timeout_seconds: 30
      max_events: 50
      auth_required: true
      required_scopes: ["chat:read"]
      events_field: "messages"
      cursor_field: "next_cursor"
      include_metadata: true
      summary: "Poll for new messages"
      description: "Long polling endpoint for clients that don't support WebSocket/SSE"
      tags: ["polling", "legacy"]
    };
  }
}