// ============================================================================
// Chat Service Protocol Buffer Definition - DRY Refactored
// ============================================================================
//
// @file chat.proto
// @version 1.1.0
// @author Unhinged Team
// @date 2025-01-04
// @description gRPC service definition for chat and conversation management
//
// This service provides:
// - Conversation lifecycle management using common patterns
// - Message sending with universal attachment support
// - Real-time streaming using common StreamChunk pattern
// - Standardized pagination and error handling
//
// DRY Benefits:
// - Uses common.proto for metadata, pagination, streaming, errors
// - Consistent patterns across all services
// - Reduced duplication and maintenance overhead
// ============================================================================

syntax = "proto3";

package unhinged.chat.v1;

import "common.proto";

option java_package = "unhinged.chat";
option java_multiple_files = true;
option java_outer_classname = "ChatProto";

// ============================================================================
// Chat Service Definition
// ============================================================================

/**
 * Chat service for conversation and message management
 * 
 * Uses common patterns for consistent API behavior across services
 */
service ChatService {
  // Conversation management
  rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse);
  rpc GetConversation(GetConversationRequest) returns (GetConversationResponse);
  rpc ListConversations(ListConversationsRequest) returns (ListConversationsResponse);
  rpc UpdateConversation(UpdateConversationRequest) returns (UpdateConversationResponse);
  rpc DeleteConversation(DeleteConversationRequest) returns (DeleteConversationResponse);
  
  // Message management
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
  rpc UpdateMessage(UpdateMessageRequest) returns (UpdateMessageResponse);
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);
  
  // Real-time streaming (uses common StreamChunk pattern)
  rpc StreamChat(StreamChatRequest) returns (stream common.v1.StreamChunk);
  rpc SubscribeToConversation(SubscribeRequest) returns (stream common.v1.StreamChunk);
  
  // Standard health check
  rpc HealthCheck(common.v1.HealthCheckRequest) returns (common.v1.HealthCheckResponse);
}

// ============================================================================
// Core Message Types (DRY Refactored)
// ============================================================================

/**
 * Conversation entity using common resource metadata pattern
 */
message Conversation {
  common.v1.ResourceMetadata metadata = 1;  // ← DRY! (id, team_id, timestamps, etc.)
  
  string title = 2;
  string description = 3;
  ConversationSettings settings = 4;
  
  int32 message_count = 5;
  ConversationStatus status = 6;
  repeated string participant_ids = 7;
}

/**
 * Conversation configuration for LLM interactions
 */
message ConversationSettings {
  string model = 1;                 // LLM model to use
  float temperature = 2;
  int32 max_tokens = 3;
  repeated string stop_sequences = 4;
  
  bool include_context = 5;         // Pull from DocumentStore
  int32 context_window_size = 6;
  
  bool enable_tools = 7;
  repeated string available_tools = 8;
}

/**
 * Conversation status for lifecycle management
 */
enum ConversationStatus {
  CONVERSATION_STATUS_UNSPECIFIED = 0;
  CONVERSATION_STATUS_ACTIVE = 1;
  CONVERSATION_STATUS_ARCHIVED = 2;
  CONVERSATION_STATUS_DELETED = 3;
  CONVERSATION_STATUS_LOCKED = 4;
}

/**
 * Chat message using common patterns
 */
message ChatMessage {
  common.v1.ResourceMetadata metadata = 1;  // ← DRY! (id, timestamps, etc.)
  
  string conversation_id = 2;
  MessageRole role = 3;
  string content = 4;
  repeated common.v1.Attachment attachments = 5;  // ← DRY! (universal attachments)
  
  MessageStatus status = 6;
  string parent_message_id = 7;     // For threading
  
  // LLM-specific fields
  common.v1.UsageMetrics usage = 8;  // ← DRY! (token usage, etc.)
  repeated ToolCall tool_calls = 9;
}

/**
 * Message role in conversation
 */
enum MessageRole {
  MESSAGE_ROLE_UNSPECIFIED = 0;
  MESSAGE_ROLE_USER = 1;
  MESSAGE_ROLE_ASSISTANT = 2;
  MESSAGE_ROLE_SYSTEM = 3;
  MESSAGE_ROLE_TOOL = 4;
}

/**
 * Message processing status
 */
enum MessageStatus {
  MESSAGE_STATUS_UNSPECIFIED = 0;
  MESSAGE_STATUS_SENT = 1;
  MESSAGE_STATUS_PROCESSING = 2;
  MESSAGE_STATUS_COMPLETED = 3;
  MESSAGE_STATUS_FAILED = 4;
  MESSAGE_STATUS_EDITED = 5;
  MESSAGE_STATUS_DELETED = 6;
}

/**
 * Tool call for function execution
 */
message ToolCall {
  string tool_call_id = 1;
  string tool_name = 2;
  string arguments = 3;             // JSON string
  string result = 4;                // JSON string
  ToolCallStatus status = 5;
}

/**
 * Tool call execution status
 */
enum ToolCallStatus {
  TOOL_CALL_STATUS_UNSPECIFIED = 0;
  TOOL_CALL_STATUS_PENDING = 1;
  TOOL_CALL_STATUS_EXECUTING = 2;
  TOOL_CALL_STATUS_COMPLETED = 3;
  TOOL_CALL_STATUS_FAILED = 4;
}

// ============================================================================
// Request/Response Messages (Using Common Patterns)
// ============================================================================

message CreateConversationRequest {
  string team_id = 1;
  string namespace_id = 2;
  string title = 3;
  string description = 4;
  ConversationSettings settings = 5;
}

message CreateConversationResponse {
  common.v1.StandardResponse response = 1;  // ← DRY! (success, message, error)
  Conversation conversation = 2;
}

message GetConversationRequest {
  string conversation_id = 1;
  bool include_messages = 2;
  int32 message_limit = 3;
}

message GetConversationResponse {
  common.v1.StandardResponse response = 1;  // ← DRY!
  Conversation conversation = 2;
  repeated ChatMessage messages = 3;
}

message ListConversationsRequest {
  string team_id = 1;
  string namespace_id = 2;
  ConversationStatus status = 3;
  common.v1.PaginationRequest pagination = 4;  // ← DRY!
  repeated common.v1.Filter filters = 5;       // ← DRY!
}

message ListConversationsResponse {
  common.v1.StandardResponse response = 1;     // ← DRY!
  repeated Conversation conversations = 2;
  common.v1.PaginationResponse pagination = 3; // ← DRY!
}

message SendMessageRequest {
  string conversation_id = 1;
  MessageRole role = 2;
  string content = 3;
  repeated common.v1.Attachment attachments = 4;  // ← DRY!
  string parent_message_id = 5;
}

message SendMessageResponse {
  common.v1.StandardResponse response = 1;  // ← DRY!
  ChatMessage message = 2;
}

message StreamChatRequest {
  string conversation_id = 1;
  string content = 2;
  repeated common.v1.Attachment attachments = 3;  // ← DRY!
  StreamOptions options = 4;
}

message StreamOptions {
  string model = 1;
  int32 max_tokens = 2;
  float temperature = 3;
  bool include_context = 4;
  bool enable_tools = 5;
}

// Stream chunks use common.v1.StreamChunk with typed payload
message ChatChunkPayload {
  string message_id = 1;
  string conversation_id = 2;
  MessageRole role = 3;
  string content = 4;
  repeated ToolCall tool_calls = 5;
}

message SubscribeRequest {
  string conversation_id = 1;
  repeated UpdateType event_types = 2;
}

enum UpdateType {
  UPDATE_TYPE_UNSPECIFIED = 0;
  UPDATE_TYPE_MESSAGE_SENT = 1;
  UPDATE_TYPE_MESSAGE_UPDATED = 2;
  UPDATE_TYPE_MESSAGE_DELETED = 3;
  UPDATE_TYPE_TYPING_STARTED = 4;
  UPDATE_TYPE_TYPING_STOPPED = 5;
  UPDATE_TYPE_PARTICIPANT_JOINED = 6;
  UPDATE_TYPE_PARTICIPANT_LEFT = 7;
}

message GetMessagesRequest {
  string conversation_id = 1;
  common.v1.PaginationRequest pagination = 2;  // ← DRY!
  MessageRole role_filter = 3;
  repeated common.v1.Filter filters = 4;       // ← DRY!
}

message GetMessagesResponse {
  common.v1.StandardResponse response = 1;     // ← DRY!
  repeated ChatMessage messages = 2;
  common.v1.PaginationResponse pagination = 3; // ← DRY!
}

message UpdateConversationRequest {
  string conversation_id = 1;
  string title = 2;
  string description = 3;
  ConversationSettings settings = 4;
}

message UpdateConversationResponse {
  common.v1.StandardResponse response = 1;  // ← DRY!
  Conversation conversation = 2;
}

message UpdateMessageRequest {
  string message_id = 1;
  string content = 2;
}

message UpdateMessageResponse {
  common.v1.StandardResponse response = 1;  // ← DRY!
  ChatMessage message = 2;
}

message DeleteConversationRequest {
  string conversation_id = 1;
  bool hard_delete = 2;             // true = permanent, false = soft delete
}

message DeleteConversationResponse {
  common.v1.StandardResponse response = 1;  // ← DRY!
}

message DeleteMessageRequest {
  string message_id = 1;
  bool hard_delete = 2;
}

message DeleteMessageResponse {
  common.v1.StandardResponse response = 1;  // ← DRY!
}
