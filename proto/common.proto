// ============================================================================
// Common Types - Universal Patterns for All Services
// ============================================================================
//
// @file common.proto
// @version 1.1.0
// @author Unhinged Team
// @date 2025-01-04
// @description Shared types and patterns used across all Unhinged services
//
// This file defines universal patterns to eliminate duplication:
// - Resource metadata (id, timestamps, ownership)
// - Pagination (requests, responses, cursors)
// - Streaming chunks (universal streaming pattern)
// - Usage metrics (tokens, audio, data)
// - Error handling (standardized error responses)
// - Attachments (files, media, documents)
// - Health checks (service monitoring)
//
// DRY Principle: Define once, use everywhere
// ============================================================================

syntax = "proto3";

package unhinged.common.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/duration.proto";

option java_package = "unhinged.common";
option java_multiple_files = true;
option java_outer_classname = "CommonProto";

// ============================================================================
// Universal Resource Pattern
// ============================================================================

/**
 * Standard resource metadata for all entities
 * 
 * Every resource in the system (conversations, documents, audio, etc.)
 * should include this metadata for consistent ownership, auditing,
 * and lifecycle management.
 */
message ResourceMetadata {
  string resource_id = 1;           // UUID of the resource
  string team_id = 2;               // Team ownership for multi-tenancy
  string namespace_id = 3;          // Environment isolation
  string created_by = 4;            // User who created the resource
  
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  
  google.protobuf.Struct custom_metadata = 7;  // Service-specific metadata
  int32 version = 8;                // Optimistic locking version
  repeated string tags = 9;         // User-defined tags
}

/**
 * Lightweight reference to any resource
 * 
 * Used for linking between resources without full object embedding
 */
message ResourceReference {
  string resource_type = 1;         // "conversation", "document", "audio"
  string resource_id = 2;           // UUID of the referenced resource
  string display_name = 3;          // Human-readable identifier
  string url = 4;                   // Optional: direct access URL
}

// ============================================================================
// Pagination Pattern
// ============================================================================

/**
 * Universal pagination request
 * 
 * Supports cursor-based pagination for consistent performance
 * across large datasets.
 */
message PaginationRequest {
  int32 page_size = 1;              // Default: 50, Max: 1000
  string page_token = 2;            // Opaque cursor for next page
  string order_by = 3;              // "created_at DESC", "name ASC"
}

/**
 * Universal pagination response
 * 
 * Provides consistent pagination metadata across all list operations
 */
message PaginationResponse {
  string next_page_token = 1;       // Cursor for next page (empty if last page)
  int32 total_count = 2;            // Optional: expensive to compute
  bool has_more = 3;                // Whether more results exist
  int32 page_size = 4;              // Actual page size returned
}

// ============================================================================
// Streaming Pattern
// ============================================================================

/**
 * Universal streaming chunk
 * 
 * Used for all streaming operations (chat, audio, LLM completions)
 * to provide consistent streaming behavior across services.
 */
message StreamChunk {
  string stream_id = 1;             // Unique identifier for this stream
  int32 sequence_number = 2;        // Ordering within stream
  ChunkType type = 3;               // Type of chunk content
  
  // Payload (use one of these)
  bytes data = 4;                   // Binary payload
  string text = 5;                  // Text payload
  google.protobuf.Struct structured = 6;  // Structured data payload
  
  google.protobuf.Struct metadata = 7;    // Chunk-specific metadata
  bool is_final = 8;                // Last chunk in stream
  ChunkStatus status = 9;           // Processing status
  google.protobuf.Timestamp timestamp = 10;
}

/**
 * Chunk type classification
 */
enum ChunkType {
  CHUNK_TYPE_UNSPECIFIED = 0;
  CHUNK_TYPE_DATA = 1;              // Primary content
  CHUNK_TYPE_METADATA = 2;          // Metadata update
  CHUNK_TYPE_ERROR = 3;             // Error information
  CHUNK_TYPE_HEARTBEAT = 4;         // Keep-alive signal
  CHUNK_TYPE_PROGRESS = 5;          // Progress update
}

/**
 * Chunk processing status
 */
enum ChunkStatus {
  CHUNK_STATUS_UNSPECIFIED = 0;
  CHUNK_STATUS_PROCESSING = 1;      // Still being processed
  CHUNK_STATUS_COMPLETE = 2;        // Successfully processed
  CHUNK_STATUS_ERROR = 3;           // Processing failed
  CHUNK_STATUS_CANCELLED = 4;       // Processing cancelled
}

// ============================================================================
// Usage Metrics Pattern
// ============================================================================

/**
 * Universal usage metrics
 * 
 * Tracks resource consumption across different service types
 * for billing, monitoring, and optimization.
 */
message UsageMetrics {
  oneof metric {
    TokenUsage tokens = 1;          // LLM token consumption
    AudioUsage audio = 2;           // Audio processing metrics
    DataUsage data = 3;             // Data transfer metrics
    ComputeUsage compute = 4;       // Compute resource usage
  }
  
  google.protobuf.Duration processing_time = 5;
  google.protobuf.Timestamp recorded_at = 6;
  float cost_usd = 7;               // Estimated cost in USD
}

/**
 * Token usage for LLM operations
 */
message TokenUsage {
  int32 prompt_tokens = 1;          // Input tokens
  int32 completion_tokens = 2;      // Output tokens
  int32 total_tokens = 3;           // Total tokens used
  int32 cached_tokens = 4;          // Tokens served from cache
  string model = 5;                 // Model used for token counting
}

/**
 * Audio processing usage
 */
message AudioUsage {
  google.protobuf.Duration duration = 1;     // Audio duration processed
  int64 bytes_processed = 2;        // Audio data size
  int32 sample_rate = 3;            // Audio sample rate
  int32 channels = 4;               // Number of audio channels
  string format = 5;                // Audio format (wav, mp3, etc.)
}

/**
 * Data transfer usage
 */
message DataUsage {
  int64 bytes_read = 1;             // Data read from storage
  int64 bytes_written = 2;          // Data written to storage
  int32 records_processed = 3;      // Number of records processed
  int32 api_calls = 4;              // Number of API calls made
}

/**
 * Compute resource usage
 */
message ComputeUsage {
  google.protobuf.Duration cpu_time = 1;     // CPU time consumed
  int64 memory_bytes = 2;           // Peak memory usage
  int64 storage_bytes = 3;          // Storage space used
  int32 gpu_seconds = 4;            // GPU time (if applicable)
}

// ============================================================================
// Attachment Pattern
// ============================================================================

/**
 * Universal file attachment
 * 
 * Used across all services for file uploads, media, documents
 */
message Attachment {
  string attachment_id = 1;         // UUID of the attachment
  AttachmentType type = 2;          // Classification of attachment
  
  string url = 3;                   // Storage URL (internal or external)
  string filename = 4;              // Original filename
  int64 size_bytes = 5;             // File size in bytes
  string mime_type = 6;             // MIME type
  
  string thumbnail_url = 7;         // Optional: thumbnail for images/videos
  google.protobuf.Struct metadata = 8;       // File-specific metadata
  google.protobuf.Timestamp uploaded_at = 9;
  string uploaded_by = 10;          // User who uploaded the file
}

/**
 * Attachment type classification
 */
enum AttachmentType {
  ATTACHMENT_TYPE_UNSPECIFIED = 0;
  ATTACHMENT_TYPE_IMAGE = 1;        // Images (jpg, png, gif, etc.)
  ATTACHMENT_TYPE_DOCUMENT = 2;     // Documents (pdf, docx, txt, etc.)
  ATTACHMENT_TYPE_AUDIO = 3;        // Audio files (mp3, wav, etc.)
  ATTACHMENT_TYPE_VIDEO = 4;        // Video files (mp4, avi, etc.)
  ATTACHMENT_TYPE_ARCHIVE = 5;      // Archives (zip, tar, etc.)
  ATTACHMENT_TYPE_CODE = 6;         // Source code files
  ATTACHMENT_TYPE_SPREADSHEET = 7;  // Excel, CSV, etc.
  ATTACHMENT_TYPE_PRESENTATION = 8; // PowerPoint, etc.
}

// ============================================================================
// Error Handling Pattern
// ============================================================================

/**
 * Standardized error response
 * 
 * Provides consistent error handling across all services
 * with detailed field-level validation errors.
 */
message Error {
  ErrorCode code = 1;               // Standard error code
  string message = 2;               // Human-readable error message
  string details = 3;               // Additional error details
  repeated ErrorField field_errors = 4;      // Field-specific validation errors
  google.protobuf.Struct debug_info = 5;     // Debug info (dev/staging only)
  string request_id = 6;            // Request ID for tracing
}

/**
 * Standard error codes aligned with gRPC status codes
 */
enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  ERROR_CODE_INVALID_ARGUMENT = 1;  // Invalid request parameters
  ERROR_CODE_NOT_FOUND = 2;         // Resource not found
  ERROR_CODE_PERMISSION_DENIED = 3; // Access denied
  ERROR_CODE_UNAUTHENTICATED = 4;   // Authentication required
  ERROR_CODE_RESOURCE_EXHAUSTED = 5; // Rate limit or quota exceeded
  ERROR_CODE_INTERNAL = 6;          // Internal server error
  ERROR_CODE_UNAVAILABLE = 7;       // Service temporarily unavailable
  ERROR_CODE_DEADLINE_EXCEEDED = 8; // Request timeout
  ERROR_CODE_ALREADY_EXISTS = 9;    // Resource already exists
  ERROR_CODE_CANCELLED = 10;        // Request cancelled
}

/**
 * Field-specific validation error
 */
message ErrorField {
  string field = 1;                 // Field name (dot notation for nested)
  string message = 2;               // Field-specific error message
  string code = 3;                  // Field error code (optional)
}

// ============================================================================
// Filtering Pattern
// ============================================================================

/**
 * Universal filtering for list operations
 * 
 * Provides consistent filtering capabilities across all services
 */
message Filter {
  string field = 1;                 // Field to filter on (dot notation)
  FilterOperator operator = 2;      // Comparison operator
  string value = 3;                 // Filter value
  repeated string values = 4;       // Multiple values for IN operator
}

/**
 * Filter operators
 */
enum FilterOperator {
  FILTER_OPERATOR_UNSPECIFIED = 0;
  FILTER_OPERATOR_EQUALS = 1;       // field = value
  FILTER_OPERATOR_NOT_EQUALS = 2;   // field != value
  FILTER_OPERATOR_GREATER_THAN = 3; // field > value
  FILTER_OPERATOR_LESS_THAN = 4;    // field < value
  FILTER_OPERATOR_CONTAINS = 5;     // field LIKE %value%
  FILTER_OPERATOR_IN = 6;           // field IN (values)
  FILTER_OPERATOR_NOT_IN = 7;       // field NOT IN (values)
  FILTER_OPERATOR_IS_NULL = 8;      // field IS NULL
  FILTER_OPERATOR_IS_NOT_NULL = 9;  // field IS NOT NULL
}

// ============================================================================
// Health Check Pattern
// ============================================================================

/**
 * Universal health check request
 */
message HealthCheckRequest {
  string service = 1;               // Optional: specific service component
  bool include_dependencies = 2;    // Check dependent services too
}

/**
 * Universal health check response
 */
message HealthCheckResponse {
  HealthStatus status = 1;          // Overall health status
  string message = 2;               // Human-readable status message
  map<string, string> details = 3;  // Component-specific health details
  google.protobuf.Timestamp checked_at = 4;
  google.protobuf.Duration response_time = 5;
}

/**
 * Health status levels
 */
enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0;
  HEALTH_STATUS_HEALTHY = 1;        // All systems operational
  HEALTH_STATUS_DEGRADED = 2;       // Functional but with issues
  HEALTH_STATUS_UNHEALTHY = 3;      // Not functioning properly
  HEALTH_STATUS_UNKNOWN = 4;        // Cannot determine status
}

// ============================================================================
// Response Wrapper Pattern
// ============================================================================

/**
 * Standard response wrapper for all operations
 * 
 * Provides consistent success/error handling across all services
 */
message StandardResponse {
  bool success = 1;                 // Operation success indicator
  string message = 2;               // Human-readable result message
  Error error = 3;                  // Error details (if success = false)
  google.protobuf.Struct metadata = 4;       // Operation-specific metadata
  string request_id = 5;            // Request ID for tracing
}

// ============================================================================
// Audit Trail Pattern
// ============================================================================

/**
 * Audit information for all operations
 * 
 * Tracks who did what when for compliance and debugging
 */
message AuditInfo {
  string user_id = 1;               // User who performed the action
  string session_id = 2;            // Session identifier
  string ip_address = 3;            // Client IP address
  string user_agent = 4;            // Client user agent
  google.protobuf.Timestamp timestamp = 5;
  string action = 6;                // Action performed
  google.protobuf.Struct context = 7;        // Additional context
}
