syntax = "proto3";

package unhinged.messaging;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";

// ============================================================================
// Messaging API v1.0.0
// ============================================================================
//
// @version 1.0.0
// @author Unhinged Team
// @date 2025-01-04
// @description Inter-service messaging for LLM interactions and agent communication
// @breaking false
//
// This schema provides messaging infrastructure for:
// - LLM prompt/response handling
// - Agent-to-agent communication
// - Tool invocation and results
// - Workflow orchestration messages
// - Real-time UI updates
// ============================================================================

// ============================================================================
// Core Message Structure
// ============================================================================

// Universal message envelope for all inter-service communication
message Message {
  // Message identification
  string message_id = 1;
  string message_type = 2;
  string message_version = 3;
  
  // Routing and delivery
  string from_service = 4;
  string to_service = 5;
  string routing_key = 6;
  
  // Timing and correlation
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp expires_at = 8;
  string correlation_id = 9;
  string reply_to = 10;
  
  // Context
  string user_id = 11;
  string session_id = 12;
  string trace_id = 13;
  
  // Message payload (one of the specific message types)
  oneof payload {
    LLMMessage llm_message = 20;
    AgentMessage agent_message = 21;
    ToolMessage tool_message = 22;
    WorkflowMessage workflow_message = 23;
    UIMessage ui_message = 24;
    SystemMessage system_message = 25;
  }
  
  // Delivery options
  MessageOptions options = 30;
  google.protobuf.Struct metadata = 31;
}

message MessageOptions {
  // Delivery guarantees
  string delivery_mode = 1; // "fire_and_forget", "at_least_once", "exactly_once"
  int32 retry_attempts = 2;
  int32 retry_delay_ms = 3;
  
  // Priority and ordering
  int32 priority = 4; // 0-9, higher is more urgent
  bool preserve_order = 5;
  
  // Response handling
  bool expect_reply = 6;
  int32 reply_timeout_ms = 7;
}

// ============================================================================
// LLM Messages
// ============================================================================

message LLMMessage {
  string interaction_id = 1;
  LLMMessageType message_type = 2;
  
  oneof message_data {
    LLMPromptRequest prompt_request = 10;
    LLMPromptResponse prompt_response = 11;
    LLMStreamChunk stream_chunk = 12;
    LLMError llm_error = 13;
    LLMCancel cancel_request = 14;
  }
}

enum LLMMessageType {
  LLM_PROMPT_REQUEST = 0;
  LLM_PROMPT_RESPONSE = 1;
  LLM_STREAM_CHUNK = 2;
  LLM_ERROR = 3;
  LLM_CANCEL = 4;
}

message LLMPromptRequest {
  // Model configuration
  string model_name = 1;
  string provider = 2; // "openai", "anthropic", "local"
  
  // Prompt content
  string system_prompt = 3;
  string user_prompt = 4;
  repeated ContextDocument context_documents = 5;
  
  // Generation parameters
  int32 max_tokens = 6;
  float temperature = 7;
  float top_p = 8;
  repeated string stop_sequences = 9;
  
  // Streaming options
  bool stream_response = 10;
  string stream_callback_url = 11;
  
  // Context and metadata
  google.protobuf.Struct prompt_metadata = 12;
  repeated string tools_available = 13;
}

message ContextDocument {
  string document_id = 1;
  string document_type = 2;
  string content = 3;
  google.protobuf.Struct metadata = 4;
  float relevance_score = 5;
}

message LLMPromptResponse {
  // Response content
  string response_text = 1;
  string finish_reason = 2; // "stop", "length", "content_filter", "tool_calls"
  
  // Token usage
  int32 prompt_tokens = 3;
  int32 completion_tokens = 4;
  int32 total_tokens = 5;
  
  // Timing and performance
  float response_time_ms = 6;
  float tokens_per_second = 7;
  
  // Tool calls (if any)
  repeated ToolCall tool_calls = 8;
  
  // Response metadata
  google.protobuf.Struct response_metadata = 9;
}

message LLMStreamChunk {
  string chunk_text = 1;
  int32 chunk_index = 2;
  bool is_final = 3;
  repeated ToolCall partial_tool_calls = 4;
}

message LLMError {
  string error_code = 1;
  string error_message = 2;
  string error_type = 3; // "rate_limit", "context_length", "content_filter", "model_error"
  bool is_retryable = 4;
  int32 retry_after_seconds = 5;
}

message LLMCancel {
  string reason = 1;
}

message ToolCall {
  string tool_id = 1;
  string tool_name = 2;
  google.protobuf.Struct tool_arguments = 3;
}

// ============================================================================
// Agent Messages
// ============================================================================

message AgentMessage {
  string agent_id = 1;
  string execution_id = 2;
  AgentMessageType message_type = 3;
  
  oneof message_data {
    AgentTaskRequest task_request = 10;
    AgentTaskResponse task_response = 11;
    AgentStepUpdate step_update = 12;
    AgentCollaboration collaboration = 13;
    AgentError agent_error = 14;
  }
}

enum AgentMessageType {
  AGENT_TASK_REQUEST = 0;
  AGENT_TASK_RESPONSE = 1;
  AGENT_STEP_UPDATE = 2;
  AGENT_COLLABORATION = 3;
  AGENT_ERROR = 4;
}

message AgentTaskRequest {
  string task_description = 1;
  string task_type = 2;
  google.protobuf.Struct task_parameters = 3;
  repeated string required_capabilities = 4;
  google.protobuf.Struct context = 5;
  int32 priority = 6;
  google.protobuf.Timestamp deadline = 7;
}

message AgentTaskResponse {
  string status = 1; // "accepted", "rejected", "completed", "failed"
  google.protobuf.Struct result = 2;
  string completion_message = 3;
  repeated string artifacts_created = 4;
  float execution_time_ms = 5;
}

message AgentStepUpdate {
  int32 step_number = 1;
  string step_description = 2;
  string step_status = 3; // "started", "in_progress", "completed", "failed"
  google.protobuf.Struct step_data = 4;
  float progress_percentage = 5;
}

message AgentCollaboration {
  string collaboration_type = 1; // "request_help", "offer_help", "share_context", "delegate_task"
  string target_agent_id = 2;
  google.protobuf.Struct collaboration_data = 3;
}

message AgentError {
  string error_code = 1;
  string error_message = 2;
  string error_context = 3;
  bool is_recoverable = 4;
}

// ============================================================================
// Tool Messages
// ============================================================================

message ToolMessage {
  string tool_id = 1;
  string tool_name = 2;
  string tool_version = 3;
  ToolMessageType message_type = 4;
  
  oneof message_data {
    ToolInvocation invocation = 10;
    ToolResult result = 11;
    ToolError tool_error = 12;
    ToolRegistration registration = 13;
  }
}

enum ToolMessageType {
  TOOL_INVOCATION = 0;
  TOOL_RESULT = 1;
  TOOL_ERROR = 2;
  TOOL_REGISTRATION = 3;
}

message ToolInvocation {
  string invocation_id = 1;
  google.protobuf.Struct arguments = 2;
  google.protobuf.Struct context = 3;
  int32 timeout_seconds = 4;
}

message ToolResult {
  string invocation_id = 1;
  bool success = 2;
  google.protobuf.Any result_data = 3;
  string result_text = 4;
  repeated string artifacts = 5;
  float execution_time_ms = 6;
}

message ToolError {
  string invocation_id = 1;
  string error_code = 2;
  string error_message = 3;
  bool is_retryable = 4;
}

message ToolRegistration {
  string tool_name = 1;
  string tool_version = 2;
  string description = 3;
  google.protobuf.Struct schema = 4;
  repeated string capabilities = 5;
  string endpoint_url = 6;
}

// ============================================================================
// Workflow Messages
// ============================================================================

message WorkflowMessage {
  string workflow_id = 1;
  string execution_id = 2;
  WorkflowMessageType message_type = 3;
  
  oneof message_data {
    WorkflowTrigger trigger = 10;
    WorkflowStepExecution step_execution = 11;
    WorkflowCompletion completion = 12;
    WorkflowControl control = 13;
  }
}

enum WorkflowMessageType {
  WORKFLOW_TRIGGER = 0;
  WORKFLOW_STEP_EXECUTION = 1;
  WORKFLOW_COMPLETION = 2;
  WORKFLOW_CONTROL = 3;
}

message WorkflowTrigger {
  string trigger_type = 1;
  string trigger_source = 2;
  google.protobuf.Struct trigger_data = 3;
  google.protobuf.Struct initial_context = 4;
}

message WorkflowStepExecution {
  string step_id = 1;
  string step_type = 2;
  string step_status = 3;
  google.protobuf.Struct step_input = 4;
  google.protobuf.Struct step_output = 5;
  string next_step_id = 6;
}

message WorkflowCompletion {
  string completion_status = 1; // "success", "failure", "cancelled"
  google.protobuf.Struct final_output = 2;
  string completion_message = 3;
  int32 total_steps_executed = 4;
}

message WorkflowControl {
  string control_action = 1; // "pause", "resume", "cancel", "retry"
  string control_reason = 2;
  google.protobuf.Struct control_parameters = 3;
}

// ============================================================================
// UI Messages
// ============================================================================

message UIMessage {
  string component_id = 1;
  UIMessageType message_type = 2;
  
  oneof message_data {
    UIUpdate update = 10;
    UINotification notification = 11;
    UICommand command = 12;
  }
}

enum UIMessageType {
  UI_UPDATE = 0;
  UI_NOTIFICATION = 1;
  UI_COMMAND = 2;
}

message UIUpdate {
  string update_type = 1; // "data", "state", "progress", "error"
  google.protobuf.Struct update_data = 2;
  bool force_refresh = 3;
}

message UINotification {
  string notification_type = 1; // "info", "success", "warning", "error"
  string title = 2;
  string message = 3;
  int32 duration_ms = 4;
  bool dismissible = 5;
}

message UICommand {
  string command = 1; // "navigate", "refresh", "focus", "scroll"
  google.protobuf.Struct command_parameters = 2;
}

// ============================================================================
// System Messages
// ============================================================================

message SystemMessage {
  SystemMessageType message_type = 1;
  
  oneof message_data {
    ServiceDiscovery service_discovery = 10;
    HealthCheck health_check = 11;
    ConfigUpdate config_update = 12;
    ShutdownNotice shutdown_notice = 13;
  }
}

enum SystemMessageType {
  SERVICE_DISCOVERY = 0;
  HEALTH_CHECK = 1;
  CONFIG_UPDATE = 2;
  SHUTDOWN_NOTICE = 3;
}

message ServiceDiscovery {
  string service_name = 1;
  string service_version = 2;
  string endpoint_url = 3;
  repeated string capabilities = 4;
  string status = 5; // "starting", "ready", "stopping"
}

message HealthCheck {
  string service_name = 1;
  bool is_healthy = 2;
  string status_message = 3;
  google.protobuf.Struct health_details = 4;
}

message ConfigUpdate {
  string config_key = 1;
  google.protobuf.Any config_value = 2;
  string update_reason = 3;
}

message ShutdownNotice {
  string service_name = 1;
  string shutdown_reason = 2;
  int32 graceful_shutdown_seconds = 3;
}

// ============================================================================
// Message Service Operations
// ============================================================================

// Send a message
message SendMessageRequest {
  Message message = 1;
}

message SendMessageResponse {
  bool success = 1;
  string message_id = 2;
  string status = 3;
  string error_message = 4;
}

// Send multiple messages
message SendMessagesRequest {
  repeated Message messages = 1;
  bool atomic = 2; // All or nothing
}

message SendMessageResult {
  string message_id = 1;
  bool success = 2;
  string error_message = 3;
}

message SendMessagesResponse {
  bool success = 1;
  repeated SendMessageResult results = 2;
  int32 successful_count = 3;
  int32 failed_count = 4;
}

// Receive messages (polling)
message ReceiveMessagesRequest {
  string service_name = 1;
  repeated string message_types = 2;
  int32 max_messages = 3;
  int32 wait_time_seconds = 4;
}

message ReceiveMessagesResponse {
  repeated Message messages = 1;
  string receipt_handle = 2;
}

// Acknowledge message processing
message AcknowledgeMessageRequest {
  string message_id = 1;
  string receipt_handle = 2;
  bool success = 3;
  string error_message = 4;
}

message AcknowledgeMessageResponse {
  bool success = 1;
  string message = 2;
}

// Subscribe to message stream
message SubscribeToMessagesRequest {
  string service_name = 1;
  repeated string message_types = 2;
  MessageFilter filter = 3;
}

message MessageFilter {
  repeated string from_services = 1;
  repeated string user_ids = 2;
  repeated string session_ids = 3;
  google.protobuf.Struct metadata_filter = 4;
}

// Streaming response for message subscriptions
message MessageStreamResponse {
  oneof response_type {
    Message message = 1;
    StreamStatus status = 2;
    StreamError error = 3;
  }
}

message StreamStatus {
  string status = 1; // "connected", "disconnected", "error"
  int32 messages_received = 2;
}

message StreamError {
  string error_code = 1;
  string error_message = 2;
  bool is_recoverable = 3;
}

// ============================================================================
// Service Definition
// ============================================================================

service MessagingService {
  // Message sending
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  rpc SendMessages(SendMessagesRequest) returns (SendMessagesResponse);

  // Message receiving (polling)
  rpc ReceiveMessages(ReceiveMessagesRequest) returns (ReceiveMessagesResponse);
  rpc AcknowledgeMessage(AcknowledgeMessageRequest) returns (AcknowledgeMessageResponse);

  // Message streaming
  rpc SubscribeToMessages(SubscribeToMessagesRequest) returns (stream MessageStreamResponse);
}
