syntax = "proto3";

package unhinged.cdc;

option java_package = "com.unhinged.cdc";
option java_outer_classname = "UniversalEventProto";
option go_package = "github.com/unhinged/cdc/proto";

// ============================================================================
// UNIVERSAL EVENT ENVELOPE
// ============================================================================

message UniversalEvent {
  // Identity and versioning
  string event_id = 1;           // UUID v4
  string event_type = 2;         // Hierarchical: "llm.inference.completed"
  string event_version = 3;      // Schema version for evolution
  
  // Temporal ordering
  int64 timestamp_ms = 4;        // Unix epoch milliseconds
  int64 sequence_number = 5;     // Monotonic sequence within partition
  
  // Distributed tracing
  string correlation_id = 6;     // Request correlation across services
  string causation_id = 7;       // Parent event ID (optional)
  
  // Multi-tenant context (denormalized for query performance)
  string tenant_id = 8;          // Tenant isolation
  string user_id = 9;            // User context (optional for system events)
  string session_id = 10;        // Session grouping (optional)
  string workflow_id = 11;       // Workflow tracking (optional)
  
  // Source metadata
  string source_service = 12;    // Originating service
  string source_component = 13;  // Specific component (optional)
  string environment = 14;       // dev/staging/prod
  string region = 15;            // Geographic region
  string instance_id = 16;       // Service instance (optional)
  string request_id = 17;        // HTTP request ID (optional)
  
  // Domain-specific payload (type-safe union)
  oneof payload {
    LLMInferenceEvent llm_inference = 20;
    ToolUsageEvent tool_usage = 21;
    VoiceProcessingEvent voice_processing = 22;
    UIGenerationEvent ui_generation = 23;
    WorkflowExecutionEvent workflow_execution = 24;
    UserInteractionEvent user_interaction = 25;
    SystemStateEvent system_state = 26;
    ErrorEvent error = 27;
    PerformanceEvent performance = 28;
  }
  
  // Metadata and categorization
  repeated string tags = 30;           // Searchable tags
  map<string, string> metadata = 31;   // Additional key-value metadata
  repeated string pii_fields = 32;     // PII field paths for GDPR
  RetentionPolicy retention_policy = 33;
}

// Data retention policies
enum RetentionPolicy {
  OPERATIONAL = 0;    // 7 days - real-time operations
  ANALYTICAL = 1;     // 30 days - business analytics
  AUDIT = 2;          // 7 years - compliance and audit
  TRAINING = 3;       // 2 years - ML model training
}

// ============================================================================
// LLM INFERENCE EVENTS
// ============================================================================

message LLMInferenceEvent {
  string inference_id = 1;
  
  // Model information
  ModelInfo model = 2;
  
  // Input/Output
  PromptInfo prompt = 3;
  ResponseInfo response = 4;
  InferenceParameters parameters = 5;
  
  // Rationale and decision context (critical for AI/ML training)
  InferenceRationale rationale = 6;
  
  // Performance metrics
  PerformanceMetrics performance = 7;
  
  // Context and outcome
  InferenceContext context = 8;
  InferenceOutcome outcome = 9;
}

message ModelInfo {
  string model_name = 1;
  string model_version = 2;
  string provider = 3;          // openai, anthropic, etc.
  string model_type = 4;        // chat, completion, embedding
}

message PromptInfo {
  string text = 1;
  int32 token_count = 2;
  string template_used = 3;
  int32 context_window_size = 4;
  bool system_prompt_included = 5;
}

message ResponseInfo {
  string text = 1;
  int32 token_count = 2;
  FinishReason finish_reason = 3;
  float confidence_score = 4;   // 0.0 to 1.0
}

enum FinishReason {
  STOP = 0;
  LENGTH = 1;
  CONTENT_FILTER = 2;
  ERROR = 3;
  FUNCTION_CALL = 4;
}

message InferenceParameters {
  float temperature = 1;
  int32 max_tokens = 2;
  float top_p = 3;
  float frequency_penalty = 4;
  float presence_penalty = 5;
}

message InferenceRationale {
  string intent = 1;                              // What we're trying to achieve
  string expected_outcome = 2;                    // What we expect to happen
  repeated string reasoning_chain = 3;            // Step-by-step reasoning
  repeated string decision_factors = 4;           // Key factors in decision
  repeated Alternative alternatives_considered = 5; // Other options considered
  string risk_assessment = 6;                    // Potential risks identified
  float decision_confidence = 7;                 // Confidence in approach (0-1)
}

message Alternative {
  string description = 1;
  float score = 2;              // How good this alternative was (0-1)
  string rejection_reason = 3;  // Why we didn't choose this
}

message PerformanceMetrics {
  int64 latency_ms = 1;
  float tokens_per_second = 2;
  float cost_estimate_usd = 3;
  float memory_usage_mb = 4;
}

message InferenceContext {
  int32 conversation_history_length = 1;
  bool rag_context_used = 2;
  bool tool_calling_enabled = 3;
  repeated string function_calls = 4;
  repeated string context_sources = 5;
}

message InferenceOutcome {
  bool success = 1;
  string error_code = 2;
  string error_message = 3;
  int32 retry_count = 4;
  SatisfactionLevel user_satisfaction = 5;
}

enum SatisfactionLevel {
  UNKNOWN = 0;
  VERY_LOW = 1;
  LOW = 2;
  MEDIUM = 3;
  HIGH = 4;
  VERY_HIGH = 5;
}

// ============================================================================
// TOOL USAGE EVENTS
// ============================================================================

message ToolUsageEvent {
  string execution_id = 1;
  
  // Tool identification
  ToolInfo tool = 2;
  
  // Input/Output
  ToolInput input = 3;
  ToolOutput output = 4;
  
  // Rationale and learning
  ToolRationale rationale = 5;
  OutcomeAnalysis outcome_analysis = 6;
  
  // Performance
  ToolPerformance performance = 7;
  
  // Context-specific data
  oneof context {
    WebScrapingContext web_scraping = 10;
    APICallContext api_call = 11;
    FileOperationContext file_operation = 12;
    DatabaseQueryContext database_query = 13;
  }
}

message ToolInfo {
  string tool_name = 1;
  string tool_version = 2;
  ToolCategory tool_category = 3;
  string tool_provider = 4;
}

enum ToolCategory {
  WEB_SCRAPING = 0;
  API_CALL = 1;
  FILE_OPERATION = 2;
  DATA_PROCESSING = 3;
  UI_GENERATION = 4;
  VOICE_PROCESSING = 5;
  DATABASE_QUERY = 6;
  EXTERNAL_SERVICE = 7;
}

message ToolInput {
  string parameters_json = 1;    // JSON-encoded parameters
  string raw_input = 2;
  bool validation_passed = 3;
  repeated string validation_errors = 4;
  int64 input_size_bytes = 5;
}

message ToolOutput {
  string result_json = 1;        // JSON-encoded result
  bool success = 2;
  string error_message = 3;
  int64 output_size_bytes = 4;
  float data_quality_score = 5;  // 0.0 to 1.0
}

message ToolRationale {
  string why_this_tool = 1;
  string expected_outcome = 2;
  repeated string alternative_tools_considered = 3;
  string risk_assessment = 4;
  repeated string success_criteria = 5;
  float decision_confidence = 6;
}

message OutcomeAnalysis {
  bool met_expectations = 1;
  float quality_score = 2;       // 0.0 to 1.0
  float completeness_score = 3;  // 0.0 to 1.0
  float accuracy_score = 4;      // 0.0 to 1.0
  repeated string lessons_learned = 5;
  repeated string improvement_suggestions = 6;
}

message ToolPerformance {
  int64 execution_time_ms = 1;
  float memory_peak_mb = 2;
  float cpu_usage_percent = 3;
  int64 network_bytes_transferred = 4;
  bool cache_hit = 5;
}

// Context-specific messages
message WebScrapingContext {
  string target_url = 1;
  string target_domain = 2;
  string scraping_strategy = 3;
  repeated string data_extraction_rules = 4;
  string what_looking_for = 5;
  string found_data_summary = 6;
  bool robots_txt_compliant = 7;
  bool rate_limiting_applied = 8;
  int32 pages_scraped = 9;
  string data_freshness = 10;
}

message APICallContext {
  string endpoint = 1;
  string method = 2;
  int32 response_status = 3;
  int64 response_time_ms = 4;
  int32 retry_count = 5;
  bool rate_limited = 6;
  string api_version = 7;
  string authentication_method = 8;
}

message FileOperationContext {
  string file_path = 1;
  string operation_type = 2;     // read, write, delete, move, etc.
  int64 file_size_bytes = 3;
  string file_type = 4;
  bool backup_created = 5;
}

message DatabaseQueryContext {
  string query_type = 1;         // select, insert, update, delete
  string table_name = 2;
  int32 rows_affected = 3;
  int64 query_time_ms = 4;
  bool transaction_used = 5;
}

// ============================================================================
// VOICE PROCESSING EVENTS
// ============================================================================

message VoiceProcessingEvent {
  string processing_id = 1;
  VoiceProcessingType processing_type = 2;

  // Audio information
  AudioInfo audio = 3;

  // Processing results
  oneof result {
    TranscriptionResult transcription = 4;
    SynthesisResult synthesis = 5;
  }

  // Processing context
  VoiceProcessingContext context = 6;
  VoicePerformance performance = 7;
}

enum VoiceProcessingType {
  TRANSCRIPTION = 0;  // STT
  SYNTHESIS = 1;      // TTS
}

message AudioInfo {
  float duration_seconds = 1;
  int32 sample_rate = 2;
  int32 channels = 3;
  string format = 4;            // mp3, wav, ogg, etc.
  int64 size_bytes = 5;
  float quality_score = 6;      // 0.0 to 1.0
}

message TranscriptionResult {
  string text = 1;
  float confidence_score = 2;   // 0.0 to 1.0
  string language_detected = 3;
  repeated WordTimestamp word_timestamps = 4;
}

message WordTimestamp {
  string word = 1;
  float start_time = 2;
  float end_time = 3;
  float confidence = 4;
}

message SynthesisResult {
  string input_text = 1;
  VoiceConfig voice_config = 2;
  AudioInfo generated_audio = 3;
}

message VoiceConfig {
  string voice_id = 1;
  string voice_name = 2;
  string gender = 3;
  string accent = 4;
  float speed = 5;
  float pitch = 6;
  float volume = 7;
}

message VoiceProcessingContext {
  string user_intent = 1;
  string expected_language = 2;
  NoiseLevel noise_level = 3;
  string speaker_identification = 4;
  string processing_purpose = 5;
}

enum NoiseLevel {
  LOW = 0;
  MEDIUM = 1;
  HIGH = 2;
}

message VoicePerformance {
  int64 processing_time_ms = 1;
  string model_used = 2;
  repeated string preprocessing_applied = 3;
  repeated string postprocessing_applied = 4;
}

// ============================================================================
// UI GENERATION EVENTS
// ============================================================================

message UIGenerationEvent {
  string generation_id = 1;
  UIEventType event_type = 2;

  oneof event_data {
    UIGenerationRequest generation_request = 3;
    UIGenerationResult generation_result = 4;
    UIInteractionData interaction_data = 5;
  }

  UIContext ui_context = 6;
  UIPerformance performance = 7;
}

enum UIEventType {
  GENERATION_STARTED = 0;
  GENERATION_COMPLETED = 1;
  INTERACTION_RECORDED = 2;
}

message UIGenerationRequest {
  string user_prompt = 1;
  UIType ui_type = 2;
  Platform target_platform = 3;
  string framework = 4;
  map<string, string> style_preferences = 5;
}

enum UIType {
  COMPONENT = 0;
  PAGE = 1;
  LAYOUT = 2;
  WIDGET = 3;
}

enum Platform {
  WEB = 0;
  MOBILE = 1;
  DESKTOP = 2;
}

message UIGenerationResult {
  string component_name = 1;
  string component_type = 2;
  bool code_generated = 3;
  string code_language = 4;
  int32 lines_of_code = 5;
  repeated string dependencies = 6;

  // Design decisions
  DesignDecisions design_decisions = 7;
  UIRationale rationale = 8;
  ValidationResults validation = 9;
}

message DesignDecisions {
  string layout_strategy = 1;
  string color_scheme = 2;
  repeated string typography_choices = 3;
  repeated string accessibility_features = 4;
  repeated string responsive_breakpoints = 5;
}

message UIRationale {
  string design_philosophy = 1;
  repeated string user_experience_goals = 2;
  repeated string technical_constraints = 3;
  repeated string accessibility_considerations = 4;
  repeated string performance_optimizations = 5;
}

message ValidationResults {
  bool syntax_valid = 1;
  float accessibility_score = 2;
  float performance_score = 3;
  repeated string best_practices_followed = 4;
}

message UIInteractionData {
  InteractionType interaction_type = 1;
  UIElement ui_element = 2;
  UserInput user_input = 3;
  SystemResponse system_response = 4;
  InteractionContext interaction_context = 5;
  IntentAnalysis intent_analysis = 6;
}

enum InteractionType {
  CLICK = 0;
  VOICE_COMMAND = 1;
  TEXT_INPUT = 2;
  GESTURE = 3;
  NAVIGATION = 4;
}

message UIElement {
  string element_type = 1;
  string element_id = 2;
  string element_class = 3;
  string page_url = 4;
  ViewportSize viewport_size = 5;
}

message ViewportSize {
  int32 width = 1;
  int32 height = 2;
}

message UserInput {
  string raw_input = 1;
  string processed_input = 2;
  string input_method = 3;
  int64 input_duration_ms = 4;
}

message SystemResponse {
  string response_type = 1;
  string response_data_json = 2;
  int64 response_time_ms = 3;
  bool success = 4;
}

message InteractionContext {
  string user_journey_step = 1;
  int32 previous_interactions = 2;
  int64 session_duration_ms = 3;
  ExpertiseLevel user_expertise_level = 4;
}

enum ExpertiseLevel {
  BEGINNER = 0;
  INTERMEDIATE = 1;
  EXPERT = 2;
}

message IntentAnalysis {
  string detected_intent = 1;
  float confidence_score = 2;
  repeated string alternative_intents = 3;
  repeated string context_clues_used = 4;
}

message UIContext {
  string ui_purpose = 1;
  string target_audience = 2;
  string business_context = 3;
}

message UIPerformance {
  int64 generation_time_ms = 1;
  int64 rendering_time_ms = 2;
  float memory_usage_mb = 3;
}

// ============================================================================
// WORKFLOW EXECUTION EVENTS
// ============================================================================

message WorkflowExecutionEvent {
  string execution_id = 1;
  WorkflowEventType event_type = 2;

  // Workflow identification
  WorkflowInfo workflow = 3;

  // Execution state
  ExecutionState execution_state = 4;

  // Step information (for step-level events)
  StepInfo current_step = 5;

  // Decision tracking
  DecisionPoint decision_point = 6;

  // Context and performance
  WorkflowContext workflow_context = 7;
  WorkflowPerformance performance = 8;
}

enum WorkflowEventType {
  WORKFLOW_STARTED = 0;
  STEP_STARTED = 1;
  STEP_COMPLETED = 2;
  STEP_FAILED = 3;
  DECISION_MADE = 4;
  WORKFLOW_COMPLETED = 5;
  WORKFLOW_FAILED = 6;
  WORKFLOW_CANCELLED = 7;
}

message WorkflowInfo {
  string workflow_id = 1;
  string workflow_name = 2;
  string workflow_version = 3;
  WorkflowType workflow_type = 4;
}

enum WorkflowType {
  LINEAR = 0;
  DAG = 1;
  CONDITIONAL = 2;
  PARALLEL = 3;
}

message ExecutionState {
  ExecutionStatus status = 1;
  int64 started_at_ms = 2;
  int64 completed_at_ms = 3;
  int32 total_steps = 4;
  int32 completed_steps = 5;
  int32 failed_steps = 6;
  string current_step_name = 7;
}

enum ExecutionStatus {
  RUNNING = 0;
  COMPLETED = 1;
  FAILED = 2;
  CANCELLED = 3;
  PAUSED = 4;
}

message StepInfo {
  string step_name = 1;
  int32 step_index = 2;
  string step_type = 3;
  StepStatus step_status = 4;
  string input_data_json = 5;
  string output_data_json = 6;
  int64 processing_time_ms = 7;
  float memory_peak_mb = 8;
}

enum StepStatus {
  STEP_STARTED = 0;
  STEP_COMPLETED = 1;
  STEP_FAILED = 2;
  STEP_SKIPPED = 3;
}

message DecisionPoint {
  string decision_name = 1;
  repeated string available_options = 2;
  string chosen_option = 3;
  repeated string decision_criteria = 4;
  float confidence_score = 5;
  bool historical_data_used = 6;
  DecisionRationale rationale = 7;
}

message DecisionRationale {
  string decision_reasoning = 1;
  repeated string risk_factors = 2;
  repeated string success_metrics = 3;
  repeated string fallback_strategies = 4;
  string business_justification = 5;
}

message WorkflowContext {
  string trigger_event_id = 1;
  string business_context = 2;
  map<string, string> user_context = 3;
  map<string, string> system_state = 4;
}

message WorkflowPerformance {
  int64 total_execution_time_ms = 1;
  float total_cost_estimate_usd = 2;
  int32 retry_count = 3;
  float resource_utilization_percent = 4;
}

// ============================================================================
// USER INTERACTION EVENTS
// ============================================================================

message UserInteractionEvent {
  string interaction_id = 1;
  InteractionType interaction_type = 2;
  UIElement ui_element = 3;
  UserInput user_input = 4;
  SystemResponse system_response = 5;
  InteractionContext interaction_context = 6;
  IntentAnalysis intent_analysis = 7;
  InteractionRationale rationale = 8;
}

message InteractionRationale {
  string interaction_purpose = 1;
  string expected_user_goal = 2;
  string system_interpretation = 3;
  string response_strategy = 4;
}

// ============================================================================
// SYSTEM STATE EVENTS
// ============================================================================

message SystemStateEvent {
  string state_change_id = 1;
  StateChangeType change_type = 2;

  // Entity information
  EntityInfo entity = 3;

  // Change details
  repeated FieldChange field_changes = 4;

  // Change metadata
  ChangeMetadata change_metadata = 5;

  // Impact analysis
  ImpactAnalysis impact_analysis = 6;

  // Audit information
  AuditTrail audit_trail = 7;
}

enum StateChangeType {
  CREATE = 0;
  UPDATE = 1;
  DELETE = 2;
  ARCHIVE = 3;
  RESTORE = 4;
}

message EntityInfo {
  string entity_type = 1;
  string entity_id = 2;
  string entity_name = 3;
}

message FieldChange {
  string field_name = 1;
  string old_value_json = 2;
  string new_value_json = 3;
  string change_reason = 4;
}

message ChangeMetadata {
  string change_source = 1;
  string change_method = 2;
  bool batch_operation = 3;
  string transaction_id = 4;
}

message ImpactAnalysis {
  repeated string affected_systems = 1;
  repeated string downstream_effects = 2;
  bool rollback_possible = 3;
  bool data_consistency_maintained = 4;
}

message AuditTrail {
  bool approval_required = 1;
  string approver_id = 2;
  int64 approval_timestamp_ms = 3;
  repeated string compliance_tags = 4;
  string change_justification = 5;
  string business_impact = 6;
}

// ============================================================================
// ERROR EVENTS
// ============================================================================

message ErrorEvent {
  string error_id = 1;
  ErrorSeverity severity = 2;
  string error_code = 3;
  string error_message = 4;
  string stack_trace = 5;

  // Context
  ErrorContext error_context = 6;

  // Recovery information
  RecoveryInfo recovery = 7;
}

enum ErrorSeverity {
  INFO = 0;
  WARNING = 1;
  ERROR = 2;
  CRITICAL = 3;
  FATAL = 4;
}

message ErrorContext {
  string operation_being_performed = 1;
  string component_state_json = 2;
  map<string, string> environment_variables = 3;
  repeated string related_event_ids = 4;
}

message RecoveryInfo {
  string recovery_action = 1;
  bool auto_recovery_attempted = 2;
  bool recovery_successful = 3;
  string manual_intervention_required = 4;
}

// ============================================================================
// PERFORMANCE EVENTS
// ============================================================================

message PerformanceEvent {
  string metric_name = 1;
  MetricType metric_type = 2;
  float metric_value = 3;
  string metric_unit = 4;

  // Context
  PerformanceContext performance_context = 5;

  // Thresholds
  PerformanceThresholds thresholds = 6;
}

enum MetricType {
  COUNTER = 0;
  GAUGE = 1;
  HISTOGRAM = 2;
  TIMER = 3;
}

message PerformanceContext {
  string operation_name = 1;
  string resource_name = 2;
  map<string, string> labels = 3;
}

message PerformanceThresholds {
  float warning_threshold = 1;
  float critical_threshold = 2;
  bool threshold_exceeded = 3;
}
