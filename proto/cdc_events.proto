syntax = "proto3";

package unhinged.cdc;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";

// ============================================================================
// CDC Events API v1.0.0
// ============================================================================
//
// @version 1.0.0
// @author Unhinged Team
// @date 2025-01-04
// @description Change Data Capture events for system-wide event streaming
// @breaking false
//
// This schema provides a unified event system for:
// - Document lifecycle events (create, update, delete, access)
// - LLM interaction events (prompt, response, feedback)
// - Agent workflow events (start, step, complete, error)
// - User session events (start, end, context_access)
// - System events (health, metrics, alerts)
//
// All events flow through this unified CDC system for:
// - Workflow orchestration and triggers
// - Real-time UI updates
// - Analytics and monitoring
// - Audit trails and compliance
// ============================================================================

// ============================================================================
// Core Event Structure
// ============================================================================

// Universal event envelope for all CDC events
message UniversalEvent {
  // Event identification
  string event_id = 1;
  string event_type = 2;
  string event_version = 3;
  
  // Timing and sequencing
  google.protobuf.Timestamp event_time = 4;
  int64 sequence_number = 5;
  
  // Source and context
  string source_service = 6;
  string source_version = 7;
  string trace_id = 8;
  string correlation_id = 9;
  
  // User and session context
  string user_id = 10;
  string session_id = 11;
  string tenant_id = 12;
  
  // Event payload (one of the specific event types)
  oneof payload {
    DocumentEvent document_event = 20;
    LLMEvent llm_event = 21;
    AgentEvent agent_event = 22;
    SessionEvent session_event = 23;
    SystemEvent system_event = 24;
    WorkflowEvent workflow_event = 25;
    ChatEvent chat_event = 26;         // Chat and conversation events
    AudioEvent audio_event = 27;       // Audio processing events
    UserEvent user_event = 28;         // User management events
  }
  
  // Metadata and tags
  google.protobuf.Struct metadata = 30;
  repeated string tags = 31;
  
  // Event routing and processing
  string routing_key = 32;
  int32 retry_count = 33;
  google.protobuf.Timestamp expires_at = 34;
}

// ============================================================================
// Document Events
// ============================================================================

message DocumentEvent {
  string document_uuid = 1;
  string document_type = 2;
  string namespace = 3;
  int32 version = 4;
  
  DocumentEventType event_type = 5;
  
  // Event-specific data
  oneof event_data {
    DocumentCreated created = 10;
    DocumentUpdated updated = 11;
    DocumentDeleted deleted = 12;
    DocumentAccessed accessed = 13;
    DocumentTagged tagged = 14;
    DocumentVersioned versioned = 15;
  }
}

enum DocumentEventType {
  DOCUMENT_CREATED = 0;
  DOCUMENT_UPDATED = 1;
  DOCUMENT_DELETED = 2;
  DOCUMENT_ACCESSED = 3;
  DOCUMENT_TAGGED = 4;
  DOCUMENT_VERSIONED = 5;
}

message DocumentCreated {
  string document_name = 1;
  string created_by = 2;
  string created_by_type = 3;
  google.protobuf.Struct document_metadata = 4;
  int64 document_size_bytes = 5;
}

message DocumentUpdated {
  int32 previous_version = 1;
  string updated_by = 2;
  string updated_by_type = 3;
  repeated string changed_fields = 4;
  google.protobuf.Struct changes = 5;
}

message DocumentDeleted {
  string deleted_by = 1;
  string deleted_by_type = 2;
  int32 versions_deleted = 3;
  string deletion_reason = 4;
}

message DocumentAccessed {
  string accessed_by = 1;
  string accessed_by_type = 2;
  string access_method = 3; // "get", "list", "search"
  bool body_included = 4;
}

message DocumentTagged {
  string tag = 1;
  string tagged_by = 2;
  string tagged_by_type = 3;
  string tag_operation = 4; // "add", "remove", "update"
}

message DocumentVersioned {
  int32 new_version = 1;
  int32 previous_version = 2;
  string version_reason = 3;
}

// ============================================================================
// LLM Events
// ============================================================================

message LLMEvent {
  string interaction_id = 1;
  string model_name = 2;
  string provider = 3;
  
  LLMEventType event_type = 4;
  
  oneof event_data {
    LLMPromptSent prompt_sent = 10;
    LLMResponseReceived response_received = 11;
    LLMError llm_error = 12;
    LLMFeedback feedback = 13;
    LLMTokenUsage token_usage = 14;
  }
}

enum LLMEventType {
  LLM_PROMPT_SENT = 0;
  LLM_RESPONSE_RECEIVED = 1;
  LLM_ERROR = 2;
  LLM_FEEDBACK = 3;
  LLM_TOKEN_USAGE = 4;
}

message LLMPromptSent {
  string prompt_text = 1;
  google.protobuf.Struct prompt_parameters = 2;
  repeated string context_document_ids = 3;
  int32 max_tokens = 4;
  float temperature = 5;
}

message LLMResponseReceived {
  string response_text = 1;
  string finish_reason = 2;
  int32 response_tokens = 3;
  float response_time_ms = 4;
  google.protobuf.Struct response_metadata = 5;
}

message LLMError {
  string error_code = 1;
  string error_message = 2;
  string error_type = 3; // "rate_limit", "context_length", "content_filter", etc.
  bool is_retryable = 4;
}

message LLMFeedback {
  string feedback_type = 1; // "thumbs_up", "thumbs_down", "correction", "rating"
  string feedback_value = 2;
  string feedback_text = 3;
  string provided_by = 4;
}

message LLMTokenUsage {
  int32 prompt_tokens = 1;
  int32 completion_tokens = 2;
  int32 total_tokens = 3;
  float cost_usd = 4;
}

// ============================================================================
// Agent Events
// ============================================================================

message AgentEvent {
  string agent_id = 1;
  string agent_type = 2;
  string agent_version = 3;
  string execution_id = 4;
  
  AgentEventType event_type = 5;
  
  oneof event_data {
    AgentStarted started = 10;
    AgentStepCompleted step_completed = 11;
    AgentCompleted completed = 12;
    AgentFailed failed = 13;
    AgentToolUsed tool_used = 14;
  }
}

enum AgentEventType {
  AGENT_STARTED = 0;
  AGENT_STEP_COMPLETED = 1;
  AGENT_COMPLETED = 2;
  AGENT_FAILED = 3;
  AGENT_TOOL_USED = 4;
}

message AgentStarted {
  string task_description = 1;
  google.protobuf.Struct initial_context = 2;
  repeated string available_tools = 3;
}

message AgentStepCompleted {
  int32 step_number = 1;
  string step_type = 2;
  string step_description = 3;
  google.protobuf.Struct step_result = 4;
  float step_duration_ms = 5;
}

message AgentCompleted {
  string completion_status = 1;
  google.protobuf.Struct final_result = 2;
  int32 total_steps = 3;
  float total_duration_ms = 4;
}

message AgentFailed {
  string failure_reason = 1;
  string error_message = 2;
  int32 failed_at_step = 3;
  bool is_recoverable = 4;
}

message AgentToolUsed {
  string tool_name = 1;
  string tool_version = 2;
  google.protobuf.Struct tool_input = 3;
  google.protobuf.Struct tool_output = 4;
  float tool_duration_ms = 5;
  bool tool_success = 6;
}

// ============================================================================
// Session Events
// ============================================================================

message SessionEvent {
  string session_id = 1;
  SessionEventType event_type = 2;
  
  oneof event_data {
    SessionStarted started = 10;
    SessionEnded ended = 11;
    SessionContextAccessed context_accessed = 12;
    SessionHeartbeat heartbeat = 13;
  }
}

enum SessionEventType {
  SESSION_STARTED = 0;
  SESSION_ENDED = 1;
  SESSION_CONTEXT_ACCESSED = 2;
  SESSION_HEARTBEAT = 3;
}

message SessionStarted {
  string user_agent = 1;
  string ip_address = 2;
  google.protobuf.Struct session_metadata = 3;
}

message SessionEnded {
  string end_reason = 1;
  float session_duration_ms = 2;
  int32 interactions_count = 3;
}

message SessionContextAccessed {
  repeated string document_types = 1;
  int32 documents_returned = 2;
  string access_reason = 3;
}

message SessionHeartbeat {
  google.protobuf.Timestamp last_activity = 1;
  bool is_active = 2;
}

// ============================================================================
// System Events
// ============================================================================

message SystemEvent {
  string component = 1;
  SystemEventType event_type = 2;
  
  oneof event_data {
    HealthCheck health_check = 10;
    MetricReported metric = 11;
    AlertTriggered alert = 12;
    ServiceStarted service_started = 13;
    ServiceStopped service_stopped = 14;
  }
}

enum SystemEventType {
  HEALTH_CHECK = 0;
  METRIC_REPORTED = 1;
  ALERT_TRIGGERED = 2;
  SERVICE_STARTED = 3;
  SERVICE_STOPPED = 4;
}

message HealthCheck {
  bool is_healthy = 1;
  string status = 2;
  google.protobuf.Struct health_details = 3;
}

message MetricReported {
  string metric_name = 1;
  double metric_value = 2;
  string metric_unit = 3;
  google.protobuf.Struct metric_tags = 4;
}

message AlertTriggered {
  string alert_name = 1;
  string severity = 2;
  string description = 3;
  google.protobuf.Struct alert_context = 4;
}

message ServiceStarted {
  string service_name = 1;
  string service_version = 2;
  string build_info = 3;
}

message ServiceStopped {
  string service_name = 1;
  string stop_reason = 2;
  float uptime_ms = 3;
}

// ============================================================================
// Workflow Events
// ============================================================================

message WorkflowEvent {
  string workflow_id = 1;
  string workflow_type = 2;
  string execution_id = 3;
  
  WorkflowEventType event_type = 4;
  
  oneof event_data {
    WorkflowTriggered triggered = 10;
    WorkflowStepExecuted step_executed = 11;
    WorkflowCompleted completed = 12;
    WorkflowFailed failed = 13;
  }
}

enum WorkflowEventType {
  WORKFLOW_TRIGGERED = 0;
  WORKFLOW_STEP_EXECUTED = 1;
  WORKFLOW_COMPLETED = 2;
  WORKFLOW_FAILED = 3;
}

message WorkflowTriggered {
  string trigger_event_id = 1;
  string trigger_type = 2;
  google.protobuf.Struct trigger_context = 3;
}

message WorkflowStepExecuted {
  string step_id = 1;
  string step_type = 2;
  google.protobuf.Struct step_input = 3;
  google.protobuf.Struct step_output = 4;
  float step_duration_ms = 5;
}

message WorkflowCompleted {
  google.protobuf.Struct final_output = 1;
  int32 total_steps = 2;
  float total_duration_ms = 3;
}

message WorkflowFailed {
  string failure_step_id = 1;
  string failure_reason = 2;
  string error_message = 3;
}

// ============================================================================
// Chat Events - New Event Types for Chat Service Integration
// ============================================================================

message ChatEvent {
  string conversation_id = 1;
  string message_id = 2;
  ChatEventType event_type = 3;

  oneof event_data {
    ConversationCreated conversation_created = 10;
    MessageSent message_sent = 11;
    MessageUpdated message_updated = 12;
    TypingStarted typing_started = 13;
    ParticipantJoined participant_joined = 14;
  }
}

enum ChatEventType {
  CHAT_EVENT_TYPE_UNSPECIFIED = 0;
  CHAT_EVENT_TYPE_CONVERSATION_CREATED = 1;
  CHAT_EVENT_TYPE_MESSAGE_SENT = 2;
  CHAT_EVENT_TYPE_MESSAGE_UPDATED = 3;
  CHAT_EVENT_TYPE_TYPING_STARTED = 4;
  CHAT_EVENT_TYPE_PARTICIPANT_JOINED = 5;
}

message ConversationCreated {
  string title = 1;
  string created_by = 2;
  repeated string participant_ids = 3;
}

message MessageSent {
  string content = 1;
  string role = 2;
  string sent_by = 3;
}

message MessageUpdated {
  string content = 1;
  string updated_by = 2;
}

message TypingStarted {
  string user_id = 1;
}

message ParticipantJoined {
  string user_id = 1;
  string invited_by = 2;
}

// ============================================================================
// Audio Events - New Event Types for Audio Service Integration
// ============================================================================

message AudioEvent {
  string audio_id = 1;
  AudioEventType event_type = 2;

  oneof event_data {
    TTSStarted tts_started = 10;
    TTSCompleted tts_completed = 11;
    STTCompleted stt_completed = 12;
  }
}

enum AudioEventType {
  AUDIO_EVENT_TYPE_UNSPECIFIED = 0;
  AUDIO_EVENT_TYPE_TTS_STARTED = 1;
  AUDIO_EVENT_TYPE_TTS_COMPLETED = 2;
  AUDIO_EVENT_TYPE_STT_COMPLETED = 3;
}

message TTSStarted {
  string text = 1;
  string voice_id = 2;
}

message TTSCompleted {
  string audio_url = 1;
  float duration_seconds = 2;
}

message STTCompleted {
  string transcript = 1;
  float confidence = 2;
}

// ============================================================================
// User Events - New Event Types for User Management
// ============================================================================

message UserEvent {
  string user_id = 1;
  UserEventType event_type = 2;

  oneof event_data {
    UserCreated user_created = 10;
    UserLoggedIn user_logged_in = 11;
    TeamMemberAdded team_member_added = 12;
  }
}

enum UserEventType {
  USER_EVENT_TYPE_UNSPECIFIED = 0;
  USER_EVENT_TYPE_CREATED = 1;
  USER_EVENT_TYPE_LOGGED_IN = 2;
  USER_EVENT_TYPE_TEAM_MEMBER_ADDED = 3;
}

message UserCreated {
  string email = 1;
  string name = 2;
}

message UserLoggedIn {
  string ip_address = 1;
  string user_agent = 2;
}

message TeamMemberAdded {
  string team_id = 1;
  string role = 2;
  string added_by = 3;
}
