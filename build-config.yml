# ============================================================================
# UNHINGED BUILD SYSTEM CONFIGURATION
# ============================================================================
# 
# Defines build targets, dependencies, and orchestration for the monorepo
# Used by the build system to coordinate docker-compose, protobuf generation,
# testing, and deployment across all services.
#
# Author: LLM Agent
# Version: 1.0.0
# Date: 2025-01-04
# ============================================================================

version: "1.0"
name: "unhinged-universal-system"
description: "Voice-driven UI generation with LLM intelligence and CDC audit trail"

# ============================================================================
# BUILD SYSTEM FEATURES (V1 ENHANCED)
# ============================================================================

build_system:
  cache:
    enabled: true
    storage: "local"
    ttl: "7d"
    compression: true

  parallelism:
    max_workers: 16  # Optimized for AMD 9000s series 16-core
    dependency_aware: true

  monitoring:
    metrics_enabled: true
    performance_tracking: true

  ai_integration:
    context_generation: true
    error_explanation: true
    onboarding_assistance: true

  optimization:
    incremental_builds: true
    smart_invalidation: true
    parallel_proto_gen: true

# ============================================================================
# ENVIRONMENTS
# ============================================================================

environments:
  development:
    description: "Local development with hot reloading"
    docker_compose: "docker-compose.dev.yml"
    services:
      - frontend-dev
      - backend
      - llm
      - whisper-tts
      - database
      - kafka
      - zookeeper
      - kafka-ui
    env_vars:
      NODE_ENV: "development"
      DB_HOST: "localhost"
      KAFKA_BROKERS: "localhost:9092"
      OLLAMA_HOST: "http://localhost:11434"
      WHISPER_TTS_HOST: "http://localhost:8000"
    ports:
      frontend: 3000
      backend: 8080
      database: 5432
      kafka: 9092
      kafka_ui: 8090
      ollama: 11434
      whisper_tts: 8000

  staging:
    description: "Staging environment for testing"
    docker_compose: "docker-compose.staging.yml"
    services:
      - frontend
      - backend
      - llm
      - whisper-tts
      - database
      - kafka
      - zookeeper
    env_vars:
      NODE_ENV: "staging"
      DB_HOST: "database"
      KAFKA_BROKERS: "kafka:29092"

  production:
    description: "Production deployment"
    docker_compose: "docker-compose.prod.yml"
    services:
      - frontend
      - backend
      - llm
      - whisper-tts
      - database
      - kafka
      - zookeeper
    env_vars:
      NODE_ENV: "production"
      DB_HOST: "database"
      KAFKA_BROKERS: "kafka:29092"

# ============================================================================
# BUILD TARGETS
# ============================================================================

targets:
  # Development targets
  dev:
    description: "Start development environment"
    steps:
      - name: "Generate protobuf bindings"
        command: "cd proto && ./build.sh"
        condition: "proto files changed"
      
      - name: "Start infrastructure"
        command: "docker compose -f docker-compose.dev.yml up -d database kafka zookeeper"
        wait_for:
          - "postgres://localhost:5432/unhinged"
          - "kafka://localhost:9092"
      
      - name: "Create Kafka topics"
        command: "cd kafka/scripts && ./create-topics.sh"
        condition: "kafka is ready"
      
      - name: "Start services"
        command: "docker compose -f docker-compose.dev.yml up -d"
        depends_on: ["infrastructure"]

  # Testing targets
  test:
    description: "Run comprehensive test suite"
    steps:
      - name: "Unit tests"
        command: "npm run test:unit --workspaces"
        parallel: true
      
      - name: "Integration tests"
        command: "npm run test:integration --workspaces"
        depends_on: ["dev"]
      
      - name: "E2E tests"
        command: "npm run test:e2e --workspaces"
        depends_on: ["dev"]
      
      - name: "Audio pipeline tests"
        command: "cd frontend && npm run test:audio-all"
        depends_on: ["dev"]

  # CDC specific targets
  cdc:
    description: "CDC system operations (minimal JSON-based)"
    steps:
      - name: "Start CDC infrastructure"
        command: "docker compose -f docker-compose.dev.yml up -d database kafka zookeeper kafka-ui"

      - name: "Wait for services"
        command: "sleep 10"

      - name: "Run database migrations"
        command: "docker exec -i postgres-dev-db psql -U postgres -d unhinged < sql/init-minimal.sql"

      - name: "Create Kafka topic"
        command: "docker exec kafka-dev kafka-topics --create --bootstrap-server localhost:29092 --topic llm-events --partitions 1 --replication-factor 1 --if-not-exists"

      - name: "Verify CDC system"
        command: "curl -f http://localhost:8090 > /dev/null && docker exec postgres-dev-db psql -U postgres -d unhinged -c 'SELECT COUNT(*) FROM events;'"

  # Build and deployment targets
  build:
    description: "Build all services for production"
    steps:
      - name: "Generate protobuf bindings"
        command: "cd proto && ./build.sh"
      
      - name: "Build frontend"
        command: "cd frontend && npm run build"
      
      - name: "Build backend"
        command: "cd backend && ./gradlew build"
      
      - name: "Build Docker images"
        command: "docker-compose -f docker-compose.prod.yml build"

  deploy:
    description: "Deploy to specified environment"
    parameters:
      - name: "environment"
        required: true
        values: ["staging", "production"]
    steps:
      - name: "Build services"
        target: "build"
      
      - name: "Deploy to environment"
        command: "docker-compose -f docker-compose.${environment}.yml up -d"
      
      - name: "Run health checks"
        command: "./scripts/health-check.sh ${environment}"

# ============================================================================
# SERVICE DEFINITIONS
# ============================================================================

services:
  frontend:
    type: "react"
    path: "frontend"
    dependencies: ["backend", "whisper-tts"]
    build:
      dockerfile: "Dockerfile"
      context: "frontend"
    dev:
      dockerfile: "Dockerfile.dev"
      hot_reload: true
      volumes:
        - "./frontend/src:/app/src"
        - "./frontend/lib:/app/lib"

  backend:
    type: "kotlin"
    path: "backend"
    dependencies: ["database", "kafka", "llm", "whisper-tts"]
    build:
      dockerfile: "Dockerfile"
      context: "backend"
    ports:
      - "8080:8080"

  llm:
    type: "ollama"
    path: "llm"
    build:
      dockerfile: "Dockerfile"
      context: "llm"
    ports:
      - "11434:11434"
    volumes:
      - "llm-models:/models"

  whisper-tts:
    type: "python"
    path: "whisper-tts"
    build:
      dockerfile: "Dockerfile"
      context: "whisper-tts"
    ports:
      - "8000:8000"
    volumes:
      - "whisper-models:/app/models"

  database:
    type: "postgres"
    image: "postgres:15"
    environment:
      POSTGRES_DB: "unhinged"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    ports:
      - "5432:5432"
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
      - "./sql/init-minimal.sql:/docker-entrypoint-initdb.d/init-cdc.sql"

  kafka:
    type: "kafka"
    image: "confluentinc/cp-kafka:7.4.0"
    dependencies: ["zookeeper"]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"

  zookeeper:
    type: "zookeeper"
    image: "confluentinc/cp-zookeeper:7.4.0"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  # Static HTML registry generation
  generate-registry:
    description: "Generate static HTML file registry for control plane"
    module: "registry_builder"
    cache_strategy: "content_based"
    parallel: false
    inputs:
      - "control/static_html/**/*.html"
    outputs:
      - "control/static_html/shared/registry.js"
    steps:
      - name: "Scan static HTML files"
        command: "python3 -c 'from build.modules.registry_builder import RegistryBuilder; from build.modules import BuildContext; from pathlib import Path; rb = RegistryBuilder(); ctx = BuildContext(Path(\".\"), \"generate-registry\", {}); result = rb.build(ctx); exit(0 if result.success else 1)'"
        cache_key: "static_html_registry"

  # Proto client library generation
  proto-clients:
    description: "Generate polyglot client libraries from protobuf definitions"
    module: "proto_client_builder"
    cache_strategy: "content_based"
    parallel: true
    incremental: true
    inputs:
      - "proto/**/*.proto"
      - "build-config.yml"
      - "package.json"
    outputs:
      - "generated/typescript/clients/**/*.ts"
      - "generated/javascript/clients/**/*.js"
      - "control/static_html/shared/api-clients.js"
    steps:
      - name: "Generate TypeScript and JavaScript clients"
        command: "python3 build/build.py build proto-clients"
        cache_key: "proto_client_generation"

  proto-clients-all:
    description: "Generate client libraries for all supported languages"
    module: "proto_client_builder"
    cache_strategy: "content_based"
    parallel: true
    inputs:
      - "proto/**/*.proto"
    outputs:
      - "generated/typescript/clients/**/*.ts"
      - "generated/javascript/clients/**/*.js"
      - "generated/python/clients/**/*.py"
      - "generated/kotlin/clients/**/*.kt"
      - "generated/go/clients/**/*.go"
    steps:
      - name: "Generate all language clients"
        command: "python3 build/build.py build proto-clients-all"
        cache_key: "proto_client_all_generation"

  proto-clients-typescript:
    description: "Generate TypeScript client libraries only"
    module: "proto_client_builder"
    cache_strategy: "content_based"
    parallel: false
    inputs:
      - "proto/**/*.proto"
    outputs:
      - "generated/typescript/clients/**/*.ts"
    steps:
      - name: "Generate TypeScript clients"
        command: "python3 build/build.py build proto-clients-typescript"

  proto-clients-javascript:
    description: "Generate JavaScript client libraries for browsers"
    module: "proto_client_builder"
    cache_strategy: "content_based"
    parallel: false
    inputs:
      - "proto/**/*.proto"
    outputs:
      - "generated/javascript/clients/**/*.js"
      - "control/static_html/shared/api-clients.js"
    steps:
      - name: "Generate JavaScript clients"
        command: "python3 build/build.py build proto-clients-javascript"

  # Enhanced development targets (v1)
  dev-fast:
    description: "Fast development build with intelligent caching"
    dependencies: ["generate-registry", "proto-clients"]  # Add proto client dependency
    cache_strategy: "aggressive"
    parallel: true
    incremental: true
    steps:
      - name: "Generate protobuf and clients (if changed)"
        command: "cd proto && ./build.sh"
        condition: "proto_files_changed"
        cache_key: "proto_generation"

      - name: "Generate API clients (parallel)"
        command: "python3 build/build.py build proto-clients"
        parallel_group: "codegen"
        cache_key: "api_client_generation"

      - name: "Start infrastructure (parallel)"
        command: "docker compose -f docker-compose.dev.yml up -d database kafka zookeeper"
        parallel_group: "infrastructure"

      - name: "Build backend (incremental)"
        command: "cd backend && ./gradlew compileKotlin --build-cache"
        parallel_group: "services"
        cache_key: "backend_compile"

      - name: "Build frontend (incremental)"
        command: "cd frontend && npm run build:dev"
        parallel_group: "services"
        cache_key: "frontend_compile"

  dev-full:
    description: "Complete development environment with all services"
    dependencies: ["dev-fast"]
    steps:
      - name: "Start all services"
        command: "docker compose -f docker-compose.dev.yml up -d"
        wait_for:
          - "http://localhost:8080/health"
          - "http://localhost:3000"

      - name: "Run health checks"
        command: "make status"

  test-fast:
    description: "Fast test suite for development"
    dependencies: ["dev-fast"]
    parallel: true
    steps:
      - name: "Backend unit tests"
        command: "cd backend && ./gradlew test --parallel"
        parallel_group: "unit_tests"

      - name: "Frontend unit tests"
        command: "cd frontend && npm run test:unit"
        parallel_group: "unit_tests"

# ============================================================================
# WORKFLOWS
# ============================================================================

workflows:
  full_development_setup:
    description: "Complete development environment setup"
    steps:
      - target: "cdc"
      - target: "dev"
      - name: "Open development URLs"
        command: "echo 'Frontend: http://localhost:3000' && echo 'Backend: http://localhost:8080' && echo 'Kafka UI: http://localhost:8090'"

  ci_pipeline:
    description: "Continuous integration pipeline"
    steps:
      - target: "build"
      - target: "test"
      - name: "Generate test reports"
        command: "npm run test:report --workspaces"

  cd_pipeline:
    description: "Continuous deployment pipeline"
    parameters:
      - name: "environment"
        required: true
    steps:
      - target: "ci_pipeline"
      - target: "deploy"
        parameters:
          environment: "${environment}"

# ============================================================================
# MONITORING AND HEALTH CHECKS
# ============================================================================

health_checks:
  frontend:
    url: "http://localhost:3000"
    timeout: 30
  
  backend:
    url: "http://localhost:8080/health"
    timeout: 10
  
  database:
    command: "pg_isready -h localhost -p 5432 -U postgres"
    timeout: 5
  
  kafka:
    command: "kafka-topics --bootstrap-server localhost:9092 --list"
    timeout: 10
  
  whisper_tts:
    url: "http://localhost:8000/health"
    timeout: 15

# ============================================================================
# CLEANUP AND MAINTENANCE
# ============================================================================

cleanup:
  development:
    description: "Clean up development environment"
    steps:
      - name: "Stop all services"
        command: "docker-compose -f docker-compose.dev.yml down"
      
      - name: "Remove volumes (optional)"
        command: "docker-compose -f docker-compose.dev.yml down -v"
        confirm: true
      
      - name: "Clean build artifacts"
        command: "npm run clean --workspaces && cd backend && ./gradlew clean"

  reset_cdc:
    description: "Reset CDC system (clear all events)"
    steps:
      - name: "Stop CDC services"
        command: "docker-compose -f docker-compose.dev.yml stop kafka database"
      
      - name: "Clear Kafka topics"
        command: "docker-compose -f docker-compose.dev.yml exec kafka kafka-topics --bootstrap-server localhost:29092 --delete --topic llm-events"
        confirm: true
      
      - name: "Clear database events"
        command: "psql -h localhost -p 5432 -U postgres -d unhinged -c 'TRUNCATE TABLE events;'"
        confirm: true
      
      - name: "Restart services"
        command: "docker-compose -f docker-compose.dev.yml up -d kafka database"
