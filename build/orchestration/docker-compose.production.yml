# @llm-type config.build
# @llm-does production docker-compose with unified service definitions
version: '3.8'

services:
  # =============================================================================
  # AI/ML SERVICES (1100-1199)
  # =============================================================================
  
  llm:
    build:
      context: .
      dockerfile: Dockerfile.llm
    container_name: ollama-service
    ports:
      - "1500:11434"  # External 1500 → Internal 11434
    volumes:
      - llm-models:/models
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - unhinged-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  speech-to-text:
    build:
      context: ../..
      dockerfile: services/speech-to-text/Dockerfile
    container_name: speech-to-text-service
    ports:
      - "1101:8000"  # External 1101 → Internal 8000
      - "1191:9091"  # External 1191 → Internal 9091 (gRPC)
    environment:
      - WHISPER_MODEL=base
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    volumes:
      - whisper-models:/root/.cache/whisper
      - audio-uploads:/app/uploads
    networks:
      - unhinged-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped

  text-to-speech:
    build:
      context: ../..
      dockerfile: services/text-to-speech/Dockerfile
    container_name: text-to-speech-service
    ports:
      - "1102:8001"  # External 1102 → Internal 8001 (HTTP)
      - "9092:9092"  # External 9092 → Internal 9092 (gRPC)
    environment:
      - TTS_MODEL_NAME=tts_models/en/ljspeech/tacotron2-DDC
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    volumes:
      - tts-models:/app/models
      - audio-outputs:/app/outputs
    networks:
      - unhinged-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped

  vision-ai:
    build:
      context: ../..
      dockerfile: services/vision-ai/Dockerfile
    container_name: vision-ai-service
    ports:
      - "1103:8001"  # External 1103 → Internal 8001 (HTTP)
      - "9093:9093"  # External 9093 → Internal 9093 (gRPC)
    environment:
      - VISION_MODEL=Salesforce/blip-image-captioning-base
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    volumes:
      - vision-models:/root/.cache/transformers
      - image-uploads:/app/uploads
    networks:
      - unhinged-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s
    restart: unless-stopped

  chat-with-sessions:
    build:
      context: ../..
      dockerfile: services/chat-with-sessions/Dockerfile
    container_name: chat-with-sessions-service
    ports:
      - "9095:9095"  # External 9095 → Internal 9095 (gRPC)
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CRDB_HOST=database
      - CRDB_PORT=5432
      - CRDB_DATABASE=unhinged
      - CRDB_USER=postgres
      - CRDB_PASSWORD=password
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    depends_on:
      - redis
      - database
      - llm
    networks:
      - unhinged-network
    healthcheck:
      test: ["CMD", "python", "-c", "import grpc; from grpc_health.v1 import health_pb2, health_pb2_grpc; channel = grpc.insecure_channel('localhost:9095'); stub = health_pb2_grpc.HealthStub(channel); stub.Check(health_pb2.HealthCheckRequest())"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # =============================================================================
  # DATABASES (1200-1299)
  # =============================================================================
  
  database:
    image: postgres:15-alpine
    container_name: unhinged-postgres
    ports:
      - "1200:5432"  # External 1200 → Internal 5432
    environment:
      - POSTGRES_DB=unhinged
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - unhinged-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d unhinged"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    container_name: unhinged-redis
    ports:
      - "1201:6379"  # External 1201 → Internal 6379
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - unhinged-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # PLATFORMS (1300-1399)
  # =============================================================================
  
  persistence-platform:
    build:
      context: ../../platforms/persistence
      dockerfile: Dockerfile.mock
    container_name: persistence-platform-service
    ports:
      - "1300:8090"  # External 1300 → Internal 8090 (REST)
      - "1301:9090"  # External 1301 → Internal 9090 (gRPC)
    environment:
      - JAVA_OPTS=-Xmx2g -Xms1g
      - CONFIG_PATH=/app/config/persistence-platform.yaml
      - LOG_LEVEL=INFO
    volumes:
      - ./platforms/persistence/config:/app/config:ro
      - persistence-logs:/app/logs
    depends_on:
      - redis
      - database
    networks:
      - unhinged-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

# =============================================================================
# Networks
# =============================================================================
networks:
  unhinged-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  # AI/ML model storage
  llm-models:
    driver: local
  whisper-models:
    driver: local
  tts-models:
    driver: local
  vision-models:
    driver: local
  
  # Data storage
  audio-uploads:
    driver: local
  audio-outputs:
    driver: local
  image-uploads:
    driver: local
  
  # Database storage
  postgres-data:
    driver: local
  redis-data:
    driver: local
  
  # Platform storage
  persistence-logs:
    driver: local
