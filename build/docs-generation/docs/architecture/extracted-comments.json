[
  {
    "file_path": "llm-context-warmer.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.tool",
    "llm_does": "llm context warming system for onboarding new",
    "llm_rule": null,
    "raw_comment": "@llm-type util.tool\n@llm-does llm context warming system for onboarding new",
    "context": ""
  },
  {
    "file_path": "llm-context-warmer.py",
    "line_number": 16,
    "element_name": "LLMContextWarmer",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "structured context summaries for new llm agents",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does structured context summaries for new llm agents",
    "context": "class LLMContextWarmer:"
  },
  {
    "file_path": "llm-context-warmer.py",
    "line_number": 35,
    "element_name": "generate_project_overview",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "comprehensive project overview from extracted comments",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does comprehensive project overview from extracted comments",
    "context": "def generate_project_overview(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "llm-context-warmer.py",
    "line_number": 83,
    "element_name": "_extract_key_components",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "extract key system components with improved name",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does extract key system components with improved name",
    "context": "def _extract_key_components(self) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "llm-context-warmer.py",
    "line_number": 119,
    "element_name": "paginate_comments",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "paginated access to all extracted comments for",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does paginated access to all extracted comments for",
    "context": "def paginate_comments(self, page: int = 1) -> Dict[str, Any]:"
  },
  {
    "file_path": "llm-context-warmer.py",
    "line_number": 151,
    "element_name": "_improve_element_name",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "improve element name detection from file paths",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does improve element name detection from file paths",
    "context": "def _improve_element_name(self, comment: Dict[str, Any]) -> str:"
  },
  {
    "file_path": "llm-context-warmer.py",
    "line_number": 173,
    "element_name": "_find_related_services",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "find related services through port references, api",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does find related services through port references, api",
    "context": "def _find_related_services(self, comment: Dict[str, Any]) -> List[str]:"
  },
  {
    "file_path": "llm-context-warmer.py",
    "line_number": 225,
    "element_name": "_validate_context_completeness",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "validate that service and component comments have",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does validate that service and component comments have",
    "context": "def _validate_context_completeness(self, comments: List[Dict[str, Any]]) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "llm-context-warmer.py",
    "line_number": 246,
    "element_name": "_generate_getting_started_section",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "generate getting started section with setup commands",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does generate getting started section with setup commands",
    "context": "def _generate_getting_started_section(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "llm-context-warmer.py",
    "line_number": 274,
    "element_name": "_extract_dependency_information",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "extract dependency and build system information from",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does extract dependency and build system information from",
    "context": "def _extract_dependency_information(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "llm-context-warmer.py",
    "line_number": 306,
    "element_name": "_validate_legend_completeness",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "validate that",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does validate that",
    "context": "def _validate_legend_completeness(self, comments: List[Dict[str, Any]]) -> List[Dict[str, str]]:"
  },
  {
    "file_path": "llm-context-warmer.py",
    "line_number": 340,
    "element_name": "generate_enhanced_project_overview",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "generate enhanced project overview addressing all llm",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does generate enhanced project overview addressing all llm",
    "context": "def generate_enhanced_project_overview(self) -> Dict[str, Any]:"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "tdd test suite ensuring extraction and validation",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does tdd test suite ensuring extraction and validation",
    "context": ""
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 39,
    "element_name": "test_extract_llm_context_from_python",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test extraction of @llm-context from Python docstring.",
    "context": "def test_extract_llm_context_from_python(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 40,
    "element_name": "test_extract_llm_context_from_python",
    "language": "python",
    "llm_type": "service.api",
    "llm_does": "user requests",
    "llm_rule": null,
    "raw_comment": "\"\"\"\n@llm-type service.api\n@llm-does user requests\n\"\"\"\ndef process():\npass",
    "context": "def test_extract_llm_context_from_python(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 66,
    "element_name": "test_extract_llm_context_from_typescript",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test extraction of @llm-context from TypeScript JSDoc.",
    "context": "def test_extract_llm_context_from_typescript(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 67,
    "element_name": "test_extract_llm_context_from_typescript",
    "language": "python",
    "llm_type": "component.primitive",
    "llm_does": "react component for user authentication",
    "llm_rule": null,
    "raw_comment": "\"\"\"\n@llm-type component.primitive\n@llm-does react component for user authentication\n\"\"\"\nexport const AuthComponent = () => {\nreturn null;\n};",
    "context": "def test_extract_llm_context_from_typescript(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 86,
    "element_name": "test_parse_llm_tags_with_context",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test parsing of all tags including @llm-context.",
    "context": "def test_parse_llm_tags_with_context(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 87,
    "element_name": "test_parse_llm_tags_with_context",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "user input",
    "llm_rule": "never trust user input",
    "raw_comment": "@llm-type util.validator\n@llm-does user input\n@llm-rule never trust user input",
    "context": "def test_parse_llm_tags_with_context(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 133,
    "element_name": "test_validate_comment_with_context",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Test validation accepts @llm-context.",
    "context": "def test_validate_comment_with_context(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 194,
    "element_name": "TestLLMContextWarmerImprovements",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test suite for llm context warmer improvements",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test suite for llm context warmer improvements",
    "context": "class TestLLMContextWarmerImprovements(unittest.TestCase):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 200,
    "element_name": "test_element_name_detection_from_service_path",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test element name extraction from services directory",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test element name extraction from services directory",
    "context": "def test_element_name_detection_from_service_path(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 230,
    "element_name": "test_element_name_detection_from_python_file",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test element name extraction from python file",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test element name extraction from python file",
    "context": "def test_element_name_detection_from_python_file(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 258,
    "element_name": "test_find_related_services_by_port_references",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test cross-reference detection between services using port",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test cross-reference detection between services using port",
    "context": "def test_find_related_services_by_port_references(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 302,
    "element_name": "test_context_completeness_validation",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test validation of context completeness for service",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test validation of context completeness for service",
    "context": "def test_context_completeness_validation(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 343,
    "element_name": "test_pagination_data_integrity",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test that pagination maintains complete data integrity",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test that pagination maintains complete data integrity",
    "context": "def test_pagination_data_integrity(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 403,
    "element_name": "TestLLMContextWarmerEnhancements",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test suite for final llm context warmer",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test suite for final llm context warmer",
    "context": "class TestLLMContextWarmerEnhancements(unittest.TestCase):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 409,
    "element_name": "test_getting_started_section_generation",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test generation of getting started section with",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test generation of getting started section with",
    "context": "def test_getting_started_section_generation(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 452,
    "element_name": "test_dependency_information_extraction",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test extraction of dependency and setup information",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test extraction of dependency and setup information",
    "context": "def test_dependency_information_extraction(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 488,
    "element_name": "test_complete_legend_validation",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test validation that legends are complete and",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test validation that legends are complete and",
    "context": "def test_complete_legend_validation(self):"
  },
  {
    "file_path": "test_llm_extraction.py",
    "line_number": 530,
    "element_name": "test_enhanced_overview_with_getting_started",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "test that enhanced overview includes getting started",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does test that enhanced overview includes getting started",
    "context": "def test_enhanced_overview_with_getting_started(self):"
  },
  {
    "file_path": "extract-llm-comments.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.extractor",
    "llm_does": "llmdocs extraction and documentation generation from polyglot codebase",
    "llm_rule": "extraction must be comprehensive and handle all supported file types",
    "raw_comment": "@llm-type util.extractor\n@llm-does llmdocs extraction and documentation generation from polyglot codebase\n@llm-rule extraction must be comprehensive and handle all supported file types",
    "context": ""
  },
  {
    "file_path": "extract-llm-comments.py",
    "line_number": 126,
    "element_name": "_parse_llm_tags",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Parse @llm-* tags from comment text",
    "context": "def _parse_llm_tags(self, comment_text: str, file_path: str, line_number: int,"
  },
  {
    "file_path": "extract-llm-comments.py",
    "line_number": 232,
    "element_name": "_parse_llm_tags",
    "language": "python",
    "llm_type": null,
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Parse @llm-* tags from Python docstring",
    "context": "def _parse_llm_tags(self, comment_text: str, file_path: str, line_number: int,"
  },
  {
    "file_path": "extract-llm-comments.py",
    "line_number": 541,
    "element_name": "extract_comments_from_file",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Extracts all @llm-* comments from a single source file using appropriate language parser\n@llm-context TDD interface function for testing individual file processing",
    "context": "def extract_comments_from_file(file_path: str) -> List[LLMComment]:"
  },
  {
    "file_path": "extract-llm-comments.py",
    "line_number": 562,
    "element_name": "extract_comments_from_codebase",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Extracts all @llm-* comments from entire codebase using multi-language parsers\n@llm-context TDD interface function for testing full codebase processing",
    "context": "def extract_comments_from_codebase(root_path: Path) -> List[LLMComment]:"
  },
  {
    "file_path": "extract-llm-comments.py",
    "line_number": 572,
    "element_name": "parse_llm_tags",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Parses individual @llm-* tags from comment text using regex patterns\n@llm-context TDD interface function for testing tag parsing logic",
    "context": "def parse_llm_tags(text: str) -> Dict[str, str]:"
  },
  {
    "file_path": "extract-llm-comments.py",
    "line_number": 597,
    "element_name": "save_extraction_results",
    "language": "python",
    "llm_type": "function",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "\n@llm-type function\n@llm-legend Saves extracted comments to JSON with metadata\n@llm-context TDD interface function for testing result serialization",
    "context": "def save_extraction_results(comments: List[LLMComment], output_path: Path) -> Dict:"
  },
  {
    "file_path": "hierarchical-docs-generator.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "hierarchy",
    "llm_does": "Hierarchical documentation generator that creates organized markdown files from LlmDocs comments by @llm-type hierarchy",
    "llm_rule": null,
    "raw_comment": "@llm-does Hierarchical documentation generator that creates organized markdown files from LlmDocs comments by @llm-type hierarchy\n@llm-type build.generator/hierarchical-docs\n@llm-context Homogeneous documentation architecture generator that transforms LlmDocs extracted comments into systematically organized markdown files. Processes extracted-comments.json and groups content by hierarchical @llm-type categories (architecture.system, build.orchestrator, service.api, etc.) to generate domain-specific documentation files. Replaces heterogeneous documentation generation with single unified approach where all docs come from LlmDocs with consistent depth and organization. Output structure: docs/architecture/ (system design, components), docs/build/ (orchestration, profiles), docs/services/ (API, voice, graphics), docs/development/ (workflow, testing). Each generated file contains rich contextual information from @llm-context tags, organized by hierarchical classification, with consistent markdown formatting and cross-references.",
    "context": ""
  },
  {
    "file_path": "hierarchical-docs-generator.py",
    "line_number": 63,
    "element_name": "_group_by_hierarchy",
    "language": "python",
    "llm_type": "categories",
    "llm_does": null,
    "llm_rule": null,
    "raw_comment": "Group comments by hierarchical @llm-type categories",
    "context": "def _group_by_hierarchy(self, comments: List[Dict[str, Any]]) -> Dict[str, Dict[str, List[Dict]]]:"
  },
  {
    "file_path": "generate-project-structure.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.generator",
    "llm_does": "project structure documentation generation from filesystem analysis",
    "llm_rule": "structure documentation must be accurate and reflect current state",
    "raw_comment": "@llm-type util.generator\n@llm-does project structure documentation generation from filesystem analysis\n@llm-rule structure documentation must be accurate and reflect current state",
    "context": ""
  },
  {
    "file_path": "validate-llm-comments.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "util.validator",
    "llm_does": "llmdocs validation and quality assurance for evolved format compliance",
    "llm_rule": "validation must enforce evolved format standards and provide actionable feedback",
    "raw_comment": "@llm-type util.validator\n@llm-does llmdocs validation and quality assurance for evolved format compliance\n@llm-rule validation must enforce evolved format standards and provide actionable feedback",
    "context": ""
  },
  {
    "file_path": "validate-llm-comments.py",
    "line_number": 286,
    "element_name": "validate_comment",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "individual comment for completeness and quality",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does individual comment for completeness and quality",
    "context": "def validate_comment(comment) -> List[Dict]:"
  },
  {
    "file_path": "validate-llm-comments.py",
    "line_number": 296,
    "element_name": "validate_all_comments",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "batch of comments and returns summary",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does batch of comments and returns summary",
    "context": "def validate_all_comments(comments: List) -> Dict:"
  },
  {
    "file_path": "validate-llm-comments.py",
    "line_number": 319,
    "element_name": "check_required_tags",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "comment has all required tags for its",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does comment has all required tags for its",
    "context": "def check_required_tags(comment) -> List[Dict]:"
  },
  {
    "file_path": "validate-llm-comments.py",
    "line_number": 344,
    "element_name": "check_tag_format",
    "language": "python",
    "llm_type": "util.function",
    "llm_does": "tag content meets quality standards",
    "llm_rule": null,
    "raw_comment": "@llm-type util.function\n@llm-does tag content meets quality standards",
    "context": "def check_tag_format(comment) -> List[Dict]:"
  },
  {
    "file_path": "llm_types.py",
    "line_number": 2,
    "element_name": "unknown",
    "language": "python",
    "llm_type": "config.build",
    "llm_does": "defines data structures and interfaces for llm",
    "llm_rule": null,
    "raw_comment": "@llm-type config.build\n@llm-does defines data structures and interfaces for llm",
    "context": ""
  }
]