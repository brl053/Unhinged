version: '3.8'

services:
  # Enhanced Vision AI Service (Primary)
  vision-ai-enhanced:
    build:
      context: ./services/vision-ai-enhanced
      dockerfile: Dockerfile
    container_name: vision-ai-enhanced
    ports:
      - "8001:8001"
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONUNBUFFERED=1
      - HOST=0.0.0.0
      - PORT=8001
    volumes:
      - ./uploads:/app/uploads
      - ./models:/app/models
      - ./logs:/app/logs
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    networks:
      - multimodal-network

  # Context-Aware LLM Service
  context-llm:
    build:
      context: ./services/context-llm
      dockerfile: Dockerfile
    container_name: context-llm
    ports:
      - "8002:8002"
    environment:
      - PYTHONUNBUFFERED=1
      - HOST=0.0.0.0
      - PORT=8002
      - OLLAMA_HOST=http://ollama:11434
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - ./docs:/docs:ro
      - ./frontend:/frontend:ro
      - ./backend:/backend:ro
      - context_data:/app/data
      - context_cache:/app/cache
    depends_on:
      - ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - multimodal-network

  # Multimodal Orchestrator Service
  multimodal-orchestrator:
    build:
      context: ./services/multimodal-orchestrator
      dockerfile: Dockerfile
    container_name: multimodal-orchestrator
    ports:
      - "8003:8003"
    environment:
      - PYTHONUNBUFFERED=1
      - HOST=0.0.0.0
      - PORT=8003
      - VISION_ENHANCED_URL=http://vision-ai-enhanced:8001
      - VISION_LEGACY_URL=http://vision-ai:8001
      - CONTEXT_LLM_URL=http://context-llm:8002
    depends_on:
      - vision-ai-enhanced
      - context-llm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - multimodal-network

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - multimodal-network

  # Load Balancer (NGINX)
  multimodal-gateway:
    image: nginx:alpine
    container_name: multimodal-gateway
    ports:
      - "8000:80"
    volumes:
      - ./config/nginx/multimodal.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - multimodal-orchestrator
      - vision-ai-enhanced
      - context-llm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - multimodal-network

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: multimodal-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - multimodal-network

  # Monitoring and Metrics (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: multimodal-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - multimodal-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: multimodal-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - multimodal-network

volumes:
  vision_models:
    driver: local
  context_data:
    driver: local
  context_cache:
    driver: local
  ollama_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  multimodal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
