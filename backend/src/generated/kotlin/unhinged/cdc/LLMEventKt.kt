// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cdc_events.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package unhinged.cdc;

@kotlin.jvm.JvmName("-initializelLMEvent")
public inline fun lLMEvent(block: unhinged.cdc.LLMEventKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.LLMEvent =
  unhinged.cdc.LLMEventKt.Dsl._create(unhinged.cdc.CdcEvents.LLMEvent.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `unhinged.cdc.LLMEvent`
 */
public object LLMEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.cdc.CdcEvents.LLMEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.cdc.CdcEvents.LLMEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.cdc.CdcEvents.LLMEvent = _builder.build()

    /**
     * `string interaction_id = 1;`
     */
    public var interactionId: kotlin.String
      @JvmName("getInteractionId")
      get() = _builder.getInteractionId()
      @JvmName("setInteractionId")
      set(value) {
        _builder.setInteractionId(value)
      }
    /**
     * `string interaction_id = 1;`
     */
    public fun clearInteractionId() {
      _builder.clearInteractionId()
    }

    /**
     * `string model_name = 2;`
     */
    public var modelName: kotlin.String
      @JvmName("getModelName")
      get() = _builder.getModelName()
      @JvmName("setModelName")
      set(value) {
        _builder.setModelName(value)
      }
    /**
     * `string model_name = 2;`
     */
    public fun clearModelName() {
      _builder.clearModelName()
    }

    /**
     * `string provider = 3;`
     */
    public var provider: kotlin.String
      @JvmName("getProvider")
      get() = _builder.getProvider()
      @JvmName("setProvider")
      set(value) {
        _builder.setProvider(value)
      }
    /**
     * `string provider = 3;`
     */
    public fun clearProvider() {
      _builder.clearProvider()
    }

    /**
     * `.unhinged.cdc.LLMEventType event_type = 4;`
     */
    public var eventType: unhinged.cdc.CdcEvents.LLMEventType
      @JvmName("getEventType")
      get() = _builder.getEventType()
      @JvmName("setEventType")
      set(value) {
        _builder.setEventType(value)
      }
    public var eventTypeValue: kotlin.Int
      @JvmName("getEventTypeValue")
      get() = _builder.getEventTypeValue()
      @JvmName("setEventTypeValue")
      set(value) {
        _builder.setEventTypeValue(value)
      }
    /**
     * `.unhinged.cdc.LLMEventType event_type = 4;`
     */
    public fun clearEventType() {
      _builder.clearEventType()
    }

    /**
     * `.unhinged.cdc.LLMPromptSent prompt_sent = 10;`
     */
    public var promptSent: unhinged.cdc.CdcEvents.LLMPromptSent
      @JvmName("getPromptSent")
      get() = _builder.getPromptSent()
      @JvmName("setPromptSent")
      set(value) {
        _builder.setPromptSent(value)
      }
    /**
     * `.unhinged.cdc.LLMPromptSent prompt_sent = 10;`
     */
    public fun clearPromptSent() {
      _builder.clearPromptSent()
    }
    /**
     * `.unhinged.cdc.LLMPromptSent prompt_sent = 10;`
     * @return Whether the promptSent field is set.
     */
    public fun hasPromptSent(): kotlin.Boolean {
      return _builder.hasPromptSent()
    }

    /**
     * `.unhinged.cdc.LLMResponseReceived response_received = 11;`
     */
    public var responseReceived: unhinged.cdc.CdcEvents.LLMResponseReceived
      @JvmName("getResponseReceived")
      get() = _builder.getResponseReceived()
      @JvmName("setResponseReceived")
      set(value) {
        _builder.setResponseReceived(value)
      }
    /**
     * `.unhinged.cdc.LLMResponseReceived response_received = 11;`
     */
    public fun clearResponseReceived() {
      _builder.clearResponseReceived()
    }
    /**
     * `.unhinged.cdc.LLMResponseReceived response_received = 11;`
     * @return Whether the responseReceived field is set.
     */
    public fun hasResponseReceived(): kotlin.Boolean {
      return _builder.hasResponseReceived()
    }

    /**
     * `.unhinged.cdc.LLMError llm_error = 12;`
     */
    public var llmError: unhinged.cdc.CdcEvents.LLMError
      @JvmName("getLlmError")
      get() = _builder.getLlmError()
      @JvmName("setLlmError")
      set(value) {
        _builder.setLlmError(value)
      }
    /**
     * `.unhinged.cdc.LLMError llm_error = 12;`
     */
    public fun clearLlmError() {
      _builder.clearLlmError()
    }
    /**
     * `.unhinged.cdc.LLMError llm_error = 12;`
     * @return Whether the llmError field is set.
     */
    public fun hasLlmError(): kotlin.Boolean {
      return _builder.hasLlmError()
    }

    /**
     * `.unhinged.cdc.LLMFeedback feedback = 13;`
     */
    public var feedback: unhinged.cdc.CdcEvents.LLMFeedback
      @JvmName("getFeedback")
      get() = _builder.getFeedback()
      @JvmName("setFeedback")
      set(value) {
        _builder.setFeedback(value)
      }
    /**
     * `.unhinged.cdc.LLMFeedback feedback = 13;`
     */
    public fun clearFeedback() {
      _builder.clearFeedback()
    }
    /**
     * `.unhinged.cdc.LLMFeedback feedback = 13;`
     * @return Whether the feedback field is set.
     */
    public fun hasFeedback(): kotlin.Boolean {
      return _builder.hasFeedback()
    }

    /**
     * `.unhinged.cdc.LLMTokenUsage token_usage = 14;`
     */
    public var tokenUsage: unhinged.cdc.CdcEvents.LLMTokenUsage
      @JvmName("getTokenUsage")
      get() = _builder.getTokenUsage()
      @JvmName("setTokenUsage")
      set(value) {
        _builder.setTokenUsage(value)
      }
    /**
     * `.unhinged.cdc.LLMTokenUsage token_usage = 14;`
     */
    public fun clearTokenUsage() {
      _builder.clearTokenUsage()
    }
    /**
     * `.unhinged.cdc.LLMTokenUsage token_usage = 14;`
     * @return Whether the tokenUsage field is set.
     */
    public fun hasTokenUsage(): kotlin.Boolean {
      return _builder.hasTokenUsage()
    }
    public val eventDataCase: unhinged.cdc.CdcEvents.LLMEvent.EventDataCase
      @JvmName("getEventDataCase")
      get() = _builder.getEventDataCase()

    public fun clearEventData() {
      _builder.clearEventData()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.cdc.CdcEvents.LLMEvent.copy(block: `unhinged.cdc`.LLMEventKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.LLMEvent =
  `unhinged.cdc`.LLMEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.cdc.CdcEvents.LLMEventOrBuilder.promptSentOrNull: unhinged.cdc.CdcEvents.LLMPromptSent?
  get() = if (hasPromptSent()) getPromptSent() else null

public val unhinged.cdc.CdcEvents.LLMEventOrBuilder.responseReceivedOrNull: unhinged.cdc.CdcEvents.LLMResponseReceived?
  get() = if (hasResponseReceived()) getResponseReceived() else null

public val unhinged.cdc.CdcEvents.LLMEventOrBuilder.llmErrorOrNull: unhinged.cdc.CdcEvents.LLMError?
  get() = if (hasLlmError()) getLlmError() else null

public val unhinged.cdc.CdcEvents.LLMEventOrBuilder.feedbackOrNull: unhinged.cdc.CdcEvents.LLMFeedback?
  get() = if (hasFeedback()) getFeedback() else null

public val unhinged.cdc.CdcEvents.LLMEventOrBuilder.tokenUsageOrNull: unhinged.cdc.CdcEvents.LLMTokenUsage?
  get() = if (hasTokenUsage()) getTokenUsage() else null

