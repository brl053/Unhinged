// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: audio.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package unhinged.audio;

@kotlin.jvm.JvmName("-initializeconvertAudioRequest")
public inline fun convertAudioRequest(block: unhinged.audio.ConvertAudioRequestKt.Dsl.() -> kotlin.Unit): unhinged.audio.ConvertAudioRequest =
  unhinged.audio.ConvertAudioRequestKt.Dsl._create(unhinged.audio.ConvertAudioRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `unhinged.audio.v1.ConvertAudioRequest`
 */
public object ConvertAudioRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.audio.ConvertAudioRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.audio.ConvertAudioRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.audio.ConvertAudioRequest = _builder.build()

    /**
     * ```
     * ← DRY!
     * ```
     *
     * `.unhinged.common.v1.Attachment input_audio = 1;`
     */
    public var inputAudio: unhinged.common.Attachment
      @JvmName("getInputAudio")
      get() = _builder.getInputAudio()
      @JvmName("setInputAudio")
      set(value) {
        _builder.setInputAudio(value)
      }
    /**
     * ```
     * ← DRY!
     * ```
     *
     * `.unhinged.common.v1.Attachment input_audio = 1;`
     */
    public fun clearInputAudio() {
      _builder.clearInputAudio()
    }
    /**
     * ```
     * ← DRY!
     * ```
     *
     * `.unhinged.common.v1.Attachment input_audio = 1;`
     * @return Whether the inputAudio field is set.
     */
    public fun hasInputAudio(): kotlin.Boolean {
      return _builder.hasInputAudio()
    }

    /**
     * `.unhinged.audio.v1.AudioFormat target_format = 2;`
     */
    public var targetFormat: unhinged.audio.AudioFormat
      @JvmName("getTargetFormat")
      get() = _builder.getTargetFormat()
      @JvmName("setTargetFormat")
      set(value) {
        _builder.setTargetFormat(value)
      }
    public var targetFormatValue: kotlin.Int
      @JvmName("getTargetFormatValue")
      get() = _builder.getTargetFormatValue()
      @JvmName("setTargetFormatValue")
      set(value) {
        _builder.setTargetFormatValue(value)
      }
    /**
     * `.unhinged.audio.v1.AudioFormat target_format = 2;`
     */
    public fun clearTargetFormat() {
      _builder.clearTargetFormat()
    }

    /**
     * `int32 target_sample_rate = 3;`
     */
    public var targetSampleRate: kotlin.Int
      @JvmName("getTargetSampleRate")
      get() = _builder.getTargetSampleRate()
      @JvmName("setTargetSampleRate")
      set(value) {
        _builder.setTargetSampleRate(value)
      }
    /**
     * `int32 target_sample_rate = 3;`
     */
    public fun clearTargetSampleRate() {
      _builder.clearTargetSampleRate()
    }

    /**
     * `.unhinged.audio.v1.AudioOptions options = 4;`
     */
    public var options: unhinged.audio.AudioOptions
      @JvmName("getOptions")
      get() = _builder.getOptions()
      @JvmName("setOptions")
      set(value) {
        _builder.setOptions(value)
      }
    /**
     * `.unhinged.audio.v1.AudioOptions options = 4;`
     */
    public fun clearOptions() {
      _builder.clearOptions()
    }
    /**
     * `.unhinged.audio.v1.AudioOptions options = 4;`
     * @return Whether the options field is set.
     */
    public fun hasOptions(): kotlin.Boolean {
      return _builder.hasOptions()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.audio.ConvertAudioRequest.copy(block: `unhinged.audio`.ConvertAudioRequestKt.Dsl.() -> kotlin.Unit): unhinged.audio.ConvertAudioRequest =
  `unhinged.audio`.ConvertAudioRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.audio.ConvertAudioRequestOrBuilder.inputAudioOrNull: unhinged.common.Attachment?
  get() = if (hasInputAudio()) getInputAudio() else null

public val unhinged.audio.ConvertAudioRequestOrBuilder.optionsOrNull: unhinged.audio.AudioOptions?
  get() = if (hasOptions()) getOptions() else null

