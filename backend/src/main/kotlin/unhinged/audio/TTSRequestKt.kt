// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: audio.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package unhinged.audio;

@kotlin.jvm.JvmName("-initializetTSRequest")
public inline fun tTSRequest(block: unhinged.audio.TTSRequestKt.Dsl.() -> kotlin.Unit): unhinged.audio.TTSRequest =
  unhinged.audio.TTSRequestKt.Dsl._create(unhinged.audio.TTSRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 **
 * Text-to-Speech request
 * ```
 *
 * Protobuf type `unhinged.audio.v1.TTSRequest`
 */
public object TTSRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.audio.TTSRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.audio.TTSRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.audio.TTSRequest = _builder.build()

    /**
     * `string text = 1;`
     */
    public var text: kotlin.String
      @JvmName("getText")
      get() = _builder.getText()
      @JvmName("setText")
      set(value) {
        _builder.setText(value)
      }
    /**
     * `string text = 1;`
     */
    public fun clearText() {
      _builder.clearText()
    }

    /**
     * `string voice_id = 2;`
     */
    public var voiceId: kotlin.String
      @JvmName("getVoiceId")
      get() = _builder.getVoiceId()
      @JvmName("setVoiceId")
      set(value) {
        _builder.setVoiceId(value)
      }
    /**
     * `string voice_id = 2;`
     */
    public fun clearVoiceId() {
      _builder.clearVoiceId()
    }

    /**
     * `.unhinged.audio.v1.AudioOptions options = 3;`
     */
    public var options: unhinged.audio.AudioOptions
      @JvmName("getOptions")
      get() = _builder.getOptions()
      @JvmName("setOptions")
      set(value) {
        _builder.setOptions(value)
      }
    /**
     * `.unhinged.audio.v1.AudioOptions options = 3;`
     */
    public fun clearOptions() {
      _builder.clearOptions()
    }
    /**
     * `.unhinged.audio.v1.AudioOptions options = 3;`
     * @return Whether the options field is set.
     */
    public fun hasOptions(): kotlin.Boolean {
      return _builder.hasOptions()
    }

    /**
     * ```
     * Output configuration
     * ```
     *
     * `.unhinged.audio.v1.AudioFormat output_format = 4;`
     */
    public var outputFormat: unhinged.audio.AudioFormat
      @JvmName("getOutputFormat")
      get() = _builder.getOutputFormat()
      @JvmName("setOutputFormat")
      set(value) {
        _builder.setOutputFormat(value)
      }
    public var outputFormatValue: kotlin.Int
      @JvmName("getOutputFormatValue")
      get() = _builder.getOutputFormatValue()
      @JvmName("setOutputFormatValue")
      set(value) {
        _builder.setOutputFormatValue(value)
      }
    /**
     * ```
     * Output configuration
     * ```
     *
     * `.unhinged.audio.v1.AudioFormat output_format = 4;`
     */
    public fun clearOutputFormat() {
      _builder.clearOutputFormat()
    }

    /**
     * `int32 sample_rate = 5;`
     */
    public var sampleRate: kotlin.Int
      @JvmName("getSampleRate")
      get() = _builder.getSampleRate()
      @JvmName("setSampleRate")
      set(value) {
        _builder.setSampleRate(value)
      }
    /**
     * `int32 sample_rate = 5;`
     */
    public fun clearSampleRate() {
      _builder.clearSampleRate()
    }

    /**
     * `int32 channels = 6;`
     */
    public var channels: kotlin.Int
      @JvmName("getChannels")
      get() = _builder.getChannels()
      @JvmName("setChannels")
      set(value) {
        _builder.setChannels(value)
      }
    /**
     * `int32 channels = 6;`
     */
    public fun clearChannels() {
      _builder.clearChannels()
    }

    /**
     * ```
     * Processing options
     * ```
     *
     * `bool enable_ssml = 7;`
     */
    public var enableSsml: kotlin.Boolean
      @JvmName("getEnableSsml")
      get() = _builder.getEnableSsml()
      @JvmName("setEnableSsml")
      set(value) {
        _builder.setEnableSsml(value)
      }
    /**
     * ```
     * Processing options
     * ```
     *
     * `bool enable_ssml = 7;`
     */
    public fun clearEnableSsml() {
      _builder.clearEnableSsml()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class EffectsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Audio effects to apply
     * ```
     *
     * `repeated .unhinged.audio.v1.AudioEffect effects = 8;`
     */
     public val effects: com.google.protobuf.kotlin.DslList<unhinged.audio.AudioEffect, EffectsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getEffectsList()
      )
    /**
     * ```
     * Audio effects to apply
     * ```
     *
     * `repeated .unhinged.audio.v1.AudioEffect effects = 8;`
     * @param value The effects to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addEffects")
    public fun com.google.protobuf.kotlin.DslList<unhinged.audio.AudioEffect, EffectsProxy>.add(value: unhinged.audio.AudioEffect) {
      _builder.addEffects(value)
    }
    /**
     * ```
     * Audio effects to apply
     * ```
     *
     * `repeated .unhinged.audio.v1.AudioEffect effects = 8;`
     * @param value The effects to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignEffects")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<unhinged.audio.AudioEffect, EffectsProxy>.plusAssign(value: unhinged.audio.AudioEffect) {
      add(value)
    }
    /**
     * ```
     * Audio effects to apply
     * ```
     *
     * `repeated .unhinged.audio.v1.AudioEffect effects = 8;`
     * @param values The effects to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllEffects")
    public fun com.google.protobuf.kotlin.DslList<unhinged.audio.AudioEffect, EffectsProxy>.addAll(values: kotlin.collections.Iterable<unhinged.audio.AudioEffect>) {
      _builder.addAllEffects(values)
    }
    /**
     * ```
     * Audio effects to apply
     * ```
     *
     * `repeated .unhinged.audio.v1.AudioEffect effects = 8;`
     * @param values The effects to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllEffects")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<unhinged.audio.AudioEffect, EffectsProxy>.plusAssign(values: kotlin.collections.Iterable<unhinged.audio.AudioEffect>) {
      addAll(values)
    }
    /**
     * ```
     * Audio effects to apply
     * ```
     *
     * `repeated .unhinged.audio.v1.AudioEffect effects = 8;`
     * @param index The index to set the value at.
     * @param value The effects to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setEffects")
    public operator fun com.google.protobuf.kotlin.DslList<unhinged.audio.AudioEffect, EffectsProxy>.set(index: kotlin.Int, value: unhinged.audio.AudioEffect) {
      _builder.setEffects(index, value)
    }
    /**
     * ```
     * Audio effects to apply
     * ```
     *
     * `repeated .unhinged.audio.v1.AudioEffect effects = 8;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearEffects")
    public fun com.google.protobuf.kotlin.DslList<unhinged.audio.AudioEffect, EffectsProxy>.clear() {
      _builder.clearEffects()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.audio.TTSRequest.copy(block: `unhinged.audio`.TTSRequestKt.Dsl.() -> kotlin.Unit): unhinged.audio.TTSRequest =
  `unhinged.audio`.TTSRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.audio.TTSRequestOrBuilder.optionsOrNull: unhinged.audio.AudioOptions?
  get() = if (hasOptions()) getOptions() else null

