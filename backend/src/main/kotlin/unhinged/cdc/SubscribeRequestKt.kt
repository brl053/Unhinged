// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cdc_service.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package unhinged.cdc;

@kotlin.jvm.JvmName("-initializesubscribeRequest")
public inline fun subscribeRequest(block: unhinged.cdc.SubscribeRequestKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcService.SubscribeRequest =
  unhinged.cdc.SubscribeRequestKt.Dsl._create(unhinged.cdc.CdcService.SubscribeRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * Subscribe to event stream
 * ```
 *
 * Protobuf type `unhinged.cdc.SubscribeRequest`
 */
public object SubscribeRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.cdc.CdcService.SubscribeRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.cdc.CdcService.SubscribeRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.cdc.CdcService.SubscribeRequest = _builder.build()

    /**
     * `string subscriber_id = 1;`
     */
    public var subscriberId: kotlin.String
      @JvmName("getSubscriberId")
      get() = _builder.getSubscriberId()
      @JvmName("setSubscriberId")
      set(value) {
        _builder.setSubscriberId(value)
      }
    /**
     * `string subscriber_id = 1;`
     */
    public fun clearSubscriberId() {
      _builder.clearSubscriberId()
    }

    /**
     * `string subscriber_name = 2;`
     */
    public var subscriberName: kotlin.String
      @JvmName("getSubscriberName")
      get() = _builder.getSubscriberName()
      @JvmName("setSubscriberName")
      set(value) {
        _builder.setSubscriberName(value)
      }
    /**
     * `string subscriber_name = 2;`
     */
    public fun clearSubscriberName() {
      _builder.clearSubscriberName()
    }

    /**
     * ```
     * Subscription filters
     * ```
     *
     * `.unhinged.cdc.EventFilter filter = 3;`
     */
    public var filter: unhinged.cdc.CdcService.EventFilter
      @JvmName("getFilter")
      get() = _builder.getFilter()
      @JvmName("setFilter")
      set(value) {
        _builder.setFilter(value)
      }
    /**
     * ```
     * Subscription filters
     * ```
     *
     * `.unhinged.cdc.EventFilter filter = 3;`
     */
    public fun clearFilter() {
      _builder.clearFilter()
    }
    /**
     * ```
     * Subscription filters
     * ```
     *
     * `.unhinged.cdc.EventFilter filter = 3;`
     * @return Whether the filter field is set.
     */
    public fun hasFilter(): kotlin.Boolean {
      return _builder.hasFilter()
    }

    /**
     * ```
     * Subscription options
     * ```
     *
     * `.unhinged.cdc.SubscriptionOptions options = 4;`
     */
    public var options: unhinged.cdc.CdcService.SubscriptionOptions
      @JvmName("getOptions")
      get() = _builder.getOptions()
      @JvmName("setOptions")
      set(value) {
        _builder.setOptions(value)
      }
    /**
     * ```
     * Subscription options
     * ```
     *
     * `.unhinged.cdc.SubscriptionOptions options = 4;`
     */
    public fun clearOptions() {
      _builder.clearOptions()
    }
    /**
     * ```
     * Subscription options
     * ```
     *
     * `.unhinged.cdc.SubscriptionOptions options = 4;`
     * @return Whether the options field is set.
     */
    public fun hasOptions(): kotlin.Boolean {
      return _builder.hasOptions()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.cdc.CdcService.SubscribeRequest.copy(block: `unhinged.cdc`.SubscribeRequestKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcService.SubscribeRequest =
  `unhinged.cdc`.SubscribeRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val unhinged.cdc.CdcService.SubscribeRequestOrBuilder.filterOrNull: unhinged.cdc.CdcService.EventFilter?
  get() = if (hasFilter()) getFilter() else null

public val unhinged.cdc.CdcService.SubscribeRequestOrBuilder.optionsOrNull: unhinged.cdc.CdcService.SubscriptionOptions?
  get() = if (hasOptions()) getOptions() else null

