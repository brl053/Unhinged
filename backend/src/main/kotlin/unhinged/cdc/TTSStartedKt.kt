// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cdc_events.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package unhinged.cdc;

@kotlin.jvm.JvmName("-initializetTSStarted")
public inline fun tTSStarted(block: unhinged.cdc.TTSStartedKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.TTSStarted =
  unhinged.cdc.TTSStartedKt.Dsl._create(unhinged.cdc.CdcEvents.TTSStarted.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `unhinged.cdc.TTSStarted`
 */
public object TTSStartedKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: unhinged.cdc.CdcEvents.TTSStarted.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: unhinged.cdc.CdcEvents.TTSStarted.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): unhinged.cdc.CdcEvents.TTSStarted = _builder.build()

    /**
     * `string text = 1;`
     */
    public var text: kotlin.String
      @JvmName("getText")
      get() = _builder.getText()
      @JvmName("setText")
      set(value) {
        _builder.setText(value)
      }
    /**
     * `string text = 1;`
     */
    public fun clearText() {
      _builder.clearText()
    }

    /**
     * `string voice_id = 2;`
     */
    public var voiceId: kotlin.String
      @JvmName("getVoiceId")
      get() = _builder.getVoiceId()
      @JvmName("setVoiceId")
      set(value) {
        _builder.setVoiceId(value)
      }
    /**
     * `string voice_id = 2;`
     */
    public fun clearVoiceId() {
      _builder.clearVoiceId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun unhinged.cdc.CdcEvents.TTSStarted.copy(block: `unhinged.cdc`.TTSStartedKt.Dsl.() -> kotlin.Unit): unhinged.cdc.CdcEvents.TTSStarted =
  `unhinged.cdc`.TTSStartedKt.Dsl._create(this.toBuilder()).apply { block() }._build()

