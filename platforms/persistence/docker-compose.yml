#
# @llm-type platform
# @llm-legend docker-compose.yml - platform infrastructure component
# @llm-key Core functionality for docker-compose
# @llm-map Part of the Unhinged system architecture
# @llm-axiom Maintains system independence and architectural compliance
# @llm-contract Provides standardized interface for system integration
# @llm-token docker-compose: platform infrastructure component
#
# ============================================================================
# Unhinged Persistence Platform - Docker Compose Configuration
# ============================================================================
#
# @file docker-compose.yml
# @version 1.0.0
# @author Unhinged Team
# @date 2025-10-19
# @description Docker Compose setup for the persistence platform
#
# This Docker Compose file sets up all database technologies and the
# persistence platform service with proper networking, volumes, and
# environment configuration for development and testing.
#
# Location: platforms/persistence/docker-compose.yml
# ============================================================================

version: '3.8'

services:
  # ==========================================================================
  # Persistence Platform Service
  # ==========================================================================
  persistence-platform:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: unhinged-persistence-platform
    ports:
      - "8190:8090"  # REST API
      - "9190:9090"  # gRPC API
    environment:
      - JAVA_OPTS=-Xmx2g -Xms1g
      - CONFIG_PATH=/app/config/persistence-platform.yaml
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
    depends_on:
      - redis
      - cockroachdb
      - mongodb
      - weaviate
      - elasticsearch
      - cassandra
      - neo4j
    networks:
      - persistence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==========================================================================
  # Redis - Cache and Session Store
  # ==========================================================================
  redis:
    image: redis:7.2-alpine
    container_name: unhinged-redis
    ports:
      - "6479:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - persistence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ==========================================================================
  # CockroachDB - Distributed SQL
  # ==========================================================================
  cockroachdb:
    image: cockroachdb/cockroach:v23.1.11
    container_name: unhinged-cockroachdb
    ports:
      - "26357:26257"  # SQL port
      - "8084:8080"    # Admin UI
    command: start-single-node --insecure --store=attrs=ssd,path=/cockroach/cockroach-data --listen-addr=0.0.0.0:26257 --http-addr=0.0.0.0:8080
    volumes:
      - cockroachdb-data:/cockroach/cockroach-data
    environment:
      - COCKROACH_DATABASE=defaultdb
      - COCKROACH_USER=root
    networks:
      - persistence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health?ready=1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # MongoDB - Document Store
  # ==========================================================================
  mongodb:
    image: mongo:7.0
    container_name: unhinged-mongodb
    ports:
      - "27117:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=unhinged
    volumes:
      - mongodb-data:/data/db
      - ./scripts/mongodb-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - persistence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Weaviate - Vector Database
  # ==========================================================================
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: unhinged-weaviate
    ports:
      - "8081:8080"
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate-data:/var/lib/weaviate
    networks:
      - persistence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Elasticsearch - Search and Analytics
  # ==========================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: unhinged-elasticsearch
    ports:
      - "9300:9200"
      - "9400:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - persistence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Cassandra - Wide Column Store
  # ==========================================================================
  cassandra:
    image: cassandra:4.1
    container_name: unhinged-cassandra
    ports:
      - "9142:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=UnhingedCluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - MAX_HEAP_SIZE=1G
      - HEAP_NEWSIZE=200M
    volumes:
      - cassandra-data:/var/lib/cassandra
    networks:
      - persistence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ==========================================================================
  # Neo4j - Graph Database
  # ==========================================================================
  neo4j:
    image: neo4j:5.13-community
    container_name: unhinged-neo4j
    ports:
      - "7574:7474"  # HTTP
      - "7787:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    networks:
      - persistence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # MinIO - S3-Compatible Storage for Data Lake
  # ==========================================================================
  minio:
    image: minio/minio:RELEASE.2023-11-01T18-37-25Z
    container_name: unhinged-minio
    ports:
      - "9002:9000"  # API
      - "9101:9001"  # Console
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - persistence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Monitoring and Observability
  # ==========================================================================
  
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: unhinged-prometheus
    ports:
      - "9190:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - persistence-network
    restart: unless-stopped

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: unhinged-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - persistence-network
    restart: unless-stopped

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: unhinged-jaeger
    ports:
      - "16786:16686"  # UI
      - "14368:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - persistence-network
    restart: unless-stopped

# ==========================================================================
# Networks
# ==========================================================================
networks:
  persistence-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==========================================================================
# Volumes
# ==========================================================================
volumes:
  # Database volumes
  redis-data:
    driver: local
  cockroachdb-data:
    driver: local
  mongodb-data:
    driver: local
  weaviate-data:
    driver: local
  elasticsearch-data:
    driver: local
  cassandra-data:
    driver: local
  neo4j-data:
    driver: local
  neo4j-logs:
    driver: local
  minio-data:
    driver: local
  
  # Monitoring volumes
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
