# ============================================================================
# Unhinged Observability Stack - LGTM Integration
# ============================================================================
#
# @file docker-compose.observability.yml
# @version 1.0.0
# @author Unhinged Team
# @date 2025-01-07
# @description LGTM stack deployment for comprehensive observability
#
# LEGEND: What this provides
# - L: Loki for log aggregation and querying
# - G: Grafana for visualization and dashboards
# - T: Tempo for distributed tracing
# - M: Prometheus for metrics collection
#
# KEY: Integration points
# - Non-conflicting ports with existing services
# - Service discovery for existing Unhinged services
# - OpenTelemetry collector for unified telemetry
#
# MAP: Service architecture
# Frontend → Backend → Services → LGTM Stack → Insights
# ============================================================================

# Docker Compose file for Unhinged Observability Stack

services:
  # Grafana - Visualization Hub
  grafana:
    image: grafana/grafana:10.2.0
    container_name: unhinged-grafana
    ports:
      - "3001:3000"  # Avoids conflict with frontend:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=unhinged_observability
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./temp_monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./temp_monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-storage:/var/lib/grafana
    networks:
      - unhinged-network
    depends_on:
      - prometheus
      - loki
      - tempo
    restart: unless-stopped

  # Prometheus - Metrics Engine
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: unhinged-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./temp_monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-storage:/prometheus
    networks:
      - unhinged-network
    restart: unless-stopped

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: unhinged-loki
    ports:
      - "3100:3100"
    volumes:
      - loki-storage:/loki
    networks:
      - unhinged-network
    restart: unless-stopped

  # Tempo - Distributed Tracing
  tempo:
    image: grafana/tempo:2.2.0
    container_name: unhinged-tempo
    ports:
      - "3200:3200"   # Tempo HTTP
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
    volumes:
      - tempo-storage:/tmp/tempo
    networks:
      - unhinged-network
    restart: unless-stopped

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    container_name: unhinged-otel-collector
    ports:
      - "4319:4317"   # OTLP gRPC (non-conflicting)
      - "4320:4318"   # OTLP HTTP (non-conflicting)
      - "8889:8889"   # Prometheus metrics endpoint
    depends_on:
      - prometheus
      - loki
      - tempo
    networks:
      - unhinged-network
    restart: unless-stopped

# Postgres Exporter disabled for now - requires postgres service
  # postgres-exporter:
  #   image: prometheuscommunity/postgres-exporter:v0.13.2
  #   container_name: unhinged-postgres-exporter
  #   ports:
  #     - "9187:9187"
  #   environment:
  #     DATA_SOURCE_NAME: "postgresql://postgres:password@postgres:5432/unhinged?sslmode=disable"
  #   networks:
  #     - unhinged-network
  #   restart: unless-stopped

volumes:
  grafana-storage:
  prometheus-storage:
  loki-storage:
  tempo-storage:

networks:
  unhinged-network:
    external: true
