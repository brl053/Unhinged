syntax = "proto3";

package unhinged.document_store;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// ============================================================================
// DocumentStore API v1.0.0
// ============================================================================
//
// @version 1.0.0
// @author Unhinged Team
// @date 2025-01-04
// @description Document store with versioning, tagging, and session context
// @breaking false
//
// This schema provides a document-centric storage API over PostgreSQL with:
// - Document CRUD operations with automatic versioning
// - Tag-based version management (production, staging, etc.)
// - Session context queries for LLM integration
// - Audit trails and rollback capabilities
// - Batch operations for performance
//
// Generated code includes version hash validation to ensure compatibility.
// ============================================================================

// Core document message
message Document {
  string document_uuid = 1;
  string type = 2;
  string name = 3;
  string namespace = 4;
  int32 version = 5;
  string body_json = 6;
  google.protobuf.Struct metadata = 7;
  repeated string tags = 8;
  google.protobuf.Timestamp created_at = 9;
  string created_by = 10;
  string created_by_type = 11;
  string session_id = 12;
}

// Document stub for listing without body
message DocumentStub {
  string document_uuid = 1;
  string type = 2;
  string name = 3;
  string namespace = 4;
  int32 version = 5;
  google.protobuf.Struct metadata = 6;
  repeated string tags = 7;
  google.protobuf.Timestamp created_at = 8;
  string created_by = 9;
  string created_by_type = 10;
  string session_id = 11;
}

// Active tag information
message ActiveTag {
  string document_uuid = 1;
  int32 document_version = 2;
  string tag = 3;
  google.protobuf.Timestamp updated_at = 4;
  string updated_by = 5;
  string updated_by_type = 6;
  string session_id = 7;
}

// Tag event for audit trail
message TagEvent {
  string tag_event_uuid = 1;
  string document_uuid = 2;
  int32 document_version = 3;
  string tag = 4;
  string operation = 5;
  google.protobuf.Timestamp created_at = 6;
  string created_by = 7;
  string created_by_type = 8;
  string session_id = 9;
}

// Request/Response messages for document operations

// Create/Update document request
message PutDocumentRequest {
  Document document = 1;
}

message PutDocumentResponse {
  bool success = 1;
  string message = 2;
  string document_uuid = 3;
  int32 version = 4;
}

// Batch create/update documents
message PutDocumentsRequest {
  repeated Document documents = 1;
}

message PutDocumentReceipt {
  string document_uuid = 1;
  int32 version = 2;
  bool success = 3;
  string error_message = 4;
}

message PutDocumentsResponse {
  bool success = 1;
  string message = 2;
  repeated PutDocumentReceipt receipts = 3;
}

// Get single document
message GetDocumentRequest {
  string document_uuid = 1;
  optional int32 version = 2;
  optional string tag = 3;
  bool include_body = 4;
}

message GetDocumentResponse {
  bool success = 1;
  string message = 2;
  Document document = 3;
}

// List documents with filtering
message ListDocumentsRequest {
  optional string namespace = 1;
  optional string type = 2;
  optional string tag = 3;
  optional string session_id = 4;
  optional google.protobuf.Timestamp pagination_token = 5;
  int32 page_size = 6;
  bool include_body = 7;
  bool latest_versions_only = 8;
}

message ListDocumentsResponse {
  bool success = 1;
  string message = 2;
  repeated Document documents = 3;
  google.protobuf.Timestamp next_pagination_token = 4;
  int32 total_count = 5;
}

// List document versions
message ListDocumentVersionsRequest {
  string document_uuid = 1;
  optional google.protobuf.Timestamp pagination_token = 2;
  int32 page_size = 3;
  bool include_body = 4;
}

message ListDocumentVersionsResponse {
  bool success = 1;
  string message = 2;
  repeated Document documents = 3;
  google.protobuf.Timestamp next_pagination_token = 4;
  int32 total_count = 5;
}

// Tag operations
message TagDocumentRequest {
  string document_uuid = 1;
  int32 version = 2;
  string tag = 3;
  string tagged_by = 4;
  string tagged_by_type = 5;
  string session_id = 6;
}

message TagDocumentResponse {
  bool success = 1;
  string message = 2;
}

// List active tags for a document
message ListActiveTagsRequest {
  string document_uuid = 1;
  optional int32 document_version = 2;
  optional google.protobuf.Timestamp pagination_token = 3;
  int32 page_size = 4;
}

message ListActiveTagsResponse {
  bool success = 1;
  string message = 2;
  repeated ActiveTag tags = 3;
  google.protobuf.Timestamp next_pagination_token = 4;
  int32 total_count = 5;
}

// List tag events (audit trail)
message ListTagEventsRequest {
  string document_uuid = 1;
  string tag = 2;
  optional google.protobuf.Timestamp pagination_token = 3;
  int32 page_size = 4;
}

message ListTagEventsResponse {
  bool success = 1;
  string message = 2;
  repeated TagEvent events = 3;
  google.protobuf.Timestamp next_pagination_token = 4;
  int32 total_count = 5;
}

// Session context queries
message GetSessionContextRequest {
  string session_id = 1;
  repeated string document_types = 2;
  optional google.protobuf.Timestamp since = 3;
  int32 limit = 4;
  bool include_body = 5;
}

message GetSessionContextResponse {
  bool success = 1;
  string message = 2;
  repeated Document documents = 3;
  int32 total_count = 4;
}

// Delete operations
message DeleteDocumentRequest {
  string document_uuid = 1;
  optional int32 version = 2; // If not specified, deletes all versions
  string deleted_by = 3;
  string deleted_by_type = 4;
  string session_id = 5;
}

message DeleteDocumentResponse {
  bool success = 1;
  string message = 2;
  int32 versions_deleted = 3;
}

// Health check
message HealthCheckRequest {}

message HealthCheckResponse {
  bool healthy = 1;
  string status = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// Service definition
service DocumentStoreService {
  // Document CRUD operations
  rpc PutDocument(PutDocumentRequest) returns (PutDocumentResponse);
  rpc PutDocuments(PutDocumentsRequest) returns (PutDocumentsResponse);
  rpc GetDocument(GetDocumentRequest) returns (GetDocumentResponse);
  rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse);
  rpc ListDocumentVersions(ListDocumentVersionsRequest) returns (ListDocumentVersionsResponse);
  rpc DeleteDocument(DeleteDocumentRequest) returns (DeleteDocumentResponse);
  
  // Tag operations
  rpc TagDocument(TagDocumentRequest) returns (TagDocumentResponse);
  rpc ListActiveTags(ListActiveTagsRequest) returns (ListActiveTagsResponse);
  rpc ListTagEvents(ListTagEventsRequest) returns (ListTagEventsResponse);
  
  // Session context
  rpc GetSessionContext(GetSessionContextRequest) returns (GetSessionContextResponse);
  
  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}
