#!/bin/bash
# unhinged - Unified entry point for Unhinged dual-system architecture
# 
# @llm-type unified-entry-point
# @llm-legend Single entry point implementing cognitive command grouping for dual-system architecture
# @llm-key Provides normal user (Toyota) and power user (car enthusiast) experiences through progressive disclosure
# @llm-map Routes commands to appropriate subsystems while hiding implementation complexity
# @llm-axiom Entry points should teach system architecture through experience, not command options
# @llm-contract Respects user mental models: unified system for normal users, component awareness for power users
# @llm-token unhinged: unified entry point with cognitive command structure

set -e

# Project root detection
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$SCRIPT_DIR"

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Help system
show_help() {
    cat << EOF
${CYAN}Unhinged${NC} - Native Graphics Platform with Dual-System Architecture

${YELLOW}USAGE:${NC}
  unhinged [COMMAND] [OPTIONS]
  unhinged                    # Default: start complete system (normal user)

${YELLOW}SYSTEM COMMANDS:${NC}
  start                       Start complete dual-system architecture
  stop                        Stop complete dual-system gracefully
  status                      Show system health and component status
  logs                        Stream system logs from all components
  restart                     Restart complete system (stop + start)

${YELLOW}DEVELOPMENT COMMANDS:${NC}
  dev                         Start development mode with enhanced tools
  dev-clean                   Clean development artifacts and caches
  dev-watch                   Watch files and rebuild on changes
  dev-shell                   Open development shell with environment

${YELLOW}GRAPHICS COMMANDS:${NC}
  graphics build              Build native C graphics library
  graphics test               Run graphics test suite
  graphics run [app]          Run graphics application
  graphics clean              Clean graphics build artifacts

${YELLOW}BUILD COMMANDS:${NC}
  build list                  List available build targets
  build [target]              Build specific target
  build generate              Generate all design system artifacts
  build clean                 Clean build artifacts

${YELLOW}ADMIN COMMANDS:${NC}
  admin services list         List all running services
  admin services check        Health check all services
  admin cache clear           Clear all system caches
  admin reset                 Factory reset (removes all data)

${YELLOW}DEBUG COMMANDS:${NC}
  debug status                Show detailed system state
  debug vm-shell              Access Alpine VM shell
  debug trace [component]     Enable debug tracing
  debug logs [component]      Show component-specific logs

${YELLOW}EXAMPLES:${NC}
  unhinged                    # Normal user: just start the system
  unhinged dev                # Power user: development mode
  unhinged graphics test      # Test graphics subsystem
  unhinged debug vm-shell     # Access VM for debugging

${YELLOW}MENTAL MODELS:${NC}
  ${GREEN}Normal User:${NC}     "There is one thing called Unhinged"
  ${BLUE}Power User:${NC}      "Components work together: GTK4 + Alpine VM + Services"

For more information, visit: https://github.com/brl053/Unhinged
EOF
}

# Command routing functions
cmd_start() {
    log_info "Starting Unhinged dual-system architecture..."
    cd "$PROJECT_ROOT"

    # Phase 1: Essential services via service launcher
    log_info "üöÄ Launching services..."
    if python3 control/service_launcher.py --timeout 120; then
        log_success "Essential services started"
    else
        log_warning "Some services failed to start - continuing with available services"
    fi

    # Phase 2: GUI and VM via existing Makefile
    log_info "üéÆ Launching GUI..."
    exec make start-gui "$@"
}

cmd_stop() {
    log_info "Stopping Unhinged system gracefully..."
    cd "$PROJECT_ROOT"

    # Graceful shutdown sequence
    log_info "üõë Shutting down services..."
    python3 control/service_launcher.py --stop || log_warning "Some services may still be running"
    make down 2>/dev/null || true

    log_info "Stopping development services..."
    make dev-down 2>/dev/null || true

    log_info "Cleaning up processes..."
    pkill -f "python3.*desktop_app.py" 2>/dev/null || true
    pkill -f "unhinged" 2>/dev/null || true

    log_success "Unhinged system stopped gracefully"
}

cmd_status() {
    log_info "Checking Unhinged system status..."
    cd "$PROJECT_ROOT"

    # Service status via service launcher
    log_info "üìä Service Status:"
    python3 control/service_launcher.py --status

    # Overall system status via Makefile
    echo ""
    log_info "üñ•Ô∏è  System Status:"
    exec make status "$@"
}

cmd_status() {
    log_info "Checking Unhinged system status..."
    cd "$PROJECT_ROOT"

    # Service status via service launcher
    log_info "üìä Service Status:"
    if [ -f "build/python/venv/bin/python" ]; then
        build/python/venv/bin/python control/service_launcher.py --status
    else
        python3 control/service_launcher.py --status
    fi

    # Overall system status via Makefile
    echo ""
    log_info "üñ•Ô∏è  System Status:"
    exec make status "$@"
}

cmd_logs() {
    log_info "Streaming system logs..."
    cd "$PROJECT_ROOT"
    exec make logs "$@"
}

cmd_restart() {
    log_info "Restarting Unhinged system..."
    cmd_stop
    sleep 2
    cmd_start "$@"
}

cmd_dev() {
    log_info "Starting development mode with enhanced tools..."
    cd "$PROJECT_ROOT"
    export DEV_MODE=1
    exec make dev "$@"
}

cmd_dev_clean() {
    log_info "Cleaning development artifacts..."
    cd "$PROJECT_ROOT"
    exec make clean "$@"
}

cmd_dev_watch() {
    log_info "Starting file watcher for continuous building..."
    cd "$PROJECT_ROOT"
    exec make watch "$@"
}

cmd_dev_shell() {
    log_info "Opening development shell..."
    cd "$PROJECT_ROOT"
    # TODO: Implement development shell with environment
    exec bash
}

cmd_graphics() {
    local subcmd="${1:-help}"
    shift || true
    
    case "$subcmd" in
        build)
            log_info "Building native C graphics library..."
            cd "$PROJECT_ROOT"
            exec make graphics-build "$@"
            ;;
        test)
            log_info "Running graphics test suite..."
            cd "$PROJECT_ROOT"
            exec make graphics-hello-world "$@"
            ;;
        run)
            log_info "Running graphics application..."
            cd "$PROJECT_ROOT"
            exec make graphics-example "$@"
            ;;
        clean)
            log_info "Cleaning graphics build artifacts..."
            cd "$PROJECT_ROOT"
            exec make graphics-clean "$@"
            ;;
        help|*)
            echo "Graphics subsystem commands:"
            echo "  unhinged graphics build    Build graphics library"
            echo "  unhinged graphics test     Run graphics tests"
            echo "  unhinged graphics run      Run graphics application"
            echo "  unhinged graphics clean    Clean graphics artifacts"
            ;;
    esac
}

cmd_build() {
    local subcmd="${1:-help}"
    shift || true
    
    case "$subcmd" in
        list)
            log_info "Listing available build targets..."
            cd "$PROJECT_ROOT"
            exec make list "$@"
            ;;
        generate)
            log_info "Generating all design system artifacts..."
            cd "$PROJECT_ROOT"
            exec make generate "$@"
            ;;
        clean)
            log_info "Cleaning build artifacts..."
            cd "$PROJECT_ROOT"
            exec make clean "$@"
            ;;
        help|*)
            if [ "$subcmd" != "help" ] && [ -n "$subcmd" ]; then
                # Try to build specific target
                log_info "Building target: $subcmd"
                cd "$PROJECT_ROOT"
                exec make "$subcmd" "$@"
            else
                echo "Build system commands:"
                echo "  unhinged build list        List available targets"
                echo "  unhinged build [target]    Build specific target"
                echo "  unhinged build generate    Generate all artifacts"
                echo "  unhinged build clean       Clean build artifacts"
            fi
            ;;
    esac
}

cmd_admin() {
    local subcmd="${1:-help}"
    shift || true
    
    case "$subcmd" in
        services)
            local action="${1:-list}"
            shift || true
            case "$action" in
                list)
                    log_info "Listing running services..."
                    cd "$PROJECT_ROOT"
                    exec make service-status "$@"
                    ;;
                check)
                    log_info "Health checking all services..."
                    cd "$PROJECT_ROOT"
                    exec make health "$@"
                    ;;
                *)
                    echo "Service management commands:"
                    echo "  unhinged admin services list     List services"
                    echo "  unhinged admin services check    Health check"
                    ;;
            esac
            ;;
        cache)
            local action="${1:-help}"
            case "$action" in
                clear)
                    log_warning "Clearing all system caches..."
                    cd "$PROJECT_ROOT"
                    exec make clean "$@"
                    ;;
                *)
                    echo "Cache management commands:"
                    echo "  unhinged admin cache clear    Clear all caches"
                    ;;
            esac
            ;;
        reset)
            log_error "Factory reset will remove all data!"
            read -p "Are you sure? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                cd "$PROJECT_ROOT"
                exec make clean-all "$@"
            else
                log_info "Reset cancelled"
            fi
            ;;
        help|*)
            echo "Administration commands:"
            echo "  unhinged admin services list     List running services"
            echo "  unhinged admin services check    Health check services"
            echo "  unhinged admin cache clear       Clear all caches"
            echo "  unhinged admin reset             Factory reset (careful!)"
            ;;
    esac
}

cmd_debug() {
    local subcmd="${1:-help}"
    shift || true
    
    case "$subcmd" in
        status)
            log_info "Showing detailed system state..."
            cd "$PROJECT_ROOT"
            exec make status "$@"
            ;;
        vm-shell)
            log_info "Accessing Alpine VM shell..."
            # TODO: Implement VM shell access
            log_warning "VM shell access not yet implemented"
            ;;
        trace)
            local component="${1:-system}"
            log_info "Enabling debug tracing for: $component"
            # TODO: Implement debug tracing
            log_warning "Debug tracing not yet implemented"
            ;;
        logs)
            local component="${1:-all}"
            log_info "Showing logs for: $component"
            cd "$PROJECT_ROOT"
            exec make logs "$@"
            ;;
        help|*)
            echo "Debug commands:"
            echo "  unhinged debug status           Detailed system state"
            echo "  unhinged debug vm-shell         Access VM shell"
            echo "  unhinged debug trace [comp]     Enable debug tracing"
            echo "  unhinged debug logs [comp]      Component logs"
            ;;
    esac
}

# Main command dispatcher
main() {
    local command="${1:-start}"
    shift || true
    
    case "$command" in
        # System commands
        start)          cmd_start "$@" ;;
        stop)           cmd_stop "$@" ;;
        status)         cmd_status "$@" ;;
        logs)           cmd_logs "$@" ;;
        restart)        cmd_restart "$@" ;;
        
        # Development commands
        dev)            cmd_dev "$@" ;;
        dev-clean)      cmd_dev_clean "$@" ;;
        dev-watch)      cmd_dev_watch "$@" ;;
        dev-shell)      cmd_dev_shell "$@" ;;
        
        # Graphics commands
        graphics)       cmd_graphics "$@" ;;
        
        # Build commands
        build)          cmd_build "$@" ;;
        
        # Admin commands
        admin)          cmd_admin "$@" ;;
        
        # Debug commands
        debug)          cmd_debug "$@" ;;
        
        # Help and unknown commands
        help|--help|-h) show_help ;;
        *)
            log_error "Unknown command: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Execute main function with all arguments
main "$@"
