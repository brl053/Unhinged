# Component Specification Meta-Schema
# @llm-type schema
# @llm-legend Component specification meta-schema defining platform-agnostic component structure
# @llm-key Validates YAML component specifications ensuring consistency across all platform generators
# @llm-map Central schema authority for design system component generation architecture
# @llm-axiom Component specifications must be platform-agnostic and describe WHAT not HOW
# @llm-contract Defines required fields, validation rules, and token integration patterns for components
# @llm-token component-schema: Meta-schema for platform-agnostic component specifications

schema_version: "1.0.0"

component_specification:
  required_fields:
    - id                    # Unique identifier (kebab-case)
    - name                  # Human-readable name
    - category              # primitive|container|complex|system
    - description           # Purpose and usage
    - interface             # Properties, states, events
    - styling               # Design token mappings
    - composition           # Layout and containment rules
    - accessibility         # A11y requirements

  field_definitions:
    id:
      type: "string"
      pattern: "^[a-z][a-z0-9-]*[a-z0-9]$"
      description: "Kebab-case unique identifier"
    
    name:
      type: "string"
      description: "Human-readable component name"
    
    category:
      type: "enum"
      values: ["primitive", "container", "complex", "system"]
      description: |
        - primitive: Atomic UI elements (button, input, text)
        - container: Layout/grouping (modal, card, panel)
        - complex: Stateful/composed (editor, table, form)
        - system: Meta-components (modal system, notifications)
    
    interface:
      type: "object"
      required_fields: ["properties", "states", "events"]
      description: "Platform-agnostic component interface"
      
      properties:
        type: "object"
        description: "Configurable component properties"
        property_definition:
          required_fields: ["type", "description"]
          optional_fields: ["default", "required", "values", "min", "max"]
          
          type:
            type: "enum"
            values: ["string", "number", "boolean", "enum", "object", "array"]
          
          required:
            type: "boolean"
            default: false
          
          values:
            type: "array"
            description: "Valid values for enum type"
      
      states:
        type: "object"
        description: "Visual/behavioral states component can be in"
        state_definition:
          required_fields: ["description"]
          optional_fields: ["visual_tokens", "triggers", "transitions"]
          
          visual_tokens:
            type: "array"
            description: "Design tokens that change in this state"
          
          triggers:
            type: "array"
            description: "Events that cause transition to this state"
      
      events:
        type: "object"
        description: "Events component can emit"
        event_definition:
          required_fields: ["description"]
          optional_fields: ["payload"]
          
          payload:
            type: "object"
            description: "Data structure emitted with event"
    
    styling:
      type: "object"
      description: "Design token mappings for visual appearance"
      required_fields: ["default_state"]
      optional_fields: ["size_overrides", "semantic_overrides", "state_overlays"]
      
      token_reference:
        pattern: "^[a-z][a-z0-9_]*\\.[a-z][a-z0-9_]*$"
        description: "Reference to design token (e.g., 'action.primary')"
    
    composition:
      type: "object"
      description: "Layout and containment constraints"
      required_fields: ["is_leaf"]
      optional_fields: ["can_contain", "required_context", "layout_type"]
      
      is_leaf:
        type: "boolean"
        description: "True if component cannot contain children"
      
      can_contain:
        type: "array"
        description: "List of component categories this can contain"
      
      layout_type:
        type: "enum"
        values: ["box", "grid", "stack", "overlay", "flow", "custom"]
    
    accessibility:
      type: "object"
      description: "Accessibility requirements and capabilities"
      required_fields: ["keyboard_support", "screen_reader_label", "focus_indicator"]
      
      keyboard_support:
        type: "boolean"
        description: "Component supports keyboard interaction"
      
      screen_reader_label:
        type: "enum"
        values: ["automatic", "required", "optional", "none"]
      
      focus_indicator:
        type: "enum"
        values: ["required", "optional", "none"]
      
      contrast_requirement:
        type: "enum"
        values: ["WCAG_AA", "WCAG_AAA", "none"]
        default: "WCAG_AA"

# Component Categories

categories:
  primitive:
    description: "Atomic UI elements that cannot be broken down further"
    examples: ["button", "input", "text-display", "icon", "badge"]
    characteristics:
      - "Single responsibility"
      - "No child components"
      - "Direct user interaction"
  
  container:
    description: "Layout and grouping components"
    examples: ["modal", "card", "panel", "sidebar", "list-container"]
    characteristics:
      - "Manages layout of children"
      - "Provides visual grouping"
      - "May have background/borders"
  
  complex:
    description: "Stateful components with rich interaction"
    examples: ["text-editor", "code-editor", "graph-editor", "form", "table"]
    characteristics:
      - "Complex internal state"
      - "Multiple interaction modes"
      - "May compose multiple primitives"
  
  system:
    description: "Meta-components that manage other components"
    examples: ["modal-system", "notification-system", "tooltip-system"]
    characteristics:
      - "Manages component lifecycle"
      - "Provides global coordination"
      - "Often singleton instances"

# Design Token Integration

token_integration:
  description: |
    Components reference design tokens, never hardcode values.
    Generators resolve tokens to platform-specific values at build time.
  
  token_categories:
    colors: "action.*, feedback.*, surface.*, text.*, border.*, interactive.*"
    spacing: "sp.*, radius.*"
    typography: "type.*, weight.*"
    elevation: "elevation.*, layers.*"
    motion: "duration.*, easing.*"
  
  resolution_strategy:
    description: "Generators resolve tokens during code generation"
    example: |
      YAML: background: "action.primary"
      GTK4: background-color: #0066CC (light) / #4D94FF (dark)
      React: backgroundColor: theme.colors.action.primary
      C: bg_color = ACTION_PRIMARY_COLOR

# Platform Generator Requirements

generator_interface:
  description: "All platform generators must implement these methods"
  required_methods:
    - "generate_component(spec) -> code"
    - "generate_state_handler(spec) -> code"
    - "generate_event_handler(spec) -> code"
    - "resolve_token(token_path) -> platform_value"
  
  platform_examples:
    gtk4:
      language: "Python"
      base_class: "Gtk.Widget"
      state_management: "GObject properties"
      event_system: "GObject signals"
    
    react:
      language: "TypeScript"
      base_class: "React.Component"
      state_management: "useState hooks"
      event_system: "Callback props"
    
    kotlin:
      language: "Kotlin"
      base_class: "View"
      state_management: "LiveData"
      event_system: "Listeners"
    
    c:
      language: "C"
      base_class: "struct"
      state_management: "Function pointers"
      event_system: "Callback functions"

# Validation Rules

validation:
  component_id:
    - "Must be unique across all components"
    - "Must be valid identifier in all target languages"
    - "Should be descriptive and concise"
  
  token_references:
    - "All token references must exist in design system"
    - "Token categories must match component usage"
    - "No hardcoded values allowed"
  
  state_consistency:
    - "All states must be reachable"
    - "State transitions must be logical"
    - "Default state must be defined"
  
  accessibility:
    - "Interactive components must support keyboard"
    - "Focus indicators required for keyboard navigation"
    - "Screen reader labels required for complex components"
